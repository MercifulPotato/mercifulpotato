Item(by='ekidd', descendants=None, kids=None, score=None, time=1601737296, title=None, item_type='comment', url=None, parent=24672408, text='There are a couple of key differences between the two ecosystems here which affect the tradeoffs:<p>1. Rust&#x27;s cargo tool manages dependencies, it&#x27;s almost universally used, and it does a good job. It&#x27;s most similar to a mature Pipenv.<p>2. The Rust community normally does a good job with semver <i>and</i> the type checker makes it much easier to notice breaking API changes.<p>3. The Rust standard library has a strict policy of not breaking backwards compatibility.<p>4. There are tools like cargo-audit, cargo-geiger, cargo-crev and cargo-deny that can be used to enforce various policies across all dependencies.<p>5. Rust allows building single-file executables, so you don&#x27;t need to distribute dependencies at runtime.<p>So in practice, people tend to standardize one or two good solutions outside of the standard library, and very occasionally the best ideas will make it into the standard library. It&#x27;s partly a philosophical difference, but the entire ecosystem of tools works together to support that philosophy.')