Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1610759607, title=None, item_type='comment', url=None, parent=25798064, text='I have read this EWD several times now, I think he makes a solid case for:<p><pre><code>  a &lt;= x &lt; b\n</code></pre>\nover the other three forms in the <i>general</i> case. But he fails to make an argument for the <i>special</i> case of 0-based indexing vs 1-based.<p>When restricted to just the discussion of 1-based and 0-based:<p>1. The experience report doesn&#x27;t seem to apply as it&#x27;s about the <i>general</i> notation advantage, not the specific cases of 0- or 1-based indexes. We would need additional experience reports about those (which I suspect would tend to favor 0-based).<p>2. We don&#x27;t need to worry about calculating the range size, because it&#x27;s obvious for both cases. <i>Yes</i>, (a) is better if you&#x27;re using 0-based indexes and it&#x27;s awkward if you&#x27;re using 1-based. But (c) is better if you&#x27;re using 1-based and awkward if you&#x27;re using 0-based. (a) leaves the range size of a 0-based index in the range description, and (c) leaves the range size of a 1-based index in the range description. The argument becomes a wash, neither is obviously better than the other on this basis.<p>3. The argument that (a) is better because you can see if two ranges is a persuasive one. But how do you have two <i>adjacent</i> ranges when they both have the same starting position? It&#x27;s irrelevant to the case for either 0-based or 1-based arrays.<p>His final argument is that:<p><pre><code>  1 &lt;= x &lt; n+1\n</code></pre>\nis more awkward than<p><pre><code>  0 &lt;= x &lt; n\n</code></pre>\nBut he doesn&#x27;t even present the alternative:<p><pre><code>  1 &lt;= x &lt;= n\n</code></pre>\nis less awkward than:<p><pre><code>  0 &lt;= x &lt;= n-1\n</code></pre>\nAgain, a non-argument because it assumes the outcome he wants, that 0-based is fundamentally better.<p>Now, all that said 0-based has other advantages. But Dijkstra fails to address those other advantages. Ultimately, though, as I said in the other discussion, your language shouldn&#x27;t restrict your range description options to either.<p>&gt; You really should accept his argument though. It&#x27;s quite persuasive.<p>I don&#x27;t think anyone should accept the argument because it is <i>not</i> persuasive. There are much better arguments for 0-based indexing than this EWD. We should scrap flawed arguments when we have much better ones available. The best part of the EWD is the description of which range notation is &quot;better&quot;, but not the part about 0-based indexing.')