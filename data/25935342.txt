Item(by='KaiserPro', descendants=None, kids=None, score=None, time=1611788373, title=None, item_type='comment', url=None, parent=25933121, text='Having recently started a script that avoided OO because I wrongly assumed that its was going to be 4 functions and done, I disagree.<p>I don&#x27;t care about inheritance, that&#x27;s just a way for someone to trip you up and make them feel smug about being &quot;elegant&quot;<p>I don&#x27;t care for people trying to hide stuff with self._hiddenThing. Its python, nothing is hidden. If I want to reach in and grab your class by the ankles, prepending a &quot;_&quot; isn&#x27;t going to stop me.<p>I agree wholeheartedly with dataclasses. I just wish that type annotations were actually enforced at run time. At the moment they are only really useful if you have pyre turned up to 11 (bye bye productivity) or have an IDE that understands type hints.<p>but, the hill I will die on is this: storing class state in self.blah. It is correct and proper to do that in a class, it limits the amount of args I have to shove into a function&#x2F;method, it also allows me to pull out and check things before I do them. Yes they can be abused. Yes it means that you need to call functions in order. Yes it means you have to be more defensive about missing state.<p>But you need to be careful about that anyway. with minimal OO you can avoid a lot of typing and nasty verbose function args in python.')