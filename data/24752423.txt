Item(by='sai_c', descendants=None, kids=[24754367], score=None, time=1602490608, title=None, item_type='comment', url=None, parent=24752174, text='I think (for this discussion) we should have a more clear definition of embedded.<p>Yes, ARM processors are used more and more, but there are really A LOT of embedded systems out there, which are still, for example, 8 bit. As an embedded dev, who is using pretty much everything from 8 to 64 bit, the kind of memory safety errors you talk about I have yet to see with on anything based on (say) a 8051 or PIC.\nOn a system without OS and without dynamic memory allocation, the borrow checker does not buy you much. \nIt&#x27;s a different story with an ARM processor and an OS (real-time or not does not matter).<p>Of course Rust has a more powerful type system, but my experience is, that the preferences for a C type type system dominate the embedded world. Not because it is better or simpler, but because most embedded devs actually like low level. They are simply not interested in type driven development (yes it&#x27;s just their personal taste) and its benefits.<p>Or let me say it like this. I see two kinds of embedded devs:<p>- Those who abstract way the problem (&quot;It&#x27;s all just a big char array.&quot;, &quot;It&#x27;s all just ints.&quot;, &quot;It&#x27;s all just data structures&quot;).<p>- Those who abstract away the machine (&quot;It&#x27;s all just objects.&quot;, &quot;It&#x27;s all just types.&quot;).<p>Right now, my observations tell me that the first group is still dominating. Time will tell if this is going to change.')