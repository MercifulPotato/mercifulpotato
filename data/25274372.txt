Item(by='nneonneo', descendants=None, kids=None, score=None, time=1606897813, title=None, item_type='comment', url=None, parent=25272957, text='Heh, cool. There&#x27;s a bunch of bugs here: the FEN parser accepts totally malformed stuff, which desynchronizes the internal state and leads to some odd behaviour (as far as I can tell, this is what causes it to erroneously output no moves for a reasonable position), and Stockfish will pretty happily analyze nonsensical positions and explode. I looked into the latter issue, which can be triggered even with &quot;mostly-valid&quot; FEN input, such as the &quot;fixed&quot; FEN from &quot;The Endgame&quot;:<p><pre><code>    position fen 4kb1r&#x2F;B2pqBpp&#x2F;3P1n2&#x2F;Q7&#x2F;PP2PPP1&#x2F;1K4RP&#x2F;8&#x2F;8 w - - 0 1\n    go searchmoves\n</code></pre>\nWith a debug build, Stockfish crashes immediately on the following line (Position::do_move, position.cpp:726):<p><pre><code>    assert(type_of(captured) != KING);\n</code></pre>\nAs noted in the article, the position is invalid as the black king is checked on white&#x27;s turn. During move evaluation, the king capture is considered as a possible move for white, which crashes in the assertion.<p>In a release build, without that assumption, Stockfish happily continues examining this line without a black king present on the board, and somewhere deep in the evaluation attempts to locate the black king (evaluate.cpp:540):<p><pre><code>    const Square ksq = pos.square&lt;KING&gt;(Us);\n</code></pre>\nThis fails, producing a ksq value which is undefined: it uses tzcnt, which returns an &quot;undefined&quot; value if the register is zero (and it is, because there is no king so the bitboard is zero). The likely value is 0x40, which is out of bounds; any later operation that tries to index by this will explode in exciting ways. For example, in the same evaluation function, we have<p><pre><code>    b2 = attacks_bb&lt;BISHOP&gt;(ksq, pos.pieces() ^ pos.pieces(Us, QUEEN));\n</code></pre>\nwhich indexes an array called BishopMagics with ksq; this goes out of bounds and accesses a wild pointer.<p>I was unable to reproduce the second crash, &quot;Win by Segfault Attack&quot;.')