Item(by='Kranar', descendants=None, kids=[25798580, 25798404, 25798826, 25798345], score=None, time=1610754179, title=None, item_type='comment', url=None, parent=25797025, text='I look forward to seeing Zig, but this is a pretty bad explanation and is wrong in fundamental ways:<p>&gt;This means you can be sure that the following code calls only foo() and then bar().<p>No you can&#x27;t be sure of this. Zig has different rules about error handling depending on what mode you build your software in, and it&#x27;s not clear or rigorously specified how different modules built using different modes interact with one another when it comes to error handling.<p>So that initial line:<p><pre><code>    var a = b + c.d;\n</code></pre>\nThat may end up causing a panic depending on the type of b and c.d, or it might result in undefined behavior, in which nothing is guaranteed. You also need to know something about the type of c, since if c is a pointer type then it could be a dangling reference.<p>As for hidden allocations, the only hidden allocation I know of was C&#x27;s now deprecated runtime length array. C++ doesn&#x27;t have this feature and I don&#x27;t know of any core language features in C++ that allocate dynamic memory any longer. Some older compilers used dynamic memory for exception handling but modern C++ compilers preallocate memory for all of the standard exception types. I want to say that Rust also doesn&#x27;t dynamically allocate memory but I&#x27;m not 100% sure about that. D does a boat load of dynamic memory allocation in the core language which is rather unfortunate.<p>For bare metal support, Rust has first class support for no standard library. C++ does not but in practice clang&#x2F;GCC and MSVC all support compiling without it.<p>As for being a portable language, that&#x27;s a nice goal that Zig can establish for itself, but that&#x27;s all it is right now.<p>For build system... well C++ has an atrocious build system, there is no justification for it nor is there any defending it. Good on Zig for wanting to make the entire developer experience pleasant and making package management a core priority.<p>And finally for simplicity, that word really doesn&#x27;t mean anything anymore. Everyone calls their project &quot;simple&quot; and everyone has a different meaning for it. Zig can claim its simple, maybe it&#x27;s true, maybe it isn&#x27;t, I think that&#x27;s something that can only be decided if and after it gets some degree of adoption.')