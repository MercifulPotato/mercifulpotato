Item(by='MaulingMonkey', descendants=None, kids=None, score=None, time=1610834650, title=None, item_type='comment', url=None, parent=25804606, text='&gt; What Zig offers is the ability to write ordinary Zig and call that from C.<p>You say that, but Zig appears to suffer from the exact same problem you point out in my Rust code:<p><pre><code>    export\n</code></pre>\n<a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Exporting-a-C-Library" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#Exporting-a-C-Libr...</a><p>Perhaps I&#x27;m mistaken.  How do I directly call Zig&#x27;s `std.debug.print` from C?  Or Timestamp.unixEpoch as defined here?  <a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Doc-comments" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Doc-comments</a><p>There&#x27;s a bunch of rust crates containing macros, binaries, and build scripts that cut down on Rust&#x27;s boilerplate as well.  While there are some rough edges and room for further improvement, I am far happier with Rust&#x27;s C interop than I am with the C interop of most other languages.  Zig might have a touch more polish, but the bit I originally quoted made Rust sound like it was a good order of magnitude worse than Zig at C interop, which I just can&#x27;t agree with.<p>One of the very first things I did when learning Rust was write a test library and drop it into an existing C++ codebase.  I&#x27;ve also experimented heavily with cross compiling it to pretty much anything I can get my hands on.  It was a good time, not a bad one.')