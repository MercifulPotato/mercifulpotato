Item(by='lmm', descendants=None, kids=None, score=None, time=1611812965, title=None, item_type='comment', url=None, parent=25938130, text='That&#x27;s a perfect example; in my experience that kind of RNG state <i>is</i> global (or at least, it has all the problems of traditional global state). Potentially any object might behave in a strange way, because it contains a reference to that RNG (hidden from you): you might find a sequence of calls that usually, but not always, reproduces a bug in test, and then it turns out that it depends on whether other tests running in parallel are affecting the RNG state. Essentially any test you write that&#x27;s bigger than a single-class mock test has to be aware of the RNG and stub it out, even if you&#x27;re testing something that on the face of it has nothing to do with RNG.<p>In a functional program you would make the RNG state an explicit value, and pass it where it&#x27;s used (but not where it isn&#x27;t - so there might be large program regions that don&#x27;t have access to it). It&#x27;ll be an explicit part of the top-level state of your program. I&#x27;d argue that that&#x27;s not actually any more global - or at least, it causes fewer problems - than the OO approach.')