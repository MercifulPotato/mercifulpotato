Item(by='b212', descendants=None, kids=[25122394], score=None, time=1605606456, title=None, item_type='comment', url=None, parent=25121416, text='I&#x27;m a &quot;senior&quot; dev and here&#x27;s my git skillset:<p><pre><code>  git clone [repo] (download existing project)\n\n  git init (start a new project)\n\n  git checkout -b [branchname] (create a new branch)\n\n  git checkout [branchname] (jump between branches)\n\n  git checkout -- [filename] (reset changes in given file)\n\n  git reset --hard (reset evertyhing)\n\n  git clean -f -d (remove leftovers after reset --hard)\n\n  git status (see changed files)\n\n  git diff (see changed lines)\n\n  git add .&#x2F;[filename] (prepare file(s) for saving)\n\n  git commit -m [commitname] (save changes)\n\n  git push origin [branchname] (push changes to remote server)\n\n  git merge [branch] (merge two branches)\n</code></pre>\nI&#x27;ve been using these commands exclusively for the last 12 years or so. These are the ones I know by heart. If I was able to get by only using these than it&#x27;s likely you could also survive knowing nothing more.<p>Rebase is still confusing at times. I did cherrypicking multiple times, but usually Google that just to be sure.<p>Squashed a few times, but this I also Google.<p>Reverted a commit a few times too, Googled.<p>Changing commit message and unstaging is more common, but still do it so rarely I have to Google it as there&#x27;s no point in memorising (one day might finally remember them, right now I know it&#x27;s reset soft and amend, not sure about syntax).<p>I do not use git pop and git stash because microcommiting is better and less confusing and leaves no trash behind (just my opinion, might be wrong).<p>Maybe I&#x27;ve missed something but if you&#x27;re taking it slow and do not make any serious fuckups with git it&#x27;s all about add&#x2F;commit&#x2F;push, 99% of the time. I know I might seem lame to most of you as there are more git ninjas on HN than anywhere else, but I honestly just did not need any other commands and I&#x27;ve been working for companies as big as 500 devs.<p>It&#x27;s a whole different story once you do something wrong, my strategy is to think 10x about everything I type after &#x27;git&#x27; and never had any issues, but when they happen - I just Google again. Worked every time, so far. I feel although I know shit about git I&#x27;m pretty confident using it, I&#x27;ve seen many mid devs who still have trouble with mental models of merging stuff, people merging &quot;dev&quot; branch to feature branches etc. is something that happens to other folks quite often.<p>To sum things up - I think git is extremely hard if you want to use it from top of your head to fix complicated and not that common issues. If you just want to use it, survive and not necessarily understand all the mechanics behind it - it&#x27;s as easy as HTML.<p>I sympathise with the article, though I&#x27;m not sure git is to blame here - if you have to revert a branch from remote once in 2 years there&#x27;s no way you&#x27;re going to remember how to do that. Without UI you will need to search for the solution every time, and it does not matter what command line tool or  version-control system you use.')