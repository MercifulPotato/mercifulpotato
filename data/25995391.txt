Item(by='inskey_', descendants=None, kids=[25995505], score=None, time=1612220850, title=None, item_type='comment', url=None, parent=25994582, text='I think the article to which the linked article is responding is a bit of a broken clock... that is, it&#x27;s correct about operator overloading being detrimental, but their reasoning is incorrect.<p>The questions about allocation and garbage collection are irrelevant for the reasons you mention. But operator overloading allows problematic code for another reason.<p>`AddMatrices` is unambiguous; clearly its operands should be matrices, and they should be added according to matrix arithmetic rules (and, like you said, if the underlying code is buggy, it would also be buggy as an overloaded operator). The problem is that `+` <i>is</i> ambiguous. And if you&#x27;re dealing with matrices, you&#x27;re probably looking at code written by a math person, meaning it&#x27;s going to be shorthand-heavy and the operands&#x27; names are unlikely to make the variables&#x27; types clear.<p>But at least in the matrix vs. scalar case, you have a similar set of axioms, so changing `x + m` to `m + x` should not alter the result regardless of the types. This is not so when people shove even more meanings onto a single operator, like `+` for string concat. String concatenation doesn&#x27;t commute. Furthermore, different languages have different rules for &quot;adding&quot; one string and one number, so it causes needless friction for polyglots.<p>I&#x27;m not saying I prefer `concat(s1, s2)`, because I like my operators. I&#x27;m saying I prefer something like Raku&#x27;s `~`. As an added bonus, you get automatic and <i>consistent</i> coercions. You know exactly what the operation is and how the operands will be treated when you see `~`, with no need to find the operand types.<p>In conclusion, operator overloading is a half-assing of full-fledged user-defined operators, and it encourages programmers to shove disparate functionalities (often with different axioms) into the same operator. Either let people write traditional functions, or give them the ability to create their own operators so they&#x27;re not tempted to make a mess of the default set of operators.')