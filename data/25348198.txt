Item(by='munificent', descendants=None, kids=None, score=None, time=1607447676, title=None, item_type='comment', url=None, parent=25341233, text='<i>&gt; So, rather than calling func(some(3)), you&#x27;d just call func(3) and the compiler would automatically wrap it up.</i><p>You can do implicit conversions and that helps somewhat, but it&#x27;s not quite the same as actual subtyping. In many cases, there&#x27;s no natural or efficient way to insert that conversion so you still run into restrictions. For example, in a language with nullable types you can write:<p><pre><code>    int sumPresentValues(Iterable&lt;int?&gt; values) {\n      var result = 0;\n      for (var value in values) if (value != null) result += value;\n      return result;\n    }\n\n    main() {\n      Iterable&lt;int&gt; values = [1, 2, 3, 4];\n      print(sumPresentValues(values)); &#x2F;&#x2F; &lt;--\n    }\n</code></pre>\nThe marked line is passing an `Iterable&lt;int&gt;` to a function expecting an `Iterable&lt;int?&gt;`. That works because `int` is an actual subtype of `int?` with no conversion required. With a boxing step, you&#x27;d need to somehow wrap the entire collection in one that does the conversion.')