Item(by='dragontamer', descendants=None, kids=[25735463], score=None, time=1610390038, title=None, item_type='comment', url=None, parent=25733145, text='&gt; Also, he’s not even talking about clock downscaling<p>Quote the post in question:<p>&gt; not with some AVX512 power virus that takes away top frequency (because people ended up using it for memcpy!)<p>This is pretty obviously talking about the down-clocking issue.<p>&gt; You’ve basically taken his post out of context, misinterpreted it to be saying something he isn’t, and claiming it’s wrong because some details have changed on the ground after he made it.<p>AVX on Sandy Bridge was worthless: it wasn&#x27;t any faster than SSE because Sandy Bridge was still 128-bit (even on AVX code).<p>Anyone who has followed ISA-development for decades would recognize that the first implementation of an ISA is often sub-par and sub-optimal. It wasn&#x27;t until Haswell before AVX was faster than SSE in practice.<p>AVX512 was first implemented on Xeon Phi. Then it was ported over to servers in Skylake-X. AVX512 from there on remained a &quot;1st generation&quot; product for a few years (much like AVX on Sandy Bridge, before Haswell). From the history of these ISA-extensions, we generally can expect downclocking issues or inefficiencies in the first few implementations.<p>-----<p>In fact, some portions of AVX still remain suboptimal. vgather for example, isn&#x27;t really much faster than standard load&#x2F;stores. Maybe they&#x27;ll be suboptimal forever, or maybe some hypothetical future CPU could optimize it.<p>Either way, I know that I shouldn&#x27;t make an argument based on the &quot;stupidity of vgather&quot; instruction. There&#x27;s an &quot;obvious&quot; optimization that could happen if that instruction becomes popular enough to deserve the transistors. At best, if I were to argue about vgather instructions, I&#x27;d preface it with &quot;current implementations of vgather on Skylake-X&quot;, or similar wording.<p>CPUs change over time, much like programming languages or compilers. I expect a degree of forward-looking ability from experts, not for someone to get lost in the details of current implementations.')