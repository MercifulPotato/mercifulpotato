Item(by='jbay808', descendants=None, kids=[24682675], score=None, time=1601848467, title=None, item_type='comment', url=None, parent=24680967, text='&gt; And then instead of attempting (and failing) to solve the DE analytically through the algebraic methods, apply modern numerical methods (Runge-Kutta, etc).<p>&gt; Because in this way you can obtain solution to any DE with any degree of precision (within reasonable assumptions about complexity of the problem).<p>This is actually an entirely different class of thing, and it&#x27;s important not to confuse them.<p>That&#x27;s kind of like saying, &quot;why would I ever need a function that can compute square roots at run-time? Just tell me whatever number it is you want the square root of, and then using my pocket calculator, we can hard-code its square root to <i>any</i> number of digits of accuracy at <i>compile-time!</i>&quot;<p>A numerical solution is a specific answer only to a specific input; depending on what you&#x27;re trying to do, that might be useful or it might be absolutely useless. An analytical solution is like a short &quot;run-time&quot; program that computes solutions for given parameters, and which can often be reversed and inverted.<p>One example where it&#x27;s especially painful is when you&#x27;re trying to do the inverse: find the correct differential equation that results in a desired solution. (AKA a <i>design problem</i>: you need to design a filter, oscillator, linkage, control law, etc, that results in a desired behaviour). This isn&#x27;t just about ivory tower mathematicians! Engineers need to do this! An analytic solution makes this easy.<p>Imagine if you, an electrical engineer, <i>only</i> know how to be handed a given schematic, break it down into the DE&#x27;s that govern it, and then numerically solve them. You wouldn&#x27;t be able to <i>design</i> a new circuit, just predict the behaviour of existing ones.<p>Imagine needing to run sweeps of SPICE simulations over wide ranges of resistor and capacitor values to design a low-pass filter just because you never learned how an RC filter works. It&#x27;s not that you <i>can&#x27;t</i> do that, and in some cases where you&#x27;re dealing with nonlinear systems it&#x27;s the most pragmatic approach. But that&#x27;s also a very simple example; as the system gets more complex, the curse of dimensionality will make that more and more challenging, while a system of linear differential equations could continue to have exact solutions no matter how many dimensions you have, and furthermore, make it easy to pick out exactly which variables are the most critical.<p>Or maybe you want to find an optimum point. You can do numeric optimization, but again, you&#x27;ll get hit with the same curse of dimensionality if the system gets complicated. But if you have an algebraic solution, you might be able to pick out a formula for it. Then not only will you get the optimum (either its coordinates, or its value), you also get an equation that lets you see, in functional form, how that optimum point moves around as you change the other variables in the problem. Then maybe you can maximize <i>that</i> if you want to, and so on.<p>In other cases, being able to remove even one dimension from the analysis can be used to speed up a numerical solution over all the other parameters. Like if you&#x27;re designing a plane and you have to search over various wingspans, pitches, taper, and so on... if you can get an analytic equation that gives you an optimum wingspan for a given pitch and taper, then you can reduce your search space by an entire dimension, which has a huge impact.')