Item(by='arcturus17', descendants=None, kids=None, score=None, time=1608571334, title=None, item_type='comment', url=None, parent=25495593, text='These points hardly justify how one could casually that drop React land is &quot;crazy-sauce&quot; while recommending NativeScript... There&#x27;s quite a bit to address here:<p>&gt; Needing shouldComponentUpdate to do anything nontrivial<p>I&#x27;d need to see what &quot;non-trivial&quot; means, because I have barely used it in three years pushing React to production, even when I used classes... The article you post is from 2017, it shows an optimization for a very particular scenario (rendering a list of 600 items), which BTW, could be optimized in many different ways... If you&#x27;re telling me Vue never needs this kind of optimization for heavy fronts, I&#x27;d have a very hard time believing you.<p>&gt; The sheer amount of times React has been basically rewritten<p>I honestly wouldn&#x27;t know or care if the library has been &quot;rewritten&quot;, &quot;extended&quot; or &quot;patched&quot; or what they&#x27;ve done to the underlying code - because the core API has not really changed in years... Like I said, hooks extended the library and developers could transition at their own pace or not transition at all.<p>&gt; Every react codebase cargo-culting into Flux (normally through redux) when all you really need most of the time is a simple AJAX call.<p>There are many React codebases that don&#x27;t use Redux. But it&#x27;s still a great state management library (or pattern) for moderately complex UIs. If you have your own state-management solution (including &quot;simple AJAX calls&quot;, whatever that means in the context of Flux or state management), you can use it...<p>&gt; you can get reasonably productive and performant in &lt;1 day after reading all the docs<p>Ditto for React... Any semi-competent dev can be writing at least presentational components with basic network calls in a day... Moderately complex state management and asynchronous actions that affect state take longer to wrap your head around, but I doubt that Vue really simplifies this. UI programming can become naturally complex under certain requirements, and I doubt there is a framework that can completely abstract away this complexity.<p>&gt; Also I want to point out that &quot;react&quot; is almost always react + redux + react-router + webpack at the end of the day<p>That&#x27;s Create-React-App, which completely abstracts the need for pretty much everything except React-Router (10min to setup) and Redux (which nowadays you can substitute with plenty of alternatives). You can be writing business logic and views in 15 minutes, tops. And in a fair amount of cases, CRA stands the test of time, too: I&#x27;ve got code in production for very large customers using it and I know of startups that are building complex products in their second or third year of operations and haven&#x27;t even ejected their app...<p>&gt; the amount of hype and OSS friendly companies<p>Sure, there are network effects - popularity begets popularity. But surely a library or framework can&#x27;t live on hype alone? Look at Angular... React also - mainly, rather - remains popular because it has seen significant improvements to its core and ecosystem.')