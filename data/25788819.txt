Item(by='adrian_b', descendants=None, kids=[25791308], score=None, time=1610703476, title=None, item_type='comment', url=None, parent=25788350, text='Most RISC ISA&#x27;s, including PPC and ARM are much nicer to program in assembly than the Intel&#x2F;AMD x86 ISA.<p>The only exception is with RISC ISA&#x27;s that are far too simple, e.g. the base RISC-V, so they lack many common instructions or addressing modes, forcing the programmer to use sequences of instructions instead of the single instructions of other, more complete, ISA&#x27;s.<p>Most RISC ISA&#x27;s are relatively orthogonal, in the sense that you have to memorize only a small list of things, e.g. of kinds of instructions, kinds of registers, kinds of addressing modes, and then you can express any program as a combination of those few elements.<p>On the other hand, for the Intel&#x2F;AMD x86 ISA, to be able to write an optimized program, you need to know a huge list of things.<p>The original x86 registers are all different having different features, there are not even 2 identical registers, so to find the optimal register allocation is difficult. Even the extra 8 registers added by the AMD 64-bit extension are not identical, but they are divided in 3 or 4 groups with different properties regarding the encoding of the instructions, which result in different program izes.<p>Among the registers added by more recent ISA extensions, especially the SIMD extensions, SSE&#x2F;AVX, there are finally groups of identical registers that are easier to allocate, but these must be used together with the integer registers, which are needed at least for addressing.<p>It is difficult to determine the total number of different instructions in the x86 ISA, but they are much more than a thousand, many of which are obsolete and which should be avoided.<p>Even when compared to older normal ISA&#x27;s, which are not so complex like x86, e.g. Motorola 68k or IBM mainframes, many RISC ISA&#x27;s, including POWER &amp; ARMv8, are still an easier target for assembly programming, when you attempt to write an optimized program.<p>When the performance of the program was not important, assembly programs for some traditional CISC ISA&#x27;s e.g. Motorola 68k or DEC VAX could be simpler than for RISC ISA&#x27;s, due to using fewer more complex instructions, but those instructions typically had slower implementations, so an optimized program might have been forced to avoid them.<p>Knowing the very variable timing of the CISC instructions and accounting for that in order to write an optimized program, made optimized assembly programming more difficult than for RISC CPUs.')