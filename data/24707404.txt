Item(by='hnlmorg', descendants=None, kids=None, score=None, time=1602072850, title=None, item_type='comment', url=None, parent=24706788, text='I&#x27;ve also run elementary school coding classes and my lesson plans and class engagement are largely the same as the OP.<p>The differences were just that I used Python rather than Perl and the program was a higher &#x2F; lower game:<p><pre><code>  from random import randint\n  \n  random_number = randint(1, 100)\n  guess = 0\n  \n  while guess != random_number:\n    guess = int(input(&quot;Guess a number: &quot;))\n    if guess &gt; random_number:\n      print(&quot;Too high!&quot;)\n    \n    if guess &lt; random_number:\n      print(&quot;Too low!&quot;)\n  \n    if guess == random_number:\n      print(&quot;You win!&quot;)\n</code></pre>\n(there&#x27;s obviously a lot of ways you&#x27;d write this as better code but the point was to teach the absolute basics)<p>So the basic concept of the program is essentially the same (command line based and integer comparisons) but it&#x27;s structured as a game. I too encouraged the kids to hack their programs and they <i>loved</i> it! In fact at every stage of the class, from teaching how strings work (eg below)....<p><pre><code>  name = input(&quot;What is your name? &quot;)\n  print(&quot;Hello &quot; + name)\n</code></pre>\n...to the completed game, I gave kids time to hack the code and adapt it how they wanted. Kids genuinely loved it. They&#x27;d put silly code in as jokes and found it hysterical that the computers repeated their silly code etc. They were very much engaged.<p>Obviously there will always be outliers who don&#x27;t enjoy those types of lessons -- I mean everyone is different after all. But this kind of structure for teaching code is actually very effective for engaging the majority of the class.')