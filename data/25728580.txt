Item(by='chriswarbo', descendants=None, kids=None, score=None, time=1610371772, title=None, item_type='comment', url=None, parent=25728261, text='As a concrete example, there&#x27;s a nice function in Haskell&#x27;s standard library called `interact :: (String -&gt; String) -&gt; IO ()`:\n<a href="https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;base-4.14.1.0&#x2F;docs&#x2F;Prelude.html#v:interact" rel="nofollow">https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;base-4.14.1.0&#x2F;docs&#x2F;Prelu...</a><p>Its argument is a function of type `String -&gt; String` and it returns an `IO ()`, i.e. an i&#x2F;o action with a trivial result. That action will call the given function on contents of stdin, and writes its result to stdout. Or, equivalently, we can think of `interact f` as transforming a pure string-processing function `f` into a stdio CLI.<p>Note that laziness (specifically &quot;lazy IO&quot;) causes stdin to be read &#x27;on demand&#x27;, giving us a streaming computation without any extra work. Here&#x27;s an example implementation of &#x27;wc&#x27;:<p><pre><code>    module Main where\n    import System.IO\n\n    main :: IO ()\n    main = interact count\n\n    count :: String -&gt; String\n    count input = show (length (unwords input))\n</code></pre>\nBonus: if we want to show off, we could implement &#x27;count&#x27; using function composition like this:<p><pre><code>    count = show . length . unwords</code></pre>')