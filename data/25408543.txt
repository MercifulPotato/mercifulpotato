Item(by='mikewarot', descendants=None, kids=None, score=None, time=1607882567, title=None, item_type='comment', url=None, parent=25407328, text='Forking the Linux kernel would just result in another monolithic Linux kernel, with all the drivers all tied in.<p>There are microkernels, which is the specific thing Linus Torvalds didn&#x27;t want to do when he started Linux. In capability based systems, not even the drivers have access to everything. Any given process is giving a list of capabilities, like file handles to resources, and those are the ONLY things that process can access.<p>Consider a word processor... under Windows, Linux, etc the application calls a system dialog box to select the directory&#x2F;file name, the uses that name to open a handle to the files, because the assumption is that any program you run should have full access to all of your stuff.<p>The fork of that word processor in a capabilities based OS would call the OS, and the OS would show you a similar dialog box, but the OS would then return the file capability to the word processor... it wouldn&#x27;t be able to access anything else.<p>Consider the Linux model as handing over your wallet at a checkout, and the Capabilities model as handing over exact change.  People are used to handling actual money and thinking in terms of risk like that... thus they would do well in a capabilities based system, and from their perspective not a lot has changed.<p>From the application programmer perspective, opening&#x2F;saving files is a bit different, but everything else stays the same. The big plus is that no matter how bad any application crashes, due to bug or deliberate fuzzing, etc... it can&#x27;t be used to take over the system, like it could in Linux.<p>We could stop having to worry about security when writing applications, and only worry about it in systems programming, where it belongs.<p>Does that help?')