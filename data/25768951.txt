Item(by='WorldMaker', descendants=None, kids=None, score=None, time=1610577468, title=None, item_type='comment', url=None, parent=25766430, text='WSL2 has fewer &quot;magic unknowns&quot;. WSL1 used the NT Kernel emulating the Linux kernel so there was a lot of (seeming) magic in that interop, because it relied on low level NT details that don&#x27;t look like &quot;normal&quot; Windows to Windows.<p>The files, for instance, were stored in NTFS but with Linux metadata in alternate data streams. Akin to what macOS used to call Resource Forks, except alternate data streams are far more rare in Windows and most native Windows apps trample over them. Microsoft didn&#x27;t advertise where to find those files specifically because they didn&#x27;t want people using Windows apps on those files and breaking Linux metadata. Instead, Microsoft heavily encouraged using &#x2F;mnt&#x2F;{drive letter}&#x2F;normal&#x2F;windows&#x2F;path (like &#x2F;mnt&#x2F;c&#x2F;users&#x2F;me&#x2F;Documents) and normal Windows paths and keeping files you worked on in both environments in the Windows plain old NTFS without alternate data stream weirdness side (because those &#x2F;mnt drives didn&#x27;t use the Linux metadata alternate data streams).<p>Eventually, Microsoft added a Plan9-based file server to WSL1 serving on the \\\\wsl$ system path for browsing those files and some smarts around it. (Launching a Windows EXE from a WSL terminal would convert the Linux path to the \\\\wsl$ path for instance.)<p>WSL2, on the other hand, is an extremely lightweight (Hyper-V based) VM, uses a real Linux kernel, and generally uses VM tech. Files are stored in a standard VHD, which can be explored with plenty of VM tools (including Windows File Explorer). They are still accessible in File Explorer through the \\\\wsl$ service. (Though in that case Windows can mount them using standard VHD mounting. The direction of the Plan9-based file server winds up reversed from WSL1 in that it is used instead by the VM to access host machine files through the VM barrier.)<p>As for F#, F# itself is an open source project with possibly  a lot more of a &quot;community project&quot; mentality than it is an &quot;official&quot; Microsoft release. I don&#x27;t know if that changes your opinion, but it is one of the projects where Microsoft has best embraced open source. (Including some of the potential downsides of open source, like needing Github Issues filed on broken documentation or it will go unnoticed&#x2F;unfixed.)')