Item(by='thaumasiotes', descendants=None, kids=None, score=None, time=1605621823, title=None, item_type='comment', url=None, parent=25123621, text='&gt; See <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;25028688&#x2F;8272371" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;25028688&#x2F;8272371</a> for detailed explanation.<p>There is a disconnect somewhere. The linked answer says:<p>&gt; Now, git is different. Git stores references to complete blobs and this means that with git, <i>only one commit is sufficient to recreate the codebase at that point in time</i>. Git does not need to look up information from past revisions to create a snapshot.<p>&gt; So if that is the case, then where does the delta compression that git uses come in?<p>&gt; Well, it is nothing but a compression concept - there is no point storing the same information twice, if only a tiny amount has changed. Therefore, represent what has changed, but store a reference to it, so that the commit that it belongs to, which is in effect a tree of references, can still be re-created without looking at past commits.<p>You can recreate a file that is stored as a root blob plus some series of diffs without looking at information from past <i>commits</i>. But you can&#x27;t recreate it <i>without doing the diffs!</i> You have to look at the root blob. This is, internally, tracked separately from the commit which created it. But your conclusion:<p>&gt; when you checkout stuff, git <i>doesn&#x27;t</i> do diffs to give you the working directory at that point.<p>cannot be true. If the working directory at that point corresponds to a blob which has only diff information stored, git must apply that diff to a separate blob in order to give you the working directory.')