Item(by='acoard', descendants=None, kids=[25106344, 25072658, 25075585], score=None, time=1605202264, title=None, item_type='comment', url=None, parent=25071685, text='This has largely been my experience too.<p>I was development lead for an angular shop.  We did all the government Ministry of Health forms in Angular, millions of residents would use our forms every year.  Our frontend team I lead fluctuated from 5-8 people over the years.  We had to work on basically every device, making sure it&#x27;d work on IE11 and for blind users running screen readers is something we&#x27;d do every single release.  I say this not to brag, but just to say I lived and breathed angular for years, I was hired as the &quot;angular guy&quot;, and I even wrote an npm-publiished library of re-usable components specifically to match Ministry of Health forms.<p>My opinion of the Angular team and their stewardship of the project had ranged from mildly impressed, to disappointed, to alarmed. They frequently missed their own targets, the big one being Ivy, their compiler, which got pushed back 2 full releases and was constantly plagued by issues.  (I left that job right as Ivy was released.  Is anyone using it?  Has it been a success?)<p>Like you, I saw the Angular team constantly speaking to compiler optimizations, but never once saw those benefits manifest.  To be honest, it just felt like they were using the typescript compiler (tsc). I never saw any performance benefits over tsc.  In fact, now using React&#x2F;tsc&#x2F;webpack, I feel like the compiler is more configurable and powerful.<p>In around 3 years of Angular updates the only feature we really used was the improved lazy loading of modules.  I also used a  bit of their codegen stuff (&quot;Schematics&quot;), which was promising but incomplete.  Even though they were in release notes at the time, they lacked documentation and seemed like the team was bragging about features that weren&#x27;t ready for light of day[0].  In the same timespan (~2016-Jan 2020), React got: server side rendering, pure components, hooks,  profiling tools, improved lazy loading, and many _measurable performance increases that benefited projects across the board_[1].<p>Also, the Angular team began to increasingly focus on Material integration.  We were a Bootstrap shop (ministry, at the time, required bootstrap styling).  It was disappointing to see all those updates and know we couldn&#x27;t use them.<p>I will say that generally speaking Angular&#x27;s opinionated, more enterprise-y approach to frontend absolutely has a place.  For certain workplaces, like my former big corp one, having an opinionated enterprise-y language made onboarding easier and devs more consistent.  The most disruptive devs we had were hotshot react devs who wanted to make  our Angular code base look like their flavour of  React.  I use React now, and love it, but there are pros and cons to having an opinionated framework&#x2F;library (not having that fight).<p>And worst of all, the team itself seems to be imploding and toxic as you&#x27;ve alluded to.<p>I left that job for other reasons, but I&#x27;m glad I&#x27;m working with React and Vue more heavily now.<p>[0] <a href="https:&#x2F;&#x2F;medium.com&#x2F;@lifenshades&#x2F;difference-among-angular-8-7-6-5-4-3-2-breakdown-new-features-and-changes-811fb5f8e6f0" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;@lifenshades&#x2F;difference-among-angular-8-7...</a><p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;React_(web_framework)#History" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;React_(web_framework)#History</a><p>edit: The other great part about the Angular community is it&#x27;s TS first.  I miss that about React&#x2F;Vue.')