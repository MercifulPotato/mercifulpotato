Item(by='fastball', descendants=None, kids=None, score=None, time=1610735426, title=None, item_type='comment', url=None, parent=25794049, text='- You need to orchestrate key exchange between clients which is additional overhead (probs negligible).<p>- Messages can&#x27;t be edited so any corrections made by users need to be entirely new transmission over the wire (probs negligible)<p>- Encrypted data can&#x27;t be effectively compressed, and compression before encryption can lead to side-channel attacks. You can generally mitigate this by building your compression and encryption together (e.g. SSL does this), but not entirely sure this works for Signal with an E2EE arch. Either way I would <i>assume</i> that E2EE payload sizes transmitted over the wire are larger than stuff sent over the wire with GZIP&#x2F;SSL (as Telegram is probably doing).<p>- MAIN REASON (my guess): group chats in the Signal protocol require sending a different encrypted message to each participant, rather than a single identical message to all participants. Honestly my algorithmic complexity chops aren&#x27;t the best, but I think that would make Signal group chats O[2n] while Telegram group chats are more like O[log n], if they utilize clients sending the group chat to each other, which is a crazy level of difference in efficiency for what is effectively the same thing and a pretty common use case (group chats).<p>Long story short, secure things that are hard to mess with are less efficient than things that are easier to mess with. This is why blockchains like Bitcoin are much more lethargic than a normal database â€“ there are some necessary performance trade-offs required when you want high levels of security in your system. There are a bunch of small little things that probably aren&#x27;t a big deal, but every little bit adds up when you&#x27;re trying to scale a service to millions of active users &#x2F; billions of messages.')