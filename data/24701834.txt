Item(by='DonaldPShimoda', descendants=None, kids=[24702035], score=None, time=1602015036, title=None, item_type='comment', url=None, parent=24701689, text='&gt; Put simply: enabling mypy + no-any gives you all the same static guarantees (and arguably more) that java does, so in what way isn&#x27;t it statically typed?<p>The original question was about Python <i>the language</i>, not Python <i>the ecosystem</i>. At no point is it ever likely to be correct to say &quot;Python is statically typed&quot;; it will only be possible to say &quot;this specific Python code <i>can</i> be statically typed, if you run the static type checker&quot;. This is a fundamental difference between optional static typing in Python versus a natively statically typed language. Because you <i>can</i> run the Python code without running the static type checks, which you cannot do in, say, Java.<p>Because of this distinction, it is never a genuine concern of a developer in Java or another statically typed language whether third-party libraries will be properly typed. There do not exist libraries without valid static types. You can&#x27;t install something from Maven or what-have-you that won&#x27;t type-check.<p>But you <i>can</i> do this in Python. You can install something via pip and there is no guarantee it will come with good type annotations for your type-checking tool to use, because the type checker is not part of the language proper. It&#x27;s not <i>required</i>. So Python code exists in the real world that cannot be used with the same assumptions as you can use code in the Java ecosystem. And this is fine, by and large, because Python wasn&#x27;t <i>meant</i> to be typed. There&#x27;s nothing wrong with using code like this, nor is there anything wrong with writing code like this. You may not wish to do so personally, which is fine, but I don&#x27;t think there will ever be an expectation made by the Python language proper of all Python developers to annotate their code. Python will always work without explicit types.<p>My point in all of this is that your original argument that &quot;[whether there are concerns about third-party libraries having valid type annotations] is true in any type system&quot; does not hold <i>in the real world</i>, because you simply won&#x27;t have untyped libraries in a statically typed language&#x27;s ecosystem like you will in Python. Perhaps you didn&#x27;t realize that this was the point being made, but in any case you went off on a very semantic tangent that had no real bearing on the conversation at hand: the use of type annotations <i>in practice</i>.')