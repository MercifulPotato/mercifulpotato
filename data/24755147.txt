Item(by='nickdrozd', descendants=None, kids=[24755484, 24757979], score=None, time=1602515346, title=None, item_type='comment', url=None, parent=24754397, text='Pylint is a great tool, but it could definitely be faster. One school of thought says: of course it&#x27;s too slow, it&#x27;s written in Python, if you want it faster you should rewrite it in C. But I don&#x27;t think such a drastic and destabilizing change is necessary. There are critical sites in the code where a slightly wrong move is made and it gets magnified into something larger. This post points out one such site. The 80&#x2F;20 rule says that fixing those errors will give most of the benefit of a full rewrite with way less effort.<p>A few years ago I got fed up with how slow Pylint was, so I made some changes to improve its performance. The main issue was that the tree traversal code was written generically. It was nice and elegant in terms of readability, but it meant that there was a lot of unnecessary runtime type-checking. It also meant that a lot of work was getting done for no reason. For example, if you are trying to apply lint rules for assign statements, you only want to check places where assign statement can legally occur. But Pylint was checking every single node for assign statements, including places where they cannot occur, such as inside function calls. Breaking up that generic logic into specialized instances had an enormous impact on performance.<p>Here are the PRs that implemented these changes:<p><pre><code>  https:&#x2F;&#x2F;github.com&#x2F;PyCQA&#x2F;astroid&#x2F;pull&#x2F;497\n  https:&#x2F;&#x2F;github.com&#x2F;PyCQA&#x2F;astroid&#x2F;pull&#x2F;519\n  https:&#x2F;&#x2F;github.com&#x2F;PyCQA&#x2F;astroid&#x2F;pull&#x2F;552</code></pre>')