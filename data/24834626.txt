Item(by='sergeykish', descendants=None, kids=[24838137], score=None, time=1603177954, title=None, item_type='comment', url=None, parent=24832618, text='I have no grudge against operator overloading when done consciously — complex numbers, matrix multiplication. I&#x27;ve tried to implement JavaScript arithmetic in Ruby, failed so far.<p>Sorry, I had to be clear, in Lua &quot;one number type&quot; means float, my bad. I meant Lua 5.3 integer still works like JavaScript Number. In the end we have to know about ToInteger, ToInt32, ToUint32, Number.MAX_SAFE_INTEGER [1]. It is not one number type but encoding of several number types, union.<p>Prior to 5.3 and in LuaJIT it has different limitations<p><pre><code>    &gt; print(string.format(&quot;%18.0f&quot;,9007199254740991 + 1))\n      9007199254740992\n    &gt; print(string.format(&quot;%18.0f&quot;,9007199254740991 + 2))\n      9007199254740992\n</code></pre>\nthey have extended original &quot;one number type&quot; without change of the interface. In any case both versions do not convert to BigNum like Ruby.<p><pre><code>    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    =&gt; 115792089237316195423570985008687907853269984665640564039457584007913129639935\n</code></pre>\nRuby unified Fixnum, Integer and BigNum as Integer in 2.4. Can&#x27;t see benefits of Number&#x2F;BigInt against Float&#x2F;Integer. I&#x27;d rather have 3.6f literal.<p>Yes, I know how WAT works. I meant ToPrimitive [2]<p><pre><code>    [] * {}\n    &#x2F;&#x2F;NaN\n</code></pre>\nI&#x27;ve disabled this code in Firefox, have not done extensive testing but looks like no one depends on it. We infer types with TypeScript and flow but VM already knows it, it can report such cases without external tools. I think of it as extension of Firefox Developer edition — lint in the browser.<p>Object.prototype.toString is not as useful as Ruby, Python<p><pre><code>    class Foo {}\n    `${new Foo}`\n    &#x2F;&#x2F;&quot;[object Object]&quot;\n\n    class Foo end\n    Foo.new\n    #=&gt; #&lt;Foo:0x0000560b7a10df20&gt;\n\n    &gt;&gt;&gt; class Foo:\n    ...     pass\n    &gt;&gt;&gt; Foo()\n    &lt;__main__.Foo object at 0x7fb53aecf1f0&gt;\n\n</code></pre>\nAnd there is no separate inspect&#x2F;__repr__<p><pre><code>    Date.today\n    #=&gt; #&lt;Date: 2020-10-20 ((2459143j,0s,0n),+0s,2299161j)&gt;\n    Date.today.to_s\n    #=&gt; &quot;2020-10-20&quot;\n</code></pre>\n&gt; UCS-2 actually<p>Oh, DOM UTF-16 string broken by UCS-2 JavaScript function. I understand it is not easy to fix, Ruby fixed in 1.9, Python in 3.0, new languages (Rust, Elixir) come with UTF-8. Microsoft Windows has code pages, UCS-2, UTF-16.<p>Maybe Python way? b&quot;binary&quot;, u&quot;utf-8&quot; (but together, not python fiasco), ruby has &quot;# Encoding: utf-8&quot;, transformation tools can mark &quot;b&quot; or &quot;u&quot; all unspecified strings.<p>&gt; Once again though, the deep parts of both Python and Ruby classes are probably more difficult to explain.<p>No, <i>every</i> Ruby object contains variables and has a link to a class which defines instance methods, we call it singleton_class<p><pre><code>    foo = Object.new\n    foo.class == Object\n    #=&gt; true\n    foo.singleton_class == Object\n    #=&gt; false\n\n    def foo.bar\n    end\n    foo.singleton_class.instance_method(:bar)\n    #=&gt; #&lt;UnboundMethod: #&lt;Class:#&lt;Object:0x000055cb33808e10&gt;&gt;#bar() (irb):7&gt;\n</code></pre>\nThere is ancestors chain<p><pre><code>    Object.ancestors\n    #=&gt; [Object, Kernel, BasicObject]\n</code></pre>\nThere is a bit of syntactic sugar<p><pre><code>    Foo = Class.new\n</code></pre>\nThere are few revelations with main (method defined in Object)<p><pre><code>    def baz\n    end\n    Object.instance_method(:baz)\n    =&gt; #&lt;UnboundMethod: Object#baz() (irb):19&gt;\n</code></pre>\nNothing like audible &quot;click&quot; I had when understood that &quot;function&quot; is a &quot;constructor&quot;<p><pre><code>    constructor Foo {}\n    &#x2F;&#x2F; you can call me as function too\n</code></pre>\nthat unlike any other language [[Prototype]] is hidden. I&#x27;ve red through ES5 to be sure there are no hidden traps left.<p>Every JavaScript programmer has to go through this list either beforehand or by experience. I do not want to undermine TC39 effort — arrow functions, string interpolation in template literals, strict BigInt, Object.create — these are great advancement. I don&#x27;t feel same way for &quot;class&quot;, underlying weirdness is still there.<p>Make [[Prototype]] visible<p><pre><code>    Object = Object.prototype\n    Function = Function.prototype\n</code></pre>\nnow it is easy to reason about<p><pre><code>    typeof Object \n    &#x2F;&#x2F;&quot;object&quot;\n\n    Foo = class {}.prototype         &#x2F;&#x2F; redefine with sweetjs macro\n    Bar = class extends Foo.constructor {}.prototype\n\n    new Foo.constructor              &#x2F;&#x2F; redefine with sweetjs macro\n\n    Object.constructor.create(Bar)   &#x2F;&#x2F; redefine as Reflect.create\n</code></pre>\nonce redefined:<p><pre><code>    Foo = class {}\n    Bar = class extends Foo {}\n    new Foo\n    Reflect.create(Bar)\n</code></pre>\nI&#x27;ve shown it in another comment [3].<p>Languages are weird, there are a lot of C++ developers, I&#x27;ve been there, no way to know all dark corners. Pythons ideology hurts. Java took EE way. C# was tied to Microsoft. C K&amp;R is beautiful, hard to write safe, packs a lot in the code. PHP has its bag of problems. SQL is not composable, CTE helps. Go ideology. Ruby — performance. And JavaScript because browser, not bad when know and avoid skeletons in the shelf.<p>Lua metatables looked like a proxy&#x2F;method_missing for me.<p>[1] <a href="https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.5" rel="nofollow">https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.5</a><p>[2] <a href="https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.1" rel="nofollow">https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.1</a><p>[3] <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24815922" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24815922</a>')