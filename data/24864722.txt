Item(by='jpeloquin', descendants=None, kids=[24865134], score=None, time=1603411502, title=None, item_type='comment', url=None, parent=24862320, text='&gt; numpy also treat them [vectors] as 1xN matrices<p>I may be misunderstanding something, but in numpy at least a vector, a 1×N array (&quot;row vector&quot;), and a N×1 array (&quot;column vector&quot;) behave differently.<p><pre><code>  vec = numpy.array([1,2,3])\n  assert vec.shape == (3,)\n  assert vec.ndim == 1\n  row = np.array([[1,2,3]])\n  assert row.shape == (1,3)\n  assert row.ndim == 2\n  col = np.array([[1], [2], [3]])\n  assert col.shape == (3,1)\n  assert col.ndim == 2\n</code></pre>\nAnd a vector, unlike a 1×N or N×1 array, can be multiplied to either side of any matrix with compatible cardinality:<p><pre><code>  assert all(vec @ numpy.eye(3) == numpy.array([1, 2, 3]))\n  assert all(numpy.eye(3) @ vec == numpy.array([1, 2, 3]))\n</code></pre>\nMatlab &#x2F; Octave, in contrast, forces the user to pick a 1×N or N×1 matrix to represent a vector.  Its arrays are always ≥ 2D.  So you&#x27;re probably still right that people get confused translating this to Python.  Just wanted to clarify the numpy side of things.<p>The JuliaCon talk you linked does a great job of explaining what different fields mean by &quot;vector&quot;; thanks for linking it.')