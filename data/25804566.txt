Item(by='nickjj', descendants=None, kids=None, score=None, time=1610824409, title=None, item_type='comment', url=None, parent=25779683, text='&gt; As for libraries, I challenge anyone to name an unmet dependency in Elixir that is 1) trivial to implement and 2) not for some niche application.<p>For quite some time the ex_aws[0] package was no longer maintained because the only person who maintained it stopped using AWS. There were many months in between before a new maintainer was found. Unlike Python, Ruby, PHP, Node, Go, etc. there&#x27;s no official AWS SDK for Elixir.<p>The ecto pagination[1] package has a &quot;low maintenance&quot; warning, basically the author is no longer maintaining it except for fixing issues even though there&#x27;s a number of interesting features that could be added that other web frameworks have available.<p>The arc file upload[2] package was no longer maintained or touched for a really long time until someone took it over but now that new package is also racking up open issues and looks like it kind of stagnated in development. This isn&#x27;t based on looking at last commit times too. I mean there&#x27;s issues open to address important topics that haven&#x27;t gotten reviewed for a long time.<p>There&#x27;s also no official Stripe SDK for Elixir and all of the community created ones feel kind of abandoned or no where near feature parity with Python, Ruby, Node, PHP, Golang or any of the other official packages offered by Stripe. This is the last thing I want to have to implement myself since it&#x27;s so critically important. The same can be said for PayPal and Braintree integration. There&#x27;s official SDKs for Python, Node, etc. but not Elixir. I&#x27;ve asked Stripe a couple of times about an Elixir client and they all say the demand is not near enough to consider creating one officially.<p>These are only a few examples of tools I&#x27;ve found in questionable state when working with Elixir compared to Python and Ruby. All of which are very important in a ton of applications.<p>Then there&#x27;s also less generic but still really useful things like notification abstractions to send emails, texts or broadcast notifications to connected clients. Rails, Laravel and Django all have excellent solutions to this where you can get up and running in no time but with Phoenix you&#x27;ll have to write all of this on your own. It&#x27;s a huge undertaking.<p>Long story short, I started with Phoenix and Elixir almost 2 years ago and today 2 years later I feel like if you plan to write any type of business&#x27;y app with Phoenix you&#x27;re going to have to end up writing a ton of libraries yourself instead of focusing on your business problem. That might not be a problem if you have a huge team and your business idea is already proven and 5+ years old but for anyone who wants to build something and see if it works, it&#x27;s hard to say you&#x27;ll be able to build something faster than Rails, Laravel, Django or Flask if you already know one of those frameworks.<p>Now you might say some of those packages are trivial to write but they&#x27;re really not. That seems to be a common pattern I&#x27;ve seen with the Elixir community where someone will say just do it yourself because it&#x27;s easy and then you&#x27;re left hanging. Sure maybe it&#x27;s easy if you&#x27;re Jose or someone with 5+ years of prior Elixir experience and have written 100k+ lines of Elixir code but a regular developer who just wants to build web apps (not libraries) is going run into tons of roadblocks. I know I did.<p>[0]: <a href="https:&#x2F;&#x2F;github.com&#x2F;ex-aws&#x2F;ex_aws" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ex-aws&#x2F;ex_aws</a><p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;drewolson&#x2F;scrivener_ecto" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;drewolson&#x2F;scrivener_ecto</a><p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;stavro&#x2F;arc" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;stavro&#x2F;arc</a>')