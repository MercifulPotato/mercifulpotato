Item(by='jnxx', descendants=None, kids=None, score=None, time=1605003945, title=None, item_type='comment', url=None, parent=25038542, text='As the parent says, this sounds like a loaded\nquestion. In fact, it sounds just like som marketing\ndepartmetn which wants to promote some IDE is trying to\ngather reasons and possibly features which need to be\nadded to some &quot;competitor&quot; IDE, in order to gather more\nmarket share.  I write that because to me, the interest\nto actual answer to the question - why people use these\nopen-source editores - seems somewhat thin.<p>But, as somebody who uses Emacs, why not use the\nattention for some Emacs marketing.<p>Before going on, I use Emacs mostly since about 22\nyears. I am also occasionally using vi (mostly for\nsystem administration) or mg (which is a very\nlight-weight editor with basic emacs keybindings). I&#x27;ve\nalso used a host of other tools, for example in some\nwork environments there was really no other alternative\nthan to use Visual Studio, or Eclipse, and in some the\nmost practical thing to use was notepad++.<p>So, why Emacs?<p>At first, and something that might be interesting to\nbeginners, basic editing in Emacs, such as to produce\nsimilar results to using notepad++, is actually quick\nto learn. It has a nice on-line tutorial and very good\ninteractive documentation. The fundamental philosophy\nit has is that basic text editing is modeless, that is,\none uses a (possibly large) number of key combinations\nto modify text, and the basic combinations are\nuniversal.  And this is already the main difference to\nvi&#x2F;vim, where the meaning of basic key commands always\ndepends on the mode.  Emacs does have modes, however,\nfor advanced commands which modify different &#x2F;kinds&#x2F; of\ntext.<p>Emacs supports a large number of programming languages\nout-of-the-box, which includes anything you need to\nwrite for documentation.  This saves a lot of time when\nsetting up projects. It is also very quick to set up\nadditional packages and modes.<p>Emacs and vi&#x2F;vim both are based on the notion that code\nis text: They are optimized for text editing, and in my\nexperience this is absolutely the right thing to do. I\nhad the dubious pleasure to use several systems which\nuse code as kind of point of entry to some kind of\ndatabase or graphical system or whatever, and these\nare, universally, just a pain in the ass.<p>Compared to IDEs, Emacs loads and starts very, very\nfast.  In cases where one want it even faster and don&#x27;t\nneed that many features, one can use emacsclient, or\nthe mg editor, or, of course, vi. It is also possible\nto use Emacs in a text terminal, which is invaluable\nfor remote work on servers or embedded systems, and it\nalso has good support for the shell&#x27;s job control:\nRunning in terminal mode (starting with the &quot;-nw&quot;\noption), Ctrl-Z will bring you to the shell, and &quot;fg&quot;\nwill bring you back to your Emacs session.')