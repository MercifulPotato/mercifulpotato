Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1608221668, title=None, item_type='comment', url=None, parent=25453055, text='&gt; Hooks are the place to segment out effectful code from otherwise pure code<p>I know what hooks are. Neither of those things is true. The hooks are called&#x2F;instantiated in the same function body that returns the render. This performs some kind of stateful magic which makes that function itself inherently impure. Then that function returns a render which calls into that magic to perform further side effects, so that’s not pure either.<p>&gt; The existence of a hook is what should alert you to the fact that there may be some side effect thing happening here.<p>That is true, and is for sure a benefit. But a class sends the same signal, but with the benefit of actually being fairly straightforward to reason about (notwithstanding the complexity of lifecycle, but lifecycle can be complex with hooks too).<p>&gt; Not sure if this applies to you but I&#x27;ve found that most people who criticize hooks haven&#x27;t made the leap to using custom hooks and have instead only used ones provided to them (useState, useEffect, etc).<p>I try not to use them at all, to minimize state and side effects as much as possible, and to encapsulate stateful code from rendering code.<p>I find them hard to reason about, whether in the core interface or as abstractions around the core. They fundamentally change the behavior of a function component from “this is a function which receives input (props) and returns a rendered data structure (JSX)” to “this sets up some initial state and returns a reference type of some kind that’s used to track that state over time”, but with the same syntax and semantics. The former is what attracted me to React and JSX, the latter is what I wanted to get away from. But making the same semantics do both is even worse than just having different semantics for both.<p>&gt; Hooks are functions<p>Well not really, they’re routines expressed as functions, but they cause side effects on their enclosing context. That’s why, for example, you can’t conditionally call a hook. If you do, React won’t know to treat this component differently from components which don’t call hooks.')