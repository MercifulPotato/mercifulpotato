Item(by='samatman', descendants=None, kids=[24854331], score=None, time=1603320342, title=None, item_type='comment', url=None, parent=24852649, text='That&#x27;s not a bad argument against using TOML, and I&#x27;m inclined to agree that TOML is more verbose than it has to be for heavily-nested maps-of-maps-of-maps.<p>Which you can pretend is a strength, since I consider doing that an anti-pattern. But it <i>is</i> a valid critique.<p>However, the TOML they offer as a comparison to the StrictYAML is probably auto-generated (they do say &quot;serialized TOML equivalent&quot;) and it&#x27;s quite a bit noisier than it has to be.<p>TOML deliberately has a couple of ways of writing arrays, and a one-line short format for maps: you&#x27;re supposed to alternate these, and this technique could eliminate most of the repetition in that particular file.<p>I still wouldn&#x27;t choose TOML for a complex tree of user stories where the keys are all long strings of English: that&#x27;s an example of the kind of thing where you might talk yourself out of using it!<p>Here&#x27;s the counterpoint I want to offer: stories of YAML &quot;configuration languages&quot; escaping confinement and becoming headache-inducing repositories of monstrous complexity are practically cliche at this point.<p>Part of why that is, is that you don&#x27;t pay for that complexity &quot;up front&quot;: It&#x27;s just a nice list! It&#x27;s easy to read!<p>I would add one thing to TOML if I could: it should default to a string for the value part of a key-value pair, if it can&#x27;t make anything else. So<p><pre><code>   my_val = 42\n</code></pre>\nMakes a number,<p><pre><code>   my_string = &quot;42&quot;\n</code></pre>\nGives you a string, and<p><pre><code>   my_regex = ^\\&quot;(\\\\.|[^\\&quot;])*\\&quot;\n</code></pre>\nlets you handle regexes without the obnoxious double-quoting problem, while removing a lot of the verbosity and ceremony from the format.')