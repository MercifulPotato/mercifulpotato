Item(by='qalmakka', descendants=None, kids=[24764369, 24764923, 24765278], score=None, time=1602586328, title=None, item_type='comment', url=None, parent=24763693, text='Because, IMHO, a lot if not every of the GUI frameworks have been born by necessity and has a lot of cruft around that requires type magic incompatible with a strict language like Rust.<p>GUI toolkits are often really old (more than 20 years old at least) and have been either hastily hacked in C (often in C89, like Win32 and GTK+, which is famous to abuse refcounting and C macros and is a prime example of what I was mentioning above as a poorly designed library), or have been designed in C++ before C++11, so they largely depend on nasty hacks and practises that are considered obsolete in modern C++ (like Qt).<p>Other GUI toolkits are designed around modern garbage collected languages (see WinForms, WPF, Swing, ...) so they&#x27;re not really usable from non-managed languages. \nCocoa is in a weird spot, being written in a pretty-much duck-typed language like Objective-C.<p>My point is that IMHO it&#x27;s not Rust itself that&#x27;s not suited for GUIs, but it&#x27;s the GUI toolkits that have often aged very badly and are out of touch with modern software development. The ugliness of developing UIs with the old frameworks is I think one of the main reasons why the web has taken over, and why others such as Qt have largely moved to a declarative approach with things like QtQuick (i.e. &quot;almost JS&quot;) or Apple&#x27;s SwiftUI.<p>It&#x27;s all about keeping development sane, something Microsoft has IMHO canned several times by trying fix the mess they made with Win32, only by making it worse creating a dozen of competing, almost incompatible toolkits. The fact that the newest of them, written since its inception in modern C++ (C++&#x2F;WinRT) has a nice to use Rust alternative (Rust&#x2F;WinRT) shows that the problem wasn&#x27;t the language all along.')