Item(by='reificator', descendants=None, kids=[25278770], score=None, time=1606928447, title=None, item_type='comment', url=None, parent=25278218, text='&gt; &gt; <i>If the array is sorted it can be binary searched to get to the change point, which improves its performance even more, linked lists canâ€™t do that.</i><p>&gt; <i>And if you not doing ordered insertion you wouldn&#x27;t have to move the data in the array anyway, you would keep track of the size and jump to the end, so not sure I understand the binary search comment.</i><p>It just means that if I want to view the nth element of an array, that&#x27;s a constant time operation.  I just take the pointer and add n times the size of the elements.<p>But for a linked list if I want to view the nth element of the list, I have to view the (n-1)th element first, all the way back until the first element I have a reference to.<p>&gt; <i>The next question is at what level of growth the waste of empty space in the array becomes too much.</i><p>Everything I&#x27;ve tried and everything I&#x27;ve seen from people testing on real hardware is that the gap in performance <i>widens</i> with larger values of n.<p>You might expect different performance as the system runs out of memory.  But arrays have a size of n * element size, and linked lists have a size of n * (pointer(s) + element size), so the linked list would hit memory limitations more quickly regardless.')