Item(by='berkes', descendants=None, kids=[25537401, 25535799, 25538466], score=None, time=1608893281, title=None, item_type='comment', url=None, parent=25535222, text='Rails doesn&#x27;t help you form a proper domain model. Or force you to put side-effects in the proper place; it doesn&#x27;t help with evolving a proper data model, or avoid tight coupling in unwanted places, it has hardly any tooling in place to employ design patterns.<p>On contrary: often it encourages bad practices through &quot;defacto&quot; standard gems, or by making &quot;the wrong choice&quot; easier than &quot;the proper design pattern&quot;. A &quot;concern&quot; is a simple way to turn a 800-lines controller into four 300 lines modules that amount to the same ball-of-mud, for example. (Concerns have great use-cases, but most often it is not the solution to your problem). Rails offers things like `try(:foo)` to quickly solve that equivalent of the &quot;null-pointer&quot;- exception, without forcing the developers to dive and in and solve the <i>reason</i> why it is nil, or solve it with some design pattern (adapters, null-pattern etc) either: just keep sprinkling `try()` keeps it rattling along too. Somewhat.<p>So, yes: lack of proper design and architecture is the real problem behind those &quot;ball-of-mud&quot; rails projects. \nBut Rails&#x27; lack of training-wheels and the ease at which to make the wrong choices, really doesn&#x27;t help teams aim at proper design and archicture either.')