Item(by='eyelidlessness', descendants=None, kids=[25566477], score=None, time=1609210953, title=None, item_type='comment', url=None, parent=25564565, text='The &quot;free&quot; part you&#x27;re describing is called referential transparency. What it means is that a pure function, called with the same parameters, always returning the same results without side-effect, can be substituted with its return value as an assignment (or as part of an expression).<p>The most important part of that explanation is <i>can</i>. The idea behind certain properties of FP, this being one of the most important ones, is that you are able to describe the results you want (somewhat declarative, moreso than imperative languages, less so than logic programming) and let the &quot;compiler&quot; or the &quot;runtime&quot; determine how that&#x27;s delivered, without knowing or caring how it&#x27;s executed. The problem with that is that the &quot;compiler&quot; or the &quot;runtime&quot; has to actually do the optimization, and if it doesn&#x27;t, you&#x27;re... executing unoptimized code!<p>Taking your React example, if it had appropriate heuristics, it could noop a ton of work and devs wouldn&#x27;t have to even <i>think</i> about optimizing really simple good hygiene patterns. But it doesn&#x27;t even look at your source code, it has no idea what weird stateful complex mess you&#x27;re calling into, and it just assumes the worst.')