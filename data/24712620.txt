Item(by='duskwuff', descendants=None, kids=None, score=None, time=1602104178, title=None, item_type='comment', url=None, parent=24708562, text='But what&#x27;s the upside of specifically using the format of a Bitcoin transaction here, as opposed to (for example) using a signed HTTP message (a la  <a href="https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;draft-ietf-httpbis-message-signatures&#x2F;" rel="nofollow">https:&#x2F;&#x2F;datatracker.ietf.org&#x2F;doc&#x2F;draft-ietf-httpbis-message-...</a>)?<p>Addressing the points in your link:<p>&gt; 1. Decentralized Authentication<p>First: Bitcoin wallet addresses are temporary keys, not identities. &quot;Authenticating&quot; against one isn&#x27;t really appropriate, no more than it&#x27;d make sense to authenticate a user as the owner of a specific dollar bill.<p>Second: even if you wanted that, there&#x27;s no reason you should need to encapsulate HTTP in a weird wrapper to accommodate it. A variety of schemes already exist for signing HTTP requests within the bounds of HTTP. Most of them even support ECDSA signatures.<p>&gt; 2. Monetize through Bitcoin payment<p>Signing a message which isn&#x27;t a valid Bitcoin transaction with a wallet private key doesn&#x27;t turn that message into a transaction. Conversely, there&#x27;s no way to make a Bitcoin transaction conditional on the completion of an off-chain operation.<p>&gt; 3. Programmable HTTP requests<p>Do you have any examples of what a realistic use case for this would be? Keep in mind that the signed nature of a request doesn&#x27;t guarantee that the request is processed in the requested manner.<p>&gt; 4. Data portability<p>First: as noted previously, there are already plenty of non-proprietary schemes for signing HTTP requests.<p>Second: this entire point presumes that making HTTP requests publicly logged and visible is a benefit, which doesn&#x27;t make any sense.')