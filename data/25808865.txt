Item(by='throwaway894345', descendants=None, kids=None, score=None, time=1610867710, title=None, item_type='comment', url=None, parent=25808077, text='&gt; The main benefit of constructing objects and tying them together via DI is to allow polymorphic handling of responsibilities.<p>This is already provided by interfaces, as previously discussed. To be clear, dependency injection makes sense; however, <i>dependency injection frameworks</i> don’t make sense to me.<p>&gt; The underlying data in different implementations will be different. This is something Golang fails terribly at because it doesn&#x27;t have polymorphism.<p>Go definitely has always had polymorphism; that’s the whole point of interfaces.<p>&gt; The way Golang works, and the reccomended patterns for Golang are somewhat anti-DI.<p>DI (assemble your object graph in main() instead of distributing it across dozens of constructors a la OOP) is idiomatic Go; DI <i>frameworks</i> are not.')