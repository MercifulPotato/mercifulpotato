Item(by='alex-lawrence', descendants=None, kids=None, score=None, time=1608470118, title=None, item_type='comment', url=None, parent=25484436, text='Thanks for the feedback. Happy to hear that you appreciate the UI chapter. For me, it was important to explain how to approach the User Interface. I often had the feeling that this part was a bit neglected when reading about CQRS &amp; Event Sourcing.<p>The book contains numerous standalone examples throughout the chapters, which are all executable. At the end of each chapter, the explained concepts are applied to the Sample Application context.<p>The Sample Application is a greatly simplified task board. Users can register, login, create projects, manage team members and work with a task board. The task board is essentially a collection of items, grouped into three columns. Individual tasks contain details such as title, description, status, assignee, etc.<p>While there are some constraints&#x2F;invariants in the Domain Model, I would consider the Sample Application fairly trivial. It does not represent a complex domain problem. One reason for this is that I personally did not encounter any highly complex domain so far. It would have been weird if I tried to explain something I am not really experienced in.<p>&gt; what if domain logic can be optimized in the database?<p>IMHO, the question is a bit too generic. The generic recommendation would be to not put domain logic into the database. However, one would need to look at what the domain logic in question is. Also, what does &quot;in the database&quot; mean? Are we talking about code that is being executed in the database environment, such as PL&#x2F;SQL?<p>&gt; examples where you have property method on a model that goes and performs additional queries<p>This sounds a bit like the Active Record pattern or the use of an ORM, where one &quot;model&quot; is somehow linked to another. Again, a generic answer would be that domain objects should stay free of infrastructural concerns. If you have posts and comments and need to get the latest comment on a post, this represents a use case. Use cases are executed by an Application Service. This part is allowed to query any number of domain objects &#x2F; data sources. If you would be using CQRS, you would likely have a denormalized Read Model that contains comments per post.')