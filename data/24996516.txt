Item(by='pizza234', descendants=None, kids=None, score=None, time=1604564249, title=None, item_type='comment', url=None, parent=24991027, text='True? I personally have no doubt (of course, programs vary a lot, so there are certainly cases where the effort is comparable).<p>Besides the unstructured trees, another example, although more high-level, is interfaces. They&#x27;re a concept required in statically typed languages (some languages they have a simpler design than others), but not in dynamically typed languages (which have duck typing).<p>If you have a couple of types that you need to abstract, in a S.T. you&#x27;ll need to define an interface, the method signatures, which include the return types, and maybe (in lower level languages) the generic types and the super interfaces. Even something as (relatively) simple as generalizing a tuple and a matrix types will require some design.<p>In D.T. languages, zero effort is required. As long as an object responds to a method (name), it&#x27;s game.<p>I think it&#x27;s not realistic to assume that the concepts that need to be taken care of in a S.T. language are comparable to the ones in a D.T. language. And more concepts imply more cognitive load. And cognitive resources are limited :-)')