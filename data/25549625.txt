Item(by='octoberfranklin', descendants=None, kids=[25549836], score=None, time=1609056489, title=None, item_type='comment', url=None, parent=25549259, text='&gt; If I&#x27;m on an ipv6-only host and blast UDP at ::ffff:1.2.3.4, they should get delivered to 1.2.3.4, no?<p>No, it won&#x27;t necessarily!  That&#x27;s precisely the problem.  Until NAT64 was introduced it was in fact <i>impossible</i> for an IPv6 router to deliver your packet to the IPv4 host 1.2.3.4.  NAT64 still isn&#x27;t mandatory (and likely never will be), so if you&#x27;re writing software you can&#x27;t assume those packets will get through even if you have an IPv6 network connection with a default route.<p>NAT64 didn&#x27;t come about until long after IPv6 was finalized, and NAT64 support from default-route IPv6 routers is still is not mandatory. That&#x27;s why we have this mess with dual-stack hosts: you cannot safely assume that your IPv6 router is willing to deal with the IPv4 world on your behalf.<p>The ::ffff:1.2.3.4 address space does, in fact, date back to the early days of IPv6 (it came from RFC 2765, about one year after IPv6 was finalized), but it was not meant for letting IPv6 clients share a single IPv4 address -- it was only for servers which for some reason had their own IPv4 address but couldn&#x27;t speak IPv4.  Yeah, back in the early 2000s people thought this problem might happen.<p>The IPv6 committee was viciously hostile to NATs.  The way they saw it, NATs were the problem that made IPv6 necessary, so no way were they going to allow any NATs to pollute their precious IPv6.  If that meant that the whole world had to run two separate internets (IPv4 and IPv6) for the rest of eternity just to keep the IPv6 network puritanically NAT-free, then so be it!<p>It took them more than a decade to realize how stupid this mindset was.')