Item(by='dragontamer', descendants=None, kids=[25920284, 25920237], score=None, time=1611689633, title=None, item_type='comment', url=None, parent=25917988, text='Load balancing as a strategy is used in far more than just web-applications!<p>This article only discusses web-based load balancing, which is absolutely important, but doesn&#x27;t discuss supercomputer scheduling load-balancing. Its arguably a different subject... but the concept is the same.<p>When you have 4000 nodes on a supercomputer, how do you distribute the problem such that all the nodes have something to do? Supercomputer problems are sometimes predictable (ie: matrix-multiplications), and you can sometimes &quot;perfectly load balance without communication&quot;.<p>But in the case of web-applications, there&#x27;s probably no way to really predict the &quot;cost of performance&quot; before you start processing the service request (what if its a Facebook request to a really old photograph? Facebook may have to pull it out of long-term storage before it can service that request. There&#x27;s no real way to know at the load-balancer whether a picture-request would be in the cache or not... at least, not before you process the request to begin with!)<p>-----------<p>In any case, I think adding &quot;Predict the computational cost, calculate the costs you distributed to different nodes, and then distribute the new load to the node with lowest computational cost given so far&quot; is a good method that works in some applications. (All blocks in a dense matrix multiplication have the same cost, so just keep passing out subblocks to all nodes as you&#x27;re working on the problem)')