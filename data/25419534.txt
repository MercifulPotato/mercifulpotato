Item(by='nrclark', descendants=None, kids=[25427877], score=None, time=1607963886, title=None, item_type='comment', url=None, parent=25417211, text='I think it&#x27;s great that the authors are working on this.<p>RAII is one of the best things about C++, and I&#x27;m excited  for similar functionality in C. GCC&#x27;s __cleanup__ is a poor substitute for a fully-baked addition to the language.<p>From skimming through the paper, it looks like there&#x27;s an open discussion about the &#x27;guard&#x27; keyword and scoping. I know that the scoping rules are tricky.<p>Would it make sense for defer statements to be attached to a variable&#x27;s scope instead of a scope block? It would look something like GCC&#x27;s __cleanup__, except that it could run an arbitrary statement&#x2F;block instead of a callback. Scope-level defer() could be specified by attaching to a depth number.<p>If anybody involved in the paper is reading this, what would you think about this syntax?<p><pre><code>    &#x2F;&#x2F;---------- Attaching a defer() to a variable&#x27;s scope -----------&#x2F;&#x2F;\n\n    int main(void) {\n        int *dummy = malloc(sizeof(int));\n\n        defer (dummy) {\n            printf(&quot;This statement prints second.\\n&quot;);\n            free(dummy);\n        }\n        \n        printf(&quot;This statement prints first.\\n&quot;);\n    }\n\n    &#x2F;&#x2F;------- Attaching a defer() to the current block&#x27;s scope -------&#x2F;&#x2F;\n    \n    int main(void) {\n        int *dummy;\n\n        do {\n            dummy = malloc(sizeof(int));\n\n            defer (0) {\n                printf(&quot;This statement prints second.\\n&quot;);\n                free(dummy);\n            }\n\n            printf(&quot;This statement prints first.\\n&quot;);\n        } while (0);\n\n        printf(&quot;This statement prints third.\\n&quot;);\n    }\n\n    &#x2F;&#x2F;-------- Attaching a defer() to a parent block&#x27;s scope ---------&#x2F;&#x2F;\n    \n    int main(void) {\n        int *dummy;\n\n        do {\n            do {\n                dummy = malloc(sizeof(int));\n\n                defer (1) {\n                    printf(&quot;This statement prints third.\\n&quot;);\n                    free(dummy);\n                }\n\n                printf(&quot;This statement prints first.\\n&quot;);\n            } while (0);\n\n            printf(&quot;This statement prints second.\\n&quot;);\n        } while (0);\n\n        printf(&quot;This statement prints fourth.\\n&quot;);\n    }\n\n</code></pre>\nThis syntax would eliminate the need for an explicit guard keyword, and would also make for a straightforward porting process for all code that currently uses __cleanup__. It also feels a little more C-like to me, in that it resembles the look-and-feel of other control-flow statements.<p>In my example, defer() with a variable-name would attach itself to the variable&#x27;s scope, and would execute when the variable leaves scope.<p>And defer() with an integer would attach itself to [current_scope_level - target_value]. So a defer(0) would trigger at the end of the current block scope, and defer(1) would trigger at the end of the parent block scope. Combined with generic {} blocks, you could get the same behavior provided by the paper&#x27;s suggested guard keyword.')