Item(by='nostrademons', descendants=None, kids=[24845110, 24845184, 24844951, 24845003, 24844987], score=None, time=1603257264, title=None, item_type='comment', url=None, parent=24844743, text='I remember doing this back in 2006 before Chrome even came out.  Remember when it was a good idea to cache the .length property because it was O(N) on some browser (I think an early IE), so you&#x27;d write your for-loops like this?<p><pre><code>  for (var i = 0, len = arr.length; i &lt; len; ++i) { ... }\n</code></pre>\nHell, the whole premise for React (the virtual DOM) is based on outdated performance advice.  Chrome has used a dirty-bit for DOM manipulations since a year or two after React came out; <i>manipulating</i> the DOM is within a factor of ~2-4 of setting a property on a JS object (and much faster than constructing &amp; copying whole new JS objects, which incurs a GC cost), it&#x27;s just that you really want to avoid interspersed manipulations &amp; queries, which force a page reflow:<p><pre><code>  parent.appendChild(document.createElement(&#x27;div&#x27;));   &#x2F;&#x2F; Fast; ~50 us\n  let w = parent.innerWidth;                           &#x2F;&#x2F; Slow, forces reflow; ~20 ms\n  let h = parent.innerHeight;                          &#x2F;&#x2F; Fast again; no page modifications\n  parent.appendChild(document.createElement(&#x27;div&#x27;));   &#x2F;&#x2F; Fast; just sets dirty bit\n  parent.appendChild(document.createElement(&#x27;div&#x27;));   &#x2F;&#x2F; Still fast; dirty bit already set\n</code></pre>\nBut that&#x27;s the nature of a lot of technical rules of thumb.  They get stale as the underlying stack beneath them changes.')