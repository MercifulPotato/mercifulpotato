Item(by='studius', descendants=None, kids=[25715588], score=None, time=1610207040, title=None, item_type='comment', url=None, parent=25700011, text='They downplayed the actual amount of time that went into these changes and the upcoming changes. Here&#x27;s the history:<p>Matz[1] released the first version of Ruby in Dec 1995.<p>DHH was a major player in getting Ruby into the global spotlight with Rails[2] in 2004. Rails got very popular as a framework for developing new applications, with Basecamp being novel, showing that it could work well and introducing people to REST, in a flexible interpretation, as well as ActiveRecord, whose ease of use and migrations became a model for modern web development.<p>Rails v3 divided the community, specifically around how and what Rails would support for the server and request-handling. This hinted at problems to come, but Rails was still strong, and many took it with a grain of salt and upgraded.<p>However, Twitter, which had been built on Rails became popular, and the &quot;fail whale&quot; emerged as they were unable to handle all of the requests. This was not a problem with scaling Rails, but with them knowing how they could scale Rails without much greater expense, but since they had to rewrite things and there was pressure to get scaling done right, they switched to Scala and Java, since Scala was functional and fast, and there was a lot of support for the JVM. Functional programming had already been making a comeback in popularity in the 2000s, because it often required a lower memory footprint and was fast. But, at that point in time, many teams and developers were looking into it.<p>Though it wasn&#x27;t the first time he&#x27;d done optimization, in 2012, Matz released mruby[1][3], an embedded Ruby.<p>Around the same time, with functional programming having been cool, Elixir was born and some of the Rails community left for writing Ruby&#x2F;Rails-ish code in Erlang.<p>Some had been trying to slim down Rails in core, so that there would be less code needed to serve requests.<p>Tenderlove, who came from the system programming side of things, joined the Rails core team with a focus on optimization, did work on Rack, and eventually he started working to help speed up Ruby.<p>For years, Matz and others had focused on speeding up and slimming down Ruby. Ruby had run on Lighttpd and Ruby on Rails could run on it also.<p>All of these things have been driving Ruby to get better, and now it is.<p>So, no, I don&#x27;t think it&#x27;s realistic that they put a year into it. <i>At least</i> 9+ calendar years led to this point, and it&#x27;s been 26+ calendar years since initial release. And this isn&#x27;t the end of it. It&#x27;s not trying to compete with or tank your favorite framework or language of choice, it&#x27;s just been improving and its team, even as good as it already was, has been improving.<p>P.S.- Ruby is not Rails. But not talking about how the history of Rails in the scope of things would be remiss. I can&#x27;t think of anything in the history of Ruby that has been bad, but certainly Rails has had its &quot;fun&quot;. But right now, it&#x27;s coming together. I also didn&#x27;t mention Sinatra&#x27;s influence on slimming things down, or Puppet, Chef, etc.&#x27;s contribution to the Ruby community, or Crystal which has been a valiant effort for a compiled Ruby-like ecosystem. There is so much that happened leading to today that shaped where things are and where they are going. I&#x27;m totally psyched about this.<p>[1]- <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Yukihiro_Matsumoto" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Yukihiro_Matsumoto</a><p>[2]- <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ruby_on_Rails" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ruby_on_Rails</a><p>[3]- <a href="https:&#x2F;&#x2F;github.com&#x2F;mruby&#x2F;mruby" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mruby&#x2F;mruby</a>')