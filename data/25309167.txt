Item(by='jordwest', descendants=None, kids=[25309890], score=None, time=1607121089, title=None, item_type='comment', url=None, parent=25306365, text='I haven&#x27;t tried Fable 3 yet, but I can speak to Fable 2 (F#) vs ReScript&#x2F;ReasonML (OCaml).<p>F# was heavily inspired by OCaml, it was originally intended as &quot;What would OCaml look like running on .NET?&quot; so the languages themselves share a lot of similarities.<p>ReasonML pros:<p><pre><code>  - ReasonML compilation times were much faster than Fable 2, but Fable compile times weren&#x27;t bad. OCaml is ridiculously fast.\n  - OCaml has an interesting module system that&#x27;s missing from F#.\n  - The toolchain feels a lot more lightweight than the whole .NET toolchain.\n</code></pre>\nFable pros:<p><pre><code>  - I found interop with JS and OOP stuff much easier in Fable than in ReasonML\n  - Fable has a tool for converting TypeScript definitions to Fable definitions - though it hasn&#x27;t always worked for me for more complex type definitions\n  - I prefer F#&#x27;s whitespace sensitive syntax over OCaml, but that&#x27;s just personal preference\n  - F# type providers are pretty cool\n  - F# has an interactive mode, and you can write standalone scripts (eg. for devops)\n  - If you want to write a web backend in the same language, F# on .NET is much more mature in the web space than OCaml.</code></pre>')