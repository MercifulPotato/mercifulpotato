Item(by='jlokier', descendants=None, kids=[24960908], score=None, time=1604250321, title=None, item_type='comment', url=None, parent=24956470, text='&gt; But doesn&#x27;t appending to a string buffer still mean copying a lot of bytes as you build up the final string?<p>Look at the article and see for yourself.  They do the string-builder measurement and show results.  It&#x27;s in figure 5.<p>The &quot;GEOMETRIC&quot; approach to string building from small fragments is slightly slightly faster than the rope approach.  That&#x27;s where characters are copied to a contiguous buffer, and the buffer is reallocated by doubling in size whenever it is filled.<p>The slowest by far is the &quot;UNBUFFERED&quot; [cord] version, which creates a new cord node for each append, instead of copying the characters.<p>&quot;BUFFERED&quot; [cord] is quite good.  It&#x27;s still a bit slower than &quot;GEOMETRIC&quot;, but good enough.<p>In a nutshell, the paper shows that copying bytes when the number of bytes at a time is small is essential to all fast methods of string building.<p>That&#x27;s because creating nodes and changing pointers is slower than copying <i>contiguous</i> bytes, up to some number of bytes.  That number is probably larger now than it was when the paper was written due to modern memory architecture.')