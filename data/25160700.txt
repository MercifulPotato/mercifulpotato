Item(by='the_duke', descendants=None, kids=[25161640, 25163788, 25162479, 25164127, 25161067], score=None, time=1605882524, title=None, item_type='comment', url=None, parent=25160474, text='Erlang&#x2F;OTP inspired actor systems that run Webassembly code are a brilliant (and potentially way superior) alternative to microservice madness.<p>Until now adopting Erlang or Akka meant restricting yourself to a single language ecosystem, but Webassembly maturing and more and more languages gaining support means that you can still use a heterogeneous ecosystem while benefiting from   easy sandboxing and isolation, almost instant startup, actor snapshotting&#x2F;migrations, a unified way of inter-service communication ...<p>All while avoiding the  complexities of grpc, building Docker images, Kubernetes, service meshes, &quot;serverless&quot; frameworks, ...<p>WASM running in the browser  pushes languages to adopt it. Even Microsoft is really investing into dotnet support via Blazor [5].<p>Also check out wascc [1] [2], which is similar, also written in Rust, quite a bit further along , has some very cool concepts around security and code signing, and supports multi-node systems. (not affiliated)<p>There is also a spec for distributing WASM via OCI (aka Docker) images, which is useful here. [3]<p>Some Webassembly proposals like interface types [4] will really help out in this context as well. Sadly wasm has not quite been evolving at the pace I would have hoped for since 1.0. Progress is there, but from the perspective of an enthusiastic early adopter it can seem glacially slow.<p>[1] <a href="https:&#x2F;&#x2F;wascc.dev&#x2F;" rel="nofollow">https:&#x2F;&#x2F;wascc.dev&#x2F;</a><p>[2] <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vqBtoPJoQOE" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vqBtoPJoQOE</a><p>[3] <a href="https:&#x2F;&#x2F;github.com&#x2F;solo-io&#x2F;wasm-image-spec" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;solo-io&#x2F;wasm-image-spec</a><p>[4] <a href="https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;08&#x2F;webassembly-interface-types&#x2F;" rel="nofollow">https:&#x2F;&#x2F;hacks.mozilla.org&#x2F;2019&#x2F;08&#x2F;webassembly-interface-type...</a><p>[5] <a href="https:&#x2F;&#x2F;dotnet.microsoft.com&#x2F;apps&#x2F;aspnet&#x2F;web-apps&#x2F;blazor" rel="nofollow">https:&#x2F;&#x2F;dotnet.microsoft.com&#x2F;apps&#x2F;aspnet&#x2F;web-apps&#x2F;blazor</a>')