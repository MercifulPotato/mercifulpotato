Item(by='andrewstuart2', descendants=None, kids=[24773599, 24773659, 24775186, 24774726, 24779248, 24774971, 24779133, 24775466, 24774377, 24776164, 24774023, 24775348, 24774849], score=None, time=1602655082, title=None, item_type='comment', url=None, parent=24762637, text='Has anybody legitimately had good experiences with microservices these days? Especially if you&#x27;re not starting with a monolith that has done well? My experience at several companies, several projects, has been that what was actually just a poorly built, inflexible, monolithic application becomes a poorly built, distributed, networked, polyglot  application that is now 100x less flexible. Sure you can reimplement any microservice interface any time you want and drop in the replacement, but good luck figuring out where that was being called and how many unique and interesting ways it might break if you don&#x27;t implement the edge cases in the same way.<p>Microservices and patterns like the ones in this article really add a serious amount of cost in the form of complexity, and you had better understand much better than this article explains the actual ways that your new and distributed system might fail. What happens when <i>this</i> circuit breaker opens and you stop creating accounts, but your transaction circuit breaker hasn&#x27;t opened and because you&#x27;re CQRS, you&#x27;ve already told your client &quot;201 Accepted&quot;? Be ready to deal with that.<p>In my experience, you&#x27;re much better off knowing how to build and iterate on a scalable monolithic architecture first. Built something that&#x27;s good and that you can iterate on pretty easily. Figure out how to profile monolithic applications for performance and squeeze more throughput out of your system  before you try your hand at splitting that architecture up and adding the myriad of distributed systems problems on top of the essential complexity.<p>Don&#x27;t underestimate the value of a compiler error or a right-click-to-refactor IDE. You don&#x27;t get those when suddenly everything is loosely coupled microservices over a service mesh.<p>There is plenty of tech to master to manage a half decent networked monolith without adding your own accidental complexity to the equation.<p>Just to add a reference to a primary inspiration, on top of my anecdotes: <a href="https:&#x2F;&#x2F;www.martinfowler.com&#x2F;bliki&#x2F;MonolithFirst.html" rel="nofollow">https:&#x2F;&#x2F;www.martinfowler.com&#x2F;bliki&#x2F;MonolithFirst.html</a>')