Item(by='wpietri', descendants=None, kids=None, score=None, time=1609677604, title=None, item_type='comment', url=None, parent=25620175, text='Why do you think they rewrote from scratch?<p>The from-scratch rewrite is a classic response to declining productivity. In the metaphor of technical debt, it&#x27;s equivalent to declaring bankruptcy.<p>As Jamie Zawinski wrote in 1999: &quot;We never distributed the source code to a working web browser, more importantly, to the web browser that people were actually using. We didn&#x27;t release the source code to the most-previous-release of Netscape Navigator: instead, we released what we had at the time, which had a number of incomplete features, and lots and lots of bugs. [...] The code was just too complicated and crufty and hard to modify [...]  By being a cleaner, newly-designed code base, so the theory went, it was going to be easier for people to understand and contribute. And this did get us more contributors. But it also constituted an almost-total rewrite of the browser, throwing us back six to ten months. Now we had to rewrite the entire user interface from scratch before anyone could even browse the web, or add a bookmark.&quot; -- <a href="https:&#x2F;&#x2F;www.projectseven.com&#x2F;grafitti&#x2F;october_2001&#x2F;zawinski.htm" rel="nofollow">https:&#x2F;&#x2F;www.projectseven.com&#x2F;grafitti&#x2F;october_2001&#x2F;zawinski....</a><p>He doesn&#x27;t use the &quot;technical debt&quot;, because that didn&#x27;t start becoming popular until 2004 or so: <a href="https:&#x2F;&#x2F;books.google.com&#x2F;ngrams&#x2F;graph?content=%22technical+debt%22&amp;year_start=1800&amp;year_end=2019&amp;corpus=26&amp;smoothing=3&amp;direct_url=t1%3B%2C%22%20technical%20debt%20%22%3B%2Cc0#t1%3B%2C%22%20technical%20debt%20%22%3B%2Cc0" rel="nofollow">https:&#x2F;&#x2F;books.google.com&#x2F;ngrams&#x2F;graph?content=%22technical+d...</a><p>but if you look at Ward Cunningham&#x27;s original 1992 description, it sounds pretty congruent: &quot;Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite... The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation [...]&quot;')