Item(by='proverbialbunny', descendants=None, kids=[25780621, 25786298], score=None, time=1610649887, title=None, item_type='comment', url=None, parent=25779931, text='Back in the day (3 years ago and earlier) at every company I was at we used the term &#x27;productionization&#x27; to describe someone making a model aka a proof of concept, and then someone else, a machine learning engineer or some kind of engineer rewriting it to work on a server.<p>This process is horrible, and not just because it doubles the work, but because it introduces bugs.  When the version up in the cloud does not work as intended, is it a bug in productionizing or is it in the original model?  Fixing bugs in this space can take longer than the initial model development and the initial productionization.  Many companies have failed over this.<p>So what&#x27;s the solution?  In recent years the industry has turned to deployment over productionization.  The idea is you deploy the model to the cloud directly.  Both engineers and scientists work together on the process.  The scientist defines what cells in the notebook get called for the final algorithm (as there are EDA &#x2F; plotting cells and documentation cells too).  The engineer sets up the amazon IO stuff, database login stuff, and monitoring services.  The scientist works with them to create tests and what to monitor so they get notified if there is a problem with the service.<p>No more mystery bugs.  The model gets directly deployed, the work load is minimal, and it brings people together.  The downside is often the engineers and scientists are on different teams, and sometimes companies will not let them merge for a while, so it becomes a telephone game instead of everyone feeling like they&#x27;re on the same team working together.  imo moving the scientist to the engineering team during this time can be helpful, or moving the engineer to the data team.<p>Some companies have services where entire notebooks get put up into the cloud and all of it gets called, so the scientist has to write the notebook in a way that works for the cloud.  It&#x27;s rarer, but how I prefer it is a wrapper py file is created that calls just the relevant parts of the notebook, kind of like a header file.  This process works well for me, but it as far as I know it is not standardized in the industry yet.<p>In short, if you end up in this situation, there is a better way.  Import the notebook into a .py file or into the cloud, don&#x27;t rewrite it.  This (hopefully) will remove this scenario you&#x27;re describing (comment this is replying to) so those issues will become a historical footnote.')