Item(by='bxji', descendants=None, kids=None, score=None, time=1606896748, title=None, item_type='comment', url=None, parent=25273957, text='&gt; If you care more about latency than consistency you have an &#x27;eventually consistent&#x27; system, where a write will eventually propagate, but a read might get stale data.<p>Not just stale data, you can also have states which never actually existed. I&#x27;ll steal the example from Doug Terry&#x27;s paper &quot;Replicated Data Consistency Explained\nThrough Baseball&quot; because it&#x27;s really good. Linked below.<p>Say you have a baseball game which is scored by innings. It&#x27;s the middle of the 7th inning, and the true write log for the state of the game is as follows:<p><pre><code>  Write (&quot;home&quot;, 1)\n  Write (&quot;visitors&quot;, 1)\n  Write (&quot;home&quot;, 2)\n  Write (&quot;home&quot;, 3)\n  Write (&quot;visitors&quot;, 2)\n  Write (&quot;home&quot;, 4)\n  Write (&quot;home&quot;, 5)\n</code></pre>\nIf you were to read the score at this point in time, and your system is strongly consistent, the score can only be 2-5 or a refusal to serve the request. If your system is eventually consistent, the score can be any of the following: 0-0, 0-1, 0-2, 0-3, 0-4, 0-5, 1-0, 1-1, 1-2, 1-3, 1-4, 1-5, 2-0, 2-1,2-2, 2-3, 2-4, 2-5.<p>Source paper: <a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;wp-content&#x2F;uploads&#x2F;2011&#x2F;10&#x2F;ConsistencyAndBaseballReport.pdf" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;wp-content&#x2F;uploads&#x2F;...</a>')