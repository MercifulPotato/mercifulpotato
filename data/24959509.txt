Item(by='acdha', descendants=None, kids=None, score=None, time=1604238925, title=None, item_type='comment', url=None, parent=24956711, text='I&#x27;m trying to think of a delicate way to put this but I&#x27;ll be blunt: when you put “Source: DBA” my reaction is not “oh, an expert who is correct when everyone else is wrong” but “wow, a DBA who doesn&#x27;t care about data integrity? It&#x27;s like finding a doctor who doesn&#x27;t wash their hands.”.<p>As someone who&#x27;s trained a bunch of DBAs, here&#x27;s how you should explain that this is a bug:<p>A database&#x27;s job is to reliably store and retrieve data: that&#x27;s why we talk about ACID since the whole concept is built around moving from one correct state to another. If we didn&#x27;t care about getting back what we stored, we could just write flat files on disk and shrug when it breaks. Silently discarding some of the input breaks that contract.<p>Similarly, a core part of the SQL standard is about the database ensuring that values match the defined schema constraints. If we&#x27;re going to allow silent truncation, the same reasoning would allow inserting foreign keys which don&#x27;t exist, coercing non-numeric values into NULLs or other ways of “handling” non-numeric data types, replacing invalid dates with &quot;0000&quot; (oh, wait…), ignoring CHECKs (which MySQL did until 8.0.16), etc. If we&#x27;re not doing that, we could just use MongoDB and stop pretending to be more than a blob store.<p>Rejecting the entire row is exactly what a DBA should want because it means that a) the database only contains the valid data it promised to save and b) the application team is immediately alerted to a mismatch between what their application assumes and how the database schema is actually configured — since there&#x27;s been a breakdown in the migration process, there are likely other problems as well which might be more subtle. Especially in this century there&#x27;s no excuse for not using a migration framework which makes the process of keeping the database schema in sync with the application automatic and reliable.<p>In one of the rare cases where data truncation is okay — and note that I&#x27;ve never encountered one of those in 3 decades where the users saw it as anything other than “This garbage software doesn&#x27;t let us store more and that&#x27;s why our department really runs on the Excel spreadsheet one of the admin assistants created” — the correct approach is to implement it at the application level so the user can see a fixed-length input field, warnings if they try to enter more, etc. and the application doesn&#x27;t produce odd errors when, say, it stores a value and attempts to retrieve the same value only to be told it doesn&#x27;t exist.')