Item(by='rovr138', descendants=None, kids=None, score=None, time=1610418207, title=None, item_type='comment', url=None, parent=25741061, text='I&#x27;ve done things similar and do it for quick and dirty. Currently I have something like that on a RPi but instead of<p><pre><code>    while true;\n</code></pre>\nI have,<p><pre><code>    while [[ ! -f &quot;$DIRECTORY&quot;&#x2F;backup_exit.stop ]]; do\n        sleep 3600 # sleep an hour\n        time &#x2F;home&#x2F;ubuntu&#x2F;.pyenv&#x2F;versions&#x2F;backup&#x2F;bin&#x2F;python main.py\n    done\n</code></pre>\nWhenever I want the process to stop, `touch backup_exit.stop` . This waits until the run finishes and exists on the next loop.<p>Anyway, that is saved to a &#x27;backup.sh&#x27;<p>Then I have also,<p><pre><code>    #!&#x2F;bin&#x2F;bash\n    session=&quot;test&quot;\n    backup=&quot;&#x2F;path&#x2F;to&#x2F;backup.sh&quot; \n    \n    #create detached session named test\n    tmux new-session -d -s ${session}\n    # Create windows\n    tmux rename-window -t :0 &#x27;backup&#x27; #rename the first one\n    tmux new-window -n &#x27;htop&#x27;\n    # Run processes\n    tmux send-keys -t &#x27;backup&#x27; &quot;$backup&quot; ENTER\n    tmux send-keys -t &#x27;htop&#x27; &#x27;htop&#x27; ENTER\n    \n    </code></pre>\nAnd this is run automatically on @reboot via cron.')