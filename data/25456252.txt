Item(by='mcolavita', descendants=20, kids=[25456838, 25457512, 25456767, 25458710, 25459132, 25456821, 25459160], score=39, time=1608217994, title="GCC's inefficient code generation for C++ initializers", item_type='story', url=None, parent=None, text='All examples are compiled with -O3 for x86-64.<p>https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;PYxz55\n(GCC 9, 10, 11)<p><pre><code>    xorl    %eax, %eax\n    movl    $0, -24(%rsp)\n    movw    %ax, -20(%rsp)\n    movabsq $72057594037927935, %rax\n    movb    $0, -18(%rsp)\n    andq    -24(%rsp), %rax\n    salq    $8, %rax\n    movb    %dil, %al\n    ret\n\n</code></pre>\nhttps:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;8njqn1 (GCC 9, 10)<p><pre><code>    xorl    %edx, %edx\n    movl    $1, %eax\n    movb    $2, %dl\n    movq    %rax, -24(%rsp)\n    xorl    %eax, %eax\n    movq    %rdx, -16(%rsp)\n    movdqa  -24(%rsp), %xmm0\n    pinsrd  $3, %eax, %xmm0\n    movaps  %xmm0, -24(%rsp)\n    movq    -24(%rsp), %rax\n    movq    -16(%rsp), %rdx\n    ret\n\n</code></pre>\nhttps:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;sronaG (GCC 7, 8, 9, 10, 11)<p><pre><code>    movq    %rdi, -24(%rsp)\n    movq    -24(%rsp), %rax\n    movq    %rsi, -16(%rsp)\n    movq    -16(%rsp), %rdx\n\n</code></pre>\nFor each example, two movs and a ret (and no stack access) would suffice.')