Item(by='outworlder', descendants=None, kids=[25260875], score=None, time=1606781940, title=None, item_type='comment', url=None, parent=25260441, text='&gt; Naive question: how do you draw graphics in Rust? (Or &quot;go&quot;?) Some wrapper on top of OpenGL?<p>The beauty of raytracers is that you don&#x27;t need any graphics support at all. The output of a raytracer is a frame. The simplest way is just an array. Compute your color values, save them to array positions.<p>Of course, you eventually will want to see the result. You can save an image to a file then. One of the simplest formats is PPM. The PPM format requires a header, afterwards you just push RGB values. Which means you don&#x27;t even need a library (<a href="http:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Bitmap&#x2F;Write_a_PPM_file#C" rel="nofollow">http:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Bitmap&#x2F;Write_a_PPM_file#C</a>)<p>If your question is not about raytracers, but more general, there&#x27;s countless ways.<p>Are you drawing in 2D (and not a game)? You can use the OS&#x27;s own native functions for this if you are brave. Since Rust can call C libraries, this should work. Draw in memory, then &quot;blit&quot;(i.e. copy it over) to the appropriate buffer. Under Windows, you could use the Win32 API directly if you don&#x27;t value your time :)<p>Alternatively, you can use a library that will make your work much simpler. There are many cross platform UI libraries, some of them with Rust bindings. And some Rust-specific ones too Check <a href="https:&#x2F;&#x2F;www.areweguiyet.com&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.areweguiyet.com&#x2F;</a><p>If you don&#x27;t care about GUI controls and are mostly drawing images (like in games!), there&#x27;s SDL. That will take care of most of your needs.<p>See also: <a href="https:&#x2F;&#x2F;arewegameyet.rs&#x2F;" rel="nofollow">https:&#x2F;&#x2F;arewegameyet.rs&#x2F;</a><p>If you are doing it in 3D, you could use OpenGL. I&#x27;ve done that with my raytracer back in university. Same principle applied: I would generate a scene in memory, then copy to a texture and display it. Geometry was just two triangles. You could do a similar thing.')