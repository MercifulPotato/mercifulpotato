Item(by='capableweb', descendants=None, kids=[25974874, 25975280, 25974932, 25974903], score=None, time=1612056368, title=None, item_type='comment', url=None, parent=25974747, text='&gt; I cannot imagine building beyond &gt;1000 LoC in interpreted, dynamically typed languages<p>Many have imagined and built valuable stuff in interpreted, dynamically typed languages before you, by being more focused on overall structure and making sure it&#x27;s strict and resilient. One really doesn&#x27;t have to search far for successful applications that are certainly way beyond 1000 LoC and still iterate pretty quickly for their size.<p>&gt; significantly easier to dockerize a generated binary from golang or rust<p>Not sure the verboseness of either golang or rust would be worth it if you compare it with python. If you&#x27;re just launching, your focus should not be on performance or how easy it is to dockerize but to figure out who your user really is. Scaling and deployment issues will happen much further down the road, and iteration speed is more important in the beginning as you have many changes. Your architecture needs to reflect this too, and dynamically typed languages (arguably) makes it easier to change things, as long as you know what you&#x27;re doing.<p>But together with that, you are eventually gonna have to start leveraging more languages, as you have programmers working on different levels of the overall architecture. Some fit for some tasks, and when it comes to quickly launching and iterating on SaaS businesses, dynamically typed languages are a pretty good fit.<p>In the end, I don&#x27;t really think dynamic&#x2F;static typing is the most important consideration, that&#x27;s such a small part of what you have to think about overall.')