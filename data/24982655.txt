Item(by='BenoitP', descendants=None, kids=[24998050], score=None, time=1604429302, title=None, item_type='comment', url=None, parent=24979693, text='&gt; are interoperable in Rust (block_on)<p>Blocking an OS thread as a mean to be compatible is not exactly what we&#x27;re trying to do here.<p>&gt; Except the performance difference between a kernel-mode context switch and a user-mode one is only going to narrow in the future<p>OS overhead can be minimized, but program stacks are a function of the language&#x27;s. And if you&#x27;re not right sizing preemption points in your stack, you&#x27;ll be switching large parts of it. This means you _must_ have stackful coroutines if you want to keep switching threads.<p>&gt; The real solution to expensive context switches is to just do fewer of them... No context switch is always faster than a &quot;fast&quot; context switch.<p>Sure, but writing the perfect assembly and using gotos has always been the fastest. Abstraction has a cost, and some runtimes&#x2F;languages are currently proving that they can reduce this cost to zero in the current conditions of IO being much costlier than a few 100s of nanos. We&#x27;re just happening to be at a time where the compiler is starting to be smarter than the user. But I guess the benchmarks will settle all this.<p>&gt; Just look at this issue: <a href="https:&#x2F;&#x2F;marcan.st&#x2F;2017&#x2F;12&#x2F;debugging-an-evil-go-runtime-bug&#x2F;" rel="nofollow">https:&#x2F;&#x2F;marcan.st&#x2F;2017&#x2F;12&#x2F;debugging-an-evil-go-runtime-bug&#x2F;</a><p>So that&#x27;s a bug in the go compiler. They can either fix it or pay a &quot;a small speed penalty (nanoseconds)&quot; as a workaround, which the author qualifies as &quot;acceptable&quot;.<p>Yes, that&#x27;s not the absolute performance possible. But why care about that? At some point it all comes down to TCO (except for latencies in HFT); and TCO tells you that it&#x27;s ok. Development complexity and maintainability matters. Especially when you can max out your IO usage for the decades to come.')