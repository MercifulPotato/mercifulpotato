Item(by='hhas01', descendants=None, kids=[25401554], score=None, time=1607767322, title=None, item_type='comment', url=None, parent=25394751, text='Not good, just “good enough”.<p>UX, like evolution, once it goes down one particular path, tends to get stuck there, fiddling with the details at best. Radical innovation becomes really hard to effect: in evolution’s case because any new feature can only extend&#x2F;adapt what is already there; in UI’s case because users tend to reject anything that doesn’t fit into what they already know.<p>It’s the distinction between stability and stagnancy. Stability is good in that it’s predictable; its benefit vs cost ratio is known. Stagnancy is not so hot: that ratio cannot (or will not) improve. WIMP is both stable and stagnant; trapped by its own early success with no obvious path forward.<p>.<p>Very relevant: after an early 8-bit dalliance I cut my adult teeth on Macs. Some of WIMP’s productivity gains were significant, but in other aspects it was just the same (or more!) drudge work in a cutsier skin. it wasn’t until I taught myself automation (via frustration and AppleScript) that I really put a decent dent in the latter.<p>And these were automations that built on my existing understanding of WIMP applications (unlike, say, the <i>nix CLI which ignores all that knowledge and invents a whole new unrelated world entirely from scratch). All the Models were exactly the same; all my knowledge of how to manipulate my data in those apps was fully transferrable, not to mention all my existing documents. The only difference was the View-Controller I was using: RPC vs GUI. And whenever I got to a point in my workflow where it was easier&#x2F;necessary to do something manually, I could freely switch back and forth between those two UIs.<p>Achieving 10x productivity gains over WIMP on frequent repetitive tasks is </i>embarrassingly trivial* with even modest automations. The hard part is creating an automation UX that’s efficient and accessible to the large majority of less&#x2F;non-technical users (AppleScript failed, but at least it tried).<p>.<p>When will we see another attempt? Dog knows. Voice tech like Siri is obviously trying, but is starting from the <i>hardest</i> end of the problem and trying to work back from there.<p>I believe there’s much quicker, easier pickings to be had by revisiting the AppleScript strategy—“server” applications exposing multiple View-Controllers for different interaction modes, and a really simple, textual “client” command language along the lines of Papert’s Logo (which 8 year-olds could learn how to use and compose), combined with modern auto-suggest, auto-correct, auto-complete to provide the transparency and discoverability that traditional CLIs fail so hard at.<p>The written word has 10,000 years of learning and practice behind it. And the most powerful word in the world is the word that expresses exactly what you want to say, whenever you want to say it. If that’s not an opportunity for some smart young coders with a desire to make a better world for all, I don’t know what is. You just gotta know history is all.<p>--<p>“It’s a curious thing about our industry: not only do we not learn from our mistakes, we also don’t learn from our successes.” – Keith Braithwaite')