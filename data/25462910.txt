Item(by='lmm', descendants=None, kids=[25464728], score=None, time=1608256285, title=None, item_type='comment', url=None, parent=25462246, text='&gt; A counterpoint: Option and Result are hard to read and unpleasant to work with. They are so annoying, that the language designers extended the language itself to make them tolerable - do notation in Haskell, &#x27;?&#x27; operator in Rust, guard-let in Swift.<p>Option and Result are tolerable without language extensions (as long as your language has first-class functions and parameterized types, which you want anyway) - <a href="https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;posts&#x2F;recipe-part2&#x2F;" rel="nofollow">https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;posts&#x2F;recipe-part2&#x2F;</a> . do notation is a small, purely-syntactic piece of sugar that&#x27;s usable for many different cases, not just error handling.<p>&gt; A plain old for loop has so much to recommend it. You get powerful control flow constructs (break&#x2F;continue&#x2F;return) and obvious performance characteristics.<p>Those are all language extensions! You&#x27;re talking about adding four keywords to the language, none of which are anywhere near as reusable as do notation.<p>&gt; Can you tweak your function to stop filling the first time a zero is encountered? That&#x27;s a simple one-line change with the for loop, but a puzzle for the functional iteration.<p>Different code should look different. map, reduce, fold, traverse, foldM are all different functions that do different things, but they&#x27;re easy to work with because they&#x27;re all normal functions that obey the rules of functions (and if you&#x27;re ever confused you can just click through to the implementation in plain old code). Languages don&#x27;t want to offer several different variants of &quot;for&quot; because it&#x27;s a language keyword that has to be supported at the language level, but the result is that the &quot;for&quot; loop is far from simple - it does several different things depending on how exactly it&#x27;s used, and you can&#x27;t tell which except by going through the details every time.')