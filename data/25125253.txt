Item(by='jcranmer', descendants=None, kids=[25128115, 25126782], score=None, time=1605628753, title=None, item_type='comment', url=None, parent=25124012, text='&gt; There is little of needless code in standard library. And what there is, believe me, over the decades was really polished.<p>Ha ha ha ha ha ha ha ha ha ha.<p>Locales are a massive clusterfuck, basically too simple to handle localization if you actually care about it, but supports enough of it to screw you over if you don&#x27;t care about it. The &quot;wide character&quot; support is also a nightmare. The time library support is also quite a bit wonky (years are measured as years since 1900 because Y2K is definitely not a pressing issue in 1989!).<p>&gt; inline Assembly<p>Fun fact, here is the C specification&#x27;s entire mention of inline assembly:<p>&gt; The asm keyword may be used to insert assembly language directly into the translator output (6.8). The most common implementation is via a statement of the form: asm (character-string-literal);<p>There is no discussion of what inline assembly can and cannot do, how it interacts with the rest of the code in term of semantics, how to pass arguments to and form inline assembly, etc. You might get some of this information from the manuals of compiler implementations, but even that can be surprisingly free of necessary information. Compare this to Rust&#x27;s inline assembly documentation: <a href="https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2873-inline-asm.html" rel="nofollow">https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2873-inline-asm.html</a> (which is more detailed than even gcc&#x27;s or LLVM&#x27;s inline assembly documentation).')