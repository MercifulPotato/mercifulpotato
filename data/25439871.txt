Item(by='baumandm', descendants=None, kids=[25439976], score=None, time=1608102207, title=None, item_type='comment', url=None, parent=25439111, text='I agree with GP as well, but I do think there are unique circumstances with GraphQL.<p>One difference is that if the front-end makes N+1 REST calls, it&#x27;s (hopefully) obvious to the front-end developer. It&#x27;s also generally easy to map the REST requests to the database queries being made.<p>Swap it all out for a single GraphQL query and now you have no idea how it will perform or whether it was optimized for the specific fields you are requesting.<p>Another difference is that REST-style solutions won&#x27;t work for GraphQL. Imagine you&#x27;re making a bunch of REST calls, e.g. querying for a list of articles then querying for a list of comments for each one.  You can ask the backend team for a new endpoint that returns them all in one query, easy enough.<p>But with GraphQL schemas, the potential graph of data is too large to write custom SQL queries that efficiently fetch everything in one batch.  For example:<p><pre><code>  {\n    articles {\n      title\n      contents\n      author {\n        name\n        articles {\n          title\n          contents\n          comments {\n            content\n            author {\n              ...\n            }\n          }\n        }\n      }\n      comments {\n        content\n        author {\n          name\n        }\n      }\n    }\n  }\n</code></pre>\nMaybe a bit contrived, but it illustrates my point. Due to the ability to traverse relationships it&#x27;s much easier to find yourself in a situation where the implementation of the GraphQL resolvers is not ideal for the usage, but it theoretically will work.')