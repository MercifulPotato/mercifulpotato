Item(by='jpcooper', descendants=None, kids=None, score=None, time=1607442256, title=None, item_type='comment', url=None, parent=25344213, text='I&#x27;ve been mostly functional throughout my career, so that method would have appealed to me before. The idea is to never mutate but always create a copy of data to prevent race conditions. Fundamentally though, you are mutating data. We have to accept this. Creating copies at each iteration does not change this. The question then is what abstraction allows mutation without allowing data races.<p>Recently I was looking into how I would implement a simple TCP protocol in C++. I think Boost&#x27;s ASIO (asynchronous IO) provides the correct abstraction for this. It allows you to write your code as if it were single-threaded. Code which needs to be serialised can run on the same &quot;strand&quot;. Strands simply serialise code, even if the code runs on separate threads.<p>I think this abstraction would work for the example in your link as well.')