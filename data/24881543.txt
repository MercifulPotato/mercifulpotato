Item(by='pyrale', descendants=None, kids=None, score=None, time=1603569268, title=None, item_type='comment', url=None, parent=24881154, text='&gt; A language cannot be Turing-complete if it completely forbids non-termination, there is no way around this.<p>I do acknowledge this. My point is that turing-completeness is not necessarily a desirable aspect of a language. You can check out Agda if you are interested in what can be done with a total language.<p>For some use-cases, like seting up a mainloop, you need an escape hatch because that mainloop is not going to be total. But not every program needs that. Conversely, a programming language that doesn&#x27;t care about totality won&#x27;t be able to sere other use-cases, such as building proven programs. My understanding is that it&#x27;s much easier to build an escape hatch in total languages, than it is to retrofit non-total languages to prove programs.')