Item(by='dwohnitmok', descendants=None, kids=[25122665], score=None, time=1605566637, title=None, item_type='comment', url=None, parent=25115746, text='There are two things I will argue with on this otherwise great explanation.<p>First, I&#x27;ve said this before and I&#x27;ll bang this drum across every Godel post I see. Please don&#x27;t introduce the notion of truth into an introductory post on Godel&#x27;s Incompleteness Theorems (the Power of Numbers section). Introductory posts on Godel&#x27;s Incompleteness Theorems like to say things like &quot;there are true things you cannot prove&quot; or in the case of this post &quot;there are some truths that you can never write down as an algorithm.&quot; This is very nuanced and depends very heavily on what logical system you&#x27;re in.<p>To demonstrate how subtle this point is, there is also Godel&#x27;s Completeness Theorem, which can informally be summarized as &quot;all true statement are provable,&quot; and holds for most logical systems that mathematicians use, including those to which Godel&#x27;s Incompleteness Theorems apply. The subtle point of course here is that &quot;true&quot; means something different in both contexts.<p>This leads to the classic overly strong philosophical statements such as &quot;For example, it may mean that we canâ€™t write an algorithm that can think like a dog.&quot; That may be true, but it&#x27;s not a direct consequence of Godel&#x27;s Incompleteness Theorems.<p>That&#x27;s why in an introduction I strongly strongly recommend just sticking to incompleteness, i.e. the fact that you cannot have an exhaustive list of axioms. There will always be new axioms you can add.<p>The second drum that I will keep banging on is that articles talking about how Godel&#x27;s Incompleteness Theorems show that a system S cannot prove its own consistency and stop there miss the significance of this statement. Usually, like in this article, they go in the &quot;opposite&quot; direction by saying S can&#x27;t prove itself, so maybe you could try using a more powerful S&#x27; to prove S, but then you couldn&#x27;t prove S&#x27;, and so you need an S&#x27;&#x27; to prove the consistency of S&#x27;, and so on and so forth in an infinite regress. But we actually care about the opposite direction: using S to prove the consistency of S&#x27; and then using S&#x27; to prove the consistency of S&#x27;&#x27; and so on.<p>That is we don&#x27;t actually care about using S to prove its own consistency because if we were ever doubtful of S&#x27;s consistency, we wouldn&#x27;t trust any proof it produced, let alone a proof of its own consistency.<p>Rather what is important is that we cannot prove the consistency of the stronger S&#x27; in the weaker S, since if we were able to prove the consistency of S&#x27;, then we could definitely prove the consistency of the weaker S. <i>This</i> is the fatal blow to Hilbert&#x27;s program. Hilbert was perfectly fine with having to assume the consistency of some logical system. His hope was something akin to a &quot;trusted computing base&quot; that if you assumed was consistent could then prove the consistency of all other more complex systems. Ideally this &quot;trusted computing base&quot; could be quite small, but it wouldn&#x27;t necessarily have to be, as long as there was some definite size after which we could stop having to take consistency on faith.<p>Godel&#x27;s consistency result implies that this trusted computing base cannot exist! There is no minimal base whose consistency, when taken on faith, is enough to prove the consistency of other systems we care about. That is we care about the opposite direction: S can&#x27;t prove the consistency of S, so it can&#x27;t prove the consistency of the larger S&#x27;, so it can&#x27;t prove the consistency of the still larger S&#x27;&#x27;, and so on.<p>Now again there&#x27;s some nuance here. We know that Con(S) is independent of S and in turn Con(S + Con(S)) is independent of S + Con(S) etc. but we also somehow know how to &quot;collapse&quot; this whole hierarchy if we know that S is consistent (the formalization of this intuition requires a deeper dive into model theory), so something is a little bit off here. Moreover stuff like Gentzen&#x27;s proof of the consistency Peano Arithmetic demonstrate there is some more wiggle room in exactly what it means for a system to be logically stronger than another system.<p>But the most straightforward, naive way of trying to use a single trusted computing base to prove the consistency of everything else will fail.')