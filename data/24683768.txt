Item(by='Reelin', descendants=None, kids=[24683993, 24684555, 24689694], score=None, time=1601861470, title=None, item_type='comment', url=None, parent=24682483, text='I&#x27;m a bit confused. Looking at the original paper (<a href="https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1805.10941.pdf" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1805.10941.pdf</a>) this doesn&#x27;t seem to be a RNG itself but rather a method to efficiently transform the output of a RNG onto an arbitrary interval while maintaining a uniform distribution. (This is at odds with the current title.) See in particular &quot;Algorithm 5&quot; which specifies retrieving a random integer on lines 1 and 7. In section 5, the authors specify that they use a linear congruential generator for their experiments.<p>If my understanding is correct, this is an important distinction because it means you can plug different RNGs into this algorithm depending on your needs (in particular the capabilities of the underlying platform).<p>Related question: For the ultimate in minimal state, would a CBPRNG such as Philox or Threefry (<a href="http:&#x2F;&#x2F;www.thesalmons.org&#x2F;john&#x2F;random123&#x2F;papers&#x2F;random123sc11.pdf" rel="nofollow">http:&#x2F;&#x2F;www.thesalmons.org&#x2F;john&#x2F;random123&#x2F;papers&#x2F;random123sc1...</a>) be safe to use here or would the fact that it can be invoked multiple times for a single call (and thus state sequences might end up overlapping between calls) be likely to introduce subtle statistical issues?<p>Slightly off topic - from Lemire&#x27;s paper:<p>&gt; may not be applicable to specialized processors such as Graphics Processing Units (GPUs) that lack support for the computation of the full multiplication<p>This statement seems to be at odds with the fact that implementations of Philox are provided for both AMD and Nvidia GPUs but Philox relies on efficient mulhi and mullo being available. I didn&#x27;t bother to look into it further yet though.')