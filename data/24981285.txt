Item(by='r0s', descendants=None, kids=[24981885, 24981819, 24981570, 24982708, 24982429, 24982219], score=None, time=1604421962, title=None, item_type='comment', url=None, parent=24980263, text='End to end tests are less precise to triage when they break, and they break more often than unit tests.  As the author said, they show all bugs, so they break a lot.<p>When the test is broken, it&#x27;s not providing coverage until it&#x27;s fixed.  Which is why I advocate for less assertive testing in that case:  <a href="https:&#x2F;&#x2F;assertless.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;assertless.org&#x2F;</a><p>The priority of fixing end to end tests becomes critical, and so test maintenance is more important.  With a large test suite of functional tests, that effort is not sustainable in my experience.  I&#x27;ve been there.  An image comparison suite of tests has the same issue, except it may defer all assertions, which is good, but it offloads a huge amount of analysis to the engineer consuming all the output.  You really do need a human to check those tiny style changes it finds, a human with extensive knowledge of the product and it&#x27;s ever-changing visual quirks.  I also maintain a large visual testing suite like that.<p>Cypress is not different from Selenium in that aspect. (There&#x27;s not much real difference at all that I can see.)<p>I think end to end tests have more of a value than the traditional testing pyramid would indicate, but there&#x27;s pitfalls and benefits to each type.  A suite of concise unit tests will find obvious bugs with precise granularity incredibly quick on the code they cover, which can never be complete coverage, but it doesn&#x27;t need to be.  This can be used for things like commit hooks that end to end tests just can&#x27;t.')