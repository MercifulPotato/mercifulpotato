Item(by='bigiain', descendants=None, kids=None, score=None, time=1608778740, title=None, item_type='comment', url=None, parent=25523200, text='&gt; I write blocking non-async functions every day. Why am I wrong to do so?<p>This (in my opinion) not &quot;wrong&quot;. At least not in general. There are instances where it might be more or less probematic though.<p>It&#x27;s probably problematic if you already have a bunch of async code in the codebase, because other readers of the code are likley to expect blocking functions to be async.<p>It&#x27;s maybe problematic for high performance or high scale code. Synchronous blocking functions are more likely to hit OS limits (file handles, network sockets, etc) than async code. If the code is obviously written from the ground up for high scale&#x2F;performance, this is less likely to be a problem, but if it&#x27;s proof of concept code that&#x27;s likely to get pushed into production by over eager PMs as soon as it passes tests, it&#x27;ll be worse.<p>It&#x27;s possibly problematic if done in a language&#x2F;frameworks where async is idiomatic - it&#x27;d be wrong to write using blocking functions in a nodejs codebase, because you&#x27;d be breaking other people expectations when reading&#x2F;understanding the code.<p>Maybe a useful rule of thumb might be &quot;if more than some number (perhaps 30 or 50%) of other people working on the code might think &#x27;hang on, I&#x27;m gonna refactor this to use async&#x27;, then maybe using a non-asyn blocking function was the wrong choice. That means it&#x27;s _never_ the wrong choice for one person codebases. It means it&#x27;s probably almost always a wrong choice in a javascript codebase. For everything else? &quot;It depends&quot;. I&#x27;d always choose to go with &quot;the principle of least astonishment&quot; - do whatever other people who might be affected would expect you to wherever possible.')