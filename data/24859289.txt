Item(by='AnIdiotOnTheNet', descendants=None, kids=[24859388], score=None, time=1603381648, title=None, item_type='comment', url=None, parent=24859158, text='&gt; On the other hand if my Windows app is complete in and of itself, but depends on a library which requires security updates, I will have to continuously release and distribute updates to it for the next 15 years (or however long it remains useful) even though the app itself is not changing.<p>Only if that library is not part of the base Windows platform, which already supplies a whole lot of things you&#x27;d typically need, cryptographic functions among them.<p>So yeah, if you depend on things that aren&#x27;t part of the base platform it is your responsibility to update them. Or, and this is equally imporntant, <i>not</i> update them if doing so breaks your application. If you only depend on the platform then you don&#x27;t really need to worry about it except in the rare case of an ABI break.<p>By contrast, breaking user space ABI on Linux is tradition, and there isn&#x27;t really any such thing as a stable and consistent set of libraries you can depend on as a platform because of the ludicrous level of fragmentation.<p>&gt; I&#x27;m currently working on a Windows plugin for an app, which requires linking to a ~20MB library, and also another library which in turn links to that same ~20MB library, but using an incompatible linker. The plugin is also for an application that uses that ~20MB library, distributed separately, and in turn many users install a standalone version of that library to use alongside the program. That&#x27;s 4 copies of the library just for one application on Windows, and this library is common and most likely also distributed with many other apps on most users PCs. All of them will need separate updates.<p>I&#x27;m curious what this library could be. At that size and level of commonness, I can only imagine that it is Qt or GTK, or some other &quot;portable&quot; platform layer.')