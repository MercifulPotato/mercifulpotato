Item(by='toast0', descendants=None, kids=None, score=None, time=1605083873, title=None, item_type='comment', url=None, parent=25055118, text='I&#x27;m not sure if the other answers were good enough.<p>NIF is native interop. There&#x27;s a bunch of provided functions for interfacing with Erlang terms and other things like that. But, it&#x27;s native interop, so you can also do whatever crazy stuff you want, even if it&#x27;s a bad idea.<p>The BEAM VM cannot and does not protect you from bad NIFs; but if you follow the guidelines and are careful not to crash, you can have a good time. Often, the scope of the native work ends up so small, it&#x27;s easyish to keep it safe. For larger scope, it&#x27;s more common to use a Port or a C-node; a Port is just what Erlang calls running your other code in separate OS process communicating with stdin&#x2F;stdout, and a C-node is your other code running separately, possibly on another machine, connected via network sockets, acting like a dist node. For this application though, it makes more sense to use a NIF to avoid copying the data to and from a separate OS process.<p>I haven&#x27;t used Rustler, but my understanding is it&#x27;s mostly just a framework of sorts for writing NIFs in Rust. Maybe making it easier to use Erlang terms, and setting up the compile settings etc.')