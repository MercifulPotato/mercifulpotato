Item(by='wegs', descendants=None, kids=[25130326], score=None, time=1605647761, title=None, item_type='comment', url=None, parent=25126802, text='With that attitude, I would never, ever, ever, hire you.<p>As a footnote, I would expect you to be able to understand things like SSD performance and reliability, and how it&#x27;s affected by complex algorithms in the drive controller (e.g. wear leveling, garbage collection, write block size, etc.). I would also expect you to be able to understand things like how subpixel rendering works, how rendering engines coordinate within LCD refresh, or how displays advertise their parameters to computers.<p>You shouldn&#x27;t take those as black boxes either. You do get into bugs and issues which relate there, and an experienced software engineer will have a depth of knowledge around oddball topics like that. That brings huge value.<p>It sounds like you&#x27;re not a nerd. Why did you go into software engineering? It sounds like you&#x27;re not interested in the stuff. There are lots of career tracks which don&#x27;t expect people to do those sorts of deep dives, and where willful ignorance is okay. Engineering, including software engineering, just doesn&#x27;t happen to be one of them. All the good software engineers I know will do dives into this stuff, and that expertise accumulates over time.<p>The key thing is most of us enjoy those deep dives. That&#x27;s what makes the career track a good fit.<p>If you don&#x27;t, you&#x27;ll be doing the equivalent of maintaining a COBOL database on a mainframe as you get older.<p>For my engineers, I&#x27;m not looking for tools which are &quot;Completely intuitive, just worksâ„¢.&quot; That&#x27;s Scratch. I&#x27;d advise you to code in Scratch if that&#x27;s what you want. I want tools which enable people to be productive, efficient, and get stuff done at a high level of quality. If that has a learning curve, that&#x27;s okay. People are coding 40 hours per week. If my programmers spend a month learning each year, and that makes them 50% more productive, they&#x27;ll beat your Scratch team. That&#x27;s why good programmers get paid the big bucks, and mediocre programmers can&#x27;t find jobs.')