Item(by='developer2', descendants=None, kids=[24671552], score=None, time=1601689971, title=None, item_type='comment', url=None, parent=24667444, text='This is frighteningly standard across most companies with no serious planning phase for new features, and no code review process. Fact is, some developer was told to create a REST API for password resets, and to return the secret token so that the (internal to the company!) client can send the email containing that token. This developer did their job correctly.<p>At some point, a different developer was told to consume this endpoint, send the related email, and tell the end user (browser client) that the email was sent. This second developer is not part of the &quot;senior services team&quot; who designed the above API, which is perfectly valid. Instead, this is a junior developer taking on their first task at the company. &quot;Take this password reset API endpoint, and integrate it&quot;. In addition to queuing the password reset email with the token embedded within it, they also accidentally proxy the password reset service&#x27;s payload to the browser. No intermediate or senior develop reviewed this new employee&#x27;s PR; if they did bother to look at it, they only checked for coding standard violations (eg. indentation), without taking the effort to understand the logic of the code.<p>This is actually extremely common, unfortunately. The server-side layer that directly interacts with clients (ie. browsers) is generally delegated to the most junior developers, because it&#x27;s menial and uninteresting work to connect the backend services to the browser. The current senior developers spent years working on that kind of garbage already, and they&#x27;d rather work on the &quot;more interesting&#x2F;advanced&quot; backend work. Thus, the junior developers whose skills aren&#x27;t yet honed are stuck–typically unsupervised–working on the front-facing components.<p>Also, this routinely happens at companies which rush every feature out the door with modern &quot;agile&quot; practices. The sprint is almost over! Quick, deliver all features by tomorrow to keep up our velocity and avoid a sprint review with negative feedback! Just merge it and push to prod without QA on a Friday at 4pm!<p>If only the above was a comedy routine, rather than what it truly is: the genuine reality at a large number of companies.')