Item(by='tabtab', descendants=None, kids=None, score=None, time=1603900337, title=None, item_type='comment', url=None, parent=24915887, text='I believe the argument is that Chrome&#x27;s code-base is becoming the de-facto browser standard, which will allegedly simplify things by making a stable platform. But it&#x27;s been hard to predict browser trends. Look how Chrome came out of nowhere and knocked Microsoft&#x27;s off the top. Netscape also got sucker-punched. Who knows what will punch next.<p>Web standards still have some glaring gaps that I&#x27;m not sure the current approach can tame. I propose &quot;the web&quot; be split into three standards:<p>1. Media&#x2F;Games&#x2F;Art&#x2F;Video<p>2. Documents (existing HTML may be good enough with minor tweeks)<p>3. Productivity: CRUD and Data oriented interactive GUI<p>By splitting, each standard can FOCUS on doing what it does best rather than the watered-down one-size-fits-all we have now. A given browser may support all 3, somewhat like how Java Applets and Flash could run inside of HTML documents. (They may be pluggins and&#x2F;or independent browsers.)<p>But unlike Applets &amp; Flash, the standards wouldn&#x27;t try to be full virtual OS&#x27;s. Dump as much on the server as you can to keep client standards lean, and reduce the need for scripting by including common behaviors.<p>For example, a common GUI idiom is for a button to activate a window or form. Rather than rely on scripting, that action could be built into the GUI markup:<p><pre><code>    &lt;button openTarget=&quot;myWindow&quot;&gt;\n        Click to open My Window\n    &lt;&#x2F;button&gt;\n</code></pre>\nOr maybe:<p><pre><code>    &lt;button label=&quot;Click to open My Window et. al.&quot;&gt;\n        &lt;action&gt;\n            &lt;setFocus target=&quot;myWindow&quot;&gt;\n            &lt;setFocus target=&quot;anotherWindow&quot; modal=&quot;false&quot;&gt;\n        &lt;&#x2F;action&gt;\n    &lt;&#x2F;button&gt;\n</code></pre>\nThe point is that if common GUI idioms and behaviors are built into the GUI markup standard, scripting (typically JavaScript) is not needed as often. The GUI Markup Language would be state-friendly and natively interactive, unlike HTML.')