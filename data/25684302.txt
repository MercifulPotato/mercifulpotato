Item(by='chriswarbo', descendants=None, kids=[25684308], score=None, time=1610111417, title=None, item_type='comment', url=None, parent=25683713, text='There are many types of observation we might define.<p>The most fundamental is whether we can write a program which halts in one case and doesn&#x27;t in the other.<p>An alternative is whether we can write an if&#x2F;then&#x2F;else branch to distinguish between the two cases. Note that this is less general than the above, since we can always use an if&#x2F;then&#x2F;else to implement a halt&#x2F;no-halt program, but we can&#x27;t always go the other way (due to the Halting Problem). This definition is useful, since if&#x2F;then&#x2F;else can cause arbitrarily-large changes to a program&#x27;s behaviour; whereas we can&#x27;t &quot;use&quot; a difference which affect halting.<p>Another definition, which is more subjective, is whether we can do the above &quot;reliably&quot;. For example, any optimisation that makes a program faster could be observed by a language which allows access to a clock. Whilst hackers and debuggers might find these useful, it&#x27;s not the sort of thing that a &quot;reasonable&quot; programmer would do (i.e. code which relies on this sort of thing shouldn&#x27;t pass code review). I&#x27;d probably count inspecting stack traces, or running a debugger on ourselves, in this category.<p>The messy subjectivness of the latter is why I like to limit the capabilities of what I&#x27;m developing with: I don&#x27;t have to care about timing altering the behaviour of a program which can&#x27;t access a clock.')