Item(by='erlich', descendants=None, kids=None, score=None, time=1611355683, title=None, item_type='comment', url=None, parent=25874105, text='I feel your pain. It was really too early for React until 2 years or so ago. Since hooks, things have calmed down a bit. I would be interested to hear from people who successfully navigated that past 5 years in JS world. I feel I would have been happier just being forced to use Ember or something until hooks came out. A ridiculous amount of time was spent on tooling, perf optimizations, and huge amounts of code is just going to go into the bin one day.<p>I have this feeling that 2010+ has been this massive story arc and one day we will end up very close to where we started, back to something similar to jquery and vanilla JS because the platform improved. Just like how a React platform feature like context hooks deprecated Redux.<p>For frontend, if Typescript is standardized and shipped with browsers...see ya later beefy compiler toolchains.<p>For backend, Deno.<p>That Typescript with its current popularity is not shipped in browsers within 10 years seems super unlikely.<p>The funny thing with TS is that to get good typing, you start to write everything similar to Java&#x2F;.NET with dependency injection etc. I resisted it for such a long time, but when you realize you want things typed, classes and all those patterns become necessary - see Nest.js&#x2F;TypeORM for an example. It just makes everything cleaner and is easier to standardize patterns.<p>The post seems to have a bit of a &quot;holier than thou&quot; when dealing with naive .NET developers. I think that .NET devs living outside of our JS bubble probably have a lot of interesting criticism to offer. The retort that pops in your mind is &quot;you just don&#x27;t understand...this is how its done&quot;, but if they critiqued any number of the features that have been deprecated in React - they would have been right and us wrong. And even the creator of React said that moving away from classes made it to difficult and would have preferred not to have done it. My point is that JS is a bubble and we shouldn&#x27;t be so sure of ourselves.<p>Also the fact that Apollo is the top API library at the moment, and doing optimistic updates and working with the cache is insanely complicated when ultimately you just want something like ActiveRecord on the client like how we use to do it with Backbone models. Redux and friends is also extremely verbose and complicated for no gain. I miss the simple mental model of Backbone - yeh there were problems, but at the end of the day I just want to write `User.getPosts()` and `User.setPost()` and be done with it. 90% of the time I don&#x27;t actually need GraphQL selective querying and such, its just got such a big momentum and community behind it that I use it. And REST with `react-query` and `swr` is still extremely complicated. Sorry for the rant.<p>So I wonder if anyone has taken the time to predict when all the tools we use today will eventually be deprecated.')