Item(by='sgtnoodle', descendants=None, kids=None, score=None, time=1602488510, title=None, item_type='comment', url=None, parent=24751323, text='An FPGA can be thought of as programmable hardware. An FPGA chip has many many thousands of very flexible logic blocks, and a matrix of interconnects to connect those logic blocks together arbitrarily. Software tools allow you to describe a complex digital circuit, and the design is compiled down into a bitstream that configures the FPGA&#x27;s blocks and interconnects to implement the circuit. In addition to internal connections, the circuits can be connected to external IO pins.<p>The logic blocks and interconnects are relatively slow compared to a tailor made ASIC, but they&#x27;re still generally capable of propagating signals approaching GHz clock rates.<p>As an example, with a really nice CPU you might be able to run billions of instructions per second, but you are limited to what those instructions can do. If you want to sum a bunch of integers, you need to do it sequentially by implementing a loop. Maybe you can sum 1 billion integers per second. With an FPGA, you could instead use the available blocks to implement a thousand adders in a logarithmic pyramid, able to sum 500 numbers at once at say 100Mhz, and the circuitry to speak to a CPU and its memory directly over PCI-E. Now, you can sum 50 billion integers per second, assuming the RAM can even keep up.<p>I can&#x27;t imagine there&#x27;s any automatic speed up of C code with this specific card, unless the card maker implemented a really fancy compiler. More likely, there&#x27;s a specific algorithm that the card was designed to do in parallel faster than a CPU can. Someone had to implement that algorithm in a language that could be compiled down to the FPGA bitstream. On top of that, it&#x27;s possible the card wasn&#x27;t even meant to be tightly coupled to a traditional CPU. It&#x27;s possible that the FPGA was meant to participate directly on a data center network and respond to requests directly. The whole &quot;program&quot; could be implemented as state machines in digital logic, including the TCP&#x2F;IP stack. Also, &quot;soft&quot; CPUs can be implemented inside an FPGA, making it possible to run traditional programs too.<p>You can generally use an FPGA to implement any algorithm that&#x27;s parallelizable to some degree. As a master&#x27;s project 11 years ago, my team accelerated stereo disparity calculations with an FPGA. The idea is that you match similar pixels between two spatially separated images in order to generate a depth map. It&#x27;s an expensive calculation. At the time, a CPU could manage a few frames per second from 480p webcam streams. The FPGA version could handle hundreds of frames per second. We couldn&#x27;t feed it in video fast enough. Of course, nowdays a modern GPU running a shader program might be faster.')