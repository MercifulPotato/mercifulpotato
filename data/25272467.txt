Item(by='tzs', descendants=None, kids=[25275073], score=None, time=1606874588, title=None, item_type='comment', url=None, parent=25271885, text='&gt; P.S. And what&#x27;s with the stuff Apple does release as open source? Don&#x27;t get me wrong, I&#x27;m glad they do it—because I&#x27;ll take what I can get—but I have no clue who it&#x27;s for! A lot of the code is either extremely difficult or impossible to actually compile, because it relies on internal Apple tools or libraries which aren&#x27;t public<p>Even when it doesn&#x27;t rely on anything Apple-specific, it can be unclear how to build it.<p>I noticed that if I ctrl-z dc, then resume it, it silently exits. I grabbed the source to see if I could build it, and then perhaps debug this.<p>The source is part of bc. When you extract it there is a directory containing a bc dir, a patches dir, a bc sources tarball, and a Makefile. The bc directory is the contents of the tarball with the patches from the patches directory applied.<p>Optimistically typing &quot;make&quot; does not work. It runs configure somewhere (in the bc directory, I think), decides that gcc is &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Toolchains&#x2F;XcodeDefault.xctoolchain&#x2F;usr&#x2F;bin&#x2F;cc, and decides that this cannot create executables and exits.<p>Maybe just going into the bc directory and running configure and make there will do the trick? .&#x2F;configure works and builds a makefile. Trying to compile with that gets fatal errors, apparently due to missing &lt;string.h&gt; in some C files.<p>OK, I don&#x27;t actually care about bc, so how about just trying to build dc, which lives in a subdirectory under the bc directory.<p>That gets a fatal error due to a conflict between &quot;#define ptrdiff_t size_t&quot; in the config.h that configure made, and &quot;typedef __darwin_size_t size_t&quot; from somewhere. Based on the comments in config.h, apparently it should only be defining that if it is not defined by the system. Commenting it out in config.h and trying again...and all the compiling steps for dc actually finish!<p>Alas...it then fails because it needs ..&#x2F;lib&#x2F;libbc.a, which presumably would have been built before building dc if the bc build had worked.<p>Maybe if I go to ..&#x2F;lib and type make? Nope. In fact, the errors are identical to when I typed make for bc, because it turns out that making libbc.a is the first thing the bc make tries to do.<p>Tossing in &quot;#include &lt;string.h&gt;&quot; in lib&#x2F;getopt.c and lib&#x2F;number.c makes everything build, finally giving me a locally built dc.<p>Is it too much to ask that when I download the source from Apple to their version of a simple command line knows-nothing-about-MacOS utility like this, I should just be able to type &quot;make&quot; somewhere and have it build? Or at least have a README in the tarball that tells me what I need to do?')