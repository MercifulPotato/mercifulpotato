Item(by='garethrowlands', descendants=None, kids=[25057734], score=None, time=1605095458, title=None, item_type='comment', url=None, parent=25056413, text='&gt; Most DI containers are not just injectors, but they also manage life cycles&#x2F;scopes of objects: singleton&#x2F;transient&#x2F;scoped.<p>That imperative lifecycle stuff is a big problem. Is that idiomatic in .net? Ideally, the program creates per-request data and then the garbage collector disposes of it after the end of the request (or earlier if it doesn&#x27;t need to be retained until the end of the request). If you need to actually call Dispose, short of `using ...`, you have a problem.<p>&gt; Lets say the IStockService has 15 methods to do with stock and 10 dependencies<p>Is this idiomatic in .net? It&#x27;s obvious that that is a problem and that smaller classes&#x2F;functions are better. Normally, your programming language and environment would let you create smaller classes&#x2F;functions and call them as necessary. Why is something more complicated required in this context?')