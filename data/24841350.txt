Item(by='estebank', descendants=None, kids=[24841837], score=None, time=1603221737, title=None, item_type='comment', url=None, parent=24841245, text='ADTs are only concerned with the &quot;shape&quot; of the data and what interactions you can have. It is related to classical OOP in the sense that the &quot;interactions&quot; you can have are equivalent to the message passing from the original conception of OOP[1].<p>The distinction is similar to database design in SQL: the Schema is how the data is laid out and what the relationship between tables is (ADTs) while the queries is the operations performed on them (traits). On the other hand, in OOP there&#x27;s a higher reliance on encapsulation, making behavior an integral part of what the class <i>is</i> and using inheritance for expansion. When all you have is ADTs, you _can&#x27;t_ have inheritance, so you end up using composition (which is generally considered better design) and you are more likely to rely on the creation of &quot;new-type&quot; container types for everything. You think of them as a way to describe what the data <i>is</i>, not how you interact with it.<p>Apologies if this is a bit hand-wavy, I&#x27;ll try to write a more thoughtful answer at a later time.<p>[1]: <a href="https:&#x2F;&#x2F;medium.com&#x2F;javascript-scene&#x2F;the-forgotten-history-of-oop-88d71b9b2d9f" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;javascript-scene&#x2F;the-forgotten-history-of...</a>')