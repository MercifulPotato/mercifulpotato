Item(by='znpy', descendants=None, kids=[24917469], score=None, time=1603883743, title=None, item_type='comment', url=None, parent=24917190, text='A lot of stuff were &quot;microservices&quot; before the name was coined. SOA (as in service-oriented-architecture) was definitely a thing.<p>I worked for a company whose software was&#x2F;is based on CORBA and let me tell you, that thing really smells like microservices-before-it-was-cool.<p>You had a naming service, and each component would connect to the naming service on startup and resolve the endpoint for the components it needed.<p>And each piece of software had a component called ORB (object-request-broker) that was used to represent remote stuff (remote objects&#x2F;endpoints). You could invoke method calls on this object (kinda&#x2F;sorta, i&#x27;m making it simpler here) and it would forward the call in background, hiding the networking&#x2F;serializing&#x2F;deserializing details.<p>That whole things kinda reminds me of protocolbuffers, etcd and microservices. By using a cluster manager (Veritas Cluster Manager) you had a service groups, something that looked like a pod, in a way.<p>-----------<p>It&#x27;s been a while, but I&#x27;ve started thinking that there&#x27;s nothing really new. The problems we&#x27;re facing are pretty much always the same, it&#x27;s just that the solutions improve on different areas. Kubernetes for example helps a lot on the scaling problem and the standardization (both ops team and dev team have a common lingo, the kubernetes object model -- pods, deployments, services, requests&amp;limits etc).<p>EDIT:<p>Just skimmed the article... Yup, DCOM was a competing alternative to CORBA.')