Item(by='one-punch', descendants=None, kids=None, score=None, time=1606421374, title=None, item_type='comment', url=None, parent=25221158, text='An expressive language should let programmers reason about code, including parsers, for their correctness.<p>You know it is correct when you see it, and you get more confidence in not making silly mistakes with unit tests. This is a different approach to formal verification using logic solvers or theorem provers.<p>For an example of parsing with Haskell, see this recent discussion: <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25212372" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25212372</a><p>This approach, as hinted in <i>Parse, Donâ€™t Type-Check</i>, is to <i>raise the level of abstraction</i>. The jargons are to create a domain-specific language (DSL) to model the problem, as in language-oriented programming.<p>With this approach, you understand what the code is trying to do and can change it easily because it reads like pseudo-code. (Pseudo-code is usually a synonym for code at the right level of abstraction.)')