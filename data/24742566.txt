Item(by='nyanpasu64', descendants=None, kids=None, score=None, time=1602371227, title=None, item_type='comment', url=None, parent=24739052, text='Rust&#x27;s im[1] and rpds[2] crates are refcounted pointers to immutable data structures, but support mutable operations on &amp;mut instances. When an instance is cloned, it merely creates another pointer. When an instance is modified, it uses Arc::make_mut() to only clone each tree node if it has other users. This approach has runtime overhead, but makes nested updates (foo[0][0].attr = 1) as simple as mutable structures.<p>This somewhat resembles immer.js (uses a proxy around an immutable structure which records updates). Contrast this approach to Clojure transients (whose children don&#x27;t magically become transient), and whatever Haskell does (<a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24740384" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24740384</a>).<p>[1]: <a href="https:&#x2F;&#x2F;docs.rs&#x2F;im&#x2F;" rel="nofollow">https:&#x2F;&#x2F;docs.rs&#x2F;im&#x2F;</a><p>[2]: <a href="https:&#x2F;&#x2F;docs.rs&#x2F;rpds&#x2F;" rel="nofollow">https:&#x2F;&#x2F;docs.rs&#x2F;rpds&#x2F;</a>')