Item(by='jeff-davis', descendants=None, kids=[24910564], score=None, time=1603819321, title=None, item_type='comment', url=None, parent=24895387, text='It looks like on the platform in this blog post, longjmp() simply discards the stack frames between the setjmp() and the longjmp(). That&#x27;s perfectly correct, of course, because C doesn&#x27;t make any guarantees about longjmp()ing across language boundaries (e.g. if there are C++ stack frames in between that have destructors to call).<p>But that&#x27;s unfortunate, because cross language exceptions can and should be supported to promote polyglot programming. Rust has some interesting work going on here (RFC already accepted):<p><a href="https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2945-c-unwind-abi.html" rel="nofollow">https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2945-c-unwind-abi.html</a><p>That will allow a way to call C++ code such that, if it throws an exception, will unwind over the rust frames in between (calling rust destructors as necessary) and keep unwinding back into C++ code that catches the exception.<p>Of course, C++ doesn&#x27;t have a defined ABI, but I guess the rust team is comfortable that it can conform to whatever mechanism the target platform uses to implement C++ exceptions.<p>Setjmp&#x2F;longjmp from C over rust code is trickier, because as I mentioned before, longjmp() can simply discard all the intervening stack frames. So there would still need to be some ceremony to call setjmp() first before calling from Rust to C, so that you can &quot;catch&quot; the longjmp(), turn it into a Rust unwind (called &quot;panic&quot;), and then again longjmp() back to C code (the prior setjmp() location).<p>A bit of standardization could help here a <i>lot</i>. The concept of a &quot;Plain Old Frame&quot; (with no pending destructors or other concepts) could be interesting to standardize in a way that exceptions or longjmp() could know what they need to do (if all frames are POFs, just discard them; else unwind).<p>I&#x27;m not really an expert on the subject, but it seems to me that we aren&#x27;t that far away from a truly polyglot language environment (at least C&#x2F;C++&#x2F;Rust) that deals with exceptions across languages smoothly.')