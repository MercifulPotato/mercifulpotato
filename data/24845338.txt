Item(by='skohan', descendants=None, kids=None, score=None, time=1603262781, title=None, item_type='comment', url=None, parent=24844243, text='So a point of comparison would be like a Swift or a Java where module&#x2F;package definitions are defined implicitly, based on the location in the file system.  In contrast, Rust&#x27;s explicit module declarations seem cumbersome and unnecessary, especially since 90% of the time you&#x27;re just typing out a structure which is identical to what already exists in the file system.  So this could easily be inferred, but it&#x27;s just not.<p>I think the same can be said for match statements on enums: in Rust you need to match against the fully qualified type name, when in other languages (including Zig) you can infer everything up to the enum case, since it&#x27;s already specified by the type you are matching against.<p>These kinds of things just seem weirdly inconsistent, since in many cases Rust favors inference and elision to remove boilerplate, while in other cases it requires explicitness when there is no technical reason for it to be required, and other languages handle inference just fine.')