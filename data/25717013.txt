Item(by='throwaway894345', descendants=None, kids=[25717380], score=None, time=1610299850, title=None, item_type='comment', url=None, parent=25716785, text='&gt; But I think the reason for that is strictly orthogonal to type safety - rather it&#x27;s because Rust&#x27;s approach to memory management is a lot more demanding on the programmer than GC.<p>Rust lacks a GC so it uses its type system (namely its borrow checker) to compensate. I don’t know that this can be considered “orthogonal to type safety” in a meaningful way.<p>&gt; Speaking only in terms of type systems, I think Rust&#x27;s features - like algebraic types and explicit nullability - are strictly better than Go and make it easier to write correct code. It just happens to be that this benefit is eclipsed by all the ceremony required to satisfy the borrow checker.<p>Yeah, I completely agree. Go with ADTs would be a significant improvement. I would really like to see someone write a language like this that is interoperable with Go (compiles to idiomatic Go to the extent possible).<p>&gt; I actually think Swift as a language is plenty ready for general purpose programming. The problem is the tooling.<p>Hmm, well I hope it finds its feet. It certainly seems like it would be a welcome addition.')