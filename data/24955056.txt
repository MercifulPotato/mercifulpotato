Item(by='curryhoward', descendants=None, kids=[24955287], score=None, time=1604177056, title=None, item_type='comment', url=None, parent=24949882, text='I like to think there is a nice pun here, that functional programming is &quot;timeless&quot; in two simultaneous ways:<p>(1) As mentioned in the article, values are immutable and side effects are reified so you do not have to reason about time. Instead, you can reason equationally, which unlocks some nice benefits related to refactoring, reasoning about correctness and concurrency, testing, reproducibility, etc.<p>(2) Functional programming is based on well-behaved mathematical foundations and so is more stable than the other programming paradigms. Object-oriented programming is a constantly moving target because it doesn&#x27;t have a principled formal foundation (despite many attempts to establish one on an ex post facto basis), whereas functions are &quot;timeless&quot; in the sense that they&#x27;re here to stay.<p>It&#x27;s not without tradeoffs of course, but if you&#x27;re willing to have an open mind about how computers should be programmed and forego some things that are so pervasive in traditional programming (e.g., unrestricted side effects), the payoff is huge.')