Item(by='crispyambulance', descendants=None, kids=None, score=None, time=1610020209, title=None, item_type='comment', url=None, parent=25668143, text='There&#x27;s another facet to this which I think is far more important that OP question of &quot;What [exactly] does mastery &#x27;look like&#x27;?&quot;.<p>The more important question is &quot;how do you cultivate mastery?&quot; How does your organization get to a place where people can develop mastery instead of the organization trying to create it instantly by hiring &quot;the right people&quot;? Regardless of what people may claim, hiring is not a solved problem. It&#x27;s _really_ hard to identify candidates that are true masters at what they do (let alone getting them to quit their job and join your team).<p>By the same token, it&#x27;s also _really_ hard for true masters to find a place that understands their value and, more importantly, will allow them to do their thing and provide career satisfaction. A lot of talented people are locked out of jobs because someone thought their career trajectory wasn&#x27;t quite right&#x2F;impressive.<p>Training and mentorship, however, are better understood and have lower stakes. It makes me think of Bell Labs. I know a couple folks who worked there who had very &quot;unimpressive&quot; backgrounds, they started as techs but rubbed elbows with stellar talent in a place that cultivated discovery and collaboration. Over time while there and in other places they were able to rise to principal design engineers, beyond what many who went to elite universities achieve. They credit their formative years in Bell labs with getting them started on their career path.<p>The thing is, Bell Labs didn&#x27;t have an epically selective hiring process, nor was the compensation insanely high. They provided an environment that _attracted_ people with mastery and those who were passionate about what they do, they developed talent within their walls rather than trying to merely buy it or find it.<p>This was for electrical engineers, but the same ideas can apply to software engineers.')