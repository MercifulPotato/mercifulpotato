Item(by='dragontamer', descendants=None, kids=[24771504], score=None, time=1602630016, title=None, item_type='comment', url=None, parent=24771153, text='&gt; Well, if your stack is using a dynamic array as backing store, push is only amortized O(1). You can simply chain all all freed blocks in a singly linked free list without using additional space.<p>Given the higher latency on linked lists, and the relative simplicity of calculating the stack-size needed, it doesn&#x27;t seem like going through the linked-list traversal is the best plan to me.<p>If you repeatedly need extra space for &quot;additional slabs&quot;, I suggest an unrolled linked list (<a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unrolled_linked_list" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unrolled_linked_list</a>). Each 1MB slab with 64B blocks gets associated with a new std::array&lt;void*, 16384&gt;. This keeps the relative simplicity of a linked list (O(1) push &#x2F; pop operations), while keeping the cache-friendliness of a normal array.')