Item(by='chriswarbo', descendants=None, kids=[24826064], score=None, time=1603105782, title=None, item_type='comment', url=None, parent=24824601, text='&#x27;reduce&#x27; (AKA &#x27;fold&#x27;) is rather fundamental to lists&#x2F;sequences: it&#x27;s their &#x27;elimination form&#x27;, which means anything involving lists can be written using &#x27;reduce&#x27;. Functions like &#x27;map&#x27;, &#x27;filter&#x27;, etc. are essentially common patterns which can be implemented using &#x27;reduce&#x27;.<p>I understand the aversion to &#x27;reduce&#x27;, since it can get quite messy, but I still prefer it to e.g. WHILE loops (note that the &#x27;for&#x27; keyword in most languages actually implements a WHILE loop). I think a more general rule is that custom abstractions can sometimes be useful, so we shouldn&#x27;t try to write everything in terms of language builtins (these days &#x27;map&#x27;, &#x27;filter&#x27; and &#x27;reduce&#x27; are often built-in, but we can still make our own abstractions on top if appropriate).<p>As a comparison, the elimination form for booleans is &#x27;if&#x2F;then&#x2F;else&#x27;: we could write all of our branching in terms of if&#x2F;then&#x2F;else, but there are common patterns that can be expressed using abstractions like boolean algebra (AND&#x2F;OR&#x2F;NOT&#x2F;etc.).')