Item(by='Chris_Newton', descendants=None, kids=None, score=None, time=1608600927, title=None, item_type='comment', url=None, parent=25501772, text='<i>I think the central thesis of</i> Clean Code <i>still holds up. You should never mix layers of abstraction in a single function.</i><p>I agree up to a point, but I find this kind of separation a little… idealistic? I prefer the principle that any abstraction should hide significantly more complexity than it introduces.<p>At the level of system design, there probably are some clearly defined layers of abstraction. I’d agree that mixing those is rarely a good idea.<p>But at the level of individual functions, I have too often seen numerous small functions broken out for dogmatic reasons, even though they hid relatively little complexity. That coding style tends to result in low cohesion, and I think the cost of low cohesion in large programs is often underestimated and can easily outweigh the benefit of making any individual function marginally simpler. If you’re not careful, you end up trading a little reduction in complexity locally for a big increase in complexity globally.')