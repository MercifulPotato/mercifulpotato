Item(by='steveklabnik', descendants=None, kids=[24992652], score=None, time=1604520059, title=None, item_type='comment', url=None, parent=24992366, text='I think that folks are happy to <i>say</i> &quot;oh just toss an Arc on it&quot;, and there&#x27;s no like, moral opposition to doing so. But the issue is that it is much easier said than done.<p>So for example, let&#x27;s take a really simple program:<p><pre><code>  fn takes_ref(r: &amp;i32) {\n      println!(&quot;r: {}&quot;, r);\n  }\n  \n  fn main() {\n      let v = 5;\n      \n      takes_ref(&amp;v);\n  }\n</code></pre>\nSure. Not a big deal. But imagine that, for some reason, we are having issues here. We can toss an Arc on it, sure, no big deal:<p><pre><code>  use std::sync::Arc;\n  \n  fn takes_ref(r: &amp;i32) {\n      println!(&quot;r: {}&quot;, r);\n  }\n  \n  fn main() {\n      let v = Arc::new(5);\n      \n      takes_ref(&amp;v);\n  }\n</code></pre>\nThat&#x27;s not <i>too</i> bad, we&#x27;re only wrapping up the constructor. Okay, sure. But what happens when our requirements change, and we need to mutate something inside takes_ref? We can do that very easily in our original program:<p><pre><code>  fn takes_ref(r: &amp;mut i32) {\n      *r += 1;\n      println!(&quot;r: {}&quot;, r);\n  }\n  \n  fn main() {\n      let mut v = 5;\n      \n      takes_ref(&amp;mut v);\n  }\n</code></pre>\nBut if we want to do this in our Arc world... we have to do this:<p><pre><code>  use std::sync::{Arc, Mutex};\n  \n  fn takes_ref(r: &amp;mut i32) {\n      *r += 1;\n      println!(&quot;r: {}&quot;, r);\n  }\n  \n  fn main() {\n      let v = Arc::new(Mutex::new(5));\n      \n      takes_ref(&amp;mut v.lock().unwrap());\n  }\n</code></pre>\nThis is <i>way</i> more boilerplate. And, I even messed it up the first time.<p>So the end experience here is &quot;ugh so much boilerplate in Rust&quot;, when often times, the answer is &quot;don&#x27;t use Arc&#x2F;Rc Mutex&#x2F;RefCell&quot; They exist because, in some cases, you legitimately do need to use them. But if we encourage people to reach for them too early, they can have an even worse time.')