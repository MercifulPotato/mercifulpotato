Item(by='headmelted', descendants=None, kids=[24847030, 24850838], score=None, time=1603278313, title=None, item_type='comment', url=None, parent=24845705, text='There are security matters too though, which no-one ever seems to get right.<p>Stored Procedures correctly managed are a more secure option than an ORM executing arbitrary SQL code, but the reason why is misunderstood consistently (I&#x27;ve had experienced DBAs get this wrong and insist to me that stored procedures prevent SQL injection attacks which is completely false).<p>To pick an arbitrary example out of thin air:<p>If my application requires 10 different calls to the database with variables, then I can create 10 stored procedures.  I can set the permissions for the account that the calling application is using to <i>only</i> have EXEC privileges and <i>only</i> on those 10 procedures.  This means that if the credentials were to leak the damage is limited to tasks the application could conceivably have performed anyway, albeit without any application-enforced validations on the variables passed to the calls.<p>If I use an ORM, I have to give the SQL account the client application is using more-or-less carte-blanche access to the database as it could conceivable read from or write to anywhere in the database through arbitrary SQL.  Sure, maybe I scope the ORM to a schema and restrict on that, but it&#x27;s not nearly as granular and fundamentally misses the point that I&#x27;ve opened a massive attack surface unnecessarily by creating a SQL account with generally free reign on the database that exists in the application layer.<p>On a recent project, mostly to see how practical it was, I built an application that used stored procedures with all of the validation being done directly inside the procedures in SQL.  This had quite a few benefits:<p>I only had to maintain validation in one place.\nI could rely on the formatting constraints I already needed in the database anyway.\nThe validation rules were beside the data and were much faster to edit and maintain over time.\nThe validation messages had to be pulled as keys making globalisation of the application much simpler later within the client application.<p>Different strokes for different folks, but there are literally decades of reasoning behind why RDBMS systems are the way they are that is completely bath-watered by ORMs.')