Item(by='mfateev', descendants=None, kids=[25615547], score=None, time=1609612710, title=None, item_type='comment', url=None, parent=25614857, text='&gt; I also used to use Microsoft&#x27;s Windows Workflow Foundation to do similar things. Essentially you&#x27;re sketching a workflow process skeleton and then managing the state atomically by compartmentalizing it, so to speak.<p>temporal.io and Windows Workflow Foundation are completely different. WF uses code to generate an intermediate representation of the workflow AST. And that intermediate representation is executed. It is similar to the most existing workflow engines from Airflow to BMPN ones.<p>Temporal doesn&#x27;t use any intermediate representation. It directly executes the code keeping all its state durable.<p>&gt; I don&#x27;t entirely agree with your comment about state management and argument passing in Petri nets.<p>When I say about the state I mean the overall state of the business project which is much more than a token in a certain dish. For example such state can include a list of line items to order with all associated attributes and counters of processed events.<p>&gt; I&#x27;d argue that, the tool you describe could be modeled as a Petri net, but that perhaps you may not wish to have a user do it that way.<p>All software at the lowest level can be modeled as a state machine. And Petri net is one of the possible representation of FSN. I&#x27;m interested in simplifying the way the workflow logic is specified by an engineer. At this point I believe the temporal.io approach of giving your the full power of a high level programming language and taking care of durability and scalability is the best option.')