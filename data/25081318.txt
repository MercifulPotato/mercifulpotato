Item(by='pas', descendants=None, kids=None, score=None, time=1605268366, title=None, item_type='comment', url=None, parent=25071655, text='Hm, so if you get modifications thousands of times a second, then ... something is wrong. I&#x27;m tempted to say you&#x27;re &quot;holding it wrong&quot;. Meaning that on one hand you do something that goes against how it ought to be, but also Angular despite all its mighty compiler&#x2F;optimizer&#x2F;typing magic doesn&#x27;t stop you from doing this and doesn&#x27;t help you to fix this.<p>As a rule of thumb naive change detection is fine for a small app, but if you want performance, just opt out of the default and manage it yourself: <a href="https:&#x2F;&#x2F;angular.io&#x2F;api&#x2F;core&#x2F;ChangeDetectorRef#usage-notes" rel="nofollow">https:&#x2F;&#x2F;angular.io&#x2F;api&#x2F;core&#x2F;ChangeDetectorRef#usage-notes</a> (and probably you have a component that spams changes, where you should completely opt out: <a href="https:&#x2F;&#x2F;gist.github.com&#x2F;jhades&#x2F;269ee42b83937418e0dbe00e49413342#file-08-ts" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;jhades&#x2F;269ee42b83937418e0dbe00e49413...</a> )<p>Also, I don&#x27;t think they&#x27;re moving away from zone.js. They are simply providing an alternative for the more minimalistic minded folks, who like to put their own stack together.<p>&gt; While setting a property does not usually cause anything to happen in Javascript, so I have trouble getting my head around how it works and what Angular is doing behind the scenes, and realizing that it must be polling, which isn&#x27;t usually a good pattern.<p>... um. It&#x27;s a bit ironic that you say that Angular is going against JS, but maybe you forgot about the wonders of Object.defineProperty which allows the unflinching true hackers to virtually override assignment operation itself!<p>But Angular doesn&#x27;t work that way, saner heads prevailed apparently. Hence the use of TS annotations, like the @Input property, which basically wraps the field to trigger change detection. And zone.js, which ... well, basically it does work that way. (It simply replaces global objects with a wrapped version. It wraps timers and I&#x2F;O, as in click, type, touch, fetch, and websocket events, and who knows what.) So no polling, but yes monkey patching.')