Item(by='dcchambers', descendants=None, kids=None, score=None, time=1610725779, title=None, item_type='comment', url=None, parent=25787107, text='I think what the author is really pointing out is the rather large gap between the many introductory &quot;learn to code&quot; tools and then actual, real development tools used to make software.<p>A lot of those introductory tools abstract away the way that software actually works which allows you to focus on learning the basics of logic and programming. This is great for learning but extremely limiting. There is a reason why professional tools and programming languages don&#x27;t abstract away the technical details. Because you need to know how things work under the hood in order to be a truly effective programmer.<p>This is part of why a formal programming education is so valuable IMO. It can be very hard to cross that gap on your own.<p>I think this article also defines a kind of smoke test for programmers. If you don&#x27;t like learning how to read error messsage on a command line or googling stuff, you probably won&#x27;t like programming.<p>To Tom I would say - programming is hard, but I think that&#x27;s OK. It&#x27;s not good to hide all of the technical &quot;ugliness&quot; of how these tools work because to be an effective programmer you need to know how they work. That&#x27;s just the reality. The messages you see when working with tools like Ruby or Node are designed to be useful for a professional who knows how to read them. What may seem like command line garbage to an untrained eye is actually extremely useful to someone that knows what they are looking for...and that is what takes someone from a hobbyist programmer to a professional. Is there room for improvement? Can we close the gap between the myriad of &quot;hello world&quot; programming tools and the seemingly bottomless trench of &quot;real&quot; programming tools? Absolutely.')