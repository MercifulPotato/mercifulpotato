Item(by='erikpukinskis', descendants=None, kids=[25804953], score=None, time=1610826099, title=None, item_type='comment', url=None, parent=25803141, text='How do you do this in practice though? Let&#x27;s say my marketing site is at turtlepics.com and then the pics, captions, feeds, etc are served off of turtlepicscontent.com.<p>So I can serve my app off of turtlepics.com, that&#x27;s fine. But it can&#x27;t load any content directly. I&#x27;d have to have a separate &lt;script src=&quot;<a href="https:&#x2F;&#x2F;turtlepicscontent.com&#x2F;feeds&#x2F;erik" rel="nofollow">https:&#x2F;&#x2F;turtlepicscontent.com&#x2F;feeds&#x2F;erik</a>&quot;&gt; or whatever that loads a user&#x27;s feed. But that needs to be authenticated too, so I have to then authenticate the user on that domain (<a href="https:&#x2F;&#x2F;turtlepicscontent.com&#x2F;feeds&#x2F;erik?onetimekey=a9e79c5829" rel="nofollow">https:&#x2F;&#x2F;turtlepicscontent.com&#x2F;feeds&#x2F;erik?onetimekey=a9e79c58...</a>) as well, at which point the credentials are present in the unsafe domain&#x27;s cookies as well, and the jig is up.<p>Or do you continually generate fresh one time keys in the safe app, so that you don&#x27;t need cookies on the content domain?<p>Even then, someone can still bring down the entire turtlepicscontent.com domain with malicious content. Which... well, at least your marketing site and your login still works. But the site is still fully down at that point. I guess that&#x27;s better than nothing, but still pretty annoying.<p>Or is the idea just to wall off uploads specifically, but continue serving text off the main domain, presuming you&#x27;re sanitizing text correctly?<p>I guess you could have some fallback to a safe-ish domain with an older read-only backup of the content database? Still not ideal. I guess sharding your users onto multiple domains based on account age might help a bit too.')