Item(by='lmm', descendants=None, kids=None, score=None, time=1603850839, title=None, item_type='comment', url=None, parent=24910219, text='I find a lot of useful abstractions end up getting implemented twice: once in a &quot;magical&quot; way where you rely on the runtime to manage it according to a bunch of cobbled-together ad-hoc rules, then again in a &quot;principled&quot; way where it&#x27;s under the programmer&#x27;s control and can be reasoned about, but still (almost) as usable as if it were working by magic.<p>e.g. ad-hoc exceptions -&gt; errors as plain values, but with &quot;railway-oriented programming&quot; techniques that make them as easy to work with as exceptions<p>e.g. runtime-managed garbage collection -&gt; rust-style borrow checker ad-hoc in the compiler -&gt; haskell&#x2F;idris-style linearity in the type system<p>e.g. &quot;magic&quot; green-threading -&gt; explicit-but-easy async&#x2F;await<p>e.g. behind-the-scenes MVCC in databases -&gt; explicit event sourcing')