Item(by='Tainnor', descendants=None, kids=None, score=None, time=1606360255, title=None, item_type='comment', url=None, parent=25210203, text='It&#x27;s important to note that these are still regular expressions. They still conform to the same mathematical definition as the regular expressions we all love or hate, and in fact, the library uses regular expressions under the hood. It&#x27;s basically just using new language constructs for the exact same capabilities.<p>Now, whether you like that new syntax or not, is a matter of opinion. It is of course more type-safe and probably more approachable. That said, I find the verbosity a bit off-putting, although I chalk some of this up to Java being Java - other language implementations could be a bit nicer there. I also question the API design somewhat: regexes are inductively defined, there are a couple of primitives and a couple of operators that combine these primitives and the API doesn&#x27;t make this very explicit by using the builder pattern.<p>But ultimately, I&#x27;m more used to the way regular expressions are usually written, and for many tasks, that syntax is also more portable (e.g. regular expressions can be configuration which can be hugely useful for e.g. NLP tasks). For quick one-off text replacement tasks with very simple regexes I also think that this syntax would be way too cumbersome.<p>Lastly, there are some people in the comments suggesting the use of parser combinators, BNF and similar formalisms &#x2F; tools. Those might be an option for your use case, but they don&#x27;t give you regular languages (although, sadly: regular expressions in most languages nowadays are not regular anymore). Having a regular language might be an actual requirement for whatever reason (e.g. constant memory usage).')