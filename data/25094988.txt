Item(by='yakshaving_jgt', descendants=None, kids=[25095198, 25096412], score=None, time=1605382802, title=None, item_type='comment', url=None, parent=25094781, text='Author here. You&#x27;re right, there was a line missing. That&#x27;s now fixed. Thanks for spotting that.<p>To address your other points: in just about every Elm application I&#x27;ve ever worked on, there was an initial ambition to separate and encapsulate things nicely, for reasons of safety or <i>Clean Code</i> or some other philosophical ideal.<p>Then requirements change (which is normal and good — businesses change and evolve, and the product should mirror that). Then you discover that oh, you need a bit of state from one page in another. Oh, and modifying the state of something on one page should affect this other page. Hmm… Why does this view function now take seven arguments?<p>Your final paragraph hints at the kind of engineering that inevitably begins to appear as a workaround to solving the wrong problem in the first place. All of it is extra complexity that doesn&#x27;t need to exist at all.<p>&gt; The author&#x27;s approach has data for every page of your app stored in the model at once, and available to every other page. Also, any page can edit the data for any other page and send messages to any other page. That makes me nervous.<p>Why exactly this emotional reaction specifically? Does prior experience with bad surprises in <i>Elm</i> give you this intuition? Or is it from experience from a language like JavaScript where global mutable state is indeed something to be wary of?')