Item(by='zerkten', descendants=None, kids=None, score=None, time=1604263895, title=None, item_type='comment', url=None, parent=24959782, text='My understanding is that this isn&#x27;t really the case. Flutter is focused on the user interface portions of an app and Kotlin MP is focused on non-UX portions. Flutter does have some docs on incrementally moving apps at <a href="https:&#x2F;&#x2F;flutter.dev&#x2F;docs&#x2F;development&#x2F;add-to-app" rel="nofollow">https:&#x2F;&#x2F;flutter.dev&#x2F;docs&#x2F;development&#x2F;add-to-app</a>. This seems early, but with Tim Sneath (experienced with the issues involving moving Microsoft devs between UI frameworks and interop), I suspect that this area will get fleshed out.<p>What you need to do is analyze your situation and make a decision on whether you have significant non-UX code which will be a bear to maintain long-term. Most people do not, so maintaining a platform-agnostic layer is unrealistic.<p>To help with this, let&#x27;s look at an older example: Microsoft. In <a href="https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Events&#x2F;CPP&#x2F;C-PP-Con-2014&#x2F;024-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-I" rel="nofollow">https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Events&#x2F;CPP&#x2F;C-PP-Con-2014&#x2F;024-Micro...</a> they describe how they are using C&#x2F;C++ as the basis for their Office applications. Why? They have a load of legacy code that needs to be reused and they needed the exact behavior on all platforms. This code runs on the client and can&#x27;t be moved off to the server-side which would be the preference when feasible.<p>Since iOS and Android can consume C&#x2F;C++ code it makes sense to maintain as much of the application in C&#x2F;C++ as possible for sharing while creating native apps which are as thin as reasonable. They can do iOS and Android specific things where it brings value, but centrally, they can decide if it should be something available across all platforms, or even architect it partly in C&#x2F;C++, and partly in the native API for the mobile platform. This allows them to bring it quickly from Android to iOS in a future release.<p>Microsoft can easily afford to do everything described above. If we look at Netflix they are in a similar position, but don&#x27;t have as much legacy C&#x2F;C++ code. Kotlin MP feels like a nice alternative given Netflix&#x27;s situation.<p>Do you feel like you are in a similar situation? Few developers are in this situation, but it&#x27;s attractive to architecture astronauts. While somewhat unpleasant, duplicating functionality in native iOS and Android code bases might be the right thing for your apps now. If not, there are in-between options such as moving to Flutter for all your UI code and Dart becomes your main client language. You have to be able to live with any compromises (I&#x27;m more familiar with Xamarin which is an aging, but similar trade-off.) That seems like one of the better balances today with good momentum behind the platform and strong implementation.')