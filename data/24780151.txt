Item(by='galonk', descendants=None, kids=None, score=None, time=1602701485, title=None, item_type='comment', url=None, parent=24774964, text='I love this proposal. I think I would use it too much at first, and the pull it back to using it a reasonable amount :)<p>I&#x27;ve wished that Python had something similar to C#&#x27;s LINQ, where a user could express a query using familiar list comprehension syntax, but instead of the comprehension actually evaluating, my search library could somehow receive the AST and use it to build an optimized query. ORM libraries often play tricks with dunder methods to achieve a similar DSL feel. This could give me something very close to that.<p>I&#x27;m also drooling over the parser example, as someone who maintains a parsing library. I support building a parser from a a grammar file currently because doing it in code is a bit clumsy, but the example makes it look pretty.<p>There&#x27;s also countless times people have had a great idea for &quot;with&quot; blocks, but it turns out it&#x27;s not really possible because it would require the with statement to analyze&#x2F;capture the child statements inside. This proposal gives you exactly that.<p>The syntax isn&#x27;t <i>spectacular</i>, but for the most part I can&#x27;t think of anything much better. I do think the &quot;sibling statement&quot; syntax will be hard to understand visually. I would make it start with a @ since it&#x27;s like a decorator for the next statement:<p>@log!\nprint(&quot;Hello&quot;)')