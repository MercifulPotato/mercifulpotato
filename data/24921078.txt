Item(by='CyberRabbi', descendants=None, kids=[24921390], score=None, time=1603904017, title=None, item_type='comment', url=None, parent=24920645, text='&gt; My argument is that `std::optional` should not have an operator* at all. `kj::Maybe` does not have operator* nor `operator-&gt;`.<p>That’s fair.<p>&gt;&gt; If you want to dereference an optional that may be null, use the .value_or() method. For the times when you absolutely know the optional has a value use operator<p>&gt; This is putting a lot of cognitive load on the developer. They must remember which of their variables are optionals,<p>Not really. Teams with programmers that are bad at keeping track of the state of their variables can simply have a policy to always use .value_or()&#x2F;.value()<p>C++ doesn’t impose this on its users because it generally assumes its users are responsible enough to make their own policy.<p>&gt; The fact that they use the same syntax to dereference makes it very easy to get wrong.<p>I disagree, the operator* has the same semantics as pointers did, making it no more semantically hazardous. There exists other methods on optional that have the behavior you want.')