Item(by='valenterry', descendants=None, kids=None, score=None, time=1611997191, title=None, item_type='comment', url=None, parent=25963757, text='&gt; Maybe I am misunderstanding you but Erlang -- and thus Elixir -- has the best actor system invented so far.<p>I would sigh off on that, and yeah, I think you misunderstood me.<p>&gt; Yep, I&#x27;ve been quite exposed to [almost] pure FP for 4 years and something now -- by working with Elixir.<p>That surprises me. I&#x27;m not sure we use the same terminology. There is no &quot;almost&quot; pure. Immutability and passing around functions is nice, but it is really only 10% of functional programming. Mind that many languages call them &quot;functional&quot; nowadays, but the original meaning is actually different - it&#x27;s about referential transparency. I&#x27;m not aware that Elixir supports that in a meaningful way, especially since you said you did it for 4 years.<p>See also: <a href="https:&#x2F;&#x2F;elixirforum.com&#x2F;t&#x2F;thinking-functional&#x2F;1771" rel="nofollow">https:&#x2F;&#x2F;elixirforum.com&#x2F;t&#x2F;thinking-functional&#x2F;1771</a> or <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=14849474" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=14849474</a><p>So for what I&#x27;m writing next, I&#x27;m just assuming that what you did is using immutable datastructures and avoiding mutation of variables etc.<p>If someone comes to me and wants to learn actorsystems, I can direct them to either Erlang&#x2F;Elixir or Scala (with Akka). But honestly, Scala+Akka makes it difficult to fully embrace actors and is just... inferior. I would always recommend Erlang&#x2F;Elixir and would even go so far to say, that most people probably don&#x27;t really learn to think in actors if they pick Akka.<p>For pure FP however it is the opposite. If you have not written any slightly bigger program in Haskell or Scala using FP, then you also haven&#x27;t understood the concept. If you don&#x27;t already think in pure FP, then you will have a hard time to learn it when writing Elixir.<p>In Scala, the situation is much better, but still not optimal _for learning_ pure FP. I suggest you to look into Haskell again when you feel in the mood to tease your brain a bit with a new style of programming. Pure FP is as different from using Elixir&#x2F;Actors as Exlixir&#x2F;Actors is different from writing python. You have to think different.<p>For me, both Actors and oure FP are actually techniques that complement each other very well. Pure FP is good for writing all the code _inside_ of an actor. It makes reasoning and concurrent programming much easier compared to having a lot of really small actors. On the other hand, pure FP does not scale - once you cannot stay in your own small &quot;bubble&quot;, you need a concept to go beyond. Be it to work with multiple machines, deal with elegant recovery from hardware problems or network problems between bigger parts of the system, or simply load and messaging problems. I don&#x27;t know anything that is better suited than the actor model here. I hope that eventually we will have a VM like the Erlang VM with a language that supports pure FP as well as Haskell does. :)')