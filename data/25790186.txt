Item(by='malux85', descendants=None, kids=[25790263], score=None, time=1610714042, title=None, item_type='comment', url=None, parent=25790091, text='When I was travelling through Italy, I learnt a phrase from programmers there, &quot;If my mother had wheels, she would have been a bike&quot; - and it&#x27;s a criticism of hypothetical situations like your answer above.<p>Saying &quot;This is arbitrary if we made a different choice things would be different&quot; is a total meaningless statement because you just move the bar and then say if the bar is moved things are different.<p>My argument is that eventually all implementations are embedded in reality, if not &#x2F;usr&#x2F;local&#x2F;bin and $PATH then some other abstraction that is equally arbitrary - but in the real world, the one we live in, we have &#x2F;usr&#x2F;local&#x2F;bin, $PATH and a bunch of other &quot;arbitrary&quot; lines that have to be somewhere because without these lines (or some lines) there is nothing. And you <i>have</i> <i>to</i> <i>know</i> <i>them</i>, whatever they are.<p>Because you know what happens if you don&#x27;t know them?  You end up with people writing blog posts about how difficult programming is, ranting they cant install ruby or pip or node.js, like the article above. You have to learn the underlying system, whatever it is. In this case, it&#x27;s &#x2F;usr&#x2F;local&#x2F;bin and $PATH.<p>I think you&#x27;re not arguing that you shouldn&#x27;t know the underlying system (correct me if I&#x27;m wrong) but you&#x27;re more saying that these particular abstractions are inconsistent or distasteful - if that&#x27;s the case, let me assure you that no implementation is perfect, and programmers for nearly 100 years now have been trying to come up with the perfect abstraction that requires no knowledge below, but in reality, it never works, because theres always exceptions, or the abstraction is not flexible enough to apply generally enough to be useful, thats like the two forces that push and pull the argument both ways.<p>I&#x27;ve come to learn that you must just learn the underlying system, because you&#x27;ll be able to diagnose better. To that end, you must learn sysadmin, you must know $PATH and you must know the underlying system. Go and have a look at the programmer competency matrix - this stuff is in there')