Item(by='merelydev', descendants=None, kids=[25167131, 25161214, 25160969], score=None, time=1605882519, title=None, item_type='comment', url=None, parent=25160624, text='The author posted this on reddit [0] a few months ago:<p>Vale&#x27;s main goal is to be as fast as C++, but much easier and safer, without sacrificing aliasing freedom. It does this by using &quot;constraint references&quot;, which behave differently depending on the compilation mode:<p><pre><code>    Normal Mode, for development and testing, will halt the program when we try to free an object that any constraint ref is pointing at.\n\n    Fast Mode compiles constraint refs to raw pointers for performance on par with C++. This will be very useful for games (where performance is top priority) or sandboxed targets such as WASM.\n\n    Resilient Mode (in v0.2) will compile constraint refs to weak refs, and only halt when we dereference a dangling pointer (like a faster ASan). This will be useful for programs that want zero unsafety.\n</code></pre>\nVale v0.2 will almost completely eliminate Normal Mode and Resilient Mode&#x27;s overhead with:<p><pre><code>    Compile-time &quot;region&quot; borrow checking, where one place can borrow a region as mutable, or multiple places can borrow it as immutable for zero-cost safe references. It&#x27;s like Rust but region-based, or Verona but with immutable borrowing.\n\n    Pure functions, where a function opens a new region for itself and immutably borrows the region outside, making all references into outside memory zero-cost.\n\n    &quot;Bump calling&quot;, where a pure function&#x27;s region uses a bump allocator instead of malloc&#x2F;free.\n</code></pre>\n[0] <a href="https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ProgrammingLanguages&#x2F;comments&#x2F;hplj2i&#x2F;vale&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ProgrammingLanguages&#x2F;comments&#x2F;hplj2...</a>')