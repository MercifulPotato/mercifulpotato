Item(by='elcritch', descendants=None, kids=None, score=None, time=1608759217, title=None, item_type='comment', url=None, parent=25521466, text='Nim, with the new ARC garbage collector works well for those situations now (well within a few percent usually). Especially with the `move` and `sink` semantics.<p>I&#x27;m using it in embedded devices and needed a few tight loops a week or two back. With a bit of work and a few odd contortions, I got it to compile to almost the exact type of C code I&#x27;d write by hand to run a fast inner loop using preallocated arrays, etc. It turns out that code wasn&#x27;t noticeably faster than more idiomatic Nim code with a few tweaks to ensure move&#x27;s were able to be used. So I ended up going back to the more readable&#x2F;idiomatic version while still roughly doubling the overall speed.<p>The new `move` semantics with Nim&#x27;s ARC system really do help make it easier to write fast code. Now I understand why the C++ ecosystem is so bullish on `move` in the C++ stdlib now. It really can take code which looks like straightforward C code but performs closer to painstakingly optimized C code. Mainly since it result in less copying of objects&#x2F;structs and reducing the number of malloc&#x27;s. Overall it means less effort to design a fast system.')