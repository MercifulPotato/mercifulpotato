Item(by='hiq', descendants=None, kids=[25542425], score=None, time=1608919205, title=None, item_type='comment', url=None, parent=25537280, text='Couldn&#x27;t the language demand that, as long as a memory chunk is allocated and not freed, there&#x27;s a path to use this memory chunk? Meaning it&#x27;s not a memory leak in the sense of &#x27;we are certain (we could prove) that this memory chunk will never be used again&#x27;, such as the std::mem::forget mentioned elsewhere in the thread.<p>In practice that would mean that you need to write some formal proof, but that doesn&#x27;t seem impossible. Just like some formal languages require that you write a termination proof to define a recursive function. Of course I&#x27;m not saying this is a practical solution for a language like Rust to demand this kind of proofs for every program, but since programs written in a subset of C have been formally verified, it should be possible (and sometimes desirable) for Rust too.')