Item(by='jcorrington', descendants=None, kids=None, score=None, time=1601935143, title=None, item_type='comment', url=None, parent=24686527, text='I&#x27;ve really never understood this obsession with &quot;preserving&quot; history. When I work on a feature or bug I tend to commit often, because it&#x27;s cheap, and it can save my ass if I go in a bad direction and break something that used to work in one of my previous commits. I subscribe to a code fast philosophy, and work quickly to explore the space, find unknowns, get a working solution, write tests, and do final cleanup, docs, and optimize if needed. As such this would be a common commit history for me that would end up in a small PR. A large PR for me might have 50+ commits.<p>- initial prototype of feature x, mostly working<p>- feature x working as intended in requirements<p>- fixed edge cases not originally identified when thinking \nabout feature x<p>- rearchitect feature x a bit now that it&#x27;s better understood<p>- write tests for feature x, most pass<p>- get all feature x unit tests pass<p>- a few more test cases for feature x<p>- and a couple of integration tests for feature x<p>- code cleanup for feature x<p>- fix typo from last code cleanup resulting in bug<p>- better docs for feature x<p>- fix typos in feature x docs<p>- update main readme to include notes about feature x<p>Can anyone explain to me the value in preserving this history, because I&#x27;m just not seeing it, and it would completely muddy up the overall git history. There&#x27;s tons of intermediate work we&#x27;re not concerned about preserving, like the notes I scribble on paper, so why are we so concerned about preserving all these commits? I admit there&#x27;s a small chance it&#x27;s useful in rare circumstances, but I&#x27;d rather optimize for the common scenario.')