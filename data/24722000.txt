Item(by='dirkt', descendants=None, kids=None, score=None, time=1602180752, title=None, item_type='comment', url=None, parent=24716525, text='&gt; you don&#x27;t even want to pay the type annotation tax for.<p>You won&#x27;t understand those aphorisms as long as think of &quot;type annotation&quot; as something useless, &quot;tax-like&quot;. I know where you come from, in languages like Java it <i>is</i> a tax - you repeatedly write long-winded types in different places.<p>With type inference, that changes. You have a REPL (or IDE integration) that you can just ask for the inferred type as soon as you write a function. Then you look at it, you think about if it expresses what you want the function to do (that already catches some errors), you copy-and-paste it, make it a bit prettier, and bam, type annotation is done. It&#x27;s even on an extra line, you don&#x27;t have to attach it to arguments.<p>Or, you <i>design</i> with types (&quot;test first style&quot;, think of the type annotation as a test). You first write down the type, then you write the function, and you see if the type checker agrees. If it doesn&#x27;t, you probably found a bug. Or your idea of what the function should do was wrong (has also happened to me).<p>And everyone who uses that system does know that type checks are very dumb checks. They only help against dumb errors. But the majority of bugs are dumb bugs (at least the majority of my bugs) - misspellings, you forget to write out some part, etc. Those get caught. The hard bugs won&#x27;t - that&#x27;s what tests are for. (And automated testing is again simpler in the presence of types, see Quickcheck).<p>&gt; and encourage the pursuit of bad abstractions like 18-arg functions<p>It never does. 18-arg functions are just unwieldy. If your function grows to that point, refactor (or rather, refactor long before that). And again, the type systems helps with refactoring.<p>(Yes, I know I won&#x27;t convince you, this debate has been going on for at least 30 years. OTOH, it doesn&#x27;t hurt to see the opinion on the other side).')