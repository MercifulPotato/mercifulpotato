Item(by='EastLondonCoder', descendants=None, kids=None, score=None, time=1609698869, title=None, item_type='comment', url=None, parent=25623486, text='Here are my observations after doing clojure for a bit more than a year coming from doing js for two decades.<p>It’s fast, both clj and cljs but performance is non deterministic and as with most functional languages it can be hard to reason about performance. Profiling cljs is very hard<p>Coming from the js world I feel that tooling generally works. Especially when it comes to build systems. Very happy to not deal with webpack inconsistencies. With regards to ides there’s cursive for IntelliJ users, Calva for vscode.<p>I can’t comment that much on Java interop. Js interop is a mild inconvenience.<p>With regards to ecosystem, google ability is an issue but tempered by the simplicity of both clj and cljs.<p>About types, there are a class of bugs they will help to avoid. It does help with understanding intent of the code you work with. The drawback is that they help facilitate abstraction and does not help with reasoning that much about a program actually runs.<p>Yes cljs is a different language. But in practice it feels very much the same. I do however have a big issue with being able to push deterministic performance out of it. Keeping execution time for any frame below 16ms can be a challenge and for some type of front end stuff js is to be preferred<p>All of these things are quite insignificant on how fast a team can churn out good quality code using clojure. I’ve never seen any team that I’m with at the moment write correct, readable and fast code as quick.')