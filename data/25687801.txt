Item(by='KMag', descendants=None, kids=None, score=None, time=1610129919, title=None, item_type='comment', url=None, parent=25684113, text='You&#x27;re correct, I did overgeneralize in the case of callee-cleanup calling conventions.  Though, I&#x27;m still not aware of any callee-cleanup variadic calling conventions.  printf, execl, etc. doen&#x27;t actually get passed anything that directly indicates the number&#x2F;size of arguments passed.<p>In the article&#x27;s printf example, the compiler is able to perform TCO only because it uses at most 5 pointer&#x2F;integer arguments (with number of fp arguments passed in al) and at most 6 fp arguments, so it&#x27;s caller-cleanup, but with no cleanup to perform.<p>Under SvsV (Linux, etc.) x86_64 ABI, varargs calls, the number of fp arguments passed in XMMx registers is passed in al, but nothing to directly indicate how much stack space is used by arguments (and it&#x27;s also obviously caller-cleanup).  The printf example from the article works because all of the arguments fit in registers.')