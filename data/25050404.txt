Item(by='bob1029', descendants=None, kids=[25051056], score=None, time=1605036232, title=None, item_type='comment', url=None, parent=25042355, text='Not everything shares the same global state. Two completely independent computer systems that are not in communication with each other will never become synchronized, nor would it be expected that their state is merged in any way. This line of thinking can extend into abstractions existing on the same physical host.<p>You don&#x27;t even have to share global state to work towards the successful outcome of some common objective. There are many problems that can be solved with actors operating in parallel with absolutely zero coordination between them. This might seem like its a place where only trivial cases live, but I have found some fairly complex concurrency scenarios that can be refactored into this trivial case by decoupling actors&#x2F;state and reorganizing other parts of the system.<p>For example - Assume you were to develop a database engine that uses sequential integers for the primary key. You would probably have to develop a complex synchronization mechanism so that sequences are dealt out uniquely to concurrent callers. Or, you could sidestep the problem altogether by switching to GUIDs (V4 - Random) and allowing each participant to key its own entities. I feel these sorts of decisions should be considered as a primary measure before reaching for any form of shared state.')