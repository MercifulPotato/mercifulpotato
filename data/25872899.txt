Item(by='akiselev', descendants=None, kids=None, score=None, time=1611332076, title=None, item_type='comment', url=None, parent=25867693, text='The problem is these two:<p><i>The api is too hard to use?</i><p><i>The docs &#x2F; tutorials are not good enough?</i><p>DD falls into an uncanny valley where the API surface is simple enough to grasp quickly yet foreign enough that actually grokking it is pretty hard, let alone applying it in an organization where maintenance is a top concern. To do anything nontrivial, you need knowledge of timely-dataflow too and the DD documentation doesn&#x27;t do a good job of integrating knowledge from TD docs - they&#x27;re written by someone who has already internalized that knowledge so it&#x27;s an afterthought. Getting data in and out of the dataflow and orchestrating workers is pretty much undocumented outside of Github issue discussions. Trying to abstract away dataflows behind types and functions turns into a big ol&#x27; generic mess. There are a lot of rough edges like that (and the abomination crate is... well... an abomination).<p>McSherry&#x27;s blog posts, while tantalizing, are often focused too much on static examples (entire dataset is available upfront) and are too academic-focused to make up for holes in the book. As far as I can tell, the library hasn&#x27;t seen enough use for best practices to emerge and there&#x27;s almost no guidance on how to build a real world system with DD.<p>By far the biggest problem I&#x27;ve had: I can avoid a DD project for a week or two at most before enough knowledge leaves my memory that I have to spend days rereading my own code to get reoriented and productive again. You either use unlabeled tuples which turns the dataflow into an unholy mess or you spend half your time writing and deleting boilerplate when doing R&amp;D. DD is just too weird and the API too awkward - I haven&#x27;t figured out a method for writing straightforward DD code.<p>That said, when I have gotten it to work on nontrivial problems, the performance and capabilities have been really impressive. I&#x27;ve just never been able to get the stars to align to use it in a professional context with future maintainers.<p>I think what DD needs is a LYNQ-like composable query language that abstracts away the tuple datatypes and provides an ORM&#x2F;query builder layer on top of dataflow statements. Most developers are familiar with SQL statements which would make DD a lot easier to adopt.')