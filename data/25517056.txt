Item(by='CaptArmchair', descendants=None, kids=[25517322], score=None, time=1608728013, title=None, item_type='comment', url=None, parent=25516735, text='But HTML doesn&#x27;t say anything about how things need to be rendered &#x2F; presented. It was never intended to do that.<p>All it does is mark the structure in a document. &quot;This is a header&quot;, &quot;this is a paragraph&quot;, &quot;this is a quote&quot;. That&#x27;s basically it. The &quot;hypertext&quot; part of HTML refers to the notion that it uses URI&#x27;s that can be used to identify resources, and dereference them.<p>It&#x27;s entirely up to the consumer of a HTML document to decide how it gets rendered. A browser engine comes with a layout component that determines how the constituent parts of a document need to be painted before they are actually painted on the canvas.<p>Browsers in a GUI come with a default CSS definition that will be used if the document doesn&#x27;t reference a companion CSS stylesheet.<p>Moreover, a browser doesn&#x27;t have to be a GUI browser. What about text browsers on the command line?<p>I&#x27;ll give you an example:<p>This is the hard coded default style definition of the Lynx browser when running through curses:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;kurtchen&#x2F;Lynx&#x2F;blob&#x2F;8b3a9d48dc6737e2062c5678a28e2829f05094d0&#x2F;src&#x2F;LYStyle.c#L480" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;kurtchen&#x2F;Lynx&#x2F;blob&#x2F;8b3a9d48dc6737e2062c56...</a><p>And this is the parser that will parse whatever limited user CSS is provided, as it is a text browser.<p><a href="https:&#x2F;&#x2F;github.com&#x2F;kurtchen&#x2F;Lynx&#x2F;blob&#x2F;8b3a9d48dc6737e2062c5678a28e2829f05094d0&#x2F;src&#x2F;LYStyle.c#L280" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;kurtchen&#x2F;Lynx&#x2F;blob&#x2F;8b3a9d48dc6737e2062c56...</a><p>CSS was exactly designed to solve those 3 problems and much more.<p>The separation of structure and presentation is by design. Why? Because HTML and CSS never were intended to be used as tools for building &quot;Rich Web Applications&quot;. They were originally intended to render hypertext and static web pages.<p>As it happened, the world wanted rich, interactive, animated web applications. And it needed technology to build such complex applications. Web technologies have evolved over 30 years to get to that point. Remember Flash? Java applets? Silverlight? Those were all attempts to do what HTML and CSS didn&#x27;t do. Until the big vendors who came to dominate the browser market expanded on what HTML, CSS offers, and build new API&#x27;s into their browsers that allow for exactly that.<p>There&#x27;s nothing wrong with wanting to build rich web applications, and trying to leverage these affordances. But if you get hit by the limits of what web technologies have to offer in terms of maintainability, performance and what not, that&#x27;s because you&#x27;re still building on top of a historical foundation of basic principles that was never intended to be used in ways that it is used today, 30 years into the future.')