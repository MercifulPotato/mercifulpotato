Item(by='marcus_holmes', descendants=None, kids=[25014401, 25014172, 25014153], score=None, time=1604740611, title=None, item_type='comment', url=None, parent=25013740, text='It&#x27;s not really a debate. It divides fairly neatly along the lines of &quot;has been writing Go for a couple of years&quot; vs &quot;has come to Go fairly recently&quot;.<p>There&#x27;s a well-trodden path of developers who were trained in PHP&#x2F;Rails&#x2F;JS&#x2F;Django&#x2F;etc starting on Go. Their first question is always &quot;what framework should I use?&quot; (you can see this being asked at least once a week on r&#x2F;golang). They then go down that path, and find (what they think to be) Go to be clunky and boring and hard to think about. There&#x27;s a minority that decide that what Go needs is another framework, because the one they tried obviously isn&#x27;t working for them.<p>Then there&#x27;s a split, and some people write articles like this one, and probably move on to Rust or whatever language is next for them. The others start understanding. They refactor their code to not use that logging library because they start to understand the understated power of the stdlib&#x27;s logging functions. They refactor to get rid of the ORM that&#x27;s become a problem. Slow realisation dawns and they finally get rid of the framework and go back to writing http.Handlers. This process usually takes a couple of years (well, it did for me anyway).<p>And then our reborn Gopher goes to the forums to spread the light: &quot;all you need is the standard library! You don&#x27;t need a framework!&quot;, and is met by derision and misunderstanding. The Go community gets a reputation for being unjustifiably anti-frameworks and a bit weird about ORMs too. Eventually our hero shrugs their shoulders and lets the newbies find their own path, contenting themselves with upvoting those who understand.')