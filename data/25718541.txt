Item(by='zoomablemind', descendants=None, kids=None, score=None, time=1610306574, title=None, item_type='comment', url=None, parent=25714822, text='Subjectively, it increasingly feels that while the complexity has been increasing, the notion of longevity of the underlying products and services has been degrading.<p>While updates to software were expected, general outlook would be that they would not be breaking the core features. The emphasis on backwards compatibility was in a way an assurance to businesses that building their operations on vendor&#x27;s products is not risky. Even then, some mission-critical elements would be defensively abstracted to avoid the dependency risks (at least theoretically...)<p>Now, we all witness the &quot;eternal-beta&quot; paradigm across the most of the major software products. Frequent builds with automatic updates, when new features could be suddenly pushed, and old features removed.<p>Sure, it&#x27;s still possible to spec out a &quot;hard-rock&quot; steady platform, postpone updates, abstract dependencies and just focus on business. But...such approach won&#x27;t be approved, as it&#x27;s widely acknowledged that the presence of critical bugs is rather a &quot;feature&quot; of all software. Postponing the updates is not prudent, it&#x27;s a liability.<p>So the rock-solid expectations are just an illusion or perhaps a fantasy promoted widely, just to get the foot in the door.<p>Ironically, the most stable elements are the so much dreaded &quot;legacy&quot;, too often in charge of the business-critical logic.')