Item(by='Guvante', descendants=None, kids=[25562685, 25562770], score=None, time=1609184471, title=None, item_type='comment', url=None, parent=25561523, text='Let me first say that game developers should do a better job about testing, especially when it comes to developing isolated systems to support unit tests. But it certainly seems like you misunderstand how much change there is in the vast majority of game development.<p>&gt; Moving goal posts and requirements changing constantly is a challenge at literally every single development job I&#x27;ve had.<p>It is hard to describe because it sounds the same. But game development is really different because there are no fundamentals of things you care to test.<p>Even doing a combat sequence requires a herculean effort. You need basically the whole game running because otherwise what is the point. You fake out most of the data so your test doesn&#x27;t fail when the designers decide to make combat harder. But now it ends up that pressing A defends instead of attacks because reasons and all of your combat tests now fail.<p>This is all fixable but it makes the cost per test of anything but the tiniest things hard enough that broad test coverage can sometimes be a determent as you end up testing what the game is now which means it will all be thrown away if your assumptions change.<p>Sure that can always be the case but &quot;the sum of the lines equals the total&quot; kind of tests are much less likely to backfire in this way.<p>&gt; Plenty of teams have idiosyncrasies around their tool chain<p>C++ is chosen because the tooling doesn&#x27;t exist outside of C++. Full stop. You have to build all the tooling in language X which when talking about 3D graphics is a huge amount of tooling.<p>Rust is starting to have some cool stuff but if you compare you will see there is a world of difference.<p>Thus if you choose not C++ you get to write C wrappers around your API and deal with all that nonsense since C++ interop is the worst in most languages.<p>At some point Rust will get proper C++ interop and then the gap will be smaller but for now you are giving up a ton for a slightly safer language by not choosing C++.<p>Also note that nearly everybody writes a huge amount of non-C++ code, they just call it a scripting language instead.')