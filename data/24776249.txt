Item(by='rkangel', descendants=None, kids=None, score=None, time=1602681986, title=None, item_type='comment', url=None, parent=24776082, text='&gt; But that is an implementation detail. Only the BulkPurchaseDiscountStrategy knows whether it&#x27;s 9 or 10 that&#x27;s the trigger.<p>Language is poor, but I think there is consensus on what &quot;implementation detail&quot; means, and I don&#x27;t think that&#x27;s it. Whether it&#x27;s 9 or 10 is customer facing behaviour. It&#x27;s behaviour that might come from your marketing team or product owner or whatever, but it is outward facing. It is something that someone could write in a word document and call part of your specification.<p>The implementation detail would be whether that logic lives in BulkPurchaseDiscountStrategy or as one case in a big ShoppingCart class. A user pressing buttons on your UI can see the result of the price break, but they can&#x27;t see the difference in code organisation.<p>You can say &quot;price breaks should occur at 9 items&quot; without ever saying &quot;BulkPurchaseDiscountStrategy&quot;. In one ideal, all tests would test user facing requirements and not know <i>anything</i> about your code. You could refactor your code to your heart&#x27;s content and know you the result was still what you wanted. There are downsides to that though because those end to end or system tests are fragile to write and expensive to run. It&#x27;s much easier to cover all possible code paths with more focused testing. Hence in this case you could test the top interface of ShoppingCart, with all it&#x27;s assembled dependencies. Not the same as pushing button in a Web Browser, but a lot more convenient to write and run.')