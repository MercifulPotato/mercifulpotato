Item(by='eru', descendants=None, kids=None, score=None, time=1602943126, title=None, item_type='comment', url=None, parent=24809691, text='&gt; (although due to GC it can never be that fast I&#x27;d think; but who knows).<p>Well, in theory GC can be made very fast.  Though you sort-of have to decide whether you want maximal throughput or real-time latency guarantees.<p>In practice, we aren&#x27;t quite there yet, alas.<p>The way to get really fast code is just to avoid allocation, I&#x27;d guess?  OCaml allows you to use mutation, and it&#x27;s relatively easy to peak under the hood to see what your code gets translated into.<p>The main technical innovation of Rust is the borrow-checker.<p>But that piece is very related to linear types &#x2F; uniqueness types.  There&#x27;s some interesting work going on with linear types in Haskell.<p>And just like Generalized Algebraic Data Types also eventually made their way to OCaml, there&#x27;s no fundamental reason they couldn&#x27;t add linear types to OCaml, I guess?<p>(Linear types can basically be used to encode the FP equivalent of manual memory management.)')