Item(by='Lendal', descendants=None, kids=[25862425], score=None, time=1611245046, title=None, item_type='comment', url=None, parent=25859953, text='If your project is targeting an environment you don&#x27;t control, and doesn&#x27;t behave exactly like an environment you have exclusive access to, your code won&#x27;t run the same way in the production environment as it does on your machine. There are different strategies for dealing with this, but Docker seems to be the sweet spot for making it easier. You use Docker to create a container that mimics the production target, and then use that container to develop in.<p>You could reconfigure your laptop to look exactly like the production target, but then you have to keep doing that every time you change projects.<p>Before Docker, I used VMs for this, but VMs have certain disadvantages that Docker addresses. Like size, and documentability. Every time someone wanted me to look at a project, we had to figure out a way to transfer and store a copy of a 20+ GB VM. And they couldn&#x27;t tell me everything they did to create that VM from scratch, because VMware doesn&#x27;t do that and neither does Hyper-V. With Docker it is just a small text file that describes everything it takes to create what was previously a massive, undocumented VM image. It forces you to document how to create the environment, and it saves on the space and time of transferring VMs around.')