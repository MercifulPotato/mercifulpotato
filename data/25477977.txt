Item(by='kaashmonee', descendants=None, kids=None, score=None, time=1608391944, title=None, item_type='comment', url=None, parent=25476540, text='I feel like this might be a better and more feasible solution. Is there a reason that JS can collect as much data as it does about our hardware? I feel like I always hear the mantra, &quot;The browser is a sandbox,&quot; but reading articles like this make me really unconfident that that is true. I don&#x27;t really have too much of an idea of how WebGL works, but I wonder if there&#x27;s a way to create some sort of additional abstraction layer between a website and the hardware? So JS just has access to &quot;hardware interfaces&quot; like a CPU and a GPU but can only interact with via this interface. That way, even if a site wanted to, the best it could do is determine that your computer has a GPU or a CPU but not how many cores or what type of GPU?<p>This would however have the downside of incurring an additional latency with an additional abstraction, but if there was a way you turn this off with trusted websites and only leave it on when you&#x27;re using a site you don&#x27;t trust it could be more usable? It just seems better than disabling JS entirely since a lot of websites just completely break without JS.<p>It just seems like with the amount of information that JS can collect, even if you&#x27;re using TOR or a VPN, if you crunch all the information about a particular user, like the kind of OS they&#x27;re running, the version of the browser, the screen ratio, mouse click movements, time of access, number of CPU cores, type of GPU, whether or not it&#x27;s a VM, etc., it just feels like you might be able to devise a pretty reasonable heuristic for where this person is and the kind of computer they&#x27;re using. I can&#x27;t really say I know the extent of browser and JS capabilities, but these things already seem alarming enough where I wouldn&#x27;t really feel super confident that I can&#x27;t be tracked even with TOR or a VPN.<p>Edit: Just discovered something similar to this is being worked on already! <a href="https:&#x2F;&#x2F;gpuweb.github.io&#x2F;gpuweb&#x2F;#malicious-use" rel="nofollow">https:&#x2F;&#x2F;gpuweb.github.io&#x2F;gpuweb&#x2F;#malicious-use</a>')