Item(by='blippage', descendants=None, kids=[24676389, 24675615], score=None, time=1601767015, title=None, item_type='comment', url=None, parent=24663770, text='Why did Haskell wane?<p>IMO, it&#x27;s partly the ecosystem. There&#x27;s regular Haskell, Haskell Platform, Cabal, Stack. It ends up being an alphabet soup of possibilities, and it&#x27;s not clear what is depending on what.<p>And then there&#x27;s monads, which are stumbling blocks.<p>State is allegedly the root of all evil. But I think the argument needs to be more nuanced than that: yes, state is difficult to reason about globally, but it&#x27;s usually not so bad locally in small functions.<p>I think that this is what Rust gets wrong. It goes down the &quot;state is evil&quot; road, but there&#x27;s really not that much wrong with the judicious use of mutated values.<p>If you really want to avoid mutability, then you&#x27;re really going to need monads, something which seems a bad fit for Rust (based on what I see in Hackers News).<p>At the end of the day: fuggit, just use C++. It&#x27;s fast, you can point in references to vars, and if you don&#x27;t want them mutated, just make them const. That&#x27;s the conclusion I drew a few years ago.<p>As Alan Kay might put it, most new languages are in the &quot;pink plane&quot;: they&#x27;re incremental improvements (sometimes a step back) on old ideas, and sometimes just inferior rehashes of them. None of them are what he calls &quot;blue plane&quot;: revolutionary new ideas.<p>Kay seems to admire Erlang, though. What it brings to the table is the notion that a program can crash, and recover from it. That might be a &quot;blue plane&quot; idea.<p>I also assume he thinks Scratch is a blue plane idea; even though strictly speaking graphical languages are not new.<p>When I saw Ada couple of weeks ago, I noticed that it had the notion of tasks as a language primitive. I wonder if he&#x27;d consider that sufficiently blue plane.')