Item(by='junon', descendants=None, kids=[25244227, 25240408, 25240085], score=None, time=1606593129, title=None, item_type='comment', url=None, parent=25239859, text='I have use all of these tools and your take isn&#x27;t accurate at all. Make doesn&#x27;t obfuscate anything more than Plz or CMake or whatever.<p>Here are some real reasons why Make isn&#x27;t the end-all:<p>- Make doesn&#x27;t allow platform selection in a nice way.\n- Make doesn&#x27;t work on Windows natively (no, NMake doesn&#x27;t count).\n- Recursive make doesn&#x27;t work well at all.\n- Make doesn&#x27;t track byproducts or deleted artifacts.\n- Make doesn&#x27;t have auto-clean.\n- Make doesn&#x27;t facilitate out-of-source builds.\n- Make itself isn&#x27;t a scripting language (arguably good&#x2F;bad).\n- Make doesn&#x27;t facilitate compiler selection cross-platform, so things like MSVC are nearly impossible to integrate nicely without the use of the developer tools prompt.\n- Make can&#x27;t (elegantly) handle a number of rule cases, such as single-input multiple-output rules (it can, but it&#x27;s a hack).<p>Not sure why you think Make is unapproachable. That&#x27;s like saying shell scripting is unapproachable. No developer worth a damn is going to avoid shell scripting, and as long as they understand &quot;this file turns into this file using this command&quot; then Make makes sense.<p>As with all tools, Make and Autotools and CMake and probably Plz will be misused by developers that think they&#x27;re being clever. In actuality, they make things worse at best and unusable&#x2F;unmaintainable at worst.<p>As a build systems designer, I&#x27;ve evaluated Plz personally and found it to be neat but not suitable for most of the problems I think build systems should solve.')