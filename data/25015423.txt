Item(by='RedShift1', descendants=None, kids=[25015558], score=None, time=1604761325, title=None, item_type='comment', url=None, parent=25015231, text='&gt; GET requests are a crutch added to GraphQL precisely because of limitation of POST requests.<p>How are GET requests a crutch? If anything GraphQL is completely agnostic to which HTTP method you use to access it. You don&#x27;t even have to run GraphQL over HTTP, it can work over MQTT, NATS, telnet...<p>&gt; And the backend still has to normalise the GET request, and possibly peek inside it to make sure that it is the same as some previous request.<p>Which is what any caching proxy must do anyway?<p>&gt; Your schema is a single endpoint with all the fields you need exposed. Oh, but a person X with access Y might not have access to fields A, B, C, and D.<p>In your GraphQL implementation you can just deny fulfilling requests that contain fields person X doesn&#x27;t have access to. This problem is not limited to GraphQL, it&#x27;s a generic authorization problem.<p>&gt; A GraphQL query is ad-hoc. It can have unbounded complexity and unbounded recursion. Ooops, now you have to build complexity analysers and things to figure out recursion levels.<p>You don&#x27;t have to build a complexity analyzer or figure out recursion levels, there are already tools that do that for you. But you can go another way and just create a list of approved queries.<p>&gt; A GraphQL service usually collects data from several external services and&#x2F;or a database (or even several databases)<p>Usually? That&#x27;s just speculation. And that&#x27;s entirely on the implementation of that service, it has nothing to do with GraphQL spec&#x2F;technology itself.')