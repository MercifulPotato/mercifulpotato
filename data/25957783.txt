Item(by='specialist', descendants=None, kids=None, score=None, time=1611931888, title=None, item_type='comment', url=None, parent=25950351, text='I eschewed clicking this link when this hit front page. I thought it&#x27;d just be more whining. <i>I was wrong.</i> I&#x27;m sorry for the delay.<p>That angelfish metaphor is just perfect. The WFMU graphic is terrific. The criticism is spot on.<p>--<p>Yes, and: Why I also left UI.<p>TLDR:<p>No one at any time has ever cared about mental models, metaphors.<p>The serious aspects of UI, QA&#x2F;Test, methodologies have all been swept aside. I don&#x27;t know why.<p>Even in the 90s, other geeks were hostile towards UI.<p>--<p>In the 90s, I considered myself a UI designer. Before the kids started saying &quot;UX&quot;. Which is like my kid telling me that &quot;emo&quot; wasn&#x27;t anything like &quot;goth&quot;, because &quot;goth&quot; is what old people listen to. Um, ok. Sorry, kid: Same smell, new slogan.<p>I mostly did direct manipulation graphical user interfaces, similar to AutoCAD and Illustrator. I had been programming since grade school. Slinging code was just what one did.<p>I fucking loved working on UI. During a time when most geeks hated it. Except game devs.<p>At some point, I got tired of trying to persuade the priests working at Autodesk and MicroStation to stop abusing their users. I&#x27;ll just make my own UIs, dammit.<p>My one contribution to the art of UI was somehow divining new mental models. Transmuting complex stuff into &quot;well, duh&quot; simple. You know you&#x27;ve nailed a solution when you can delete the related pages and chapters from the docs. Good UI explains itself. h&#x2F;t Donald Norman (Just like good code.)<p>Example 1: For a game, I created navigation controls which unified walking on the ground and flying in the air (like a bird), while avoiding getting &quot;hyperlost&quot;. (We never shipped. For comparison, the 3D RTS game Myth&#x27;s UI was kinda the same, but not really.)<p>Example 2: For our production printing software apps, I &quot;fixed&quot; the color mapping UI. Mapping named colors w&#x2F; RGB values to CMYK is straightforward. But lithography has a bunch of colorants which cannot be represented in RGB, like double black and metallics. I made it stupid easy to control.<p>Example 3: Also for printing, I created a parametric image positioning (imposition) app which generated the production plan from a simple specification. The Holy Grail. Just in time for the print industry to crash.<p>--<p>To implement my UIs, I had to dive deeper and deeper into programming. I can&#x27;t really explain why. Something always got lost in the translation. I&#x27;ve always had to show vs tell. There was always some legacy technical reason why I couldn&#x27;t get the UIs I wanted.<p>So I&#x27;d have to fix the next layer down. So instead of engaging directly with end users, working on their real problems, I&#x27;m coding OpenGL bindings and web services and persistence layers.<p>I think this is called yak shaving.<p>It&#x27;s a terrible, terrible trap. Over the years, the harder I worked, the further away I got from my objectives.<p>--<p>My criteria for a successful idea, back when we geeks still cared about learning organizations, was if the idea outlives one&#x27;s own participation.<p>By my own standards, I&#x27;ve had very few successes. Regardless of the domain. Project management, testing, writing, UI design, etc. I did a lot of cool shit. Most of it now lost.<p>I also never figured out how to monetize, profit from my ideas and creations. My guess is doing stuff and getting paid are two different domains and very few people have both.<p>I think both of these failures are related.<p>Or along the lines of this Hurst article, maybe being a working artist is just hard. I know a lot of struggling artists. I respect any creative who figures out how to get paid.<p>--<p>Geeks remain hostile to stuff they don&#x27;t understand.<p>Yes, there&#x27;s now better visual arts and visual communication, it&#x27;s still pretty rare. I attribute this to having fewer gatekeepers. Anyone can throw their work up on the web.<p>And just like visual design, geeks (and non-geeks) don&#x27;t understand mental models and metaphors.<p>They&#x27;ll see the work. Acknowledge that it&#x27;s good. But since they can&#x27;t figure how it came to be, the work is somehow invalid. Or due to luck. Or somehow otherwise illegitimate.<p>You can&#x27;t A&#x2F;B test yourself to greatness. (Riffing on wisdom from my time doing QA&#x2F;Test.)<p>But I&#x27;ve never been able to explain my intuition and non-linear thinking to other geeks. There is no &quot;show your work&quot;, like all the steps of long division to satisfy the math teacher.<p>I&#x27;m still grateful to the one geek boss I had who was at least honest about his rejection. He was a math whiz and had previously made a lot of money selling software to Wall St. He demanded that I walk him thru my solutions. I&#x27;d demo, show him my notebooks (eg storyboards), the results from usability testing, etc. But he just couldn&#x27;t accept the end results because he couldn&#x27;t understand how I logically got there.<p>OMG we had such fights.<p>Years later he apologized. He had tried to do his own UI for some of the same problems. He admitted mine were better. And that he should have been more accepting of my style of thinking. Which he called &quot;abduction&quot; (vs deduction or induction), but I don&#x27;t think that&#x27;s right either.<p>There are certainly other reasons why creative work is diminished, rejected. This is just the brick wall that I noticed.<p>--<p>So. To wrap up this rant.<p>Being a creative is hard.<p>Everything Hurst wrote is spot on.<p>I just wanted to add my own personal history (color) to compliment his thesis.')