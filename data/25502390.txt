Item(by='abernard1', descendants=None, kids=None, score=None, time=1608606213, title=None, item_type='comment', url=None, parent=25501204, text='I really agree with this.<p>I see this all the time with &quot;business rules&quot; problems.<p>If you have a situation where you can&#x27;t make levelled abstractions, you&#x27;ve got some thorny interconnections in your logic (and those may be fundamental!!!).  The way I handle this is with a &quot;gauntlet pattern.&quot;  You still can split your logic up into parts, but you just do it by &quot;rejecting&quot; certain logical chunks at a time within a function and comment above each state of the gauntlet.<p>It looks something like this:<p>&#x2F;&#x2F; marketing told me we should never do this ever under any circumstances<p>if (!a) {<p><pre><code>  return CASE_1;\n</code></pre>\n}<p>&#x2F;&#x2F; if the user enrolled like this, we should check if there&#x27;s this bad property about that user<p>if (!b) {<p><pre><code>  return CASE_2;\n</code></pre>\n}<p>&#x2F;&#x2F; oh, you crazy people in finance<p>if (c &gt; 4 &amp;&amp; d &lt; 0) {<p><pre><code>  return CASE_3;\n</code></pre>\n}<p>return CASE_4;<p>The key thing is not to get hung up on duplication or having exact control flow like how the business thinks about it.  You want 1) to return the largest percentage or simplest cases out first, 2) keep everything <i>flat</i> as possible without layers of branching, and 3) be able to associate tests to each one of those early-reject lines.<p>The nice thing about this is the reduction of cognitive load.  By the time you get to the 3rd case or whatever, your mind can already know certain things are true.  It makes reasoning about rules much easier in my experience.')