Item(by='dragontamer', descendants=None, kids=None, score=None, time=1602607609, title=None, item_type='comment', url=None, parent=24767027, text='Toy programs, especially toy-programs that demonstrate the efficacy of a particular paradigm.<p>A good example would be Intel TBB&#x27;s &quot;stupid Fibonacci&quot;<p><a href="https:&#x2F;&#x2F;software.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;develop&#x2F;documentation&#x2F;onetbb-documentation&#x2F;top&#x2F;intel-174-oneapi-threading-building-blocks-onetbb-developer-guide&#x2F;the-task-scheduler&#x2F;simple-example-fibonacci-numbers.html" rel="nofollow">https:&#x2F;&#x2F;software.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;develop&#x2F;documen...</a><p>This is an API, not a language, but the &quot;lesson&quot; is all the same. This API represents task-based parallelism as a relatively simple function call.<p>This &quot;stupid Fibonacci&quot; is very inefficient, but it demonstrates the concept. The important thing isn&#x27;t about making efficient pieces of code for lessons, but good demonstrations instead.<p>---------<p>The hard part is, what constitutes a good demo program? Different people have different problems. Some are visual learners, and therefore a toy graphics program (such as the &quot;Rosetta Smallpt&quot;: <a href="https:&#x2F;&#x2F;github.com&#x2F;matt77hias&#x2F;smallpt" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;matt77hias&#x2F;smallpt</a>) will work out.<p>But some people are exceptionally poor at thinking geometrically (myself included), and looking at raytracers with cos &#x2F; sin &#x2F; tan functions isn&#x27;t really the best way to learn a language.<p>---------<p>For me, the &quot;best&quot; toy programs were AIs applied to toys that I played.<p>I still remember when I learned recursion: it was a Towers of Hanoi solver written in Lisp. This is what &quot;really&quot; got it for me, because I played Towers of Hanoi as a child, and extending the thought process to an AI was just natural. I presume the modern child may know more about Sudoku, so a Sudoku solver (or a 15-puzzle) may be better.<p>------<p>I also learned Java through Robocode, a video game that was popular in the early 00s. Honestly, I probably learned more geometry from that game (trying to hit the circle-bot or wall-bot consistently) rather than through other methods. Also learned some basic AI &#x2F; state machine stuff, and Java classes &#x2F; interfaces &#x2F; etc. etc.')