Item(by='valand', descendants=None, kids=None, score=None, time=1601558421, title=None, item_type='comment', url=None, parent=24649992, text='At the other end of spectrum, the lack of notation variations limits the vocabulary of a PL, which in turn either limits the feature of a PL and&#x2F;or making it verbose. Verbosity can make things a bit difficult too. I am still a bit frustrated with Java&#x27;s annotation simply because something that starts with `@` can mean widely varying things.<p>Since the author is writing about mathematical notation, it is true that mathematical notations sometimes can be bothersome. `Σ` for example has a better (crude) representation in programming language `.forEach` or `.map`. Someone who doesn&#x27;t use them very often can be really frustrated by it.<p>But, this also applies to non-programming languages. Logograms, like Chinese hanzi, Egyptian hieroglyphs, are all symbols and can describe things more succinctly, but has a really really steep learning curve.<p>Not that far, German has the word &quot;Tschüß&quot; which means &quot;bye&quot;. An English-speaking person not actively reading German may imagine the sound of it as &quot;Tshoob&quot; while it actually is closer to &quot;choose&quot;. The letter &quot;ß&quot;, by intuition, is closer to &quot;B&quot; while it is actually an &quot;ss&quot;.<p>I believe that the other half of the PL-notation-entry-barrier problem is which notations are required for which layer of programming language API. If learning is like going up a stair, it&#x27;s not just about the angle of the stairs, but the height of each steps.<p>CSS for example (I would argue that CSS is a non-turing-complete declarative programming language), is rather good for this. You only need to use `.class` and `#` when you&#x27;re styling something with class or ID. Only after that you will learn how to use `:pseudo-class` for a more complex behavior, after that @keyframe, etc.')