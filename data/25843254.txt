Item(by='jodrellblank', descendants=None, kids=None, score=None, time=1611125244, title=None, item_type='comment', url=None, parent=25843065, text='Potentially, if someone adds a new parameter which clashes so the prefix you used is not unique. PowerShell 7.x is introducing support for traditional C-style ternary expression  &quot;a ? b : c&quot; and there&#x27;s a potential syntax clash there because PowerShell has always allowed variable names to end in a question mark, e.g. &quot;$isConfigured?&quot; and with that there&#x27;s no way to stop &quot;$isConfigured? a : b&quot; parsing as a variable name and then an error. The official way forward is to mandate that variable names used with ternary expressions must use the full-brace names like ${isConfigured?}, which is annoying.<p>People don&#x27;t want that, but the PowerShell Team are not moving easily to a possible-break of backwards compatibility in how the language parses variable names. It&#x27;s been discussed here: <a href="https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;3240" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;3240</a> for dozens of comments, and goes:<p>&quot;<i>@PowerShell&#x2F;powershell-committee reviewed this one today, we have a couple thoughts: No matter what we do, we&#x27;re going to do some analysis of our corpus of scripts to see how often folks use ? in variable names. Some of us have a hypothesis (that others would like to validate) that the users who are using ? in their variable names may be less advanced users (as we agree in this room we&#x27;d stay away from it because of the potential problems that could arise). On the other hand, anyone using the functionality described here will be able to understand a slightly more complicated syntax (like ${foo}?.bar). Therefore, we prefer option 3 because it avoids breaking changes on these less experienced users.</i>&quot;<p>The committee ruled to keep the need for ${}, then the ternary expression became a gated experimental feature in PowerShell 7, you have to opt-in to enable it. One of the PowerShell developers analysed the PowerShell Corpus of 400k+ scripts collected by Lee Holmes and Daniel Bohannon for security threat research[2][3] and said &quot;<i>I found that about 62% of variables that have ? in them use it in the end. That made me lean towards not introducing a breaking change.</i>&quot; - in the comments on a pull request[4]. Then someone else made another analysis of the corpus with regex and came up with 329 out of 22,000,000 of variables have a potentially clashing &quot;?&quot; at the end.<p>It&#x27;s been reopened as another discussion[5] and another person came up with an analysis of the Corpus with proper tokenising&#x2F;parsing[6] and came up with 11 variables ending in ? out of 1,896,983 unique variables used[6] which then narrowed down to 1 that might break in backwards compatibility if this change happens. Coming up 4 years of back and forth discussion, even with that kind of evidential backing, with 2 core developers, the Team Lead and Bruce Payette one of the original developers weighing in against, being brought up in a community call, then flagged for review by the committee, then reopened as a reminder again[7] the team is <i>still</i> not won over on the risk of breaking backward compatibility by changing ? parsing at the end of a variable name.<p>That is, yes &quot;possible not forward compatible for future parameter addition&quot;, especially by third party modules who might not take it as seriously, but not at all casually by PowerShell&#x27;s developers.<p>[2] <a href="https:&#x2F;&#x2F;www.fireeye.com&#x2F;blog&#x2F;threat-research&#x2F;2017&#x2F;07&#x2F;revoke-obfuscation-powershell.html" rel="nofollow">https:&#x2F;&#x2F;www.fireeye.com&#x2F;blog&#x2F;threat-research&#x2F;2017&#x2F;07&#x2F;revoke-...</a><p>[3] <a href="https:&#x2F;&#x2F;aka.ms&#x2F;PowerShellCorpus" rel="nofollow">https:&#x2F;&#x2F;aka.ms&#x2F;PowerShellCorpus</a> (1.2GB compressed)<p>[4] <a href="https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell-RFC&#x2F;pull&#x2F;223#discussion_r318340339" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell-RFC&#x2F;pull&#x2F;223#discus...</a><p>[5] <a href="https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;11379" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;11379</a><p>[6] <a href="https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;11379#issuecomment-682014513" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;11379#issuec...</a><p>[7] <a href="https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;14025" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;PowerShell&#x2F;PowerShell&#x2F;issues&#x2F;14025</a>')