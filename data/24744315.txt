Item(by='ZephyrBlu', descendants=None, kids=[24744557], score=None, time=1602401937, title=None, item_type='comment', url=None, parent=24744082, text='&gt; My philosophy is readability over elegance, but you will find many programmers are unaware of this dichotomy and have a strict subconscious aversion to writing something ugly like &quot;measurementOfLeftBottomSideOfBox.&quot;<p>I strongly believe that naming like &quot;measurementOfLeftBottomSideOfBox&quot; is not that helpful or readable.<p>A name like that implies that there are measurements for each side of this box, so following that naming scheme we would have at least:<p><pre><code>    measurementOfLeftBottomSideOfBox\n    measurementOfRightBottomSideOfBox\n    measurementOfLeftTopSideOfBox\n    measurementOfRightTopSideOfBox\n</code></pre>\nLook at how many much useless text we have here. &quot;measurementOf&quot; and &quot;SideOfBox&quot; add nothing but clutter to the naming, and writing out practically the same thing 4 times suggests we could abstract this into a data structure.<p>I know I&#x27;m being overly pedantic in this case, but I think the sentiment behind this type of naming commits a few sins:<p>1) It&#x27;s overly verbose. More than 3 words is a warning sign to me.<p>2) It&#x27;s specific rather than generic. For instance if I name a function &quot;sortSheepByHoofSize&quot;, it implies the reader know what hoofs are, cares about them and knows how to measure them. Whereas when naming it &quot;sortSheep&quot; or perhaps even just &quot;sort&quot;, it&#x27;s immediately understandable on a surface level to practically everyone.<p>3) Following on from 2), this type of naming lacks context. We should leverage the context of surrounding code and abstractions to make naming understandable, instead of trying to pack all the meaning into one name. Oftentimes there&#x27;s repeated information in names that could be inferred from context instead.')