Item(by='grncdr', descendants=None, kids=None, score=None, time=1608562296, title=None, item_type='comment', url=None, parent=25495077, text='From an implementation perspective this has much more in common with Go than either Python or Node.<p>In Go, you simply write a blocking IO call, and the scheduler in the Go runtime pauses your current lightweight thread (&quot;parks the go routine&quot; in their terminology) until the IO operation has some results to read. While waiting, the runtime is free to run any <i>other</i> go routine(s) on any number of OS threads.<p>What is coming to Ruby is a similar system, but where a library can provide this scheduler functionality. So when a lightweight thread (a &quot;Fiber&quot; in Rubys terms) calls a blocking operation, the runtime is notified, and can manage the IO operation while running other fibers.<p>As another commenter mentioned, there was a similar thing named gevent implemented for Python some years ago, but it didn&#x27;t become &quot;the way&quot; to do things. I feel there are three main reasons it didn&#x27;t catch on:<p>1. A lot of Python programs had blocking IO being performed inside native extensions (e.g. bindings to C&#x2F;C++ database drivers). If you depended on such a library, the benefits of gevent were severely limited because it&#x27;s runtime couldn&#x27;t intercept the IO operations.<p>2. It was never part of the stdlib, so there was not a huge amount of incentive for the aforementioned driver authors to support it explicitly.<p>3. There were not that many examples of successful implementation of this model at the time. Go was around but pre 1.0 and not nearly as popular as it is now. Lua was also around, but again, not extremely well known.<p>I expect that Ruby will also suffer a bit from #1, but hopefully, by providing this concept as part of the language and standard library, problem #2 will be mitigated. #3 is IMO a thing of the past, while I&#x27;m not a huge Go fan, it does serve as a compelling argument for an implementation of runtime-managed lightweight threads.<p>Edit: I should mention I&#x27;m in no way involved in this, just interested in what will come of it over the next few years.')