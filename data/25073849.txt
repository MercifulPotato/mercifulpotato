Item(by='aidenn0', descendants=None, kids=None, score=None, time=1605209396, title=None, item_type='comment', url=None, parent=25055229, text='Writing quality tests is often <i>much</i> harder than writing quality software, and I find  quality unit tests to be significantly harder than e2e or integration tests, so if I can only write software for which I can also write quality unit tests, I am greatly reducing the space of quality software I can write.<p>Yes, one solution is to make the software more complicated in order to make the tests less complicated, but the other solution is to just use fewer unit tests.  Note that I&#x27;m not advocating not testing (my motto with software is &quot;If nobody tested it, then you can be certain it doesn&#x27;t work.&quot;), but One good e2e test can often replace dozens of unit tests.<p>I find that E2E -&gt; Integration -&gt; Unit form a scale from &quot;easy to write, hard to run&quot; on the e2e side and &quot;easy to run, hard to write&quot; on the unit side.<p>There are exceptions; testing that you can sort N objects in M microseconds is a trivial test to write, and potentially a challenging requirement to implement, and a unit test might be completely appropriate there.  However, for the general case, I find unit tests to be too often trying to make a square-peg fit a round-hole, and then saying &quot;okay we&#x27;ll shave the corners off a bit so that it&#x27;s easier to fit in this hole&quot; rather than saying &quot;maybe we should use a square hole&quot;')