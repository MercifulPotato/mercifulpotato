Item(by='sirmc', descendants=None, kids=None, score=None, time=1606958076, title=None, item_type='comment', url=None, parent=25283677, text='Abstract:<p>Despite the advancements in software testing, bugs still plague deployed software and result in crashes in production. When debugging issues -- sometimes caused by &quot;heisenbugs&quot; -- there is the need to interpret core dumps and reproduce the issue offline on the same binary deployed. This requires the entire toolchain (compiler, linker, debugger) to correctly generate and use debug information. Little attention has been devoted to checking that such information is correctly preserved by modern toolchains&#x27; optimization stages. This is particularly important as managing debug information in optimized production binaries is non-trivial, often leading to toolchain bugs that may hinder post-deployment debugging efforts. In this paper, we present Debug2, a framework to find debug information bugs in modern toolchains. Our framework feeds random source programs to the target toolchain and surgically compares the debugging behavior of their optimized&#x2F;unoptimized binary variants. Such differential analysis allows Debug2 to check invariants at each debugging step and detect bugs from invariant violations. Our invariants are based on the (in)consistency of common debug entities, such as source lines, stack frames, and function arguments. We show that, while simple, this strategy yields powerful cross-toolchain and cross-language invariants, which can pinpoint several bugs in modern toolchains. We have used Debug^2 to find 23 bugs in the LLVM toolchain (clang&#x2F;lldb), 8 bugs in the GNU toolchain (GCC&#x2F;gdb), and 3 in the Rust toolchain (rustc&#x2F;lldb) -- with 14 bugs already fixed by the developers.')