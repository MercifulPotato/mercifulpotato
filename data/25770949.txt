Item(by='breck', descendants=None, kids=[25771188, 25771723, 25771096], score=None, time=1610590278, title=None, item_type='comment', url=None, parent=25769849, text='I agree and think strong emphasis should be on how a knowledge base saves its files, which should be very interoperable.<p>I build my own little DSLs and have my own experimental\nknowledge base studio going, where I can edit things using\nmy editors (Sublime, VSCode and Vim), view&#x2F;query&#x2F;visualize\nin my web browser, and also view&#x2F;edit in a spreadsheet web\ninterface using Handsontable.<p>The secret trick is all the DSLs use a thing I work on\ncalled Tree Notation (some use an even dumber version\nsimply called Grid Notation). It&#x27;s a plain text notation\nthat just defines lists of words (aka cells) on a line (aka\na node or row) and if you indent a line it becomes a child\nof the parent line (like python) providing support for tree\nstructures and scope. That&#x27;s the basics, and then on top of\nthat you can design all sorts of DSLs with types and very\ndifferent parsing strategies than traditional languages.<p>For example, here&#x27;s a Tree Language called Dumdown that\ncompiles to markdown or html:\n<a href="https:&#x2F;&#x2F;jtree.treenotation.org&#x2F;designer&#x2F;#standard%20dumbdown" rel="nofollow">https:&#x2F;&#x2F;jtree.treenotation.org&#x2F;designer&#x2F;#standard%20dumbdown</a><p>But that&#x27;s still a relatively traditional language. I have\nsome languages which generally you want to use a spreadsheet\ninterface to write programs in, where you can just plop a\ntree anywhere on the sheet, and then start writing trees.\nThose ones are kind of like having a canvas for your project\ninstead of a folder with files. Makes for a good base for\nbuilding DSLs for simulations.<p>Sorry, I digress, but my purpose in bringing this up is that\nif anyone is working on personal knowledge base software\nlike the OP, Tree Notation is a pretty useful thing, if you\ncan figure it out. I&#x27;ve got it figured out but not very good\nat explaining it.')