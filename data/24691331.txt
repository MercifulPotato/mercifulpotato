Item(by='theptip', descendants=None, kids=[24692678, 24692910], score=None, time=1601927489, title=None, item_type='comment', url=None, parent=24686311, text='&gt; There&#x27;s nothing wrong with CSVs&#x2F;TSVs<p>I can see the theoretical purity of this statement, but based on my experience working with CSV files generated by actual non-technical users I have to disagree here.<p>There are a number of footguns here that are really subtle and the average non-technical user has no hope of spotting them.<p>Problems that I&#x27;ve seen in the wild, off the top of my head:<p>* Windows vs. Linux line terminators breaks some CSV libraries.<p>* Encoding can change depending on what program emitted the CSV file, and auto-detecting encoding is not perfect. For example, Excel for Mac uses Linux encoding by default, IIRC.<p>* Excel does wacky things when you export a &quot;CSV&quot; in the wrong format; real users use Excel to generate their CSVs, not Python. For example if you import the string &quot;0123456789&quot; in an Excel sheet, it infers &quot;number&quot; and strips the leading &quot;0&quot; when you export. Now your bank account&#x2F;routing numbers are invalid!<p>* &quot;What&#x27;s a TSV?&quot; -- if users use CSV, how do you handle commas in the data? It&#x27;s nontrivial to train users to do their CSV upload as a TSV.<p>Etc.<p>In practice we needed to build a fairly beefy helpdesk article with accumulated wisdom on how to not break your CSV exports, and most users don&#x27;t read&#x2F;remember these steps until they experience the trauma first-hand.<p>I&#x27;d say the CSV format is deceptively simple -- it&#x27;s quite easy to do the right thing as a developer where the source and sink are both code you control, but in the wild it gets messy really quickly.')