Item(by='brundolf', descendants=None, kids=None, score=None, time=1603044848, title=None, item_type='comment', url=None, parent=24819218, text='&gt; this inevitably leads to deep dependency trees, slower compile times<p>I&#x27;ve never thought that &quot;having more friction when adding dependencies&quot; is a valid strategy for preventing overuse of third-party code. Unlike other &quot;trust the developer&quot; scenarios, dependency bloat is a minor issue at best and is very easy to detect and diagnose. IMO you should cut down your dependencies when they actually become a problem that&#x27;s bigger than the one they&#x27;re solving.<p>&gt; and less knowledge about what&#x27;s actually happening inside most rust code bases<p>I actually think the package ecosystem (along with macros) is crucial for the breadth and accessibility that Rust provides. Rust is a low-level language, but you have high-level libraries at your fingertips if that&#x27;s the level where you need to be working. This means that instead of writing hot-paths in a low level language and application code in a high-level language (and dealing with the added complexity in terms of FFI, builds, tooling, developer knowledge, etc), it&#x27;s very possible to just write the entire thing in Rust. Again in this case, I think &quot;forcing devs to learn how everything works&quot; is a weak argument for increasing the friction for adding dependencies. I&#x27;m pretty sure that everything on crates.io is required to include source, not just a binary, so it&#x27;s trivial to dive in and learn how it works if you&#x27;re so inclined.')