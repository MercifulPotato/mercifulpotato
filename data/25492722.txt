Item(by='mehrdadn', descendants=None, kids=[25493504], score=None, time=1608534030, title=None, item_type='comment', url=None, parent=25492649, text='Any kind of generator is basically like this. Imagine one for listing the contents of a directory... maybe it looks like this:<p><pre><code>  class DirectoryChildren\n  {\n    void *dir;\n    void *buffer;\n    size_t buffer_size;\n    size_t buffer_offset;\n    ...\n  public:\n    bool next(FileInfo *info);\n  };\n</code></pre>\nBear in mind the buffer only represents a chunk of intermediate results fetched from the OS; when we reach its end, we have to request more data from the OS.<p>If you had to make an iterator for this, what would you do? You&#x27;d basically need to either (a) create iterators that at least duplicate the entire state of DirectoryChildren on the stack, or (b) make iterators allocate on the heap. Both of these suck, because (1) iterators are passed around and copied all over the place on the assumption that these are fundamentally cheap operations, which is an assumption that easily breaks (like here), and (2) the iterators fundamentally do not have any meaning or utility as separate entities from the range itself.')