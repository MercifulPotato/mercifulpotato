Item(by='asavinov', descendants=None, kids=[25869698], score=None, time=1611304267, title=None, item_type='comment', url=None, parent=25867693, text='Having a possibility to <i>update</i> (query) output with new input data rather than process the whole input again even if the changes are very small is indeed a very useful feature. Assume that you have one huge input table and you computed the result consisting of a few rows. Now you add 1 record to the input. A traditional data processing system will again process all the input records while the differential system will <i>update</i> the existing output result.<p>There are the following difficulties in implementing such systems:<p>o (Small) changes in input have to be incrementally <i>propagated</i> to the output as updates rather than new results. This changes the paradigm of data processing because now any new operator has to be &quot;update-aware&quot;<p>o Only simple operators can be easily implemented as &quot;update-aware&quot;. For more complex operators like aggregation or rolling aggregations, it is frequently not clear how it can be done conceptually (efficiently)<p>o Differential updates have to be propagated through a graph of operations (topology) which makes the task more difficult.<p>o Currently popular data processing approaches (SQL or map-reduce) were not designed for such a scenario so some adaptation might be needed<p>Another system where such an approach was implemented, called incremental evaluation, is Lambdo:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;asavinov&#x2F;lambdo" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;asavinov&#x2F;lambdo</a> - Feature engineering and machine learning: together at last!<p>Yet, this Python library relies on a different novel data processing paradigm where operations are applied to columns. Mathematically, it uses two types of operations: set operations and functions operations, as opposed to traditional approaches based on only set operations.<p>A new implementation is here:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;asavinov&#x2F;prosto" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;asavinov&#x2F;prosto</a> - Functions matter! No join-groupby, No map-reduce.<p>Yet, currently incremental evaluation is implemented only for simple operations (calculated columns).')