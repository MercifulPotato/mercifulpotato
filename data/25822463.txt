Item(by='hyperman1', descendants=None, kids=[25824885, 25823700, 25826879, 25822576, 25822658, 25824740, 25824127], score=None, time=1610982522, title=None, item_type='comment', url=None, parent=25821718, text='A fun party trick not mentioned here is reducing storage in a doubly linked-ish list:  Normally each node stores 2 pointers:  struct Node {void * prev;void * next}<p>The trick is to use only 1 &#x27;pointer&#x27;, storing prev XOR next:  struct Node {void* xored;}<p>While traversing, you remember not only the current position, but also where you came from.  So forward traversal goes: next= current.xored XOR previous.  Backwards also works: Node \n * previous=(Node * )current.xored XOR (Node * ) next.<p>The first and last node can use 0 as previous or next node, or you make a circular list.  You do have to store a pointer to the first and last node, as usual.<p>I&#x27;ve never seen this used in the real world, which is probably a good thing.  It also plays hell with garbage collectors like Boehm, as they can&#x27;t derive the 2 used adresses.<p>UPDATE: And of course wikipedia knows everything: <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_linked_list" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;XOR_linked_list</a>')