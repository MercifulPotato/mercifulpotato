Item(by='rleigh', descendants=None, kids=[25530667], score=None, time=1608799653, title=None, item_type='comment', url=None, parent=25516249, text='&gt; Why does btrfs have those issues compared to other filesystems?<p>Why?  There are several reasons, but if you go right back to the beginning, there&#x27;s a single reason which caused all the other problems: they started coding before they had finished the design.<p>All of the other problems are fallout from that.  Changing the design and the implementation to fix bugs after the initial implementation was done.  Introducing more bugs in the process.  And leaving unresolved design flaws after freezing the on-disc format.<p>When you look at ZFS as a comparison, the design was done and validated before they started implementing it.  Not unsurprisingly, it worked as designed once the implementation was done.  Up-front design work is necessary for engineering complex systems, it really goes without saying.<p>This isn&#x27;t even unique to Btrfs, but filesystems are one thing you can&#x27;t hack around with without coming to grief; you have to get it right first time when their sole purpose is to store and retrieve data reliably.  Many open source projects are ridden with problems because their developers were more interested in bashing out code than stopping and thinking beforehand.  Same with a lot of closed source projects as well for that matter.<p>In the case of Btrfs, which was aiming from the start to be a &quot;better ZFS&quot;, they didn&#x27;t even take the time to fully understand some of the design choices and compromises made in ZFS, because they ended up making choices which had terrible implications.  Examples: using B-trees rather than Merkle hashes; this is at the root of many of its performance problems.  Not having immutable snapshots; again has performance implications as well as safety implications, and is rooted in not having pool transaction numbers and deadlists.  Not separating datasets&#x2F;subvols from the directory hierarchy; presents logistical and administration challenges, while ZFS datasets can freely inherit metadata from parents and the mount locations are a separate property.  ZFS isn&#x27;t perfect of course, there are improvements and new features that could be made, but what is there is well designed, well thought out, and is a joy to work with.')