Item(by='nwienert', descendants=None, kids=[25829474, 25818335], score=None, time=1610943961, title=None, item_type='comment', url=None, parent=25817535, text='You admitted yourself you&#x27;ve never really used them in practice.<p>I would never having simply read some docs on Rust&#x27;s borrow checker having never used it, go to some discussion of experts online and nerdsnipe with a pithy &quot;It&#x27;s a bad interface&quot; comment without having ever seriously tried it.<p>You&#x27;re not being a jerk, just a jerk-off. You&#x27;re talking out of your ass for fun and you admit you&#x27;ve never actually used it, and your poor example show it clearly.<p>I mean really, think about it. I was honestly interested in seeing if you had some unique insight but your example has no relation at all to hooks, it would only solve <i>useState</i> but has nothing to do with <i>useEffect</i> which is equally if not more important. You replaced the old React `this.setState` basically and not at all hooks, it&#x27;s a syntax many have done before, that I had personally invented ~7 years ago well before hooks and used it on a small app, and which solves none of the problems they solve.<p>And now you want <i>me</i> to personally educate you?<p>At first I was going to just leave it at this conversation, but you know what, fine, here&#x27;s your example:<p><pre><code>  function Component(props: { isActive: boolean }) {\n    const [query, setQuery] = useState(&#x27;&#x27;)\n    const queryDebounced = useDebouncedValue(query, 200)\n    const searchResults = useSearch(queryDebounced)\n    const results = useLastValueWhen(searchResults, !props.isActive)\n\n    return &lt;&gt;\n      &lt;input onChange={e =&gt; setQuery(e.target.value)} &#x2F;&gt;\n      {results.map(result =&gt; &lt;ResultItem {...result} &#x2F;&gt;)}\n    &lt;&#x2F;&gt;\n  }\n\n  &#x2F;&#x2F; these two are easy to write out so leaving out\n  const useDebouncedValue = () =&gt; &#x2F;&#x2F; debounce hook\n  const useLastValueWhen = (a, b) =&gt; &#x2F;&#x2F; hook that retains last a when b == true\n\n  const useSearch = (query: string) =&gt; { &#x2F;&#x2F; can be used elsewhere\n    return useFetch(`http:&#x2F;&#x2F;localhost&#x2F;search?query=${query}`)\n  }\n  const useFetch = (url: string, args?: any) =&gt; {\n    const [state, setState] = useState([])\n\n    useEffect(() =&gt; {\n      let alive = true\n      fetch(url, args).then(res =&gt; {\n        if (alive) setState(res)\n      })\n      return () =&gt; {\n        alive = false\n      }\n    }, [url, args])\n\n    return state\n  }\n</code></pre>\nPlease do show your example of this.')