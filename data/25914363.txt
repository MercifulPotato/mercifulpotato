Item(by='tannhaeuser', descendants=None, kids=[25914882], score=None, time=1611657925, title=None, item_type='comment', url=None, parent=25912855, text='You don&#x27;t need autogen.sh for a release tarball - the whole point of autotools is to generate a configure script that in turn generates a Makefile from Makefile.am etc. for you.<p>However, if you&#x27;re pulling a random commit from git rather than ungzipping a proper release tarball where autogen and co haven&#x27;t been run on a dev system for release, then that workflow of course can&#x27;t work.<p>Which is one of the points of the linked discussion - that folks clone from git rather than doing &quot;proper&quot; releases, with cloned repos increasingly bringing their dependencies with them. Another point being that modern &quot;language ecosystems&quot; a la Go and Rust have their own canonical package management and aren&#x27;t really made for polyglot development and linking with locally installed libs.<p>I don&#x27;t quite get the autotools hate; from a user PoV, it&#x27;s the one build system that has worked extremely well over the decades with just POSIXly tools installed locally (make, sh, cc). The same can&#x27;t be said for cmake. Not a particular fan of libtool, but arguably the invasive thing it does is a consequence of link-loaders such as ld.so still not getting lib resolution quite right in spite of ld.so&#x27;d heavy-handedness (Mac OS&#x27;s is saner IMO). Another reality is that Docker builds are used to shield against lib breakage.<p>IMO, what could be done to simplify builds is not to bring a new grand-unifying builder a la cmake, but to find common ground among GNU and BSD make, make generic &quot;make&quot; more powerful such that Makefile macro expansion works in more places than it does now, and rely solely on Makefiles and POSIXly&#x2F;LSBly C&#x2F;C++ header&#x2F;macro def discovery in your source files rather than relying on automake, config.h, and -DHAVE_XYZ. Then slowly deprecate autotools and restrict yourself to target the much more uniform landscape of Linux, BSDs, and Mac OS we have today.')