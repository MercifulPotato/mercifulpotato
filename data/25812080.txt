Item(by='nwienert', descendants=None, kids=[25817381], score=None, time=1610901099, title=None, item_type='comment', url=None, parent=25807870, text='It is how hooks are explained to the public, for good reason.<p>This API, which is one I came up with many years ago before hooks as well, is not hooks, and doesn’t have the same properties you’d want. It doesn’t at all allow composition. Honestly, it feels like you haven’t spent much time with hooks if this is your improvement. It&#x27;s a great case of &quot;making it look better but removing the valuable properties in the name of purity&quot;.<p>I already explained fairly well why you want hooks to be inline in render, as they need to handle side effects, they need to compose with each other and react to changing values, and therefore they need to constantly run to check for updates. It’s 100% how they are used by everyone.<p>I hope you find time to actually look at what hooks do more closely and find the power behind them.<p>Again - frontend always had highly stateful and state-changing components, they were just abstracts in ways that suited your tastes better before. But it is just taste you’re talking about, not some inherent superiority. You <i>have</i> to deal with state on the frontend that’s changing often during renders, and you want to handle it locally, and you need to compose and chain various units of logic. You can try and hide that fact behind more syntax, but it doesn’t change the fact that your inner function you defined is depending on an outer closure that is stateful, breaking your law of no functions that act differently when called with the same values.<p>Anyway, to each his own, if you don’t care enough to actually understand them and contend with what they solve then I won’t try and force you to!')