Item(by='pmiller2', descendants=None, kids=[25803878, 25806393, 25807257, 25805567, 25810594, 25805931, 25804546], score=None, time=1610819395, title=None, item_type='comment', url=None, parent=25803288, text='Every one of these &quot;Big-O explainers&quot; says pretty much the same thing: count (or bound) the number of steps, then take the most significant term, and drop the constant associated with it.  None of them explain <i>why</i> you take the most significant term or drop constant factors.<p>I get why that is.  You need the mathematical definition to demonstrate why that is, and most &quot;Big-O explainers&quot; don&#x27;t want to assume any significant amount of mathematical background.  But, that definition isn&#x27;t that hard.  It&#x27;s simply:<p>f(x) is O(g(x)) iff there exists a positive number M and an x_0 such that for all x &gt; x_0, |f(x)| &lt;= Mg(x).<p>And, if you&#x27;re in an analysis of algorithms context, it&#x27;s even easier, because you typically don&#x27;t have to worry about this absolute value business.<p>Well, that M is essentially the reason you get to drop constant multiples of f(x).  And, you drop the least significant terms of f(x) because g(x) dominates them, <i>i.e.</i> lim_{x -&gt; \\infty} g(x)&#x2F;f(x) = 0.  (No need to prove this, because this is what makes the &quot;less significant&quot; terms less significant.)<p>I would also like to add that the equals sign in f(x) = O(g(x)) is one of the most useful abuses of notation that I know of, but it can be misleading.  It doesn&#x27;t behave at all like a real equality because it&#x27;s not symmetric, but it <i>is</i> transitive and reflexive.  It actually acts more like set membership than equality.')