Item(by='randomsearch', descendants=None, kids=[25516346, 25516059, 25517890], score=None, time=1608715439, title=None, item_type='comment', url=None, parent=25515386, text='This isn&#x27;t fully formed in my mind yet so go easy:<p>Intuition is linked to elegance, an elegantly designed language is intuitive. An elegant language is one that starts with a few core principles and from that derives the rest of the language. Lisp is an example of a programming language that does this beautifully well.<p>Usually (always?) such core principles themselves are taken from mathematics. After all, maths is heavily engaged in the business of elegance.<p>CSS doesn&#x27;t feel like it&#x27;s built in this way. When you read a tutorial it doesn&#x27;t begin with: &quot;these are the fundamental concepts of CSS&quot;, rather it feels more like a hodgepodge of lots of different ideas and when they intersect you end up with confusion.<p>Part of that is for sure the nature of the evolution of CSS. But I don&#x27;t see any &quot;core&quot; of CSS that you could extract that would be elegant and intuitive now.<p>I think programmers develop this strong instinct for when things &quot;make sense&quot; in that they&#x27;re intuitive and elegant. It&#x27;s like taste. CSS leaves a bad taste.<p>The best comparison I have for how it could be are the UI layouts of Java, Android, iOS. Java and Android aren&#x27;t great tbh (don&#x27;t have much experience with iOS) but at least you can see the design behind them.<p>It feels like something should begin &quot;there are these elements. each have a bounding box. to see how bounding boxes are calculating for text etc you can deep dive into docs. Anyway, these bounding boxes may also be enlarged (through padding etc.). Now, each box has three properties that define its interaction with other elements...&quot; like a maths class and not &quot;if X is inside Y then you can set Y to make X appear on the left if X has its margin set to Z&quot; uggggg.')