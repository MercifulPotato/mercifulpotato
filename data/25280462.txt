Item(by='bird_monster', descendants=None, kids=None, score=None, time=1606937579, title=None, item_type='comment', url=None, parent=25280169, text='From your post, I think you might fundamentally misunderstand Docker&#x27;s use&#x2F;value. From a value-add standpoint, Docker doesn&#x27;t really care about &quot;isolating shared library dependencies&quot;, but instead, compartmentalizing an entire application, dependencies and all. The value in this, of course, is that you no longer have to care about version conflicts between resources that are sharing a machine. As an added bonus, it means your deployment process can stay the same regardless of the type of container you&#x27;re deploying. Before, if you had to deploy a Ruby app as well as a Python app, those required fundamentally different processes, as they each require their own package managers and interpreters. With a container, you compile each of those tools _into the container_, and then your deployment process is just &quot;Create container image, send it somewhere&quot;.<p>Hell, even if you wrote an application with 0 dependencies, you&#x27;re still on the hook for installing the correct version of its compiler, the correct version of your deployment tool, and the correct version&#x2F;OS of your VM. These are still dependencies, even if they&#x27;re not dev dependencies.<p>&gt; It certainly doesn&#x27;t make things easier, faster, more secure, or cheaper;<p>If you don&#x27;t think being able to reuse software makes your workflow easier, faster and at the very least cheaper, I&#x27;m not sure what you could possibly think would do those things.')