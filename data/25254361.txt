Item(by='q3k', descendants=None, kids=[25254549, 25254930, 25254738], score=None, time=1606748303, title=None, item_type='comment', url=None, parent=25254228, text='Stack traces are not the best context for operational debugging.<p>a) stack traces generally don&#x27;t capture parameters<p>b) stack tracers can be totally desynchronized with intent flow<p>c) stack traces expose unnecessary internal noise<p>Compare:<p><pre><code>    Traceback (most recent call last):\n       File &quot;&#x2F;var&#x2F;prod&#x2F;deadbeef&#x2F;models&#x2F;sql&#x2F;peers.py&quot;, line 1337, in tx\n         db.execute()\n       File &quot;&#x2F;var&#x2F;prod&#x2F;deadbeef&#x2F;models&#x2F;sql&#x2F;session.py&quot;, line 1337, in session\n         tx(peers.add(a, b))\n       File &quot;&#x2F;var&#x2F;prod&#x2F;deadbeef&#x2F;models&#x2F;__init__.py&quot;, line 1337, in AddBGPPeer\n         session(peers, AddPeers(a, b))\n       File &quot;&#x2F;var&#x2F;prod&#x2F;deadbeef&#x2F;views.py&quot;, line 1337, in _view_add_peer\n         AddBGPPeer(user, other)\n       File &quot;&#x2F;var&#x2F;prod&#x2F;deadbeef&#x2F;web.py&quot;, line 1337, in handle\n         _view_add_peer(ctx)\n    Exception: DB connector returned: unique constraint failed\n</code></pre>\nto:<p><pre><code>    Failed to add peer: models.AddBGPPeer(204480, 204480): insert peer: tx aborted: unique constraint failed\n</code></pre>\nThe first requires further logging and code reading to understand what might&#x27;ve caused the error. The latter immediately gives you information you need to understand what happened (the validation layer didn&#x27;t catch an invalid self-reference, causing a database UNIQUE constraint to fail, and the database code caller didn&#x27;t gracefully translate this error either).<p>I use the following pattern in Go very often:<p><pre><code>    foo, err := m.AddBGPPeer(a, b, secret, list)\n    if err != nil {\n        pretty := list.StringSeparated(&quot;, &quot;)\n        return nil, fmt.Errorf(&quot;AddBGPPeer(%q, %q, _, %s): %w&quot;, a, b, pretty, err)\n    }\n</code></pre>\nThe fact that Go error handling is just bog standard Go code allows for some quite complex generation of error messages&#x2F;hints&#x2F;contexts that couldn&#x27;t be caught automatically from a stacktrace, or would have some awkward syntax&#x2F;semantics with more complex syntactic sugar.')