Item(by='hctaw', descendants=None, kids=[25893013], score=None, time=1611472675, title=None, item_type='comment', url=None, parent=25889677, text='There has to be a bottom to the stack. What I mean is, at some point types become bytes and instructions. Not every program or interaction is capable of being expressed at every levels of that stack, the invariants must be broken in code and maintained explicitly by programmers on either side of APIs. That simple fact is why FFI boundaries are <i>inherently</i> unsafe.<p>This doesn&#x27;t have to do with C, it has to do with the nature of systems programming - not everything can be baked into the one type system to rule them all that is checked by all programs in all languages at compile time. Metadata is insufficient, you need runtime type checking, which is not free.<p>And to be honest I don&#x27;t think this is an attractive thing to strive for. OS APIs are not <i>that</i> hard to program against (well, maybe Windows APIs are). Differences between OS&#x27;s and versions are, however. We don&#x27;t really need safer systems interfaces, what we need are standard ones that actually work to solve <i>hard</i> systems problems like asynchronous i&#x2F;o, real time scheduling on non-realtime kernels, and arbitrary control flow. These are very unsafe things that do not have good solutions in the OS APIs, adding strict types where they are not needed creates little value for the systems programmers that want to make cool new systems.')