Item(by='bra-ket', descendants=None, kids=None, score=None, time=1607540516, title=None, item_type='comment', url=None, parent=25361865, text='I wouldn&#x27;t do it justice[1], it deserves a blog post or a book [2] but in general solving almost any boolean algebra problem, in hundreds, and hundreds of thousands variables, very efficiently and in very compact representation (via ordered sparse bit vectors[3]).<p>While with Karnaugh maps you can simplify a boolean function with a few variables, BDDs can solve for thousands, fast.<p>And no need to explain applications of high-dimensional boolean algebra on HN,  with boolean algebra you can solve any logic problem expressed as boolean function, any combinatorial problem (except for those with nasty functions), classic graph theory problems.<p>Surprisingly it allows to solve optimization problems[4], like boolean programming, SAT solver, max independent set or max cut in graphs, very efficiently, it can be used in something like belief propagation or lattice induction for inference, but if that&#x27;s not enough you can use it for random number generation, lossless compression, perfect hashing, etc, etc.<p>I haven&#x27;t seen such a versatile data structure elsewhere, most of the other things developed in the last 35 years, like the ones in the comment below are solving special cases, BDD is truly one of the most fundamental and severely underrated &quot;swiss army knives&quot; (that is in CS, EE people know it very well in logic synthesis and verification, BDD&#x27;s first &quot;killer app&quot;).<p>It&#x27;s probably easier to list what you can&#x27;t do with BDD, kind of like what you can&#x27;t do with (high-dimensional) logic.<p>I think it skipped the radar of CompSci community at large because it was too quickly siloed into &quot;that circuit analysis&#x2F;verification tool used by electrical engineers&quot;.<p>Yes, it&#x27;s &quot;just&quot; a DAG but with very particular (and very simple) constraints which allow it to solve infinite variety of problems in a very elegant and surprising way [5].<p>[1] it&#x27;s really worth watching the lecture on BDDs by Don Knuth , starting around 13:32, his enthusiasm is contagious: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SQE21efsf7Y&amp;t=13m32s" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SQE21efsf7Y&amp;t=13m32s</a><p>Part 2 on ZDD: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-HzQYeqS9Wc" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-HzQYeqS9Wc</a><p>[2] TAOCP, volume 4A, Combinatorial Algorithms, p.202 - 280: <a href="https:&#x2F;&#x2F;www.amazon.com&#x2F;Art-Computer-Programming-Combinatorial-Algorithms&#x2F;dp&#x2F;0201038048" rel="nofollow">https:&#x2F;&#x2F;www.amazon.com&#x2F;Art-Computer-Programming-Combinatoria...</a><p>There is a free preprint here <a href="https:&#x2F;&#x2F;www-cs-faculty.stanford.edu&#x2F;~knuth&#x2F;fasc1b.ps.gz" rel="nofollow">https:&#x2F;&#x2F;www-cs-faculty.stanford.edu&#x2F;~knuth&#x2F;fasc1b.ps.gz</a><p>[3] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero-suppressed_decision_diagram" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Zero-suppressed_decision_diagr...</a><p>[4] Bergman, David, et al. &quot;Discrete optimization with decision diagrams.&quot; INFORMS Journal on Computing 28.1 (2016): 47-66.<p>[5] Bryant, Randal E. &quot;Graph-based algorithms for boolean function manipulation.&quot; Computers, IEEE Transactions on 100.8 (1986): 677-691.<p>I hope that answers your question, dang, and sorry for title mishap.')