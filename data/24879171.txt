Item(by='mlochbaum', descendants=None, kids=[24879473], score=None, time=1603546952, title=None, item_type='comment', url=None, parent=24878970, text='Hey, APL programmers preferred goto (â†’ or &quot;Branch&quot;) until well into the 1980s. They&#x27;ve never really had a good grip on large-scale program structure. It&#x27;s also worth noting that early J development was very invested in the tacit or point-free programming style, so a solid explicit style was perhaps considered less important than current usage would suggest.<p>I consider ALGOL-derived control structures to still be the most readable way to organize control flow. Tacit constructs like Agenda @. and Power ^: are good in small amounts but tend to require too much jumping around to read in larger programs. But control structures have their own problems, like a lack of flexibility for flows that don&#x27;t quite match, scoping confusion (in for loops particularly), and the complicated continue&#x2F;break&#x2F;return hierarchy. I was recently surprised to find that first class functions and list literals in my own array language are enough to get a close approximation of control structures without these particular issues, and documented how it works at <a href="https:&#x2F;&#x2F;mlochbaum.github.io&#x2F;BQN&#x2F;doc&#x2F;control.html" rel="nofollow">https:&#x2F;&#x2F;mlochbaum.github.io&#x2F;BQN&#x2F;doc&#x2F;control.html</a> .<p>Tail recursion isn&#x27;t generally difficult to implement when it can be recognized, so if J hasn&#x27;t added it (I don&#x27;t know whether this is the case) it&#x27;s probably just due to lack of interest in that style. J has a cool way to recurse in a tacit setting with $:, but I think recursion is seen more as a way to handle things like tree traversals that are obviously recursive than as a general control flow technique. J might also be able to move to lexical scoping, but it would mean that a variable defined in one function now shadows globals in the functions it contains, which could break some code. Maybe not a lot of code, because J&#x27;s current explicit syntax strongly discourages nesting.')