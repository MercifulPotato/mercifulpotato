Item(by='jiggawatts', descendants=None, kids=[25275231], score=None, time=1606905772, title=None, item_type='comment', url=None, parent=25274560, text='There is an architectural error in Java frameworks that I&#x27;ve noticed. (Other languages have it too, just nowhere near as common.)<p>Basically, the error is that when some system uses virtual function calls via an interface, what that&#x27;s really saying is that: &quot;This can be changed at runtime.&quot;<p>So if there&#x27;s some function &quot;void foo( IBar bar )&quot;, then what that&#x27;s really saying is that &quot;bar&quot; can <i>change</i> at <i>runtime</i>. Literally a different implementation from call-to-call.<p>Is that actually required?<p>In 99.9% of such function calls, no: the implementation of IBar will always be the same concrete class.<p>To see a language that has gone to the <i>opposite</i> end of the spectrum, take a look at Rust. It use a lot of parametric typing, which is very flexible, but by default tends to use compile-time static types instead of run-time dynamic types.<p>Java never went down this path because it added parametric types very late in its design.<p>C# had parametric types in v2.0, which is when it started getting popular.<p>Rust had it from the beginning.')