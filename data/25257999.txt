Item(by='MaxBarraclough', descendants=None, kids=None, score=None, time=1606765341, title=None, item_type='comment', url=None, parent=25254159, text='&gt; I ask how else do you move to production if you don&#x27;t take your educational work to the next level?<p>&gt; What makes an expert if you don&#x27;t make it for yourself?<p>You study the field, like any other field. This doesn&#x27;t collide with what I&#x27;ve said.<p>In this context there needs to be a fairly bright line between learning, and producing real-world cryptographic systems. It might be instructive to have engineering students build an airbag system, but you don&#x27;t then put it in your car.<p>&gt; If I create a mature, well thought piece of encryption<p>Unless you&#x27;re a professional cryptographer, someone like Bruce Schneier, Tanja Lange, or Filippo Valsorda, it&#x27;s best to assume that you haven&#x27;t created a well thought out cryptographic solution. See <i>Schneier&#x27;s Law</i>. [0] If you have a PhD related to cryptography, and&#x2F;or a history of employment as a cryptography specialist at a major technology company, then you may have a solid enough grasp of the field to be taken seriously, but short of that, you should leave cryptography to the experts.<p>It&#x27;s really hard to get the theory just right, and it&#x27;s also really hard to get the implementation just right. Fortunately there are existing out-of-the-box solutions that do all the things we want: secure channels, secure file encryption, authentication, etc.<p>&gt; Yes, I should have it validated<p>We have a validation process: standards bodies. For instance, in the TLS 1.3 standard, they introduced the requirement for supporting the <i>x25519</i> algorithm. That algorithm was developed by a team of professional cryptographers, not by a well-meaning dabbler, and it has been subject to careful scrutiny by the cryptographic community.<p>After standardisation, we see the algorithm implemented in the few trustworthy TLS libraries (e.g. OpenSSL and Google&#x27;s <i>Tink</i>), which we then adopt for use in the real world.<p>Serious organisations do not play around with this stuff, they only use trusted standard algorithms. Microsoft&#x2F;Apple&#x2F;Amazon&#x2F;Google have crypto teams who are qualified to write their own implementations of the standard algorithms. The rest of us then use those implementations. Microsoft&#x27;s <i>Active Directory</i> is backed by the standard <i>Kerberos</i> crypto protocol, for instance.<p>&gt; I still disbelieve that those who create something being told: &quot;you should not be allowed in production ever&quot; and only run &quot;battle-proven&quot; is the wrong approach. Create something, validate it and then run it.<p>We agree in a sense, it&#x27;s just that the bar for considering it <i>battle proven</i> is set very, very high, and for good reason. Developing crypto isn&#x27;t like styling a webpage with CSS. It&#x27;s technically challenging to do correctly, it&#x27;s difficult to know if you&#x27;ve done it correctly, and the consequences of getting it wrong are severe.<p>&gt; Besides battle-proven systems had to be ran in production in the first place and that those battle-tested systems still have vulnerabilities themselves, ie: HeartBleed. Again which was immune with Mbed TLS&#x2F;PolarSSL that someone had reimplemented TLS. Validation is the key that&#x27;s required.<p>I don&#x27;t know what &#x27;validation&#x27; is meant to mean here. If we had a way to easily detect such issues, we would use it. Again, it&#x27;s extremely difficult to get this stuff just right. The smallest defect can have terrible consequences.<p>This applies even when we&#x27;re doing everything correctly. As you say, we see issues even in major implementations. That doesn&#x27;t mean that using amateur crypto code is a good idea. It isn&#x27;t. <i>Every</i> cryptographer agrees that it&#x27;s a terrible idea to do that. Sometimes aeronautical engineers build dangerous aircraft, but that doesn&#x27;t mean we let amateurs have a go.<p>&gt; If you feel your work is good enough, then pay the price for validation.<p>That isn&#x27;t how it works. Cryptography is an academic discipline, it makes advances through slow-moving academic publishing and standards bodies, not by paying for a code-review. If you really want to make a contribution to the field, you&#x27;ll need to make a career of it.<p>Again though, in a sense there&#x27;s little need. Much of the best crypto software in the world is Free and Open Source.<p>If you want to implement TLS as an exercise, or make a neat cryptographic &#x27;toy&#x27; program of some sort, then great, but don&#x27;t gamble anything of value on it (user data, say).<p>[0] <a href="https:&#x2F;&#x2F;www.schneier.com&#x2F;blog&#x2F;archives&#x2F;2011&#x2F;04&#x2F;schneiers_law.html" rel="nofollow">https:&#x2F;&#x2F;www.schneier.com&#x2F;blog&#x2F;archives&#x2F;2011&#x2F;04&#x2F;schneiers_law...</a>')