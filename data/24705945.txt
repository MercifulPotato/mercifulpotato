Item(by='tannhaeuser', descendants=None, kids=None, score=None, time=1602054100, title=None, item_type='comment', url=None, parent=24705756, text='SGML itself has <i>link process declarations</i>, an additional type of declaration set that can appear in an SGML prolog next to DTDs and that can be used to remap elements (in SGML you can have multiple DTDs and LPDs, pipeline LPDs, and so on). sgmljs uses this and adds <i>templating</i> to capture attributes at call sites for passing these into templates as regular entities, allowing for parametric macro expansion. Basically, if you have eg<p><pre><code>    &lt;div bla=x&gt;\n</code></pre>\nin your main doc, you can make SGML expand it using<p><pre><code>    &lt;!DOCTYPE div SYSTEM [\n      &lt;!ENTITY bla SYSTEM&gt;\n    ]&gt;\n    &lt;div&gt;\n      &lt;p&gt;Value of bla is &amp;bla&lt;&#x2F;p&gt;\n    &lt;&#x2F;div&gt;\n</code></pre>\nhonoring escaping&#x2F;sanitizing etc. LPDs can apply rules in a context-dependent way using an automaton capturing much of core CSS.<p>Now, for arbitrary markup manipulation (XSLT is Turing-complete), don&#x27;t tell the HN crowd that SGML has&#x2F;had Scheme-based DSSSL (precursor of XSLT) ;) My opinion, having done large, nontrivial XSLT projects (including extracting the DTD grammar rules you see on the site from spec text) is that the more complex it gets, the more a general-purpose language with unit testing etc  becomes a better choice over XSLT.<p>Edit: much luck with your browser project! Don&#x27;t hesitate to use my code or ask questions (here or on StackOverflow tagged sgml)')