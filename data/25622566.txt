Item(by='eyelidlessness', descendants=None, kids=[25623995, 25623586], score=None, time=1609690258, title=None, item_type='comment', url=None, parent=25621169, text='&gt; My stack requires no maintenance<p>That’s all fine and good, if it’s true and you anticipate it staying true. And plain HTML and CSS can go a long way for a static site.<p>But when you want to change something site-wide, and you’ve accumulated a lot of content, it can be a ton of work to do manually and incredibly error prone to automate.<p>This is where we reach for tooling. Even if it’s just a simple template engine to generate HTML&#x2F;CSS. After all, the author is right: that stack will outlive all others. But all the others (for web) are fundamentally built on it.<p>Now, it also depends a lot on the complexity of what you want to build into HTML&#x2F;CSS. For instance, I’m working on a site with art derived from some fairly involved maths. All of the art is rendered statically. I <i>could</i> manually calculate the various inputs and outputs, but what a pain. And my intention is to evolve the art over time (again still rendering statically, but existing images will be updated), which would mean going back and manually recalculating each one. Exponential pain.<p>The thing that bugs me about this tech-minimalism web trend that’s pervasive here isn’t just that it’s a weird sort of Luddism, but that it’s fundamentally uncreative. There’s great work being done on tech stacks that allow us to write programs to solve repetitive and complex problems but still ship efficient code to the client. Not just the current breed of static site generators, but also more involved tools that strip out code at build time allowing eg components which are static by default but progressively enhanced with some interactivity. Examples:<p>- Microsite (I’m currently investigating this for my project)<p>- Preact with partial client hydration (there are a ton of proofs of concept out there)<p>- Solid (which is also investigating partial hydration)<p>- Marko (does partial hydration automatically with static analysis)<p>- Similar efforts for Svelte and Vue<p>- React server components<p>All of these may be dead ends in the long run, but the progression toward powerful build tools that produce efficient sites is a good thing, and the web will benefit from it without trying to force an extreme tech minimalism that will never capture a large part of the web dev culture because it’s inefficient for a lot of what people want to build.')