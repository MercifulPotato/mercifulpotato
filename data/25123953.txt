Item(by='dilap', descendants=None, kids=[25126492], score=None, time=1605622655, title=None, item_type='comment', url=None, parent=25120663, text='I get that, but I feel like the questions I&#x27;m curious about have still not been answered...<p>1. Array out of bounds is different than other types of errors, like e.g. file does not exist:<p>Because the size of the array is entirely controlled by the program, and a non-buggy program can completely avoid array out of bounds, it <i>knows</i> its access to the array will not return None:<p>Array access returning None is not an inherent condition that must be handled by any program.<p>So my question is, what does this look like then in conditions when you know you won&#x27;t access out of bounds?<p>Specifically, that makes me wonder what a binary search implementation in Elm would look like. Binary search <i>knows</i> it will not access outside the bounds of the array. So how do you handle get returning Maybe? Do you just assert the result is not null?<p>OK, I got curious and searched, and here&#x27;s one random implementation:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;terezka&#x2F;elm-algorithms&#x2F;blob&#x2F;master&#x2F;BinarySearch.elm" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;terezka&#x2F;elm-algorithms&#x2F;blob&#x2F;master&#x2F;Binary...</a><p>The answer is it checks for Nothing (which should never happen!) and just returns -1 if it does happen.<p>This does not seem good to me! If Array.get <i>is</i> returning Nothing, this indicates a <i>bug</i> in the binary search implementation.<p>Instead of getting a panic or crash or other indication that a bug has ocurred, the design of get has encouraged the author to silently swallow this condition and return -1.<p>2. Second question: There are many of other kinds of problems that can happen besides array out of bounds access; it seems unclear to me how you could handle that with Maybe: What if you divide by 0? What if you overflow the range of a type? What if you run write a recursive function that exhausts memory?<p>In summary, Maybe to handle places where the program is genuinely uncertain about something is great, but I&#x27;m unconvinced of its value in modeling situations that should never occur in a non-buggy program.<p>I&#x27;ve been playing with the Zig language recently, and I feel like it gets this exactly right.<p>- Optional types for cases where a value might or might not be there<p>- Sum-type with a set of errors and the value for cases where program input may result in an error<p>- Crash with a stacktrace for cases where a bug in the program is detected (e.g., array out of bounds access)')