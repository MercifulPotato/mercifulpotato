Item(by='Groxx', descendants=None, kids=None, score=None, time=1609735065, title=None, item_type='comment', url=None, parent=25625507, text='Pagination for a one-page-query is rarely the same cost in my experience, in real-world scenarios.<p>In very simple cases, like a single table sql query, absolutely - databases effectively have to compute the full result, sort it, and return a window.  There&#x27;s almost no reason to paginate here, at an API level, unless the consumer <i>wants</i> only a subset (say, bandwidth limitations).  Sending it all at once can be a huge benefit for those that will use it all, it&#x27;s both simpler and faster for all parties.<p>But in most real-world cases, there are at least two additional details that can add significant <i>response</i> time: joins (when not involved in sorting) and additional data-gathering needed to fully build the response (e.g. getting data from other systems, internal or external).  Joined data is not typically loaded prior to computing limit&#x2F;offset since it may be a massive waste, and external data is effectively the same issue but with <i>far</i> higher latency.<p>And that&#x27;s before getting into other practical issues, e.g. systems that can&#x27;t process the response stream as it comes in - a subset will load-and-return faster than the whole content in <i>all</i> cases, so e.g. a website loading some json can show initial UI faster while loading more in the background.  Streaming is often possible and that&#x27;ll negate a lot of the downsides, but it&#x27;s <i>far</i> less common than processing a request only after it completes.')