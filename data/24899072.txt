Item(by='fuball63', descendants=None, kids=[24899253], score=None, time=1603735282, title=None, item_type='comment', url=None, parent=24897326, text='I love TCL.  The author points out my favorite aspect: &quot;it has a radical minimalism&quot;.  I use it for hobby projects because I work in Python all day professionally and like to mix it up a little in my free time.  It feels very different but inhabits the same use case space.<p>That being said, here are some interesting things that tripped me up:<p>- using expr for arithmetic.  The author mentions it, and it is cumbersome, but it also exemplifies what makes TCL special<p>- upvar for pass by reference.  TCL does pass by reference by the command upvar, which says &quot;take the variable named x in the scope above and assign it to the variable y in this scope&quot;.  Confusing at first but a nice way to have pass by reference in a dynamic language<p>- docs are hard to read sometimes. The manual and tutorial for TCL are fantastic; the wiki is a little hard to read sometimes.  The pages kinda seem like conversations, with authors weighing in on an article and tagging their names to their comments.<p>- lack of structured data.  Saw another commenter posted this, and its something I wish TCL had better out of the box support for.  The addition if dict was huge.  The good news though: it&#x27;s extremely easy to build a new command set to build a data structure out of dicts.<p>Despite all of this I&#x27;m a big fan of TCL. I try to tell as many people I can about it, because it really feels like a breath of fresh air compared to my day job Python.  It allows you to be creative (and reckless!) with its power.<p>Edit: going to post the tutorial because it&#x27;s so essential to getting started: <a href="https:&#x2F;&#x2F;tcl.tk&#x2F;man&#x2F;tcl8.5&#x2F;tutorial&#x2F;Tcl0.html" rel="nofollow">https:&#x2F;&#x2F;tcl.tk&#x2F;man&#x2F;tcl8.5&#x2F;tutorial&#x2F;Tcl0.html</a>')