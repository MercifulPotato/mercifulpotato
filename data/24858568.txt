Item(by='kvark', descendants=None, kids=[24860324, 24860257], score=None, time=1603378068, title=None, item_type='comment', url=None, parent=24858172, text='We&#x27;ve been trying to design a safe and portable language in WebGPU (called WGSL), but it turns out to be really hard. For example, subgroup ops discussion [1] so far concluded that even the most limited form still has portability concerns. Even things like texture sampling (that depend on control flow uniformity) could be tricky with regards to how the uniformity is defined. And at least in WGSL we can be conservative, but Rust-GPU does probably not have this luxury.<p>Thus, I&#x27;m curious to see how Rust will tackle it. Will it try to enforce the portability and safety guarantees with a type system, or will it specifically lower the guarantees compared to native code (thus keeping the syntax of Rust but not the philosophy).<p>Anyhow, amazing work by Embark, and a stellar example how to collaborate in open source!<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;gpuweb&#x2F;gpuweb&#x2F;pull&#x2F;954" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;gpuweb&#x2F;gpuweb&#x2F;pull&#x2F;954</a>')