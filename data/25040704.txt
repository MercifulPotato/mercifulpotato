Item(by='MaulingMonkey', descendants=None, kids=[25040870], score=None, time=1604960791, title=None, item_type='comment', url=None, parent=25037893, text='&gt; Lack of safety is a feature in game development,<p>Bullshit.<p>How many games have had releases delayed and major wrenches thrown into marketing plans because of progress ruining heisenbugs?  How many failed certification passes from banal data races and other undefined behavior?<p>We trap UI in actionscript or javascript, and gameplay programmers in other scripting languages - perhaps python or lua - for faster iteration times, hot reloading, <i>and safety</i>.  Because it&#x27;s difficult enough to keep the build stable when it&#x27;s merely all the engine programmers who should know better screwing things up with C++.<p>This results in large messes of poorly performing, poorly optimized, garbage-collector laden code that Rust would handle <i></i>much<i></i> faster.  We&#x27;re leaving lots of performance on the table, often for little other purpouse than &quot;safety&quot;.<p>Console first day patches may have taken off <i>some</i> of the pressure for getting the first release right, but handhelds aren&#x27;t always online and <i>still</i> have a pretty high bar.<p>&gt; the optimizations required are typically unorthodox<p>Rust&#x27;s `unsafe` keyword and intrinsics let you do all the unaligned intrinsic-laden data-racey technically-undefined-behavior micro-optimizations you might want to do in C++ in Rust just fine.<p>It&#x27;ll hopefully trigger a more stringent code review and force you to justify your pile of bugs, but that&#x27;s a good thing.  Or you can skip the code review if your entire company really disagrees.<p>&gt; a super strict language slows development down<p>C++ is also super strict, just in an unenforced-at-compile-time way that result in plenty of late nights chasing heisenbugs.  Don&#x27;t get me wrong - language strictness <i>can</i> slow development down - but that&#x27;s one of the reasons people eschew C++, too.<p>As for C++ vs Rust?  I&#x27;m going to spend more time and be far less certain of catching the issues in a C++ code review than I would be in a Rust code review.  And while it took a few months for my development speed in Rust to catch up with my development speed in C++, it <i>did</i> happen.<p>Rust merely forces you to acknowledge when you&#x27;re being sloppy.<p>&gt; Additionally, object ownership can be unclear in a game development setting, which typically makes use of global variables for state.<p>I have solved so many sources of endless heisenbugs by eliminating some of these global variables.  John Carmack as far back as 2013 was using phrases like &quot;horror show&quot; to describe similar parts of his own codebases[1] and has been agitating for more functional styles.<p>An unclear mudball of global variables is entirely possible - and easy - in Rust if you really want that.  You merely need to make it either thread safe, or resort to `unsafe` if you really can&#x27;t tolerate the overhead of not having threading-related heisenbugs.<p>[1]: <a href="https:&#x2F;&#x2F;youtu.be&#x2F;1PhArSujR_A?t=125" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;1PhArSujR_A?t=125</a>')