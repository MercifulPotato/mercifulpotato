Item(by='throwaway894345', descendants=None, kids=None, score=None, time=1607098194, title=None, item_type='comment', url=None, parent=25302181, text='I&#x27;ve had similar experiences, but I don&#x27;t much care for async Python. In particular, it&#x27;s way too easy to block the event loop either by accidentally calling some function that, perhaps transitively, does blocking I&#x2F;O (this could be remedied if there was no sync IO) or simply by calling a function which is unexpectedly CPU-bound. And when this happens, other requests start failing unrelated to the request that is causing the problem, so you go on this wild goose chase to debug. Sync I&#x2F;O is also a much nicer, more ergonomic interface than async IMO. And then there are the type error problems--it&#x27;s way too easy to forget to `await` something. Mypy could help with this, but it&#x27;s still very, very immature. Lastly, last I checked the debugger couldn&#x27;t cope with async syntax--this is obviously not criticizing the async approach in general, but I wanted to round out my complaining about async Python.<p>I don&#x27;t mind working with goroutines personally--I use them sparingly, only when I really need concurrency or parallelism. This takes some discipline (e.g., not to go crazy with goroutines and&#x2F;or channels) and a bit of experience (in the presence of multiple goroutines, what needs to be locked, when to use channels, etc), so if you&#x27;re relatively new and very impatient or undisciplined you probably won&#x27;t have a good time (which isn&#x27;t to say that if you dislike goroutines you must be a novice or undisciplined!). But for me it&#x27;s nearly an ideal experience.')