Item(by='prirun', descendants=None, kids=None, score=None, time=1605291166, title=None, item_type='comment', url=None, parent=25084403, text='I worked for Prime (minicomputers) as a youngster in the early 80&#x27;s.  They supported PL&#x2F;I and many parts of the OS (Primos) were written in a systems dialect of PL&#x2F;I they called PLP.<p>The PL&#x2F;I condition mechanism was an integral part of the OS and fault handling.  For example, a floating point exception or integer overflow was detected by hardware, caused a fault, the information from the fault was packaged into a condition frame (an extended stack frame), and a condition was raised.  The OS looked backward through the stack looking for an &quot;onunit&quot; (aka condition handler) that handled this condition - basically like try &amp; except.<p>Condition handlers were very flexible, with the option to partially handle the condition then let it continue with older frames, ignore the condition in this handler and let it continue, or completely handle it.<p>If no running program had a handler for a condition, the default OS handler would run, which often raised a new condition and printed an error message.  If the problem causing the error was corrected (for example, some files were deleted from a full disk), you could use the REN (re-enter) command to return from the disk full condition and the system call causing the condition would be automatically re-tried, sort of like when EINTR occurs on a system call and it has to be (manually) retried.<p>Instead of using numbers, conditions had arbitrary names and arbitrary data could be associated with a condition.<p>In hindsight it was very similar to Python&#x27;s try&#x2F;except&#x2F;finally error handling mechanism.  There was a condition called &quot;cleanup$&quot;, which was executed whenever a procedure was aborted because of a stack unwind to allow it to close files, delete temp files, etc.<p>I wrote an emulator for the Prime and you can see all this with:<p>telnet em.prirun.com 8001<p>There are all kinds of manuals online too, including a full PL&#x2F;I implementation, all from the 80&#x27;s and early 90&#x27;s.')