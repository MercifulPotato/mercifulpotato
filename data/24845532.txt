Item(by='shoesdontfit', descendants=None, kids=[24845580], score=None, time=1603265127, title=None, item_type='comment', url=None, parent=24845300, text='I can never really decide the answer to this question and I have been programming a long time. I end up just not thinking about it too much and doing what I feel like because getting things done is more important than standing around thinking about the millions of different options.<p>There are various arguments that seem to have flaws of their own. For example, &quot;use ORMs for all the simple things, and raw SQL for the complex things&quot;. The problem with this is that even simple things like &quot;insert this into the database&quot; often require checking that the foreign keys you insert are within the domain of the user trying to insert them, and various other constraints like that. So with SQL, you can do this all in one query, but with an ORM, you often create a query for each check.<p>Related to that is the idea of &quot;premature optimisation&quot;. The problem with this concept is that all queries add up together to determine how much hardware you need, which determines your costs. You can argue the opposite of premature optimisation, depending on your case. Why not spend 5 minutes extra writing a manual query that will be run hundreds of thousands of times for years?<p>Are your goals about reducing infrastructure costs as much as possible? Is &quot;developer time&quot; really a thing, or are you doing this in your own time for a startup or something?<p>Then there is the fact that doing simple things faster isn&#x27;t much of a selling point because they are already simple. It is very obvious though that ORMs are much, much more readable than raw SQL.<p>Then another question starts to come up, if you are using this abstraction like an ORM or GraphQL as an ORM, why are you even using a SQL database when none of the features are really available to you?<p>SQL has has interesting new features in that you can do the object mapping inside the queries now. For example:<p><pre><code>  select\n    post.id,\n    post.content,\n    json_agg(comments),\n    json_build_object(&#x27;id&#x27;, a.id, &#x27;name&#x27;, a.name) as &quot;author&quot;\n  from\n    posts,\n    comments,\n    authors\n  group by\n   etc...\n</code></pre>\nStill, it is nowhere near as easy as using an ORM. The other thing is that when you start using an ORM, you really do end up having a different approach to querying your data in every situation. You don&#x27;t use all of the various features of SQL. It ends up being a lot slower, but maybe in some cases that is worth it.')