Item(by='esaym', descendants=None, kids=[24876462, 24878623, 24882626, 24876267], score=None, time=1603500484, title=None, item_type='comment', url=None, parent=24875331, text='I think the OP is mostly talking about &quot;perl one liners&quot; on the shell like this: <a href="https:&#x2F;&#x2F;catonmat.net&#x2F;ftp&#x2F;perl1line.txt" rel="nofollow">https:&#x2F;&#x2F;catonmat.net&#x2F;ftp&#x2F;perl1line.txt</a><p>It is not that hard either (unless perl is completely foreign to you).<p>Ironically just today I wrote a python script (using concurrent.futures) to batch re-encode 10gb of mp3 podcasts into 3gb of opus files to save space. Before I deleted the old mp3&#x27;s, I did a quick file count of mp3 and opus files only to have 5 extra opus files... I beat my head really good trying to glue a bunch of bash stuff together but I could not find where the 5 extra opus files were coming from.<p>I defected back to perl. All I needed was an alphabetical list of all the files (there were many sub-directories), perfect for a little perl oneliner:<p><pre><code>  find &#x2F;podcasts&#x2F; -iname &quot;* \\.ogg&quot; | perl -nle &#x27;if( $_ =~ &#x2F;\\&#x2F;([\\w-]+.\\w\\w\\w)$&#x2F;) { print &quot;$1&quot;}&#x27; | sort &gt;ogg.txt\n</code></pre>\nI did the same thing for * .mp3 files and then diffed the two files. I quickly noticed the extra 5 opus files were from me doing test encodes a couple of weeks ago that I forgot about.<p>Sure it looks hideous, but the explanation is easy: for &#x27;perl -nle&#x27;, the &#x27;l&#x27; means process each line from stdin individually, the &#x27;n&#x27; means no auto printing of the line, and the &#x27;e&#x27; is basically the perl &#x27;one liner&#x27; mode. Either way, each line comes in and is stored in &#x27;$_&#x27;, I use a capturing regex to grab the file name without parent directory names, basically everything after the last &#x27;&#x2F;&#x27; in a path that ends with a three letter extension (\\w\\w\\w). The &quot;captured&quot; part of the regex ends up in &#x27;$1&#x27;. Also see &#x27;perldoc run&#x27; for all the runtime one liner options.')