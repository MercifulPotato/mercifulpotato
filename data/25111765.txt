Item(by='Geminidog', descendants=None, kids=None, score=None, time=1605535728, title=None, item_type='comment', url=None, parent=25108908, text='&gt;This myth needs to die.<p>Let me spell it out in an example. Sports. Horse racing or basketball. You have a team of highly skilled players with a bunch of information quantized, including height, weight, score statistics, rebound statistics, biography... etc. And these guys are in a game with a very very controlled set of rules under exactly the same time pressure and everyone still fails to predict the outcome.<p>In software you have a product. The product is usually not concretely defined and you have a complex code base and you can never be 100% sure exactly how the new product will integrate with that code base... you&#x27;re also not 100% sure how the code will be put together to define the product. Additionally are you 100% familiar with the stack? Do you know every possible primitive of psql or ruby or python or C++ that you could be using to create your project because I pretty much guarantee you every basketball player more or less knows every possible move and rule of a basketball game.<p>You&#x27;re also working with a team that includes people that you have much less information on than normal. You worked with a guy for what at most two years does that give you accurate statistical information to the degree of say a basketball player? Also there&#x27;s bound to be people you&#x27;re less familiar with working on the project as well. Are you interacting with other teams as well? Does the outcome of your project hinge on the completion of a feature by an entire team outside of your own?<p>People can be experts on horse races or sports. Even then they can&#x27;t predict things accurately. If you were to start making bets on software development dates of completion. You will also massively fail because not only are there more variables in a software project... but you have much less information.<p>Chaos is a phenomenon that happens to systems we have close to perfect information for. We find that if we have the perfect information of all the particles in a weather system except for say one particle. We find that information about that missing particle will make our mathematical calculation wildly inaccurate.<p>For software we don&#x27;t even have anything close to perfect information in a system with multitudes of variables. Chaos will throw any prediction off.<p>&gt;but most can predict how long things will take within a factor of 3x or so and it will be within that margin most of the time, a person who could do that for hurricanes or earthquakes would be the greatest genius in history.<p>3x of what. 3x can be big or small depending on x. So if I predict a project will take one year I can be off by 3 years under your logic. If I predict a month, than I can be off by 3 months. If I predict a week, 3 weeks. 3x is pretty horrible if you ask me, it&#x27;s easy to make guesses within these parameters.<p>I predict that both a hurricane and an earthquake will happen in a century. I&#x27;ll only be off by 3x or 3 centuries. Actually I can do better than that. I&#x27;m 100% sure multiple earthquakes and multiple hurricanes will happen in the next century and I am 100% sure that I will by 0x off let alone 3x.... Look I&#x27;m the greatest genius in history.<p>3x is not a reasonable margin of error.')