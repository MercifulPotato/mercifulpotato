Item(by='colejohnson66', descendants=None, kids=[25756432, 25756451, 25759156, 25756356, 25756870], score=None, time=1610498248, title=None, item_type='comment', url=None, parent=25755204, text='&gt; Clang does not implicitly simplify code as it parses it like GCC does. Doing so causes many problems for source analysis tools: as one simple example, if you write &quot;x-x&quot; in your source code, the GCC AST will contain &quot;0&quot;, with no mention of &#x27;x&#x27;. This is extremely bad for a refactoring tool that wants to rename &#x27;x&#x27;.<p>Can someone explain this Clang “pro”? If a refactoring tool wants to rename “x”, it does it to the <i>source</i>, not the AST, no? And if “x-x” is turned into 0 by the parser, why does it matter? Assuming “x” isn’t volatile, “x-x” is <i>indeed</i> 0!')