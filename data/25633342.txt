Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1609777200, title=None, item_type='comment', url=None, parent=25630912, text='You can edit the source file and send it to the listener.<p>Suppose I&#x27;m in my REPL and I do this:<p><pre><code>  &gt; (foo &#x27;bar)\n</code></pre>\nI get dropped into the debugger because <i>foo</i> doesn&#x27;t exist. So I switch over to my .lisp file in another buffer and I type:<p><pre><code>  (defun foo (symbol)\n    (format t &quot;Baz ~A~%&quot; symbol))\n  ;; this will print &quot;Baz BAR&quot; in the example\n</code></pre>\nWith the cursor <i>anywhere</i> within that function definition I type C-c C-c, go to the debugger and restart it. It works now.<p>My source file and my Lisp image are both synchronized.<p>In the case of changing a variable. Say I&#x27;m somewhere deep in some code and this tries to run:<p><pre><code>  ;; in context x = 0\n  (&#x2F; y x)\n</code></pre>\nI&#x27;m dropped into the debugger. I <i>know</i> x was supposed to have a minimum of 1. I can do a couple things:<p>1. Examine the back trace in the debugger to see if I can locate where x got an incorrect value (maybe it was the line above, maybe 10 functions earlier). I make a note of what to fix, maybe I fix it now.<p>2. Change x to its proper minimum value and resume.<p>If I was able to trace how x got a wrong value, it&#x27;s fixed already. If not, I&#x27;ll have to explore more. But I don&#x27;t have to restart <i>way</i> earlier, I can just restart at this point (assuming nothing else was broken by x having the wrong value here) and still get the result of my program (assuming x being wrong didn&#x27;t break a lot of other things). Or I can quit back to the REPL and start exploring the problem.')