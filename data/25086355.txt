Item(by='zcesur', descendants=None, kids=[25087106, 25087296], score=None, time=1605295666, title=None, item_type='comment', url=None, parent=25084848, text='Say you&#x27;d like to have an interface for things that are &#x27;mappable&#x27;. For example, for arrays we could write:<p><pre><code>    interface Mappable&lt;Array&gt; {\n      map&lt;A, B&gt;(f: (a: A) =&gt; B, fa: Array&lt;A&gt;): Array&lt;B&gt;\n    }\n</code></pre>\nLikewise, for `Promise`s we could write:<p><pre><code>    interface Mappable&lt;Promise&gt; {\n      map&lt;A, B&gt;(f: (a: A) =&gt; B, fa: Promise&lt;A&gt;): Promise&lt;B&gt;\n    }\n</code></pre>\nBut in order to generalize this interface to an arbitrary type constructor such that `F: * -&gt; *`, we would need to write<p><pre><code>    interface Mappable&lt;F&gt; {\n      map&lt;A, B&gt;(f: (a: A) =&gt; B, fa: ?): ?\n    }\n</code></pre>\nwhich is not possible in TypeScript since it does not support higher-kinded types or type parameters that take type parameters or parametrized modules.')