Item(by='jrochkind1', descendants=None, kids=[25893187], score=None, time=1611424037, title=None, item_type='comment', url=None, parent=25883025, text='I was thinking of ruby as you write this... it&#x27;s not quite true that in ruby &quot;referencing a field on any object... is just sugar for a call to the getter&#x2F;setter.&quot;<p>It&#x27;s actually true that ruby makes it <i>impossible</i> to directly access fields in objects other than `self` (ie `this`).  Seriously, it&#x27;s not possible ruby takes away the ability to do so, thereby making it not even a <i>choice</i> anymore, you <i>have</i> to create a getter&#x2F;setter, it&#x27;s the only option. There is no sugar, there is simply a prohibition on  direct access to iVars in other objects, period.<p>What might make it look like &quot;sugar&quot; is that parentheses method calls are optional in ruby -- `obj.foo` is just another syntax for `obj.foo()` Whether or not it&#x27;s a getter, any method at all, nothing special for getter&#x2F;setter here. That&#x27;s literally the only thing going on here that makes you think there is &quot;sugar&quot;, ruby syntax having parentheses be optional in method calls.<p>And additionally ruby gives you a shortcut &quot;macro&quot; to defining the getter&#x2F;setter, `attr_accessor :foo` inside a class body just automatically defines the conventional getter and setter for you. You still do need to define them though, again no &quot;sugar&quot;.<p>So ruby actually comes down solidly on the side of &quot;yes, <i>always</i> use getters&#x2F;setters&quot;... in some ways this is what you are complaining about, people <i>always</i> doing it, right?<p>But it turns out differently and not annoying anyone, I think, because it was <i>planned</i> for by the language designers in the first place, both by making it mandatory (eliminating it as a point of debate or as something a programmer will spend any time ever considering when implmeenting), and by providing devices to make it convenient.<p>I think the choice to make parentheses optional in method calls actually goes along with the choice to forbid direct access to fields in other objects; both because there is now no need to syntactically distinguish between the two, and because it makes it less annoying to forbid. It also causes all sorts of other complexity in writing parsers for ruby though...')