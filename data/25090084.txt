Item(by='existencebox', descendants=None, kids=None, score=None, time=1605324638, title=None, item_type='comment', url=None, parent=25082072, text='Hah, feel no regret about the potentially ranty tone, frankly, I often prefer to get feedback from people who are willing&#x2F;able to rant, since they&#x27;re both willing to be candid AND clearly have some interesting thoughts built up.<p>I&#x27;m honestly appreciative that you&#x27;d give this long a response, I&#x27;ve unironically been sharing this with peers internally for what an interesting spread of feedback it gives.  I have to give a similar disclaimer of &quot;no promises&quot; BUT...<p>1. 100% agreed with you.  We&#x27;re currently working through this discussion for ServiceBus, actually, it&#x27;s VERY apt you mention this now, as we&#x27;ve been working with the architects and other-language SDK owners to find proper semantic unification between Python&#x27;s inclination for more fine-grained strongly typed errors, vs. e.g. dotnet&#x27;s inclination to have unified exception types and &quot;code&quot;&#x2F;&quot;reason&quot; fields.  Can only speak for the data plane SDKs here (vs. -mgmt, that&#x27;s a different team) but our architects have within the last 2 days expressed their alignment with the pattern you&#x27;re requesting.  (We explicitly as a guideline want users to not have to rely on any ad-hoc string parsing to distinguish exceptions)  We&#x27;ve also been attempting (to lead into #2) produce both better samples EXPLICITLY to show common failure modes and &quot;best practice defensive coding&quot;, but also conceptual guidelines (e.g. here [0]).<p>2. Preaching to the choir.  Samples are a First Class Entity for our Track2 APIs (complete with validation, smoke tests, etc), used not only as inlined samples in docstrings and refdocs, but as long-form examples of E2E scenarios as you suggest. (and for more esoteric subject matter that may not be covered in primary long-form docs)<p>3. I&#x27;m not 100% sure I&#x27;m thinking of the right component when you say Storage, do you mean e.g. `azure-storage-blob`? #4 implies you may mean more of the block storage&#x2F;VM interconnect logic, and unfortunately I can&#x27;t speak with deep familiarity surrounding that, other than to note that the ARM template parameters for configuring this hasn&#x27;t always been &quot;great&quot; (e.g. I think I recall there being a need to format a disk as a separate step? not sure if this is the sort of thing you&#x27;re referring to, half thinking out loud, but that&#x27;s more distant from my area)  Would be curious to know specifically which transition was painful though&#x2F;what kept changing, since it is a &quot;core awareness&quot; going forward that migration pain is a Major Friction Point for users (&quot;well duh&quot; says every dev ever) so I&#x27;m just curious to see if your specific callout is something we&#x27;d have been aware of&#x2F;can impact.<p>4. See the above re core surface area of &quot;working with disk&quot;; and to your later point some of this may be more service-side than SDK, but your mention about attach&#x2F;detach disks is salient and something I can perhaps throw a shout at someone about.<p>5. To make sure I&#x27;ve understood, you&#x27;re serializing like, metadata&#x2F;a record of the long-running operation and doing it yourself?  The track 2 APIs use something called a Long Running Operation poller internally to facilitate this sort of operation; now this may not solve your scenario depending on how your control flow gets passed off or not&#x2F;your need for serialization, so this may not actually change anything tractably for you, but mentioning on the side in case.   \nCurious re: what you mean by &quot;is a bit clunky&quot; though more precisely as well.  And in terms of raw response consistency, yeah, that&#x27;s not surprising, that&#x27;s not one of the things I think we pin in backcompat (or even feasibly could, to your point, BUT we may be able to take more into account if there&#x27;s any way to offer a continuous experience if this changes and folks were relying on it.  Regardless it&#x27;s something for me to keep in mind when doing design discussions with the service teams)<p>Glad the library fragmentation is well received.  I&#x27;ll candidly admit I was worried about that (was a user, not a maintainer when it happened, and did the normal grumpy-engineer thing of &quot;they moved my cheese&quot;) but it does seem to have worked out nicely and given some good modularity.<p>Finally; Two cents, this was ten cents!  I feel like I owe you big time for having given such a well-thought-out response.  Thank you; sincerely, you didn&#x27;t have to do this and have done us a big favor.<p>Absolutely get where you&#x27;re coming from re: SDK being the public face, and that&#x27;s what leads me to be eager to try and improve what we can. (And selfishly gotta make sure I can feel proud of the code that has my name attached to it :P ) I cannot tell you how much Reliability resonates with me.  If nothing else, I can assure you this dev is in your corner; hardening, reliability, stability are the mantras within my purview. (signed, an-artist-formerly-known-as-SDET.)<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;Azure&#x2F;azure-sdk-for-python&#x2F;tree&#x2F;master&#x2F;sdk&#x2F;servicebus&#x2F;azure-servicebus#common-exceptions" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Azure&#x2F;azure-sdk-for-python&#x2F;tree&#x2F;master&#x2F;sd...</a>')