Item(by='eggy', descendants=None, kids=None, score=None, time=1608391445, title=None, item_type='comment', url=None, parent=25464627, text='I found J in 2011 or early 2012. I fell in love with it due to the terse, expressive notation set against pages of typical programming code from other languages. I have since moved to Dyalog APL. Roger Hui of APL&#x2F;J fame, now contributes to Dyalog APL, so a lot of the novel ideas in J have made their way back into APL (Dyalog and NARS).<p>I read my first book on neural networks in 1988, and I got the matrix math and the implementation of them, but this year I was able to really grasp them in a more basic way with an implementation of Convolutional Neural Network in APL in only 10 functions&#x2F;lines of code [1]. Amazing! What&#x27;s even more surprising is that they manually translated it to SAC (Single Assignment C), and it is faster than TensorFlow. The interpreter is not bad either - 20x less time to init than TF, but 20x and 5x slower to train and test respectively. Compilers for APL are being worked on to make it work without the manual translation. To me the similarity to the math formulas, being able to view and work through the code in front of me in one view, is priceless. I also enjoy it, and I believe (no evidence here) that it is exercising my mind on the problem more directly than winding my mind around pages of Python&#x2F;C or other PLs. Certainly a lot of the original ideas of APL and current successes of things like Pandas and NumPy owe a lot to the array languages in the APL family.<p>There&#x27;s an example of an Extreme Learning Machine in J, but I don&#x27;t have the link at the moment. I go back and forth with J and APL, and I am currently learning Rust. Somebody coded APL in Rust, but it has not been fleshed out. I find myself attacking problems in J&#x2F;APL on my desktop, and sometimes that&#x27;s it, I don&#x27;t require another solution, or if I do I recreate it in C&#x2F;Python or now Rust.<p>Aaron Hsu does amazing work in APL. He is&#x2F;was a former Schemer [2].<p>A taste of J or APL with an average function implementation:<p>J: avg=: +&#x2F;%#<p>APL: avg←+&#x2F;÷≢<p>They both map&#x2F;apply the &#x27;+&#x27; operator over a vector&#x2F;array, then divide the sum by the tally or count of terms given.<p>Great tribute to Ken Iverson!<p>10 line CNN implemented in APL (the stencil operator ⌺is great! It allows you to move a window over your array):<p>blog←{⍺×⍵×1-⍵}<p>backbias←{+&#x2F;,⍵}<p>logistic←{÷1+<i>-⍵}<p>maxpos←{(,⍵)⍳⌈&#x2F;,⍵}<p>backavgpool←{2⌿2&#x2F;⍵÷4}⍤2<p>meansqerr←{÷∘2+&#x2F;,(⍺-⍵)</i>2}<p>avgpool←{÷∘4{+&#x2F;,⍵}⌺(22⍴2)⍤2⊢⍵}<p>conv←{s←1+(⍴⍵)-⍴⍺⋄⊃+&#x2F;,⍺×(⍳⍴⍺){s↑⍺↓⍵} ̈⊂⍵}<p>backin←{(dwin)←⍵⋄⊃+&#x2F;,w{(⍴in)↑(-⍵+⍴d)↑⍺×d} ̈⍳⍴w}<p>multiconv←{(awsbs)←⍵⋄bs{⍺+⍵conva}⍤(0,(⍴⍴a))⊢ws}<p>[1]  <a href="https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;10.1145&#x2F;3315454.3329960" rel="nofollow">https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;10.1145&#x2F;3315454.3329960</a> (PDF link is on page)<p>[2]  <a href="https:&#x2F;&#x2F;aplwiki.com&#x2F;wiki&#x2F;Aaron_Hsu" rel="nofollow">https:&#x2F;&#x2F;aplwiki.com&#x2F;wiki&#x2F;Aaron_Hsu</a>')