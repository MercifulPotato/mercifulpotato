Item(by='Twisol', descendants=None, kids=None, score=None, time=1610763612, title=None, item_type='comment', url=None, parent=25799071, text='To be fair, Java has always supported a particular flavor of sum types founded on subtyping: use an abstract class with a private constructor as a base, add nested static final subclasses for the variants, and decide whether to use instanceof or the Visitor pattern to dispatch on each variant. (The Visitor approach corresponds to a certain isomorphism -- the sum type `A + B` is equivalent to `forall T. (A -&gt; T, B -&gt; T) -&gt; T`, where the pair of handlers `(A -&gt; T, B -&gt; T)` is the titular visitor.)<p>That JEP elaborates on the same ideas (notably using `instanceof` instead), as the linked JEP explains, but the motivation for sealed classes extends to further harmony with subtyping. The major item seems, to me, to be allowing interfaces to be a supertype. A minor but distinctive item is that the sum type&#x27;s variants can be defined at (some) distance from the base type, rather than all being defined in a single breath.<p>The problem is, even though you could always express sum types in Java, it&#x27;s verbose, unpleasant, and above all &quot;clever&quot; in a way unnecessary in other languages. I think this JEP helps somewhat -- the private constructor trick in particular goes away -- but it doesn&#x27;t really help with <i>clients</i> of your sum type. Pattern matching is still yet to come, and if you want a Visitor, you still need to write a Visitor.<p>To the grandparent&#x27;s point, this JEP isn&#x27;t enough to provide a coherent alternative to checked exceptions or other kinds of structured control flow.')