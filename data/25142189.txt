Item(by='CaptArmchair', descendants=None, kids=None, score=None, time=1605732161, title=None, item_type='comment', url=None, parent=25141291, text='Why? Because it makes the document readable... for machines.<p>You may think about browsers, but if your HTML is a mess, devices that translate content into Braille or read it as audio, won&#x27;t be able to make sense of it.<p>That might not sound like a problem, but this might very well cause legal issues in some business cases (e.g. people with an impairment can&#x27;t access a website of a public administration? That might be a civil rights violation in some countries).<p>Another reason is because it makes it easier to extract data and information from HTML documents: search engines and search spiders. If your HTML is a mess, you&#x27;re going to take a SEO hit.<p>That&#x27;s just two concrete concerns that come to my mind right now.<p>HTML and CSS today are mostly used for presentational &amp; interactive purposes: push UI components in there right place, with the desired shapes, colours, fonts, animations and so on, in order to build complex interactive applications.<p>But HTML wasn&#x27;t originally conceived for that purpose. The word &quot;markup&quot; says all you need to know. The entire purpose of a HTML tag was simply to describe the structure of a text document: this bit here is the header, that bit is a paragraph, the next bit contains an image, and here are a few meta tags with extra information about the document you&#x27;re reading.<p>However, as markets drove demand for more and more interactivity - applications in browsers rather then just static documents - browser technologies including HTML evolved beyond the original scope of &quot;marking up text documents&quot;.  That original design foundation is still there: marking the content structure of a document through HTML tags, though.<p>The problem is that developers want to cater to demands to build these nice fancy UI experiences that need to be rendered perfectly on various devices. And so, the original intent of HTML goes right out of the window. What&#x27;s left is an unreadable mess of spaghetti HTML, mangled DOM&#x27;s with non-sensical auto-generated CSS classes to which one needs compilers and transpilers and entire toolchains as you write your CSS in an entirely abstracted fashion.<p>When you&#x27;re building a complex interactive application for the browser. That&#x27;s just the current state of affairs one will have to accept. Presently, you&#x27;re still, in essence, using tools that originally never were designed for that purpose.<p>However, if you&#x27;re just going to build a simple blog or a site with static content, it pays dividends to think about the structure of your content, consider the semantics of your HTML and the CSS classes you&#x27;re going to use. Using pure CSS, you could then easily write lean, performant and understandable stylesheets that don&#x27;t need to be processed by complex toolchains. And you certainly wouldn&#x27;t need complex frameworks to build a website.<p>Of course, YMMV, and so there&#x27;s definitely a market for Tailwind and their ilk. I do think that developers should learn about &quot;golden hammer&quot; syndrome early in their career: while frameworks make your life as a developer easier, they aren&#x27;t the best choice in all use cases.<p>From the perspective of a &quot;body shopping&quot; business, it makes sense to standardize the process as much as possible and fall back to a few well known tools and practices with repeatable - and therefore measurable - outcomes. In the same vain, the big trade off here is providing any form sanity&#x2F;clarity when someone hits the &quot;browse source&quot; button in there browser.')