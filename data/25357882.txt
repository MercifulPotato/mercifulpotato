Item(by='RobertKerans', descendants=None, kids=None, score=None, time=1607517462, title=None, item_type='comment', url=None, parent=25353890, text='&gt; Yarn and npm I&#x27;m familiar with, though I don&#x27;t know why to prefer one over the other. Yarn&#x27;s newer, I suppose that&#x27;s pro or con depending who you talk to<p>So Yarn was created to deal with issues in NPM (amongst other things: speed, problems with package duplication, no lockfile). AFAICS from watching Ryan Dahl talking about the process of his developing Node, NPM was kind of an afterthought, so it has some flaws that are difficult to fix because they&#x27;re so ingrained into how Node works.<p>So Yarn [v1] has a very similar API, and uses the NPM registry, and works in a very similar way (dependencies go in node_modules, etc etc). Most of the time, when you see the choice, the author of the documentation is talking about NPM vs. Yarn v1.<p>Competition from Yarn [v1] was a generally good thing despite the slight confusion it causes, because what it did was force NPM to update to include some of Yarn&#x27;s better features, in an attempt to gain feature parity.<p>The existence of Yarn <i>v2</i> is also now [imo] important because of its two main features that differentiate it from NPM. Its API is basically the same as NPM, but the way it works is not, and yes, it&#x27;s confusing. It works (and works very well), but I think its core value (and the reason why IMO it should be pushed alongside NPM <i>despite</i> the confusion that is likely to cause) is that it&#x27;s acting as a testbed for features that are probably useful to the JS ecosystem. And the wider the usage, the more those features can be battle tested:<p>- it has full support for monorepos (storing all code for all associated projects in a single repo) which can make development easier in what would seem to be a large set of contexts.<p>- it allows a user to dispense with node_modules through a mechanism called plug and play. Dependency management is much better than NPM, issues with dependencies are easier to locate, and unless there are new deps added, there is no install step after the initial one (I can push my code to a repo, someone can clone the repo and just start the application immediately). This IME has fairly significant DX benefits, as well as making CI tasks take significantly less time and resource.')