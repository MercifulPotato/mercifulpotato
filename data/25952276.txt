Item(by='gengkev', descendants=None, kids=None, score=None, time=1611883036, title=None, item_type='comment', url=None, parent=25937695, text='Conversely, I think the beauty is that they _are_ the same as top-level functions, just in a special namespace. This means that you can call &quot;instance methods&quot; directly from a class, i.e. the following are equivalent:<p><pre><code>    (1) + 2\n    (1).__add__(2)\n    int.__add__(1, 2)\n</code></pre>\nThis comports with the &quot;explicit is better than implicit&quot; policy in Python. The only &quot;magic&quot; part is when dot-notation is used to call an instance method, which is just syntactic sugar. Another example of this philosophy is that operator overloading is simply reduced to implementing a method with a specific name.<p>I think a &quot;magic&quot; this keyword can create a lot of nasty edge cases that can be difficult to reason about; the way &quot;this&quot; is used in JavaScript is notoriously complex in ways that it might not be in a statically typed language like C++. What should &quot;this&quot; evaluate to outside of an instance method? What about in a class definition inside an instance method? What if an instance method is called directly instead of on an instance? All of these situations require making their own &quot;rules&quot;, whereas in Python the correct answers can be easily reasoned about by starting from first principles.')