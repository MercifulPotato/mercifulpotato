Item(by='jlokier', descendants=None, kids=[24692346], score=None, time=1601926096, title=None, item_type='comment', url=None, parent=24686477, text='&gt; I don&#x27;t want to use a deprecated API call, timeSetEvent.<p>That&#x27;s not what mehrdadn is saying to use.  The phrase is &quot;events <i>or</i> timers&quot;, not &quot;timer events&quot;.<p>gambiting describes this scenario:<p>The hardware (network) <i>does</i> interrupt the CPU and supplies an incoming packet to the receiver thread, which does not use a timer.<p>Then the receiver thread wants to send it to a worker thread.<p>It sounds like gambiting&#x27;s implementation has the worker threads <i>polling</i> a software queue using a sleep-based timer, to pick up work from the receiver thread.<p>Unless there&#x27;s something not being said in that picture, the receiver should be sending an event to a worker thread to wake the worker instantaneously, rather than writing to memory and letting the workers get around to polling it in their own sweet, timer-dependent, <i>unnecessarily slow</i> time.<p>Given that it&#x27;s described as audio data which must be processed with low latency, it seems strange to insert an <i>avoidable extra 1ms delay</i> into the processing time...<p>This is kind of the point of events (and in windows, messages; <i>not</i> timers or timer-events).  So that one thread can wake another thread immediately.<p>The whole &quot;if your hardware supports it&quot; reply seems irrelevant to the scenario gambiting has described, as the only relevant hardware sounds like <i>network</i> hardware.  Either that&#x27;s interrupting on packet arrival or it isn&#x27;t, but either way, a sleep(1) loop in the worker threads won&#x27;t make packet handling faster, and is almost certainly making the responses slower than they need to be, no matter which version of Windows and which timer rate.(+)<p>(+) (Except in some exotic multi-core setups, and it doesn&#x27;t sound like that applies here).')