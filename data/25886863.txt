Item(by='chme', descendants=None, kids=None, score=None, time=1611442100, title=None, item_type='comment', url=None, parent=25885699, text='&quot;Low-level&quot; is, like all areas of computer sciences, pretty huge and diverse so your experience will depend on what machine you are programming for.<p>FPGAs are fun, because you can design logic circuits and hardware, but with some exception you will have to deal with huge proprietary toolchains and closed source &#x27;compilers&#x27;. It offers a pretty unique way to solve problems, which is fun to do. Like playing with a tiny but powerful electrical circuit toolbox.<p>With micro controllers you might have to deal with proprietary compilers, libraries and IDEs but to a lesser amount than with FPGAs. Still fun to get something to blink, move or a display to work.<p>If you work on micro processors, then you could work on bootloaders, where you more or less concern yourself just to get something working enough to boot another system, or with OS kernels, where you work in a bigger system infrastructure in order to allow as much of the hardware as possible to be available for the user-land by writing drivers. Its challenging \nbecause you work on a small gear in the middle of a huge clockwork, that is mostly not written by yourself, and you will struggle to understand.<p>There are also many special processors you could implement stuff for like DSPs. There you will feel the language limitations but they are very interesting and odd beasts to work with.<p>Low-Level is mostly about reading hardware and often software documentation (and finding errors in those or the hardware itself) to figure out how to do certain things, and then if something doesn&#x27;t work, printing out registers to figure out which bit is wrong. Or having to use oscilloscopes or logic analyzers to debug. This certainly isn&#x27;t everyones cup of tea, but still very rewarding when you actually start to understand how the pieces fit together and things work.')