Item(by='gutensearch', descendants=None, kids=[25890612, 25890723], score=None, time=1611475739, title=None, item_type='comment', url=None, parent=25890186, text='That was definitely part of the original plan! I spotted two other attempts [1] [2] here using BERT and ElasticSearch respectively.<p>The main performance issue with the Postgres FTS approach (possibly also the others?) is ranking. Matching results uses the index, but ts_rank cannot.<p>Most of the time, few results are returned and the front end gets its answer in ~300ms including formatting the text for the front end (~20ms without).<p>However, a reasonably common sentence will return tens or hundreds of thousands of rows, which takes a minute or more to get ranked. In production, this could be worked around by tracking and caching such queries if they are common enough.<p>I&#x27;d love to hear from anyone experienced with the other options (Lucene, Solr, ElasticSearch, etc.) whether and how they get around this.<p>[1] <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=19095963" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=19095963</a><p>[2] <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=6562126" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=6562126</a> (the link does not load for me)')