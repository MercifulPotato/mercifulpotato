Item(by='raphlinus', descendants=None, kids=None, score=None, time=1609131387, title=None, item_type='comment', url=None, parent=25556169, text='I&#x27;ll say a little more, as you&#x27;ve obviously put some time into trying to understand the code. You&#x27;re generally on the right track.<p>The curve family is basically the same as the 4-parameter spline curve in my thesis when bias &lt;= 1.0, except the parametrization is different. The magic (the &quot;seemingly bizarre function&quot;) happens when bias &gt; 1.0, in which case it describes a curve that&#x27;s inspired by an elastica as the tension goes up, though the details are a bit different. Also note that when both bias values are 1.0, the curve is an Euler spiral, which I consider especially beautiful and suitable for interactive design.<p>Regarding solving the curve equations, yes, it has to do some solving in order to get the curve into place. It doesn&#x27;t have to be a full differential equation solver, though, fundamentally it&#x27;s a doubly nested integral - the expression of curvature as a function of arclength is a Ces√†ro equation, and integrating that once gives a Whewell equation.<p>G2 continuity is enforced by the spline solver, particularly `iterate` (with some help from `adjust_tensions` for cases where an auto point is opposite on off-curve point). The current version of that solver is a bit hacky and not 100% robust. Basically it computes the curvature error at each on-curve point, then pushes the tangent at that point in the direction of reducing the error.<p>As I said, I&#x27;ll do a full explanation of the math before long. Hopefully that will address a lot of your questions.')