Item(by='the_duke', descendants=None, kids=[25752051, 25756105], score=None, time=1610478109, title=None, item_type='comment', url=None, parent=25734627, text='The juicy part of the paper:<p>&gt; The main idea of an architecture-less database system is that it is composed of a single generic type of component where multiple instances of those components “act together” in an optimal manner on a per-query basis. To instrument generic components at run-time and coordinate the overall DBMS execution, each component consumes two streams: an event and a data stream. While the event stream encodes the operations to be executed, the data stream shuffles the state required by these events to the executing component.Through this instrumentation of generic components by event and data streams, a component can act as a query optimizer at one moment for one query but for the next as a worker executing a filter or join operator.<p>Doesn&#x27;t sound too different from current distributed DBMS, which already specialize query execution and distribute workload between cores&#x2F;nodes in a similar manner, but taken to the next level to more easily enable things like different data persistence models or FPGA integration.<p>Seems challenging to implement without losing significant performance to the abstraction layer.')