Item(by='taeric', descendants=None, kids=None, score=None, time=1609438025, title=None, item_type='comment', url=None, parent=25594817, text='I&#x27;m honestly not sure what my conclusion is, yet.  :)<p>For the Adventure example, I think I agree with you.  It did not do a great job conveying the program to me as a blank slate.  My suspicion is that I need more familiarities with game programs, though.  That is, it is more than just c idioms that need to be understood.  One could argue that that should have been a starting section of the program.  (I&#x27;ll actually have to look at it again.  Don&#x27;t have it with me, and been way too long.)<p>I think my conclusion is that I don&#x27;t know how to read full programs that well.  I&#x27;m not sure anyone does.  :(<p>Your links on top down versus bottom up, I agree, are spot on.  Such that I am constantly trying to get people to think of the whole more in what we do at work.  To the point where I find myself sneaking in global variables if only to put an anchor to places it is vital to remember the outside picture.<p>But, it can&#x27;t be argued against that bottom up is far easier to read in pieces.  Such that, with most tools, it is not possible to have a piece that is cross cutting to many other pieces.  Literate, it seems, makes that possible.  But only by making it so that I can justify what are otherwise bad practices.<p>This is highlighted by the index that cweb makes.  The identifiers of variables are presented as a whole.  Such that it is expected of you have to modify a value in a block, you can easily reference where it was defined and where else it is updated.  By and large, modern styles are that you shouldn&#x27;t have to reference this, as it should be in the same small function.<p>But this gets back to the wholistic critique.  By not having a whole state that you can reference, you wind up with an API that is so large you can&#x27;t remember it well, either.  :(')