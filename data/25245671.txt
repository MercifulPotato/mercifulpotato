Item(by='ben509', descendants=None, kids=[25246135], score=None, time=1606664025, title=None, item_type='comment', url=None, parent=25244429, text='All modern software applications have an undo option. Windows Explorer has had a recycle bin since the &#x27;90s, the MacOS Finder has had a trash can since the &#x27;80s, and various Unix equivalents have the same. Those are interesting because they&#x27;ve had to put a lot of work into solving this seemingly simple problem.<p>I think file systems run into technical and psychological issues.<p>The major obvious technical issue is simply running out of space, and how you deal with that informs many other aspects of such a system. The other issue is how the user figures out what action they need to undo. High level applications have an integrated interface, so the user is directly issuing commands into the application&#x27;s event loop, and the undo feature is also integrated into that event loop.<p>But you don&#x27;t directly make calls to the filesystem; deletions or updates are always issued by a process acting on your behalf. Many processes are generating a ton of temporary data, so while these actions shouldn&#x27;t be undoable, there&#x27;s no general way for the filesystem to know this. A user attempting to undo an action would have to sift through a flood of irrelevant history.<p>The first psychological issue is the user&#x27;s intent. Software applications tend to make this a two-step process: you make revocable changes, then when you hit &quot;save&quot; your actions become irrevocable. You move a file to the trash, and you can take it up, but when you empty trash it&#x27;s irrevocable.<p>For a filesystem, again, because applications are acting on their behalf, this connection is largely lost. There&#x27;s no clear &quot;save point&quot; where changes should be lost, so maybe you could add a &quot;force&quot; flag to make changes permanent. But if you start adding a &quot;force&quot; flag to actions, you&#x27;ll change user behavior; if they have to force actions to make them permanent, they may start to do that routinely.<p>And there&#x27;s a moral hazard produced by insuring that actions are revocable; if users get used to having an &quot;undo,&quot; they will naturally begin to rely on it. If the system has to automatically make changes irrevocable (running low on disk space), then you&#x27;ll get situations where users are screwed because they assumed they&#x27;d have undo to fall back on.<p>And, of course, users can be screwed when they thought they had deleted (or changed) something and it wasn&#x27;t. This is already something forensics experts can do, but a generic undo feature lowers that bar to the nosey middle manager.')