Item(by='Geminidog', descendants=None, kids=[25556440], score=None, time=1609120626, title=None, item_type='comment', url=None, parent=25555845, text='Except I never dismissed this point. The problem with your post is that you assume I categorize design as something useless. I have not. Obviously there are tons and tons of things within the universe where the only possible solution is design. I am not arguing against this.<p>I am talking about a very specific aspect of the usage of &quot;design&quot; within software. I am specifically complaining about the endless iterations of exposes on software design patterns and architecture. The trends where history continuously repeats itself with FP becoming popular OOP becoming more popular than FP becoming popular again. What about the whole microservices&#x2F;monoliths argument where monoliths started out more popular than microservices became popular and now monoliths are coming back into vogue again? Endless loops where nobody knows what is the optimal solution for specific contexts.<p>These are all methods of software organization AND my point is that THIS specific aspect of design  is ripe for formalization especially with the endless deluge of metaphor drenched pointless exposes on &quot;design&quot; that are inundating the HN front page feed. It&#x27;s obviously an endless circle of history repeating itself. I am proposing a way to break the loop for a specific aspect of software by pointing out the distinction between &quot;design&quot; and &quot;formal theory.&quot; We all know the loop exists because people confuse the two concepts and fail to actually even know what to do to optimize something.<p>System architects are artisans not scientists and they will as a result suffer from the exact same pointless shifts in artistic styles&#x2F;trends decade after decade and year after year as their artisan peers do. Totally ok for styles to shift, but our goal in software is to converge at an optimum as well and that&#x27;s not currently happening in terms of software patterns and design architecture.<p>The path out of this limbo is to definitively identify the method for optimization formally, not add to the teeming millions of articles talking about software design metaphors.')