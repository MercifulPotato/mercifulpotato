Item(by='matt_oriordan', descendants=None, kids=[24666690], score=None, time=1601666995, title=None, item_type='comment', url=None, parent=24658132, text='This looks like a naive implementation of adding ordering keys on one side, and waiting until all messages arrive on the other in order, without improving the underlying delivery transport to support ordering.<p>From what I can tell, the publisher is responsible for now maintaining arbitrary ordering IDs and passing this in the publish method, see <a href="https:&#x2F;&#x2F;github.com&#x2F;googleapis&#x2F;nodejs-pubsub&#x2F;blob&#x2F;master&#x2F;samples&#x2F;publishOrderedMessage.js#L65-L82" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;googleapis&#x2F;nodejs-pubsub&#x2F;blob&#x2F;master&#x2F;samp...</a>.<p>Given the documentation now clearly states &quot;Publishing messages with ordering keys might increase latency&quot;, I think that what Google is doing is effectively doing is putting lipstick on their service that does not support ordering and instead offering a message reconstruction capability on the subscriber end.<p>This approach, whilst it may work a lot of the time, is pretty flawed given one failed published message could cause the entire stream to stall indefinitely. And given Google Pub&#x2F;Sub does not support idempotency,  and does not support exactly-once delivery, they recommend &quot;In general, accommodating more-than-once delivery requires your subscriber to be idempotent when processing messages.&quot;<p>Google, I am afraid whilst it&#x27;s nice to welcome you to the exactly-once semantic party, I think you may need to go back to the drawing board and bake ordering and idempotency into the transport layer, in the same way Kafka and Ably do so that true ordering is supported.<p>Disclaimed: I am the co-founder of ably.com, a far edge enterprise messaging solution, with exactly-once semantics and real ordering :)')