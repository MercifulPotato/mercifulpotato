Item(by='jpgvm', descendants=None, kids=None, score=None, time=1602480808, title=None, item_type='comment', url=None, parent=24751185, text='I think Kafka inherits too much of this &quot;heinously complex&quot; reputation from Zookeeper (which itself is also not heinously complex, just some people have an allergy to either JVM, ZAB or both).<p>Internally it&#x27;s one of the simpler pieces of software I rely on. It&#x27;s base API is small and effective and works &quot;as you would expect&quot;. Replication uses the same fetch API consumers use, because why wouldn&#x27;t it? Controller election uses tried and true ZK patterns, it&#x27;s log storage is pretty simple, even the compaction logic is understandable.<p>To be fair I have spent a lot of time with it, patched it and it&#x27;s pretty much the core of my toolbox but I don&#x27;t think this is a controversial opinion among data infrastructure engineers. Compared to other software we work with Kafka is some of the simpler, dumber stuff which is refreshing.<p>On the other hand I really want to learn Pulsar but it definitely is more complex, my hope is that complexity pays off with big architectural advantages but we will see. :)<p>On the topic of what to use it for chances are if you don&#x27;t know what it&#x27;s for you probably don&#x27;t have the problems it&#x27;s meant to solve. I don&#x27;t mean that in a derogatory way just that it&#x27;s designed for large distributed architectures where many interested parties want to consume the same data. Or where a small number of very high throughput applications need a buffered transport that can take the load and spill to disk etc. I.e it is inherently niche, most companies don&#x27;t have these problems.')