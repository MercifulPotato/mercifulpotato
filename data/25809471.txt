Item(by='permille42', descendants=None, kids=[25809761], score=None, time=1610876869, title=None, item_type='comment', url=None, parent=25808865, text='Interfaces don&#x27;t allow polymorphism, because they don&#x27;t allow you to change the underlying data. The main problem is that you can&#x27;t ( or at least aren&#x27;t supposed to ) use any pointers and especially not pointers that point to different data types in different situations.<p>This sort of behavior is core to polymorphism. It can be done in three ways in Golang ( and probably more too... ):<p>1. Use serialized messages in channels to do all messages to objects ( disgusting imo... ) It would though at least let one emulate the behavior of message passing &#x2F; routing languages ( pursuant to original visions of smalltalk etc )<p>2. Use &quot;unsafe pointers&quot; and just do everything the pay you would in C, deliberately going against the way Golang authors want you to do things.<p>3. Use reflection and messy if&#x2F;else in combination with code-generation at compile time. ( this is what a bunch of Golang DI systems do :( )<p>I don&#x27;t think you understand polymorphism very well.<p>I don&#x27;t give a shit what people are calling DI frameworks these days. I also don&#x27;t much care for things that simply instantiate a bunch of objects and tie them together. That is only a very elementary variety of metaprogramming.<p>Essentially, what I am claiming is the Golang is a bad language for metaprogramming, and that in other languages the DI systems they have have become a type of metaprogramming that I think is respectable.')