Item(by='globular-toast', descendants=None, kids=[25622004, 25635471, 25621626], score=None, time=1609672464, title=None, item_type='comment', url=None, parent=25620892, text='Why not just learn a Lisp yourself? You&#x27;ll get far more out of it than watching a video. The old adage is still true: learning a Lisp makes you a better programmer.<p>Your choices are:<p>* Common Lisp: install emacs, SBCL and set up SLIME,<p>* Clojure: install emacs, Clojure and set up CIDER,<p>* Scheme: install emacs, racket (or guile) and set up Geiser,<p>* Emacs Lisp: install emacs.<p>You&#x27;ll notice that they all involve emacs. There are probably other ways but you want something that is quite tightly coupled, which all of those emacs packages provide. REPL driven programming is better served by an editor like emacs rather than vim. You want something where you can quickly write&#x2F;edit code in one buffer and send it to the REPL with a couple of keystrokes. The lower the &quot;cost&quot; of this operation the better; it should be as easy as typing (as it becomes that frequent of an operation).<p>To help you choose: Common Lisp and Clojure are the most practical. They are both general-purpose languages with a wealth of libraries available. Common Lisp, as the older language, has far more literature available including some of the best programming books ever written. Scheme is the most beautiful language and has one of the best textbooks ever made: <i>Structure and Interpretation of Computer Programs</i> (SICP). Emacs Lisp is the most fun, practical but also the most quirky. Luckily, learning any Lisp will put you in a better position to learn any other Lisp.<p>Emacs Lisp is fun because it presents the most exciting part of REPL based programming: hacking a live, running system. Most of the time you run a lisp instance just for the purpose of development, but if your program is working and doing something, then why not hack on it while it&#x27;s running? There&#x27;s no difference between running a REPL in a &quot;development&quot; instance and a live, production instance. When you hack on emacs you are doing just that: hacking a live, running instance. It&#x27;s not often you get to use a tool to hack on the tool itself while it&#x27;s running.<p>Whatever you choose, good luck on your journey. I truly envy those who have yet to experience the beauty of Lisp programming. It changes you forever.')