Item(by='valenterry', descendants=None, kids=None, score=None, time=1603900498, title=None, item_type='comment', url=None, parent=24916909, text='If you take that idea&#x2F;ideal to the very logical end, then you can only do system tests &#x2F; acceptance tests (however you want to call it). Your tests must only be able to do what end-users do - everything else would be relying on implementation details. No unit tests at all!<p>...unless we take a more compositional approach and define our application to consist of many &quot;parts&quot; each of which has a public API and an implementation. Well, in that case I would argue that each function can be considered as such a part, having a public API (the definition of its inputs and outputs) and an implementation that can be changed while keeping the public API stable.<p>Over the time I came reached a conclusion: whenever I have to run some code to be sure it does what it should, I write a test instead. And every often that is a unit test. If I&#x27;m highly confident that the code will do what I expect, then I rely on very high level system tests, unless I fear that someone might break the code later by accident without the compiler (or other existing tests) being able to detect that.')