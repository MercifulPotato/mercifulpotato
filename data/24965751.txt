Item(by='apankrat', descendants=None, kids=None, score=None, time=1604305571, title=None, item_type='comment', url=None, parent=24964966, text='FD transfer is also used when a process needs to work with files (or devices) that are out of its reach due to the account restrictions.<p>In this case, the process will talk to another process that <i>does</i> have required access, the latter would open the file of interest and pass the handle back.<p>This is needed very rarely, but in cases where it&#x27;s a good fit, it provides a very elegant and simple solution for an otherwise hairy problem.<p>One such case is when the program uses an Engine + UI model, whereby the engine runs under a system account and the UI is under an interactive user. As the engine runs, it writes logs and the UI needs to display them. So one solution is to tweak permissions on the log files to make them universally readable. It&#x27;s not hard to do, but it makes the whole thing more fragile - these permissions may get inadvertently stripped off, the UI process may be sandboxed by an antivirus, etc. That is, the program may end up in a state when the UI cannot access the logs, but the engine can.<p>The alternative here is for the UI process to ask the engine to open the logs and pass the handles back. Very simple to do and resistant to accidental breakage.<p>Another case was when we had to ship a pre-built Linux binary (a VPN client) that needed to open a TAP device. The latter normally requires a root access, but the client was closed-source, so it had to be able to run under restricted user accounts, because asking people to run it under the root was not an option. The solution was to make a small open-source daemon that listened on a domain socket for requests to open &#x2F;dev&#x2F;tapx, did that and passed tap FDs back to the requesting process.')