Item(by='loopz', descendants=None, kids=[25623188], score=None, time=1609692631, title=None, item_type='comment', url=None, parent=25622389, text='It&#x27;s a feature for sure. The article was a refreshing read too! Of course, hiding and abstracting away much of what is available in C, will have issues when you have special needs. But it beats &quot;make configure&quot; any day, and works well when you just need something with decent speed and memory footprint to get the job done.<p>I&#x27;m enjoying all of what you mentioned above, and dislike languages that are more C&#x2F;C++ like now, as you often get &quot;un-bit&quot; by these snags using Go. However, Go has some snags on its own (hello slices!), so it&#x27;s good to make sure one learns the fundamentals and what works well. A bit sad when repos import hundreds of other packages, I just turn away from such offers. It&#x27;s been the state of IT for past 20 years that everything is essentially garbage. This is nothing new, and one just need to pick one&#x27;s poison as you go along.<p>Nothing is ever simple either. All the &quot;better solutions&quot; in Rust, is sure to need refactoring and updates, while Go-code can mostly continue to run as-is. That&#x27;s a good aim for its niche. Though, we all know the underlying platforms are very diverse, complex and come with snags of their own. I don&#x27;t think the aim of Go is to tackle them all like &quot;make configure&quot; attempt to though.<p>I&#x27;ll be happy to learn Rust for some herculean effort sometime.')