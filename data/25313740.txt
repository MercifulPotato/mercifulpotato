Item(by='Jach', descendants=None, kids=[25317518], score=None, time=1607167897, title=None, item_type='comment', url=None, parent=25313460, text='I think at some point you turn around and become relatively unbothered again. Or you have to if you&#x27;re forced to work in languages lacking things you like from other languages and don&#x27;t want to feel frustrated all the time. (Doing Java and JS for years I was able to reduce the frustration to only some of the time.)<p>Until Python 3.4, there were no enums blessed in the reference implementation, but that was fine for me. Is <a href="https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;enum.html" rel="nofollow">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;enum.html</a> really that much better than the examples in <a href="https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20120207145701&#x2F;https:&#x2F;&#x2F;norvig.com&#x2F;python-iaq.html" rel="nofollow">https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20120207145701&#x2F;https:&#x2F;&#x2F;norvig.co...</a> ? More powerful, sure. But if we just wanted simple C++ enums and not structured Java-like enums it&#x27;s hard to argue against the conciseness of RED,GREEN,BLUE = range(3) and moving on with what matters.<p>I guess two advantages of having something blessed by the language are 1) you don&#x27;t need to think anymore or argue about whose workarounds (if any) are better, like the sibling&#x27;s comment using PHP interfaces with consts inside, and 2) if the language isn&#x27;t flexible enough to add the thing yourself, if the thing needs privileged status by the compiler or whatever, then you need the blessing for the best experience. My favorite language (Lisp) has no enums, but it&#x27;s flexible enough to add them (and people have done so) in a way pretty indistinguishable from if they were there from the start, or of course you can use moral equivalents to the Python 2 examples without fuss. (Rather than just variables though there are also keywords or just plain symbols, which you can have type checked with deftype, and dispatch on with object methods if you like structured enums.)')