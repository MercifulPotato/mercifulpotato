Item(by='nendroid', descendants=None, kids=[24744906, 24744838, 24744655], score=None, time=1602406546, title=None, item_type='comment', url=None, parent=24744315, text='&gt;Look at how many much useless text we have here. &quot;measurementOf&quot; and &quot;SideOfBox&quot; add nothing but clutter to the naming, and writing out practically the same thing 4 times suggests we could abstract this into a data structure.<p>First off this &quot;clutter&quot; exists in the English language itself yet I hear no one complaining. I don&#x27;t communicate with other people using shortcuts and context aware abbreviations like your suggesting. I literally say &quot;here are the measurements of the box&quot; both in written documentation and by sound, what black magic says that this is so wrong to do in code?<p>Anyway here it is:<p><pre><code>   struct measurementsOfBox = {\n        measurementOfLeftBottomSideOfBox\n        measurementOfRightBottomSideOfBox\n        measurementOfLeftTopSideOfBox\n        measurementOfRightTopSideOfBox\n   }\n</code></pre>\nThere is Nothing wrong with above code. Clutter doesn&#x27;t harm readability it just harms aesthetics. And useless? Are you sure? Even if it was useless what harm does it do?<p>Now you could argue that the clutter itself can hurt reading efficiency. But honestly think about it. That&#x27;s like 5 seconds of extra reading out of your life. It&#x27;s not a big deal.<p>Most programmers just have this version of OCD. I get it the struct looks really ugly, but there is nothing logically wrong with it.<p>I mean you could make it more elegant like this:<p><pre><code>   struct Box {\n      x\n      y\n      z\n      t\n   }\n\n</code></pre>\nBut this could lead to all kinds of other issues. For example because I didn&#x27;t label anything with &quot;measurement&quot; now the reader can mistake the values for the &quot;positioning&quot; of the box as opposed to &quot;measurements&quot; of the box.<p>You made a common mistake here in your naming in assuming that &quot;measurement&quot; was a useless prefix. It&#x27;s not... but that&#x27;s besides the point because every program writer can make that mistake. That&#x27;s why when you add a bit more clarity to your naming you have a larger chance to avoid this mistake at a small cost of adding some ugliness to your code.<p>&gt;1) It&#x27;s overly verbose. More than 3 words is a warning sign to me.<p>Warning sign of what? It&#x27;s a similar warning sign that your brain fires off when you&#x27;re alone in the dark in the woods. There&#x27;s nothing to fear logically but your brain kicks off warnings regardless. Same with this, your brain kicks off some sort of warning but when you work it out logically there&#x27;s Nothing. Verbose code is not bad just like verbose documentation is not bad.<p>&gt;2) It&#x27;s specific rather than generic. For instance if I name a function &quot;sortSheepByHoofSize&quot;, it implies the reader know what hoofs are, cares about them and knows how to measure them. Whereas when naming it &quot;sortSheep&quot; or perhaps even just &quot;sort&quot;, it&#x27;s immediately understandable on a surface level to practically everyone.<p>Data referring to a specific concept or a generic concept is a structural decision made by you. I chose data referring to a specific concept. This happens in code. Not everything is generic and for specific things there&#x27;s nothing wrong with using very specific names.<p>&gt;3) Following on from 2), this type of naming lacks context. We should leverage the context of surrounding code and abstractions to make naming understandable, instead of trying to pack all the meaning into one name. Oftentimes there&#x27;s repeated information in names that could be inferred from context instead.<p>&gt;&gt;We should leverage the context of surrounding code and abstractions to make naming understandable, instead of trying to pack all the meaning into one name.<p>There&#x27;s no downside into packing more info into a name. Sure it can get to a point where it&#x27;s unreasonable but in general there&#x27;s nothing wrong with me calling something a measurement when that&#x27;s what it is... This is an aesthetic issue that programmers react due to human bias, but there&#x27;s nothing intrinsically wrong with prefixing measurement onto box. There&#x27;s nothing wrong with repeated information either.<p>By prefixing measurement onto the Box struct I let everyone know that these are measurements on the box and not the position of the box. It&#x27;s ugly but ugliness has nothing to do with readability or structure.<p>This is the bias programmers need to get rid of.<p>Find beauty in the structure of your code and find readability in the naming. Don&#x27;t make the mistake of trying to find beauty in naming. Nobody wants to decipher code with poetic naming.<p>Have you guys heard of literate programming by donald knuth? He&#x27;s taking what I&#x27;m talking about to extreme heights.')