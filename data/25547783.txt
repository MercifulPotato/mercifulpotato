Item(by='ithkuil', descendants=None, kids=[25553362], score=None, time=1609030292, title=None, item_type='comment', url=None, parent=25546397, text='Let&#x27;s turn the knobs on the scenario and see how it appears:<p>&gt;&gt;&gt; &gt;&gt;&gt; with the advent of the first programming languages you no longer had to think in terms of registers, loading operands from memory, storing the results back, spilling registers to the stack.<p>&gt;&gt;&gt; You _are_ handling registers and memory spills, but just one step removed through the use of C.<p>The analogy may not be perfect, but I think it makes obvious some of the things also mentioned in sibling comments: it&#x27;s all about habit, maturity and thus trust.<p>If you trust your tools are working correctly, if you know how to deal with their well known quirks, you&#x27;ll just rebase on top a layer and hopefully boost your productivity and tackle more complex problems more easily.<p>Maturity is important because if today you&#x27;re more likely to blame yourself than the compiler when your stuff doesn&#x27;t works, it&#x27;s just because you&#x27;re lucky to work with mature and popular toolchains. (And I&#x27;m not only talking about the past when compilers where new and unproven, it still happens today on some niche embedded toolchains).<p>So, yes, it&#x27;s indeed rational to be wary of new unproven abstraction layers as they could bring more pain than help.<p>It&#x27;s hard to judge when that line is crossed though.<p>I personally like to know how stuff works under the hood anyways. I find it useful in practice and it gives me confidence in using the higher layers, when they make sense, or stay with the lower level layers, when they make sense.<p>Occasionally I still write some assembly. But most of the time, for most of the stuff, it just makes more sense to use a higher level programming language.<p>I see k8s in a similar way. We have operating systems, programming languages, etc; all sorts of abstractions that help us separate concerns and have  specialists dealing with the nitty gritty details of some stuff, so that everybody else can be specialized in something else (just like in real life)')