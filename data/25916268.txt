Item(by='mumblemumble', descendants=None, kids=None, score=None, time=1611672343, title=None, item_type='comment', url=None, parent=25915862, text='Your skepticism is well-founded. But, for my own part, I do think there is a lot of truth to what they&#x27;re saying. If you know what you&#x27;re doing, it&#x27;s amazing how far you can get with tuning and vertically scaling a good RDBMS.<p>Part of the problem I see is that tuning a database is something of a black art. This is partially due to the complexity of the subject, somewhat to do with self-imposed alienation from the technology through the use of ORMs, largely to do with less-than-stellar official documentation on the subject, and <i>overwhelmingly</i> to do with misinformation. Programmers learn about SQL database tuning the same way 13 year olds learn about sex.<p>Combine that with a grueling set of built-in penalties. The cost of a seemingly small foible can easily span multiple orders of magnitude. That&#x27;s admittedly a problem, but also an opportunity. A couple years ago I resolved performance problems in a microservice by replacing its horizontally scalable NoSQL database with PostgreSQL, and achieved a 100x throughput increase in the process. The horizontally scalable NoSQL database had, in turn, been introduced to resolve performance problems with a PostgreSQL database. That was before my time, but the lore is that it also realized about a 100x improvement. Personally, I think the SQL-&gt;NoSQL was more impressive than the NoSQL-&gt;SQL, because one achieved the speedup while adding both servers and latency, while the other achieved it while taking away both servers and latency. But one one was done by me and the other wasn&#x27;t, so I&#x27;m obviously biased.<p>One possible take-away from that story is that the company could have started with a 10,000x speedup, but at much lower cost, cost if they had started by having someone take the time to spend a couple days reading through use-the-index-luke.com rather than reflexively hitting the scale-out button.<p>One definite take-away here is that the abstractions that make scale-out possible come at a cost. I tend to find, when digging into performance on parallel and distributed systems, that most of their wall clock time - in the worst cases, more than 90% - is spent on synchronization. You need to dig yourself out of that hole before you start seeing net gains. Unfortunately, if you try to dig yourself out with horizontal scaling, you&#x27;ll find yourself fighting against the fact that computing has its own version of the rocket equation.')