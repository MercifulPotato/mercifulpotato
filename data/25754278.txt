Item(by='chubot', descendants=None, kids=None, score=None, time=1610487922, title=None, item_type='comment', url=None, parent=25750607, text='The point is that data layout is an implementation detail not part of the C++ API, and exposing that through shared libraries isn&#x27;t a great idea.  People do it, but it&#x27;s a big mess and not particularly well documented.<p>You can write conformant STL implementations that have completely different layouts.  But the GNU one no longer had a valid layout, so it had to change.<p>So when you expose libstdc++ as a shared library, you&#x27;re exposing a bunch of details that aren&#x27;t part of the C++ standard.<p>If you write it in a header, then you can expect it to break callers via shared library.  And templates must be in  headers.  This is a fundamental language issue.<p>I don&#x27;t use Rust, but the point is &quot;making a stable ABI&quot; will expose it to these sorts of problems, i.e. implementation details leaking on specific architectures, outside of the language.<p>The projects that care about ABI stability, e.g. sqlite, don&#x27;t expose layouts.  They have only functions and not data in their headers.')