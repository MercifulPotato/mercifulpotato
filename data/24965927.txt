Item(by='avianes', descendants=None, kids=None, score=None, time=1604307164, title=None, item_type='comment', url=None, parent=24958423, text='&gt; Same instruction (JALR) used for both calls, returns and register-indirect branches (requires extra decode for branch prediction)<p>JALR for call and return used the same opcode but are two different instructions, there is no need for &quot;extra logic&quot; for the decode or for branch prediction.<p>The lack of &quot;register + shifted&quot; could easily be circumvented by adding an extension for &quot;complex arithmetic instructions&quot;.<p>And macro op fusion is a common solution that already exists in modern CPUs to increase the number of stages in the pipeline.<p>&gt; Multiply and divide are part of the same extension<p>An extension can easily be partially supported in hardware (e.g. multiplication) and leave the other instructions emulated in software (e.g. divisions)<p>&gt; No atomic instructions in the base ISA. Multi-core microcontrollers are increasingly common<p>But some microcontrollers do not need atomics.  And if you are designing a microcontroller that does, just include the atomic extension.<p>Many of the criticisms made here are incorrect and are due more to a misunderstanding of RISC-V than to RISC-V design flaws')