Item(by='pas', descendants=None, kids=None, score=None, time=1608753291, title=None, item_type='comment', url=None, parent=25521110, text='In .NET you have the low-level runtime machinery implemented in the CLR (Common Language Runtime), but the transformation from async-await to state machine code is done completely at compile time.<p>Basically, just like C# (and VB.NET and C++ .NET task&#x2F;then) provides syntax and semantics for async-await, Rust provides it at language level too. (And it defines how the compiler transforms it into Future objects.)<p>But, since Rust doesn&#x27;t have a mandatory runtime, something needs to implement the low-level stuff that knows what to do with these Future objects. (In Tokio you have a work-stealing threadpool, but maybe in smaller runtimes you don&#x27;t need all that fancy stuff for high-throughput, you just need small binary size, so there&#x27;s a runtime&#x2F;library called &quot;smol&quot; that&#x27;s main feature is that it&#x27;s a small async runtime.) In the CLR  as far as I know there are Task objects, which basically correspond to Rust&#x27;s Future objects.<p>One interesting low-level difference (similarity?) is that in the CLR there&#x27;s an explicit callback support by the runtime (to wake up Task objects - which can lead to deadlocks if they are scheduled on the UI thread), whereas in Rust Futures pass their own callbacks (called Waker) to a thing called the Reactor (which is basically the low-level implementation of the Executor, which binds to the OS&#x2F;kernel level primitives, such as epoll or IOCP).<p>And even though it&#x27;s a &quot;zero cost&quot; abstraction, it still means there&#x27;s a state machine, just like in .NET. Except it&#x27;s built and &quot;deadlock checked&quot; at compile time.<p><a href="https:&#x2F;&#x2F;tooslowexception.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;05&#x2F;thereisnothread.png" rel="nofollow">https:&#x2F;&#x2F;tooslowexception.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;05&#x2F;ther...</a><p><a href="https:&#x2F;&#x2F;www.red-gate.com&#x2F;simple-talk&#x2F;dotnet&#x2F;net-framework&#x2F;the-overhead-of-asyncawait-in-net-4-5&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.red-gate.com&#x2F;simple-talk&#x2F;dotnet&#x2F;net-framework&#x2F;th...</a>')