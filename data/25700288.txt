Item(by='_huayra_', descendants=None, kids=[25700855], score=None, time=1610200073, title=None, item_type='comment', url=None, parent=25700122, text='Amen. The real benefit of Haskell is not some hyper performance optimization (when you actually truly need C++ or Rust), but for business critical applications that need to perform fairly well and, most critically, need to not be filled with bugs as it continues to evolve.<p>Whatever amount of money someone might lose by using Haskell compared to Rust or C++ (e.g. in hiring trainers to train your engineers, the overhead in terms of your PaaS bill due to GC or whatever else) is very small compared to the savings:<p>- Compensating a customer for an SLA violation due to some inadequately tested code path that caused an outage\n- Wasted developer time trying to act like a Human Compiler (e.g. including a bunch of extra code to check type expectations and handle violations gracefully....at runtime)\n- Wasted developer time trying to understand the dynamic behavior of some code in a PR\n- Wasted developer time trying to understand old crufty parts of the codebase when you refactor<p>Perhaps it&#x27;s slow(er) to compile than you might like or not as optimal as C++, but unless you can afford to hire the absolute best Python &#x2F; Ruby developers available and have some airtight culture of documentation and best practices, I would venture that it&#x27;s better off to stake one&#x27;s intellectual property on something that can survive employee churn without that knowledge walking out of the building.')