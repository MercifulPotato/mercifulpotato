Item(by='flohofwoe', descendants=None, kids=[24809431, 24811296, 24811956, 24816465, 24810119, 24816188, 24809564, 24815850, 24815480, 24813267], score=None, time=1602936568, title=None, item_type='comment', url=None, parent=24808968, text='All this effort for a highly specialized solution that only fixes one combination in a huge M:N matrix. Wouldn&#x27;t it be better to start working on an &quot;LLVM for language interoperability&quot;? That way every language only needs to provide a connection to an intermediate specification, and it can connect to any language supporting that same specification.<p>Currently this is done through C APIs (and it works well enough TBH), but plain C APIs lack annotations for higher-level concepts (like lifetime, bounds checking, etc). Why not work on a modern language interoperability standard instead? Being able to mix many different smaller and specialized languages in a single project instead of trying to create the &quot;one universal language to rule them all&quot; also would speed up language evolution, because less effort is wasted copying features from one &quot;universal language&quot; into other &quot;universal languages&quot;, and as a bonus, operating system APIs following that standard would become language-agnostic.')