Item(by='ufo', descendants=None, kids=[25573325, 25571773], score=None, time=1609256032, title=None, item_type='comment', url=None, parent=25550776, text='&gt; Closely related to stack based VM are register based virtual machines. They are also interpreters of bytecode, but their design is quite different, since they donâ€™t use the stack for the operands but rather a set of registers.<p>This is a common source of confusion but register based VMs also use a stack.<p>In a stack based VM, the arguments and results to all operations are implicitly pushed and popped from the top of the stack. For example, the instructions to add 10 plus 20 would look similar to this:<p><pre><code>    PUSH 10\n    PUSH 20\n    ADD  \n</code></pre>\nIn a register based VM, the arguments and results are stored in virtual registers. For example, to do the same as before the instructions might look more like the following:<p><pre><code>    STORE R1 10\n    STORE R2 20\n    ADD R3 R1 R2\n</code></pre>\nHowever, those registers are also part of the stack! The way it works is that the interpreter maintains a stack of values, just as in a stack based interpreter. When a function starts running, it grows the stack by a fixed amount, allocating an &quot;activation record&quot;. When it executes, the registers in the instructions refer to slots in this activation record, which is part of the stack. It&#x27;s not like in physical computer, where the registers and the stack are stored in separate places.<p>The main interpreter loop of a register based VM is actually quite similar to the main loop of a stack based VM. The part that is more different is the bytecode generation.')