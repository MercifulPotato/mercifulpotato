Item(by='harperlee', descendants=None, kids=None, score=None, time=1606838264, title=None, item_type='comment', url=None, parent=25266150, text='Why do you say that, if I may? I looked at the index and preface and it did not give me that impression at all - the only thing that surprised me is that I was reading “foundations” as “introduction”, and at least part of the book is focused more on “foundational theory”&#x2F;“underpinnings” (e.g. measure theory aspects, or how you can construct a lambda calculus that should demonstrate that general probabilistic programming ( as in languages such as anglican[1]) can be achieved.<p>[1] I only have hands-on experience with anglican and PyMC3. They differ in approach: in anglican you write <i>anglican</i> code (not clojure) that is <i>parsed</i> as a model; whereas in PyMC, you write python code that constructs the PyMC model, by calling PyMC library functions. To me, the former is closer to the idea of probabilistic programming, being Turing-complete and all, but perhaps this is not a productive segregation.')