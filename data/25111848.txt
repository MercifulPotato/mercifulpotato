Item(by='flohofwoe', descendants=None, kids=None, score=None, time=1605536211, title=None, item_type='comment', url=None, parent=25111607, text='I&#x27;m using a code generation approach both for 6502 and Z80, not as extreme and elegant as demonstrated here though.<p>Instead of a pure data description I have python scripts which generate C source code. The 6502 is perfect for code generation because instructions are very uniform, and the &quot;interesting&quot; part of instructions are the addressing modes which always run the same sequence of operations in front of the actual instruction-specific &quot;payload&quot;. The Z80 instruction set has many more special cases, but it can be decoded &quot;algorithmically&quot; as well, see here:<p><a href="http:&#x2F;&#x2F;www.z80.info&#x2F;decoding.htm" rel="nofollow">http:&#x2F;&#x2F;www.z80.info&#x2F;decoding.htm</a><p>My Z80 emulator basically implements this &quot;recipe&quot; in python, and generates a huge &quot;unrolled&quot; switch-case statement with one case-branch per instruction (ok not quite, the CB prefix instruction range is still decoded algorithmically to reduce the resulting binary code size a bit).<p>Complex instruction logic like DAA are still essentially hand-written C functions though, the code generation mainly helps with the &quot;mundane&quot; parts of an instruction, like opcode fetch, and regular memory load&#x2F;store machine cycles.<p>One nice side effect of using code generation is that it is very easy to create variations of the emulator. For instance I created a cycle-stepped version of my 6502 emulator (versus the previous instruction-stepped version) with surprisingly few changes to the code-generation script.<p>PS: the whole stuff is here:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;floooh&#x2F;chips" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;floooh&#x2F;chips</a><p>PPS: an interesting approach (which I haven&#x27;t tried) for 6502 emulation would be to use the 6502&#x27;s decode ROM (aka PLA) as the &quot;base-data&quot; for code generation.')