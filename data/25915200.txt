Item(by='chrismorgan', descendants=None, kids=None, score=None, time=1611665284, title=None, item_type='comment', url=None, parent=25914880, text='Meanwhile, on a computer that’s benchmarking within 20% of your figures:<p>• CPython 3.9.1 segfaults on a direct port of fold.vim after a few seconds. (It generates the 22,888,887-character `1+2+3+…+2999999` string in mostly under a second, then hits a stack overflow in the eval() call, presumably in parsing.)<p>• CPython 3.9.1 completes it with a loop in under a second;<p>• CPython 3.9.1 completes it with functools.reduce in half a second;<p>• CPython 3.9.1 completes it using sum() in about 150ms;<p>• Node.js 15.6.0 completes it with a loop in about 150ms;<p>• Node.js 15.6.0 with --jitless completes it with a loop within 300ms;<p>• Perl 5.32 completes it with a C-style loop in under 300ms;<p>• Perl 5.32 completes it with a foreach loop on a range in about 160ms;<p>• Perl 5.32 completes it with List::Util::sum in about 600ms.<p>(I didn’t try porting fold.vim to JavaScript because it lacks the primitives to make that a sane operation; or Perl, because my Perl skills are rusty enough that it would take a few minutes to sort it out, and I was lazy.)<p>So yeah, other scripting languages’ alternatives are pretty much just 5–20× as fast across the board, and often even more than that—and worse still, the performance pitfalls in Vimscript are often not what someone familiar with performance might expect—few would expect your fold.vim to be faster than your loop.vim.<p>Vimscript is routinely <i>painfully</i> slow to the point that it can easily be a serious bottleneck on anything involved, e.g. a fancy indent script, or some script that you use to process a file.')