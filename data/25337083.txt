Item(by='SAI_Peregrinus', descendants=None, kids=[25338300], score=None, time=1607373330, title=None, item_type='comment', url=None, parent=25336795, text='Testing code via semi-random inputs[1]. The most common fuzzers, AFL-Fuzz[2] and libFuzzer[3] are coverage-guided: they compile the program with special instrumentation to determine code coverage, then call the program repeatedly, changing the inputs via genetic algorithm to try to maximize the code paths executed. When unexpected behavior is observed (typically the test harness crashing) the fuzzer saves the test&#x27;s input for future use.<p>Basically automatic generation of test case inputs. It&#x27;s non-deterministic, so it won&#x27;t always find problems, but it can save a lot of manual effort.<p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fuzzing" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fuzzing</a>\n[2] <a href="https:&#x2F;&#x2F;lcamtuf.coredump.cx&#x2F;afl&#x2F;" rel="nofollow">https:&#x2F;&#x2F;lcamtuf.coredump.cx&#x2F;afl&#x2F;</a>\n[3] <a href="https:&#x2F;&#x2F;www.llvm.org&#x2F;docs&#x2F;LibFuzzer.html" rel="nofollow">https:&#x2F;&#x2F;www.llvm.org&#x2F;docs&#x2F;LibFuzzer.html</a>')