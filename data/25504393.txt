Item(by='lmm', descendants=None, kids=None, score=None, time=1608627954, title=None, item_type='comment', url=None, parent=25499449, text='&gt; * Each service ran in its own container. When a container&#x2F;vm would run out of memory, we all didn&#x27;t have to scramble to figure out who broke something. The person who owned the code for that service dealt with it. If a service started kicking out errors nobody but the owner had to be distracted.<p>Separate containers for multiple services owned by the same team sounds like a lot of overhead. If I want to work on something do I have to spin up a bunch of containers, with all the overhead that brings? Can I easily use a debugger across all of the code that implements a given feature?<p>You&#x27;re talking like there was a single &quot;owner&quot; for each service? What did you do when they went on holiday &#x2F; left? How did people share knowledge about the system?<p>&gt; * The world is services. Just think about AWS and how it works. There is no such thing as a monolith, eventually you interface to services. Be it a weather API, a CI server, deployment system, a central logger, etc. Just because you didn&#x27;t write all those services doesn&#x27;t mean you don&#x27;t have a service architecture.<p>Dealing with an outside service brings a lot of overhead. It&#x27;s harder to debug, harder to test. When things are maintained by a separate team it makes sense to treat them as an outside service, but within the same team why would you make all that extra work for yourself?<p>&gt; We had services for central logging, for monitoring, for metric storage, etc. No way would I ever want to push all that into a single service and debug a GC issue or segfault.<p>Sounds like you need a better language. I agree that anything that might segfault belongs in a separate service, but most of the time the solution is to not use stuff that might segfault.<p>&gt; * If we had to hotfix a service, we could deploy just that service with zero concern the other services would have an issue.<p>How does that fit with &quot;services only had to talk to other services from the same commit&quot;?')