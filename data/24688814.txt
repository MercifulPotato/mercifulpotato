Item(by='room500', descendants=None, kids=None, score=None, time=1601912988, title=None, item_type='comment', url=None, parent=24688639, text='&gt; It does not matter that it&#x27;s untidy. It&#x27;s your history.<p>That is only true if you are working in a personal git repo<p>If you are committing against a repo with many others though, having a tidy git history is important. If I discover a bug and bisect to the &quot;remove debug logging&quot; commit, it is hard to revert that - or to even understand what it means. I then have to go in and try to determine which feature that debug logging is for and how many commits I need to revert to get back to a sane place.<p>My general rule of thumb is that I squash commits (when merging to a public repo) if the commit doesn&#x27;t warrant time into creating a proper commit message (explaining what I am fixing, why, etc). I have no problem creating a set of 10 commits to merge in one feature, but each commit needs to be individually reviewable and understandable.')