Item(by='dreamcompiler', descendants=None, kids=[24911901], score=None, time=1603823041, title=None, item_type='comment', url=None, parent=24907442, text='An FPGA is (to a very crude approximation) just a bunch of static RAM organized in an unusual way. If you think of normal static RAM as &quot;address wires go in one side and data wires come out the other&quot;, in an FPGA there are no &quot;address wires&quot; -- it&#x27;s all data in&#x2F;data out. The memory cells are still just memory cells; what we label the wires is merely a matter of engineering perspective. In a Xilinx memory cell we choose labels for the wires typically used for logic gates.<p>Anyway in a Xilinx chip the bits of data you put in the memory cells determine what logic function gets executed. That works because in general any particular stored memory -- in any computer, anywhere -- is (conceptually) just a logic function, and conversely all logic is implementable with the stuff we conventionally call memory.<p>But we typically don&#x27;t do that, because &quot;real&quot; logic made of fixed-function transistors is much faster than logic built with changeable memory cells. However, there&#x27;s a market for fully-changeable logic--even if it&#x27;s slower--and that&#x27;s what Xilinx chips are.<p>Every CPU is just a bunch of registers and logic. If you hand me a few million discrete NAND gates, I can use them to build an X86, a RISC-V, and ARM, or whatever. It will be the size of a house and it will be very slow, but it will run the binary code for that processor. With a Xilinx chip, you have a few million NAND gates (or NOR gates or inverters or whatever you like) at your disposal and they&#x27;re all on one chip and you can wire them up however you want with nothing but software. Bingo: You can build an X86 out of pure logic, and it&#x27;s all on one chip rather than being the size of a house. That&#x27;s a soft core.<p>The nice thing about soft cores is that you can build whatever CPU functions you want and leave off the functions you don&#x27;t need. If you want to change the design, you just download a bunch of new bits to the Xilinx memory cells. Thus you can change an ARM into an X86 in an instant, without changing any hardware.<p>Soft cores are very flexible, but they&#x27;re also slow, because implementing logic with static RAM cells is slower than doing it with dedicated transistors.<p>That&#x27;s where hard cores come in: A hard core is a dedicated area of silicon on the Xilinx chip carved out to <i>only</i> implement an ARM chip or a PowerPC or other CPU with fixed-function transistors. So it&#x27;s fast. The downside is you can&#x27;t change its functionality on-the-fly. If you decide you&#x27;d rather have a PowerPC than an ARM chip you have to change the whole chip.<p>In both types of cores, you still have a bunch of memory cells left over that you can program to do whatever kind of logic you like.')