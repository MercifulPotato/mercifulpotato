Item(by='IanCal', descendants=None, kids=None, score=None, time=1607426413, title=None, item_type='comment', url=None, parent=25343555, text='Depends what you need the message queue for. I think it can be a sensible choice, it depends how much of the rest of the system you need to start building. If you&#x27;re then working out retries, etc. start looking to see if there&#x27;s a prebuilt solution.<p>I find a few things I tend to look for in solutions:<p>* Are other people using it for the same sort of scale of problem I have? This cuts both ways - some projects are complicated and work well for people who have much harder scaling issues than I may have, and some projects are too simple to deal with scale issues I have. Some backend systems may need to process billions of things, others sit and take 20-30 a week.<p>* Are there plenty of people using it? More people = more chance bugs are known about with workarounds &#x2F; already fixed, more chance other people have hit the same problems I will.<p>* Have people been using it for a while now? Unless there&#x27;s a good reason, a project a year or two old that&#x27;s stable and solves your business requirements can be far better than a shiny new thing. Let other people hit the issues and upgrade next year.<p>* Can I debug it? This is what actually came to mind reading your comment. A database is nice when you can keep a full history of what&#x27;s been going on.<p>* What exists where I have to build the absolute minimum amount of stuff? A nice example here is python-rq. For some of my problems I can easily set it up, it does what I need and probably more and happily chugs along. I need to build next to nothing to use it. Also, whatever you pick first likely reveals another unspecified business requirement and finding that out ASAP is important.<p>* Is there some industry standard? Company standard?<p>Don&#x27;t be afraid to adjust the way you were planning to build your project to fit better with some industry standard approach. If you want to use package X (say, luigi or airflow for data processing) what philosophy does it go by? Can you tweak the way you&#x27;re working to fit in with that? There are often good reasons for certain choices, and even when it&#x27;s less clear it&#x27;ll at least avoid you fighting your systems so much.<p>Not too precise I&#x27;m afraid as it all comes under &quot;it depends&quot; but picking something:<p>Job queues &#x2F; processing, try for example<p>* Amazon batch\n* Luigi (+aws batch potentially)\n* Python RQ (with redis)\n* Just files on S3 (an underutilised option imo)\n* SQLite or whatever database you&#x27;re using now if you need something more custom')