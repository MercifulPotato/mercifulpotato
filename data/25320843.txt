Item(by='bordercases', descendants=None, kids=[25323420], score=None, time=1607226489, title=None, item_type='comment', url=None, parent=25320648, text='A part of the inefficiency is that business-logic oriented applications (a) often use stateful object models to organize their code and services, which are (b) extremely difficult to reason about mathematically, both due to the pseudo-mathematical nature of mutable state, and due to no canonical formal representation of what an &quot;object&quot; is mathematically, nor what an &quot;object&quot; ought to be in software engineering.<p>The situation may be improving: more programming is moving over to the functional style which at the very least gets you algebraic concepts like combinators as the method for code reuse, and types + monoids as formal stand-ins for objects. In other words programming moves towards math when it makes functions really functions.<p>Category Theory and Linear Logic also provide models for data-transformation locales (objects) as well as resource consumption (mutation); but they are still heavyweight formalisms which have yet to make full penetration towards applications which quite frankly might not need them to do useful work.')