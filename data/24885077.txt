Item(by='rstuart4133', descendants=None, kids=[24885755, 24885388], score=None, time=1603619527, title=None, item_type='comment', url=None, parent=24884025, text='&gt; I think NULL in SQL is very different from NULL in most PLs, and is much better behaved. It is on fact much closer to an Optional than to a 0 pointer.<p>I beg to differ.  Dereferencing NULL in C is generally well defined: SIGSEGV.  Rust&#x27;s unwrap() is a modest improvement on that, it reliably panics.  Rust&#x27;s main contribution it&#x27;s type system forces you to acknowledge the possibly it might be null by making you to write unwrap().<p>I&#x27;d take that any day over what SQL does when you &quot;dereference&quot; a NULL, by say 1 &lt; null.  It just propagates the error so it poisons whatever expression contains it.  I avoid nulls whenever possible to avoid that.<p>If SQL was in fact closer to Rusts Option then an attempt to use a possibly null value&#x2F;columns with an operator that can&#x27;t handle null would produce a syntax error.  So writing could_be_null &gt; 0 would be illegal, you would have to write ifnull(could_be_null, 0) &gt; 0.')