Item(by='pbowyer', descendants=None, kids=[24869959, 24869876], score=None, time=1603442532, title=None, item_type='comment', url=None, parent=24867104, text='I&#x27;ve spent a lot of my career updating&#x2F;fixing&#x2F;replacing aging PHP apps, so here are some pointers:<p>0. Ignore PHP8 for now. There&#x27;s much more community support for PHP7, so fix it up to work on PHP 7.4 first.<p>1. My first task is always to use a code scanner to test if the codebase is PHP7 compatible (or PHP 5.6, or the next version on from whatever you&#x27;re running). See <a href="https:&#x2F;&#x2F;blog.fortrabbit.com&#x2F;php-testing" rel="nofollow">https:&#x2F;&#x2F;blog.fortrabbit.com&#x2F;php-testing</a> for an incomplete list (I&#x27;ve used others but haven&#x27;t got my bookmarks to hand). You&#x27;ll get false positives but also a good feel for whether there are serious issues.<p>2. You don&#x27;t say if it&#x27;s a CRUD app or an API. If it&#x27;s the latter: set up a PHP 7.4 box (with a copy of the datastore) and route all traffic to the current production box and to the copy. Save the responses from both and compare they&#x27;re the same. A simple way to see if the app will work on PHP, and when you find something that&#x27;s broken, you can fix it, reset the logs, and try again. Hard(er) to do with CRUD, but I have compared the datastore contents before to check they&#x27;re the same.<p>3. Needless to say, stick it all in source control if it&#x27;s not already.<p>4. For your own sanity, run a code formatter over it if the code is messy.<p>5. I like PhpStorm as an IDE. It&#x27;s not free, but the intellisense and refactoring support (and the built-in debugger) are timesavers.<p>6. Assuming it&#x27;s not global variables everywhere, that they&#x27;ve used functions&#x2F;classes(!), then as you fix bits of the code rename the single letter variables and add comments. PhpStorm can refactor variable names, so you see what will change before it happens.<p>7. If the code&#x27;s using mysql_* functions, which aren&#x27;t present in PHP7, there&#x27;s a shim to make them work: <a href="https:&#x2F;&#x2F;github.com&#x2F;dshafik&#x2F;php7-mysql-shim" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;dshafik&#x2F;php7-mysql-shim</a><p>8. Good luck! I like unpicking codebases like this and keeping them running. As a sibling commenter has said, it&#x27;s an internal system so assuming staff are not going to exploit any vulnerabilities or you have guarded against those already, there is no problem keeping it running internally as-is. So long as you can still recreate the VM from scratch (I have had old packages disappear - now that makes for an interensting disaster recovery plan) and reinstall everything you need should backups fail, you&#x27;re okay.')