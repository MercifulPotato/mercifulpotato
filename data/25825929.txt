Item(by='ddragon', descendants=None, kids=None, score=None, time=1611000154, title=None, item_type='comment', url=None, parent=25825441, text='In general, if you code like Python (highly dynamic code with no consideration to performance) it will be closer to Python in speed, and if you code like C&#x2F;Fortran (completely static, overspecified types) it should be closer to C in performance, the variance in performance in terms of naive implementations is pretty high. That means it&#x27;s easy to get into Julia and start programming no matter your background, but idiomatic Julia (which it&#x27;s not something you&#x27;ll learn in a day) should be concise and high level like Python (and frequently more concise) and close to C in speed.<p>For example, what other dynamic languages do like verbosely typing everything doesn&#x27;t really work in Julia (the compiler already knows pretty much every type even without hints), what works is treating the variable as a polymorphic container instead of a dynamic container: you don&#x27;t know yet what type the variable has (only the behaviour), but whatever it is you should avoid changing it if possible (what they call type stability). Which is kinda why it might not be obvious reading proper high performance Julia code, as it is not something you do to make it fast, but what you don&#x27;t do (change a variable type, forcing the compiler to create a low performance dynamic box, plus other stuff like global variables).')