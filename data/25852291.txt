Item(by='dmbarbour', descendants=None, kids=[25853668], score=None, time=1611178429, title=None, item_type='comment', url=None, parent=25849772, text='I think most FP languages don&#x27;t decouple AST from evaluation context. E.g. I cannot perform abstract interpretation on a function&#x27;s AST, nor rewrite a function&#x27;s AST for incremental computation, nor perform explicit partial evaluation during function composition by composing the ASTs. I only can access opaque `Input -&gt; Output`.<p>Also, FP algorithms developed for one evaluation context cannot easily be ported to another. They are implicitly entangled with assumptions. For example, I cannot evaluate a lazy algorithm in an eager evaluation context without paying a huge price. Adding back-pressure for list processing where a program was not designed for it would easily result in deadlock. Adding exceptions without adding unwind (or bracket, try&#x2F;finally, etc.) to the existing program expressions will easily result in buggy code.<p>I think your assertion might be true for some specific integrations of FP nodes into FBP. Is this what you mean?')