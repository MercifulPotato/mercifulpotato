Item(by='adwn', descendants=None, kids=None, score=None, time=1603260087, title=None, item_type='comment', url=None, parent=24844292, text='&gt; <i>Locking is a performance [...] destroying operation</i><p>That is incorrect. Properly designed and implemented mutexes (like in the parking_lot crate [1]) are extremely fast in the <i>uncontented</i> case, and need just one byte of overhead (and no heap-allocated memory) per mutex. In the <i>contented</i> case, a lock-free algorithm still has to deal with arbitration between the different threads, so it&#x27;s typically not faster than a lock-based approach. Lock-free algorithms do have certain advantages (like deadlock-freedom), but performance is typically not one of them.<p>&gt; <i>Locking is a [...] scalability destroying operation</i><p>Also incorrect. If you have N threads trying to append to a single queue, then you have a scalability problem whether you&#x27;re using locked or lock-free data structures. The solution in such a case is fine-grained concurrency and a different approach, not lock-free algorithms.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;Amanieu&#x2F;parking_lot" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Amanieu&#x2F;parking_lot</a>')