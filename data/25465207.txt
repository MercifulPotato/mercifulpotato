Item(by='Yaggo', descendants=None, kids=None, score=None, time=1608282144, title=None, item_type='comment', url=None, parent=25465096, text='I agree that there&#x27;s lot of benefits and certain elegancy by sticking with CSS layouts.<p>CSS transforms are really just an visual effect, not affecting the layout. That&#x27;s why they are super fast (typically HW accelerated by GPU), but not suitable for defining the layout.<p>Managing the DOM in JS may be order of magnitude slower but is still fast enough, actually surprisingly fast. It&#x27;s common to implement 60 FPS animations e.g. in React. Of course the performance heavily depends whether the manipulation causes a layout reflow etc, but generally speaking, DOM is pretty fast nowadays, and most sites&#x2F;apps are not _that_ performance critical (such as games). Yes, it&#x27;s not uncommon either that a complex JS app becomes slow, but that&#x27;s mostly because of inefficient programming &#x2F; generally bloated app, not because the layout is done by JS instead of pure CSS.<p>Browsers already have &quot;alternative&quot; APIs to make totally non-DOM interfaces, such as canvas (2D) and WebGL (3d). Nothing prevents to come up with alternative layout&#x2F;UI libraries written on top of them. I&#x27;m sure such a libraries exist. Why it&#x27;s really rare to utilize non-DOM UIs is probably due to many reasons, i.e. compatibility issues with exotic&#x2F;older user-agents, devs being more familiar with DOM based solutions, etc.<p>After all, I think DOM works pretty well even for app-style UIs. Actually, many &quot;native&quot; technologies don&#x27;t offer as easy responsive layouts, user-settable font-size, etc, which comes almost for free with DOM. There&#x27;s lof of beauty in the DOM, despite its document-oriented origins.<p>(Oh, I just typed out some mind flow of mine, maybe a bit off-topic.)')