Item(by='pmahoney', descendants=None, kids=None, score=None, time=1611248599, title=None, item_type='comment', url=None, parent=25857753, text='Here is (I think) the example regex ported to OCaml&#x27;s Re library [1]<p><pre><code>    let my_regex =\n      let open Re in\n      seq [\n          bos;\n          opt (str &quot;0x&quot;);\n          repn (\n              alt [\n                  rg &#x27;A&#x27; &#x27;F&#x27;;\n                  rg &#x27;a&#x27; &#x27;f&#x27;;\n                  rg &#x27;0&#x27; &#x27;9&#x27;;\n              ]\n          ) 4 None |&gt; group;\n          eos;\n      ]\n      |&gt; compile\n</code></pre>\nI&#x27;m familiar with standard (compact) regex syntax, but I&#x27;ve been using the above syntax recently in a couple small places. I&#x27;m a bit on the fence as to which is &quot;better&quot;. The compact syntax is, of course, more compact. I think it&#x27;s a very similar comparison between APL (which I&#x27;ve not used) and most other common programming languages.<p>One advantage of the expanded syntax is that it&#x27;s a bit nicer to incorporate a string variable, e.g. &quot;str some_string&quot; vs. &quot;&#x2F;#{Regexp.escape(some_string)}&#x2F;&quot; (to borrow Ruby&#x27;s syntax).<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml-re" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml-re</a>')