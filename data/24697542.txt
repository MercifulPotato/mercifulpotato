Item(by='bnchrch', descendants=None, kids=[24698103], score=None, time=1601991604, title=None, item_type='comment', url=None, parent=24697262, text='I’ve been through the Haskell learning curve. Long story short it’s awful and in my opinion not worth the pain.<p>I think Haskells problems breakdown into 3 distinct areas. The community, the conventions and the language itself.<p>Firstly the community can be hostile to a new comer. The documentation and tutorials for various libraries is often incomplete, outdated and written in a hard to grok plain text document. Asking questions can also be painful as there’s definitely a tinge of elitism to some of the power members.<p>Secondly, the conventions that are often encouraged go against writing clear and understandable code. Function names are small. You have interface functions (doThis) that exist just to call private functions (doThis’).<p>These odd conventions get compounded by a lot of warts on the language itself.<p>So finally onto the language itself.<p>There’s a lot of operators to keep track of. None of which do what you expect. And the ones you do expect, like dot notation, don’t exist until you turn on a language feature flag.<p>For feature flags there’s a standard set of 20 that every experienced Haskeller turns on but good luck finding that out as a beginner, and good luck finding out that’s why the example isn’t working for you.<p>There’s also 3 different types of String, all of them in active use by different libraries, which you have to manually cast between often.<p>And the dev environment can be hard to figure out. Error messages are difficult to grok. The repl often breaks. And you sometimes run into hidden libraries that are in your project but arent accessable until you import them.<p>Honestly it’s a mess and this is before I touch on the unique parts of a pure functional language like Haskell. Which is a shame because Haskell brings to the table some serious super powers. They’re just not worth the hit to developer productivity in a team setting.')