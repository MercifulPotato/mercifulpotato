Item(by='asciimike', descendants=None, kids=[25380431, 25380684], score=None, time=1607639184, title=None, item_type='comment', url=None, parent=25379075, text='Starlark is Python (thanks Guido!), while CEL is designed specifically to <i>not</i> be Turing complete or have constructs like loops, etc.<p>&quot;CEL evaluates in linear time, is mutation free, and not Turing-complete. This limitation is a feature of the language design, which allows the implementation to evaluate orders of magnitude faster than equivalently sandboxed JavaScript.&quot;<p>As mentioned, the goals are security policies (it was first used internally as the Security Rules for Cloud Storage for Firebase and the Cloud Firestore) and proto contracts (e.g. you could define addons to your proto to specify the data matched certain behavior):<p>I forget the exact syntax for the contract, but it looked something like this...<p>```\nmessage person {\n  @contract(matches(&#x2F;* RE2 phone number regex *&#x2F;))\n  string phone_number = 1;\n  ...\n}\n```<p>That data could enforce client side checks as well as be used server side (in different implementation languages).<p>I always wanted to see it combined with the proto to Firebase Security Rules generator (<a href="https:&#x2F;&#x2F;firebaseopensource.com&#x2F;projects&#x2F;firebaseextended&#x2F;protobuf-rules-gen&#x2F;" rel="nofollow">https:&#x2F;&#x2F;firebaseopensource.com&#x2F;projects&#x2F;firebaseextended&#x2F;pro...</a>) to do client and server validation.')