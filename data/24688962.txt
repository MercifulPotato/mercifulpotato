Item(by='mumblemumble', descendants=None, kids=[24689201, 24689025], score=None, time=1601913862, title=None, item_type='comment', url=None, parent=24686863, text='To principle #2:<p>The author acknowledges this as being incompatible with static typing, but I&#x27;m not so sure. Is it that, or is it that it&#x27;s incompatible with contemporary static languages?<p>In FP, we already have a concept of type-safe hetergeneous lists and maps, and even some clever implementations in languages like Java[1]. The ergonomics are often less-than-stellar, but I&#x27;m pretty sure that&#x27;s something a new language could fix with some syntactic sugar.<p>There is also the data frame abstraction (like, you see in Pandas), which is typically implemented on top of dynamic typing, but major implementations often rely on static typing behind the scenes to achieve efficiency. There are also projects like Frameless[2], which implements a statically typed interface over a dynamically typed dataframe package.[3] I&#x27;m guessing, again, that careful language design could get us something similar, but with better ergonomics.<p>And I&#x27;d be happy with that. I&#x27;ve been pulling away from static languages lately, and a big part of that is that I really like how some of the dynamic languages let me model my data <i>as data</i>. It&#x27;s enough of a complexity saver to feel like a net win, even at the cost of some performance and static verification.<p>[1] For example: <a href="https:&#x2F;&#x2F;github.com&#x2F;palatable&#x2F;lambda#hlist" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;palatable&#x2F;lambda#hlist</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;frameless" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;frameless</a><p>[3] Which is itself, notably, implemented in a static language. Spark also has a statically typed version of the API, but its usage is not recommended for several reasons, one of which is performance. That&#x27;s something that all us static typing fans should really stop to think about for a bit.')