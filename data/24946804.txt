Item(by='ynik', descendants=None, kids=[24948103, 24947422], score=None, time=1604091288, title=None, item_type='comment', url=None, parent=24946029, text='async&#x2F;await is more flexible in some sense. If you run the tasks on a thread pool, it&#x27;s mostly equivalent to green threads.\nBut if you run the tasks on a single thread, you get cooperative multi-tasking. You can access mutable shared state without using locks, as long as you don&#x27;t use &quot;await&quot; while the shared state is in an inconsistent state.\nFor user interfaces this is huge advantage: you can run all your code on the UI thread; but the UI stays responsive while awaiting tasks.<p>Also, here&#x27;s an interesting use of async&#x2F;await: software hyperthreading: <a href="https:&#x2F;&#x2F;isocpp.org&#x2F;blog&#x2F;2019&#x2F;09&#x2F;cppcon-2018-nano-coroutines-to-the-rescue-using-coroutines-ts-of-course-g" rel="nofollow">https:&#x2F;&#x2F;isocpp.org&#x2F;blog&#x2F;2019&#x2F;09&#x2F;cppcon-2018-nano-coroutines-...</a>')