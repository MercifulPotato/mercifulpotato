Item(by='nextos', descendants=None, kids=[25978210], score=None, time=1612057042, title=None, item_type='comment', url=None, parent=25974514, text='There&#x27;s some nice literature. I got into the field 15 years ago and there were practically no good textbooks. Things are way better now: <a href="https:&#x2F;&#x2F;avigad.github.io&#x2F;formal_methods_in_education&#x2F;" rel="nofollow">https:&#x2F;&#x2F;avigad.github.io&#x2F;formal_methods_in_education&#x2F;</a><p>Nielson &amp; Nielson have the standard textbook in static program analysis that is used everywhere. But it&#x27;s quite unfriendly as it&#x27;s written using abstract algebra. They&#x27;ve recently released two textbooks that are much gentler. Actually, I&#x27;d say they are easy going and fun but still retain all the mathematical rigor.<p>They use program graphs, which are a bit less general but a lot easier to digest. They cover all major techniques, including theorem proving, static analysis, model checking, abstract interpretation, type and effect systems, etc:<p>- Formal Methods: An Appetizer <a href="https:&#x2F;&#x2F;www.springer.com&#x2F;gp&#x2F;book&#x2F;9783030051556" rel="nofollow">https:&#x2F;&#x2F;www.springer.com&#x2F;gp&#x2F;book&#x2F;9783030051556</a><p>- Program Analysis: An Appetizer <a href="https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2012.10086" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;2012.10086</a><p>There&#x27;s also a companion website with some F# code. The second book, which seems still unfinished discusses how to implement program analyses using datalog. This speeds up development quite a lot. Otherwise, developing your own static analyzer is <i>a lot</i> of work.<p>My dream is to implement some kind of framework that enables quick DSL creation along with lightweight formal methods support to verify programs written in each DSL. I think restricted semantics is the key to make formal methods practical. Quoting Alan Perlis, &quot;<i>Beware of the Turing tar-pit in which everything is possible but nothing of interest is easy.</i>&quot;')