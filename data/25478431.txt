Item(by='tmoertel', descendants=None, kids=[25478525], score=None, time=1608395221, title=None, item_type='comment', url=None, parent=25476503, text='When testing solutions to algorithmic problems, it&#x27;s often useful to use randomized property checking to verify that the solution&#x27;s expected properties hold for approximately all inputs. The QuickCheck family of testing tools is probably the best known application of this approach. It&#x27;s also pretty easy to roll your own. Some hand-rolled examples in Python:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycodingproblem_com&#x2F;find_non_triplicate_int.py#L266" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycoding...</a><p><a href="https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycodingproblem_com&#x2F;p18_max_subarray_values.py#L135" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycoding...</a><p><a href="https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycodingproblem_com&#x2F;p273_find_fixed_point_in_sorted_array.py#L88" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;tmoertel&#x2F;practice&#x2F;blob&#x2F;master&#x2F;dailycoding...</a>')