Item(by='estebank', descendants=None, kids=None, score=None, time=1602183217, title=None, item_type='comment', url=None, parent=24719738, text='A single well placed Rc&lt;RefCell&lt;T&gt;&gt; can simplify a design immensely, and it is made obvious if it is present in a performance critical path. 99% of the time, though you don&#x27;t use it because either the design is simple enough not to need to deal with multiple ownership, or the performance requirements make it so that you <i>have</i> to figure out how to avoid it.<p>&gt; it seems to me that it would defeat the point of using Rust at all and go with a strongly-typed GC language.<p>This seems to be a regular comment when talking about Rust (among other &quot;incremental improvement&quot; approaches) and I don&#x27;t really get it: for 95% of the code things are simple enough that you don&#x27;t have to think too much about it, the other 5% can either rely on one of the multiple-ownership safe abstractions or use unsafe. To me this framing sounds like &quot;why do I need seat belts, if I fall of a cliff it won&#x27;t do any good!&quot;')