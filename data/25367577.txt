Item(by='YeGoblynQueenne', descendants=None, kids=[25368588], score=None, time=1607559292, title=None, item_type='comment', url=None, parent=25359562, text='I don&#x27;t understand how this is O(n). You have to go through the set once to select each word and replace a b with o, then you have to go through the set again to search for the new word resulting from the replacement.<p>That is, if Ws is the set of 5-letter words we want the set Rs = {w: w ∈ Ws, w.replace(b,o) ∈ Ws}. You can see that that&#x27;s an O(n²) operation (each ∈ is an iteration over Ws).<p>jayd16 proposed omitting every word that has a b in it from the &quot;search space&quot;. I take this to mean, in practice, that we start by initialising a set Ss = {w: w ∈ Ws, b ∉ w}. Then Rs = {w: w ∈ Ws, w.replace(b,o) ∈ Ss} and the time complexity is O(|Ws||Ss|) which is again O(n²) in the worst case (where Ws = Ss). Note also that some words in Ws may have more than one b and since we are only replacing &quot;a b&quot; (i.e. one b) we may remove valid words this way.<p>In any case, I don&#x27;t see an obvious way to do this in O(n). Maybe I&#x27;m not thinking straight though, it&#x27;s way past bed time.')