Item(by='j0d436', descendants=None, kids=None, score=None, time=1610009354, title=None, item_type='comment', url=None, parent=25662903, text='You&#x27;re right, except you sell your own answer short when you say &quot;curve&quot;. In practice, the set of trade-offs has a much higher dimensionality, and solutions are much less often strictly &quot;wrong&quot; as they are &quot;less optimal&quot; or &quot;out of scope&quot;.<p>Now, you might be thinking &quot;<i>that&#x27;s not true, if I implement a function to add two numbers, and it returns 1+1=3, that&#x27;s wrong. So that&#x27;s a clearly wrong solution.</i>&quot; But I argue: is it wrong? What&#x27;s your context? What are your acceptable trade-offs? In many real-world applications, precise correctness isn&#x27;t always critical. Sometimes, sacrificing accuracy might be acceptable, and may save on cost and&#x2F;or complexity. Other times, that&#x27;s not acceptable. But it&#x27;s worth considering even these types of non-obvious trade-offs, not just the obvious ones. That&#x27;s what an expert engineer does: ask the right questions and identify the right trade-offs, and they&#x27;ve become efficient in that process from experience.<p>An expert sees a problem space as a wide range of trade-off dimensions, including:<p><pre><code>  * computational performance\n  * memory performance\n  * implementation complexity\n  * maintenance complexity (understandability)\n  * accuracy\n  * reusability\n  * design time\n  * reliability\n  * debuggability\n  * bug-proneness\n  * scalability\n  * etc.</code></pre>')