Item(by='simias', descendants=None, kids=[25555314, 25555164, 25555154], score=None, time=1609110563, title=None, item_type='comment', url=None, parent=25554955, text='I think any attempt at defining a strict subset of a language is going to face some pushback like yours, but I do agree that while I agree with most choices this one seems strange. Rolling your own containers is boring and error-prone and won&#x27;t have all the features of the STL.<p>Also, while iostream <i>is</i> a bit of a mess, having it be strongly typed means that it&#x27;s, in my opinion, well worth using over cstdio.<p>One thing I was surprised not to see mentioned here is multiple inheritance. In my experience it gets really messy really fast.<p>Also I really recommend reading the linked archived Boost discussion about a geometry library, it&#x27;s quite funny. It starts with:<p><pre><code>  double distance(mypoint const&amp; a, mypoint const&amp; b)\n  {\n    double dx = a.x - b.x;\n    double dy = a.y - b.y;\n    return sqrt(dx * dx + dy * dy);\n  }\n</code></pre>\nAnd after a couple of pages of refinements ends up with:<p><pre><code>  template &lt;typename G1, typename G2&gt;\n  double distance(G1 const&amp; g1, G2 const&amp; g2)\n  {\n    typedef typename strategy_distance\n        &lt;\n            typename coordinate_system&lt;G1&gt;::type,\n            typename coordinate_system&lt;G2&gt;::type,\n            typename point_type&lt;G1&gt;::type,\n            typename point_type&lt;G2&gt;::type,\n            dimension&lt;G1&gt;::value\n        &gt;::type strategy;\n\n    return dispatch::distance\n        &lt;\n            typename tag&lt;G1&gt;::type,\n            typename tag&lt;G2&gt;::type,\n            G1, G2, strategy\n        &gt;::apply(g1, g2, strategy());\n  }\n</code></pre>\nBut hey, it can compute distances in non-cartesian hyperspaces so that&#x27;s pretty cool.')