Item(by='austincheney', descendants=None, kids=None, score=None, time=1605231360, title=None, item_type='comment', url=None, parent=25071126, text='This makes complete sense for non obvious reasons. I enjoy writing software. I love it so much that I do it more outside work when I am not being paid.<p>First, in order to enjoy a job you have to be able to do the job. In most of my career as a software developer I have rarely written software. Corporate meetings mean time not writing software. Frameworks, gimmicks, excess tools, and other insecurity bullshit mean not actually writing software.<p>Currently I am a junior director managing a help desk. My staff at one point was a headcount of 14. I don’t like the subject matter and would never do this sort of work as a chosen profession but I absolutely love the job. I love it because I am actually doing a real job. I have people to manage, decisions to make, products to build, and still get my hands dirty working help desk tickets. It is sometime stressing, frequently exhausting, and very fulfilling. I don’t feel this writing corporate software.<p>Secondly, it helps to enjoy the people you work with. Corporate software has proven to be an odd dichotomy. On one hand I frequently find that everybody around me is super insecure. The idea of making&#x2F;owning decisions or writing something truly original scares people into health problems. Sadly this isn’t an exaggeration.<p>The times where I have seen this turned around are teams of confident senior developers banding together under weak leadership. In this case the developers are generally secure in their performance and that personal security magnifies as developers come together for support against weakness in the form of soft (interpersonal) skills of their leadership. Most senior developers are pretty candid about their existence as tools to produce a product and just need guidance&#x2F;direction to shield them from the stupidity and indecision further up the chain.<p>Finally there needs to be some level of professional growth. In most cases of writing corporate software this lack of direction only compounds existing problems, which is how you can regularly produce something so absurd as an expert beginner. An expert beginner is a toolsmith who has mastered use of common tools and configurations, like a rockstar ninja, but still can’t engineer any original solution to save their lives. In other words they are supremely good at the things popular among beginners, like becoming a world class expert of reading books for small children or paint by numbers.')