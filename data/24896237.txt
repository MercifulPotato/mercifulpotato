Item(by='anotheryou', descendants=None, kids=[24896277], score=None, time=1603720945, title=None, item_type='comment', url=None, parent=24892599, text='It takes practice. Here is how it works for me for big product projects. Maybe it inspires you:<p>1. Problem definition<p>try to understand the problem (the root might be hidden behind a few whys <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Five_whys" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Five_whys</a> )<p>2. Information Gathering<p>Gather enough more or less random info surrounding the problem. I do this until I feel like there is nothing major hidden from me anymore and I have a good grasp of the topic. This is interviews with people who know more and some googling or finding a book on it. Take notes, this is the first filter for what is important.<p>3. Structuring the Problem Space<p>If you can, try to structure the random info of your notes hierarchically right away. If you can&#x27;t do that right away, dump all info in to a text file, read through it and than try to come up with a structure. I often have a &quot;quick and dirty&quot; inbox I only later refile in to my hierarchy.<p>4. Identify Knowledge Gaps, fill or postpone<p>With a bit of structure you might be able to identify gaps in your knowledge. If they are isolated enough not to change the general outcome of my decision making I just make a note that here is a clarification-todo to handle when making a concrete plan. If they are potential deal-brakers or uncover a bigger topic that needs attention I go back to 2. with this topic.<p>5. Note Ideas, don&#x27;t dive in<p>Often in parallel I already make small notes of possible solutions or solutions to sub-problems, but nothing refined yet. Just enough not too loose any sparking idea. It&#x27;s important not to get lost in the details before having a clear picture of the situation. With that picture done in 1. to 4. I now try to find a solution.<p>6. Research Prior-Art<p>I like to sketch out a first solution and only than research the competition. This way I&#x27;m not destined to follow their footstep and might find a better solution. Anyways: don&#x27;t reinvent the wheel, see what others did.<p>7. Solving big to small<p>Go from big to small. Can you summarize your solution in a hand full of &quot;stages&quot;? With that as a skeleton things become much easier and you don&#x27;t get lost in details. I do the same for sub-stages.<p>8. Full Concept<p>You have a solution sketched out, it looks good. Now go in deep. I try to go through every step of my solution mentally. Like imagining getting dressed to check if you packed everything in your bag for holidays. There will be more questions and clarification-todos popping up. You can solve them now or solve just those you need for the first steps of implementing a solution. Maybe write examples, mockups etc. here. Typically this 3-folds my notes.<p>9. Intermediate Goals and Stepping Stones<p>You have a full-fledged solution specified now. See if you can cut corners, do a proof-of-concept, an MVP or Milestones. If possible try to find a first milestone that already works start to end, just misses everything non-essential in between.<p>10. Build, learn, adjust, iterate<p>Do your first version, adapt your concept with what you learned, do a 2nd version and so on.<p>My approach is a bit watterfall-style and only at 10. becomes agile (unless it involves experiments to fill knowledge gaps). You might want to jump from 3. (structuring the knowledge space) to experiments and RATs quicker depending on the project. I try to limit the scope of my problem in the first place and save big ideas for later so the downsides of waterfall don&#x27;t manifest that much. Just keep in mind the longer your concept the more of it might become obsolete mid way.')