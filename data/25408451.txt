Item(by='efficientsticks', descendants=None, kids=None, score=None, time=1607882030, title=None, item_type='comment', url=None, parent=25398072, text='It&#x27;s good to see entropy being used as the metric to judge passwords instead of complexity rules.<p>As others have commented, this isn&#x27;t sufficient though, and will over-estimate the complexity of worded passphrases or l33t-speak. Password crackers are wise to those generation techniques and will brute-force combinations of those with more direct generation methods instead of generating from the underlying character set at random.<p>Complexity rules backfire if the minimum is done to meet them, like capitalise the first letter, append a number 0 and exclamation mark. A tool like this could (and probably should) check for those special cases and discount them from entropy, assuming conservatively that it&#x27;s a weak password, ie. &quot;P4ssw0rd0!&quot; ~= &quot;p4ssw0rd&quot; ~= &quot;password&quot; ~= 13 bits (a single English word at random).<p>I&#x27;d also add that while that&#x27;s a cool graph, it&#x27;s going to age poorly as FLOPs&#x2F;Watt is still on an upward trend. I wrote a password generator* which takes into account GCloud&#x2F;AWS GPU prices and wholesale energy costs, along with Hashcat metrics, to recommend the number of bits of entropy for passwords. Looking 20 years into the future you&#x27;d probably want something closer to 82 bits entropy than 76, based on my calculations.<p>* <a href="https:&#x2F;&#x2F;github.com&#x2F;aliclark&#x2F;pragmatic-password-generator" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;aliclark&#x2F;pragmatic-password-generator</a>')