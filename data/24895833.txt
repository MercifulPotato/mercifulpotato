Item(by='thu2111', descendants=None, kids=None, score=None, time=1603718402, title=None, item_type='comment', url=None, parent=24893693, text='I&#x27;m pretty sure exceptions are better, for a couple of reasons.<p>The first is that the idea all Go programmers reliably propagate or wrap error codes, without losing important context, is not true. One of my first encounters with a serious Go codebase was at a consulting client, where I had a task to use their API. I sent it some input and got back a 500 Internal Server Error, no other info. OK, not ideal, but it was in development so I asked them to check the logs and find out what was going wrong. Guess what, the logs were useless. It logged at one or two places that an error had occurred, mostly close to the top level HTTP loop, but the actual location where the error was originated had been lost. Several layers in this app would convert error codes from one level of abstraction to another, also losing information. They shrugged, mystified. Just try things until you figure out what the issue is.<p>With exceptions this could not have happened. An exception has a stack trace. The developer needs do no work to get this valuable debugging aid, it&#x27;s always there unless some bad code strips it somehow. Additionally, exceptions can wrap each other as causes, so code can work at high levels of abstraction whilst developers who are debugging can get precise error data from deep down the stack.<p>Another problem is the idea that Go developers never forget to propagate errors. Error handling in Go is tedious and there&#x27;s no visible indication if you forget to do it or don&#x27;t do it properly so sometimes it goes AWOL. The exceptional control flows still exist, just as they would if using exceptions, but now you have to write them manually instead of having the compiler write them for you.<p>A final problem is performance. Go has notoriously quite low performance, the people who say it&#x27;s fast are usually comparing it to something like Python. Scattering hand written error handling code all over the place makes it harder for a compiler to move it out of the hot paths, because it&#x27;s just a bunch of if statements. Exceptions by their nature tell the compiler that those error-handling edges won&#x27;t execute very often, so they can be put out of the way in places that won&#x27;t pollute the icache.')