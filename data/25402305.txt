Item(by='jandrewrogers', descendants=None, kids=[25402772], score=None, time=1607811543, title=None, item_type='comment', url=None, parent=25401976, text='RocksDB has two big limitations that preclude its use for many types of high-performance data infrastructure (which it sounds like the OP&#x27;s use case was). First, its throughput performance is <i>much</i> worse (integer factor) than what can be achieved with a different design for some applications. Second, it isn&#x27;t designed to work well for very large storage volumes. Again, easy to remedy if you design your own storage engine or use an alternative one. There are storage engines that will happily drive a petabyte of storage across a large array of NVMe devices at the theoretical limits of the hardware, though not so much in open source.<p>Another thing to consider is that you lose significant performance in a few different dimensions if your storage I&#x2F;O scheduler design is not tightly coupled to your execution scheduler design. While it requires writing more code it also eliminates a bunch of rough edges. This alone is the reason many database-y applications write their own storage engines. For people that do it for a living, writing an excellent custom storage engine isn&#x27;t that onerous.<p>RocksDB is a fine choice for applications where performance and scale are not paramount or your hardware is limited. On large servers with hefty workloads, you&#x27;ll probably want to use something else.')