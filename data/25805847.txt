Item(by='hayst4ck', descendants=None, kids=None, score=None, time=1610833982, title=None, item_type='comment', url=None, parent=25803598, text='The context is somewhat important.<p>While 508s were being sent, there was also a significant number of 503s (IIRC). A 503 is an absolute hallmark of something reaching max utilization. Sometimes it&#x27;s a bad code push that results in memory bloat and then swap or significantly increased request handling time on a poorly threaded server (think a code push that makes a blocking linear request in a loop), but the vast majority of time an upstream dependency (specifically a data store) has been overloaded.<p>So for whatever reason a data store gets slower. What happens upstream when this happens? The number of incoming requests is constant, but the time each individual thread spends attempting to talk to the data store is constant (or worsening). This means each request blocks longer (resulting in potential thread starvation) or there are more concurrent requests (load) to the data store.<p>This creates a feedback loop of doom: as a data store slows down, its load (the number of requests it&#x27;s handling at once) increases until complete failure.<p>The only way to stop this behavior is by &quot;failing fast.&quot; This is how a circuit breaker works. When the data store starts responding slowly, itâ€™s important not to hammer it with even more load, so your client watches the number of load related failures (or response times) and automatically fails requests immediately without sending it to the data store (circuit breaker). This allows the data store to become unloaded and get out of the doomed feedback loop.')