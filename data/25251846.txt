Item(by='patrec', descendants=None, kids=[25252095, 25252761], score=None, time=1606725316, title=None, item_type='comment', url=None, parent=25250224, text='If you think APL is less expressive than Matlab, you probably haven&#x27;t really grasped it, IMO. Having said that, Matlab is optimized for manipulating matrices and replicating the notation of normal linear algebra and has excellent implementations of basically any numerical algorithm that frequently comes up in this . So writing something like chol(X&#x27;*X+diag(eig(X))) in an APL will look uglier and quite possibly slower and less accurate and  depending on the numerical routines you need, require extra implementation work on your part.<p>But that overhead is constant factor, more or less anything you can express well in matlab can be expressed straightforwardly in APL, too, if you have the right numerical routines. That&#x27;s not true in the other direction though: there&#x27;s a lot of stuff in APL you cannot express adequately in matlab at all. For example J (and these days Dyalog as well IIRC) have an operation called under which basically does this: u(f,g) = x =&gt; f^-1(g(f(x)). So you can write geometric_mean = u(mean, log).<p>It is completely impossible to implement something like &quot;under&quot; in matlab. Admittedly the J implementation at least of deriving a generalized inverse for an arbitrary function f is a somewhat ill-defined hack, but this is still something that is both conceptually and practically quite powerful. Also, whilst Matlab is really clunky for anything that is not a 2D array and hardcodes matrix multiplication as the one inner-product, APL has more powerful abstractions for manipulating arbitrary rank arrays and a more general concept of inner products.<p>Also, APL has some really dumb but cherished-by-the-community ideas that make the language less expressive and much more awkward to learn, e.g. the idea of replicating the terrible defect of normal mathematical notation where - is overloaded for negation and subtraction to every other function.')