Item(by='SloopJon', descendants=None, kids=None, score=None, time=1607200256, title=None, item_type='comment', url=None, parent=25315728, text='&gt; &gt; Long ago &quot;modern&quot; C++ crossed into a territory that I will never understand or use.<p>&gt; Do you know where the line is? C++11? Later versions?<p>It&#x27;s funny to read this, because I purposely avoided C++ for the better part of twenty years after dabbling with it in college--not worth it to deal with so much complexity.  I&#x27;ve started using it in the last couple of years for work, and the modern part is what makes it bearable.<p>C++ is a big beast, so there is a cost to each new standard simply by virtue of adding features.  However, the types of things I want to use in C++14 are pretty simple and worthwhile; e.g., better constexpr functions, and the _t aliases (like std::enable_if_t&lt;&gt;, rather than typename std::enable_if&lt;&gt;::type).  Similarly, C++17 has a few new templates, like std::optional and yes, std::variant, along with ergonomic improvements like the _v aliases (like std::is_floating_point_v&lt;&gt;, rather than std::is_floating_point&lt;&gt;::value).<p>Now that the glacial pace of standardization has been replaced with a three-year cycle, I almost want something like LTS releases.  I use C++11, and a bit of C++14, but when is it safe to use C++17 or C++20?')