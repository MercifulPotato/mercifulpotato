Item(by='q3k', descendants=None, kids=None, score=None, time=1603128862, title=None, item_type='comment', url=None, parent=24828318, text='&gt; I really don&#x27;t want to have to wade through library choices and configuration each time I start a project.<p>I think this is a false dichotomy. You certainly can have an opinionated way to setup a project that 90% of people use at first, with some way to customize things as you go along, or at least a way to replicate the standard setup with whatever tooling is more conducive to the user&#x27;s vision.<p>Flask is a good example of this. You start out with a minimal single-file app, with a somewhat magical tool (`flask`) that will take care of starting a debug server for you and whatnot. As you go along, you can grow your app according to the official manual (&#x27;project layout&#x27;, &#x27;growing big&#x27; manual pages, using blueprints and application factories and other typical Flask patterns), or you can do something that fits more to your existing codebase. You can also keep using the `flask` tool, or write your own equivalent. Or skip it entirely and express everything as Python scripts.<p>Even with the quite more complex and scaffoldy Django, you&#x27;re quite able to rejigger a scaffolded app easily into whatever structure you want, as long as you&#x27;re ready to dust off the “Forbidden PYTHONPATH and DJANGO_SETTINGS tricks” book.')