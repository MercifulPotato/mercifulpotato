Item(by='hardwaresofton', descendants=None, kids=[25715130], score=None, time=1610250066, title=None, item_type='comment', url=None, parent=25707546, text='&gt;  Because building things quickly is important and Rust makes you think a lot about memory management. This is a fine thing for performance critical systems, but for systems where Python’s performance could be described as adequate, the extra performance Rust offers is immaterial. Of course, Rust gives you a bit more type safety than Go as well, but still not enough to justify trading off so much development velocity (or rather, type safety and correctness simply aren’t nearly as important as velocity from an economic perspective).<p>I think this really depends on the <i>the higher level</i> abstraction you get to use in rust -- case in point being the original post. I&#x27;m not sure if this is a result of the rust code just being done that much later but the Rust in there is much simpler to read and understand than getting stated with a golang codebase (whether via kubebuilder, or others) outside of scaffolding your code base -- there&#x27;s just less moving parts and less noise.<p>Golang shines when it comes to developer fungibility -- it&#x27;s simpler to onboard, train, and hire go developers. It&#x27;s also easier for those developers to make mistakes, but compile type typechecking will constrict the mistake &quot;space&quot; (more so than ruby&#x2F;python&#x2F;vanilla js), and performance will get a boost. If Java is the mouse trap because C&#x2F;C++ were too hard, Go is a better mouse trap on almost every axis (though I think generics in Go 2 are sorely needed).<p>&gt; Rust is getting better all the time—non-lexical lifetimes and rust-analyzer have provided a surprising improvement in development velocity, but Go is still in another class. Personally I think Go is the best language for developing quickly—even better than Python for non-toy projects (I say that as one with 15 years of Python experience and almost a decade of ago experience).<p>I agree here, though I personally favor Typescript for building quickly (at least it is for me) if you add Typescript to it. Performance is great because most simple things are not CPU bound at the API layer, ecosystem is enormous (finding value can be difficult), and it&#x27;s relatively easy to deploy (though Go is easier). I largely stopped keeping track of Go once I&#x27;d written some stuff in rust, but I do still recognize it as an excellent choice for building systems quickly and with some (type) protection as opposed to other options, with easy deploys.<p>I&#x27;d love to get your thoughts on recent &quot;modern&quot; Python and it&#x27;s shiny parts and warts though. I used it last year for a client and found the modern stack to still be pretty disappointing compared to what I knew was possible with server-side JS -- typing use being sort of incomplete still (mypy was a little awkward to use), async still being a little bit awkward, GIL still being a thing.')