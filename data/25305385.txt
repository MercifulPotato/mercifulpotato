Item(by='jillesvangurp', descendants=None, kids=None, score=None, time=1607103946, title=None, item_type='comment', url=None, parent=25301463, text='Well, Spring&#x27;s r2dbc (reactive db abstraction) works great with co-routines on top of Spring&#x27;s reactor framework. The integration for that is well supported by Spring. Drivers that support asynchronous IO, at this point include most obvious mainstream databases. I&#x27;d expect that stuff will work with Loom as well. Though we may have to wait a while for Spring to release support for that.<p>Oracle has not gotten around to supporting Oracle DB with r2dbc just yet apparently: <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;58813658&#x2F;r2dbc-oracle-database-support" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;58813658&#x2F;r2dbc-oracle-da...</a> but it appears to be in the works. Given that they are developing Loom, they probably aim to have that stuff working together perfectly with their own DB. If&#x2F;when it does, it will work with kotlin co-routines as well. Basically, if it runs with Java, you can use it from Kotlin and trivially wrap it with a co-routine. I&#x27;ve done this recently for several other database that support async IO with some callback mechanism.<p>That old Java driver will also work fine with Kotlin &amp; co-routines as well However, you probably want to be using the IO Dispatcher to ensure you have enough threads to deal with it blocking your process thread. So your server doesn&#x27;t hang. That kind of is what structured concurrency is about. Of course, most blocking IO database drivers would typically use some connection pool backed by a (real) thread pool. Not sure how Loom &#x27;magically&#x27; deals with interrupting IO blocked virtual threads but I have hunch that just means everything on the underlying OS thread ends up being blocked. Using virtual threads in a connection pool is probably going to end in tears. I&#x27;m not aware of any magic that Loom provides that addresses that other than just allowing you to use either OS threads (real?) or virtual threads (aka. fibers, co-routines, green threads, light weight threads, etc.).')