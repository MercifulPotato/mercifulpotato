Item(by='cxr', descendants=None, kids=[25502103], score=None, time=1608580113, title=None, item_type='comment', url=None, parent=25497420, text='Hi, Michael.<p>I&#x27;m familiar with Oberon and have contributed to Peter De Wachter&#x27;s Norebo bootstrapping scripts.  I wrote a recent comment in another thread about the use of &quot;applicative literature&quot; in pedagogy. &lt;<a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25490826" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25490826</a>&gt;  Rikke&#x27;s README for this project—and many other projects related to Oberon—end up describing processes in natural language, with steps to be performed manually, e.g. to change the bootloader.  This is not special to Oberon, though.  The gist of my argument is that pretty much every student and professor already has a suitable environment for handling process documents that could be adapted to be also executable by a machine.  Do you have any thoughts about this?  Do you have any experience trying to work with anything that follows Knuth&#x27;s &quot;literate programming&quot; paradigm (including difficulties you&#x27;ve encountered)?<p>Anyway, nice work by you and your students.  Wirth&#x27;s RISC machine has a simplicity that others don&#x27;t, which makes it good for teaching, but it makes some pragmatic choices that make it more realistic than similar attempts that result in toy computers that are a little too toy-like.  It&#x27;s work like this that makes for a decent transition after going from not knowing anything about a computer to hands-on understanding using a <i>practical</i> fantasy system like Wirth&#x27;s to a full-on &quot;industry-approved&quot; instruction set RISC-V.')