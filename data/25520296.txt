Item(by='chriswarbo', descendants=None, kids=None, score=None, time=1608747001, title=None, item_type='comment', url=None, parent=25517004, text='&gt; “Tail call” could be interpreted as any call from a function’s end, even one that adds to the stack.<p>Tail calls might add to the stack, or they might not; but they don&#x27;t <i>need</i> to (whether or not they do depends on the particular language, implementation and possibly compiler options). If a call needs to use stack space (or equivalent, e.g. growing the term size in a rewrite system), then it&#x27;s certainly <i>not</i> a tail call.<p>&gt; No, it’s not “tail call”, it’s “tail recursion” or “tail-end recursion”.<p>I wouldn&#x27;t be so dogmatic about terminology, especially since it&#x27;s at odds with others&#x27; usage. This article is a particularly poor choice to get hung up on too, since most of the examples use a pair of mutually-recursive functions (go+eval or up+down), which both call each other and themselves (depending on which branch is taken). How do they fit into your overly-precise terminology?<p>What about the top-level &#x27;map&#x27; definitions themselves? Most of them consist of a single call to the go&#x2F;down function: that doesn&#x27;t need to add to the stack. Would you insist on naming that &#x27;tail recursion&#x27; or &#x27;tail-end recursion&#x27;, even though there are no calls back into these functions from anywhere else?')