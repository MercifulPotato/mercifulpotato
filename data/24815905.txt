Item(by='acjohnson55', descendants=None, kids=[24816066, 24818600, 24816556, 24816799], score=None, time=1603002335, title=None, item_type='comment', url=None, parent=24815640, text='I am super excited about Temporal. I think one of the biggest underacknowledged problems in business software is the way executional details pervade business logic. As soon as your critical logic doesn&#x27;t simply exist in a request-response logic, it becomes fragmented over queues, scheduled jobs, ETLs, microservices, functions, etc. The actual processes that matter become Rube Goldberg machines that are hard to understand, maintain, observe, debug, and analyze. Not to mention hard to depict to the actual end user.<p>When I read the article &quot;Why the Serverless Revolution Has Stalled&quot; [1] on here a couple weeks ago, my reaction was that the reason is that serverless doesn&#x27;t solve the business logic issue. Serverless removes operational details of servers, but often exacerbates process fragmentation. And the need to have &quot;serverful&quot; operational expertise is replaced by the need for serverless expertise. At least right now, this new expertise is far from trivial.<p>I haven&#x27;t yet used Temporal, but I&#x27;ve spent a lot of time evaluating it, and its predecessor, Cadence. The idea is to model long-running business logic essentially as procedures, in ordinary code. These are called Workflows, and must be free of external effects. External effects are carried out by Activities, and the scheduling and tracking of results are handled by the Temporal runtime. The upshot is that you get to write workflows as though they have no time constraints. It&#x27;s like async programming, but liberated from the confines of a OS process or machine.<p>If it turns out to be a useful home for business logic (I understand that it has at Uber), I think the next frontier is integrating it within UI frameworks. I&#x27;m imagining the next Rails being something like Next.js + Temporal. I still have a bunch of questions in my mind, like how to decide which data lives in Temporal vs. a OLTP database. Someone with more experience using Temporal probably could better answer this.<p>One of the reasons I&#x27;m particularly interested in this topic is because my company, Better.com, uses our own homebuilt workflow engine to model the days-long, multi-user business project of mortgage origination. In our case, our workflow engine is actually built as part of a full-stack framework that goes well beyond Temporal in scope, but it&#x27;s not built as a generic platform, and we look at Temporal for inspiration on where things might be going.<p>[1] <a href="https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;serverless-stalled&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.infoq.com&#x2F;articles&#x2F;serverless-stalled&#x2F;</a><p>[2] I discuss this a bit here <a href="https:&#x2F;&#x2F;www.themuse.com&#x2F;advice&#x2F;engineering-manager-better-alan-johnson" rel="nofollow">https:&#x2F;&#x2F;www.themuse.com&#x2F;advice&#x2F;engineering-manager-better-al...</a>')