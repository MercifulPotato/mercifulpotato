Item(by='tucnak', descendants=None, kids=None, score=None, time=1603528368, title=None, item_type='comment', url=None, parent=24870039, text='I don&#x27;t think Rust is very suitable for GPU programming, &quot;first–class&quot; or whatever. And it has not much to do with Rust itself. We have seen time and time again people write deeply inefficient overkill kernels in C for some basic stuff really. I should expect this would happen to Rust, too. In order to tackle this right, it seems, we really should treat GPUs and similar coprocessors for what they are—deeply data–parallel computation accelerators. You must design your pipelines with that in mind; this stuff is also very sensitive to data locality, as you might expect. Now, take a look at this Haskell-inspired language [1], which I think is much more viable in the long–term as far as data parallelism and composition goes. Admittedly it&#x27;s not in itself designed for graphics, but that&#x27;s okay. From their website: &quot;Futhark is a small programming language designed to be compiled to efficient parallel code. It is a statically typed, data-parallel, and purely functional array language in the ML family, and comes with a heavily optimising ahead-of-time compiler that presently generates either GPU code via CUDA and OpenCL, or multi-threaded CPU code.&quot;<p>I can see that very much unlike Futhark, Rust-GPU is deeply graphics focused, but I argue that a very similar language can be made to accomodate if not all then most shader-specific things. In which case, Futhark would be a very good place to start.<p>[1]: <a href="https:&#x2F;&#x2F;futhark-lang.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;futhark-lang.org&#x2F;</a>')