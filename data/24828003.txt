Item(by='Zhyl', descendants=None, kids=[24828906], score=None, time=1603125422, title=None, item_type='comment', url=None, parent=24826873, text='s&#x2F;Weather&#x2F;Whether&#x2F;<p>I think this post highlights something important - programming and automation have a very broad applicability, and it doesn&#x27;t matter what industry you work in, there&#x27;s likely some aspect of it that would benefit from some understanding of what computers do well and being able to take advantage of that.<p>Generalised, industry agnostic versions of examples from the article.<p>* Applets that integrate with your tool of choice.<p>Practically native to the world of Finance, showcased here with modelling and animation tools, but the principle could be applied to any industry tool with an API. Video editing, CAD, Word Processing - every industry has their boilerplate or composable tasks which could have some assistance from scripts and extensions that fit your use case outside of what the programme would natively support.<p>* Workflow automation<p>We see here the &#x27;pipeline&#x27; of storyboards becoming assets, becoming scenes, becoming films - however every job has processes, documents to review, authorisations and oversight that needs to occur.<p>A friend of mine once said &#x27;Just use JIRA&#x27;. It doesn&#x27;t matter what it is, track with JIRA. In contrast. a colleague of mine once opined: &quot;having a system that passes documents around is the easy part. Having a system that allows all the right people the right access at the right times, enforces all the restrictions you need it to and asserts that all requirements are met and tests are passed is <i>hard</i>. And I believe him. He&#x27;s currently the architect on a Â£20m project that is essentially just a workflow&#x2F;pipeline system.<p>* Tiny one-off tasks<p>One of the key parts of why I recommend &#x27;Automate the Boring Stuff with Python&#x27; [0] to beginners is the books central thesis: anyone can program, anyone can benefit from programming. It shows how creating small, throwaway scripts can greatly reduce some manual tasks. I think the world would be a less stressful, more efficient place if more people knew about shell commands, regular expressions etc. I&#x27;ve seen people spend hours, even days painstakingly doing tasks that could have been done in seconds by a well placed `sed` or a short perl script. To that end:<p>* Applying programming concepts to everyday life.<p>Notably here we have dependency trees shown in the form of the workflow tools, but &#x27;compilation time&#x27; checks could be useful in so many industries that currently don&#x27;t use a lot of technology. Change a part of a document that is depended on by other documents&#x2F;sections? Flag that the downstreams need review.<p>In short, this article gives a good answer and some excellent examples to the question &#x27;why should I learn to program&#x27; or, even, &#x27;why should everyone learn to program? why should we teach coding in schools?&#x27;.<p>[0] - <a href="https:&#x2F;&#x2F;automatetheboringstuff.com" rel="nofollow">https:&#x2F;&#x2F;automatetheboringstuff.com</a>')