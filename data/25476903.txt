Item(by='pitay', descendants=None, kids=[25478751], score=None, time=1608379377, title=None, item_type='comment', url=None, parent=25476007, text='Your original function definition here:<p><pre><code>  def find_xy_coordinate_of_dogs_cats_and_baboons_in_picture(picture: Picture) -&gt; List[XYCoordinates]:\n</code></pre>\nCan be made better by turning it into this:<p><pre><code>  def find_dogs_cats_and_baboons(picture: Picture) -&gt; List[XYCoord]:\n</code></pre>\nReasoning:<p>&#x27;xy_coordinate_of_&#x27; taken out because XY coordinates are already in the return type.  &#x27;_in_picture&#x27; taken out because the information is already in the &#x27;picture: Picture&#x27; parameter.  The return type &#x27;List[XYCoordinates]&#x27; changed to &#x27;List[XYCoord]&#x27; because Coord is well known as an abbreviation for a coordinate and having XY in front of it makes it completely obvious.  Removed the &#x27;s&#x27; from the end of the return type because it is already contained in a list and shouldn&#x27;t be pluralised.  It would be pluralised if you are returning a list of lists of coordinates.<p>There are problems with having huge function names, especially if other programmers need to use the functions you write in their code.  One is the amount of screen space needed to use your function, this bites when the could be many functions with long names used in a single expression, long names can be harder to understand in that context.  There are reasons that mathematical operators in programming languages are usually one character, things like &#x27;+ * - &#x2F;&#x27;, it should be obvious the problems people writing in that language would have if the operator names were replaced with things like &#x27;multiply&#x27;.  Now imagine mathematics being written in a verbose English style, it is not done this way because of all the extra effort it would take to write it, and all the extra effort it would take to understand it.')