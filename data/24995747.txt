Item(by='graderjs', descendants=None, kids=None, score=None, time=1604551723, title=None, item_type='comment', url=None, parent=24995633, text='Hello friends<p>I&#x27;m excited to announce Grader.JS<p>It&#x27;s a little project I&#x27;ve been working on the last 3 weeks.<p>It lets you build cross-platform desktop GUI apps using the power of Node.JS and HTML.<p>It was motivated by the desire to have a way for me to build native binaries using my existing HTML skills.<p>I looked at electron, and some frameworks like Qt, and Tauri (which uses Rust), but the main problems I encountered were:<p>- Electron is full featured, but maybe too much so. Big binaries and Chromium inside each one. Too many APIs and they even need to fork Chromium so you don&#x27;t have parity with latest browser features.<p>- Tauri looks good. Simpler and produces miniscule and fast binaries, but I didn&#x27;t want to learn a new language right now. I wanted to make something right now, and also feel confident that I&#x27;d be able to use all the HTML I already know.<p>-  I really like the idea of Qt, and experimented with the Node binding for it. But my main concern was the barrier to access that comprised of having a dedicated build set up for Qt, and also learning to think in its native GUI paradigm.<p>I had a bit of a think and decided that:<p>- I could use my existing knowledge of Chrome DevTools protocol to provide a sophisticated API that could scale to almost any use case, especially if combined with Node.JS<p>- Many people already have Chrome installed so there was no need to bundle chromium inside my binary. And if it wasn&#x27;t installed, I could download it once and then it could be used for all apps built this way.<p>- I could use the &#x27;--app&#x27; flag for chrome to create a standalone GUI window with OS title bar, then use my existing knowledge of HTML to build a UI in that window.<p>- I could package the code into binaries with nexe, and shrink those using upx.<p>These realizations gave me the idea that I could create, with a bit of scaffolding and a bit of scripting a way for anybody to create a desktop binary using Node.JS and HTML, that was smaller than electron, and easier than Tauri or Qt. So i decided to turn it into an open source project.<p>I looked around and many others have had this idea before. It&#x27;s not that different to using the system webview, or even (a la Carlo) using Chrome. But Carlo was discontinued and I thought the API could be better, and using the system webview introduced integration complexity and limited hour I could use DevTools protocol to control it. I thought the approach i would take was simpler so i decided it was definitely worth the effort to have a tool with the API i wanted, that i understood (if not fully, as i would come to see during development!), and that i owned and could use how i liked.<p>But development took me 3 times as long as i anticipated, because as i discovered, i didn&#x27;t understand much about how Node worked at the intersection with the OS, and modules like child_process behaved slightly differently across platforms.<p>So i had to work out those things to try to make everything as consistent and platforms as possible.')