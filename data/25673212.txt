Item(by='gretch', descendants=None, kids=None, score=None, time=1610037447, title=None, item_type='comment', url=None, parent=25672383, text='I disagree with this, here&#x27;s why:<p>1. If you try to make the name descriptive, it could possibly be accurate, but lack precision. To take on your example &quot;Customer Management Tools&quot; - ultimately there&#x27;s a whole host of things all over the stack that could be considered &quot;Customer Management Tools&quot;. Some words even come with organizational _baggage_ where stakeholders immediately think &quot;ah we&#x27;ve been waiting on this for years&quot; and you have to explain, &quot;no this doesn&#x27;t do that at all&quot;<p>2. Software can change in functionality or sometimes even purpose over the course of it&#x27;s life time (let&#x27;s say 2-4 years, or longer). While the name is typically easy to change in user facing parts of the product, repository names and URIs are the harder parts and typically get cemented after creation.<p>If you combine points 1 and 2, you get something that&#x27;s worse than wrong or cryptic - you can get naming that is actively misleading<p>I&#x27;ve seen real examples where someone started a project called &quot;promo renderer&quot;. 3 years later new ppl onboarding onto the project will say &quot;this renders promos? where&#x27;s the code that shows the promos?&quot; and the answer will be &quot;well this doesn&#x27;t technically render the promos, it&#x27;s a configuration system which helps decides which promos get rendered; the actual render is another system&quot;. Unfortunately, it was almost impossible for the day 1 dev to see that level of nuance&#x2F;precision.<p>My final argument is not necessarily that detached names are better, but there are definitely sharp downsides which I&#x27;ve felt that you have not considered.')