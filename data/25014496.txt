Item(by='chongli', descendants=None, kids=None, score=None, time=1604748730, title=None, item_type='comment', url=None, parent=25013766, text='<i>Do you agree that most imperative programmers would not come up with this solution on their own, if you didn&#x27;t teach them the &quot;accumulator pattern&quot;?</i><p>Background: I’m currently working as a full time assistant for the first year computer science course at my university. We have around 1800 people enrolled in the class including over 1000 first year CS students. Many of our first years were exposed to imperative programming in high school, either at home or with a high school CS class.<p>The course we teach is based on the book HTDP and uses a purely functional teaching dialect of Racket. Many of our students struggle to figure out how to use the different recursion patterns such as accumulative recursion and mutual recursion.<p>I’m not the GP but I will answer your question anyway: yes, I agree that most imperative programmers would not come up with that solution. I have witnessed it myself first hand.<p>Where I disagree is with any implication or suggestion that they <i>should</i>, given no prior functional programming experience. Accumulative recursion is a standard pattern in functional programming but if you’re an imperative programmer you may not have ever needed to learn it. Therefore, I think it would  be unreasonable to expect you to come up with it on the fly.')