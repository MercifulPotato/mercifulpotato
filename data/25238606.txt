Item(by='wenc', descendants=None, kids=None, score=None, time=1606582019, title=None, item_type='comment', url=None, parent=25230577, text='I&#x27;m deep into the dataframe&#x2F;SQL way of doing things but I also use Excel a lot.<p>In my opinion, spreadsheets provide a different paradigm that dataframes do not supplant. In theory anything in Excel can be done in a programming language (that&#x27;s obvious). In practice, certain tasks are simply easier do in Excel.<p>Excel is essentially a functional reactive calculator on a visual grid. It lets people quickly create models to test ad-hoc ideas. Because it works at a cell-level, ad-hoc calculations are much simpler. Because it is reactive, you can test different scenarios without recompiling or re-running.<p>Sure, it has its limitations -- which is why multidimensional modeling tools like Quantrix exist. Also it&#x27;s true that many people use Excel far beyond its intended purposes (I&#x27;ve come across some really complex Excel sheets with VBA that really should be in a SQL database). And yes, the dataframe paradigm is powerful for structured&#x2F;systematic and reproducible&#x2F;replayable transformations of data, e.g. column&#x2F;row operations, aggregations, filtering.<p>However, the very structure that makes dataframes so powerful and consistent also constrains it.<p>In a spreadsheet, you can break a formula at specific cells (for exceptions etc). You can do that programmatically in a dataframe too, but it&#x27;s a less natural operation which requires ad-hoc coding, whereas in a spreadsheet, you just head over to the cell and change the formula. Or take operations that are easily done via copy-and-pasting, say, like lagging a column by 2 but only between rows 23-65 and skipping certain rows because they&#x27;re say, weekends&#x2F;holidays. In Excel, you can carry this out by just manipulating the data directly i.e. physically moving cells around. In a dataframe, you have to extract the required rows, apply the lag operator, and then reinsert the lagged data (and reset indices, or do vertical concatenate) etc. I manage my personal cash flow and do scenario analyses of different kinds (financial, probabilistic, etc.) in Google sheets (and not a database or dataframe) precisely because I can introduce exceptions in the table and perform ad-hoc tasks like test scenarios in real-time easily. If I want to check an idea out, say the calculation of airflow in an aircraft cabin, a spreadsheet (and not a dataframe) is what I&#x27;d reach for first.<p>Navigationally, a spreadsheet also lets you &quot;touch&quot; data and get a feel for it in a way that dataframes don&#x27;t (in a  programming language, you&#x27;re typically always working with a subset view of a dataframe, e.g. SELECT TOP 1000 * FROM x, or df.head(3) -- these paradigms are the default because of the inherent assumption that all operations have to scale to the largest of datasets). In exploratory data analysis, it&#x27;s super important to be able to see and feel the data because that&#x27;s how you discover inconsistencies, sentinel values, exceptions, etc. Spreadsheets give you a low-friction interface (like filter&#x2F;sort and freeze rows) and a set of powerful functional tools out of the box that generally beats any CSV viewer.')