Item(by='setr', descendants=None, kids=None, score=None, time=1607801256, title=None, item_type='comment', url=None, parent=25395415, text='I think the ideal is really that a student should be capable of going into the world and picking up a new technology within the same area without too much trouble — I may have used ANTLR for a class, but I should also understand it well enough to write my own parser, or start looking into other parsers.<p>But if the gap is such that knowing ANTLR doesn’t really help me use packrat parsers (haven’t used them myself, so I don’t know) then it’s a gap probably worth filling.<p>But ideally students should learn the fundamental architecture&#x2F;algorithms, not the specific tools, popular algorithms &amp; implementations, and all the accidental complexity that came with it.<p>Which is where the industry vs academia problem usually comes in — industry often only cares about knowledge of a particular tool, and only sometimes cares about knowledge-transferability (I think largely because HR exists, and operates independently of the actual engineer making the request, with the first pass review).<p>The company hires for Hadoop, the university teaches distributed systems, and ideally the student can be trained in Hadoop specific in short order.<p>India also offers an example of the extreme alternatives — heavily industry driven courses focusing on specific tools, and you end up with students having practical knowledge for current tooling... but no ability to transfer it. Like the kind of resource who refuses to program C# because they’re a Java developer, and it’s all they know')