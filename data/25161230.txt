Item(by='hajile', descendants=None, kids=None, score=None, time=1605885472, title=None, item_type='comment', url=None, parent=25160492, text='&gt; I don&#x27;t have numbers on that, though I think a sibling comment did refer to some.<p>I&#x27;ve read that paper in the past and it doesn&#x27;t actually answer most of the questions I asked above. It only says that X bug existed in some prior git commit. Maybe the dev caught that bug and fixed it before the PR with the commit was merged. Maybe it was caught in code review. Maybe it was theoretically possible within the function, but not within the actual program&#x27;s use of that function. Maybe the time spent catching those bugs was less than the time it would take to add types.<p>&gt; they allow me to not write some of the unit tests I&#x27;d written otherwise<p>A `typeof` assertion or similar is hardly more work and continues to function once the TS types have been stripped. If you expect to interact with the outside world, then you <i>must</i> test against unexpected types. If not, then good docs are still better (see below). Meanwhile, in every real-world TS project I&#x27;ve worked on, you wind up with tons of &quot;template soup&quot; where devs spend tons of time trying to find out which variant makes the type checker happy (or just giving up and slipping in an `any` type)<p>&gt; Yes, I still have to write documentation, but just iterating the types is not documentation?<p>I have a function that takes a string and returns a boolean. What does it do?<p>It&#x27;s likely that I can pass it <i>any</i> string, but there&#x27;s a strong possibility that the function can&#x27;t handle any random string. Does that boolean mean it&#x27;s a test, that something was successful, or something else? What about side effects?<p>By the time you&#x27;re done documenting this, when someone glances at the docs, they&#x27;ll probably not worry very much about the types because they&#x27;ll be obvious. Why write up a bunch of complex types when a simple, human-readable doc string does types and so much more?')