Item(by='julik', descendants=None, kids=None, score=None, time=1610206875, title=None, item_type='comment', url=None, parent=25700724, text='Indeed, but I don&#x27;t see as much issue with things which are freeze-able. You can Marshal.dump cyclic structures already with no issue. What seems to be the culprit at the moment is changing the method definitions &#x2F; module composition of modules which participate in exchanges between Ractors. A lot of Ruby modules define constants dynamically, prepend modules to patch missing or broken functionality on existing modules, modify constants to patch bugs. Since there is no compile step &#x2F; monomorphisation ahead of time it is likely that a program will be evolving after the VM has started and all the code has been loaded. I do not see the Ractor messaging setup covering it well at the moment. Maybe Ractor messages should be their own type which is only allowed to contain marshalable objects, and inside a Ractor the VM must be able to &quot;replay&quot; the same code structure mutations as the the entire VM (or those mutations must be cloned into the Ractor where appropriate).<p>While a lot of people scream that &quot;you should not monkeypatch&quot; (and it is pretty much always a good idea not to) it is not always practical, given the fact that a lot of software produced is imperfect and does need careful patching sometimes, and Ruby is great at allowing it.')