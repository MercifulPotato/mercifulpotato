Item(by='hlandau', descendants=None, kids=[24710812], score=None, time=1602092307, title=None, item_type='comment', url=None, parent=24710314, text='<a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> is a scheme, not a protocol. In retrospect, it probably should have been called &quot;www:&#x2F;&#x2F;&quot; and &quot;wwws:&#x2F;&#x2F;&quot; rather than <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> and <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a>, because a single scheme can potentially be resolved via several different protocols. Consider that <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> does not necessarily imply unencrypted access, due to the opportunistic encryption specification (though this encryption is not MitM-secure).<p>Also note that because <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> and <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> are different schemes, there is no requirement that they serve the same website. <a href="http:&#x2F;&#x2F;example.com&#x2F;foo" rel="nofollow">http:&#x2F;&#x2F;example.com&#x2F;foo</a> and <a href="https:&#x2F;&#x2F;example.com&#x2F;foo" rel="nofollow">https:&#x2F;&#x2F;example.com&#x2F;foo</a> could be completely different resources, or completely different websites. An opportunistically encrypted load of an <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> URL still needs to load the <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> website, not the <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> one. Though opting in to HSTS eliminates this distinction.<p>For that matter, HTTP&#x2F;1.1 allows full URLs to be specified in the request line, as an alternative to the traditional &quot;Host&quot; header. This is usually only used when using HTTP proxies:<p><pre><code>  GET https:&#x2F;&#x2F;example.com&#x2F;foo HTTP&#x2F;1.1\n  ...\n</code></pre>\nbut what is interesting is since this also includes the scheme, it potentially allows you to do something very peculiar: theoretically you could access an <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> logical resource over an unencrypted HTTP&#x2F;1.1 connection, e.g. by telnetting to example.com:80 and issuing &quot;GET <a href="https:&#x2F;&#x2F;example.com&#x2F;foo" rel="nofollow">https:&#x2F;&#x2F;example.com&#x2F;foo</a> HTTP&#x2F;1.1&quot;. It would of course be insane to support this, but <i>if</i> one disregards the fact that <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> is supposed to invariably imply secure communication, theoretically even <a href="https:&#x2F;&#x2F;" rel="nofollow">https:&#x2F;&#x2F;</a> resources could be loaded unencrypted, just as <a href="http:&#x2F;&#x2F;" rel="nofollow">http:&#x2F;&#x2F;</a> resources can be loaded encrypted using opportunistic encryption.<p>In short: scheme and protocol are different things, and for good reason.<p>URIs are resource identifiers. They exist to identify a resource, not how to access it. Tying those resource identifiers to a means of resolution would unnecessarily couple it to a resolution mechanism and thereby reduce the universality and permanence of URIs. URIs which are URLs are closer to describing a means of access but fundamentally there&#x27;s still an interest in providing enough degrees of indirection that the longevity and permanence of an URL is maximised.')