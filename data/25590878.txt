Item(by='mjfisher', descendants=None, kids=[25591194], score=None, time=1609404707, title=None, item_type='comment', url=None, parent=25588898, text='One of the striking things about serverless development that is less obvious from the outset is how it blurs the lines between application and infrastructure.<p>Deployment of a service is rarely in practice just deployment of new code to an already provisioned lambda - because that lambda can do nothing in isolation. Instead, it tends to be the lambda alongside an SQS queue and a trigger, and an S3 bucket; or an API Gateway that links an authorizer to the Lambda&#x27;s code. Because of that, evolution and development of the application tends to require evolution and development of those surrounding infrastructure pieces in tandem.<p>As a result, managing the infrastructure of your serverless service is often most naturally done alongside the application code itself - indeed, the distinction becomes somewhat meaningless. That also means the engineers developing the service require the ability to own and operate the infrastructure as well. That may or may not be well served by Terraform. It&#x27;s a tool I absolutely love for mutable, stateful infrastructure, but something like the Serverless Framework or AWS SAM can be a much lower-friction and more natural fit for serverless work.')