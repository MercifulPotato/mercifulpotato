Item(by='lmm', descendants=None, kids=[25526141], score=None, time=1608779190, title=None, item_type='comment', url=None, parent=25523042, text='&gt;  There is precisely zero difference in guarantees of things working or building or whatever between you rebasing or merging a branch into master. In fact, funnily enough, if you actually do testing&#x2F;CI correctly, issuing a &quot;git merge feature-branch&quot; command to land things in master will, with high likelihood do a rebase rather than creating a merge commit. This is because you will have pre-merged (or equivalently, as far as testing the right thins is concerned, rebased) master into your feature branch first. Because that&#x27;s the only way to actually test the right thing (the state of the code as it will be once it lands it master).<p>The head commit on master is the same, but the state of previous commits from your branch becomes different and untested, and quite possibly broken. And presumably you valued that commit history on your branch, or why keep them at all? If you want master&#x27;s history to only reflect the sequence of features landing master, squash-merging is a much better way to achieve that than rebasing - it doesn&#x27;t create a fictional commit history, just the mega-commits you wanted. Future bisects will land you on a mega-commit, but at least you don&#x27;t have to handle a bunch of non-compiling states on the way there.')