Item(by='ludocode', descendants=None, kids=[25788443], score=None, time=1610694911, title=None, item_type='comment', url=None, parent=25783617, text='This article doesn&#x27;t really make it clear but the merge sort discussion is specifically about glibc&#x27;s implementation of qsort(). glibc&#x27;s qsort() and Wine&#x27;s qsort() are the only ones I know of that use merge sort to implement qsort(). Most implementations use quick sort.<p>I recently did my own benchmarking on various qsort()s since I was trying to implement a faster one. The various BSDs and macOS qsort() are all faster than glibc at sorting integers and they don&#x27;t allocate memory:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;ludocode&#x2F;pottery&#x2F;tree&#x2F;master&#x2F;examples&#x2F;pottery&#x2F;qsort" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ludocode&#x2F;pottery&#x2F;tree&#x2F;master&#x2F;examples&#x2F;pot...</a><p>Of course sorting is much faster if you can inline the comparator so a templated sort algorithm is always going to be faster than a function that takes a function pointer. But this does not require C++; it can be done in plain C. The templated intro_sort from Pottery (linked above) is competitive with std::sort, as are the excellent swensort&#x2F;sort templates:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;swenson&#x2F;sort" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;swenson&#x2F;sort</a>')