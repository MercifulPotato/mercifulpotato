Item(by='jodrellblank', descendants=None, kids=None, score=None, time=1611612958, title=None, item_type='comment', url=None, parent=25905166, text='Ever seen one of those prank videos where someone is in the shower rinsing shampoo off their head, and the prankster leans over the shower wall and squirts a bit more shampoo onto their head, and the prankee gets more confused and annoyed when they keep rinsing &quot;endless&quot; amounts of shampoo that should be done by now?<p>Buffer overflow and &quot;unsafe&quot; code is like that - the showering person isn&#x27;t painting or equating, they&#x27;re expecting an end condition &quot;when the water coming off my head stops having soapy lather and runs clear&quot; which works every time, but is not a &quot;safe&quot; pattern - it assumes no malicious intervention. Someone else can change the surrounding circumstances so that the end condition doesn&#x27;t happen when it should, and &quot;cause&quot; the rinse routine to keep running for longer and longer.<p>Buffer overflow attacks are like this, they&#x27;re expecting to read some data and stop when they get to an end condition; when badly designed an attacker can change something to delay the end condition and cause more data to be read. Inside a computer there are no such things as &quot;separate applications&quot; or &quot;security boundaries&quot; or &quot;program data&quot; or &quot;OS instructions&quot;, except that the patterns of numbers are supposed to be interpreted as those things. If a program can write &quot;program data&quot; but cannot give the OS instructions, maybe it can drop some more shampoo on the OS&#x27;s head and cause the OS to keep reading more and more &quot;OS instructions&quot; only it&#x27;s now reading past the normally expected end and reading into the &quot;program data&quot; location, and the same numbers which were once &quot;safe program data&quot; are becoming &quot;OS instructions&quot; to be executed by the OS using its OS permissions, which the program had no original rights to do. Breaking the imaginary security boundary by exploiting the assumptions baked into some other code that is running.')