Item(by='finder83', descendants=None, kids=[25088981, 25089410, 25089400, 25089187, 25090010], score=None, time=1605310424, title=None, item_type='comment', url=None, parent=25085276, text='The issue I have with API design goes much deeper...if you have a structured database, a statically typed language, and want validation, you&#x27;re writing 3 separate schemas that all do slightly different but not really different things. Add protobufs onto that, you&#x27;re now doing four.<p>Maintaining four different schemas does not make refactoring easy, in fact I&#x27;d even say it&#x27;s harder than just using a nosql database and a dynamic language where all you&#x27;re maintaining is the validation schema. (Yes, I realize there are other benefits to static typing.) Sure, it might generate the code initially depending on what you use, but you still have to maintain it. And any attempt to combine them has been way too complex&#x2F;verbose. I want to write a lot less code, not more.<p>What I really want is a static language with a validation logic extensive enough that it can be used to generate CRUD APIs, validation, and still offer static typing. I don&#x27;t know how this would work in practice, and I might hate it after I try it, but I&#x27;m tired of maintaining schemas.<p>Just to add to this, things like authorization, login, registration, etc, seem tiresome to write every time for a new API. I&#x27;ve been trying to find something more along the lines of a Backend as a Service, which Parse is very interesting for...but I wish there were more options and easier to use libraries for crafting APIs. It actually feels like we&#x27;re stuck in the past no matter what we do. I welcome suggestions for easier to write APIs.')