Item(by='bartread', descendants=None, kids=[24929094], score=None, time=1603965086, title=None, item_type='comment', url=None, parent=24928570, text='&gt; However the culture around complex frameworks and over-engineering is what most people really dislike about it.<p>I think this is it. I remember back in the day being absolutely floored when I started learning J2EE by the, it seemed, unnecessary complexity (for most use cases) of EJB. It was incredibly offputting: if you were starting a project from scratch it felt like you had to do a ridiculous amount of work just to get to &quot;hello world&quot;. I&#x27;m sure it wasn&#x27;t <i>that</i> bad but the memory has slightly scarred me.<p>I haven&#x27;t worked in Java for ages, mostly working with .NET for the last 16 years and, unfortunately, the same problem has to some extent bled into the .NET ecosystem too.<p>A few years ago I contracted at a place where the &quot;micro&quot;-service team I was assigned to had this codebase where they&#x27;d clearly taken the OSI 7 layer reference model to heart and applied it to a domain where customer details were collected and recorded. I&#x27;ve nothing against layered architectures, and have made use of them many times in appropriate circumstances, but this was awful: one of the most needlessly complex codebases I&#x27;ve ever worked with, and incredibly discouraging to work on because it was so hard to actually achieve anything. There were fully three or four layers in the middle that did nothing but call the next layer down. The quantity of boilerplate was extraordinary. To add one method that did anything of substance you&#x27;d actually have to add between five and seven methods, most of which did nothing but call the next layer. Ridiculous.<p>Still, that doesn&#x27;t change the fact that the .NET languages, runtime, and base framework are excellent, and that sadly being excellent is no antidote to misuse. Same applies to Java.')