Item(by='Measter', descendants=None, kids=[24820756], score=None, time=1603051664, title=None, item_type='comment', url=None, parent=24819330, text='So, this[0] is the doc page for the `GlobWalker` type. One of the traits it implements, and the only one relevant here, is the `Iterator` trait from the standard library[1]. That&#x27;s how you&#x27;d know that the `filter_map` function is appropriate.<p>The implementation there also tells you that the `Item` type of the iterator is a `Result&lt;DirEntry, WalkError&gt;`, presumably because any of the file system reads can fail. The `WalkError` type is from the globwalk library.<p>Going back to `filter_map`[2] that function takes a function or closure that maps from `Item` to the `Option` enum, and then just discards anything that is the `None` variant of the enum, filtering them out. `Result::ok` is a function on `Result` that converts the `Result` to an `Option`, converting `Err` to a `None`. So this is discarding the errors without reporting them.<p>As someone who is familiar with Rust, this wasn&#x27;t particularly hard to follow, but that comes down to familiarity with these adaptor functions and how they can be plugged into each other.<p>[0] <a href="https:&#x2F;&#x2F;docs.rs&#x2F;globwalk&#x2F;0.8.0&#x2F;globwalk&#x2F;struct.GlobWalker.html" rel="nofollow">https:&#x2F;&#x2F;docs.rs&#x2F;globwalk&#x2F;0.8.0&#x2F;globwalk&#x2F;struct.GlobWalker.ht...</a>\n[1] <a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.htm...</a>\n[2] <a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.filter_map" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.htm...</a>')