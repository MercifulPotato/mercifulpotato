Item(by='nicoburns', descendants=None, kids=None, score=None, time=1611407960, title=None, item_type='comment', url=None, parent=25878415, text='&gt; Regardless, you missed the point. Which was that, frameworks come and go.<p>Do they? Rails was released in 2005: it&#x27;s still here. Ditto for Django. It&#x27;s true that historically frontend frameworks haven&#x27;t had the same longevity. But nothing in that space had gotten to the same level of momentum as React has. Except jQuery, and that&#x27;s still here and maintained too.<p>In contrast, the web component APIs do <i>not</i> have momentum. I would not be entirely surprised if parts of them were removed in future due to lack of use.<p>&gt; Right. And that makes failures and perf issues hard to track down.\n&gt; If you know how to program using APIs and components built into the browser, that is easier at this point.<p>I rather disagree on this point. I&#x27;ve only seen React slow in 2 circumstances:<p>1. Too many DOM elements for the browser to cope with. At this point you need to start looking into virtualisation solutions, which is easy to do with a library like react-window. And is exactly what you would do with raw DOM APIs.<p>2. Excessive re-renders. There is excellent documentation on how to avoid this (memoising transformation functions). And a very simple mental model for how it works (following the usual JavaScript === equality rules). Avoiding this in vanilla DOM code is much harder, because you have a choice between re-rendering everything any time anything updates, doing very tricky piecemeal updates which quickly becomes unmaintainable, or re-inventing a react-like diffing system.')