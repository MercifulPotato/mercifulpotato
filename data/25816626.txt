Item(by='smarterclayton', descendants=None, kids=[25820596, 25816779], score=None, time=1610928122, title=None, item_type='comment', url=None, parent=25815733, text='That’s not true, because I’m the original author of ObjectMeta and I did it in golang.  :)<p>Half of the point of Kube is that every object looks similar enough that you can deal with them generically. ObjectMeta is what enforces that, so yes it’s OO, if there was only one base class possible and no inheritance.  The ObjectMeta as an interface construct exists for performance reasons in Kube vs the reflection we used early on (which was mostly due to people learning Go and dealing with limitations of the language as we rapidly prototyped new ways of building out our object patterns).<p>A prototype of kube was done at google in Java, none of that survived translation to the open source project (edit: or was rewritten prior to v1 as we matured the subsystems that replaced the basic concepts in the day 1 project, like clients writing directly to etcd). Many of the early authors had lots of Java experience, but there was never any attempt to bring Javaisms into Kube or any Java to be converted, just conventions.<p>EDIT: actually, metadata&#x2F;spec&#x2F;status is more a repudiation of Rails and the active record style “hundreds of properties with no organization” JSON apis.  We wanted to clearly separate metadata (common), spec (desired intent), and status (actual state).  That led naturally in go to an embedded struct for ObjectMeta and then the interface for getting access to the generic properties on any object.')