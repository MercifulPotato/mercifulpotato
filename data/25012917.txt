Item(by='Geminidog', descendants=None, kids=None, score=None, time=1604717652, title=None, item_type='comment', url=None, parent=25008587, text='Tech debt is always described as a metaphor. The word itself is a metaphor for something ill defined.  The problem with the metaphor is that a vague definition of the problem means that there will be equally vague solutions. No one is really sure what tech debt is exactly. There is a formal property to the program that correlates with our level of understanding of the program and our ability to change the program with limited understanding.<p>You give a metaphor of a kitchen to help someone understand the problem. To solve the problem I give another metaphor: Wash the dishes and scrape the grill to prevent technical debt. Does that help you understand the solution? No. It gives me nothing. The solution is as ill defined as the problem.<p>There is another phenomenon that the kitchen metaphor fails to describe. The failure is this: All measures to prevent technical debt will fail given enough time. Technical debt can be eliminated but it cannot be prevented. Even if you try to write the cleanest code and you&#x27;re given unlimited time to organize your code, all of your attempts at prevention will fail.<p>How do I know this? Because the most insidious form of technical debt is always unexpected. People may take shortcuts here and there but those shortcuts aren&#x27;t taken with the knowledge that there will be huge problems down the line. The worst technical debt always appears as mistakes that weren&#x27;t known. A shortcut taken now can be valid and never lead to problems in the future.<p>Technical debt that actually causes serious issues exists only in hindsight.<p>What is the formal definition of Technical debt? The set of all code that isn&#x27;t a combinator.')