Item(by='ivanhoe', descendants=None, kids=None, score=None, time=1606088879, title=None, item_type='comment', url=None, parent=25155424, text='IMHO main issue is that you suffer from the same problem that killed jQuery. By separating html and the logic affecting that html (css in this case, and event handlers for jQuery), you might make it look cleaner, but you also make it much harder to track what is affecting what. You need to scroll up and down to follow what&#x27;s going on, you might miss that there&#x27;s say 3 buttons with this class you defined and not just 2, etc. And as the complexity grows, it gets exponentially harder to manage it and it quickly can turn into a mess. Components help keeping the html short, so this approach is certainly working better than with the old monolith pages, but it&#x27;s still more work to have single .button and then look up its styles, then to have all the utility classes directly on it.<p>Also on bigger project you&#x27;re almost guaranteed to have someone on the team who will insist on naming their classes in totally unintuitive way, or you&#x27;ll end up with .big-blue-button that will at some moment end up red actually because they&#x27;ve been in hurry and forgot to rename the class.<p>One of the biggest benefits from using the frameworks is the standardization and uniformity, you&#x27;re guaranteed that everyone on the team now or anytime in the future will know exactly what classes&#x2F;mixins&#x2F;variables are available and will have a documentation on how to use them. You need extra people to meet the deadline, you just hire devs who know the framework and you&#x27;re good to go, no extra onboarding needed to explain where the buttons variables are located, and where to apply which, and how to name their classes, etc.')