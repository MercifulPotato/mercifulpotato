Item(by='jacobwilliamroy', descendants=None, kids=None, score=None, time=1605130917, title=None, item_type='comment', url=None, parent=25058950, text='I think you&#x27;re confusing async and parallelism. In multithreading, the computer will switch between multiple tasks whenever there is nothing to do, such as waiting for I&#x2F;O read or waiting for a network packet to arrive. Things don&#x27;t happen at the same time, it&#x27;s just a more efficient, dynamic scheduling of a sequence of tasks happening one after the other. It&#x27;s not physically possible for a multiple threads to happen at the same time unless they are on separate cores. In my use-case, hashing 200000 files on 7 separate hard drives, the only way to speed up the computation was to read from all 7 drives AT THE SAME TIME. There is no way to schedule 10^6 disk reads and hash operations into a single thread of execution that will reduce the runtime. Those async tricks can work in a more complicated program but you have to understand, I was ONLY reading from disk. The hashing step was faster than disk read (thanks xxhash) and the data was written to a sqlite file in a RAMdisk instantly so pretty much the entire runtime was spent reading from disk. multiprocessing was able to parallelize that unambiguously. Personally I don&#x27;t trust python&#x27;s multithreading because I have no control over whether it executes on one core or multiple cores, and in the world of parallel (not async) it is a very common convention that processes are parallel, while threads are async.<p>However, that being said, I&#x27;m open-minded. I will try to benchmark reading from multiple hdds using multithreading and compare bandwidth to the multiprocessing approach. How&#x27;s that?')