Item(by='qalmakka', descendants=None, kids=[24765863], score=None, time=1602580085, title=None, item_type='comment', url=None, parent=24763333, text='Overloaded delete operators are a relic of a past where malloc() was crummy and inefficient, and almost every object was allocated using new.<p>Quoting Stroustrup:<p><i>Introducing  operator new thus  made  the  use  of  free  store  more  convenient  and  less  error−prone.  This increased its use even further so that the C free store allocation routine malloc() used to implement new became the most common performance bottleneck in real systems.  This was  no  real  surprise  either;  the  only  problem  was  what  to  do  about  it.   Having  real  programs spend 50% or more of their time in malloc() wasn’t acceptable.I found per− class allocators and deallocators very effective.  The fundamental idea is that free store memory usage is dominated by the allocation and deallocation of lots of small objects from very  few  classes.   Take  over  the  allocation  of  those  objects  in  a  separate  allocator  and  you  can save  both  time  and  space  for  those  objects  and  also  reduce  the  amount  of  fragmentation  of  the general free store.</i><p>I think almost no one needs custom new and delete today, not only because they are very clunky and obscure, but especially due to the fact that modern C++ features such as move semantics, allocators, std::optional&lt;&gt; and NRVO make them almost redundant and unnecessary.')