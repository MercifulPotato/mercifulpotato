Item(by='_coveredInBees', descendants=None, kids=[25875639, 25875743, 25876152, 25875631, 25876419, 25876213, 25875651], score=None, time=1611344830, title=None, item_type='comment', url=None, parent=25874105, text='I read the comments here first before reading the blog post, and I was expecting a very different type of (and lacking) blog post based on the combination of dismissive and defensive attitude permeating a lot of the comments here.<p>To be honest, there isn&#x27;t a lot the author is wrong about. Sure, having a .NET team adapting to React is harder but nothing seemed egregious in the way they tackled things. The point about React including so little that you become reliant on a ton of external dependencies that see even more churn than the usual JS framework landscape is a very valid pain point, especially when you are building a very large application for the long-term. Granted, a lot of that criticism holds true for the entire JS scene where the churn is simply ridiculous and you have to cross all your appendages and hope for the best before you try to build a year old project. But React is especially problematic in that regard only because there are so few batteries included (which is great for small&#x2F;mid sized projects, but the opposite if you are looking for stability).<p>Ultimately though, I just shudder to think about writing large, complex, enterprise Apps in the latest and greatest JS&#x2F;front-end frameworks due to the crazy levels of churn in frameworks, libraries and APIs. React now looks completely different from React from 1-2 years ago. Libraries fall in and out of favor. Some keep up with the ever changing API of the parent frameworks, others die off. It&#x27;s like an entire ecosystem that has ADHD and as someone who has built several small to mid-size React and React + Electron apps in the past, that ultimately turned me off the entire endeavor (I&#x27;m an ML Engineer, but I love software engineering and building stuff for fun). I would much rather take &quot;boring&quot;, stable languages and frameworks and spend my time honing skills that actually matter and help me as a software engineer throughout my career, rather than spend a week trying to get webpack figured out, till the next big webpack update when I&#x27;d start over from scratch again.')