Item(by='thangalin', descendants=None, kids=None, score=None, time=1602605546, title=None, item_type='comment', url=None, parent=24766658, text='&gt; please don’t use &lt;script type=&quot;math&#x2F;tex&quot;&gt;…&lt;&#x2F;script&gt; for equations<p>KeenWrite[0], my desktop text editor, has an Export HTML using TeX&#x2F;SVG feature that encodes math glyphs as vector paths, embedding the SVG into the resulting HTML file.<p>On the subject of optimizations, KeenWrite can render 1,000 simple TeX formulas to SVG format in about 500 milliseconds (on my desktop machine), sufficient for real-time previews. Two libraries needed changes to accomplish this feat.<p>First, JFreeSVG and Apache Batik both suffer from the same performance problem: they use Java&#x27;s NumberFormat to convert floating point numbers to strings. It&#x27;s slow because of internationalization rules, which aren&#x27;t necessary for a machine-readable format. The fix entailed replacing NumberFormat with the Ryū algorithm[1].<p>Second, JMathTeX[2] was parsing TeX by throwing exceptions for flow control. In Java, throwing an exception forces the virtual machine to fill out a stack trace. Normally this wouldn&#x27;t result in abysmal performance, but the flow control was being executed for each character in every macro name encountered. Pre-parsing macro names without any flow control resolved the issue.<p>Further optimizations were made, but those two were the lion&#x27;s share. Combined, the total time went from 1 TeX formula to SVG format in ~5 seconds to 1,000 in ~.5 seconds.<p>[0]: <a href="https:&#x2F;&#x2F;github.com&#x2F;DaveJarvis&#x2F;keenwrite" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;DaveJarvis&#x2F;keenwrite</a><p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;DaveJarvis&#x2F;JMathTeX" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;DaveJarvis&#x2F;JMathTeX</a><p>[2]: <a href="http:&#x2F;&#x2F;jmathtex.sourceforge.net" rel="nofollow">http:&#x2F;&#x2F;jmathtex.sourceforge.net</a>')