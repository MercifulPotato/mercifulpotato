Item(by='sixdimensional', descendants=None, kids=[25615146], score=None, time=1609611110, title=None, item_type='comment', url=None, parent=25614487, text='Thank you for adding this flavor to the discussion.  I do agree that Petri nets are often seen as too complex for basic business process modelling, which is why languages such as BPEL and BPMN were invented by OMG before, and then simplified into UML activity diagrams, for example.<p>That is to say, level of complexity  in describing process in Petri net &quot;modelling language&quot; might seem higher.  I can surely see how it feels more esoteric and not always clear how it ties to the implementation.<p>Many workflow engines take the approach you&#x27;re describing, for example, I also used to use Microsoft&#x27;s Windows Workflow Foundation to do similar things.  Essentially you&#x27;re sketching a workflow process skeleton and then managing the state atomically by compartmentalizing it, so to speak.<p>Actually, this is exactly what Petri nets propose - state is defined by tokens in places - i.e. compartmentalized.<p>I don&#x27;t entirely agree with your comment about state management and argument passing in Petri nets.  I do agree it takes digging around to find tangible examples&#x2F;applications that cover argument passing, but the idea of &quot;tokens in places and how they enable transitions of state&quot; is the part of the puzzle to represent in an abstract way, the tiny pieces of state&#x2F;arguments that enable transitions to fire.  I could represent your code above as transitions which cannot fire until tokens representing the state of your conditions were present in the right places.  For example, the passage of time was present in an input place, and the condition trial period = true and value customer ID is not blank, all as tokens that have to be in input places to enable the transitions to fire which trigger those activities.<p>This is to say that, I agree that representing that graphically using Petri net modelling may not be as business friendly as say, UML activity diagramming.  But it also doesn&#x27;t make the simpler approach any less a subset of what you can do with Petri nets, as it very much is one.<p>But definitely agree, use the right level of abstraction that fits the need, like the old adage, try to use the right tool for the job.<p>I&#x27;d argue that, the tool you describe could be modeled as a Petri net, but that perhaps you may not wish to have a user do it that way.<p>Do you agree or have a different opinion?')