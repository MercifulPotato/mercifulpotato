Item(by='tonyg', descendants=None, kids=None, score=None, time=1608280697, title=None, item_type='comment', url=None, parent=25462299, text='Running the analogous<p><pre><code>    ln -sf &#x2F;dev&#x2F;zero &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6\n</code></pre>\nwill have an analogous effect on an &quot;alive&quot; Unix image. I mean, a Unix machine. :-)<p>Incidentally, in the latest Squeak,<p><pre><code>    True := False.\n</code></pre>\ndoesn&#x27;t work -- the compiler complains that you can&#x27;t assign into a read-only variable. So let&#x27;s try this:<p><pre><code>    Smalltalk at: #True put: False.\n</code></pre>\nBut now the metaprogramming system complains you&#x27;re trying to modify a read-only binding! So we view source on ClassBinding&gt;&gt;value:, and see that a resumable exception is being used to guard the modification, so let&#x27;s explicitly signal that we REALLY want to modify that binding:<p><pre><code>    [Smalltalk at: #True put: False]\n      on: AttemptToWriteReadOnlyGlobal\n      do: [:ex | ex resume: true].\n</code></pre>\nFinally! Now, evaluating &quot;True&quot; yields &quot;False&quot;.<p>But the image keeps running! Use of the literal class True seems to be rare enough that things are OK for at least several minutes after the change.<p>Doing this, however, definitely should immediately torpedo things:<p><pre><code>    true become: false.\n</code></pre>\n... huh. It didn&#x27;t work. It used to! Again, on this current Squeak version, we see a different behaviour. This time, it says &quot;Cannot execute #elementsExchangeIdentityWith: on read-only object #(false)&quot;.<p>So we&#x27;ll have to try harder:<p><pre><code>    true becomeForward: false.\n</code></pre>\nThat doesn&#x27;t work either! Same error as for #become:.<p>Welp, I&#x27;m actually all out of ways to crash this modern image in analogous ways to the easy pitfalls of images of yesteryear...')