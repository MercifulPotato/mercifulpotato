Item(by='rkhaitan', descendants=None, kids=None, score=None, time=1607100830, title=None, item_type='comment', url=None, parent=25291693, text='I&#x27;m not entirely sure what you mean by n per x, but if by top you mean something like &quot;get top k records by group&quot; then we support that. See [1] for more details. top-k is actually also rendered with a heap-like dataflow<p>When we plan queries we are rendering them into dataflow graphs that consist of one or more dataflow operators transforming data and sending it to other operators. Every single operator is designed to do work proportional to the number of changes in its inputs &#x2F; outputs. For us, optimizing our performance a little bit less a matter of the right data structures, and more about expressing things in a dataflow that can handle changes to inputs robustly. But the robustness is more a question of &quot;what do are my constant factors when updating results&quot; and not &quot;is this being incrementally maintained or not&quot;.<p>We have a known limitations page in our docs here [2] but it mostly covers things like incompleteness in our SQL support or Postgres compatibility. We published our roadmap in a blog post a few months ago here [3]. Beyond that everything is public on Github [4].<p>[1]: <a href="https:&#x2F;&#x2F;materialize.com&#x2F;docs&#x2F;sql&#x2F;idioms&#x2F;" rel="nofollow">https:&#x2F;&#x2F;materialize.com&#x2F;docs&#x2F;sql&#x2F;idioms&#x2F;</a>\n[2]: <a href="https:&#x2F;&#x2F;materialize.com&#x2F;docs&#x2F;known-limitations&#x2F;" rel="nofollow">https:&#x2F;&#x2F;materialize.com&#x2F;docs&#x2F;known-limitations&#x2F;</a>\n[3]: <a href="https:&#x2F;&#x2F;materialize.com&#x2F;blog-roadmap&#x2F;" rel="nofollow">https:&#x2F;&#x2F;materialize.com&#x2F;blog-roadmap&#x2F;</a>\n[4]: <a href="https:&#x2F;&#x2F;github.com&#x2F;MaterializeInc&#x2F;materialize" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;MaterializeInc&#x2F;materialize</a>')