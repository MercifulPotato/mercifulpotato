Item(by='marcan_42', descendants=None, kids=None, score=None, time=1604031266, title=None, item_type='comment', url=None, parent=24934759, text='&quot;Secure boot&quot; is a perfectly fine and desirable thing. It makes evil maid attacks more difficult and has many other benefits.<p>The problem is that the current crop of &quot;secure boot&quot; implementations focuses squarely on the average consumer that wants to delegate trust to the manufacturer, and, at best, only pays lip service to users who want to control their own hardware (see: Pixel devices and the like with closed bootloaders&#x2F;TrustZone but an escape hatch for the OS) or nothing at worst.<p>Almost every &quot;secure boot&quot; CPU in modern smartphones and such is already user-control-friendly, it&#x27;s just that <i>they aren&#x27;t being shipped that way</i>. They get locked down at the factory. The CPU architecture has little to do with any of this.<p>If you want an example of what an unlocked secure boot device is, look at the Nvidia Tegra devkits. Those come without the public key fuses blown. You can burn in your own public key and then they will only ever run firmware <i>you</i> signed, forever.<p>ARM devices without secure boot, or with user-control-assertable secure boot exist. And RISC-V devices locked down at the factory will exist.')