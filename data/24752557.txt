Item(by='nickcw', descendants=None, kids=[24752607, 24752654], score=None, time=1602492742, title=None, item_type='comment', url=None, parent=24752348, text='If you are wondering what PyOxidizer is then here is a good explanation:<p><a href="https:&#x2F;&#x2F;pyoxidizer.readthedocs.io&#x2F;en&#x2F;v0.8.0&#x2F;overview.html" rel="nofollow">https:&#x2F;&#x2F;pyoxidizer.readthedocs.io&#x2F;en&#x2F;v0.8.0&#x2F;overview.html</a><p>From that page:<p>From a very high level, PyOxidizer is a tool for packaging and distributing Python applications. The over-arching goal of PyOxidizer is to make this (often complex) problem space simple so application maintainers can focus on building quality applications instead of toiling with build systems and packaging tools.<p>On a lower, more technical level, PyOxidizer has a command line tool - pyoxidizer - that is capable of building binaries (executables or libraries) that embed a fully-functional Python interpreter plus Python extensions and modules in a single binary. Binaries produced with PyOxidizer are highly portable and can work on nearly every system without any special requirements like containers, FUSE filesystems, or even temporary directory access. On Linux, PyOxidizer can produce executables that are fully statically linked and donâ€™t even support dynamic loading.<p>The Oxidizer part of the name comes from Rust: binaries built with PyOxidizer are compiled from Rust and Rust code is responsible for managing the embedded Python interpreter and all its operations. But the existence of Rust should be invisible to many users, much like the fact that CPython (the official Python distribution available from www.python.org) is implemented in C. Rust is simply a tool to achieve an end goal (albeit a rather effective and powerful tool).')