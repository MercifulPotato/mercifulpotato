Item(by='hyperpallium2', descendants=None, kids=[25136009], score=None, time=1605572680, title=None, item_type='comment', url=None, parent=25117419, text='That&#x27;s sophisticated! I&#x27;m thinking highschool algebra, like<p><pre><code>  a+b     = b+a\n  (a+b)+c = a+(b+c)\n  a.c+b.c = (a+b).c\n</code></pre>\nDefined by that literal text. Applying them is the step I&#x27;m wondering about...<p>One difficulty comes above the target, when it&#x27;s not the root. e.g. wanting to commute the target a+b in<p><pre><code>  x.(y + z.(a+b))\n</code></pre>\nThe other difficuly lies below the target, where each letter in the above rules can represent an arbitary expression - so it&#x27;s awkward to tell which expression is meant by clicking on it (as you note).<p>So I&#x27;m thinking of clicking on an <i>operator</i>, to uniquely select its two operands - that would work for commute. Other gestures, like long-click, double-click, drag-n-drop etc may be enough. Pop-up menu for the worst case!<p>I think, the Haskell example defines a rule, rather than applying an existing one? I think, too, a DSL for transforms in ANTLR also would be for defining them.<p>Similarly, I think destructuring is a kind of definition. The 3 rules defined above are pretty much destructuring and constructuring (heh). The difference is in usage or application: in a program, you need to supply the target as the root, but in highschool algebra, it can be at any depth in the expression.')