Item(by='zelphirkalt', descendants=None, kids=[25988016, 25979869], score=None, time=1612104761, title=None, item_type='comment', url=None, parent=25978846, text='&gt; I also noticed there is a tendency in lispy languages to avoid introducing variable bindings just for the sake of naming the subexpression, because it often comes with a `(let ((name (subexpression))) rest-of-code)`, which also results in extra tabulation for the rest of the body. Compare with variable introduction in languages like python&#x2F;js&#x2F;c++&#x2F;rust, etc., where such thing wouldn&#x27;t cause touching the rest of the function&#x2F;clause. I guess it&#x27;s more of a &#x27;functional language&#x27; artifact, e.g. in Haskell you&#x27;d probably have a similar issue.<p>I have found myself thinking about &quot;Should I really introduce another let form for naming these things I am going to use at the next procedure call, to make it more readable? Or would it make the code less readable, because of the additional indent?&quot;. So there is something to this point. Right now, while not writing code, I would say:<p>The indentation make the scope of the bindings clear. It tells you exactly, until where a binding will be defined. It also allows you to shadow a binding from an outer scope for the purpose of using it in the inner scope. However shadowing should be used with care, because it can also get in the way of readability, if used wrongly. It can however also increase readability, if used well.<p>In a language like Python, you can only write things at the same level of indentation. It does not make it clear until where these bindings might possibly be used. The scopes are not as separated as in Lispy languages with the let form. That inherently makes it not as readable, I think. &quot;The rest of the function&quot; is not a very precise scope specification. Many bindings might only be used for one or a few subexpressions and not everywhere until the function ends. This only makes sense though, if the code has side effects. Otherwise there will be no difference in where the bindings still exist, because what in Python is the rest of the &quot;function&quot;, will be the inner parts of the expression of a procedure in Lispy languages.<p>I have found myself looking for a thing like let in Python though. I have sometimes thought: &quot;Hey, can&#x27;t I use a with-block for making a temporary binding?&quot;, but that has never worked for me, because I think you need to make a context manager for that? It has never materialized in my style of Python code. (I know Hy, but until it can offer me TCO and lambdas and let forms like Scheme, I am not sure I would like to use it.)<p>EDIT: Ah and not to forget about let* which can often reduce the amount of indentation a lot. Sometimes I find it good to make use of it.')