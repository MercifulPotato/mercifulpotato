Item(by='bmitc', descendants=None, kids=None, score=None, time=1607333594, title=None, item_type='comment', url=None, parent=25330547, text='Typed Racket is pretty close. I imagine that with some work and Racket&#x27;s macro and module system that someone could rewrite it to be more ML-like in syntax.<p>In the Coursera course <i>Programming Languages</i>, I ported some of the first assignments from SML to F# and Typed Racket, and you can see the similarities of type annotations in the very simple examples below.<p>SML:<p><pre><code>    (* Helper function. Takes a generic list and an integer n and returns the nth element of the list. *)\n    fun get_nth_element (xs : &#x27;a list, n : int) =\n        if n = 1\n        then hd xs\n        else get_nth_element(tl xs, n-1)\n\n    (* Takes a list of strings and an integer n and returns the nth element of the list. *)\n    fun get_nth (strings : string list, n : int) =  get_nth_element(strings,n)\n</code></pre>\nF#:<p><pre><code>    &#x2F;&#x2F;&#x2F; Helper function. Takes a generic list and an integer n and returns the nth element of the list.\n    let rec getNthElement (xs : &#x27;a list, n : int) =\n        if n = 1\n        then List.head xs\n        else getNthElement(List.tail xs, n-1)\n\n    &#x2F;&#x2F;&#x2F; Takes a list of strings and an integer n and returns the nth element of the list.\n    let getNth (strings : string list, n : int) =  getNthElement(strings,n)\n</code></pre>\nRacket:<p><pre><code>    #lang typed&#x2F;racket\n\n    ;; Helper function. Takes a generic list and an integer n and returns the nth element of the list.\n    (: get-nth-element (All (T) (Listof T) Integer -&gt; T))\n    (define (get-nth-element xs n)\n      (if (equal? n 1)\n          (first xs)\n          (get-nth-element (rest xs) (- n 1))))\n\n    ;; Takes a list of strings and an integer n and returns the nth element of the list.\n    (: get-nth ((Listof String) Integer -&gt; String))\n    (define (get-nth strings n) (get-nth-element strings n))</code></pre>')