Item(by='jeffbee', descendants=None, kids=None, score=None, time=1601733711, title=None, item_type='comment', url=None, parent=24661653, text='The kernel TCP stack made a lot of sense when processes were almost as large as machines. When you had 1 CPU and 32MB of memory to run a web server then why wouldn&#x27;t you use the kernel stack? But these days the host is as large as what we used to consider entire networks. You can easily have 256 CPU cores in a box now, and that box will be running hundreds of different processes at a time. Not all of those processes will be served equally well by whatever constants are defined in the kernel, and by whatever system-wide tuning parameters are available. And yet, there&#x27;s still the problem that the box has one or a few hardware network interfaces, and something has to manage access to those resources. The architecture described at [1] is an interesting solution to this problem which avoids kernel networking, mediates NIC access, and provides custom stacks and parameters to each application.<p>1: Snap: a microkernel approach to host networking <a href="https:&#x2F;&#x2F;blog.acolyer.org&#x2F;2019&#x2F;11&#x2F;11&#x2F;snap-networking&#x2F;" rel="nofollow">https:&#x2F;&#x2F;blog.acolyer.org&#x2F;2019&#x2F;11&#x2F;11&#x2F;snap-networking&#x2F;</a>')