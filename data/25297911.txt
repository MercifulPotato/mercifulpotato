Item(by='sixdimensional', descendants=None, kids=None, score=None, time=1607045379, title=None, item_type='comment', url=None, parent=25293161, text='I like the direction you guys seem to be taking here with Supabase.<p>Regarding the comment about subscription-based DB engine and denormalization, I posted this [1] on the post about Materialize although I don&#x27;t think anyone read it.<p>I am right there that there is a new unified data architecture evolving and I think it is difficult but doable.  CQRS and event-sourcing are core elements and the decoupling of the database continues.  I also believe Flow Based Programming [2] and reactive programming (observables on top of streams of events) are other key concepts.<p>I&#x27;ve worked on federated database query engines and it turns out that federation has some relationships to this problem.  I recently saw this article about Netflix&#x27;s approach to federated GraphQL (which to me feels like API composition) and found it interesting [3].<p>I don&#x27;t know if anything of this helps you but hope it might :)<p>I don&#x27;t claim to be an expert here but if you&#x27;re interested in talking more, my email&#x27;s in my profile.<p>[1] <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25285890" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25285890</a><p>[2] <a href="https:&#x2F;&#x2F;wiki.c2.com&#x2F;?FlowBasedProgramming" rel="nofollow">https:&#x2F;&#x2F;wiki.c2.com&#x2F;?FlowBasedProgramming</a><p>[3] <a href="https:&#x2F;&#x2F;netflixtechblog.com&#x2F;how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2" rel="nofollow">https:&#x2F;&#x2F;netflixtechblog.com&#x2F;how-netflix-scales-its-api-with-...</a>')