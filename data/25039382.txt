Item(by='jes5199', descendants=None, kids=[25039533, 25039666, 25039606, 25039716, 25043519, 25039731, 25041482], score=None, time=1604953115, title=None, item_type='comment', url=None, parent=25037293, text='GraphQL is so much heavier, code wise, than REST for Rails apps that it feels like a bad fit to me. Notice that these examples have created a completely parallel schema - new classes for every object in the GraphQL graph, which are analogous but separate from the Rails models, each one acting like a combination of controller and presenter for its Rails model, and breaking the ORM encapsulation to write efficient SQL queries.<p>I think if GraphQL had existed in the early days of Rails, the natural assumption would have been that ActiveRecord model classes should double as GraphQL result objects, and there would be a nice DSL for specifying how to safely expose those objects to the API. But I haven&#x27;t seen anyone try to build that - maybe the feeling is that Rails is _complete_ so new responsibilities need to live somewhere else')