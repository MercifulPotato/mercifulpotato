Item(by='BenjieGillam', descendants=None, kids=None, score=None, time=1604842891, title=None, item_type='comment', url=None, parent=25025642, text='[PostGraphile author here, and I wrote that page of documentation.]<p>Firstly, GraphQL does not allow for infinite recursion; it is literally not possible to do infinite recursion in GraphQL; the GraphQL spec even has a section on this: <a href="https:&#x2F;&#x2F;spec.graphql.org&#x2F;draft&#x2F;#sec-Fragment-spreads-must-not-form-cycles" rel="nofollow">https:&#x2F;&#x2F;spec.graphql.org&#x2F;draft&#x2F;#sec-Fragment-spreads-must-no...</a><p>Secondly, it&#x27;s extremely easy to add a GraphQL validation rule that limits the depth of queries; here&#x27;s an example of one where it takes just a single line of code: <a href="https:&#x2F;&#x2F;github.com&#x2F;stems&#x2F;graphql-depth-limit" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;stems&#x2F;graphql-depth-limit</a> . This isn&#x27;t included by default because there are plenty of solutions you&#x27;re free to choose between, many of which are open source, depending on your project&#x27;s needs. For most GraphQL APIs, persisted queries&#x2F;persisted operations is the tool of choice, and is what Facebook have used internally since before GraphQL was open sourced in 2015. (Unlike what you state, this does not turn your API into a &quot;REST API,&quot; it acts as an optimisation on the network layer and once configured is virtually invisible to client and server.)')