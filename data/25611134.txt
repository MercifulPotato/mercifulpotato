Item(by='stormbrew', descendants=None, kids=[25611357], score=None, time=1609573525, title=None, item_type='comment', url=None, parent=25611091, text='There is effectively an implicit scope created by the let binding. In rust you can&#x27;t reassign a variable without it being mut. The two `x`s are separate variables named x and are not at any point mutated. Reassignment would look like this:<p><pre><code>    let x = 1;\n    x = x + 1; &#x2F;&#x2F; &lt;- error[E0384]: cannot assign twice to immutable variable `x`\n    let mut x = 1;\n    x = x + 1; &#x2F;&#x2F; ok!\n\n</code></pre>\nThis obviously matters very little for an integer, but it is relevant to more complex types.<p>You can actually see the scopes, and the progress of variable liveness, if you run the compiler out to the MIR intermediate language:<p><pre><code>    fn main() -&gt; () {\n        let mut _0: ();                      &#x2F;&#x2F; return place in scope 0 at src&#x2F;main.rs:1:11: 1:11\n        let _1: i32;                         &#x2F;&#x2F; in scope 0 at src&#x2F;main.rs:2:9: 2:10\n        scope 1 {\n            debug x =&gt; _1;                   &#x2F;&#x2F; in scope 1 at src&#x2F;main.rs:2:9: 2:10\n            let _2: i32;                     &#x2F;&#x2F; in scope 1 at src&#x2F;main.rs:3:9: 3:10\n            scope 2 {\n                debug x =&gt; _2;               &#x2F;&#x2F; in scope 2 at src&#x2F;main.rs:3:9: 3:10\n            }\n        }\n\n        bb0: {\n            StorageLive(_1);                 &#x2F;&#x2F; scope 0 at src&#x2F;main.rs:2:9: 2:10\n            _1 = const 1_i32;                &#x2F;&#x2F; scope 0 at src&#x2F;main.rs:2:13: 2:14\n            StorageLive(_2);                 &#x2F;&#x2F; scope 1 at src&#x2F;main.rs:3:9: 3:10\n            _2 = const 2_i32;                &#x2F;&#x2F; scope 1 at src&#x2F;main.rs:3:13: 3:18\n            _0 = const ();                   &#x2F;&#x2F; scope 0 at src&#x2F;main.rs:1:11: 4:2\n            StorageDead(_2);                 &#x2F;&#x2F; scope 1 at src&#x2F;main.rs:4:1: 4:2\n            StorageDead(_1);                 &#x2F;&#x2F; scope 0 at src&#x2F;main.rs:4:1: 4:2\n            return;                          &#x2F;&#x2F; scope 0 at src&#x2F;main.rs:4:2: 4:2\n        }\n    }\n</code></pre>\n<a href="https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8af2f63e25b8bc8bfdb43c1908cf7da4" rel="nofollow">https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;editio...</a>')