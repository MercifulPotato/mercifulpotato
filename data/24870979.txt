Item(by='lhorie', descendants=None, kids=[24872134, 24871751], score=None, time=1603469360, title=None, item_type='comment', url=None, parent=24869475, text='We have a pretty large monorepo codebase (460 packages and counting) that we&#x27;re migrating from yarn v1 to yarn v2. I&#x27;ll say it&#x27;s definitely not a plug-n-play migration (pardon the pun).<p>Some issues we ran into:<p>- it can be difficult to reason about the layout of peer dependencies. Often times libraries that rely on Symbols or referential equality break and you need to mess with packageExtensions or add resolutions or unplug. Debugging mostly consists of throwing stuff at a wall and see what sticks<p>- file watching at large enough projects breaks w&#x2F; file descriptor exhaustion errors, forcing you to find and unplug the offending libraries<p>- there&#x27;s a number of known incompatible libraries (flow being one of the most prominent) and the core team approach to these at this point follows paretto (20% effort for 80% results, e.g. special casing for typescript), meaning I don&#x27;t believe there will ever be a 100% compatibility milestone w&#x2F; the ecosystem<p>- it&#x27;s much more black-boxy in terms of day-to-day debugging (e.g. it&#x27;s much harder to manually edit files in node_modules to trace some root cause)<p>- we ran into inscrutable errors deep in packages that interface w&#x2F; C++ and basically were only able to fix by pinning to an earlier version of a library that did not depend on said package.<p>- migration cost is heavily proportional to codebase complexity. My understanding is that Facebook gave up on it completely for the foreseeable future and ours has similarly been a significant time investment (and we&#x27;re not even targeting strict mode yet)<p>The pros:<p>- install times and project switching times are indeed fast, even in our codebase that contains multiple major versions of various packages<p>- yarn v2 has many interesting features, such as protocols (though it&#x27;s debatable if you want to commit to lock-in to benefit from those)')