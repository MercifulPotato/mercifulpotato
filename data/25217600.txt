Item(by='marta_morena_28', descendants=None, kids=None, score=None, time=1606374303, title=None, item_type='comment', url=None, parent=25217455, text='&gt; &quot;but writing in C-like Java can give you C performance while still letting you interact with Java libraries &amp; APIs.&quot;<p>It really can&#x27;t. Quite the opposite. Writing C-like Java is already doomed from the start. Java is faster than C when it comes to OOP. Unless you product is a highly complex OOP nightmare, C will always beat Java to the curb.<p>GC is not free. The problem with GC is that you pay asynchronously, while allocations are essentially free. But this asynchronous cost is very very hard to measure and to control. \nJava does not offer the mechanism C&#x2F;C++ offer for native resource management. It also doesn&#x27;t do complex optimizations, most notably vectorization. Number crunching performance will always suck in Java. Even if they add all the optimizations in the world, the simple fact remains: Java as a language simply does not allow you to express code in a performant way. That leave the compiler at a double disadvantage. It needs to essentially &quot;convert Java to C++ and guess the most performant interpretation&quot; (we are decades away from this), and it needs to do that within milliseconds (because its a JIT).<p>It just makes no sense to talk about this. Use Java for the 99% of your product that is not a hotpath, use C for the remaining 1% where you need pure performance. Simple as that.')