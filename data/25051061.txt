Item(by='throwaway894345', descendants=None, kids=[25052925], score=None, time=1605038579, title=None, item_type='comment', url=None, parent=25050602, text='I got started with the Go tour: <a href="https:&#x2F;&#x2F;tour.golang.org" rel="nofollow">https:&#x2F;&#x2F;tour.golang.org</a><p>You&#x27;ll get a feel for the language constructs. Once you&#x27;re ready to graduate to tinkering with your own stuff, then go install Go: <a href="https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;install" rel="nofollow">https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;install</a><p>Some noted differences from C# (my C# knowledge is 5-10 years out of date, mind you):<p>* Go is a much simpler language; it lacks classes, inheritance, generics, exceptions, etc--you can be productive in a weekend, conservatively\n* Go has a formatter that everyone uses, so everyone&#x27;s code has the same style\n* Go lacks generics, so everyone generally writes in the same imperative way (few personal, creative flourishes)--it&#x27;s very boring in this regard (which is a feature for many people)\n* Go has value types (like C#) but they are much more idiomatic--it also has pointers and other reference types\n* Go&#x27;s interfaces are implicitly satisfied, which is like statically-typed duck typing if you&#x27;re familiar with any dynamic languages (no need to write `extends IFoo` or whatever, unlike C#)\n* Go statically compiles everything by default (the &quot;VM&quot; is compiled into every individual program) so you can just pass around a single compiled artifact\n* Go has lightweight threads (&quot;goroutines&quot;)\n* For web service things, you don&#x27;t need a Netty or any other web-server in front of your service; the web server is just a library (part of the standard library, in fact) and it is production-grade<p>Go and C# occupy the same ballpark in terms of performance.')