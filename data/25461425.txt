Item(by='stouset', descendants=None, kids=[25463126, 25462246], score=None, time=1608244557, title=None, item_type='comment', url=None, parent=25460948, text='&gt; Is it crazy if I think that first example is the most readable of the three?<p>IMO, sort of!<p>All abstraction requires you to understand it at some level before you can quickly reason about it in code. But once you do, it allows you to reason about things at a higher level, rather than at a level where you have to focus on each detail individually. This is a net win for good abstractions that are (generally) simple and minimally leaky, but it can be a net loss for abstractions that are complicated.<p>You see this same conversation play out with functional looping constructs vs. imperative ones. Which is more readable?<p><pre><code>    for (int i = 0; i &lt; a.len(); i++) {\n        a[i] = 0;\n    }\n    \n    &#x2F;&#x2F; vs.\n    \n    a.map! { 0 }\n</code></pre>\nIf you don&#x27;t know what `map!` does, the former. And many people argue for this for the sake of &quot;simplicity&quot;.<p>But when you understand functional iteration—which is generally a simple, non-leaky abstraction—the latter wins <i>by a mile</i>. And while you might look at this example and think &quot;you&#x27;re just saving a few lines of code&quot;, the latter not only completely eliminates entire classes of problems (off-by-one errors, slow calculation of `len()` for e.g., NUL-terminated strings, etc.) but knowing it <i>also</i> unlocks a bunch of additional useful tools like `reduce`, `filter`, and friends that reduce reams of boilerplate throughout your code while dramatically improving comprehensibility.<p>The same is true of `Option&lt;T&gt;` and `Result&lt;T&gt;`. They&#x27;re wildly powerful and allow for rapid understanding of code <i>without</i> having to read and parse if-else branching to confirm that the logic is performing null checking or error handling (and more importantly, doing it correctly).<p>So you&#x27;re not crazy for thinking the first example is the most readable of the three <i>given your current knowledge</i>. But you <i>are</i> crazy if you think the first example is preferable to learning the relatively simple abstractions of Option&lt;T&gt; and Result&lt;T&gt; which allow reasoning about things at a higher level and unlock extremely powerful tools in doing so.')