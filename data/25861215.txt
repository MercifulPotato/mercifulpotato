Item(by='spiffytech', descendants=None, kids=[25861671, 25861579], score=None, time=1611248884, title=None, item_type='comment', url=None, parent=25860812, text='I&#x27;ll disagree here. While I have quibbles about the specific API used in this project, I like the idea of an imperative regex builder, especially if it can be type checked.<p>Every time I turn to regex, I waste time debugging which characters I forgot to escape or accidentally escaped when all the brackets and slashes blur together. I debug why some group isn&#x27;t matching right because regex&#x27;s semantic density makes it hard to tell where the group starts and ends. I turn to regex debuggers because they&#x27;re necessary, but they&#x27;re not great experiences, and at first glance I&#x27;d think a type checked regex builder could make debuggers unnecessary a lot of the time.<p>There&#x27;s also a discoverability problem. I <i>know</i> non-capturing groups and negative lookbehind are a thing, but I always have to look them up because it&#x27;s hard to remember the arcane syntax if I don&#x27;t use them often. And my peers don&#x27;t even know some of those things exist, so they struggle to solve easy problems. A library that my editor would offer autocomplete suggestions for would really help this.<p>I also think a regex builder would promote better organization - break the regex into parts, assign the parts to variables, and reuse portions of a regex. That&#x27;s all <i>possible</i> with traditional regex, but I don&#x27;t see folks doing it because it seems few folks know about verbose regex, building logic with string concatenation is discouraged in many situations, and if your language has a native regex data type, declining that in favor of string building feels weird. If all a regex builder did was reframe what developers feel is natural to do, that&#x27;s beneficial.')