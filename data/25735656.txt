Item(by='altfredd', descendants=None, kids=[25736476, 25736798, 25735967], score=None, time=1610395563, title=None, item_type='comment', url=None, parent=25734836, text='Linux entropy pool is designed to accept and mix different low-quality entropy sources and has explicit workarounds for problems like these.<p>Systemd is literally the only software, that has this problem. I am not aware of any other software, that uses rdrand and expects high-quality cryptography-grade randomness. Precisely, because is does not work. Intel CPUs used to have very similar issues with rdrand and so did AMD. Furthermore, CPU implementation of rdrand is a very attractive targets for state backdoors, so most sensible developers either follow the &quot;GNUPG way&quot; (ask for randomness from user) or simply read from &#x2F;dev&#x2F;random.<p>The rdrand instruction is great for games, because it allows to make white noise without complex algorithms and system call overhead. It is also handy for few situations, like interrupt handlers, when you needs to create some semi-random value without using stack space or calling into outside code. Unfortunately, when it was introduced, rdrand was documented to generate &quot;cryptographically strong random numbers&quot; (did Intel developers ever knew, what that means?) Of course, most actual cryptography experts didn&#x27;t buy into that. As a consequence, and because multi-platform software needed to have it&#x27;s own RNG anyway, the instruction remained largely unused for actual cryptography. Unused = untested and sometimes broken. If I were in systemd developer&#x27;s place, I would not hinge bootability of my systems on something like that.')