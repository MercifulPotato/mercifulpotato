Item(by='dkersten', descendants=None, kids=[25235206], score=None, time=1606512222, title=None, item_type='comment', url=None, parent=25232102, text='&gt; So in that respect, Clojure&#x27;s doseq is recursive.<p>The implementation is recursive, but the user facing interface isn&#x27;t really.<p>&gt; I don&#x27;t know what you mean by &quot;matter&quot;<p>I mean that in any real world code, at least any that I&#x27;ve encountered in ten years of Clojure and ~20 of Python, the difference has not impacted any actual code that I&#x27;ve written. Sure, in Python I have seen and used &quot;break&quot; but in Clojure it has never been necessary.<p>&gt; A classic for-loop is prone to...<p>Ok, so you&#x27;re actually arguing in favour of non-classic for loops? I certainly agree. Even in C++, I try to avoid traditional loops in favour of range-based loops or the standard library abstractions like std::for_each, std::transform etc. I think maybe we&#x27;re on the same page, I thought you were arguing that the lack of classic for-loops was a deficiency and I was just saying that in Clojure it doesn&#x27;t actually matter that its loops aren&#x27;t the classic ones.<p>&gt; Now I don&#x27;t know if the further differences between Clojure doseq and Python for would also result in safer code.<p>Probably not. I think Clojure does result in safer code, but for other reasons than the differences between doseq&#x2F;for, as you say yourself. I don&#x27;t think break is a common source of defect, personally, but I also don&#x27;t find the lack of break a problem in Clojure: you only use doseq when you need side-effects, why would you need to break&#x2F;continue? Typically you&#x27;ll already have filtered the list before calling doseq anyway.<p>&gt; Personally I don&#x27;t know, I&#x27;d say maybe not.<p>I agree, I don&#x27;t think its a big deal either way.<p>&gt; Clojure also favours the use of its immutable<p>Yes, I think that (at least in my own experience), Clojure tends to be safer and less error prone, but the reasons are not its loops, they&#x27;re mainly due to its immutable-by-default nature.<p>I think that over all, we are more or less in agreement. But I did overlook that doseq doesn&#x27;t support break&#x2F;continue in my original comment, so thanks for pointing that out!')