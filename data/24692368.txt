Item(by='gpderetta', descendants=None, kids=None, score=None, time=1601934176, title=None, item_type='comment', url=None, parent=24692170, text='yes, you understood correctly. The intuition here is that the rest of the callers saved registers are already saved by the compiler itself in the stack, you just need to complete the work. In fact, via GCC inline ASM, you can leave to the compiler the job of saving all registers and the swap routine doesn&#x27;t have to touch memory at all [1]<p>You can actually do it on a single stack though: when you detect a stack overflow, you traverse the stack and garbage collect no longer referenced stack frames (in practice you copy referenced stack frames to a new stack). The &quot;small&quot; catch is that your functions can no longer return and you need to commit to pure CPS, so this technique [2] is only used for some compilers-to-c for other languages with first class continuations.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;gpderetta&#x2F;delimited&#x2F;blob&#x2F;master&#x2F;delimited.hpp#L264" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;gpderetta&#x2F;delimited&#x2F;blob&#x2F;master&#x2F;delimited...</a>\nthe idea is very simple, 99% of the complexity here is because I&#x27;m trying to transparently (i.e. with zero cost) propagate C++ exceptions across coroutines.<p>[2] <a href="https:&#x2F;&#x2F;wiki.c2.com&#x2F;?CheneyOnTheMta" rel="nofollow">https:&#x2F;&#x2F;wiki.c2.com&#x2F;?CheneyOnTheMta</a>')