Item(by='tomxor', descendants=None, kids=[25626930, 25630974], score=None, time=1609714150, title=None, item_type='comment', url=None, parent=25624068, text='&gt; Making software resilient against bitflips in memory seems very difficult though, since it not only affects data, but also code.<p>There is an OS that pretty much fits the bill here. There was a show where Andrew Tanenbaum had a laptop running Minix 3 hooked up to a button that injected random changes into module code while it was running to demonstrate it&#x27;s resilience to random bugs. Quite fitting that this discussion was initiated by Linus!<p>Although it was intended to protect against bad software I don&#x27;t see why it wouldn&#x27;t also go a long way in protecting the OS against bitflips. Minix 3 uses a microkernel with a &quot;reincarnation server&quot; which means it can automatically reload any misbehaving code not part of the core kernel on the fly (which for Minix is almost everything). This even includes disk drivers. In the case of misbehaving code there is some kind of triple redundancy mechanism much like the &quot;quorum&quot; you suggest, but that is where my crude understanding ends. AFAIR Userland software could in theory also benefit provided it was written in such a way to be able to continue gracefully on reloading.')