Item(by='Symmetry', descendants=None, kids=None, score=None, time=1608478710, title=None, item_type='comment', url=None, parent=25484277, text='The traditional RISC philosophy stemmed from the constraints on chip development that mostly existed from the 80s to the mid 90s.  After that ballooning transistor counts and design effort for top line out of order application processors made reducing the number of instructions pretty pointless in that design space, though limiting the number of ways instructions could interact through a load-store architecture and keeping decode simple through fixed length instructions (plus longer jumps) remain relevant useful things to take away from RISC.  All the complexities that ARM has let it do more with fewer instructions and a high performance RISC-V core is going to have to do enough instruction fusion that its internal ops will end up being just as complicates as those that ARM uses, but it&#x27;ll also have the disadvantage of having to do that extra fusion.<p>But of course if the target isn&#x27;t a high end application processor but instead a microcontroller, say, RISC-V&#x27;s simplicity has a lot going for it.  Or for a grad student implementing a simple OoO processor in a semester long class.  Or back when I was doing my thesis having an open source core to modify would have been a huge advantage.  As the article says RISC-V can be a success without replacing ARM, POWER, and x86.')