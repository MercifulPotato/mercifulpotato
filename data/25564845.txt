Item(by='bikeshaving', descendants=None, kids=None, score=None, time=1609199683, title=None, item_type='comment', url=None, parent=25564597, text='When we say “pure functions are free” out loud, of course it seems categorically false, and I don’t think anyone has ever credibly argued for this claim. And yet I think it is an implicit assumption of a lot of functional programming development, specifically that which attempts to build “referentially transparent” systems on top of an imperative, impure systems and languages, rather than starting with a new language from scratch.<p>My example of React.js is the pinnacle of this, all features like hooks, contexts, and concurrent mode only make sense when they estimate the cost of re-executing pure functions to be free, or at least negligible, and yet real-world experience indicates this is definitely not the case.<p>&gt; One benefit (with respect to the CPU) of pure functions is that they can be cached because you know you&#x27;ll get the same result for each call (of course, this impacts memory), which you can&#x27;t guarantee with impure functions. But that&#x27;s a tradeoff of memory for time.<p>In my personal experience, I’ve become pretty skeptical of trading memory for execution time. Especially in garbage-collected languages, what you save in execution time you lose in GC pauses, so the end result is you get neither.')