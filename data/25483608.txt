Item(by='0xbadcafebee', descendants=None, kids=None, score=None, time=1608434949, title=None, item_type='comment', url=None, parent=25482410, text='&gt; Split your codebase, split your teams, create a lot of opportunities for mediocre coders to grow into mediocre engineering managers, everybody was happy.<p>This is the best description of modern software development I have ever seen.<p>&gt; It seems that, contrary to what everybody is saying, software developers are in plentiful and cheap supply so wasting a lot of their talent makes economic sense over the perceived cost of adapting more powerful programming systems.<p>&gt; but we just throw more bodies at the problem because Gartner tells us this is the future.<p>This last part is the real reason for it: executives are blind morons who have no idea how to run technology-dependent companies, and their poor leadership bleeds down because hierarchical organization.<p>I used to blame executives because it seemed like they were making terrible decisions that everybody knew were terrible. But now I realize that the reason they&#x27;re making the terrible decisions is they just have absolutely no concept of how the organization should run. They don&#x27;t understand the customer, the employee, or the product, but they have generic ideas of how to make generic things, so they just do that and hope the people under them will fix everything.<p>So of course we&#x27;re managing everything as tiny little components that get glued together. They&#x27;re &quot;Fordisming&quot;. And &quot;Globalizing&quot; is already here too. Many companies already have one microservice made in India, another in Romania, a third in Spain. Who cares if they barely talk? Who cares if they reinvent the wheel and use conflicting technology? It&#x27;s all just a game of &quot;reduce cost and increase profit&quot;.<p>The next big hotness is going to be the API-gateway-service-mesh-distributed-tracing monolith that every service will be plugged into. Developers will be given more power to turn on and off things that are connected to this monolithic service frontend. They will thus be able to have faster feedback, but nobody will be coordinating the changes they are making, so actually things will break more often due to conflicting changes.<p>Finally, some time after that, the developers will figure out that it would be better if, instead of depending on all the external Infrastructure&#x2F;Configuration-as-Code, they should be using frameworks that have everything built into them, and have their application tell the framework what to do, so a dedicated person won&#x27;t need to write it all using external tools and weird DSLs. This will persist as a sort of &quot;Java framework for Kubernetes-native Applications&quot;, although it&#x27;ll extend into all the thousands of shitty extension apps that plug all the holes in K8s. And then we&#x27;ll truly have a new monolith, but a distributed one.')