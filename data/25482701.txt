Item(by='Jweb_Guru', descendants=None, kids=[25482970], score=None, time=1608423992, title=None, item_type='comment', url=None, parent=25480073, text='That&#x27;s certainly not true in general (at least, if you want your compiler to provably halt) and it&#x27;s really easy to point at counterexamples... for instance, Coq is capable of fully representing Peano arithmetic, and is dependently typed, so it follows that synthesizing its proof terms can require supplying proofs of arbitrary statements in PA, which is undecidable.  But type<i>checking</i> Coq proof terms is very much decidable, or at least if it isn&#x27;t it&#x27;s not because it includes PA.<p>That being said, even if your standard for synthesis is &quot;works in practice&quot; rather than some halting-related criterion, it&#x27;s still really easy to find type systems that don&#x27;t qualify.  There are also sometimes practical concerns around separate compilation--if you&#x27;re relying on introspection and not just interfaces for typechecking, and someone just tells you what interface will be satisfied at runtime, you won&#x27;t be able to repeat this kind of analysis; the same sorts of problems occur when you perform reflection.')