Item(by='Jtsummers', descendants=None, kids=[24922459], score=None, time=1603907903, title=None, item_type='comment', url=None, parent=24920726, text='C++ lambdas do solve the problem, I&#x27;m not sure why I didn&#x27;t include that.<p>However, unit testing them is not the only concern. There are reasons for using nested functions, class methods, file global, or program global functions.<p>If you make them global or methods, you lose control of how and when they&#x27;re called. This can break invariants. So some functions can be hoisted up, but others oughtn&#x27;t be (in particular, any pure function can be made global without any concern other than occupying a name, side effecting functions should be more carefully considered).<p>The interface to the functions may change if they capture any variables. If they capture nothing in the local scope, then hoisting them doesn&#x27;t impact their interface. If they do capture something, hoisting them means adding parameters (complicating the interface) or making them observe variables either in the class (complicating the class) or file&#x2F;program globals (bad practice).<p>Regarding unit testing. Nesting functions (or lambdas) are essentially a wash. You were, hopefully, testing the host function to begin with so nothing is changed if you use nesting functions as your first pass refactoring approach. You can then examine those functions and consider which should be moved out and why, and then add tests to any that have been pulled out of the host function.')