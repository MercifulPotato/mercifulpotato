Item(by='AnimalMuppet', descendants=None, kids=[25817086], score=None, time=1610896577, title=None, item_type='comment', url=None, parent=25799056, text='Late reply; I hope you see it.  My reply is late because I had to think for a day first.  So, my sincere congratulations - a post that makes me think for a day is <i>much</i> rarer than a post I agree with.<p>To me, sum types for error handling are isomorphic to checked exceptions.  They both let you do dual-track programming - separating the normal path from the error path.  Both have compiler support for enforcement.  But checked exceptions are no longer considered to be the answer.  What went wrong?<p>The problem turned out to be the programmers.  They did at least two things that subverted checked exceptions.<p>First, they silently ate exceptions (that is, had an empty catch block just to make the exception go away.  This is the equivalent of having a sum type that is either an integer or Nothing, and a function.  Rather than return the sum type, the function returns an integer.  In the Nothing case, the function just returns 0.  That&#x27;s about the same as the empty catch block to not have to declare the exception in the function&#x27;s return type.<p>The second way checked exceptions went wrong was the opposite.  When a function could throw Exception1, Exception2, Exception3, and Exception4, it was tempting to just declare it as throwing Exception (the base class).  In the same way, a function that gets SumType1 back from one function, SumType2 back from another function, and SumType3 from a third function may return the sum of the sum types.  It becomes an Everything type.<p>In both cases, the problem was that programmers were lazy.  But here we are 20 years later, and programmers are still lazy.  Until the programmers change, sum types won&#x27;t fix things any more than checked exceptions did.')