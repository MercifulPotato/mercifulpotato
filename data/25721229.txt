Item(by='jdoerfert', descendants=None, kids=None, score=None, time=1610319654, title=None, item_type='comment', url=None, parent=25720293, text='Since <a href="https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D86841" rel="nofollow">https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D86841</a>, ~ Aug 2020, Clang is able to reason about the forward progress guarantees of the input. For the LLVM-IR handling see <a href="https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D86233" rel="nofollow">https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D86233</a>. While we are still adding more fine-grained support of different language standards and corner cases, e.g., constant loop condition in C vs. C++, you should be able to tell LLVM a loop is allowed to loop forever w&#x2F;o side-effect. In fact, that is the new default. That said, LLVM still removes calls to functions without side effect unconditionally. We are working on that, i.a., <a href="https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D94106" rel="nofollow">https:&#x2F;&#x2F;reviews.llvm.org&#x2F;D94106</a>.')