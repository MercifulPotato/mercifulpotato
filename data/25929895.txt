Item(by='bkirkby', descendants=None, kids=None, score=None, time=1611763452, title=None, item_type='comment', url=None, parent=25924566, text='i believe one of the culprits for software taking so long is planning. this is alluded to in marty cagan&#x27;s excellent book _Inspired_.<p>first, the caveat: a software dev project will take up as much time as is allotted to it. when you have more than enough time allotted for a project, most people either spend more time in research or allow themselves partial implementation paths of multiple solutions to help decide which one is best. on the other end of the project, every project can be polished forever. so dev projects will take as least as much time as has been allotted to it.<p>when we go through the planning process, it usually follows something like this:<p>1. dev estimates how many &quot;points&quot; (which translates into time in most peoples mind) to allot to a task. dev then pads it to account for dev optimism and wanting to make sure they have the chance of meeting the &quot;committment&quot;\n2. program&#x2F;project&#x2F;product manager pads the number a bit further because they&#x27;ve been burned in the past on dev optimistic estimates and it&#x27;s better to underpromise and overdeliver\n3. dev proceeds on the task with the bloated estimate baked in and the task takes the full time allotted to it. it&#x27;s baked inefficiency.<p>part of the problem is the concept of &quot;committment&quot; for estimates. good scrum organizations have changed that term to &quot;prediction&quot; instead of &quot;committment&quot; since this has been such a big problem. but even that isn&#x27;t enough to solve the political capital lost when you &quot;predict&quot; wrong.<p>i think that any estimation above &quot;t-shirt size&quot; is going to bake this inefficiency into your process. the solution is less planning and more doing.')