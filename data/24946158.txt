Item(by='Someone', descendants=None, kids=None, score=None, time=1604087172, title=None, item_type='comment', url=None, parent=24944729, text='I got the stack reference from <a href="https:&#x2F;&#x2F;eprints.illc.uva.nl&#x2F;383&#x2F;1&#x2F;PP-2010-04.text.pdf" rel="nofollow">https:&#x2F;&#x2F;eprints.illc.uva.nl&#x2F;383&#x2F;1&#x2F;PP-2010-04.text.pdf</a>, which says:<p><i>“Dijkstra’s quest to generalize led him to use the well-known concept of a stack (i.e., a continuous portion of computer memory) as a run-time object, rather than a mere compile-time object as was the case in Samelson and Bauer’s ALCOR compiler.”</i><p>Digging deeper, I found <a href="https:&#x2F;&#x2F;www.illc.uva.nl&#x2F;Research&#x2F;Publications&#x2F;Reports&#x2F;MoL-2009-12.text.pdf" rel="nofollow">https:&#x2F;&#x2F;www.illc.uva.nl&#x2F;Research&#x2F;Publications&#x2F;Reports&#x2F;MoL-20...</a> (worth reading, IMHO) which indicates Samuelson and Baur used a stack to parse expressions and generate machine code for them, not for assigning memory locations.<p>So, I agree with you it can’t have been as simple als I implied.<p>I doubt they would have plonked <i>anything</i> on the heap, though, because languages of the time didn’t have a heap (FORTRAN certainly didn’t), and the language Samuelson and Baur wrote didn’t even allow functions to call other functions.')