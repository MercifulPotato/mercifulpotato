Item(by='tzs', descendants=None, kids=[24685809, 24683779, 24683757], score=None, time=1601857380, title=None, item_type='comment', url=None, parent=24682483, text='This is a general random number generator, in the sense that it takes an integer N and gives you a random integer in [0, N). It&#x27;s also a stateless random number generator, except for any state that the underlying [0, 2^64) generator it is built on top of keeps.<p>This suggests some questions that might be interesting.<p>1. For a given application, N is often fixed or at most has a small number of predetermined values. For what values of N can you find a hard coded [0, N) generator that is faster and still reasonably simple?<p>For example when N is a power of 2, then you can just call the underlying generator and then AND with the appropriate mask (possibly after shifting if the low bits of your underlying generator are not suitable).<p>If N is a power of 2 and not very large, and the low bits are good, you could take your underlying 64-bit number, split it by masking and shifting into multiple numbers in [0, N), return one of them and save the rest in an array. On subsequent calls return the numbers from the array until you are out.<p>If you were generating random bytes, say, this would cut your calls to the underlying random number generator by 87.5%.<p>For small N that are not powers of 2 this could still work. If N were 1000, say, you could treat the 64-bit random number as 6 numbers 10-bit number plus 4 leftover bits. If none of those 6 numbers is in [0, 1000), loop until you get a set of 6 that does have at least one in [0, 1000). (This will happen about once every few billion calls). Return the first one that is in [0, 1000), and store any others in an array to return on subsequent calls.<p>2. Can you write a random number generator generator? You call it with an N, and it returns a random number generator for [0, N) that is at least as fast as the fast general generator from the article?<p>I&#x27;ve looked at some special cases, but only for small N and small random number generators. Specifically, generating a dN with a dM, and aimed at something a human could do, by having a state diagram that a human could print out and follow as they roll the dice (or flip coins). For example, here is how to roll a d5 if all you have is a d8, and how to roll a d8 if all you have is a d5 [1]. Kind of neat, and great for a human, but wasteful for a computer, and if you try anything big the number of states grows rapidly. Even just rolling a d19 with a d32 has 325 states.<p>[1] <a href="https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;XuDprvs" rel="nofollow">https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;XuDprvs</a>')