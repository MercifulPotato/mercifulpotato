Item(by='badsectoracula', descendants=None, kids=[25453150], score=None, time=1608185222, title=None, item_type='comment', url=None, parent=25450955, text='&gt; I&#x27;m not going to argue about semantics but I want to be clear here: the basic definition of &quot;backwards compatibility&quot; is keeping the old thing working.<p>As i wrote a few messages above, that is the absolute minimum to call &quot;backwards compatibility&quot; so i&#x27;m not sure why you need to be clear since we agree on that part<p>&gt; Adding new features is often at odds with this because it can break things in subtle ways.<p>You take that into consideration when you decide to add new features, it isn&#x27;t like features come as demands from the gods in what and how to implement. And if you break things in subtle ways, you can fix them down the road if that is a problem - it isn&#x27;t like broken code has to remain broken.<p>&gt; You might be able to make some small backend changes, bringing back some of the major breaking changes to widgets or to the rendering model is out of the question.<p>The idea is to <i>not</i> make breaking changes to widgets in the first place. And changing the rendering model should also happen in a way that doesn&#x27;t break the existing code (e.g. add a compatibility layer for custom widgets that use the previous rendering model and either make any customized widgets -e.g. buttons- to detect that they are customized and use the older rendering model in that case so they remain compatible but the new rendering model for newer code or create new widgets that use the new rendering model with an API that is as drop-in as possible so that 99% of the changes can be a search and replace in codebases).<p>Yes, that makes things harder than simply ignoring backwards compatibility and expecting every single application that uses your library to change their own code and break any applications that cannot update to the new APIs&#x2F;ABIs, but that is the price for doing backwards compatibility properly.<p>Of course that is too late now for GTK and as i wrote previously (and later), the developers do not care about backwards compatibility anyway so i do not expect them to do anything about that when GTK5 comes around and instead they&#x27;d just expect everyone to waste time changing their working GTK4 code to use GTK5.<p>&gt; If someone really wants to backport things like wayland support or emojis to GTK2, or [...] this is not the case.<p>You are missing the point, my message wasn&#x27;t about what could or not be done by 3rd parties to improve GTK2 or whatever, but about what GTK developers themselves decided to do. What someone else would do is absolutely irrelevant to the topic.<p>&gt; I just doubt any of the GTK4 developers are going to want to drop what they&#x27;re working on now to do these things given the risk it carries combined with the fact that there are workarounds for these missing features.<p>I do not expect that to happen either, after all my first message in this submission even began with &quot;Because the GTK developers do not care about backwards compatibility.&quot;')