Item(by='benibela', descendants=None, kids=None, score=None, time=1604059218, title=None, item_type='comment', url=None, parent=24917659, text='I have to deal with this all the time. Unfortunately I wrote my programs in FreePascal, because Pascal was supposed to be the best, fastest, and safest language, but it is very bad at solving these kinds of problems.<p>I wrote my own rendering function. It was not so hard. I just wrote functions to calculate with arbitrary precision decimal numbers and then put the float in there. Reallly slow, but perfectly accurate unlike those in FreePascal.<p>Now FreePascal has implemented Grisu3, so it is fine to use their functions. Although it is printing weird numbers like   1.0000000000000001E-1 for 0.1. With my arbitrary precision calculation, I get 0.1 is exactly 0.1000000000000000055511151231257827021181583404541015625 and can round it to the shortest representation 0.1.<p>But the reverse problem -- parsing floating numbers -- is also really hard. And I cannot just bruteforce it by printing arbitrary precision binary floats. FreePascal&#x27;s parsing function still rounds wrongly (  <a href="https:&#x2F;&#x2F;bugs.freepascal.org&#x2F;view.php?id=29531" rel="nofollow">https:&#x2F;&#x2F;bugs.freepascal.org&#x2F;view.php?id=29531</a> ), so it is risky to use<p>For fast parsing of 99% cases, the Eisel-Lemire algorithm can be used. Unfortunately, there is no FreePascal implementation. I hope someone will port it FreePascal, so I do not have to do it.<p>And then it still leaves the hard 1% of cases. How do you parse them? Is there  a simple way to do it with some arbitrary precision calculations?')