Item(by='lmilcin', descendants=None, kids=[25222636, 25222964, 25222782, 25222912, 25222457, 25222627, 25222399], score=None, time=1606414534, title=None, item_type='comment', url=None, parent=25217270, text='Let me put my perspective on this.<p>As it happens, I have developed one algorithmic, low latency trading system in Common Lisp &#x2F; ANSI C, and then was asked to rewrite it in Java which I did.<p>It actually traded on Warsaw Stock Exchange and was certified by WSE and was connected directly to it (no intervening software).<p>Yes, it is possible to do really low latency in Java. My experience is my optimized Java code is about 20-30% slower than what very optimized C code which is absolutely awesome. We are talking real research project funded by one of larger brokerage houses and the application was expected to respond to market signals within single digit microseconds every single time.<p>The issue with Java isn&#x27;t that you can&#x27;t write low latency code. The issue is that you are left almost completely without tools as you can&#x27;t use almost anything from Java standard library and left scratching your head how to solve even simplest problem like managing memory without something coming and suddenly creating a lot of latency where you don&#x27;t want it to happen.<p>Can&#x27;t use interfaces, can&#x27;t use collections, can&#x27;t use exceptions, etc.<p>You can forget about freely allocating objects, except for very short lived objects you must relegate yourself to managing preallocated pools of objects.<p>I don&#x27;t know what is the current state of garbage collection but in our case garbage collection had to be turned off and nothing outside of Eden could be collected during program execution (Java 8).<p>Writing that kind of optimized code is all about control and Java is all about abstracting it so you don&#x27;t have to worry. As you see, both goals are at odds.<p>So I still prefer working low latency in C as it is more natural, native solution for managing problem where you absolutely need to control memory layouts, preallocated object pools, NUMA, compilation of decision trees to machine code, prefetcher, etc.<p>I have about 10 years combined experience working with C and 15 years working with Java.')