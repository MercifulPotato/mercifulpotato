Item(by='throwaway894345', descendants=None, kids=[25188883, 25188382, 25188328, 25188422, 25188401, 25188902], score=None, time=1606145759, title=None, item_type='comment', url=None, parent=25187467, text='&gt; The whole &quot;cattle not pets&quot; thing is fine once you obtain product market fit and your product needs to scale up. At that point you&#x27;ll have time and money to do it - before then you&#x27;re just wasting cycles.<p>Is this true? At my last company we wasted a bunch of time every week dealing with the accumulation of ad-hoc changes in different environments creating different behavior. When we pivoted to a continuous deployment model (we also moved from EC2 to ECS&#x2F;Fargate), all of this time went away as did all of the guess-work and fear of deploying to production (because production very rarely deviated from lower environments with respect to behavior, because all environments were reproducible). It also enabled us to stand up whole environments with the press of a button, which made it a lot easier for developers who were interating on infrastructure (we had a lot of async ECS&#x2F;Lambda workloads). I&#x27;m sure if we were smarter or had the right kind of discipline we could have made pet EC2 instances work, but we benefited a lot from moving to cattle&#x2F;containers.<p>NOTE: I also suspect that cattle&#x2F;EC2 is a lot harder than cattle&#x2F;containers, but that may also just my inexperience with the former. I would really like to know how to do reproducible EC2 instances properly, but from the research I&#x27;ve done, it seems like one has to reinvent a good chunk of Kubernetes.')