Item(by='junon', descendants=None, kids=None, score=None, time=1603717550, title=None, item_type='comment', url=None, parent=24894508, text='This is a bit of a misunderstanding of the C++&#x2F;C way of doing things. It makes sense in some ways but clearly there are better ways of doing it.<p>Which is precisely why C++20 has modules support.<p>Further, C++ does have a central package manager - whatever the system distributes. C&#x2F;C++ programs constantly link against the operating system and thus have to get those system headers from somewhere. This means a universal package manager (like Conan) requires buy-in from OS vendors or at least someone who can manage those packages with conviction, else the package manager doesn&#x27;t make a lot of sense to use.<p>This is contrast to Node, Ruby and Python as they are inherently Cross-Platform in nature and are not coupled tightly to the OS.<p>This is why C&#x2F;C++, historically, have not had a strong centralized package manager.<p>Anymore, I see less and less package management being used anyway. Most C&#x2F;C++ projects I work with either vendor in dependencies or use git submodules (the latter I prefer very much).<p>This is because, unlike e.g. the Node community, micro-dependencies are generally not worth the effort to bring in.<p>The usual exception to this sort of structure are codebases that will be distributed via a package manager - in which case, they generally rely on the package manager supplying correct versions of the dependencies.<p>These header-only libs work OK usually because they are able to be included with trivial linkage (something else you normally don&#x27;t need to care about in scripting environments). Linkage is something you have to care about regardless of if you&#x27;re writing C, C++ or machine code and since these languages give you pretty much free reign on the flexibility of all of these parameters, it&#x27;s hard to generalize everything into a nice package like scripting languages can.<p>Usually the functions inside header only libraries will be static inline, and will almost certainly increase compilation time (noticeably so if you use the header in many places).<p>There is work being done to improve this situation, it&#x27;s not like we&#x27;re all just sitting here going &quot;yes, we love the way things are and have no idea how to make things better.&quot; That&#x27;s far from the case. Shit just takes time.')