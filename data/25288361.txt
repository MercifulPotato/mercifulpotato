Item(by='simias', descendants=None, kids=[25290189, 25289541], score=None, time=1607000139, title=None, item_type='comment', url=None, parent=25287750, text='The Lisps core appeal is that it&#x27;s an extremely flexible and dynamic language family. They got an unparalleled macro system that lets you effectively design your own DSLs trivially for any scenario you may encounter.<p>It&#x27;s also the reason I could never really enjoy CL (or lisps in general): everybody basically ends up using their own dialect of Lisp with their own idiosyncrasies. Some people love the &quot;loop&quot; macro and use it everywhere, some others thing it&#x27;s ugly and use the equally powerful but syntactically very different &quot;do&quot; construct instead. You can look at some lisp code and have no idea of what it does if you don&#x27;t expand a few layers of macros first.<p>That can be true of any language of course, you can abuse overloading, references and macros in C++ if you want, but Lisp really pushes it to the limit in my experience.<p>Beyond that there&#x27;s also the problem that the ecosystem is not quite as developed as other more mainstream scripting languages. It doesn&#x27;t help that the community is split across half a dozen lisp&#x2F;scheme implementations with often incompatible packages. Do you want to use SBCL? Chicken Scheme? Racket? Guile? Emacs lisp? CLISP? ECL?')