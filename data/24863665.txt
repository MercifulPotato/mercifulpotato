Item(by='jchw', descendants=None, kids=None, score=None, time=1603403331, title=None, item_type='comment', url=None, parent=24861330, text='Hey dimitri, what&#x27;s up.<p>JSON is not 100% a subset of YAML, this is true; that&#x27;s slightly a simplification of the truth that is commonly echoed. It <i>is</i> a syntactically a subset of YAML, and for anything representable in JSON you can still do a functionally-lossless translation* from JSON to YAML and back again. This is because:<p>&gt; In the case where there are duplicate name Strings within an object, lexically preceding values for the same key shall be overwritten.<p>So,<p><pre><code>    { &quot;key&quot;: &quot;value&quot;, &quot;key&quot;: &quot;otherValue&quot; }\n</code></pre>\nbecomes<p><pre><code>    { &quot;key&quot;: &quot;otherValue&quot; }\n</code></pre>\nin a round trip, but represents the same thing, going by ECMA262 rules.<p>These are definitely distinct snippets of JSON and if you only use RFC4627 then it doesn&#x27;t define anything about how to parse the JSON beyond the syntax, whereas the YAML spec is a bit more complete in regards to specifying semantics probably partly since it&#x27;s a more complicated language. Thankfully in the common case most JSON parsers do as specified in ECMA262 (which makes sense since that&#x27;s where this format came from anyways) and use the latest key. You can see this in Go&#x27;s &quot;encoding&#x2F;json&quot; for example. So this property is still meaningfully true, I&#x27;d argue, even if it is more nuanced than commonly believed.<p>tl;dr: It is true that not all valid JSON is valid YAML. However, automatic translation between the JSON and YAML is still possible if you are going by ECMA262 JSON semantics.<p>P.S.: In practice, YAML parsers do actually often take the liberty of interpreting YAML to be a proper superset. This isn&#x27;t too surprising since most YAML parsers take a lot of liberties that are&#x2F;were outright spec violations, but just as an example, here&#x27;s PyYAML:<p><pre><code>    &gt;&gt;&gt; from yaml import load\n    &gt;&gt;&gt; load(&#x27;{&quot;a&quot;:&quot;1&quot;,&quot;a&quot;:2}&#x27;)\n    {&#x27;a&#x27;: 2}</code></pre>')