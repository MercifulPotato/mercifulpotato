Item(by='ThePhysicist', descendants=None, kids=None, score=None, time=1603355063, title=None, item_type='comment', url=None, parent=24837898, text='I&#x27;d recommend reading the &quot;Elkhound&quot; paper [1], which introduces a GLR parser that&#x27;s really easy to implement and very powerful, they use it in the paper to parse a large subset of C++. GLR parsers are so much more powerful and intuitive than recursive descent parser (I find), and they often make grammars easier to read and understand.<p>That said if you&#x27;re building a real programming language it makes sense to build the parser by hand as it often runs faster. For example, my GLR Python parsers clocked in at around 100.000-300.000 lines of Python code per second, while the regular Python parser could do 5-10 times as much per second (including tokenizing, parsing and AST generation). Looking at the amount of Python code that is parsed every day, this is a significant difference.<p>[1] <a href="https:&#x2F;&#x2F;people.eecs.berkeley.edu&#x2F;~necula&#x2F;Papers&#x2F;elkhound_cc04.pdf" rel="nofollow">https:&#x2F;&#x2F;people.eecs.berkeley.edu&#x2F;~necula&#x2F;Papers&#x2F;elkhound_cc0...</a>')