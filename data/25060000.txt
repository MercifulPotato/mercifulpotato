Item(by='hn_throwaway_99', descendants=None, kids=[25060723], score=None, time=1605113435, title=None, item_type='comment', url=None, parent=25059735, text='I think the issue really is that when people talk about CQRS they are almost always talking about event sourcing + CQRS, and that&#x27;s where the complexity lies.<p>I mean, look at GraphQL, which essentially makes it trivial to implement &quot;plain&quot; CQRS because there are always explicitly separate operations for mutations and queries, and it&#x27;s easy to have separate object definitions for these operations (this is in direct contrast to many REST architectures, where your verbs - GET, PUT, POST, DELETE, etc. - are fundamentally operating on the same objects). However, underlying in the actual DB there is just a single representation.<p>But I think when people talk about CQRS these days they are really talking about the underlying data being different (e.g. a log of write operations vs a repository of queryable objects), and that usually implies something like event sourcing, and with that model you have a ton of complexity involved in keeping the different &quot;sides&quot; in sync, and since many update operations also involve queries (i.e. only do this update if something else is true about another object) you get into transactional difficulties as well.')