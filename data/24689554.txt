Item(by='sdevonoes', descendants=1, kids=[24689658], score=2, time=1601917103, title='Ask HN: How to fill this knowlegde gap?', item_type='story', url=None, parent=None, text='Not sure how to explain it, but I&#x27;ll write down a couple of examples to show what I mean.<p>1. Developer X knows how to write decent code. Readability, maintainability, dependency injection, good patterns, solid principles, etc.; his code is easy to read and elegant, and more importantly it works as expected (at least based on the tests on staging environments). Now, the code goes to production and fails because: the number of, let&#x27;s say, customers the code was loading into memory was just too much for the server to handle (the code was using a simple `for` loop + array variable to keep the customers). The server&#x27;s memory was exhausted. One solution was to use rabbitmq instead of a simple array.<p>2. Developer X writes a `select` query to perform a search. The query works fine and is fast... but in production it takes much more time than expected (because the database has to handle load coming from other parts of the system as well and because the tables in production are way bigger than on dev or staging). Besides, the `select` query wasn&#x27;t being run against the slave database, but against master. Developer X didn&#x27;t think about these two topics when writing the query.<p>Basically, developer X has read all the books that appear in Google when one types `Top 10 Books That Every Programmer Must Read` (and more), and has a solide background in theoretical computer science (networking&#x2F;databases&#x2F;operating systems&#x2F;compilers&#x2F;automata theory), but has a hard time dealing with so-called &quot;common&quot; patterns&#x2F;solutions in the real world (master&#x2F;slave replication, async task processing via queues, issues that appear in production due to a huge amount of data, etc.)<p>Developer X is learning the &quot;hard way&quot; (through experience at his work place), but he finds this way of learning really slow (that&#x27;s why he read all the top +10 software engineer books in the past).<p>How can developer X learn faster the topics he lacks experience with? Any really good books out there?')