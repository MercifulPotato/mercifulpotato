Item(by='TeMPOraL', descendants=None, kids=[25140331], score=None, time=1605718975, title=None, item_type='comment', url=None, parent=25138565, text='&gt; <i>Linear text is easier to represent. Same reason why we don&#x27;t lay out programs in some sort of graph structure but instead write text from top to bottom.</i><p>Oh, but you actually do! You write your programs in form of trees (abstract syntax ones), and those trees generally represent directed and usually acyclic graphs of dependencies. For example:<p><pre><code>  (defun foo (x y) (+ x y))\n  (defun bar (x) (foo x x))\n\n  (foo (42 (bar 12)))\n</code></pre>\nIs a <i>tree</i> of tokens (with an implicit root node). It&#x27;s obvious when you write in a language like Lisp; most popular languages only obscure this by a layer of syntactic sugar, but you&#x27;re still writing trees.<p>And the reason we don&#x27;t lay out programs as visual, interactive graphs[0] is because text is faster to work with <i>using digital tools</i>. It&#x27;s faster to type the structure than click it into being[1], it&#x27;s easier to grep through it, to diff it, etc. But that has nothing to do with linear flow of text - linear flow is a limitation that we do our best to work around.<p>--<p>[0] - Except we sometimes do, see: LabVIEW, UnrealEngine&#x27;s Blueprints, Luna Lang, shader editors in just about every modern 3D application, ...<p>[1] - Though structural editors exist; see e.g. Paredit mode for Emacs, which lets you do edit operations on the tree your code represents, moving and splicing branches around while ensuring the tree structure is never damaged.')