Item(by='xg15', descendants=None, kids=None, score=None, time=1608401308, title=None, item_type='comment', url=None, parent=25477134, text='You&#x27;re right, but I think nonexistent monitoring&#x2F;debug capabilities are still a problem. For JS, if something goes wrong, you have a vast array of tools available to troubleshoot the problem. The amount of tools for WASM in the browser are smaller, but at least the code runs in an environment you know and can control.\nWith the WASM plugin approach presented here, you&#x27;re dependant on the tools the host service (in this case Shopify) provides. There is probably not much hope that they will offer step-through debugging or stack traces in the language the code was originally written, so being able to understand the actual WASM might become more important.<p>There might also be the point of APIs. I&#x27;m no expert, but I imagine in-browser WASM must have access to some set of browser-specific APIs to communicate with JS and the DOM. Shopify won&#x27;t have those APIs available in its runtime environment, but will probably offer different APIs to communicate with the purchase flow etc.\nI don&#x27;t know how the WASM tooling landscape looks, but if most tools assume the browser APIs to be available, this could make it harder to develop WASM for other contexts. E.g., you can compile Unity games to WASM, but that WASM will assume that it runs in a browser. You probably couldn&#x27;t use Unity to write a Shopify plugin.')