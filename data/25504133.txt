Item(by='nightcracker', descendants=None, kids=[25505913, 25506903, 25505369], score=None, time=1608625117, title=None, item_type='comment', url=None, parent=25502220, text='For years now I&#x27;ve felt the same way about functional v.s. imperative programming, and where functional languages go &#x27;wrong&#x27;, and what they get right.<p>There are exceptions of course, but I personally feel that there&#x27;s three main &#x27;kinds&#x27; of code:<p><pre><code>    1. functions that define some input&#x2F;output relation  \n    2. query methods on data structures  \n    3. modification methods on data structures  \n    4. the bodies of the above functions\n</code></pre>\nIn a purely functional language all four are purely functional, but this is (IMO) needlessly restrictive. It leads to recursion where iteration is more natural, awkward choices of data structures or even plain impossibility of certain algorithms&#x2F;data structures (ask a functional programming zealot to implement an O(1) hash map in a pure wayâ€”they will usually stammer, try to move goal posts, before finally admitting it&#x27;s not possible).<p>Personally I feel that 1 &amp; 2 should be &#x27;pure&#x27; and not modify (observable) data and have the same results, but 3 &amp; 4 are perfectly fine if not natural to be imperative and have mutable state.')