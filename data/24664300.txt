Item(by='cyphar', descendants=None, kids=None, score=None, time=1601656361, title=None, item_type='comment', url=None, parent=24661348, text='(EDIT: I didn&#x27;t mean to say that mailing lists are much better in every respect than GitHub&#x2F;GitLab&#x2F;etc, just that they don&#x27;t deserve the hate they seem to get in every discussion about tools for collaborative development.)<p>As someone who has been contributing to Linux for a few years now, which uses mailing lists exclusively for all development (and not only do they use Git, they wrote it) I&#x27;ve found that mail-based workflows are in some ways better to GitHub&#x2F;GitLab&#x2F;etc:<p>1. You can review individual patches, you cannot do this in GitHub at all (commenting at the bottom of a commit doesn&#x27;t count because it&#x27;s not tied to the PR and the comment is lost to ether on force-push). GitHub also defaults to you reviewing the full diff and make reviewing individual commits kind of frustrating (you&#x27;re just dropped into the commit history view rather than a proper review view).<p>2. All code reviews end up being line-based because the patch is the main body of the email. Design discussion happens as replies to the cover letter of the patch set, meaning you can easily tell which kind of discussion is happening. You can also directly comment on the git commit message, which the kernel community values a lot more than most projects.<p>3. You can far more easily be notified on patches sent to sections of the tree (though this is slightly tied to Linux&#x27;s development workflow with subsystem maintainers). GitHub only lets you watch a repository and get the firehouse of events -- which is about as useful as subscribing to the main LKML and trying to keep up with the notifications.<p>As for difficulty, honestly the bar to entry to send a patch to a mailing list if you&#x27;re using Git is just:<p><pre><code>  $ git send-email --to ... --cc ... origin&#x2F;master\n</code></pre>\nI would suggest doing &quot;git format-patch&quot; with --cover-letter and then checking the patch contents first, but you can do it one command for simple patches. Git was designed to make this mailing list approach work, so it shouldn&#x27;t be surprising that it&#x27;s actually pretty simple to use.')