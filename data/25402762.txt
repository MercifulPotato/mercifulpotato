Item(by='pdonis', descendants=None, kids=[25407330], score=None, time=1607815480, title=None, item_type='comment', url=None, parent=25401193, text='<i>&gt; They aren&#x27;t looked up by index into an array, they are looked up by name...[which is mapped] into a field&#x2F;slot index</i><p>Yes, this is a fair point. Still, accessing the slot does not require a dictionary lookup, as it would for an ordinary instance attribute, which was the main point I was trying to make.<p><i>&gt; there&#x27;re ways to optimize that lookup</i><p>The way CPython does this, if you can call it an &quot;optimization&quot;, is to implement the lookup as a data descriptor, which directly accesses the slot array location by index. (The namedtuple implementation correspondingly implements accessing the attribute as a read-only, non-data descriptor that directly accesses the appropriate tuple location by index.) Quite possibly the fact that the descriptor lookup comes before anything else in the attribute access code is considered &quot;optimization&quot; enough for this case.')