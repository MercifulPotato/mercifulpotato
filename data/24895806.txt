Item(by='wtetzner', descendants=None, kids=None, score=None, time=1603718202, title=None, item_type='comment', url=None, parent=24895424, text='&gt; I&#x27;m mostly arguing against extensive use of meta programming, which is promoted as one of the main reasons to view data as code, as meta programming is inherently disadvantaged for automated tooling.<p>Which is weird, because in most Lisps meta programming happens at compile time. It should be possible for tooling to just show you the expansion of any given macro invocation. In fact, when I used Clojure a decade ago, there was an Emacs command that would expand the macro invocation under your cursor, so you could see what code was actually being generated.<p>So I don&#x27;t really think that&#x27;s a fundamental limitation. I suspect it&#x27;s more related to the fact that Lisps aren&#x27;t especially popular, and don&#x27;t get the attention from tooling that other languages do.<p>&gt; Codifying the features the meta programming supplies in the language itself or in well supported libraries<p>But without the meta programming, those libraries might not actually be possible to write. You will either end up with a more dynamic interface (doing meta-stuff at runtime), or a clunkier and more verbose interface. I think being able to expand a macro invocation to see what it turns into is enough for all but the hairiest of macros.')