Item(by='twbarber', descendants=None, kids=None, score=None, time=1608394847, title=None, item_type='comment', url=None, parent=25477096, text='We’ve been using it for 4+ Years for a backend web service and a few other libraries at my current company. I had a chance to document our experience back in 2017[1].<p>I can’t speak to the approaches to concurrency, but from a day-to-day writing code perspective, it still feels miles ahead of Java in terms of cutting down boiler plate and null safety. Additionally, the support for it in IntelliJ gets better release after release. It’s worth _trying_ to move over from Java, because it’s such a cheap experiment. Add the standard lib, and you get complete interoperability out of the box.<p>The one caveat to our experience: we did find ourselves switching to Java when we were trying to squeeze as much performance out of something as we could. This was I think Kotlin 1.1 or 1.2, and perhaps the byte code generated now is better, but we did experience some performance hits with the syntactic sugar provided around list comprehension. Overall, however, I much rather prefer Kotlin today if my application is greenfield, and I’ve got a say in how it’s built.<p>[1] <a href="https:&#x2F;&#x2F;medium.com&#x2F;rocket-travel&#x2F;kotlin-on-the-backend-at-rocket-travel-31da239888db" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;rocket-travel&#x2F;kotlin-on-the-backend-at-ro...</a>')