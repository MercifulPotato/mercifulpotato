Item(by='sidlls', descendants=None, kids=None, score=None, time=1610321948, title=None, item_type='comment', url=None, parent=25717390, text='This article...exaggerates...the difference between SV and &#x27;not SV&#x27; companies. A lot, actually. I&#x27;ve worked at a few places in SV, and several outside of SV, too. For the most part it&#x27;s similar: use the existing infrastructure and implement a service, front-end, whatever, within that, to solve a business need. Very little in the way of novel or new solutions to genuinely new problems is required. The difference is mainly in pay and, to a much lesser degree, respect.<p>Regarding autonomy--usually a high degree of autonomy is found in two places: 1) at larger companies, a very senior, trusted individual who has proven himself to be competent and capable of making big decisions; 2) at startups, a very junior individual scratching an itch and loading up on technical debt.<p>For the most part solutions are prescribed or narrowly constrained--99.999% of engineers are going to use the same services architecture, libraries, and compute infra every other engineer is using.<p>Regarding curiosity and problem solving: I guess I have a different definition of &quot;curiosity&quot; and &quot;problem solving.&quot; What I&#x27;ve seen in this industry ain&#x27;t either, generally: it&#x27;s mainly driven by personalities at the individual or corporate level, e.g., &quot;everyone&quot; doing what Google does or following Fowler, and empirically unsupported anecdotes&#x2F;fads (e.g. TDD, agile, etc.). The vast majority of engineering work in any established company is to use an existing tool or infra to implement a generally well-defined need. Most of the interesting details are already solved, and the implementation work, while also interesting, isn&#x27;t really solving the problem, per se.')