Item(by='taeric', descendants=None, kids=[24855935], score=None, time=1603352064, title=None, item_type='comment', url=None, parent=24849216, text='Love the story, though the examples feel off to me.  For many, it is just highlighting that at the full system level, performance and features are effectively a game of whack-a-mole.<p>That is, sometimes isn&#x27;t it good to over optimize a part to the detriment of the system, so that you can then fix the parts it leaves exposed?<p>Take the example of the register file in the article, it was bad because they had to route over parts of the chip that had been planned for the file, but were now empty.  That said, they now had a better target for how much they had to allocate to the file next time, such that they could use that space or a smaller die.<p>This is equally true for the example on the wide execution stage.  If you can manage to do that without blowing some other budget, then you expose a target that the fetch now needs to be improved.<p>In a sense, sometimes you can either improve the cart or the horse.  Sometimes you can improve both.  Often the full system only benefits when you get both to the same level of benefit, but doing both at the same time can be prohibitive.  And if you preclude work that can&#x27;t benefit without other work, then you often starve out ways for that work to happen.')