Item(by='choeger', descendants=None, kids=[24732389], score=None, time=1602264674, title=None, item_type='comment', url=None, parent=24729154, text='It was rather confusing and I consider myself well-informed about the expression problem.<p>But to give you some constructive feedback, your understanding, or your writing, of the expression problem lacks two fundamental concepts:<p>First of all, in functional languages it is as simple as in object-oriented languages to add new data types. It hard to add a <i>variant</i> of an existing datatype. In object-oriented languages it is also trivial to add new functions, but it is hard to add a new function for all <i>derivates</i> of a class. So it would be more like having a table for perfectly cooking <i>all</i> variants of fish.<p>And secondly, the solution offered by Julia is also incomplete. Both functional and object-oriented languages give you completeness guarantees. So the compiler will warn you when you miss a variant of fish (functional) for a method or a method for a particular fish (object-oriented) At least to my understanding the completeness of methods (that&#x27;s the right term, no?) in Julia is unchecked. You can extend, but you can easily miss a case.<p>The same (unchecked extensions) can be done in functional languages with open algebraic datatypes and in object-oriented languages with default methods that throw exceptions.')