Item(by='mr_tristan', descendants=None, kids=None, score=None, time=1612139699, title=None, item_type='comment', url=None, parent=25983792, text='Yeah, I found the article to be a little annoying in that it&#x27;s mostly attacking WeWork.<p>My recommendation for anyone new to the area, is the streaming systems book: <a href="http:&#x2F;&#x2F;streamingbook.net&#x2F;" rel="nofollow">http:&#x2F;&#x2F;streamingbook.net&#x2F;</a>, which came after two excellent blog posts: <a href="https:&#x2F;&#x2F;www.oreilly.com&#x2F;radar&#x2F;the-world-beyond-batch-streaming-101&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.oreilly.com&#x2F;radar&#x2F;the-world-beyond-batch-streami...</a>, and <a href="https:&#x2F;&#x2F;www.oreilly.com&#x2F;radar&#x2F;the-world-beyond-batch-streaming-102&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.oreilly.com&#x2F;radar&#x2F;the-world-beyond-batch-streami...</a><p>Basically, if you have an unbounded data problem, and you might have something that is _practically_ unbounded, that book really helped me gain insight to describe what we used Kinesis for (which is really similar to Kafka in a lot of ways).<p>Thinking about event vs processing time, ordering and windowing requirements, etc, were really helpful in thinking about my own data problems.<p>In the end, the author of this article claimed that WeWork just simply didn&#x27;t have much of an unbounded data problem. Which I generally agree with. But simply saying &quot;you can do this in PostgreSQL&quot; isn&#x27;t really a great takeaway, and, it really feels that was the message being reinforced here.')