Item(by='jmillikin', descendants=None, kids=None, score=None, time=1606657354, title=None, item_type='comment', url=None, parent=25244880, text='I posted briefly elsewhere in the thread, but am now back at a compute with a keyboard so can give a more detailed answer.<p>First, background reading:<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;6to4" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;6to4</a><p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IPv6_rapid_deployment" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IPv6_rapid_deployment</a><p>The basic idea is you create a SIP tunnel device and assign it an IPv6 &#x2F;64 composed of two parts:<p>1. A network prefix between 32 and 56 bits long. This prefix is the same for all machines in the network.<p>2. A subnet derived from the machine&#x27;s IPv4 address, minus the netmask.<p>For example, if your IPv4 addresses are allocated from 192.168.1.0&#x2F;24 and the machine has 192.168.1.155, then the network prefix should be 56 bits long (64 - (32 - 24)) and the machine&#x27;s prefix is `xxxx:xxxx:xxxx:xx9B::&#x2F;64`.<p>The Linux kernel knows how to wrap the IPv6 with IPv4 so it can route within your local network to any other machine with a similarly configured tunnel device. If you want to send packets to 192.168.1.200 then they get addressed to `xxxx:xxxx:xxxx:xxC8::1` or whatever, they&#x27;ll transit the IPv4 network like normal, and on arrival the receiving machine&#x27;s kernel will strip off the IPv4 wrapper and route the IPv6 locally.<p>How&#x27;s this useful? Well, if each machine has a &#x2F;64 prefix then each pod can be allocated an IPv6 within that prefix without coordinating with other machines. Let&#x27;s say the pod gets `xxxx:xxxx:xxxx:xxC8::aaaa:bbbb:cccc`. Anything with a correctly configured tunnel and that pod IP can route it traffic, no proxy or iptables needed.')