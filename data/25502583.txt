Item(by='ithrow', descendants=None, kids=None, score=None, time=1608608416, title=None, item_type='comment', url=None, parent=25502240, text='Production implementations of persistent data structures in an industrial VM plus abstractions for state management, polymorphism, concurrency, the sequence abstraction, etc... It just gives more things for day-to-day programming. While Scheme gives you good foundations, you have to build a lot stuff yourself, it&#x27;s too primitive (haven&#x27;t follow Scheme since R5RS). But it&#x27;s really mostly about the literal data structures and leveraging them anywhere you can to represent information, it&#x27;s maps everywhere. Data oriented solutions is the common term use in the community. This answer by one the Clojure maintainers sums it up better than me: <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25377022" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25377022</a><p>Racket extends Scheme with useful stuff too for everyday programming but Clojure&#x27;s immutable data structures with its big library of functions for manipulating them in a nice abstract generic way, with the fact that in runs in the JVM gives it a big edge for &quot;real world&quot; programming IMO. You do need strong knowledge of Java and the JVM for critical services.<p>Almost all your knowledge of Racket and Scheme will transfer and be valuable for Clojure, so you already know most of it and have a big head start if you plan to learn it.')