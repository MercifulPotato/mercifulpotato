Item(by='dfabulich', descendants=None, kids=[25500415, 25499429], score=None, time=1608582255, title=None, item_type='comment', url=None, parent=25499101, text='Yes, and that&#x27;s a problem: there&#x27;s no way to know when you call react-fs&#x2F;react-fetch&#x2F;etc whether it will be synchronous or asynchronous. async&#x2F;await would make this code substantially clearer.<p>(To be clear, right now the code is using a, uh, <i>very surprising</i> pattern to make asynchronous code appear synchronous: if the result value is cached, it returns the value synchronously, but if not, the fetcher <i>throws a Promise</i>. You know, you&#x27;d normally throw exception objects, but JS lets you throw any value, so why not throw a <i>Promise</i> amirite?!? When React catches a Promise (a thenable) it awaits the result, caches it and then re-runs the React component; now the component <i>won&#x27;t</i> throw a Promise and will run to completion normally.)<p>The FAQ says extremely little about why async&#x2F;await were avoided:<p>&gt; <i>Why don’t use just use async&#x2F;await?</i><p>&gt; <i>We’d still need a layer on top, for example, to deduplicate fetches between components within a single request. This is why there are wrappers around async APIs. You will be able to write your own. We also want to avoid delays in the case that data is synchronously available -- note that async&#x2F;await uses Promises and incurs an extra tick in these cases.</i><p>A layer to deduplicate fetches sounds great, but that library could use async&#x2F;await, too.<p>Using async&#x2F;await will make this code substantially easier to understand, and the cost of a &quot;tick&quot; is trivial (and certainly worth the price, particularly in server-side code).<p>EDIT: Thinking about this a bit harder, I know the React team has been extremely resistant to async&#x2F;await in components for years now. Fine. But that needs its own RFC. Some clear written document spelling out in detail why async&#x2F;await is the wrong approach for React, and not just a comment on this RFC.<p>I&#x27;d like to ask the React team to write that RFC doc because I think it can&#x27;t be written: you&#x27;ll find that the argument falls apart when you try to explain it.')