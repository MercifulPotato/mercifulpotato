Item(by='kaoD', descendants=None, kids=[25612506], score=None, time=1609590438, title=None, item_type='comment', url=None, parent=25612233, text='&gt; &#x27;static is not the &quot;lifetime of the entire application&quot; when it is used in the context of T: &#x27;static.<p>Yes it is.<p>T: &#x27;static means T can live <i>up to</i> the end of the &quot;lifetime of the entire application&quot;.<p>&gt; ...but it can also have values in it which are not &#x27;static.<p>I don&#x27;t follow. Values are indeed bound by &#x27;static. If they weren&#x27;t we wouldn&#x27;t be able to pass values to other threads (which can potentially last as long as our application&#x27;s main thread).<p>&gt; &#x27;static is not the &quot;lifetime of the entire application&quot; when it is used in the context of T: &#x27;static.<p>It is. Any owned instance without non-&#x27;static references inside can live up to the &quot;lifetime of the entire application&quot;. You might drop them earlier if you wanted to, but you don&#x27;t <i>have to</i> since it can live up to the &quot;lifetime of the entire application&quot; and therefore can be passed for example into a thread that can hold the value up to the end of the &quot;lifetime of the entire application&quot;.<p>Any owned value can be held indefinitely as long as the program is running.<p>I&#x27;m taking a guess here: you mean that values&#x27; lifetimes can be constrained (I guess you mean by dropping the actual value). But it&#x27;s the owner the one that ended it earlier, not the caller (where &#x27;static applied). You will never be able to have an owned value with a lifetime shorter than &#x27;static without dropping it and, if you drop it, you cannot pass it anywhere. Hence why any owned type that is passed is, by definition, bound by &#x27;static.<p>&gt; ...but my take on it is:<p>&gt; - IF you take &quot;x is &#x27;static&quot; as meaning the &quot;X is valid for entire lifetime of the application&quot;<p>&gt; then if:<p>&gt; - x: &amp;&#x27;static &#x27;is static&#x27; and must be valid for the entire lifetime of the application.<p>&gt; I would expect:<p>&gt; - x: T + &#x27;static &#x27;is static&#x27; and must be valid for the entire lifetime of the application.<p>Your expectations are correct and that&#x27;s what it is. Just replace &quot;must be valid&quot; with &quot;can live up to&quot;.<p>That&#x27;s why you need to pass T: &#x27;static to threads, because a separate thread needs something to hold up to the end of the application since a thread can potentially never end.<p><a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;fn.spawn.html" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;fn.spawn.html</a>')