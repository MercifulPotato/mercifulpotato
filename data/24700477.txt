Item(by='dathinab', descendants=None, kids=None, score=None, time=1602006524, title=None, item_type='comment', url=None, parent=24675155, text='No, through in some cases yes.<p>There is also a `tokio02` feature which let&#x27;s you run tokio <i>inside of</i> async-std.<p>The problems are:<p>- The global `spawn` method need to know on which executor to spwan thinks, the ones for tokio look for a tokio executor the ones for `async-std` for a async std one.<p>- The async-io implementations <i>might</i> require to be run in the executor they are shipped with.<p>- Some combinators shipped with some runtimes also need to be run in that runtime.<p>This is a bit annoying. I believe everyone involved would have preferred a single general purpose runtime, but to all kinds of reasons this didn&#x27;t work out.<p>The original plan was to provide generic interfaces in the futures library so that <i>most</i> code (including things like grpc) can be independent of the runtime.<p>But people couldn&#x27;t agree on a common interface. The main problem was around how to do the `AsyncIo` trait and timers.<p>Since the introduction of async&#x2F;await the runtimes have converged a lot more in their external interfaces, and there are plan to put `AsyncRead`&#x2F;`AsyncWrite` traits into std.<p>After this the divergence problem might maybe be fixed slowly.<p>---<p>To provide some more information about the problem:<p>Basically a executor consists of three parts:<p>1. The thing driving&#x2F;running&#x2F;polling futures.<p>2. A reactor handling the async io details.<p>3. Something to handle things lie `Delay`&#x2F;`Timeout`.<p>For the first point the problem is a missing standardized way to `spawn` new independent futures and another way to do so locally (`LocalExecutor`&#x2F;`LocalSet`).<p>For the second point it&#x27;s not so likely that things will converge but we could agree on a way to have multiple `Reactors` running in parallel or similar in ways which should &quot;just work&quot; without to much overhead.<p>For the third point people currently can&#x27;t agree one specific implementation as far as I remember once they do we might at least have a generic timer interface.<p>Anyway by now most of the (new) external APIs of both async-std and tokio now mirror std (tokio copied that once it turned out it was a good idea).<p>This also means that most implementations can be made to work with any executor by having a feature for any of the executors and then depending on the feature import different things, for most parts most of the code will just work by importing think from async-std instead of think from tokio.')