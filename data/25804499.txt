Item(by='stack_underflow', descendants=None, kids=None, score=None, time=1610823955, title=None, item_type='comment', url=None, parent=25802933, text='Somewhat related; I&#x27;ve always been very curious why a lot of developers I&#x27;ve worked with seem to think testing isn&#x27;t worth the effort, and I&#x27;ve been keeping a mental checklist of all the reasons&#x2F;excuses I hear so that I can reflect on them as well against my own experiences - sort of a way to challenge myself and ensure I&#x27;m not just cargo-culting methodologies.<p>Recently I decided to go through `Growing Object-Oriented Software - Freeman, Pryce` (and actually finish working through it this time) with the goal of understanding what &quot;proper TDD&quot; is supposed to look like. Something interesting I noticed is almost all the complaints I&#x27;ve seen as reasons against TDD&#x2F;certain testing methods all seem to be examples the authors use as how not to use TDD&#x2F;testing. It seems to me that a lot of developers have just learned _of_ these techniques by name, and haven&#x27;t really put a lot of time&#x2F;effort into practicing their application and instead just seem to write them off on face value or by the literal interpretation of their names.<p>One example, a lot of people I speak with seem to think TDD is very literal &quot;write a _unit-test_* for everything before you write the implementation OR ELSE...&quot;, but of course there&#x27;s a lot more nuance than that depending on the situation. The book actually puts a huge emphasis on having your initial test(s) be end-to-end tests that slice through the system as a whole, with the idea being to create nested feedback loops of varying granularity&#x2F;abstraction to allow you to iterate without fear. This was something I never heard emphasized at all when I started learning about TDD, or hell even in a paid course my employer put us through by a &quot;TDD expert&quot;.<p>I should also clarify, I only consider these claims from developers that have a proven track record of working on large&#x2F;complex systems since, well, those who don&#x27;t probably haven&#x27;t cultivated their ideal workflows&#x2F;approaches yet (or just haven&#x27;t been given the opportunity to showcase them, as is common in large companies).<p>* I emphasize unit-test because a lot of code bases I&#x27;ve worked in rarely have anything other than just unit-tests...')