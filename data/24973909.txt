Item(by='phizy', descendants=None, kids=[24974394], score=None, time=1604354168, title=None, item_type='comment', url=None, parent=24973647, text='&gt;What variable or data was mutated within haskell?<p>The stdout buffer.<p>Just because mutation isn&#x27;t explicit doesn&#x27;t mean it isn&#x27;t there. Programming languages are not syntax devoid of meaning: they have semantics. What happens at runtime is part of what a programming language does. (Arguably, that is the most important part of what they do.)<p>&gt;What this means is that imperative primitives must exist for any programming to work.<p>That&#x27;s completely untrue. Imperative languages can be implemented as a subset of functional ones[1] and vice versa. Again, they&#x27;re just different models. No language can do anything if it isn&#x27;t <i>implemented in a machine</i>. A machine isn&#x27;t &quot;imperative&quot;[2], it&#x27;s a pile of atoms that do what atoms do, without paradigm or instruction. You absolutely could implement a pure functional assembly language. The reason nobody has, is because it doesn&#x27;t matter: any Turing complete language can be used to implement any other language[3].<p>Try to implement `volatile` in C without using another language. Does that mean C fails to model real hardware? No, because it has `volatile` to get volatile semantics! Just like Haskell has IO to get I&#x2F;O side-effects. Or ST to get mutation semantics.<p>&gt; Use your algebra to make it work. You&#x27;ll find it&#x27;s impossible.<p>Don&#x27;t assert it, Prove it. Show me one computable function that cannot be computed using boolean algebra.<p>[1] <a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;wp-content&#x2F;uploads&#x2F;1993&#x2F;01&#x2F;imperative.pdf" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;wp-content&#x2F;uploads&#x2F;...</a>\n[3] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lisp_machine" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lisp_machine</a>\n[2] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_completeness" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_completeness</a>')