Item(by='WorldMaker', descendants=None, kids=None, score=None, time=1610660132, title=None, item_type='comment', url=None, parent=25774974, text='I think a lot of that is the &quot;problems they are solving&quot; and &quot;problems they left behind for the developer&quot;. JQuery was built to solve &quot;browser compatibility issues&quot; and left behind things like &quot;component structures of code&#x2F;code organization&quot;, &quot;data-flow organization&quot;, and more as out of scope.<p>Browsers have since mostly fixed &quot;browser compatibility issues&quot; at the standards level, so that problem technically no longer needs solving.<p>As applications have grown larger those other things that were out of scope for JQuery have become bigger and bigger problems that developers face. (Of the big two I mentioned React solves one, Redux solves the other.)<p>Some people see JQuery as a &quot;cardinal sin&quot; for the first issue: browsers have already &quot;solved&quot; this, this is a deadweight because it fixes a problem I no longer have. They would have fewer problems with React&#x2F;Redux&#x2F;whatever because they solve new problems.<p>Some people see JQuery as a &quot;cardinal sin&quot; as much for the latter issue: because JQuery was so unopinionated on code structure, data flow, component structure, it led to a lot of real world code that was &quot;JQuery spaghetti&quot; littered with anti-practices like relying heavily on global or might as well be global variables for state information, with no structure to which code might impact which variables and when. Componentizing a JQuery system was often a lot of hard work that JQuery itself didn&#x27;t help with (and given it&#x27;s own common usage as a window.$ global with sometimes surprising bits of hidden state inside it, in some cases directly hurt those efforts). Given libraries like React or Redux were designed to solve some of the problems that JQuery once created, it also seems clear why some developers might be very vocally antagonistic to JQuery but have no problem bloating a project with tools that solved those problems and&#x2F;or have more structure and opinions on building &quot;good&quot; componentized&#x2F;compartmentalized structures.')