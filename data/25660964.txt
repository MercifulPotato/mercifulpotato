Item(by='rektide', descendants=None, kids=None, score=None, time=1609959882, title=None, item_type='comment', url=None, parent=25659698, text='my experience in the industry of coding has driven home to huge points:<p>1. that each individual &amp; each team has an enormous amount of leeway &amp; personal responsibility. teams are vested with what power they take &amp; how far they &amp; their environment let them.<p>2. complexity is everywhere &amp; typically to work, to produce, is to add complexity &amp; create new ways for things to go bad. indeed part of what is most notable about FAANG companies is that they have colossal staffs- &amp; notably many of their senior engineer ranks- working to manage &amp; reduce complexity, by inventing continuous integration&#x2F;deploy systems, by devising trackers for cyclocmatic code &amp; cyclomatic data-dependency&#x2F;data-access-pattern complexity, by creating more resilient infrastructure &amp; new ways to administrate systems.<p>i fully agree that there is a huge opportunity cost. i think it&#x27;s madness how focused &amp; specific these interview courses are, what a set path they are on. but i also think it&#x27;s been underspoken that learning algorithms &amp; data-structures &amp; less so systems are fairly core material to the industry, that these are basic truths that underpin every single thing we do. and i think the knowledge is acquireable and important.<p>and i think just as much, it&#x27;s unsaid, culturally, a lot of my first point: that individuals in this industry have enormous liberties, that they are sent off to incredible &amp; weird tasks, to go drag something or other back to the company. notably, it&#x27;s just so so so so hard for a company to take responsibility for &quot;it&#x27;s&quot; code, to re-integrate, to handle, the new complexity that gets dragged in to base, by each individual contributor. there are so few repeatable processes, so few really good ways for a company to systematically remember what any given thing is, how it works, why it works, what it does. code-bases are bits of the wild, collected from all over, so often from one or a couple of individual contributors who set forth on some expedition. even, yes, the juniors. hacking new tweaks, changes, sometimes it doesn&#x27;t feel like big stuff, but to software engineer is to set out upon wild land, most every time.<p>the sociology of this is fascinating to me, the dynamic is incredibly strong, incredibly asymmetric in how much responsibility is given to the developer, how wild the tasks are, &amp; the difficulty &amp; crudeness with which companies step up to re-integrate, take in, take responsibility for, manage the work that gets done.')