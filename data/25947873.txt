Item(by='mcguire', descendants=None, kids=[25948197], score=None, time=1611863045, title=None, item_type='comment', url=None, parent=25945316, text='Commoditizing software was never a strategy, at least until a very recent stage. Open source software projects commoditized software either by being vastly more successful and out-competing their alternatives (gcc[1]), or by being a singularly better value proposition than their alternatives (linux[2]). The companies which have &quot;commoditized their complements&quot;, used &quot;open source as a growth strategy&quot;, or &quot;become entrenched monopolies&quot; have always had a rather sketchy relationship with open source software, which is why they have preferred to avoid an actual free software license.[3]<p>[1] Back in the good ol&#x27; days, everybody made C&#x2F;C++ compilers. OS vendors made compilers highly tuned for their hardware and software; others, like embedded vendors, made compilers tightly integrated with their tooling. Then gcc showed up <i>everywhere,</i> and started producing optimized code better than the tuned products. By the time LLVM appeared (2003?), its only real competition was gcc and a fork of gcc.<p>[2] Originally, Unix vendors had incremental improvements over their competitors in specific areas (IBM: SMIT&#x2F;JFS, SiliG: graphics, etc.). Initially, Linux was a joke. Then it became as stable as the vendor OSs and the hardware it ran on was cheaper. Then it ran on any hardware. It may never have achieved feature-advantages over the competition, but taken as an entire package, the competition couldn&#x27;t provide anywhere near enough value.<p>[3] IBM&#x27;s a funny case, especially with Red Hat. IBM hasn&#x27;t had a functioning software (or hardware?) product for at least 30 years.')