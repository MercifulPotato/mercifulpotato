Item(by='dathinab', descendants=None, kids=None, score=None, time=1608303339, title=None, item_type='comment', url=None, parent=25464089, text='No, the article just replaces the container with SQL but not the components (e.g. a slide). <i>Which without extra changes are still XML</i>, stored as text in the database.<p>The change from storing the inner document format in something which is not XML is completely independent of changing the outer container to sqlite.<p>SQL isn&#x27;t really suited as a markup language so storing styles &quot;flowing&quot; text in it isn&#x27;t that good of an idea. The article only recommends storing all separate blobs of styled text in tables (it also sidesteps the whole problem about flow text across multiple pages by simple using slides as an example ;=) ).<p>Lastly I&#x27;m against using a &quot;stock&quot;&#x2F;unhardened sqlite version, not sqlite in general. Ironically on  of the features I would disable for now is related to text search but I don&#x27;t remember the name of it so I can&#x27;t really use it as an argument :=&#x2F;.<p>So if you ask me:<p>- Change containers to a different format then zipped sql files, consider sqlite but use a hardened feature limited sqlite version.<p>- Change the inner representation away from XML(1)<p>(1): Ok, there are ways to safely use XML but this isn&#x27;t useful for this discussion and they require a bunch of thinks which all reduce usability (of the XML library) and performance and only work for certain use-cases where you e.g. do not need fully stable serialization and de-serialization and might be limited to a subset of XML and don&#x27;t rely on the verifier for anything &quot;safety&quot; realated and preferably don&#x27;t use C&#x2F;C++ to write a parser... so it&#x27;s easier to just not do it tbh.')