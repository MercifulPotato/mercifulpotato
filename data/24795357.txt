Item(by='Jweb_Guru', descendants=None, kids=[24797333], score=None, time=1602802952, title=None, item_type='comment', url=None, parent=24794487, text='The Wikipedia page on unit types is completely accurate with regards to what a unit type is, and a unit type is the correct model for the type that a void function returns in C.  Sure, void can be interpreted in a few different ways, but void in function return or argument position definitely <i>cannot</i> be interpreted as the bottom type.  As far as I know, C does not really have bottom as a first-class concept, however useful it might be.  So while I agree with you that it would be theoretically possible for C&#x27;s statement about void not having any inhabitants to coincide with the type theoretic defintion of void, in practice it does not (for all the reasons I mentioned earlier).<p>You will note that all the differences mentioned between void and unit in the Wikipedia article are syntactic, not semantic; this is because semantically there is no real distinction between them.<p>What is bizarre to me, though, is that you didn&#x27;t read the Wikipedia article you just carelessly edited, which already mentions Common Lisp and explicitly tells you <i>not</i> to confuse the NULL type (which has single inhabitant NIL--i.e. you agree with me that it is the same as void, and they are both unit types) with the NIL type (bottom).  Firstly, the existence of a subtyping relationship that lets you upcast values of type unit to values of type symbol (or indeed, any other type) does not somehow make it not a unit type (only subtyping in the <i>other</i> direction would accomplish such a thing), and certainly does not invalidate any of the article&#x27;s claims as you assert.  Secondly, <i>no</i> implementation detail of Common Lisp will affect the definition of a unit type, regardless of how many edits one makes to a Wikipedia page, any more than the C standard claiming void functions don&#x27;t have a return type changes how they are modeled mathematically.  Notions as fundamental as unit types are defined semantically and aren&#x27;t really tied to specific language syntax.')