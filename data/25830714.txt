Item(by='jakobnissen', descendants=None, kids=None, score=None, time=1611039011, title=None, item_type='comment', url=None, parent=25825441, text='In that case, it&#x27;s closer to C in speed, and usually more generic and &quot;easy on the eyes&quot;. I don&#x27;t know much about C, but seem to recall that it doesn&#x27;t play well with unicode, usually treating text as bytes. Here&#x27;s an equivalent Julia example:<p><pre><code>    function longest_word(st::Union{String, SubString{String}})\n        len = 0\n        start = 1\n        @inbounds for i in 1:ncodeunits(st)\n            if codeunit(st, i) == UInt8(&#x27; &#x27;)\n                len = max(len, i - start)\n                start = i + 1\n            end\n        end\n        max(len, ncodeunits(st) + 1 - start)\n    end\n\n</code></pre>\nThis takes about 8.2 µs for a 8.5 Kb piece of text on my laptop, but that only works on ASCII text and only treats &#x27; &#x27; as whitespace, not e.g. &#x27;\\n&#x27;. For a more generic one, you can do:<p><pre><code>    function longest_word(st::Union{String, SubString{String}})\n        len = i = 0\n        start = 1\n        for char in st\n            i += 1\n            if isspace(char)\n                len = max(len, i - start)\n                start = i + 1\n            end\n        end\n        max(len, i + 1 - start)\n    end\n</code></pre>\nThis is 20 µs for the same text, so still only 3 ns per char. The underlying functionality, namely String iteration and the `isspace` function, is also implemented in pure Julia.')