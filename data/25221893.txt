Item(by='drknow007', descendants=None, kids=[25222762], score=None, time=1606411504, title=None, item_type='comment', url=None, parent=25219332, text='&gt;&gt; They do have a steep learning curve. The web is polluted with tutorials and StackOverflow answers...<p>Agreed.<p>&gt;&gt; The trickery is not needed anymore...<p>This isn&#x27;t needed (as much) today because of browser consolidation. The point is that these Web technologies were too difficult for browsers to maintain. The tech didn&#x27;t get better. Instead, we had to minimize the # of containers in order to control the havoc.<p>&gt;&gt; ... But you&#x27;re dangerously close to comparing apples to oranges here...<p>I&#x27;m not trying to directly compare layer tech here. Rather I&#x27;m comparing how well each layer&#x27;s tools serve the developer and project. I&#x27;m not interested in a career move, thank you - lol. This thread is about best software strategies that have the responsibility of serving the world. Far more important stuff than me. It matters and is worth continuous re-assessment.<p>&gt;&gt; No, the web stack has become popular because of the people from your first paragraph: the ones paying the bills. The ones who couldn&#x27;t afford to lose customers by requiring a plug-in...<p>Just not true. Historically, Web dev meant crazy amounts of code hacks in order to target different browsers. Again, it wasn&#x27;t better tech - it was far worse and costly. Remember Flash, ActiveX, Silverlight, etc? Lots of successful sites and web apps used them to work around this problem.<p>Just stop and think about this. Flash devs didn&#x27;t have to adapt their projects to their host container. It just worked. HTML&#x2F;CSS&#x2F;JS required lots more effort because of their intrinsic deficiencies. My point isn&#x27;t that Flash (or anything else is better), its that HTML&#x2F;CSS&#x2F;JS is not where it needs to be, yet it still exists! And the reason it exists is because it runs on port 80! It&#x27;s that simple - HTML&#x2F;CSS&#x2F;JS is one big loophole into x-platform development. Without this loophole, it loses much of its strategic appeal.<p>Again, I argue that devs really want to just use the tools they know and have their bits run everywhere. And &#x27;everywhere&#x27; is a tall order because for today&#x27;s consumers, this means total cross-platform on desktop, mobile, and web. Fast and fluid.<p>&gt;&gt; Types? JavaScript is typed, always was. Ajax was always asynchronous - do you mean the syntactic sugar?<p>Yes, I mean getting rid of the hacks and plethora of libraries needed to accomplish simple, age old software goals.<p>Imho, the Web stack has a real opportunity now to get focused and become a tech stack that most devs can love because it offers a x-platform strategy (although, importantly not because of HTML&#x2F;CSS&#x2F;JS - but because of port 80). But it needs to get better. It needs to get closer to the efficiencies and focus that native devs have been experiencing for decades. Cheers!')