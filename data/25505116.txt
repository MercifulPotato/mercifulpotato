Item(by='patrec', descendants=None, kids=[25505726], score=None, time=1608635600, title=None, item_type='comment', url=None, parent=25504724, text='It really is not excusable, since<p>a) As far as I&#x27;m aware no other languages at that time suffered from this ridiculous defect.<p>b) It doesn&#x27;t really seem like the thing where you&#x27;d need 20&#x2F;20 hindsight to figure out it&#x27;s a bad idea.<p>The same applies to a lot of the lasting braindamage C has inflicted on the computing industry. It&#x27;s just that people have been numbed to it thanks to constant exposure as every single popular language in the last twenty years has aped at least some of C&#x27;s defects.<p>Other major problems either introduced or spread by C include:<p>- the execrable octal number syntax<p>- fallthrough-as-default case statements<p>- non-first class arrays<p>- strings that don&#x27;t know their length<p>- the unsafe&#x2F;ub-by-default mindset<p>- braindamaged linking<p>- abusing = for assignment, combined with making assignment an expression. For most of C&#x27;s history you&#x27;d not even get a compiler warning for if (a = b) ...<p>- generally there is a very unhealthy mix of of being highly imperative and statement based and at the same time having a lot of ad hoc ways to &quot;expressionify&quot; things (comma operator, ternary, pre-and-post increment&#x2F;decrement), which, combined with undefined order of evaluation, encourages all sorts of errors.<p>- error-prone optional braces syntax (dangling if etc.)<p>- remainder (rather than modulo) operator<p>- very nasty implicit number promotion rules<p>- messed up operator precedence<p>- &quot;if (!pred(x) || a &lt;= b &amp;&amp; y)&quot; for &quot;if not pred(x) or a =&lt; b and y&quot;<p>- the c pre-processor<p>- a broken comment syntax (how do you comment out a region with comments inside?)<p>- spuriously non-grepable function definitions&#x2F;declarations')