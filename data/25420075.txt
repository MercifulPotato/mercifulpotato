Item(by='brundolf', descendants=None, kids=None, score=None, time=1607966109, title=None, item_type='comment', url=None, parent=25414776, text='It wasn&#x27;t the only sentence I took issue with, it was just the one that raised my eyebrows the highest.<p>&gt; low on abstractions<p>I feel with this that the author is going to the opposite extreme. The takeaway isn&#x27;t that abstractions should be eliminated categorically, just that they have a cost and shouldn&#x27;t be fetishized.<p>&gt; mostly imperative<p>I take issue with this too, though this part may be more a matter of personal preference. Yes, it&#x27;s worse when your imperative logic is split across 15 files, but I see imperative logic itself as something to be done sparingly. Imperative logic means mutation of state, means easy-to-lose-track-of side-effects, means unpredictable behavior. This is sometimes unavoidable at the systems level (where C is typically used), but it is absolutely avoidable at the application layer (where Java is typically used).<p>Here&#x27;s another one that raised a red flag:<p>&gt; A well-considered class...should be easy to name, ideally with a noun that corresponds to something in the real world with a lifecycle of its own.<p>Real-world-modeling was found a long time ago to be a bad approach to OOP. The author is right to say that classes should represent clearly distinct concepts that are easy to name, but there&#x27;s no reason those concepts also need to map to real-world entities. Often, they shouldn&#x27;t.')