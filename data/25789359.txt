Item(by='andy_threos_io', descendants=None, kids=[25790203, 25789542], score=None, time=1610708192, title=None, item_type='comment', url=None, parent=25786236, text='Prime example of how you NOT write assembly code, no matter what cpu are you using.<p>First thing first, macro assemblers have been around for at least 40+ years. So don&#x27;t use numbers in your code. use macros or defines.<p>Ex. you can compile with gcc flags -x assembler-with-cpp<p>and you can have nice defines in your code.<p>Second on a decent OS even in assembly link against operating system call library, no matter what. The system call numbers can change. so use symbols.<p>Also don&#x27;t write the string length in the code, it&#x27;s total lame.<p>and use .asciz not .ascii<p>and define your function symbols to function gcc:<p><pre><code>    .global my_func_name\n    .type my_func_name, function\n    my_func_name:\n</code></pre>\nif you use C preprocessor for assembly compile just make an include like this:<p><pre><code>  #define _FUNCTION(A) .global A ;\\\n   .type A, function\n</code></pre>\nEDIT:\nFor the not well informed HN readers:<p><a href="https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;archive&#x2F;qa&#x2F;qa1118&#x2F;_index.html" rel="nofollow">https:&#x2F;&#x2F;developer.apple.com&#x2F;library&#x2F;archive&#x2F;qa&#x2F;qa1118&#x2F;_index...</a><p>&quot;Apple does not support statically linked binaries on Mac OS X. A statically linked binary assumes binary compatibility at the kernel system call interface, and we do not make any guarantees on that front. Rather, we strive to ensure binary compatibility in each dynamically linked system library and framework.&quot;<p>So DON&#x27;T write direct system call numbers in your code!')