Item(by='firethief', descendants=None, kids=None, score=None, time=1604860924, title=None, item_type='comment', url=None, parent=25025987, text='I use NixOS for the same reason. Cleanliness is empowering.<p>I used to have diskless machines on my network set up the non-nix way: system directories full of tftp and pxe stuff; root directories constructed by an OS&#x27;s installation procedure, and then customized somehow to work with an nfsroot. Later on, I wanted to make some changes but had no idea how. I hadn&#x27;t taken enough notes of where everything came from and what it was doing. The files were still working, but without having documented their <i>intent</i>, I had to scrap it all. But documenting intent is laborious and fragile; you have to include enough detail that future you (or someone else) can follow your logic, and worse: keep all that in sync with the reality.<p>Since then I have fully committed to the Nix way. Now, the contents of my tftproot are built according to a declaration in my configuration.nix: the root directory in my TFTP configuration specifies a dependency on a PXE package, with some configuration applied. Not only don&#x27;t I have to look through the built directories and try to remember what everything is, I <i>never think about</i> the built directories. The insight of declarative configuration is: if you fully document your intent, the system can take care of realizing it.<p>When I want to change a program I have written, I edit the source code (where all the intent is) and recompile it. NixOS is that for systems. I will no sooner go back to mutation-based system management than start changing my programs by taking a hex editor to the binary.')