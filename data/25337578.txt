Item(by='MaxBarraclough', descendants=None, kids=None, score=None, time=1607375422, title=None, item_type='comment', url=None, parent=25334483, text='&gt; Safety is not an absolute, it&#x27;s a spectrum.<p>Use of the safe subset of Rust means the compiler and standard-library offer you a guarantee of the absence of undefined behaviour. That&#x27;s an absolute guarantee of safety, under Rust&#x27;s understanding of the word.<p>It doesn&#x27;t give you a guaranteed absence of memory-leaks. It certainly doesn&#x27;t give you a guarantee of whole-program correctness, as Rust isn&#x27;t a formal verification framework. Both these properties are beyond the scope of &#x27;safety&#x27; as Rust uses it.<p>&gt; It&#x27;s not disregarded.<p>It is. Projects are described as <i>written in Rust</i>, treating safe Rust and unsafe Rust equally.<p>&gt;  The point you are disregarding that when porting a C application to rust, unsafe rust is a step up from C, not step down from safe rust.<p>I explicitly acknowledged this.<p>&gt; Unless you choose to rewrite from ground up (which is infeasible in many places), you&#x27;ll need unsafe rust, either for binding or by using tooling that converts the C sources to rust.<p>Sure, no disagreement there.<p>&gt; But once you have unsafe rust, you already get all the help that the borrow checker brings and you can gradually shrink the unsafe code.<p>Sure, and that&#x27;s a good use of Rust&#x27;s unsafe features.<p>&gt; you seem to be advocating for absolutes<p>Not really. If I had meant to argue that Rust shouldn&#x27;t have unsafe features, I&#x27;d have done so.<p>In an ideal world all code would be written in a way that completely closes the door on undefined behaviour, but we agree there are good reasons Rust includes its unsafe features, and there are good practical reasons to use them. I&#x27;m advocating for a greater emphasis on the use of the safe subset of Rust.<p><i>Written in Rust</i> tells me something about the software. <i>Written in 100% safe Rust</i> tells me much more about the software. That&#x27;s essentially my point.<p>This distinction doesn&#x27;t arise with languages like C and JavaScript. All C is unsafe, and all JavaScript is safe. For languages like Rust and D, there&#x27;s value in being upfront about the use of their safe subsets.')