Item(by='tiew9Vii', descendants=None, kids=None, score=None, time=1604462511, title=None, item_type='comment', url=None, parent=24984641, text='Yes.<p>Previously they mostly used a typical lamp stack in the front end. The php apps pulled data from Java backend services. They had a strict separation policy.<p>The different parts of the bbc where essentially different apps with a proxy in front doing path based routing.<p>You’d generate a RPM with your php app &#x2F; Java app and that got deployed.<p>That had a few drawbacks mostly around process, it was a pain to get releases out as had to go through a single team who could deploy your rpm. You also had the inflexibility of a fixed sized pool of servers in a dc you manage.<p>When they first started using cloud that mostly remained the same but streamlined process. You provide a rpm using the current lamp&#x2F;Java stack, a build process baked that in to an ami you could deploy. That made deployments more flexible in you was not constrained by the current physical hardware available and removed the dependency having a specific team do the deployment manually on a shared host.<p>I imagine the hosting started to get expensive with the dedicated hosts per service. Im guessing slowly the more they used aws services and trialing things they ended up where they are which sounds super complex.<p>I’m not familiar with where they are now other than the article but I’d bet going back to an app such as php, Java, ruby whatever on the fronted and binpacking them with kubernetes would be simpler than dealing with thousands of lambdas on a black box runtime. Most of the stuff at the bbc hits the edge proxies&#x2F;cache anyway so the remotes are fairly idle.')