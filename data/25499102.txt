Item(by='myfonj', descendants=None, kids=None, score=None, time=1608582017, title=None, item_type='comment', url=None, parent=25496794, text='Thanks. And I&#x27;m glad xmp still lives in developers&#x27; minds.<p>But whoa, this is approach is really impressive. That &quot;e&quot; function for creation and appending elements is witty -- I wouldn&#x27;t think it is possible to have such clean and terse JS element &quot;factory&quot; that in effect outperforms (in character count metric) literal HTML content.<p>(I must confess it took me a while to wrap my head around it, so if anyone is struggling like me, this is the above code unrolled:)<p><pre><code>    var Doc = document;\n    var FormElem;\n    var BodyElem;\n    var AppendElem =\n    (\n     aParentElem\n     &#x2F;&#x2F; reference\n     ,\n     aTagElemRet\n     &#x2F;&#x2F; tag name for new child, will become child itself\n     ,\n     aContent\n     &#x2F;&#x2F; (text) content for new child\n    ) =&gt;\n    (\n     aParentElem.append(aTagElemRet = Doc.createElement(aTagElemRet))\n     &#x2F;&#x2F; aTagElemRet tag name (string) becomes HTMLElement\n     &#x2F;&#x2F; and is immediately appended at the end of reference element\n     ,\n     &#x2F;&#x2F; comma operator evaluates both sides, returns right\n     aContent &amp;&amp; aTagElemRet.append(aContent)\n     &#x2F;&#x2F; if third argument is truthy, put it into the new HTMLElement\n     ,\n     aTagElemRet\n     &#x2F;&#x2F; expression results in this so arrow function returns the new HTMLElement\n    );\n    var InputElem = AppendElem\n     (\n      FormElem = AppendElem\n       (\n        BodyElem = Doc.body, &#x2F;&#x2F; = parent\n        &quot;form&quot; &#x2F;&#x2F; = tagName\n       ), &#x2F;&#x2F; = parent\n      &quot;input&quot; &#x2F;&#x2F;= tagName\n      &#x2F;&#x2F; no content\n     );\n    var ListElem = AppendElem(\n     BodyElem, &#x2F;&#x2F; = parent\n     &quot;ol&quot; &#x2F;&#x2F; = tagName\n    );\n    FormElem.onsubmit =\n     pParamLI =&gt;\n     &#x2F;&#x2F; event handler gets SubmitEvent object as a sole argument\n     &#x2F;&#x2F; but it is not needed, so parameter will be reassigned to\n     &#x2F;&#x2F; newly created LI element\n     (\n      AppendElem(\n       pParamLI = AppendElem(\n        ListElem, &#x2F;&#x2F; = parent\n        &quot;li&quot;, &#x2F;&#x2F; = tagName\n        InputElem.value + &quot; &quot; &#x2F;&#x2F; = (text) content\n       ), &#x2F;&#x2F; = parent\n       &quot;button&quot;, &#x2F;&#x2F; = tagName\n       &quot;Ã—&quot; &#x2F;&#x2F; = content\n      ).onclick = _ =&gt; pParamLI.remove(), !1\n      &#x2F;&#x2F; inline handler attached to created button\n      &#x2F;&#x2F; ClickEvent passed in _ is not used\n      &#x2F;&#x2F; return !1 what evaluates to false\n      &#x2F;&#x2F; inline handler returning false prevents default action\n      &#x2F;&#x2F; in this case form submission\n      &#x2F;&#x2F; button is in default type, so &quot;submit&quot; would be dispatched\n      &#x2F;&#x2F; on its form otherwise\n     );</code></pre>')