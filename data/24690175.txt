Item(by='tmsh', descendants=None, kids=[24690352], score=None, time=1601920433, title=None, item_type='comment', url=None, parent=24689259, text='IMHO, at scale SQL will breakdown. Even with sharding like Slack is able to per organization. It&#x27;s why we have great things like Cassandra and DynamoDB. They&#x27;re designed to solve replication in an easier way than replicating RDBMS iff you know your data access patterns in advance and they&#x27;re not ad-hoc (which SQL is great at). This is the case for Slack. The typical way to solve RDBMS bottlenecks is to put a queue and messaging system in front of them. This breaks down when your services have bugs (my guess at what&#x27;s happening).<p><a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;results?search_query=aws+rick" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;results?search_query=aws+rick</a><p>is pretty good on why some NoSQL approaches are a step forward (perhaps not MongoDB at scale if consistency is necessary <a href="https:&#x2F;&#x2F;jepsen.io&#x2F;analyses" rel="nofollow">https:&#x2F;&#x2F;jepsen.io&#x2F;analyses</a>). In particular though:<p><a href="https:&#x2F;&#x2F;youtu.be&#x2F;hwnNbLXN4vA?t=992" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;hwnNbLXN4vA?t=992</a><p>There could be other issues about why Slack is slow. But at Slack scale, you need to be extremely heightened in your database strategy or you should follow the industry and use Cassandra&#x2F;DynamoDB&#x27;s built in partition tolerance. Key value stores scale horizontally much easier. B-trees don&#x27;t scale as easily horizontally past a certain point.<p>Essentially, good NoSQL DBs have abstracted scale for you (so you don&#x27;t have to think about it as much). But you have to know the access patterns in advance (the types of queries and updates you&#x27;ll be running for most use cases), since you need to design your table around these access patterns. RDBMS leaks scaling from the abstraction (you need to use message queues, etc.).')