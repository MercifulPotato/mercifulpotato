Item(by='webmaven', descendants=None, kids=None, score=None, time=1601859810, title=None, item_type='comment', url=None, parent=24677936, text='<i>&gt; But why does it need to be GPL?</i><p><i>&gt; Why not dual license MIT&#x2F;BSD plus a commercial version with more features?</i><p>So, what you are advocating here is combining a permissive license (eg. MIT&#x2F;BSD&#x2F;Apache 2&#x2F;etc.) with an Open Core approach.<p>This can work, but it is difficult. The decisions around which features go into the core, and which are in the commercial version become higher risk. Keep too much proprietary, and  the odds of someone in your community duplicating the proprietary features goes up (as it normally would for GPL+commercial),  chewing up your commercial moat. But keep too <i>little</i> proprietary and the odds of a commercial competitor duplicating those remaining features and competing with you on price goes up instead. Even the case where they develop a <i>different</i> set of commercial enhancements to target another market (or another pricing model) will probably mess up your commercialization roadmap.<p>And I&#x27;m not sure there is ever a &quot;just right&quot; point between too much and too little, the middle ground will probably have you contending with some of both types of competitive pressure, and may not actually be less overall.<p>At which point you have to fall back to trademarks and brand recognition, as well as maintaining an edge of expertise by employing the main contributors and&#x2F;or subject matter&#x2F;domain experts.<p>This is a very customer-focused model with practically no lock-in, and <i>can</i> work, but leveling the playing field in that way will make attracting investment harder. Investors want to know what your <i>unfair</i> advantage is, and your licensing choice effectively lowers the barrier to entry instead of raising it.')