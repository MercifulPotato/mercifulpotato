Item(by='oppositelock', descendants=None, kids=[25811282], score=None, time=1610851053, title=None, item_type='comment', url=None, parent=25807149, text='It depends on what the struct contains. I have developed many Go API&#x27;s professionally at several companies since Go 1.1, and all my servers and up looking like a server struct with only a few fields - a database, AWS client object, and some prometheus metrics. The logic is typically split among many files, all implementing receivers on that struct.<p>If you have independent, different elements in that API, you break them out into separate &quot;servers&quot; but still register the endpoints on the same HTTP handler.<p>I know that people don&#x27;t like external libraries too much, but I&#x27;d like to plug my own here. You declare your API in OpenAPI 3.0 (aka, Swagger) and it generates your server and models for you, so all you need to do is write the business logic. (<a href="https:&#x2F;&#x2F;github.com&#x2F;deepmap&#x2F;oapi-codegen" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;deepmap&#x2F;oapi-codegen</a>)')