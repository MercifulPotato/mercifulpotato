Item(by='rektide', descendants=None, kids=[25002741], score=None, time=1604613640, title=None, item_type='comment', url=None, parent=25002341, text='&gt; Containerization is not a win here. Where&#x27;s the second machine to fail over to?<p>It would probably take an hour or less to add another node to this set up. The author made some choices that block scaling, &amp; changing that, installing service-lb, local-provisioner, would take a bunch of that time. Finding a resilient replacement for local-provisioner is something I wish we were better at, but the folk at Rook.io have a pretty good start on this.<p>To me, the real hope is that we move more and more of our configuration into Kubernetes state. Building a container with a bunch of baked in configuration is one thing, but I hope we are headed towards a more &quot;cloud native&quot; system, where the email server is run not as containers, but as an operator, where configuration is kept in Kubernetes, and the operator goes out &amp; configures the containers to run based on that.<p>I agree that running a bunch of service on a Debian box with a couple different releases (testing&#x2F;unstable) pinned into apt is not really that hard. But I am very excited to stop managing these pets. And I am very hopeful that we can start moving more and more of our configuration from &#x2F;etc&#x2F;whateverd&#x2F;foo.conf files into something centrally &amp; consistently managed. The services themselves all require special unique management today, &amp; the hope, the dream, is that we get something more like big cloud style dashboards, where each of these services can be managed via common Kubernetes tools, that apply across all our services.')