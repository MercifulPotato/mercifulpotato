Item(by='leetcrew', descendants=None, kids=None, score=None, time=1605643762, title=None, item_type='comment', url=None, parent=25128501, text='&gt; #[] - why the [] if # already makes that line different from the usual code? seems superfluous<p>I don&#x27;t even know what #[bla(foo)] does, or why all that punctuation is needed. maybe nesting is allowed?<p>&gt; &#x27;a - is that thing next to &#x27;a&#x27; a smudge on my display? Did I forget a quote? better wipe the display with my finger<p>this is a lifetime annotation, which is a genuinely noisy bit of syntax.<p>&gt; foo! - yelling out function calls. &quot;print!&quot; &quot;exit!&quot; &quot;macro!&quot;. Angry Codes!<p>I guess they really want to make sure you know when a macro is being used. probably a result of ptsd from debugging c and c++ code :)<p>&gt; fn - by itself not a huge deal, but the list of truncated words that are used frequently is &quot;impl&quot;, &quot;mut&quot; and &quot;pub&quot;. I save some characters (am I really in such a rush?) at the cost of reading this broken English &quot;f-n impl moot pahb&quot;. At least C doesn&#x27;t have that.<p>the c keywords aren&#x27;t too bad, but the standard library is full of this kind of thing. stdio.h and string.h immediately come to mind.<p>I&#x27;m not so much defending rust as I am pointing out that c&#x27;s syntax isn&#x27;t that great to begin with. I&#x27;ve been writing c and c++ code every day for several years now, so it&#x27;s usually pretty easy for me to skim and understand what is going on. but if I try and place myself in the shoes of a newcomer, I don&#x27;t think the syntax is much better than rust. remember the first time you tried to parse the type of a nontrivial function pointer?')