Item(by='hazeii', descendants=None, kids=None, score=None, time=1603045819, title=None, item_type='comment', url=None, parent=24819845, text='3 bits for the 8 addressing modes, 3 bits for the register. For double operand instructions. that&#x27;s 12 bits - so only 4 bits left over to encode double-operand instructions.<p>The most important of which was probably MOV (0001, or 01 octal). Thus, something like the C &#x27;<i>s++=</i>t++&#x27; translates direction to a single 16-bit instruction:-<p>0001 011 001 011 002 = 012122<p>The cleverness though was that by using the addressing modes on the PC (R7) things like loading a constant into memory or moving memory contents was all single-instruction as well:-<p>e.g. MOV #7, @#1000 # Put &#x27;123&#x27; int address 1000\n ==&gt; MOV (PC)+,@(PC)+\n ==&gt; 012737 7 1000<p>The same trickery made relative addressing easy, made PUSH and POP nothing more than MOV instructions (though it did take me some time to understand the use of R5 for passing arguments in Fortran).')