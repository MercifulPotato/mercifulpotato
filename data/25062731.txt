Item(by='kxyvr', descendants=None, kids=[25070940, 25065801], score=None, time=1605127271, title=None, item_type='comment', url=None, parent=25062535, text='As far as I know, MKL has its own implementation.  As some evidence of this, here&#x27;s an article comparing their sparse QR factorization to SPQR, which is part of SuiteSparse [1].  As far as MATLAB, I believe it uses both.  I&#x27;ve a MATLAB license and it definitely contains a copy of MKL along with the other libraries.  At the same time, their sparse QR factorization definitely uses SPQR, which is part of SuiteSparse.  In fact, there are some undocumented options to tune that algorithm directly from MATLAB such as spparms(&#x27;spqrtol&#x27;, tol).  As a minor aside, this is actually one of the benefits of a MATLAB license since they have purchased the requisite commercial licenses for SuiteSparse codes, it makes it easier to deal with some commercial clients who need this capability at a lower price than a direct license itself.  This, of course, means using MATLAB and not calling the library directly.  It&#x27;s one of the challenges to using, for example, Julia, which I believe does not bundle with the commercial license, but instead relies on GPL.<p><a href="https:&#x2F;&#x2F;software.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;develop&#x2F;articles&#x2F;intel-mkl-sparse-qr-solver-multifrontal-sparse-qr-factorization-method-for-solving-a-sparse.html" rel="nofollow">https:&#x2F;&#x2F;software.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;develop&#x2F;article...</a>')