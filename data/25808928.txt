Item(by='dmix', descendants=None, kids=None, score=None, time=1610868439, title=None, item_type='comment', url=None, parent=25801782, text='Sounds like what 37signals&#x2F;basecamp has been pushing for as a model for a decade now.<p>It took some time and flailing about in the community. But fortunately there was a relatively quick and massive structural change to programming large web front ends with compontent-based JS over the years.<p>Much like Rails, the problem wasn&#x27;t the language per-se, but a broad consensus regarding the best approach and having structure community wide helps solve a lot of problems.<p>Now we finally have reached a pretty close consensus on the &#x27;framework&#x27; side. Plus I&#x27;m also excited on the build systems side - as they are getting closer to just &#x27;importing&#x27; other JS files instead of the endless magic of Webpack processors and similar hackery.<p>So with that area finally quieting down, performance optimization around SSR and pushing as much to the server-side in general is also finally reaching maturity. This is a critical piece of the puzzle. And probably the last major hurdle for serious performant JS-heavy frontends.<p>Heavily interactive web UIs are not going away no matter how many minimalist or anti-frontend-JS articles get posted on HN and elsewhere.<p>Countless SaaS products depend heavily on stuff we&#x27;ve had on desktop for ages (most legit critiques apply to miss-use-cases, not inherent issues). And their potential for serious interfaces with well managed client-side state,  consistent abstraction layers with components, clean UI logic, etc, instead of ungodly spaghetti messes that were difficult for dev teams to manage - ones that would changed dramatically every time a new dev&#x2F;manager was hired - or simply trying to hack full-on Rails style MVC but purely client-side (see: backbone.js), is finally coming to and end.<p>I&#x27;m personally a Vue, not React guy, but there&#x27;s no question most advancements and experimentations happen in React&#x27;s community first. Which a fine by me, as the good pieces always filter down to Vue quite quickly. SSR and deeper server integrations are clearly the way to go for any serious web app. The only downsides I&#x27;ve seen are they mostly JS server frameworks.')