Item(by='chriswarbo', descendants=None, kids=None, score=None, time=1602684074, title=None, item_type='comment', url=None, parent=24774812, text='My hierarchy goes: None &gt; Real &gt; Fake &gt; Mock<p>The best solution doesn&#x27;t need anything, e.g. if we have calls to our persistence layer mixed in with calculations, the latter shouldn&#x27;t be tested with fakes&#x2F;mocks; instead we should refactor the code so the calculations don&#x27;t depend on the persistence layer.<p>If the behaviour of some code depends inextricably on some external system, then our tests should use that system. This avoids unnecessary code&#x2F;work&#x2F;duplication, allows tests to exercise more paths through our codebase, exposes problems in our understanding of that system, etc.<p>If calling an external system in our tests is dangerous, unacceptably slow, costly (if it&#x27;s some Web service), etc. then we should make a fake implementation to test against. If our code only uses a small part of some large, complicated dependency, we might want to define an interface for the subset that we need, refactor our code to use that, and only have our fake implement that part.<p>If a fake implementation isn&#x27;t practical, or would require so much overriding per-test as to be useless on its own, then I might consider using mocks. I would seriously consider whether that code could be refactored to avoid such coupling. I would also never make assertions about irrelevant details, like whether a particular method was called, or what order things are run in.')