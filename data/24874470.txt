Item(by='BenoitEssiambre', descendants=None, kids=None, score=None, time=1603488910, title=None, item_type='comment', url=None, parent=24871047, text='I love async&#x2F;await but I really wish it wasn&#x27;t built on promises.<p>All you would have had to do is make it so when you use the await keyword, you don&#x27;t pass the callback, the runtime passes it for you, pauses the function and resumes it when the callback is called (returning values and throwing errors as you would expect). I implemented this here: <a href="https:&#x2F;&#x2F;github.com&#x2F;bessiambre&#x2F;casync" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;bessiambre&#x2F;casync</a> but it would be even better with language level support.<p>Whenever I encounter JS beginners and they ask me about simple looping over asynchronous operations sequentially, I mention async&#x2F;await, the discussion veers towards promises and then I have to mention the state machine and the caching layer for errors and return values, pending, fulfilled, rejected, settled states, reject&#x2F;resolve callbacks and how it all fits together with &#x27;then&#x27; chaining and &#x27;dynamic replacement&#x27; by which point they just want to go back to Python or whatever.<p>With a callback based async&#x2F;await, I could just say: Here, with this keyword, the function will pause until the callback is called. Just put your function taking a callback in a normal loop and await it. It would be cleaner, more functional, more stateless and faster.<p>The features of promises aren&#x27;t even used with async&#x2F;await. The point of promises, the caching layer and the state machine, is to be able to add the continuation later but with async&#x2F;await, it is always just the next line in the function so it doesn&#x27;t need to be added later. It&#x27;s unnecessary performance penalty, complexity and statefulness on every asynchronous function call.<p>I did try to propose this as a language feature here: <a href="https:&#x2F;&#x2F;es.discourse.group&#x2F;t&#x2F;callback-based-simplified-async-await&#x2F;343&#x2F;7" rel="nofollow">https:&#x2F;&#x2F;es.discourse.group&#x2F;t&#x2F;callback-based-simplified-async...</a><p>It didn&#x27;t get much traction an I was too busy to push it further.')