Item(by='dgreensp', descendants=None, kids=None, score=None, time=1606374096, title=None, item_type='comment', url=None, parent=25215060, text='As others have pointed out, &quot;people&quot; probably don&#x27;t really value these &quot;wants&quot; that much, relative to more practical matters.  I&#x27;m not sure how you could show that they do.  That&#x27;s not to say I don&#x27;t think they are the right thing.  I also think web vs. native is a red herring (at least for the purposes of this article).<p>The problem as I see it is software is not developed as interoperable &quot;components,&quot; and it&#x27;s getting worse.  At least you can store a text file on your hard drive, sync it with Dropbox, and edit it with the editor of your choice — meaning app, file format, and storage are separate concerns — but for a web app or cloud-backed native app, these distinctions may not exist, as the representation and storage of a document are completely hidden.  Apps have always been pretty monolithic to start with, often with proprietary file formats and limited interoperability.  Then there are social networks.  Theoretically, Facebook, LinkedIn, et al. could all use a common protocol analogous to SMTP.<p>Email and the web are success stories of standardization and interoperability.  Browsers are very highly interchangeable for a very complex document type!  However, it&#x27;s made less exciting by the fact that the web is being used to deliver software written to a standardized API, not to collaborate on documents and information using standardized formats and representations, and not to connect and communicate using common protocols.<p>The relationship between interoperable software components and making technology available to society:  When we have a ubiquitous standard and a go-to, legally usable implementation for X, I feel like we can say we &quot;have the technology&quot; to do X, as a society.  For example, we have JPEG and libjpeg.  We have the technology to compress (to JPEG&#x27;s level of ability), store, and exchange images.  Is the technology to, say, collaborate in real-time on a spreadsheet available to society?  Is there a go-to implementation and a document explaining exactly how it is designed to work?<p>I&#x27;m not saying the world is wrong and should be a different way (e.g. social media sites should all use a common protocol).  Obviously there are reasons we got here, and there is no simple argument that things could or should be drastically different.  If the root-cause analysis were continued, I would look at how software is developed, how it is funded and monetized, and so on.  Nobody was funding OpenSSL development, for example, even though it was a ubiquitous implementation of a ubiquitous standard and a great example of everybody reusing the same component.  Companies like IBM and Microsoft, selling suites of business software in the 20th century, were building monolithic office solutions and not small interoperable tools, for business reasons, while Unix took the polar opposite philosophy.')