Item(by='SloopJon', descendants=None, kids=None, score=None, time=1606922917, title=None, item_type='comment', url=None, parent=25274158, text='It&#x27;s hard to discuss in the abstract, especially with bad names like MinorFunction1() and MinorFunction2().  In style C, you may have to scan over lower levels of abstraction than you care about:<p><pre><code>  MajorFunction() {\n    &#x2F;&#x2F; fast inverse square root\n    float x2 = number * 0.5F;\n    float y = number;\n    &#x2F;&#x2F; several more lines of code\n\n    &#x2F;&#x2F; find decimal point\n    char *c = input;\n    while (*c &amp;&amp; *c != &#x27;.&#x27;)\n      ++c;\n  }\n</code></pre>\nA goal of style A or B is for the names of the minor functions to make the shape more obvious, ideally self documenting:<p><pre><code>  MajorFunction() {\n    y = Q_rsqrt(number);\n\n    char *c = strchr(input, &#x27;.&#x27;);\n  }\n</code></pre>\nThis is the kind of advice you&#x27;ll find in, say, <i>Code Complete</i>.  Although I generally accept the premise, there is a readability cost to indirection.  The bigger and more complex MinorFunction() is, the more likely I&#x27;m going to have to jump into it and remind myself what it does.<p>There are two concepts that underlie DRY: coupling and cohesion.  There are good expositions on this in old writings on structured programming and design (e.g., Yourdon and Constantine).  If MinorFunction() is cohesive, and MajorFunction() is appropriately coupled to MinorFunction(), then style A&#x2F;B is likely to be superior to style C.  One of Carmack&#x27;s points is that &quot;very little of our real code&quot; ends up that way.')