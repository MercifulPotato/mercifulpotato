Item(by='nimih', descendants=None, kids=[24978964], score=None, time=1604339345, title=None, item_type='comment', url=None, parent=24969012, text='My reading of the OP is that these techniques (branding, nominal typing, &amp;c) are good and useful, but it&#x27;s <i>even better</i> if you can remove&#x2F;minimize the necessity of ever trusting software developers to make reasonable decisions. Speaking from experience, even on personal projects where I am fully in control of my requirements and deadlines and the only person who has ever and will ever touch a codebase is me, I have regretted trusting software developers to make reasonable decisions w&#x2F;r&#x2F;t an internal (let alone external) API.<p>Less cynically, if you have assumptions and facts present about your data at runtime, it makes good sense to spend some extra effort encoding them <i>explicitly</i> in the data representation when your type system supports it, rather than allowing them to exist <i>implicitly</i> (or by documentation only) as a tag. Even if you discount the advantages provided in shrinking how much you are forced to trust your users, reifying your knowledge about a piece of data gives the compiler (and other static analysis tools) more information to help you write the code in the first place: The article provides some examples in terms of exhaustiveness checking, but you can also leverage such things if you have access to fancy toys like refinement types, dependent types, or a development environment that can do tactics-style interactive transformations. IMO it also makes your code easier to read and understand, but that might just be a matter of taste.')