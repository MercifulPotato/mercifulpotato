Item(by='archgoon', descendants=None, kids=[25225839, 25223545], score=None, time=1606424013, title=None, item_type='comment', url=None, parent=25223110, text='Clojure, for those unfamiliar with the language, unsurprisingly, does in fact allow for both &#x27;for&#x27; and &#x27;while&#x27; loops, and are part of the core language library.<p><a href="https:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure.core&#x2F;while" rel="nofollow">https:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure.core&#x2F;while</a><p><a href="https:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure.core&#x2F;for" rel="nofollow">https:&#x2F;&#x2F;clojuredocs.org&#x2F;clojure.core&#x2F;for</a><p>And here are examples picked from a random repository of these constructs being used in the wild:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;ring-clojure&#x2F;ring&#x2F;search?q=while" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ring-clojure&#x2F;ring&#x2F;search?q=while</a><p>What clojure <i>does</i> do is also provide a number of higher level control constructs, and, by the nature of the syntax of the language, puts them on the same level as &#x27;while&#x27; and &#x27;for&#x27;, which themselves are part of a library, rather than baked into the language itself.<p>This can, of course, be done in other languages, using fluent interfaces.<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fluent_interface" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fluent_interface</a><p>But is typically much more awkward and harder to compose. Also, you typically have to wrap expressions in lambdas.')