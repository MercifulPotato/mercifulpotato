Item(by='jnxx', descendants=1, kids=[25068798], score=1, time=1605180197, title='Ask HN: When it is better to use printf vs. a debugger?', item_type='story', url=None, parent=None, text='I have right now one burning question around development practices:<p>There seem to be two traditions in the field of debugging. One is to use things like printf or kprintf, to print the current state of a program.<p>The other is to use some of the many debuggers that are around, and inspect the state of the running program, along the call stack.<p>I think this is, to some degree, probably often a kind of personality-related preference. Personally, I like to use  printf, because it matches well with what I call &quot;the scientific method of debugging&quot;:<p>1. I have an idea what a program should do<p>2. I observe something that is different - that is, my mental model of what the program does diverges at some point from reality<p>3. I try to make a more refined mental model of what <i>might</i> be happening<p>4. I test that mental model by inserting print commands at very specific points in the code<p>5. I observe what happens. based on that, I possibly modify the code, and go back to number 2.<p>For me, this has turned out to work surprisingly well in a number of domain, such as concurrent real-time systems, complex signal processing, and more. (The nice thing abpout printf in concurrent systems is that it serializes events, which helps).<p>Other people, I see, prefer to use a debugger. My hypothesis is now that this is due to a combination of both personality as well as concrete tasks where a debugger might be suited better.<p>So, what I am interested in is your observations of specific cases and circumstances when one methodology might work better than the other. Or maybe it also matters <i>how</i> to do each, to have good results.<p>What is your experience?')