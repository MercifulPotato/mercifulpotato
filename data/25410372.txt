Item(by='GauntletWizard', descendants=None, kids=None, score=None, time=1607894245, title=None, item_type='comment', url=None, parent=25383738, text='The segment &quot;GraphQL vs gRPC API&quot;[1] touches on something near and dear to my heart: You should write API-first services, and wrap them in templates.<p>The ideal way you write server-side rendered page on your website is to write some code that gathers all the data you&#x27;ll need, then when you have a big struct that contains everything you need to render the page, execute a template over it. As a side effect, you can set this up as a RPC call - You can do all of the data gathering in a function that matches a GRPC protobuf, and then wrap that with a function that matches http.HandlerFunc. Then you&#x27;ve got a well-structured RPC should ever you need to expose &quot;a page&quot; as &quot;a call&quot;<p>I used to wish for more languages to handle PHP like inlining of code - Most of your website is usually in the template. I still think that&#x27;s true, but separating out the data-gathering is valuable, because that data gathering can fail. You can have a SQL Timeout or a retry failure or simply need to 403 for authorization purposes: any number of backend problems, and you want to serve a different template for those. Golang&#x27;s html&#x2F;template (and text&#x2F;template) are just the right mix of inline code, extensibility from external code, and not focusing too much on error conditions. They&#x27;re not useful if one of your functions will error in the middle, but they give you the flexibility to do things like conditional-formatting.<p>[1]<a href="https:&#x2F;&#x2F;github.com&#x2F;graphikDB&#x2F;graphik#graphql-vs-grpc-api" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;graphikDB&#x2F;graphik#graphql-vs-grpc-api</a>')