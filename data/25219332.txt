Item(by='galoisgirl', descendants=None, kids=None, score=None, time=1606393312, title=None, item_type='comment', url=None, parent=25216059, text='&gt; HTML and CSS are not clean, intuitive, or efficient beyond simple examples.<p>They do have a steep learning curve. The web is polluted with tutorials and StackOverflow answers from people who haven&#x27;t learned them yet, like this atrocious thread where most upvoted answers are plain wrong: <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;4814398&#x2F;how-can-i-check-if-a-scrollbar-is-visible" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;4814398&#x2F;how-can-i-check-...</a><p>&gt; Masters of these tools sadly have their heads full of legacy hacks and trickery needed to get content to display properly.<p>The trickery is not needed anymore. I started in 1996 and I remember the table and float layouts. You can forget all this stuff now. IE11 supports flex-box well. Clean up your code and move on.<p>&gt; Contrast this with algorithms, the middle-tier, and databases. These tools, while not perfect, are far better able to express developer intentions and therefore be maintained.<p>Well, I did understand flex-box after thinking in terms of layouting algorithm instead of a bag of properties and values. [1] But you&#x27;re dangerously close to comparing apples to oranges here: front-end technologies are all about the user&#x27;s experience, not the developer&#x27;s intent. If you feel that strongly about them, consider sticking to the back-end.<p>&gt; Sadly, the Web stack has largely become popular due to OS politics<p>No, the web stack has become popular because of the people from your first paragraph: the ones paying the bills. The ones who couldn&#x27;t afford to lose customers by requiring a plug-in, nor building multiple versions of the same product.<p>&gt; The concepts of types, intellisense, async&#x2F;await, and other efficiencies are great examples of historically native benefits brought to the Web.<p>Types? JavaScript is typed, always was. Ajax was always asynchronous - do you mean the syntactic sugar?<p>[1] I then wrote that: <a href="https:&#x2F;&#x2F;dev.to&#x2F;galoisgirl&#x2F;how-to-finally-understand-css-flexbox-2chb" rel="nofollow">https:&#x2F;&#x2F;dev.to&#x2F;galoisgirl&#x2F;how-to-finally-understand-css-flex...</a>')