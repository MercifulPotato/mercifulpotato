Item(by='nicopappl', descendants=None, kids=[24978434], score=None, time=1604392901, title=None, item_type='comment', url=None, parent=24977218, text='Honestly I think the &quot;val vs var&quot; debate is kind of a misdirection. The real difficulty with mutability comes from interior mutability. The scala standard library has collection.mutable.{List, Map, Set, etc.} and collection.immutable.{List, Map, Set, etc.} with collection.immutable being the one in the prelude (imported by default). In scala like any ML language that supports mutability, you can do<p><pre><code>    val immutableValue = mutable.Map.empty\n    immutableValue.insert(key, value)\n</code></pre>\nIn this case the distinction between &quot;val&quot; and &quot;var&quot; is at best a misdirection. The only language that I know of that explicits interior mutability is rust. Where your map must have a &quot;type marker&quot; `&amp;mut` to be able to use the `insert` method. The only way to have that type marker is to define the map with a `let mut`:<p><pre><code>    let clearlyImmutable: Map&lt;String, Int&gt; = Map::new()\n    clearlyImmutable.insert(&quot;hello&quot;, 10) &#x2F;&#x2F; Does not compile\n</code></pre>\nwhile<p><pre><code>    let mut clearlyMutable: Map&lt;String, Int&gt; = Map::new()\n    clearlyMutable.insert(&quot;hello&quot;, 10) &#x2F;&#x2F; Compiles :)\n</code></pre>\nThe conclusion here is that if you are not working with rust, immutable data structures (where no method mutates the object it refers to) are what guarantees you you won&#x27;t run into spooky mutability at a distance.<p>However, it would be disingenuous to not mention that you can run very quickly in the wild into scala code that is just &quot;java without semicolons&quot;. You can very deliberately break null safety in scala. For example `val x: (Int, Double) = null` does compile. You won&#x27;t normally run into `null` unless you are interacting with java libs or with code from programmers who don&#x27;t understand type safety.<p>I want to point out: scala let you do all those nasty things, but this will be a deliberate choice. The mutable data structure from the standard library are clearly marked. There is no methods in the standard library that returns null (outside of regex methods which are thin wrappers around java regexes). Writing mutable code requires a completely different architecture and design choices. If you are in an immutable team, it will be very hard to justify that kind of code. While in a mutable team, the reverse might be true.')