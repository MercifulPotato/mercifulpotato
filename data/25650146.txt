Item(by='konart', descendants=None, kids=[25659872, 25651407], score=None, time=1609876422, title=None, item_type='comment', url=None, parent=25649573, text='&gt;What I would really like is an up to date &quot;learn how to handle Go project in 30 minutes&quot;<p>1. git init<p>2. git remote add %something%<p>3. go mod init %name_of_your_module% (where in most common case name is your repo address without the https part)<p>4. <a href="https:&#x2F;&#x2F;github.com&#x2F;golang-standards&#x2F;project-layout" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;golang-standards&#x2F;project-layout</a> - this repo has the default project structure. Each subfolder has README that describes the purpose of the folder<p>5. go get -u github.com&#x2F;gin-gonic&#x2F;gin to add gin (web lib) for your project. Same for any other package. The will be added to your go.mod and go.sum files<p>5.1 import &quot;github.com&#x2F;gin-gonic&#x2F;gin&quot; in your code to use gin<p>5.2 package may have more than one major version (tag). If you want to use package at latest tag 2 - you add &#x27;&#x2F;v2&#x27; when you &#x27;go get&#x27; the package (i.e. go get -u github.com&#x2F;gin-gonic&#x2F;gin&#x2F;v2)<p>6. git commit &amp;&amp; git push to publish<p>7. Not sure what to you mean by &#x27;fork&amp;clone&amp;submit&amp;pr including 3rd party submodules&#x27;. You may use vendoring but in most cases you don&#x27;t need it as you have your dependencies in your go.mod &amp;&amp; go.sum files. You may want to read more about vendoring and gomodproxy though.<p>8. Testing is pretty easy but I guess you want and article about best practices? I won&#x27;t post any link as I find the topic as too controversial regardless of the language\\stack<p>9. CI - not sure that does this have to do with the language<p>10. haven&#x27;t done much profiling or debugging to fill you in.')