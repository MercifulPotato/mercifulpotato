Item(by='danjac', descendants=None, kids=None, score=None, time=1604741026, title=None, item_type='comment', url=None, parent=25009968, text='My experience with startups has been that &quot;tech debt&quot; is more the result of people not knowing what they were doing. Not so much &quot;we haven&#x27;t quite found market fit and need to try different segments&quot; but technical incompetence. This is because startups tend to be cash-strapped, so either you have non-technical people basically learning to code on the job or they hire very junior developers.<p>For example one bit of advice I&#x27;ve heard is that things like unit tests and a CI pipeline are a luxury for early-stage startups. An experienced developer would probably spend a day or two setting things up with, say, Heroku and a Gitlab pipeline, and at least write some unit tests for core business functionality and a few tripwire tests for the HTTP endpoints. They&#x27;ve done the same thing a few times and could probably just pull in a starter template for 80% of that work. Very little time spent with zero impact on velocity but lays a good foundation for later.<p>Another junior dev tell is getting power hungry with the freedom of a greenfield project. For example, rather than going with the boring but stable PHP framework they used at the last company, they want to do all the cool things like serverless or JS framework du jour or Kubernetes or GraphQL, depending on whatever Medium or Hacker News post they last read. An experienced dev will use &quot;boring&quot; technology they are familiar with as much as possible, and adopt or write new tech when there is an explicit need. For example, if your startup&#x27;s secret sauce is an ML algorithm connected to an HTTP API and web app, you want to focus on that ML algorithm and tweaking and optimizing that, not figuring out how to get authentication to work with your serverless&#x2F;graphql&#x2F;svelte cool stack.')