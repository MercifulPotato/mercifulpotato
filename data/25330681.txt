Item(by='grey-area', descendants=None, kids=None, score=None, time=1607334277, title=None, item_type='comment', url=None, parent=25330018, text='No, that&#x27;s not why.<p>If your workplace requires just 1 commit per change, no matter what the scope, that doesn&#x27;t make a lot of sense, but there&#x27;s a lot of room between never squashing and squashing all changes always to 1 commit. Both those extreme approaches don&#x27;t make much sense to me. Some history is important, some is not.<p>Squashing commits doesn&#x27;t have to mean turning 50 commits into 1. It can mean reordering, squashing some commits, tidying up commit messages and generally editing until the set of changes is clear and coherent. This lets you commit early and often during development on an unpublished branch without concern, then tidy that up into a coherent set of changes for readers (including your future self). The absolute numbers don&#x27;t really matter, for me at least it&#x27;s more about reorganising and editing changes to read coherently and be properly separated. For example if you need steps 1,2,3,4 to make a change, keep those separate but don&#x27;t include 2a,2b,2c which were exploring 2 and finding a few places you missed a change when you tested it.<p>I see it as basic respect for future readers, much as you might revise and edit an essay or novel before publication, revising and editing your code changes at least once often makes them better and clearer.')