Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1609909663, title=None, item_type='comment', url=None, parent=25652742, text='Learning an esoteric language is as valuable as learning anything else: it’s as challenging and as mind opening as you’re willing to stray. If you’re just exploring another language with the same paradigms you’re used to, you’re just playing in a sandbox.<p>If you’re trying something that feels novel, that has different primitives and constructs and workflows, you might learn new ways to think about using your more comfortable tools. You might even come to have different standards and expectations of how your peers use those tools.<p>I’ve become a much better developer from using somewhat esoteric languages and bringing insights back from that. I learned how to reason about and organize stateful code by doing FP, I learned how to write better interfaces in cross-paradigm languages by just reading a lot about Haskell, and I learned a ton about how to handle branching logic and databases by a foray into Prolog&#x2F;logic programming.<p>Which by the way isn’t dying, and has been breathing life into more common use languages. That’s the benefit of learning new languages. What they do differently can help guide the mainstream too.<p>Here’s some ideas that have been percolating into ecosystems that didn’t have them:<p>- immutability<p>- static types<p>- composable functions<p>- patten matching<p>- minimal contracts&#x2F;dependency control inversion<p>- provability&#x2F;static validation<p>- static runtime optimization of dynamic patterns<p>These are all because people spend time with tech that’s uncommon. Maybe you don’t need it on your resume. But having it in your life experience is going to make you better at your dull day job.')