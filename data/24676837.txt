Item(by='zerocrates', descendants=None, kids=None, score=None, time=1601791457, title=None, item_type='comment', url=None, parent=24676696, text='It&#x27;s more a JS thing: The lone JS number type is double-precision floating point, meaning beyond a certain range there are integers that cannot be accurately represented as a JS number.<p>The JSON standard doesn&#x27;t place restrictions on size or precision of numbers, instead just noting that implementations can vary their treatment of and limits on numbers. While JS uses doubles for all numbers, many other languages emit an integer type for a JSON integer. So, once you go beyond the range where a double can accurately represent all integers, you run the risk of a mismatch in how the number is interpreted by different languages parsing the same JSON.<p>Of course the spec also allows you to create <i>way</i> too big or too precise numbers that would be problematic in most languages as well; it&#x27;s just that this is a somewhat common bugbear.<p>I wouldn&#x27;t necessarily call it a flaw in JSON though, more an issue with JSON.parse or really just a fact of life when dealing with numbers in JS. Alternatives to the built in JSON.parse exist to read large integers as strings or bigints.')