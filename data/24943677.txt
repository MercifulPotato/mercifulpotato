Item(by='reitzensteinm', descendants=None, kids=[24943736], score=None, time=1604073991, title=None, item_type='comment', url=None, parent=24943459, text='It could, but it just wouldn&#x27;t be Clojure any more. The whole thing is built on persistent data structures, where if you modify an object you get the new version, and keep the old version unless it&#x27;s garbage collected away. Further, there are guarantees that both versions perform well.<p>This isn&#x27;t just used for Clojure&#x27;s STM (although it makes the STM model trivial). It&#x27;s essentially the fundamental premise of the language. Functional programming with structural sharing to allow immutable data structures to be fast enough to be useful in the real world.<p>Introducing a new data structure that was (I assume you mean) HTM aware would not offer the same guarantees. You&#x27;d be able to have two threads mutating it, but you couldn&#x27;t (for instance) keep a history log of values by hanging on to a pointer to each one, that is still reasonably space efficient.<p>TSX or other HTM would allow you to build a hash map that two threads can modify simultaneously by literally just reading and writing to it as normal (with some nasty edge cases, but fundamentally it&#x27;s similar to a single thread version). The hardware keeps track of which cache lines are involved in the transaction, ensures they&#x27;re not written to memory, and if there&#x27;s a conflict it throws them away to retry the transactions.<p>However in Clojure, you&#x27;re not modifying the map, you&#x27;re creating a new version that shares most of the structure with the old version except for your differences. If two threads modify the original hash map A, to yield B and C, all you&#x27;ve got now are three different trees. You might be able to invent a data structure that allow you to merge the diffs of A-&gt;B and A-&gt;C to yield D, containing both versions. But it&#x27;s probably not going to be awfully fast and it&#x27;s going to have corner cases that violate the transactional guarantees.')