Item(by='patrec', descendants=None, kids=None, score=None, time=1604943023, title=None, item_type='comment', url=None, parent=25028658, text='I&#x27;d be curious to hear your perspective as someone who is quite familiar with both Guix and Nix. What sort of companies do you know that are using Guix for Real Work (in some significant capacity)? What would be a rational reason for using Guix in production vs nix?<p>Nix is used by a couple of well known companies such as Pinterest and Target, I have used (and continue to use) nix myself professionally and I know several other places that use it. But even with nix, there needs to be a really good justification to use it in preference to some more standard solution. For example, if all you are working on is python webapp with fairly simple dependencies, I&#x27;d probably recommend sticking to poetry and maybe a docker container for your DB. If you need to deal with e.g. machine learning or video processing, or something else that involves a lot of gnarly C&#x2F;C++&#x2F;Fortran dependencies or if you&#x27;ve got non-trivial DB migrations or other dependencies which you can very conveniently deal with as a (correctly cached and therefore instantaneous) build artefacts with nix, nix can start to make sense, especially if you need to customize any aspect of the build. At the point where you have a bunch of different services written in several different languages, and your dev env needs to run a dozen plus different services together plus some DB(s) and other infrastructure, you can literally achieve two orders of magnitude improvements in key metrics compared to &quot;industry best practice&quot; cruft like docker or (barf) minikube (e.g. how long it takes to spin up all those services correctly, CI speed, deployment times or how long it takes to spin up a new developer, how much extra tooling infra you need to shepherd and so on). Even then you will still need at least two people with a good familiarity of nix and invest in some basic training for the rest of the company and you might periodically run into annoying speed bumps.<p>In summary, as a rule of thumb, I&#x27;d say even something as non-mainstream as nix only make sense if you think it&#x27;ll buy you a 10x or greater improvement for something you really care about. I&#x27;m not deeply familiar with Guix, but my superficial impression is that it&#x27;s a much more ideologically pure and not particularly inspired transliteration of nix to scheme that keeps a lot of the obvious flaws in nix (e.g. not using principle of least power; stuff like sha256, github urls and revs should reside in toml or similar and not be munged into the turing complete and non-machine editable nix&#x2F;scheme code). It still has a significantly lower user base and the greater ideological purity means more stuff won&#x27;t work compared to nix or mainstream solutions. This all matters less for personal use, where I agree it is indeed a matter of taste. But to me the aforementioned means there would need to be some <i>massive</i> benefit of Guix over nix to make it worth considering in a <i>professional setting</i>. Is there, in your opinion?')