Item(by='RedShift1', descendants=None, kids=[25017483], score=None, time=1604765805, title=None, item_type='comment', url=None, parent=25015558, text='&gt; They were not in the original spec IIRC. URL&#x27;s are limited in legth (it&#x27;s not in the spec, but most clients have a limit) etc.<p>They were not in spec because the spec doesn&#x27;t say anything over which medium it should be transported. In fact the spec [1] only mentions the word HTTP 5 times: 4 times in example data and one time discussing implementation details when sending data over HTTP. GraphQL can&#x27;t be faulted for the limits of the transport over which it is used.<p>&gt; Nope. A caching proxy can benefit from HTTP Cache Headers [1]. But cache headers don&#x27;t work well with GraphQL&#x27;s GET requests, and don&#x27;t work at all with the default, which is POST.<p>How do cache headers not work well with GraphQL GET requests? That is entirely up to the server that implements the API. If that server doesn&#x27;t implement caching well, that&#x27;s not GraphQL&#x27;s fault.<p>&gt; It&#x27;s not speculation. That&#x27;s the main use case for GraphQL. But even if you just slap it on top of a single database, you still have the problem of ad-hoc queries hammering your database.<p>The main use case of GraphQL is any two things that want to exchange data with each other. Merging data from multiple data sources as its main use case is simply not true. The ability of GraphQL to merge different data sources is one of its abilities but it&#x27;s not intrinsic to GraphQL.<p>&gt; Turning it into REST with none of the benefits of REST.<p>And what exactly are those benefits? I&#x27;m here defending GraphQL yet none of the downsides of REST are being taken into account. GraphQL brings structure where there was none, that alone is a <i>significant</i> reason to choose GraphQL to structure your API.<p>&gt; N+1 problem<p>There are tools like Postgraphile that solve this. It converts your GraphQL query into one efficient database query.<p>&gt; ad-hoc queries hammering your database<p>And what prevents anyone from hammering a REST API? GraphQL doesn&#x27;t release the developer from implementing sane constraints - something that has to happen with any API implementation and not specific to GraphQL.<p>[1] <a href="http:&#x2F;&#x2F;spec.graphql.org&#x2F;June2018&#x2F;" rel="nofollow">http:&#x2F;&#x2F;spec.graphql.org&#x2F;June2018&#x2F;</a>')