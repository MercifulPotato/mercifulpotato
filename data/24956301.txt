Item(by='darksaints', descendants=None, kids=None, score=None, time=1604189308, title=None, item_type='comment', url=None, parent=24955867, text='I too was around in the very early days ...at least early enough that there wasn&#x27;t a rust &quot;team&quot;, but rather just Graydon.<p>And to wit the only mentions I read about Haskell as an influence were a) the trait system, and b) to criticize and explicitly refute the Haskell approach to a given problem. There was a reason Graydon wrote the compiler on OCaml and not Haskell. He was very critical of a lot of the ideas that Haskell brought. In particular, he hated how Haskell took mutability from &quot;not the default&quot; to &quot;practically impossible&quot;. He hated the effect system and how overly intrusive it was (although he was open to the idea of a fine grained effect system that was not tied to some all powerful Monad typeclass). He hated lazy evaluation. He hated the syntax...even the convention toward snake-case vs camel-case is an homage to OCaml. He didn&#x27;t even care much for typeclasses, preferring the more strict encapsulation of modules, and only bringing them in after a lot of contributors pushed for them.<p>Basically, apart from typeclasses (which werent really unique to Haskell, as they had been known as interfaces within OOP for a few years), Graydon viewed Haskell quite a bit like an old atheistic refrain about religion: that which is good about it is not unique, and that which is unique about it is not good.<p>BTW, Rust&#x27;s ADTs as well as Haskell&#x27;s ADT&#x27;s came from ML. They&#x27;ve been around since 1973, 13 year before Miranda, and 17 years before Haskell&#x27;s first release. You don&#x27;t get to claim that Rust got it&#x27;s ADTs from Haskell any more than you get to say that Java got it&#x27;s Optionals from Scala.<p>EDIT: see this comment from Graydon himself, made about a year ago on the rust subreddit:<p>&gt; That said: back then Rust was much more OCaml-y. We did not start with traits &#x2F; typeclasses; we started with modules (for a while: first-class, though quite badly broken due to my lack of knowhow). I was and am unapologetically more of an OCaml fan than a Haskell fan. This opinion is not made from a lack of information about either, and I am not especially interested in having a Haskell-vs-OCaml argument here. I don&#x27;t even think of them as being especially different languages from a family-lineage perspective. But insofar as I think eager is a better default evaluation strategy than lazy, and modules are a better abstraction mechanism than typeclasses, I am more in the OCaml camp. Other folks later in Rust&#x27;s development argued for (and eventually won) the typeclasses &#x2F; traits thing, against my earlier preferences.')