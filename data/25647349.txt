Item(by='imiric', descendants=None, kids=None, score=None, time=1609865167, title=None, item_type='comment', url=None, parent=25646019, text='You might get a less biased response from someone else, and I don&#x27;t have much experience with JMeter, but:<p>- k6 prioritizes modern developer experience. Tests are written in JavaScript, run from the CLI and can be committed to the same repository along with unit and integration tests. As such it blurs the line between responsibilities of a traditional QA team and pushes for load&#x2F;performance&#x2F;stress testing to be done by application developers themselves. This enables developers to easily integrate k6 in their existing CI pipelines and run load tests early on in the development cycle rather than as an afterthought.<p>- k6 is written in Go, so it&#x27;s much easier to deploy and use as a static binary, which also brings considerable performance benefits over JMeter. You can see a detailed breakdown and comparison in this article[1], written by another commenter here and one of the original k6 authors: rlonn. :)<p>OTOH JMeter is a much more mature tool and has many more integrations and protocol support than k6. We recently launched an extension system for k6[2] that allows developers to add support for other protocols or features via native Go libraries, but the ecosystem is still in its infancy. So if you don&#x27;t mind the JMeter UX, its performance or need some of its features, by all means stick with JMeter. But I would encourage you to give k6 a try for yourself, as it was written precisely out of the same frustrations mentioned in the article.<p>[1]: <a href="https:&#x2F;&#x2F;k6.io&#x2F;blog&#x2F;comparing-best-open-source-load-testing-tools" rel="nofollow">https:&#x2F;&#x2F;k6.io&#x2F;blog&#x2F;comparing-best-open-source-load-testing-t...</a><p>[2]: <a href="https:&#x2F;&#x2F;k6.io&#x2F;blog&#x2F;extending-k6-with-xk6" rel="nofollow">https:&#x2F;&#x2F;k6.io&#x2F;blog&#x2F;extending-k6-with-xk6</a>')