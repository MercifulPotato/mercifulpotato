Item(by='ascar', descendants=None, kids=None, score=None, time=1608405535, title=None, item_type='comment', url=None, parent=25478384, text='I don&#x27;t really intend to continue the discussion as most things have been said.<p>Just wanna point you to the context. The topmost comment was referring to his own comment and discussion about the original issue 3 days ago. You can find this here <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25438169" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25438169</a><p>The topmost commenter also replied to you that there was that previous discussion here <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25473468" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25473468</a><p>So while you didn&#x27;t have the context, he and probably many others (like myself) did have that context. Again, this is not to blame you, because as I said it wasn&#x27;t repeated in this thread and you couldn&#x27;t have known.<p>&gt; In the context of the RFC, mailing list software should be viewed the same as a &#x27;human being&#x27;. Of course it&#x27;s fine to it to re-send, if the software wishes. [...]<p>&gt; Then, the mailing list software, the end user, can do as they wish. Including trying a resend. I don&#x27;t see the conflict here,[...]<p>A lot of people were arguing 3 days ago that the end user (e.g. the mailing list software) should never try a resend and removing the email immediately (after the first 550 response) is correct behavior and mandaotry by the RFC.<p>The topmost comment here restated that this is in fact wrong. Based on what I quoted from you here, you&#x27;re actually agreeing with the topmost comment you were initially disagreeing with.<p>Here is the relevant part from the topmost comment:<p>&gt; When this event happened, I said senders need to avoid taking &quot;invalid address&quot; at face value when they&#x27;ve recently succeeded delivering to the same addresses. But despite the RFC saying senders &quot;should not&quot; repeat requests (rather than &quot;must not&quot;), many people had a lot of resistance to this idea, and instead just blamed Google for messing up implementing the RFC.')