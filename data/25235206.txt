Item(by='didibus', descendants=None, kids=[25238069], score=None, time=1606536797, title=None, item_type='comment', url=None, parent=25232692, text='Yup, we&#x27;re in agreement. My point is actually that using higher level abstractions, such as how Clojure does it, leads to safer code, i.e., less prone to bugs and security vulnerabilities. I also personally think it often yield better readability as well, once you get used to the abstractions. And that, when needed, such as for raw performance, there are still escape hatches if need be.<p>&gt; Yes, I think that (at least in my own experience), Clojure tends to be safer and less error prone, but the reasons are not its loops, they&#x27;re mainly due to its immutable-by-default nature<p>Definitely immutability is a big one. Though I think depending what you compare it against, the loops help as well. Like languages where the only iteration is through while or for-loop (the kind that takes a condition). Or those that lack higher level declarative constructs like filter, any?, every?, partition, etc.<p>Also, related to immutability, it kind of implies loops must be recursive, cause if you think about what a standard for-loop is:<p>for(i = 0; i &lt; 10; i++) {}<p>If your language doesn&#x27;t have (or discourages) mutable variables, how does i work?')