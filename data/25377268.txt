Item(by='kazinator', descendants=None, kids=None, score=None, time=1607627796, title=None, item_type='comment', url=None, parent=25356316, text='Threading syntax is a giant compose. OK, but that&#x27;s an operator.<p>In the TXR internals, I have a C function called chain, which composes N functions together (left to right, not right to left like typical compose functions). It is variadic: the end of the arguments is signaled by <i>nao</i>: a not-an-object constant:<p><pre><code>  git grep &#x27;\\&lt;chain(&#x27;\n  eval.c:                       chain(car_f, eq_to_list_f, nao),\n  eval.c:                        chain(cdr_f, consp_f, nao),\n  eval.c:                        chain(cdr_f, cdr_f, null_f, nao),\n  eval.c:                        chain(car_f, eq_to_quote_f, nao),\n  eval.c:                                   chain(car_f, eq_to_list_f, nao),\n  eval.c:                                   chain(cdr_f, consp_f, nao),\n  eval.c:                                   chain(cdr_f, cdr_f, null_f, nao),\n  eval.c:                                   chain(cdr_f, car_f, consp_f, nao),\n  eval.c:                                   chain(cdr_f, car_f, car_f, eq_to_quote_f, nao),\n  eval.c:                              chain(cdr_f, car_f, cdr_f,\n  eval.c:  return chain(juxt_fun, apf_fun, nao);\n  eval.c:  iter_from_binding_f = chain(cdr_f, iter_begin_f, nao);\n  lib.c:  val pred_key = chain(default_arg(key, identity_f), pred, nao);\n  lib.c:  val pred_key = chain(default_arg(key, identity_f), pred, null_f, nao);\n  lib.c:val chain(val first_fun, ...)\n  lib.c:                     chain(car_f, keyfun_in, nao));\n  lib.h:val chain(val first_fun, ...);\n  match.c:                                      chain(func_n1(cdr),\n  match.c:                              chain(func_n1(cdr),\n  match.c:                                        chain(func_n1(length_list),\n  match.c:                                        chain(func_n1(rest),\n</code></pre>\nThe _f variables are pre-computed function objects, stored in globals, to avoid consing them repeatedly. That func_n1(cdr) seen in match.c could be replaced by cdr_f , not to mention by the func_f1(rest); it conses a new function object referencing the C function <i>cdr</i> each time it is called.')