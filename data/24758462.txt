Item(by='llimos', descendants=2, kids=[24758877, 24761165], score=4, time=1602531126, title='Ask HN: Does any programming language have inline offline async calls?', item_type='story', url=None, parent=None, text='I&#x27;ve recently been using Microsoft Power Automate no-code environment. One of the things it can do is start an action that might take a few <i>days</i> to complete (e.g. ask someone for an approval). The flow is in a running state for days without anything happening, and it carries on where it left off once the action completes.<p>It got me wondering if there is any way to do that in actual code. I would want to write something like<p><pre><code>  doSomething();\n  const result = await offline someVeryVeryLongRunningThing();\n  doSomethingElse();\n</code></pre>\nThen behind the scenes someVeryVeryLongRunningThing launches its own process for doing its thing, using polling, events, whatever it wants. (It&#x27;s a specially written function that supports async offline.) The main process saves its state to disk somewhere and <i>terminates</i>. Then when someVeryVeryLongRunningThing finishes (or fails), the original process is relaunched with the state and call stack that were there before, and carries on where it left off.<p>Obviously things like open sockets and file handles will be lost. But if it could at least retrieve those parts of state that are just data that would still leave a lot of useful use cases. And this is something a compiler could catch.<p>Now of course you can implement it yourself in all sorts of ways, but there would be a lot of boilerplate and the code would not look anything like the above. My question is if there&#x27;s anything available for any mainstream language today that abstracts the complexity away to look remotely like the code snippet above (which is also what the no-code solution would look like it it was code).')