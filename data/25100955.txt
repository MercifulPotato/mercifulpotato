Item(by='rualca', descendants=None, kids=None, score=None, time=1605446301, title=None, item_type='comment', url=None, parent=25100709, text='OP specifically did a Python Vs C comparison. Your assertions have nothing to do with the claim behind discussed.<p>Even so, if you really want to discuss specific technical aspects, you should do well to keep in mind Python&#x27;s notorious and widely known performance problems, such as those due to Python&#x27;s GIL, and the fact that even in performance-oriented benchmarks Python lags way behind other languages, specially C<p><a href="https:&#x2F;&#x2F;benchmarksgame-team.pages.debian.net&#x2F;benchmarksgame&#x2F;fastest&#x2F;python3-gcc.html" rel="nofollow">https:&#x2F;&#x2F;benchmarksgame-team.pages.debian.net&#x2F;benchmarksgame&#x2F;...</a><p>If it was easy or possible to mitigate Python&#x27;s notorious performance issues then we would see the results in these synthetic benchmarks. But we don&#x27;t, no matter how much time has been devoted to them.<p>Speaking as someone who writes Python for a living, Python aficionados would do well by avoiding misrepresent Python in ways that a) it&#x27;s easy to verify and refute, b) goes against it&#x27;s main technical characteristics. Python is awesome to chug out quick and dirty POCs, exploratory code, glue code that ties together performance-critical parts, utilities, and non-performance critical applications. Performance-critical applications is not, nor it ever was, Python&#x27;s thing. Once we see Python addictions dos trying to claim that their hammer is the best screwdriver around, we start to sell a losing proposition.')