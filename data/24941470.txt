Item(by='tptacek', descendants=None, kids=[24942127, 24941750], score=None, time=1604060641, title=None, item_type='comment', url=None, parent=24941226, text='You&#x27;re likely to lose safety implementing a vanilla CRUD app in Rust instead of Django. Rust is mostly buying you memory safety; the rest of its safety features are helpful when building new kinds of applications, but Django CRUD applications follow a well-worn pattern, and the Django developers have done really good work making sure that those patterns are easy to implement securely (usually by default).<p>Meanwhile, safety in a web application is domain-specific, and there isn&#x27;t much a language can do to protect you. There aren&#x27;t really Rust features that directly prevent SSRF attacks, or HTTP desync. In fact, my experience assessing Rust (and Go) web applications is that they intend to reincarnate web vulnerabilities that went mostly extinct in Django applications years ago; for instance, I&#x27;m virtually never going to find SQLI in a Django application, but Rust web applications are somewhat likely to build their own SQL queries. This will shock and upset some Rust developers to hear (all the popular Rust SQL interfaces force parameterized queries! they&#x27;re thinking), but it&#x27;s true.<p>I like Rust, and write more Rust than any other language lately. I&#x27;d say the same thing about practically any modern language compared to boring old Django, which is the Volvo of web frameworks.<p>I have nothing much to say about <i>reliability</i> and do recognize that writing in Python or Ruby means that you&#x27;re also writing ridiculous batteries of unit tests to verify basic things like whether your setters and getters work properly, because the language essentially makes you check your own typos. I&#x27;m only talking about security.')