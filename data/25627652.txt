Item(by='ldiracdelta', descendants=None, kids=None, score=None, time=1609730774, title=None, item_type='comment', url=None, parent=25620110, text='I&#x27;m a bad man, and I have sinful [ooo] thoughts, but...<p>Is-a inheritance is extremely useful for creating extensible components.  &quot;It may\nbe wrong, but it&#x27;s much too strong.&quot;<p>In rust, how can you make a component that is just like another component, but  ever so slightly tweaked without copying the entire external API of that other  component?  I understand I can wrapper with has-a relationship, intercept the  correct API, and then pass through the rest of the entire interface, but how can I avoid copying the entire interface of the object when I only want to tweak  something tiny?<p>With a car, I can swap out the engine with another, I just have to make sure  the external interface is the same.<p>It may be a &quot;bad thing&quot;, but it is extremely useful for the scenario where I say, &quot;I want a Chevy smallblock, but I want to only tweak metal alloy on the interior piston.&quot;<p><pre><code>    class MyBlock(ChevySmallBlock):\n       def get_interior_alloy(self):\n           return metals.Unobtanium\n        \n           </code></pre>\nBam.  I have same item; slightly tweaked.  I&#x27;ve used this type of pattern to  great effect and I find that style of inheritance manipulation invaluable in  python.<p>How can you do this with rust?  I know that is-a inheritance is sinful, but show me the better way!  I truly want to know it, and I&#x27;ve been trying to find a  pattern for this.')