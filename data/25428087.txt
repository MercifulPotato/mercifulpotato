Item(by='loup-vaillant', descendants=None, kids=None, score=None, time=1608019366, title=None, item_type='comment', url=None, parent=25425932, text='&gt; <i>it really is just syntax</i><p>It&#x27;s really not. When the impact of &quot;syntax&quot; are non-local like that, it&#x27;s more than syntax. A compiler would handle this beyond the parsing stage. At the very least, it would seriously massage the AST to remove `defer` from it.<p>&gt; <i>if we assume defer is implemented like attribute cleanup and fix up the compile errors, your first and fourth example compile to the identical assembly code:</i><p>This is to be expected: they ultimately do the same thing, and optimisers are known to do significant, non-local transformations to the code.<p>&gt; <i>move the &quot;business logic&quot; into a separate function, one that takes the necessary resources as arguments.</i><p>So now I have a function with (likely) too many arguments, that&#x27;s used only once, and my eyes have to jump around to get to it (or I have to reach for the F2 key). The pyramid may be more visible, but that&#x27;s a meagre advantage.<p>&gt; <i>In my opinion the nested if style is better than using defer because it&#x27;s completely linear with no backward jumps.</i><p>Not even a criterion in my book. I suspect you&#x27;re having an overly operational mindset. A mindset I suspect has held the whole field back a couple decades. Don&#x27;t think of it like a backward jump. It&#x27;s meant to be viewed as deferred execution, triggered by scope exit.<p>&gt; <i>you can hardly complain about cleanup code being far from init code because the whole resource handling function is less than 20 lines of code</i><p>That was an example, dummy. In real code, I&#x27;d have more than 3 things to initialise, and their initialisation might not be as trivial (or as repetitive) as what I&#x27;ve shown here. That&#x27;s when I really want to read the code from top to bottom, with concerns packed together. Defer&#x2F;cleanup lets me do that. The other solutions, less so.')