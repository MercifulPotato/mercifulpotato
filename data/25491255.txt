Item(by='amluto', descendants=None, kids=None, score=None, time=1608514480, title=None, item_type='comment', url=None, parent=25490992, text='Search through <a href="https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2019&#x2F;08&#x2F;the-fully-remote-attack-surface-of.html" rel="nofollow">https:&#x2F;&#x2F;googleprojectzero.blogspot.com&#x2F;2019&#x2F;08&#x2F;the-fully-rem...</a> for NSKeyedUnarchiver.<p>This seems to be functionally much like Python’s pickle, Boost.Serialization, Java’s object serialization, etc. These techniques seem clever, and they are genuinely useful for prototyping and for certain applications that inherently have no security concerns, but they are not at all suitable for network use.  Fundamentally, for network use, one should define a data format, an API, etc and implement it. Using object serialization is backwards — it’s writing the code and then asking a framework to magically network it, and the result is that it networks it too much.<p>(There are a few systems for writing code and a network protocol simultaneously that treat security as a first-class consideration.  The E language comes to mind. I <i>still</i> wouldn’t use E objects to represent data for interoperability reasons if nothing else. But ObjC is not E, and Apple’s design is inexcusable in 2020.)')