Item(by='contravariant', descendants=None, kids=None, score=None, time=1611573634, title=None, item_type='comment', url=None, parent=25899857, text='In the full paper they quote a rather interesting method [1] that allows you to insert values in amortized O(log(n)) time (deletes are apparently handled with tombstones, presumably rebuilding the whole thing when a sufficiently large proportion is deleted).<p>A very abridged explanation of how they handle inserts: you split the collection in a list of collections where position k contains either nothing or a collection size 2^k. When you want to add a new value you find the first empty spot and fill it by building a set of your new value together with the collections of all the preceding spots (because the sizes are all sequential powers of two this will fit exactly). Provided that merging the collections takes linear time this takes an amortized O(log(n)) per inserted item.<p>Of course once you have this you can use it for any learned index that can be learned in linear time.<p>[1]: M. H. Overmars. <i>The Design of Dynamic Data Structures</i>, volume 156 of Lecture Notes in Computer Science. Springer, 1983.')