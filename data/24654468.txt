Item(by='nur0n', descendants=None, kids=[24655044, 24656510, 24657626], score=None, time=1601576971, title=None, item_type='comment', url=None, parent=24653390, text='There was a huge discussion shortly after Julia 1.0 was released regarding scoping [1]. Beginners intuitively think of scoping in a manner different from the way scoping should work in production projects. There was a lot of tension between seasoned programmers and educators (who had to constantly interact with beginners).<p>The community exhausted the entire design space (along with some full-blown prototypes). Eventually, the core Julia team chose to use more forgiving scoping in the REPL (virtually always the first point of contact for beginners), while actual projects enforced stricter scoping rules.<p>My key take-away is to consider how the language interacts with its ecosystem, not just how it should ideally operate in isolation. I have found the Julia team to be consistent in this pursuit. If the first point of contact is intractable for beginners, the project is dead on arrival. A technical tool <i>should</i> be tailored for experts, but you don&#x27;t want to kill adoption along the way. Engineering is tradeoffs.<p>This article goes more in depth along the same lines: <a href="https:&#x2F;&#x2F;pchiusano.github.io&#x2F;2016-02-25&#x2F;tech-adoption.html" rel="nofollow">https:&#x2F;&#x2F;pchiusano.github.io&#x2F;2016-02-25&#x2F;tech-adoption.html</a><p>[1] <a href="https:&#x2F;&#x2F;discourse.julialang.org&#x2F;t&#x2F;another-possible-solution-to-the-global-scope-debacle&#x2F;15894" rel="nofollow">https:&#x2F;&#x2F;discourse.julialang.org&#x2F;t&#x2F;another-possible-solution-...</a>')