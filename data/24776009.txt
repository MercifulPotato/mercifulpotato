Item(by='chriswarbo', descendants=None, kids=None, score=None, time=1602680507, title=None, item_type='comment', url=None, parent=24775159, text='There&#x27;s nothing preventing a fake implementation of interface Foo from <i>also</i> having extra functionality, like controlling it&#x27;s initial state. In the case of sockets, we might have a FakeSocket which implements methods Socket::close, Socket::read, etc. but also provides methods like FakeSocket::appendToBuffer, FakeSocket::withState, etc.<p>The boundary between such fakes and mocks is obviously fuzzy: as we override more of a fake&#x27;s behaviour we approach a mock, as we make a mock more functionally-complete we approach a fake.<p>Mocks (in this sense) are most useful when we want a lot of control over a very simple interaction; e.g. having Socket::read return a particular error state. We don&#x27;t need a whole fake implementation for that, and indeed it&#x27;s probably easier to just specify a mock with only those parts (and nothing else).<p>In my experience such situations are rare, since they tend to result from over-complication in the system under test, which makes it hard to test. Mocks are a useful crutch in those situations, but it&#x27;s often better to refactor the code such that mocks aren&#x27;t needed.<p>For example, whenever we create a mock that returns some canned response, that&#x27;s a hint that our &#x27;service object&#x27; is probably just a (possibly lazy) wrapper around that response. Any code that processes such responses can often be refactored into an ordinary function&#x2F;method which accepts such response data as an argument. Sending test data into such functions is trivial (just call the function on the test data), and we can delete whatever wrapping&#x2F;unwrapping boilerplate was previously littering the code.<p>When our mocks are more complicated that just spitting out canned responses (e.g. there&#x27;s some temporal dependency between method calls, and correlations between their responses), those are exactly the things that fake implementations are for.')