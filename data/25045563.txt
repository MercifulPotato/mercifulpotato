Item(by='marcinzm', descendants=None, kids=[25059332, 25055736], score=None, time=1605014046, title=None, item_type='comment', url=None, parent=25043915, text='&gt;ETL &#x2F; data transformations. Python is a big player here - but for stable and performant data pipelines, I strongly believe Scala is the better choice. For explorative things, python has the edge though.<p>I disagree. And I&#x27;ve done a lot of Scala ETL work. The issue is that in Scala ETL work your data structures are either untyped (Spark Dataframe), case classes or typed tuples. If they&#x27;re untyped then there&#x27;s little to gain from Scala vs. Python in terms of type safety and a lot of overhead. If they&#x27;re case classes then you&#x27;re moving around a lot of unnecessary data fields and you&#x27;ve got the overhead of making fifty intermediate case classes yourself. If it&#x27;s typed tuples then it&#x27;s on you to remember which field is what as nothing is named.<p>Some sort of intelligent compile time case class subset generation would have helped the situation immensely. I think frameless (<a href="https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;frameless" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;frameless</a>) gives you that power but it&#x27;s a lot of shapeless black magic overhead and I&#x27;ve never seen it used in production (and probably various maximum field limitations and much slower compile times).<p>edit: Case classes also have (or had) a steeply increasing compile time memory requirement as you add more fields which is fun when your data is 200+ fields long. Almost as fun as having to make a 200 field case class to read in a single file of which you only need 50 fields but want to be type safe.<p>edit2: Scala is popular in ETL because the Hadoop ecosystem is JVM and Java used to be atrocious. So Spark (which wanted Hadoop compatibility) picked Scala because it was better than the alternatives. However nowadays Databricks is investing a lot more into their Python support from what I can tell and there&#x27;s Python native competitors out there (Dask, Ray, etc.).')