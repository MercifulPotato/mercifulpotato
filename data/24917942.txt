Item(by='brunovcosta', descendants=None, kids=None, score=None, time=1603888357, title=None, item_type='comment', url=None, parent=24914062, text='Great article!<p>I have a different point of view.<p>There are two assumptions I disagree:<p>Assumption 1: No-code will not benefit from code learnings (or do some equivalent progress)<p>Probably, because the nature of domain (code vs GUI), the solutions may be different, but it&#x27;s possible to attack the same problems.<p>many no-code tools have some type of versioning plus real time sync<p>many no-code tools have some type of abstraction level extensibility with plugins<p>...<p>Assumption 2: Software development is mainly solving complex problems<p>The other force no-code in the no-code side is, as software industry gets more mature, more patterns are discovered.<p>Just look how much boilerplate is in each company or unnecessary rework with bad abstractions.\nMost of companies doing software today are just rearranging things on screen, or creating some simple pipelines.<p>Even though RAD, low-code, model driven, etc.. is not a new thing, time has a important role here:<p>Also as software is getting more popular in last decade, we saw a lot of space for &quot;almost the same&quot; solutions to coexist, allowing more of the production process to be &quot;productized&quot;<p>This can be different to silicon valley style startups, but most of the market is solving the same old problems everyday.<p>Full disclosure, I actually have a no-code&#x2F;low-code startup (<a href="https:&#x2F;&#x2F;abstra.app" rel="nofollow">https:&#x2F;&#x2F;abstra.app</a>) hence I&#x27;m very biased!')