Item(by='permille42', descendants=None, kids=None, score=None, time=1610069931, title=None, item_type='comment', url=None, parent=25670135, text='It is better to hire fewer employees that last. That is, more effort should be spent on retention and less on acquiring as many disposable employees as possible.<p>Most of the big companies treat their employees like trash and lose them rapidly. They think &quot;Well we pay a lot so we have tons of people banging on our door to work for us, so we don&#x27;t need to worry about getting new employees.&quot; This is a bad mentality.<p>New software engineers need to always be interviewed by those who are senior to the level at which the employee is being hired for. You will never be able to reasonably determine candidate level if you don&#x27;t have more experience than they do.<p>The notion of &quot;always hire employees smarter than yourself&quot; is cute, but you don&#x27;t have any way to determine rapidly that someone is.<p>Some recommend take home projects. I don&#x27;t think those tend to work well for various reasons...<p>Things I do think work to find good employees:<p>* Give adequate time for whatever task is assigned during the interview. I nearly always see that the interview is rushed because there is inadequate time given for what is being done. If time is not available, just do a portion of the tasks and quick fail if the candidate does not pass that portion. If they succeed schedule additional interviews.<p>* Require open source contributions of meaning for higher level candidates. Have an interview ( an entire interview ) centered around reviewing their contributions with the candidate and discussing them.<p>* An interview ( 1 hr ) of the following type: Tell the candidate &quot;Convince me why I should hire you. You have 30 minutes to present your case. I will say nothing that whole time. Afterward Q&amp;A about what you said for 30 minutes.<p>* Ask questions of the candidate and don&#x27;t bother with all the trickery. Bring me any software engineer and let me just ask them about random stuff freeform and I&#x27;ll tell you if they suck or not within an hour. Don&#x27;t demand some specific stupid process for interviewing them. You have to trust those you use to do the interview process and give them the authority to determine what the next best questions are always. The moment you turn the process into some &quot;by the book&quot; shit, you will get a shit process.<p>* If a coding test must be done, it needs to be just like on the real job in that full access is given to use websites to rapidly acquire the information needed to give the best result. Also, let candidate use their own IDE setup, and have them ready to go ahead of time. If anything, give a loose idea of what the coding task will be without details, to give the candidate time to prepare in whatever way makes sense for them to be able to tackle a task of that time.<p>* Give more time to accomplish tasks. So so so many of the stupid tasks I&#x27;ve been assigned in interviews cannot be reasonably and cleanly done within the 20-30 minutes usually given max to do them. Creating quality software takes time. Rushed software = crap software. Be real.')