Item(by='abalashov', descendants=None, kids=[25721593, 25721410], score=None, time=1610317699, title=None, item_type='comment', url=None, parent=25717390, text='It all depends on who you&#x27;re hiring and what you&#x27;re building. Definitely applicable to startups and innovators coming up from the bottom.<p>But, there are absolutely companies maintaining low-growth Clunky Java Accounting Application for Insurance Companies #574 for whom this approach is contraindicated. Those companies can hire relatively entry-level, average graduates, at commensurate salaries, and assign them highly structured JIRA tickets.<p>Would they get better talent if their fronds tended more toward the SV model of compensation and autonomy described in the article? Absolutely. But in terms of marginal productivity or ROI, it&#x27;s far from clear that it makes much of a difference to the financial performance of Cluky Java Accounting Application for Insurance Companies #574. That means massively overpaying for skills, or skill levels, that aren&#x27;t really needed, or aren&#x27;t needed enough to matter.<p>No, it&#x27;s not the kind of software development any of us want to do, and I think the audience for this post are for the most part in no danger of having to. But I think it&#x27;s important to be honest about the fact that this sort of dimly-lit, cubicle-dwelling sweatshop software work _is_ a high percentage of software development occurring on the planet. For that type of company, following the &quot;SV&quot; philosophy would arguably constitute a dereliction of fiduciary duty.<p>My view may be somewhat coloured by my exposure to medium to enterprise-sized companies in the telecom world, where a lot of the work is tedious, unimaginative and formulaic, using unexciting but established technology stacks, and so forth. But it still needs to be done, and there are companies who darken the skies with people to do it.<p>Lastly, I incorporate by reference everything that has been said elsewhere in this thread about the nature of large organisations and the poor scalability of engineering-led company process. Most software work, by volume, doesn&#x27;t consist of skunkworks innovation or the development of something new. Most software work is incremental, in many cases strictly maintenance mode, and caters to many stakeholders. Large organisations and big capital serve an entirely different purpose that is realised at points further along the technology and product lifecycle. In this comment, I merely chose to focus on (1) the problems of empowering &quot;average&quot; talent this way and (2) the poor prospectus for doing so.')