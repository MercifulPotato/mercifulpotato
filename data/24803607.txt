Item(by='BenTheElder', descendants=None, kids=None, score=None, time=1602872996, title=None, item_type='comment', url=None, parent=24793078, text='[I work on kind amongst other things...]<p>If you want to turn your host into a node you can do this with --vm-driver=none in minikube or better yet just use `kubeadm init` directly. In KIND we point people to the latter -- the main thing we&#x27;re doing <i>is</i> running inside a disposable container &quot;node&quot; of which you can have many.<p>Assuming you don&#x27;t actually want to turn your host machine into a node managed by Kubernetes, you&#x27;ll want to stick Kubernetes in a VM or container. If the rest of Kubernetes is in this container or VM, it doesn&#x27;t make sense to be running containers out on the host, things like mounting volumes won&#x27;t work, you need a consistent filesystem between kubelet and the container runtime.<p>With kind it&#x27;s also important that we simulate multi-node and multi-cluster, which is not viable with a single container runtime instance.<p>Without actually running Kubernetes against the hosts&#x27;s runtime you can&#x27;t share storage. The way docker desktop does this is to run Kubernetes with docker as the node&#x27;s container runtime while only supporting a single node&#x2F;cluster in a VM and expose the same runtime for building.<p>For our test workloads it&#x27;s important to have different clean clusters constantly for different tests &#x2F; projects.<p>KIND and microk8s have made a bet on containerd, as kubernetes is actively moving away from dockershim towards CRI, so even if we exposed a node runtime you can&#x27;t build with it.<p>It&#x27;s indeed space-inefficient, but it&#x27;s a tradeoff in isolation between projects etc. For multi-node you&#x27;re going to wind up with multiple copies anyhow, and a lot of projects we work with wind up needing some multi-node testing.')