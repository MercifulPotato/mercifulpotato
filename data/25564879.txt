Item(by='codethief', descendants=None, kids=[25567409], score=None, time=1609199909, title=None, item_type='comment', url=None, parent=25563929, text='&gt; My method is to write small scripts, I call them setuplets,<p>Finally I have a proper term for what I, too, have been doing all these years! :-) It&#x27;s indeed the best-possible approach I&#x27;ve found, though there are a number of things that I haven&#x27;t yet solved for myself in a satisfactory manner:<p>- With shell scripts there are no idempotency guarantees and there is no easy undoing &#x2F; uninstalling &#x2F; clean-up, especially after updating a setuplet.<p>- With shell scripts everything is defined imperatively as opposed to declaratively. In particular, setuplets usually operate on the filesystem directly and testing and dry runs are almost impossible.<p>- No status report as to what a setuplet wants to set up (software, configs, cronjobs…) and what is already set up on the current machine. That is, no diffs. This makes sharing setuplets and configs between multiple machines (say, personal and work laptop) rather cumbersome. For instance, I might forget to re-execute a setuplet on the second machine which could then lead to a missing software dependency or a mismatch between config and software.<p>- No simple, out-of-the-box way to have different configs&#x2F;dotfiles for different machines, in particular: no config templating.<p>- It&#x27;s hard to share common settings across applications without duplicating them everywhere. For instance, I would like to define a common set of colors &#x2F; a common theme for my window manager, my terminal, my editor and so on. Similarly, (some) keybindings should be the same across applications. Moreover, I have a set of common directories in my home dir (for binaries, logs, cache etc.) that all my setuplets &amp; dotfiles should use.<p>- Dependencies and interactions between setuplets are often implicit. They interact with and depend on one another through a myriad of ways, like software dependencies (of course) but also PATH modifications, cronjobs, bash aliases, file system modifications … These are very hard to recognize and, even worse, to refactor.<p>- Bash scripts are error-prone and cumbersome to write and debug (and refactor).<p>- My setuplets don&#x27;t have a common command line interface and their relation to one another is unclear. (In which order should they get executed?) I tend to write scripts that invoke all the setuplets in the right order but it still seems messy and error-prone.<p>I&#x27;ve tried solutions like Ansible but I&#x27;ve found that its purely declarative DSL is not flexible enough to cover all my use cases in an elegant manner.<p>…which is why I&#x27;m currently working on a small Python library that will hopefully solve or at least ease the above pain points for me. Once the library is finished, I will rewrite my setuplets in Python (using the library to do the hard and tedious work), so that I end up with one single Python project of dotfiles and setuplets (exposed through one single command line tool) that, once executed, will automatically set up an entire machine for me within a few minutes. One nice thing would be that all inter-setuplet dependencies would be expressed through Python code (with proper typing, encapsulation in modules and everything) which could then easily be explored (and also refactored) with an IDE. Sure, this sounds like a lot of work but given that I intend to use my dotfiles for a couple more decades, it seems well worth it.<p>Of course, whether my approach will ultimately be able to solve all the challenges above remains to be seen but I&#x27;m at a point right now where I&#x27;m convinced that proper software engineering methods (especially dependency injection, type checks, tests etc.) would be a real boon for managing my (hundreds of) dotfiles.')