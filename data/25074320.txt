Item(by='seddonm1', descendants=None, kids=None, score=None, time=1605212069, title=None, item_type='comment', url=None, parent=25071443, text='These GUI driven&#x2F;Visual ETL tools certainly have their place but are firmly at one end of the ease of use vs engineering discipline based ETL continuum.<p>As other posters commented Visual ETL often suffer from source control or limited extension ability but do provide the rapid development environment that users (generally more business oriented) seek. They also tend to trivialize the value of experience&#x2F;discipline - for example I go to an accountant for my tax because they apply learned-experience relating to tax that I do not have (even though the math is easy) whereas in data engineering seemingly simple tasks such as correctly applying data typing to money or dealing with timezones seems to be glossed over in the pursuit of DIY - and wondering why your money columns don&#x27;t reconcile or you lose data in failure scenarios.<p>At the other end of the continuum large teams writing bespoke ETL code for every job does not scale well for many reasons (<a href="https:&#x2F;&#x2F;reorchestrate.com&#x2F;posts&#x2F;code-doesnt-scale-for-etl&#x2F;" rel="nofollow">https:&#x2F;&#x2F;reorchestrate.com&#x2F;posts&#x2F;code-doesnt-scale-for-etl&#x2F;</a>). I think the positive reaction to ideas like Data Mesh comes from the failures of these large, centralized teams which coincided with the Hadoop era.<p>Our solution has been to develop an open source (MIT) declarative framework (<a href="https:&#x2F;&#x2F;arc.tripl.ai&#x2F;" rel="nofollow">https:&#x2F;&#x2F;arc.tripl.ai&#x2F;</a>) that allows configuration driven ETL - mostly developed via a Jupyter Notebook environment (to allow rapid development and appeal to a larger audience) - whilst making most of the difficult tasks mentioned above easier. This has been in development for a few years now and continues to evolve. We value your feedback.')