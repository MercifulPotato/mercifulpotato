Item(by='AnonC', descendants=None, kids=None, score=None, time=1607876308, title=None, item_type='comment', url=None, parent=25406798, text='&gt; This means that supporters can always point to concrete benefits to their specific use cases, while detractors claim far more abstract drawbacks.<p>I don’t agree with this. If you have a salesperson&#x2F;accountant who grew into being CEO and is just a bean counter who doesn’t (want to) understand the real costs of training new developers on increased complexity in a system or being able to maintain a complex system over decades, this could possibly be true. But in that case, your engineering manager isn’t a real engineering manager either, and is just another bean counter in disguise.<p>I get that senior management may not always (want to) understand the nuances in building, maintaining and supporting a complex system, but it’s not abstract. It costs real money that all these types can feel the pinch of.<p>The real reason why software is complex or can get complex is because the underlying domain and its requirements and constraints are complex, combined with layers of complexity added on the technical side to enable certain things (perhaps easy configurability, scalability, reliability, etc.). There are self-inflicted wounds too, where complexity is prematurely added. But that’s not the full story in all cases.')