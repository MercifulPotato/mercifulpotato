Item(by='geofft', descendants=None, kids=[25883651], score=None, time=1611418494, title=None, item_type='comment', url=None, parent=25882950, text='Yes, but the claim is that the buffer you should remove is the OS&#x27;s one, not the DBMS&#x27;s one, because for the DBMS use case (one very large file with deep internal structure, generally accessed by one long-running process), the DBMS has information the OS doesn&#x27;t.<p>Arrow is a different use case, for which mmap makes sense. For something like a short-lived process that stores config or caches in SQLite, it probably is actually closer to Arrow than to (e.g.) Postgres, so mmap likely also makes sense for that. (Conversely, if you&#x27;re not relying on Arrow&#x27;s sharing properties and you have a big Python notebook that&#x27;s doing some math on an extremely large data file on disk in a single process, you might actually get better results from O_DIRECT than mmap.)<p>In particular, &quot;zero memory copy&quot; only applies if you are accessing the same data from multiple processes (either at once or sequentially). If you have a single long-running database server, you have to copy the data from disk to RAM <i>anyway</i>. O_DIRECT means there&#x27;s one copy, from disk to a userspace buffer; mmap means there&#x27;s one copy, from disk to a kernel buffer. If you can arrange for a long-lived userspace buffer, there&#x27;s no performance advantage to using the kernel buffer.')