Item(by='fwip', descendants=None, kids=None, score=None, time=1609896265, title=None, item_type='comment', url=None, parent=25647618, text='Really? I&#x27;m halfway through &quot;I don&#x27;t like Go&#x27;s abstractions over file permissions on different operating systems&quot; and rolling my eyes.<p>When the author is talking about how great Rust&#x27;s error handling is (by forcing you to decompose the Result type), they also forget to mention things like &quot;the go linter that everyone uses will let you know that you are ignoring the error.&quot;  It&#x27;s not a &quot;Rust is always safer&quot; scenario like is implied, it&#x27;s a deliberate tradeoff for a less-fussy compiler, because sometimes you&#x27;re prototyping and want to ignore the fact that you&#x27;re not handling everything perfectly. Yes, Rust has better typing, and Result types are a great pattern, but the article makes it sound like the Go situation is uniquely bad.<p>Similarly, with the complaint: &quot;Rust Paths, however, are... arbitrary byte sequences. [...] See, there&#x27;s no &quot;path&quot; type in Go. Just &quot;string&quot;. And Go strings are just byte slices, with no guarantees what&#x27;s inside.&quot;  If you program in Go for a week, you know that strings are &quot;just byte slices.&quot; If you want to see if it&#x27;s got utf-8 contents, just run `utf8.Valid(mystr)` - it&#x27;s in the standard library, easy to find, and the obvious solution. Imagine telling a new programmer &quot;ah, you see, the FilePath doesn&#x27;t implement the `Display` Trait, so you have to write `println!(&quot;(dir) {:?}&quot;, path)`, and this is much better than in Go, where you write `fmt.Printf(&quot;(dir) %q&quot;, path)`&quot;. But the author doesn&#x27;t show the Go solution, because that would reveal that they&#x27;re essentially quibbling about syntactical choices made in the built-in string formatting library.<p>Nearly every single complaint is like this. For example, the author seems to be unfamiliar with basic Go naming conventions: &quot;(Can I just point out how hilarious that &quot;Extension&quot; was deemed long enough to abbreviate to &quot;Ext&quot;, but &quot;IsPathSeparator&quot; wasn&#x27;t?)&quot; - yes, because Ext is a much more common thing for calling-code to use, and IsPathSeparator is rare to need. &quot;Familiarity admits brevity&quot; is the saying in the Go community - and as a corollary, the more you use it, the shorter the name can be.<p>And once you get past the nitpicking of the file stdlib, the author&#x27;s main complaint is &quot;there&#x27;s too many dependencies downloaded for some packages&quot;, as if they don&#x27;t believe that the go compiler can do basic dead-code elimination like every other real compiler?<p>Monotime itself has 0 dependencies, which, again, the author <i>knows</i>, because they pasted the entire source into their article verbatim. If you are stuck on dial-up or something and hate downloading bytes just to throw them away - just copy these two files (12 lines of code) into your project! One of the Go proverbs is literally &quot;A little copying is better than a little dependency.&quot;<p>This isn&#x27;t a piece with real criticisms, this is a &quot;rant&quot; (self-described by the author) because they&#x27;re honeymooning with a new, prettier language now (Rust). I find it impossible to believe that the author literally does not know these things after working with Go for &quot;thousands of hours.&quot; I&#x27;m by no means a Go expert - I haven&#x27;t written a line of Go for about 2 years, and the biggest project I ever worked on in Go was 499 lines - but the only thing I had to research for this comment was running `cloc` to get those 499 lines.<p>And indeed, the author started another article about Rust 6 months later, &quot;Learning Rust is... an experience. An emotional journey. I&#x27;ve rarely been more frustrated than in my first few months of trying to learn Rust.&quot; When trying to explain how to write a function to add two numbers (the hello-world of functions), they write &quot;We&#x27;re getting dangerously close to flirting with academic papers at this point, so let&#x27;s go for an example immediately.&quot;<p>Go isn&#x27;t Rust. Go is made for building things that the kid 30 days out of coding bootcamp can jump right into and start fixing bugs. If you like Rust, more power to you. But it&#x27;s not built to be what Go is built to be.')