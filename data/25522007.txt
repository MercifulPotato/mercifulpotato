Item(by='pjbk', descendants=None, kids=None, score=None, time=1608756345, title=None, item_type='comment', url=None, parent=25520076, text='Based on my experience, many, many, many headaches would be saved if this advice was followed more closely.<p>IMHO defensive techniques including recovery should be placed in runtime monitors and supervisors, not in underpinning code which should have a minimum set of behaviors. It should also be kept as simple as possible to avoid code bloat and help reviewers and tools like static analyzers do their job.<p>Old computing hardware was designed like that. Then software attempted to replicate hardware &quot;exceptions&quot;, however not realizing that the model was intrinsically different and completely exploding in intricacies dealing with interrupts, stacks, memory management and threads.<p>In a similar way, supervisors should be as decoupled as possible from the target code to provide reliability and avoid overall system complexity, with their own set of narrowed down requirements.<p>Sadly our industry is plagued with historical, ad-hoc programming techniques that are not relevant anymore or were plain empirical bad advice in first place. For example, blindly relying on stateful paradigms, or side effects by design or as an acceptable consequence of certain programming idioms.')