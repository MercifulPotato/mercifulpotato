Item(by='ISV_Damocles', descendants=None, kids=None, score=None, time=1604689273, title=None, item_type='comment', url=None, parent=25007443, text='That&#x27;s mostly correct. :) We used `do-while` to demonstrate that we <i>could</i> replicate the behaviors of a normal assembly language within the dependency graph representation.<p>However, we do have a restricted version of `do-while` implemented as described in the Sequential Algorithms RFC[1]. We want to push people into writing parallelizable code by having the default constructs and data types encouraging that, but we know certain algorithms are only possible in a sequential form, and some of them (like the Newton-Raphson method) are not predictable in the number of sequences to run so we have an escape hatch in the language that lets you do the classic iterative programming, but all of them wrapped in a maximum iteration counter so we&#x27;ll still be able to assign a maximum expected runtime to them (and be sure they halt, perhaps with an error).<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;alantech&#x2F;alan&#x2F;blob&#x2F;main&#x2F;rfcs&#x2F;007%20-%20Sequential%20Algorithms%20RFC.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;alantech&#x2F;alan&#x2F;blob&#x2F;main&#x2F;rfcs&#x2F;007%20-%20Se...</a>')