Item(by='klodolph', descendants=None, kids=[24903573, 24901690], score=None, time=1603745409, title=None, item_type='comment', url=None, parent=24900442, text='I&#x27;ve been staring down compiler flags for two weeks straight, now, since I&#x27;ve been working on cross-compilation toolchains, but that kind of narrative doesn&#x27;t fit your current level of snark, I guess.<p>I have run operations for programs written in Java, C++, and Go. I&#x27;ve done it both at small companies and large companies, for everywhere from a rack of dedicated servers running Apache Tomcat to thousands of virtual machines running a mixture of C++ and Go microservices.<p>The constant thread is... over the last ten years... the people running JVMs complain about tuning the JVM, and always have stories to tell about it. The JVM is <i>fantastically</i> tuneable, and when people online complain about GC pauses or memory problems, there&#x27;s often some way to tune the JVM to <i>fix</i> those problems. The JVM is amazing, it&#x27;s a marvelous piece of technology.<p>But there&#x27;s also a bunch of people who don&#x27;t know how to do it and just turn knobs. Like, oh, customers are calling in to complain about latency, so I&#x27;ll increase the size of the Java heap. (Which, for those not familiar with GC, will make throughput better but make latency worse.) Running services on the JVM means that &quot;working with the JVM&quot; is now a skill you need to select for whatever operations team you have, and if you&#x27;re a company running a mix of different services (like, I don&#x27;t know, some databases, memcache, load balancers, etc) then &quot;knowing how to tune the JVM&quot; competes with several other skills you&#x27;d like your team to learn.')