Item(by='bluedino', descendants=None, kids=[25686159], score=None, time=1610121802, title=None, item_type='comment', url=None, parent=25676660, text='Let me just point out how amazing online resources are, now, compared to &quot;not that long ago&quot;.<p>Let&#x27;s go back in time to 1994. You are a teenager armed with a computer, modem, possibly internet access but more likely an online service such as CompuServe. Since you also have a C or Pascal compiler, and are inspired by the latest trend of 3D graphics in PC games, you download the comp.graphics.algorithims FAQ.<p>You read something about &#x27;Marching Cubes&#x27; but don&#x27;t really grasp anything from it. You also probably don&#x27;t have access to the textbook or papers that also describe it.<p>Instead of this incredible visual demonstration, you get a couple paragraphs of text and some ASCII art:<p><pre><code>   ----------------------------------------------------------------------\n   Subject 5.10: What is the marching cubes algorithm?\n\n    The marching cubes algorithm is used in volume rendering to\n    construct an isosurface from a 3D field of values.\n\n    The 2D analog would be to take an image, and for each pixel, set\n    it to black if the value is below some threshold, and set it to\n    white if it&#x27;s above the threshold.  Then smooth the jagged black\n    outlines by skinning them with lines.\n\n    The marching cubes algorithm tests the corner of each cube (or\n    voxel) in the scalar field as being either above or below a given\n    threshold.  This yields a collection of boxes with classified\n    corners.  Since there are eight corners with one of two states,\n    there are 256 different possible combinations for each cube.\n    Then, for each cube, you replace the cube with a surface that\n    meets the classification of the cube.  For example, the following\n    are some 2D examples showing the cubes and their associated\n    surface.\n\n        - ----- +       - ----- -       - ----- +       - ----- +\n        |:::&#x27;   |       |:::::::|       |::::   |       |   &#x27;:::|\n        |:&#x27;     |       |:::::::|       |::::   |       |.    &#x27;:|\n        |       |       |       |       |::::   |       |::.    |\n        + ----- +       + ----- +       - ----- +       + ----- -\n\n    The result of the marching cubes algorithm is a smooth surface\n    that approximates the isosurface that is constant along a given\n    threshold. This is useful for displaying a volume of oil in a\n    geological volume, for example.\n\n    References:\n    &quot;Marching Cubes: A High Resolution 3D Surface  Construction Algorithm&quot;,\n    William E. Lorensen and Harvey E. Cline,\n    Computer Graphics (Proceedings of  SIGGRAPH &#x27;87), Vol. 21, No. 4, pp. 163-169.\n\n    [Watt:Animation] pp. 302-305 and 313-321\n    [Schroeder]</code></pre>')