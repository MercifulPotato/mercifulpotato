Item(by='013a', descendants=None, kids=None, score=None, time=1604768203, title=None, item_type='comment', url=None, parent=25015797, text='We have a `user` GraphQL type. It has 200+ fields and resolvers into other data. Fortunately, clients don&#x27;t need to pull everything.<p>Well, within one of our frontend apps, someone wrote a &quot;GetUser&quot; query fragment, wrapped it in a react hook to make it easy to use, and now anytime anyone anywhere wants to get a user, even with one field, they&#x27;re getting 100+ fields they don&#x27;t want. Anytime someone needs a new field on a user, they don&#x27;t create a new query; they just add the field to that &quot;GetUser&quot; query.<p>Now, I&#x27;ve told several GraphQL advocates that setup (in our local community and online), and unfailingly they balk at it. Well, you&#x27;re doing GraphQL wrong, everyone makes mistakes, you should be more selective, etc etc etc. I think that&#x27;s fair; being more specific sounds like a good pattern.<p>Except, we are not certain the performance wouldn&#x27;t suffer should we move everything to more selective queries. The issue is caching. If you have ten queries each requesting one field, the cache can&#x27;t saturate until after ten network requests. But, one mega query, and now the remaining nine queries can just pull from the cache. Sure, the mega query takes longer than one mini-query, but its not longer than ten mini-queries.<p>I only outline this to say: GraphQL is not a magic bullet. Every single thing you can do which would ruin a REST API is also possible in GraphQL. REST API responses naturally evolve into god objects. GraphQL APIs solve the god object issue server-side by saying &quot;god objects are fine&quot;, then push the responsibility of not abusing it onto the client (and it should be obvious, the client is the worst place to solve almost every problem, but that&#x27;s another topic).<p>GraphQL is easier and better for some things, far harder for other things. At the end of the day, its no worse than REST. I don&#x27;t recommend it, but that&#x27;s only just because its new; unless a new technology offers some very easy to express, tactile benefits for your business, just wait for it to mature. When you get down to it, GraphQL&#x27;s benefits are definitely not tactile, but they&#x27;re still there, and I think over time it will evolve into something very interesting.')