Item(by='ParadigmComplex', descendants=None, kids=[25993333], score=None, time=1612209415, title=None, item_type='comment', url=None, parent=25992439, text='I really do wish I could help, but I don&#x27;t know how to reconcile what I&#x27;m reading as a mutually exclusive desire.  If I&#x27;m interpreting you correctly, it sounds like you recognize what you&#x27;re after requires complexity, and that Bedrock appears to be a potential solution because it offers the requisite level of complexity, but you don&#x27;t want to use Bedrock because of its complexity.  I don&#x27;t think anything can be complex enough to meet your needs, while also not being complex enough to meet your needs.<p>&gt; One thing is managing all the &#x2F;bin links and taking care of all the directory mappings that are needed. Say env-A calls gcc which is installed in env-B: First, env-A needs a wrapper for all gcc packaged binaries - and those wrappers need to ensure the current directory stays the current directory, &#x2F;bin and &#x2F;lib become merges of env-A&#x2F;env-B, etc. It gets hairy and I&#x27;m not sure what&#x27;s even needed - I haven&#x27;t done something this complex.<p>Early Bedrock releases, circa 0.1, had a utility that walked through the $PATH for binaries for each environment and generated wrapper scripts for binaries which cross the environment boundaries.  It dumped these scripts in the $PATH after the environment&#x27;s native binaries would be picked up, if they exist.  While I don&#x27;t remember if I ever did it, the re-running the utility could be automated with either package manager hooks or an inotify-based daemon.  The main problem with this workflow was the time to wait for the utility to re-run whenever the collection of wrappers was problematically out of date.  Things like having Arch&#x27;s bash run `apt install htop &amp;&amp; htop` wouldn&#x27;t work due to the utility&#x27;s runtime delay.<p>Code is generally easier to write than read.  If your complexity concerns would be alleviated by having written something yourself - so that you know you understand it - you could try to mimic this approach.<p>&gt; I think I read bedrock has fuse for managing links which seems like the level of complexity that&#x27;s needed.<p>Yes, Bedrock has a FUSE filesystem which does the equivalent of generating the bash wrappers for binaries on-the-fly.  It also handles translations needed for other resources; things like altering the `Exec=` lines in `.desktop` files for application menus.  Other files it just forwards unchanged, like man pages.  A long term goal is for it to support translating service manager configurations, so that one distro&#x27;s init can run another&#x27;s services without any manual intervention needed.<p>&gt; My ideal setup is a base system which is fairly minimal, but handles boot, init and kernels for sure. And then isolated packages on top (docker, flatpak, nix, homebrew, distro-chroots) which do integrate with each other when needed.<p>While I don&#x27;t intend to push you to Bedrock - I fully agree it&#x27;s more complex than a traditional distro and at this point you&#x27;ve well established the fact you find that off-putting - this description does sound a lot like Bedrock to my ears.  The only differences I see are (1) Bedrock&#x27;s optional ability to let those &quot;on top&quot; &quot;packages&quot; provide the bootloader, init, and kernel and (2) the term &quot;distro-chroots&quot; instead of Bedrock&#x27;s term &quot;strata.&quot;<p>-----<p>When the next major release of Bedrock, 0.8, is released; you could certainly try out the official container-like solution for it and see if that meets your needs.  This should be adequately segregated from the host environment while still internally integrated.  Absent that, my suspicion is that you&#x27;d be happier having written your own solution here.  This way you&#x27;d understand the capability-complexity trade offs and made exactly the balance you find best.  You also wouldn&#x27;t have to worry about the possibility there&#x27;s some corner of the system you don&#x27;t understand.  It might not be as capable as Bedrock - I&#x27;ve got quite a head start on this - but it sounds like you don&#x27;t need it to be.')