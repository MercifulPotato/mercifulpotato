Item(by='ragnese', descendants=None, kids=None, score=None, time=1611169135, title=None, item_type='comment', url=None, parent=25846693, text='For sure. I didn&#x27;t mean to imply that this isn&#x27;t a legitimately hard problem for language designers. Just being a smart ass.<p>I do think that checked and unchecked exceptions are the right way. The issues that people have with Java&#x27;s checked exceptions are mostly centered around Java&#x27;s particular implementation of the concept. The biggest failure of which, IMO, is that you can&#x27;t write an interface that is <i>generic</i> over the exception type.<p>That&#x27;s the main reason, IMO, people don&#x27;t complain <i>quite</i> as much about Rust&#x27;s Result&lt;T, E&gt;, which is very much like a checked exception mechanism in spirit. The only problem with the Rust approach is that you have an extra if-statement on every single call to a fallible function, to unwrap the success&#x2F;failure. If it used exceptions, the happy paths would (sometimes) be more optimized, if I understand correctly.<p>But some things just can&#x27;t be fixed at the language level. You have to craft good error types and messages. You have to think through your happy paths as well as your sad paths. I like when languages force you to think about failure. I don&#x27;t like when languages only have unchecked exceptions for all kinds of failures.')