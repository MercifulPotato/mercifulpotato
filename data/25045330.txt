Item(by='KMag', descendants=None, kids=[25045504], score=None, time=1605012230, title=None, item_type='comment', url=None, parent=25045107, text='I wish there were a better bridge from spreadsheets to full-blown applications, though.  I imagine some kind of tool where you have your prototype spreadsheet and click &quot;Export to application&quot;, and a wizard walks you through naming your columns, which then get exported as named arrays&#x2F;matrices in a declarative&#x2F;functional dataflow language.  You name your formulas, which become named functions.  You mark some of the cells as inputs and others as outputs, which then kicks you over to a GUI wizard for laying out the end-user UI.  Cells that aren&#x27;t formulas, inputs, or outputs become named constants in your program.  Maybe there&#x27;s JSON REST, Protobuf gRPC, and Bloomberg market data API integration for inputs and outputs.<p>I&#x27;ve spent the past 10 years maintaining and improving a finance-centric lazily-evaluated dataflow language with integrated distributed NoSQL database for a Fortune 500 financial services company.  My understanding is that most of our competitors use Excel where we use our language&#x2F;database.  Some of our competitors have hired away some of our developers to explicitly write more modern clones of our system.  One competitor&#x27;s clone uses Python with function decorators that inspect the function&#x27;s AST and transform it into a reactive dataflow language, though I imagine it&#x27;s very frustrating to write something that looks like Python with very non-Pythonic evaluation semantics.  I think starting with something like Haskell or Prolog would be less jarring.<p>My wife does finance&#x2F;accounting for another large multinational, and I see the appeal and power of both Excel and our system.  I wish there were some easier way to migrate from spreadsheets to more scalable and maintainable systems.  (And, I suppose, there&#x27;s some utility in bidirectional migration.)')