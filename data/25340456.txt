Item(by='chubot', descendants=None, kids=None, score=None, time=1607391032, title=None, item_type='comment', url=None, parent=25338983, text='I just ported the continuous build for <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;</a> to sr.ht for this reason:<p><a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2020&#x2F;11&#x2F;fixes-and-updates.html#buildssrht-and-toil" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2020&#x2F;11&#x2F;fixes-and-updates.html#...</a><p>A contributor added .travis.yml about 3 years ago, before I had ever used it.  But I&#x27;ve been around the block enough to know that getting stuff for free is temporary.  (And to be fair, I did like Travis CI free service a lot better than I thought I would.)<p>So when I needed to enhance the continuous build back in January, I did it with a PORTABLE SHELL SCRIPT, NOT with yaml.  Both Travis CI and sr.ht provide Linux VMs, which are easily operated with a shell script.<p>The script called &quot;Toil&quot; does the following:<p>1. Configures which steps are run in which build tasks (both Travis CI and sr.ht can run multiple tasks in parallel for each commit)<p>2. Logs each step, times it, summarizes failure&#x2F;success<p>3. Archives&#x2F;compresses the logs<p>3. Publishes the result to my own domain, which is A LOT FASTER than the Travis CI dashboard.  (sr.ht is very fast too; it has a great web design.)<p>This ended up working great, so I have multiple CI services running the same jobs, and publishing to the same place: <a href="http:&#x2F;&#x2F;travis-ci.oilshell.org&#x2F;" rel="nofollow">http:&#x2F;&#x2F;travis-ci.oilshell.org&#x2F;</a><p>(I plan to create srht.oilshell.org for security reasons; it isn&#x27;t ideal that both services have a key to publish to the same domain.)<p>----<p>I think this is the future of the Oil project: shell scripts to enable portability across clouds.  If you want to be fancy, it&#x27;s a <i>distributed</i> or <i>decentralized</i> shell.<p>This is natural because shell already coordinates processes on a <i>single</i> machine.<p>- A distributed shell coordinates processes across multiple machines (under the same domain of trust)<p>- A decentralized one does so across domains of trust (across clouds)<p>-----<p>Really great work in this direction is gg:<p><a href="https:&#x2F;&#x2F;buttondown.email&#x2F;nelhage&#x2F;archive&#x2F;papers-i-love-gg&#x2F;" rel="nofollow">https:&#x2F;&#x2F;buttondown.email&#x2F;nelhage&#x2F;archive&#x2F;papers-i-love-gg&#x2F;</a> comments: <a href="https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;virbxa&#x2F;papers_i_love_gg" rel="nofollow">https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;virbxa&#x2F;papers_i_love_gg</a><p>which is a tool that runs distributed programs across multiple FaaS providers like Amazon Lambda, Google Cloud Functions, etc.<p><a href="https:&#x2F;&#x2F;github.com&#x2F;StanfordSNR&#x2F;gg" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;StanfordSNR&#x2F;gg</a><p>My &quot;toil&quot; script is a lot more basic, but an analogous idea.  I would like to create a slightly tighter but improved abstraction that runs on multiple cloud services.  Notes on gg here:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;oilshell&#x2F;oil&#x2F;wiki&#x2F;Distributed-Shell" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;oilshell&#x2F;oil&#x2F;wiki&#x2F;Distributed-Shell</a><p>If anyone wants to help, get in touch!  If you are pissed off about Travis then you might want this :)  I think these kinds of multi-cloud setups are inevitable given the incentives and resources of each party, and they already exist (probably in a pretty ugly&#x2F;fragile form).')