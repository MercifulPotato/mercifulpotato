Item(by='eyelidlessness', descendants=None, kids=[25275247], score=None, time=1606868698, title=None, item_type='comment', url=None, parent=25261254, text='At my last job we had... very difficult situations caused by TZ misunderstandings and mishandling (wish I could say more but we resolved them!). One of the hardest things for many on my team to grasp was that TZs of the same offset weren’t interchangeable. I spent just a little time to shed my built in “do it right” mnemonics and just took a dive into the time regulation history of one of our customers’ geographic centers and contrasted it with the regulation history of one that happened to line up. I also pointed out legislation in my own locale (WA state) which has passed recently and, pending federal approval, will eliminate <i>standard time</i> (an idea I’ve wanted to pursue for years and I’m delighted made its way through our legislature). That exploded some brains.<p>This stuff isn’t simple y’all. “Just use UTC” is a good half assed approach but it can be lossy for many common operations without even considering use cases (an example is storing appointment times where the appointment is in another TZ and you expect the user to physically attend). It can be absolutely bonkers if you have specific user stories that require both standardized (UTC) time and locale adjustments but your user story doesn’t capture that (an example is any kind of regulation that goes into effect where two regulators have existing time rules that can become inconsistent, including but not limited to TZ changes or observation of leap seconds).<p>There’s been a bunch of words and brainpower spent saying all of this is too complex and we should just discard locale specific time rules entirely. But unfortunately there’s a huge psychological toll that representation of time can take (people literally get injured and die as well), not to mention legal implications that predate any global kind of time system unification efforts.<p>Time is (currently fundamentally) a necessary complexity that anyone making software can’t just dismiss without harmful consequences and careful consideration.')