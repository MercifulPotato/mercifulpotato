Item(by='dwohnitmok', descendants=None, kids=[25856976, 25858003, 25856282, 25856338], score=None, time=1611210848, title=None, item_type='comment', url=None, parent=25856034, text='Typescript has all sorts of type-level computation goodies that Haskell doesn&#x27;t have (unless you turn on insane amounts of GHC extensions).<p>Stuff like mapped types, keyOf, typeOf, ReturnType, literal types, conditional types etc. all combine to give you a certain amount of dependent types in Typescript but also a very rich way of doing type level computations (this is how e.g. in Typescript we can have type signatures that capture all sorts of very dynamic Javascript function signatures).<p>On top of this Typescript also has a strong structural type system augmented by union types and intersection types. You can fairly easily emulate a nominal type system like what Haskell has on top of this system, especially with Typescript&#x27;s string literal types, but it&#x27;s quite difficult to go the other way.<p>The only big thing I can think of that both Haskell and Scala have that Typescript doesn&#x27;t is higher-kinded types.<p>I also want to strongly caution that I don&#x27;t think a more advanced type system is necessarily a better type system! E.g. I&#x27;m not convinced that Typescript really needs HKTs.<p>Likewise I have previously programmed quite happily in Elm despite its paucity of type-level features in comparison to Typescript.')