Item(by='lhorie', descendants=None, kids=None, score=None, time=1602953616, title=None, item_type='comment', url=None, parent=24811053, text='&gt; not using if-statements gets you closer to the code-as-data concept, which opens the door for unique capabilities like modifying the code as it is being executed<p>This is actually one of the things that makes code _less_ readable, since the order of statements in source code no longer mirror the actual behavior at runtime.<p>IMHO, the value of the exercise is to decrease the surface area of a karnaugh map[1], since generally speaking lookup tables tend to be simpler than large multi-conditional expressions, and thus, less prone to bugs. But once you can express your conditions in terms of keys to a lookup table, then a switch statement is arguably more readable than a map since it&#x27;s no longer possible to mutate the realm of possible branches at distance:<p><pre><code>    function foo(bar) {\n      switch (bar) {\n        case &#x27;a&#x27;: return baz();\n        case &#x27;b&#x27;: return qux();\n      }\n    }\n    &#x2F;&#x2F; vs\n    const options = {a: baz, b: qux};\n    function foo(bar) {\n      return options[bar]();\n    }\n    &#x2F;&#x2F; somewhere else, three months later, by someone else\n    if (hack) options.lol = lol;\n</code></pre>\n[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Karnaugh_map" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Karnaugh_map</a>')