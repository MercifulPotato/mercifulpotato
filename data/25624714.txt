Item(by='alerighi', descendants=None, kids=[25625031, 25624781, 25624899, 25625996, 25626762, 25624892, 25625949], score=None, time=1609704192, title=None, item_type='comment', url=None, parent=25624471, text='Well you are saying that even in C you can use the restrict keyword to tell the compiler that 2 memory locations can overlap. Of course is in the hand of the programmer to tell the compiler to do so.<p>I don&#x27;t think there is a fair comparison between Rust and C: C is just an higher level assembler, if the programmer knows what he&#x27;s doing he can use the hardware 100% of its potential. That is the reason why C is still used in all the embedded applications where you have ridiculous low power microcontrollers and you must squeeze out the best performance.<p>That is the difference between C and Rust to me: for each fast Rust program you are guaranteed that you can write an equivalent performant program in C (or assembly). Worst case scenario you use inline assembly in C and you get that.<p>Thus the contrary cannot be true for Rust: if I give you a heavily optimized C program not always you can produce an equivalent version in Rust.<p>Also not always these optimizations are what you want. In C you can choose the level of optimizations, and most of the time, at least on the program that I write, I choose a low level of optimization. The reason is that a lot of time performance is not the only thing that matters, but it maybe matters most the stability of the code (and a code compiler with optimizations is more likely to contain bugs) or the ability to debug (and thus the readability of the assembly output of the compiler).<p>Rust gives out an horrible assembly code, that is impossible to debug, or to check for correctness. You just have to hope that the compiler doesn&#x27;t contains bugs. For the same reason Rust is the ideal language to write viruses, since it&#x27;s difficult to reverse engineer.')