Item(by='lmm', descendants=None, kids=None, score=None, time=1604566704, title=None, item_type='comment', url=None, parent=24979129, text='&gt; Dealing with singular values can be very useful, but not everything is a value. Some things are fundamentally “non-values” e.g. instructions&#x2F;control-flow&#x2F;declarations.<p>If there are important things in your language that aren&#x27;t values, that&#x27;s a problem in your language. You really don&#x27;t need any non-values; just look at, say, Haskell.<p>&gt; As I have described above, both the OOP and OS both share similarities:<p>&gt; Traditional-OOP: A (linear) value hierarchy of behaviour. The values act as agents.<p>&gt; Ownership Semantics: A (linear) value hierarchy of responsibility. Agents are responsible for values.<p>This is just bollocks once you actually look at the details of it. An inheritance hierarchy is fixed once and for all at compile time, and can&#x27;t ever change; either there&#x27;s no way to change which class a given class inherits from at all, or at best there&#x27;s some uncontrolled dark magic you can do. Whereas a defining characteristic of ownership semantics is that ownership can be safely passed from one owner to another in a controlled way.')