Item(by='bborud', descendants=None, kids=None, score=None, time=1602581138, title=None, item_type='comment', url=None, parent=24762980, text='Well, when will it be mature and what will it take to get there?<p>My first experience with serverless architecture was back in 2007 or so when trying to port Google News to App Engine.  That was a thoroughly painful experience, and things haven&#x27;t exactly gotten much easier since.  If you go back in time a decade, Google&#x27;s strategy for selling compute capacity was App Engine.  Amazon went the EC2 route.  Reality suggests AWS made the better choice.<p>I can understand the superficial notion that having idling virtual machines is inefficient (because it is).  But this reminds me a bit of tricks we did to increase disk throughput in systems with lots of SCSI disks back in the day.  Our observation was that if we could keep the operation queues on every controller full as much of the time as possible, we&#x27;d get performance gains when controllers were given some leeway to re-order operations, resulting in slightly better throughput.  Overall you got higher throughput, and thus higher efficiency, but from the perspective of each process in the system, the response was sluggish and unpredictable.  Meaning that if you were to try to do any online transactions, it would perform very poorly.<p>For a solution to be desirable it has to be matched with a problem that needs solving.<p>As the article points out, there are some scenarios where serverless architectures might be a good design paradigm.  But extrapolating this to the assumption that this paradigm is a universal solution requires not only a leap of faith, but it also requires us to ignore observed reality.<p>So you owe me some homework.  Tell me what needs to happen for serverless architectures to reach &quot;maturity&quot;.')