Item(by='masklinn', descendants=None, kids=None, score=None, time=1602442782, title=None, item_type='comment', url=None, parent=24748102, text='&gt; First, bit field descriptors is a huge pain - where, in C, you would define an enum for the task, there isn&#x27;t a real equal in vanilla Rust<p>“A litany of constants” is exactly what your c enum is though.<p>And you can define a &quot;degenerate&quot; Rust enum with explicit discriminant values:<p><pre><code>    enum Foo {\n        A = 1,\n        B = 2,\n        C = 4\n    }\n</code></pre>\nThey are cast-able to integrals too:<p><pre><code>    println!(&quot;{}&quot;, Foo::C as usize); &#x2F;&#x2F; prints &quot;4&quot;\n</code></pre>\nDoesn’t work so well for flags however.<p>&gt; Second, the over-reliance on nightly is a tough sell for - having inline asm gated makes it very hard.<p>The alternative would be to simply not make the feature available at all until it is done and ready, with even higher risk (as it would have been exercised even less).<p>As is, if the feature is fine for you as-is you can use it, and if you can&#x27;t or don&#x27;t want to use nightly you can go and assist its shepherding to stable (<a href="https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;72016" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;72016</a>)<p>&gt; while format is great, it&#x27;s also very heavyweight. Not having (AFAIK) variadic arguments is hard, and there isn&#x27;t really an equal to printf.<p>There are no safe Rust-level variadics, but Rust can call C variadic functions, and under RFC 2137 (not stable yet I think) define them as well.')