Item(by='dragontamer', descendants=None, kids=[25562638], score=None, time=1608867061, title=None, item_type='comment', url=None, parent=25533212, text='&gt; Except there is no such thing (not in the sense you need it)<p>???<p>Okay, lets choose the simplest hash function of them all: a 1-bit XOR (resulting in a 1-bit &quot;hash&quot;).<p>Lets say I flip the 75% biased coin 100 times, count heads as 1 and tails as 0. I XOR all the results together. What&#x27;s the probability of XOR(all) == 1, and what&#x27;s the probability that XOR(all) == 0?<p>You&#x27;ll find that its quite close to 50&#x2F;50, which is the limit to the amount of entropy you can pull from a 1-bit hash function.<p>---------<p>Now lets see for smaller values:<p>1 flip: 75% chance of 1, 25% of 0. Which is the limit of information so far.<p>2 flips: ... you know what? Imma write a program and get back to ya a bit later. I probably will edit my post.<p>------<p>2 flips: 62% chance of Parity0\n3 flips: 43% chance of Parity0\n4 flips: 53% chance of Parity0<p>Etc. etc. etc.<p>By 16 flips, its 49.9985% chance of Parity0, pretty close to unbiased. It gets pretty hard to distinguish this coin from an unbiased one.<p>--------<p>I&#x27;m not sure if you need a cryptographic hash actually. Its just that cryptographic hashes are close enough to random that its easier to use.<p>Now I&#x27;m curious if a CRC32 would efficiently extract 16-bits of entropy from biased coins. CRC32 is clearly not a cryptographic hash, but its pretty good as an &quot;avalanche&quot; due to the nature of GF-arithmetic.')