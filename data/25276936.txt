Item(by='tomasreimers', descendants=None, kids=None, score=None, time=1606921454, title=None, item_type='comment', url=None, parent=25274271, text='I think the author is conflating how product-developers write code with the abstraction browsers should consume.<p>For example, the author talks about the benefits of HTML as allowing accessibility features and parsing by other tools: Agreed that this is important, but this is just as possible if developers wrote a single language which declaratively&#x2F;imperatively outputs a tree representation of the hierarchy they would like to display; in fact, there are even many other platforms that do this and maintain the accessibility benefits stated in the article, such as the view hierarchy on iOS or [blockskit](<a href="https:&#x2F;&#x2F;api.slack.com&#x2F;block-kit" rel="nofollow">https:&#x2F;&#x2F;api.slack.com&#x2F;block-kit</a>) in slack.<p>Most modern web frameworks (Tailwind &#x2F; Bootstrap &#x2F; React) blur the lines between structure&#x2F;style&#x2F;scripting aggressively - and today they kind of have to: is a modal a structure or a style thing? Why is responsive design stylistic only? Is it crazy that structure would change when you have less real estate? What if I need to compute some client-side-only value to show the webpage - should I block load? or put a placeholder and update later?<p>I agree that it&#x27;s important that the browser be able to have those abstractions so it can decide how to ultimately render the page to the user, but that&#x27;s not the question at hand. The question is whether the current languages are the best ways for developers to express those abstractions. And if developers are already choosing to hack it (by opting for frameworks which work in a way the current web wasn&#x27;t optimized for because they offer features such as code-locality, component reuse, and modern primitives), shouldn&#x27;t we optimize the standards to better match reality and offer users a more optimized experience?')