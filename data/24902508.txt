Item(by='bborud', descendants=None, kids=[24906148], score=None, time=1603753258, title=None, item_type='comment', url=None, parent=24889314, text='In order to have a meaningful discussion, let me expand on what I mean by &quot;boring&quot;.<p>To me, a boring language is one that is easy to learn, easy to read and which encourages somewhat homogenous code - through coding style and common idioms.  It has few surprises and few dark corners.<p>If a language still has major aspects that practitioners struggle with after 2-3 years, it isn&#x27;t &quot;boring&quot;.  If you have to expect every codebase in the same language to have different coding standards, it isn&#x27;t boring.<p>A boring language is one where what you&#x27;ve learnt on one project has a high probability of being usable in a completely different company or on a project that does something entirely different from what you&#x27;ve done before.  It is a language that disappears because you spend more time talking about how to solve problems and less time talking about how to express those solutions in a language.<p>Now I can understand that some people like the excitement of exploring new languages.  And you should.  On average you should try to learn at least one new language each year.  Even if it is on your own time if your employer is stingy.<p>However, asking your employer to let you use some language on a project because you find it &quot;exciting&quot; is a big ask.  Projects tend to have deadlines, they have quality targets, many projects are built by teams, so entire teams have to be conversant in the language.  What if you need to scale up with more developers? How easy is it to recruit programmers in a given language and at a given level of proficiency?  How about maintenance after you have left the company or grown tired of whatever language you were once very excited about?  And what happens when a language goes out of fashion but the company running the code still depends on it?<p>People with responsibilities are not scared of talent.  Rather the opposite.  They depend on talent.<p>They may, however, be somewhat scared of &quot;specialists&quot; (in the sense of programmers who will insist on niche languages or niche technologies) because if you pay someone to write code, you don&#x27;t want to have to search for &quot;specialists&quot; to maintain it or limit the size of your recruiting pool.  You have an investment to manage.<p>As for mediocrity:  I think you would need to back that argument up with something.  Do you really think the choice of language is what makes a programmer brilliant or mediocre?  Then why doesn&#x27;t reality agree with that view? If that were true then for every Donald Knuth, Fabrice Bellard, Jeff Dean and John Carmack there should be lots of even better programmers that do all their work in &quot;exciting&quot; languages.  Where are they?  They should be far easier to enumerate than the people who use &quot;boring&quot; languages?<p>If you think caring about the long term value of code is &quot;boring&quot;: try to start your own company and bet your own money. If you are that convinced of how &quot;exciting&quot; languages lead to brilliance it shouldn&#x27;t be a tough choice to make.')