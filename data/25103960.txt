Item(by='dnr', descendants=None, kids=None, score=None, time=1605468489, title=None, item_type='comment', url=None, parent=25102092, text='Wow, that video feels pretty disingenuous.<p>- The whole premise assumes that you need to make a new account for each project you contribute to, because they&#x27;re hosted on individual gitea or similar instances. Some are, but let&#x27;s be honest, the vast majority of projects are currently hosted on a very small set of services (github, gitlab, one or two others), and most developers will already have accounts on them.<p>(I get that part of the goal is to eliminate dependency on large code hosting services, and I agree with that. But we should do that with federation standards so people can use individual gitea&#x2F;whatever instances without making accounts on all of them, not by traveling back in time 20 years.)<p>- He spends a lot of time complaining about silly password requirements. The complaint is valid but not relevant to the comparison.<p>- The graylisting thing is an own-goal, sorry.<p>- He complains that forking the repo and creating the PR require context-switching from the cli to the web and back, but there are cli tools that can fork repos and create PRs for you on github, gitlab, etc. to fix that.<p>- Let&#x27;s allow that submitting a single patch, starting from outside the project, is faster for the contributor with an email workflow. But that&#x27;s a tiny part of the process. There&#x27;s a lot of things that happen after that patch: the project maintainers have to triage it, they have to review it, make comments on specific lines of the diff, or sometimes on line that aren&#x27;t part of the diff, and then indicate that the submitter should make changes and try again. The submitter then has to make changes and submit it again. The reviewers, at that point, will probably want to see the diff between the first and second revision.<p>Triage: The github&#x2F;gitlab UI for this is not great but acceptable. Viewing a mailing list in my email client mixes discussion and patches. I can&#x27;t mark threads with labels or priorities. I can&#x27;t assign a particular review to a particular person and have it show up in their todo list.<p>Review: Sure, you can reply to a patch posted on a list and intersperse comments, but web uis for code review are pretty decent these days. You can easily see much more of the context when required, your comments and replies on specific lines get threaded even across revisions of the code, each comment thread can have an individual &quot;done&quot; indicator, etc. The review as a whole has a global status of whose turn it is to take an action next. All of these seem much harder by email; you end up just using a lot of conventions.<p>You can use a web-based review tool with email-based patches, of course, but... why bother? If you&#x27;re doing web-based review, just do the whole workflow there and it&#x27;ll be a lot simpler and easier to understand.<p>Resubmit: Resubmitting a patch set by email posts brand new diffs. How do I see the differences between different versions of the patch? Sure, I can rig up a bunch of scripts to do this, but is it integrated with the review tool, etc.?<p>- What happens when I become a maintainer? I have to sign up for a new mailing list. And that means I have to go in my email client settings, make a new folder, make a new filter rule to direct email from that list into that folder. That&#x27;s a huge amount of friction that doesn&#x27;t exist in the web-based workflows.')