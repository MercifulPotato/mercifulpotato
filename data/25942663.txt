Item(by='ephaeton', descendants=None, kids=[25947223], score=None, time=1611845845, title=None, item_type='comment', url=None, parent=25939122, text='So let me get this straight: A programming environment to program programming environments in. What would be the startup cost of using this be? Hmm. Comprehending and navigating it, eh? So now, when I&#x27;m, say, doing embedded C&#x2F;++ programming, I have to add yet another language to the stack, yet another toolkit, yet another environment _I have to build first_ with my preferences -- so that _another_ person getting into the project can not only use my environments, my toolkits, my code and comprehend those - but ALSO my hand built specialized for my needs programming environment? And this is supposed to _improve_ the situation?<p>OK, I only skimmed the site, but mostly because above question keeps nagging me and the mind boggles.<p>IOW, gtoolkit is today&#x27;s sexy emacs (or, it claims to be what emacs claims&#x2F;ed to be): Here&#x27;s a toolkit for writing&#x2F;extending&#x2F;MOLDING your tool. Or, acknowledging it&#x27;s smalltalk-heritaged, it&#x27;s yet-another-smalltalk-IDE.<p>It&#x27;s not like the &quot;extra work&quot; of making your product explorable disappears with glamorous toolkit, the silver bullet. gtoolkit just offers a streamlined set of APIs for you to (comprehend, and navigate, and then) use to make your product explorable, doesn&#x27;t it. So we add another layer of abstraction, work, and potential for error? What was that with complexity and abstraction? Hmm.')