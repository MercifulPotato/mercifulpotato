Item(by='marta_weber', descendants=None, kids=[25563624, 25563685], score=None, time=1609190824, title=None, item_type='comment', url=None, parent=25558413, text='It&#x27;s easy if the game engine you are using would display an in-memory model with deterministic algorithms. I have only briefly worked in the game industry and it&#x27;s been more than enough for me :D. There were like 4-5 people with &quot;10 years+&quot; experience working on a Candy Crush clone. It was literally riddled with bugs and they used Unity&#x27;s physics engine to make the stones fall (I mean, it doesn&#x27;t get any more ridiculous than this).<p>So I came in, throw it all away and built within 2 days a deterministic, fully tested and testable stone engine that would implement all the effects management wanted to see, some of which would have been close to impossible to implement with Unity&#x27;s physics engine. The idea is basically to use the smallest time unit you want to support, and then base all algorithms on that. You don&#x27;t work on milli-seconds, because that is for the engine to fill out. You work on seconds, for CandyCrush at least. Each time step is basically a second. The time in-between is filled out by potentially non-deteministic animations and particle effects and whatnot. But every second, the whole scenery will synchronize with the deterministic engine that drives it all.<p>While I didn&#x27;t have the chance to try this on shooters or MMORPGs, I think especially for MMORPGs, this would be a perfect fit. It solves sooo many problems, I would probably need a day listing all the benefits. Are there drawbacks? Probably, I can&#x27;t think of one right now, except that it goes against anything normal game developers believe in.<p>I think at some point, the gaming industry forked away from solid software engineering practises.')