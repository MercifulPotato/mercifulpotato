Item(by='jude-', descendants=None, kids=None, score=None, time=1612161506, title=None, item_type='comment', url=None, parent=25985787, text='&gt; We actually know of consensus protocols that require synchrony including between participants and clients that go up to 99% fault tolerance for both liveness and safety; in fact Lamport himself described one in his original paper (remember that it&#x27;s &quot;written messages&quot; and not &quot;oral messages&quot; in his vocab that&#x27;s the relevant category; these days public key cryptography is cheap and uncontroversial so there&#x27;s no need to care about the &quot;oral&quot; case)<p>The &quot;written messages&quot; protocol does not tell the whole story.  If you go back and re-read Lamport &#x27;82 [1], the assumptions that make the SM(m) algorithm (&quot;written messages&quot;) work <i>at all</i> also make it a practically useless result.  In particular, assumption A4(b) (top of page 391) requires that anyone can authenticate any general&#x27;s messages at all times.  How the generals are supposed to learn each other&#x27;s public keys _without_ an instance of SM(m) is not addressed, but presumably they would need to fall back to OM(m) (&quot;oral messages&quot;) to do so.  So if you take a BFT system as a whole, where you can&#x27;t assume the existence of a magical fool-proof way for generals to learn each other&#x27;s keys <i>a priori</i>, my original claim stands.<p>&gt; The original definition of consensus did not have a notion of passive clients needing to learn the result, so the &quot;active participants synchronous, passive clients asynchronous&quot; model common in blockchain land was not really analyzed well back then.<p>Prior literature doesn&#x27;t consider &quot;passive clients&quot; because they&#x27;re not protocol participants in the first place.  Clients do not participate in deciding agreement; otherwise they wouldn&#x27;t be called clients.<p>Last I checked this is very much still the case in blockchain-land.  Your wallet (client) does not do anything to help miners&#x2F;stakers determine the best chain tip or the next block, for example.<p>So, I&#x27;m not sure what you&#x27;re trying to say here?<p>&gt; It turns out that with a synchronous network, the passive client requirement is what brings safety and liveness down from 99% to 50%. And it also happens that the 50% fault tolerance protocols are less fragile in the case that the synchrony assumption breaks temporarily.<p>Unless you&#x27;re assuming the existence of the magic fool-proof public-key distribution mechanism required for SM(m) to work, you&#x27;re not going to get liveness unless you&#x27;re either (a) assuming nodes do <i>not</i> exhibit arbitrary failure modes, or (b) requiring at least 2&#x2F;3+e nodes are honest.<p>[1] <a href="https:&#x2F;&#x2F;people.eecs.berkeley.edu&#x2F;~luca&#x2F;cs174&#x2F;byzantine.pdf" rel="nofollow">https:&#x2F;&#x2F;people.eecs.berkeley.edu&#x2F;~luca&#x2F;cs174&#x2F;byzantine.pdf</a><p>EDIT: wrong date for Lamport')