Item(by='bird_monster', descendants=None, kids=[25428099], score=None, time=1608004912, title=None, item_type='comment', url=None, parent=25426233, text='Yep. I kinda also think that the dev that wrote the code shouldn&#x27;t be the dev that writes any of the tests, but that&#x27;s much more of a philosophically sound but in-practice poor idea that I think about sometimes. I think it has an array of benefits that go totally unrealized if a person writes both. Things like, if your code is too complex for another engineer to write tests for, it&#x27;s too complex for your team to maintain. If code standards aren&#x27;t consistent enough in your codebase that other engineers feel the need to refactor&#x2F;redo blocks of code in the name of style&#x2F;readability&#x2F;whatever, your codebase&#x27;s style isn&#x27;t automated well enough. Things like that. I just think it&#x27;s so much of a better strategy, unfortunately up front it seems like a big time sink for (at surface level) little game.<p>I also refuse to measure test coverage in my codebases. &quot;How frequently do bugs show up in production&quot; and &quot;how frequently are bugs fixed without adding tests&quot; are metrics I find valuable but are underrepresented in the testing space. If bugs don&#x27;t make it to prod very often, and when they do they are fixed, your testing strategy is probably sufficient. There&#x27;s no reason to write thousands of null checks and formatting validators if you don&#x27;t need to. Tests require as much or more maintenance as code. There&#x27;s no reason to write more of them than you need.')