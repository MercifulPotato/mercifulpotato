Item(by='yrro', descendants=None, kids=None, score=None, time=1601723732, title=None, item_type='comment', url=None, parent=24666824, text='It&#x27;s not a typo.<p>The conventional name of a native code library (C, C++, etc) in Debian is derived from the SONAME of the library it installs. So you can be pretty sure that libfoo.so.3 is shipped in a binary package libfoo3.<p>So what about the weird exceptions, like zlib1g?<p>Well the package name deviates from the standard in two ways.<p>Firstly, you&#x27;d think it should be called &#x27;libz1&#x27;. Given the age of zlib (the first entry in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;zlib1g&#x2F;changelog.Debian.gz dates back to September 1996!), I think that the naming of the binary package predates the adoption of the convention that would have resulted in it being named &#x27;libz1&#x27;.<p>Second, what is this &#x27;g&#x27; suffix? This dates back to the GLibc transition.<p>You see, a long time ago, Linux distributions used a fork of Glibc, known as &#x27;Linux libc&#x27;. See <a href="https:&#x2F;&#x2F;manpages.debian.org&#x2F;libc.7" rel="nofollow">https:&#x2F;&#x2F;manpages.debian.org&#x2F;libc.7</a> for details. Long story short, it was decided to abandon the fork and adopt the GNU C Library (Glibc).<p>For many end-user programs, a recompile was all that was needed to effect this transition. Before switching, the the binary package of such a program would depend on libc5; afterwards it would depend on libc6. Simple.<p>But many programs depend on shared libraries. In this case, the program could not be rebuilt against Glibc until all its dependend-upon libraries had also been rebuilt against Glibc. Effectively, libfoo-built-with-Glibc was an ABI change from libfoo-built-with-Linux-libc.<p>In order to prevent crashes and other malfunctions from linking libc.so.5 and libc.so.6 into the same program at runtime, the decision was made to rename the binary packages libfoo3 to libfoo3g (the g being short for Glibc). Once upstream bumped its SONAME to libfoo.so.4, libfoo3g would be replaced by libfoo4, which has always been linked against Glibc and so the &#x27;g&#x27; suffix could be dropped.<p>(Aside: I don&#x27;t know the reason why why SONAME of libraries was not changed at the same time, i.e. change from libfoo.so.3 to libfoo.so.3g... perhaps because co-ordinating that rename across all Linux distributions was too big a job for too small a gain?)<p>If you look at the dependencies for the zlib1g package, you will notice &#x27;Conflicts: zlib1 (&lt;= 1:1.0.4-7)&#x27;. This is there to prevent the zlib1g package being installed on the same system as a package &#x27;bar&#x27; which still depends on zlib1 (because &#x27;bar&#x27; hasn&#x27;t been rebuilt against glibc yet...)<p>If we refer back to the changelog.Debian file, we find...<p><pre><code>    zlib (1:1.0.4-7.1) unstable; urgency=low\n    \n      * Updated for libc6\n      * Compiled with -D_REENTRANT.\n      * Non mantainer release.\n    \n     -- Enrique Zanardi &lt;ezanardi@molec1.dfis.ull.es&gt;  Wed, 17 Sep 1997 01:28:05 +0100\n</code></pre>\nWhich tells us that 1:1.0.4-7.1 was the version where the binary package was renamed to zlib1g. Ok, the changelog message is a little terse, but the community was a lot smaller in those days and who could call themselves a serious user of Linux without being aware of the Glibc transition? ;)<p>Over the years, similar transitions have taken place. The &#x27;c102&#x27; transition occurred when GCC 3.2 broke the ABI for all C++ code. &#x27;libbar3&#x27; became &#x27;libbar3c102&#x27; when libbar was changed to being built with GCC 3.2, and the &#x27;c102&#x27; prefix was similarly dropped once libbar upstream bumped its SONAME to libbar.so.4 which was packages as &#x27;libbar4&#x27;. It looks like libfam0c102 is the sole remaining package with this naming convention in the archive, all others having dropped the prefix long ago. You can read about the GCC transition plan at <a href="https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel-announce&#x2F;2003&#x2F;01&#x2F;msg00002.html;" rel="nofollow">https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel-announce&#x2F;2003&#x2F;01&#x2F;msg00...</a> the Glibc transition occurred so long ago that I wasn&#x27;t able to find any similar documents explaining it (admittedly after only brief Google searches). Although <a href="https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-gcc&#x2F;2002&#x2F;08&#x2F;msg00091.html" rel="nofollow">https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-gcc&#x2F;2002&#x2F;08&#x2F;msg00091.html</a> (also about the c102 transition) refers to the Glibc transition:<p>&gt;  This is similar in spirit to the glibc transition adding `g&#x27; to the end of libraries.<p>TL;DR: the package is called zlib1g because it was called &#x27;zlib&#x27; before the standard Debian naming scheme for libraries was adopted; and because it was renamed to &#x27;zlib1g&#x27; when it was transitioned from building against Linux libc to Glibc, and since then it was remained ABI stable. If zlib upstream ever bump the SONAME to libz.so.2 then zlib1g will be replaced by libz2.<p>There are a couple of other packages in the archive which haven&#x27;t had a SONAME bump since the glibc transition: libcanna1g and libpam0g. Their changelogs confirm that they are named so due to the glibc transition.<p>(There&#x27;s one other package, libgjs0g that is a red herring. It looks like upstream broke ABI without bumping the SONAME for whatever reason, leaving it to distributions to pick up the pieces. Typical. The way this was solved in Debian was to rename the binary package from libgjs0 -&gt; libgjs0a -&gt; libgjs0b -&gt; ... -&gt; libgjs0e -&gt; libgjs0g and since then it&#x27;s remained stable.)')