Item(by='permille42', descendants=None, kids=None, score=None, time=1610766301, title=None, item_type='comment', url=None, parent=25793230, text='Q: If you use a cloud provider (GCP&#x2F;AWS&#x2F;Azure&#x2F;etc)\nA: I don&#x27;t use a cloud provider<p>Q: Describe how credentials are provisioned, managed, and stored.\nA: Credentials to what exactly? Since I don&#x27;t use a cloud provider all the data including credentials are safe and secure on the server hosting everything.<p>Q: If an attacker gained access to an individual developer’s cloud credentials\nA: The only developer is me. Anything besides what I trigger myself I would notice immediately as out of the ordinary.<p>Q: What actions could that attacker perform?\nA: Not much. Externally facing applications are containerized and have access only to the level of access to data that they should. They would not gain any control of the system<p>Q: How would you detect and respond to the breach?\nA: I&#x27;d notice activity in the logs which are monitored for unusual activity. I also check them manually myself besides the automatic monitoring rules.<p>Q: If you don’t use a cloud provider: why not?\nA: They are overpriced and I don&#x27;t trust them.<p>Q: Describe how staff authenticate to company services (e.g. servers, email, SaaS products), particularly highlighting your use of password managers, 2FA, and SSO.\nA: Passwords? What b.s. is that. Certs all the way.<p>Q: What development practices do you use to protect against the OWASP Top 10?<p>1. Injection. A: Only parameterized queries are used. Non-issue.<p>2. Broken auth. A: Only use reliable session&#x2F;auth stuffs and&#x2F;or look carefully at the details of how it works. Don&#x27;t use crap.<p>3. Sensitive data exposure. A: APIs only expose the data needed and all access is logged and monitored.<p>4. XML External Entities. A: I don&#x27;t use crappy XML parsers with such vulns.<p>5. Broken access control. A: All applications I run were written by myself and access levels only have access to just the needed data. That access level flows to all places data is accessed. Nothing is given access without an associated current valid session and auth level.<p>6. Security misconfiguration. A: System is hardened. Containers are used. Everything is kept up to date to the bleeding edge at all times. No legacy crap is used.<p>7. XSS. A: All access is in house. No external entities are loaded period. I trust no one. All entered data is carefully output in a way to prevent user entered data from having influence on code. Eg: No user data is trusted and everything is validated as being, essentially, plaintext.<p>8. Insecure deserialization: A: No outside entities are deserialized since I don&#x27;t accept any. Anything that could have been altered by a user, the parsers are all secure state machines which cannot possibly have any influence on the system.<p>9. Using Components with Known Vulnerabilities. A: I trust nothing, including libraries. I review the code of many many many things. Obviously cannot review everything but I at least choose libraries that are kept up to data and regularly worked on &#x2F; used by others. I am sure there are 0days present that aren&#x27;t public yet, but even if they were taken advantage of they wouldn&#x27;t get access to much.<p>10. Insufficient Logging &amp; Monitoring. A: All access and operations that affect data are logged. Read access is also logged and monitored to some extent.\n    Describe the steps a developer or operations person takes to push new code to production.\n    Have you had any security breaches in the last two years?\n        If yes: please explain the breach, and provide copies of any postmortem&#x2F;root cause analysis&#x2F;after-action reports.')