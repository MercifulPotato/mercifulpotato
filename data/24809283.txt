Item(by='bsdubernerd', descendants=None, kids=[24810190, 24809568, 24809668], score=None, time=1602935119, title=None, item_type='comment', url=None, parent=24809041, text='I used to work with C++ almost exclusively, but accepted to use more interactive languages for most of my work mostly for faster iteration. C++ is definitely not my main choice anymore, but still use it daily.<p>C++ has pretty much unmatched tooling due to the massive ecosystem. I have my own long list of gripes against it&#x27;s syntax and historical baggage, however it&#x27;s a language that doesn&#x27;t really impose a style&#x2F;idiom like several other modern&#x2F;newer languages do, making it vastly more applicable from anything from embedded to large-scale programs without restrictions. Modern C++ has smoothed a lot of the rough edges in terms of productivity, but it&#x27;s still an overly complex language that cannot shed any weight due to backward compatibility, and it&#x27;s a shame.<p>Contrarily to many other guys tough, I&#x27;d take a dash of C++ compared to &quot;simple&quot; C&#x2F;C99 any day, especially in embedded. C++ can be vastly simpler and more readable, while retaining 100% control over memory and layout. Most of the memory&#x2F;threading issues essentially disappear with very little fanfare, but few people talk about that.<p>I don&#x27;t want to detract against static checking though! But I feel like newer languages such as Rust are still too young and idealistic, and haven&#x27;t been beaten by implementation requirements or a system&#x27;s programming language yet where your silly requirement is somebody else&#x27;s essential feature. This is how it gets ugly, and this is where C++ has probably something to say.<p>I still like modern languages though. I like Rust, but won&#x27;t be able to use it effectively until they get rid of static compilation. I wish I had D&#x27;s metaprogramming over C++ templates any day, but the GC is a again non-starter. Nim has no static checking, but it should deserve much more consideration than it currently has: it&#x27;s much more pragmatic than Rust IMHO, and it&#x27;s also much easier to integrate into existing programs will less hassle.')