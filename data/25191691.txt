Item(by='dkersten', descendants=None, kids=None, score=None, time=1606164782, title=None, item_type='comment', url=None, parent=25187140, text='&gt; I realised that the code I found most readable were always in a pipeline, regardless of language<p>I&#x27;m in a similar boat, I find the pipeline-style code to be the most pleasant and use -&gt;, -&gt;&gt;, cond-&gt;, some-&gt; very heavily in my Clojure code and I actually spent a few months with Factor before I got into Clojure.<p>For large chunks of my code, I find the concatenative style an excellent fit, but the remaining parts where I have to juggle the stack ruins the experience for me. I <i>really</i> don&#x27;t want to <i>drop</i>, <i>dup</i>, <i>rot</i> or whatnot.<p>I&#x27;ve always wondered if there wasn&#x27;t some way of making a concatenative language that naturally didn&#x27;t require stack operations like that, but I haven&#x27;t tried too hard to figure it out (or check if anyone else has). I guess something that might work is to combine concatenative &quot;statements&quot; with something like let bindings and destructuring, so you can destructure your stack to extract the stuff you need, binding them to names to be used elsewhere.')