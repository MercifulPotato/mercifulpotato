Item(by='hnlmorg', descendants=None, kids=None, score=None, time=1611570042, title=None, item_type='comment', url=None, parent=25873013, text='&gt; <i>Rust is not just trendy. It is inherently more powerful when it comes to express and check invariants.</i><p>It&#x27;s also massively complicated and the language is still in flux as it hasn&#x27;t yet matured. Which is fine for hobby web dev projects but NOT what you want to base the long term future of any business on.<p>&gt; <i>I had thought that after decades of buggy dynamic code, people have come around to value that.</i><p>Get a grip. Dynamic code doesn&#x27;t have to be any more buggy if you have the right developers and the right tool chains. Rust currently benefits from being a relatively niche language but once it&#x27;s mainstream you can expect similar buggy code as less competent developers are forced into using it. Rust might have a fantastic compiler at catching specific bug types, but lets remember that it&#x27;s not going to save you against any or all bugs. Claiming otherwise is, at best, massively ignorant.<p>But even assuming your biased opinion was fact, it&#x27;s still not as if Rust is the only language out there that covers the non-dynamic market space. In fact Rust is one of the least mature languages in that area and particularly when it comes to web development. This isn&#x27;t a subjective point either, try spending a few years building and supporting applications in other languages and compare that to Rust. I have done just that and while Rust will get there, it isn&#x27;t there yet.<p>&gt; <i>Comparing go and rust, I see two statically compiled languages with many different and interesting features</i><p>Yes, one has been built with web development in mind and has been mature in that space for a decade. The other is Rust.<p>&gt; <i>But one has a strong type system and the other has a trivial one. I&#x27;d choose the strong one for any new project that I expect to maintain for years to come.</i><p>Well then you&#x27;d be choosing Rust for a stupid reason. If you&#x27;re worried about maintaining something for years to come then you want API stability above all else. Rust cannot yet offer you that. C#, Java and Go are all better choices. Heck, even LISP, Haskell, etc would be better choices than current Rust.<p>Don&#x27;t get me wrong, I have a lot of respect for Rust designers and the language itself. But some of the fanboyism demonstrated in your comments are ridiculous. Rust isn&#x27;t ready for the kind of web development you&#x27;re advocating for it. It also isn&#x27;t going to magically save you from every known bug (and actually Go&#x27;s compiler warning are pretty damn good too by the way). I&#x27;m sure one day Rust will be a solid option but not today.')