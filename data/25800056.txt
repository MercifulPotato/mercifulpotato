Item(by='ldiracdelta', descendants=None, kids=[25800082], score=None, time=1610771494, title=None, item_type='comment', url=None, parent=25798008, text='My experience parallels the writer&#x27;s... I did a foray over the holidays to try to make some base-layer and generic on top of rocket then actix-web then tide.  I can get any of their toy examples to work, but building up a complex system with mixins to genericize some boiler plate code wasn&#x27;t possible for my tiny brain.  I may be hide-bound, but the lack of inheritance is a pain. I know I&#x27;m not right, but OO inheritance solves some problems well.<p>In the django ecosystem, I can take an existing component with a vast API surface, inherit from it, tweak a tiny part of it and then  put it back in the system and I&#x27;m off to the races.  With rust, you have to re-implement the entire API surface to experiment with a tweak or go upstream and modify the original source, which isn&#x27;t a great long-term solution -- maintaining patches.  The diesel ORM is great, but it seems that each api returns a different type and doing a builder pattern generically across different functions and getting the types correct is like being in the worst C++ templating hell.<p>I love the speed of execution, the type checking, the borrow checker, but the coding friction is real.  I&#x27;d love to see more complex examples in all the rust web frameworks that do real work with good function partitioning in addition to the simple examples.')