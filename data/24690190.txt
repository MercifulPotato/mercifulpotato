Item(by='wiremine', descendants=None, kids=None, score=None, time=1601920538, title=None, item_type='comment', url=None, parent=24689230, text='&gt; Immutability is a very useful tool since you have have any kind of dependency -- direct, indirect, implied, etc) -- and there&#x27;s no worry. But you still need a mechanism to manage mutating data.<p>I agree. For me it feels like immutable data is a tool, not a universal principle. For example, in low-level C programming or direct control of a register in an embedded context, immutable data isn&#x27;t a principle, it&#x27;s just another approach.<p>What I mean by &quot;universal&quot; is something like SOLID. [1] (Most people only use SOLID for OOP, but Uncle Bob makes it clear in Clean Architecture that he thinks SOLID is universal, and not limited to OOP.)<p>That said: it does feel like immutable data should be the _default_ approach in many situations. But that&#x27;s really hard to do in most languages.<p>[1] <a href="https:&#x2F;&#x2F;www.amazon.com&#x2F;Clean-Architecture-Craftsmans-Software-Structure&#x2F;dp&#x2F;0134494164" rel="nofollow">https:&#x2F;&#x2F;www.amazon.com&#x2F;Clean-Architecture-Craftsmans-Softwar...</a>')