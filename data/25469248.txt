Item(by='epistasis', descendants=None, kids=[25469479], score=None, time=1608311499, title=None, item_type='comment', url=None, parent=25465521, text='I do create an entirely new state with every single semicolon, and my text editor agrees in the way that it allows me to undo and redo. As an implementation detail, these are likely stored as diffs, but since the diff is from a known start or final point, it works out OK. When we start talking about diffs that operate on different files, then everything falls apart.<p>Which is why I disagree heavily with the example  pijul merge you linked. Since lines AB are copied directly in one edit, and the other edit adds a line X after AB, why does pijul decide that the correct merge is only adding the X line after the second instance of AB?<p>Viewing this in terms of diffs instead of states means that everything is ambiguous rather than clear. What does it mean to do a diff on a diff? There are many definitions and few programmers will agree on what the proper algebraic operations are, and in fact the same person will often want <i>different</i> algebraic operations in different settings.<p>In the example above, if X is a necessary cleanup step after invoking AB (e.g a file close after file open and read), then pijul&#x27;s interpretation of the ambiguous situation is wrong. But if X is a summary step that&#x27;s necessary only once after the double invocation of AB, (e.g. sum += read(); n += 1;) and X is, for example, mean = sum &#x2F; n, then only one X is needed.<p>Thinking about a &quot;diff&quot; without tying it to a full and complete starting state will always lead to these sorts of foundational problems, and it is quite clear from this pijul example that they haven&#x27;t really thought about the problem much.')