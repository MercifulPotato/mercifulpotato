Item(by='gnramires', descendants=None, kids=[25820430], score=None, time=1610760630, title=None, item_type='comment', url=None, parent=25798295, text='And I would go even further!<p>I have been thinking recently that <i>everything</i> should (or rather could, in a special language) be overloadable. And every operator should be treated as a non-first class citizen of a language, &#x27;=&#x27;, &#x27;+&#x27;, and all. The inelegance is granting those operators any privileged status. So the parsing can be in every case dependent on the arguments being parsed: if you&#x27;re adding numbers, number addition, if you&#x27;re adding vectors; even more complex behavior could be added for special parsing cases (which I don&#x27;t even know what could be), say for creating certain algebraic operators with special conditions, maybe something like knuth&#x27;s up-arrow.<p>Of course, thought must be employed on the scoping of these parsing changes but since this behavior would be conditional on the argument properties, it is very difficult to see any problems. For example, while adding vectors overloads &#x27;+&#x27;, it is not going to cause problems in other cases (when the arguments aren&#x27;t vectors), and when dealing with vectors &#x27;vec1+vec2&#x27; the programmer will essentially always be thinking about the overloaded operation anyway, it seems absurd a confusion would occur. I should be able to write &#x27;x=5!+3&#x27; to mean &#x27;x=factorial(5)+3&#x27;.<p>Allowing contextual meaning (evaluation) of operators, functions, even syntax, allows more compact, expressive language, because we can reuse words, associate their slightly different applications and adapt syntactical behavior to the problem at hand.<p>Take the usages of the word &#x27;slow&#x27; in natural language: it can be a description of current velocity (variable) of an object (context-dependent) &quot;the car is slow&quot;, it can be a description of a property of an object (low typical&#x2F;maximum velocity) &quot;slugs are slow&quot;, it can be a verb &quot;please slow down&quot;, and so on. Creating new words for each use case is inefficient and disregards the natural close association of their (contextual and algorithmic) meaning.')