Item(by='r4victor', descendants=None, kids=None, score=None, time=1607753876, title=None, item_type='comment', url=None, parent=25390607, text='I plan to cover CPython&#x27;s memory management in the future posts. In a nutshell, an object gets destroyed when its reference count hits 0. In this case, CPython calls `tp_dealloc` [1] of the object&#x27;s type. The `tp_dealloc` slot releases all the resources the object owns and frees the memory. The implementation of `tp_dealloc` differs for different types. Eventually, the `free` function of the memory allocator is called to free the memory. A memory allocator is a set of functions to manage memory. The default memory allocator for objects is pymalloc. It allocates small objects (&lt;= 512 bytes) using the arena allocator [2] and falls back to the raw memory allocator otherwise. The latter calls the `free()` library function to free the memory.<p>The Python&#x2F;C Reference Manual has a great section on memory management [3].<p>[1] <a href="https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;typeobj.html#c.PyTypeObject.tp_dealloc" rel="nofollow">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;typeobj.html#c.PyTypeObject....</a><p>[2] <a href="https:&#x2F;&#x2F;www.evanjones.ca&#x2F;memoryallocator&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.evanjones.ca&#x2F;memoryallocator&#x2F;</a><p>[3] <a href="https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;memory.html" rel="nofollow">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;c-api&#x2F;memory.html</a>')