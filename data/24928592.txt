Item(by='yoz-y', descendants=None, kids=[24929073], score=None, time=1603963086, title=None, item_type='comment', url=None, parent=24928206, text='&gt; You certainly wouldn’t use a language like JS,<p>I disagree with this. You might not want to use JS but a language “like” JS such as TS or Lua would definitely be on the table. Or just JS without the biggest warts.<p>&gt; you certainly would want to provide visual design tools as far as possible,<p>I feel that the promise of visual design tools fell quite short. Issues with version control and general traceability of changes and the ultimate non feature parity with code make me think that code first interfaces are the future.<p>&gt; APIs would be replaced with standard protocols,<p>Could you elaborate what do you mean? I assume REST apis but that is basically just HTTP.<p>&gt; and probably you’d use a relatively small XML for layout.<p>As long as the language is robust enough to not move stuff around when the UI slightly changes. I feel that XML (and to an extent html) is too lax to express a programmatically created interface.<p>&gt; So perhaps only the HTML is anything like what you’d use. There’d be no transpilation, no webpack, no polyfills, no CSS, no JS.<p>In a different world you could replace these steps by compilation, compiler, backwards compatibility libraries, a styling framework and a language of choice.<p>I think you have shown that JS ecosystem has grown very organically. I think this is because the nature of web developers was to put stuff out rather than really think about how do make it the correct way. I believe this is because of constraints, on a native platform you had the option to go down to assembly or create a new language or paradigm. On web only the browser vendor has this power, all the dev had was JavaScript.')