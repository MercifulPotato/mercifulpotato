Item(by='tannhaeuser', descendants=None, kids=[25281204], score=None, time=1606940924, title=None, item_type='comment', url=None, parent=25280462, text='I&#x27;m sure you believe what you&#x27;re saying. But, as pointed out in many posts here, very few people can setup Kubernetes, let alone know it enough for troubleshooting. As an example, in a project of mine we had to call-in an k8s expert after almost a week of downtime (turned out IP address space was exhausted on that Azure instance). And a constant in almost all recent projects of mine is sure people fiddling with k8s integration setups, and achieving very little.<p>In that kind of situation, it is unwise and irresponsible to treat your infrastructure as a black box. You still need to be able to re-build&#x2F;migrate your images for security, stability, and feature upgrades, so you&#x27;re basically just piling additional complexity on top.<p>The premise of Kubernetes and containers&#x2F;clouds is an economical (and legitimate) rather than technical one: that you don&#x27;t have to invest into hardware upfront, and pay as you go with PaaS instead. That tactic only works, though, as long as you have a strong negotiation position as customer. In practice, if you won&#x27;t get locked-in to cloud providers by tying your k8s infra to IAM or other auth infrastructure, or mixing Kubernetes with non-Kubernetes SaaS such as DBs (which suck on k8s), then you still won&#x27;t be able to practically move your workload setup elsewhere due to sheer complexity and risk&#x2F;downtime.<p>The economical benefit is further offset by a wrong assumption that you need no or fewer admin staff for Docker (&quot;DevOps&quot; in an HR sense).')