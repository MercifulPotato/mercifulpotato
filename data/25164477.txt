Item(by='Vinnl', descendants=None, kids=None, score=None, time=1605903495, title=None, item_type='comment', url=None, parent=25161230, text='&gt; I&#x27;ve read that paper in the past and it doesn&#x27;t actually answer most of the questions I asked above.<p>OK, well I still don&#x27;t have the numbers, so we have nothing better than intuition to go on regarding whether it saves time&#x2F;improves quality or not.<p>&gt; A `typeof` assertion or similar is hardly more work and continues to function once the TS types have been stripped.<p>Yes, and if a typeof assertion is enough, than you don&#x27;t <i>need</i> any additional syntax in TypeScript either. But a `typeof val === &quot;object&quot;` doesn&#x27;t tell me a whole lot though.<p>&gt; If you expect to interact with the outside world, then you must test against unexpected types.<p>Agreed. That said, with TypeScript, you only have to do it once, at the point where you interact with the outside world. Once I&#x27;ve verified that e.g. my API response contains all the properties I expect, then I can pass it on to any other function in my code safely. Whereas without TypeScript, I have to be aware <i>at the points where I access those properties</i> that the original source of that value might have been the outside world, and to explicitly verify that it looks as expected. (Or alternatively, I need to still verify the object at the boundary, but have to manually know what properties of it are accessed in the rest of my codebase.)<p>&gt; Meanwhile, in every real-world TS project I&#x27;ve worked on, you wind up with tons of &quot;template soup&quot; where devs spend tons of time trying to find out which variant makes the type checker happy (or just giving up and slipping in an `any` type)<p>Yes, I&#x27;ve seen that happen to. I will not argue that you don&#x27;t have to learn TypeScript, and that if you do not (want to) put in the effort (or are unable) to do that, it might be counter-productive. In fact, I advised another team in my company to move off of TypeScript for that very reason.<p>&gt; By the time you&#x27;re done documenting this, when someone glances at the docs, they&#x27;ll probably not worry very much about the types because they&#x27;ll be obvious. Why write up a bunch of complex types when a simple, human-readable doc string does types and so much more?<p>Yes, type annotations are not a replacement for documentation. They help your tooling help you. So the reason to write up a bunch of complex types (well, preferably simple types most of the time, of course) is that your tooling can help catch mistakes early - I&#x27;m not working off of documentation most of the time. I read it once, refer back to it every now and again, but more than that would be a massive waste of time. My memory is a major asset in being able to quickly type out a bunch of code, but my tooling helps me by removing the need to memorise some things.')