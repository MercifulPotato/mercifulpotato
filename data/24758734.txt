Item(by='anarazel', descendants=None, kids=None, score=None, time=1602532438, title=None, item_type='comment', url=None, parent=24749464, text='&gt; must be crazy if they&#x27;re not aggressively using pgbouncer to keep the number of connections down.<p>With the limitations around PG poolers that&#x27;s not always that easy :(<p>I&#x27;ve worked on a number of very large postgres instances - the backend memory usage wasn&#x27;t usually a major issue for the very large ones (i.e. not schema sharded ones, where it&#x27;s a large issue). The TLB miss ratio however was a major bottleneck on them, even with huge pages (perhaps even <i>because</i> of huge pages, because the TLB for huge pages used to be so small).<p>&gt; I&#x27;m actually quite heartened to hear that the attitude among Postgres developers is changing. Back in the day whenever people would bring up threads vs processes they got shouted down because processes are clearly superior and threads were &quot;just implemented as processes on linux anyway&quot;. [...]\n&gt;\n&gt; To Tom Lane: I told you so :)<p>The project is bigger than Tom Lane ;)<p>I think it&#x27;s been pretty clear that threads have more advantages than disadvantages (which are substantial - hello mmap_sem) for quite a while. But that doesn&#x27;t necessarily mean that we should have changed it a couple years back - as you say, it&#x27;s not a small change, and it&#x27;ll cause some disruption. There arguably were (and perhaps are) more crucial issues.<p>&gt; That&#x27;s going to be one hell of a job to change now though.<p>Yea. But it&#x27;s doable. Personally I think the PG internal changes not the hardest parts - that&#x27;s having to deal with all the extension out there. Both to ensure that they are adapted, but also managing the pain of having to deal with all the API evolution.')