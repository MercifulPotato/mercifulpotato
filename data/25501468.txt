Item(by='jermd', descendants=None, kids=None, score=None, time=1608596621, title=None, item_type='comment', url=None, parent=25501460, text='Hi all, I&#x27;m Jeremy, and I’m excited to be sharing Tuna. I built this because I wanted to develop scalable web services as quickly as possible. I was tired of cobbling together containers, databases, web servers, build tools, and the what-have-you in order to build scalable applications. In Tuna, you can create a stateful web service in just 4 lines of code with zero application-land dependencies.<p>For a non trivial application, I would recommend looking at a simple messenger web service written in Tuna: <a href="https:&#x2F;&#x2F;github.com&#x2F;Conder-Systems&#x2F;tuna-lang&#x2F;blob&#x2F;main&#x2F;tuna&#x2F;demos&#x2F;simple-messenger&#x2F;main.tuna" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Conder-Systems&#x2F;tuna-lang&#x2F;blob&#x2F;main&#x2F;tuna&#x2F;d...</a>.<p>I think Bosque <a href="https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;BosqueLanguage" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;BosqueLanguage</a> is similar in its “Cloud First Development” ambition.<p>Compared to other programming languages, Tuna is unique because the global state is stored in a database. Under the hood, Tuna compiles to an intermediate representation that I also created called Conder: <a href="https:&#x2F;&#x2F;github.com&#x2F;Conder-Systems&#x2F;conder" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Conder-Systems&#x2F;conder</a>. This intermediate representation is decoupled from any specific storage provider. When it is compiled, query optimizations are applied to the IR to improve performance.<p>My hope with Tuna and Conder is to simplify building scalable, secure, and vendor-agnostic distributed systems.')