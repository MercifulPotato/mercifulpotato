Item(by='worble', descendants=None, kids=[24674422], score=None, time=1601743045, title=None, item_type='comment', url=None, parent=24672314, text='C# has a pretty huge standard library (or Microsoft official packages) that cover a lot of things here. Quickly running through the rust list, the things I suppose I would add:<p>Dev Tools:<p>- Analyzers are a great tool for getting compile time errors. I use Rosylnator (<a href="https:&#x2F;&#x2F;github.com&#x2F;JosefPihrt&#x2F;Roslynator" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;JosefPihrt&#x2F;Roslynator</a>) and Xunit Analyzers (<a href="https:&#x2F;&#x2F;github.com&#x2F;xunit&#x2F;xunit.analyzers" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;xunit&#x2F;xunit.analyzers</a>) on every project, but there a ton of others focussing on performace, security, etc.<p>- Editor Config is also great for maintaining consistent styling in your project (<a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;fundamentals&#x2F;code-analysis&#x2F;code-style-rule-options" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;fundamentals&#x2F;code-an...</a>). Again, you can enforce this at build time, and Visual Studio and Rider will show errors in the IDE.<p>Encryption:<p>- Like the author I don&#x27;t know much about this topic, but for hashing BCrypt is pretty well known and appears well respected (<a href="https:&#x2F;&#x2F;github.com&#x2F;BcryptNet&#x2F;bcrypt.net" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;BcryptNet&#x2F;bcrypt.net</a>)<p>Logging:<p>- Microsoft has their own basics for this, but there are also a lot of 3rd party solutions, you can see a maintained list here: <a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;aspnet&#x2F;core&#x2F;fundamentals&#x2F;logging&#x2F;?view=aspnetcore-3.1#third-party-logging-providers" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;aspnet&#x2F;core&#x2F;fundamentals&#x2F;lo...</a> (I personally use Serilog).<p>Serialization&#x2F;Deserialization:<p>- Microsoft have just added their own internal JSON serializer to .NET Core, so you should probably use that where you can, but it doesn&#x27;t have anywhere near the same features that Newtonsoft&#x27;s Json.NET does, so if you&#x27;re in need of those then that&#x27;s still the battle-tested standard (<a href="https:&#x2F;&#x2F;github.com&#x2F;JamesNK&#x2F;Newtonsoft.Json" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;JamesNK&#x2F;Newtonsoft.Json</a>).<p>Time:<p>- Personally I&#x27;ve never had a reason to use it over the standard DateTime, but I&#x27;ve heard good things about NodaTime (<a href="https:&#x2F;&#x2F;github.com&#x2F;nodatime&#x2F;nodatime" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nodatime&#x2F;nodatime</a>)<p>Images:<p>- System.Drawing still exists in the standard library for Core, but it&#x27;s Windows only I believe<p>- ImageSharp is a great library for native image stuff in .NET Core, works across all platforms (<a href="https:&#x2F;&#x2F;docs.sixlabors.com&#x2F;index.html" rel="nofollow">https:&#x2F;&#x2F;docs.sixlabors.com&#x2F;index.html</a>). There was some hullaballoo a little while back about it&#x27;s license, but that appears to be resolved now as it&#x27;s Apache 2.<p>- There&#x27;s also an ImageMagick library if that&#x27;s your jam (<a href="https:&#x2F;&#x2F;github.com&#x2F;dlemstra&#x2F;Magick.NET" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;dlemstra&#x2F;Magick.NET</a>)<p>Networking:<p>- .NET obviously has it&#x27;s own httpclient, but it&#x27;s worth mentioning Polly here (<a href="https:&#x2F;&#x2F;github.com&#x2F;App-vNext&#x2F;Polly" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;App-vNext&#x2F;Polly</a>). It allows you to extend the default Http Client with short circuits, automatic retries, exponential backoffs, etc.<p>Databases:<p>- Probably doesn&#x27;t need saying, but Entity Framework for an all in one migration, entity mapping and database access library (<a href="https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;efcore" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;efcore</a>). Since moving to Core, it&#x27;s also a lot faster now, although I think it&#x27;s still lacking a couple of features from the old framework version.<p>- Dapper is focussed on being fast and simple (<a href="https:&#x2F;&#x2F;github.com&#x2F;StackExchange&#x2F;Dapper" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;StackExchange&#x2F;Dapper</a>)<p>- NHibernate is also still a really powerful database library, even if I think it&#x27;s API kinda sucks (<a href="https:&#x2F;&#x2F;github.com&#x2F;nhibernate&#x2F;fluent-nhibernate" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nhibernate&#x2F;fluent-nhibernate</a>)')