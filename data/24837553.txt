Item(by='steveklabnik', descendants=None, kids=[24846449], score=None, time=1603203493, title=None, item_type='comment', url=None, parent=24837311, text='&gt; Accidentally getting non-typechecked code in the compiler, or running into problems with the compiler thinking two equal types are distinct?<p>Yes, this sort of thing. Basically, you have to have this be <i>deterministic</i>, or you end up with very strange possibilities, possible miscompilations, and in the best case, confusing errors. One option is to simply accept that these things can happen. Another is to restrict what you can do at compile time to ensure that they can&#x27;t.<p>An extremely simple example is cross compiling. In Rust, usize is dependent on the architecture you&#x27;re compiling for. A very simple &quot;just compile and run the program, get the answer, and use it&quot; implementation of compile-time execution will produce a usize of the size of the host, not the target. That&#x27;s a miscompilation. This example, while being simple, is also simple to fix. But it&#x27;s an example of how it&#x27;s not as trivial as &quot;use the compiler to compile the program, then run it.&quot; Which maybe isn&#x27;t how you think of this feature, but how I was, back before I knew anything about this topic :)<p>&gt; I might be overreacting here though<p>Nah, I think that you&#x27;re not <i>wrong</i>. It&#x27;s just that, when you start applying this super rigorously, you end up in weird places. How can you trust <i>any</i> behavior in a language without a specification? How you can you trust a specification if that specification hasn&#x27;t been formally proven? How you can trust an implementation of a formally proven specification? How you can you trust that the silicon you&#x27;re running on does the right thing, even with your bug free, formally proven code?<p>Everyone chooses somewhere along this axis to be comfortable with. And everyone does something, including &quot;I can ignore these problems because in practice they don&#x27;t happen to me,&quot; to deal with the bits outside of what they consciously choose to focus on.')