Item(by='geofft', descendants=None, kids=[25889441, 25889076], score=None, time=1611460653, title=None, item_type='comment', url=None, parent=25889025, text='Old versions of pip <i>do</i> support Python 2.x. Nothing is preventing you from using them.<p>There is also a straightforward way of &quot;compiling&quot; your code - install all your dependencies into a virtualenv, tar up that virtualenv, and untar it to the same path on the next system. I&#x27;ve seen this system used to work around pip and Python upgrade complexities that <i>already</i> exist, even within Python 2 alone, and it works fine. Then you&#x27;re insulated from both changes to pip and changes to the actual packages you&#x27;re trying to install from pip.<p>Edit to answer your question because someone downvoted me and now HN is preventing me from replying: I don&#x27;t think you&#x27;ll need to do anything special. The common case, honestly, is that you already have some version of pip shipped with your system (e.g., you&#x27;re using Python and pip from your OS) - just keep using that version, because by definition it&#x27;s a Python 2-compatible pip. The official Python 2 binaries bundle a version of pip which is also by definition Python 2-compatible.<p>If you need to upgrade pip for some reason, you might need to specify a version constraint on it, e.g.<p><pre><code>    pip install -U &#x27;pip&lt;21&#x27;\n</code></pre>\nBut you also might not, because there&#x27;s a way for packages to declare what Python versions they&#x27;re compatible with, and so pip can take that into account when deciding what to resolve. (The trouble is that very old versions of pip, such as those bundled with LTS-age OSes, don&#x27;t know how to do that, so they&#x27;re going to try to upgrade to the newest possible version of pip. Less-old versions of pip running on Python 2 should, I believe, not upgrade to an incompatible version.)')