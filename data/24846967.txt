Item(by='stabbles', descendants=None, kids=[24847293], score=None, time=1603282085, title=None, item_type='comment', url=None, parent=24846818, text='&gt; It does not matter if the vtable used to map a function call to the chosen type-specific overload occurs in an otherwise dynamically typed language or not, it’s just your grandpa’s same old static multiple dispatch.<p>Not sure what you mean. vtable&#x27;s only allow for single dispatch in C++. For double dispatch you need the visitor pattern. For multiple dispatch, I don&#x27;t know.<p>Closest to what Julia has in C++ is Bjarne&#x27;s Open Multi-Methods article [1], but it was not implemented.<p>Another interesting quote from Bjarne&#x27;s more recent How Can You Be So Certain article [2] is this:<p>&gt; Unified function call: The notational distinction between x.f(y) and f(x,y) comes from the flawed OO notion that there always is a single most important object for an operation. I made a mistake adopting that. It was a shallow understanding at the time (but extremely fashionable). Even then, I pointed to sqrt(2)and x+y as examples of problems caused by that view.<p>This &quot;mistake&quot; is something Julia gets right.<p>[1] <a href="https:&#x2F;&#x2F;www.stroustrup.com&#x2F;multimethods.pdf" rel="nofollow">https:&#x2F;&#x2F;www.stroustrup.com&#x2F;multimethods.pdf</a><p>[2] <a href="http:&#x2F;&#x2F;www.open-std.org&#x2F;jtc1&#x2F;sc22&#x2F;wg21&#x2F;docs&#x2F;papers&#x2F;2019&#x2F;p1962r0.pdf" rel="nofollow">http:&#x2F;&#x2F;www.open-std.org&#x2F;jtc1&#x2F;sc22&#x2F;wg21&#x2F;docs&#x2F;papers&#x2F;2019&#x2F;p196...</a>')