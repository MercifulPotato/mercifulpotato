Item(by='davidpolberger', descendants=None, kids=None, score=None, time=1607721369, title=None, item_type='comment', url=None, parent=25390112, text='The compiler is for Calcapp, an app designer for Excel-savvy users. Our aim is to offer a function library that is easy to pick up for our target audience. That means that we generally follow Microsoft&#x27;s lead in terms of naming and parameters, but we often offer extensions. Here are a few examples:<p>* Functions like SUMIF operate on a range or an array and use a textual mini-language to determine which values to operate on. =SUMIF(B1:B2, &quot;&gt;3&quot;), where B1 contains 2 and B2 contains 4, returns 4, because only B2 satisfies the &quot;&gt;3&quot; condition. We&#x27;re not big fans of that mini-language (which expects you to use the string concatenation operator &amp; to handle dynamic values). We support it, through an overloaded function, but also offer a version which takes a lambda as the second parameter. In Calcapp, SUMIF({ 2, 4 }, Item &gt; 3) and SUMIF({ 2, 4 }, E -&gt; E &gt; 3) (with a named lambda parameter) are equivalent to SUMIF({ 2, 4 }, &quot;&gt;3&quot;). The lambda syntax enables much more complex conditions to be expressed.<p>* Some functions like SORTBY take a sort order parameter, which is an integer where 1 means sort in ascending order and -1 means sort in descending order. We support functions with integer sort order parameters, but also offer an overloaded version taking an enumerated value instead (SortOrder.ASCENDING or SortOrder.DESCENDING), which we think helps with readability.<p>* Excel offers logical functions like AND, OR and NOT. We like the C-style operators &amp;&amp;, || and ! better, so we support them in addition to Excel&#x27;s functions. <a href="https:&#x2F;&#x2F;www.calcapp.net&#x2F;blog&#x2F;2017&#x2F;09&#x2F;16&#x2F;logical-operators.html" rel="nofollow">https:&#x2F;&#x2F;www.calcapp.net&#x2F;blog&#x2F;2017&#x2F;09&#x2F;16&#x2F;logical-operators.ht...</a><p>* Excel&#x27;s logical operators (like =, &lt;&gt; and &lt;=) return arrays when applied to arrays and ranges. For instance, { 1, 2 } = { 1, 3 } returns { TRUE, FALSE }. (This is easier to see in recent versions of Excel, where array results &quot;spill,&quot; meaning that a return array with two elements spills to occupy two cells of the grid. In earlier versions, as well as Google Sheets, you&#x27;ll have to use INDEX to tease out the results.) We support = and !=, but also == and !=, where the two latter operators always return scalar (non-array) values. == enables users to determine if two arrays are identical, without having to use AND on the result array (which is the standard Excel trick). Also, our == operator is more traditional in that string comparisons are case-sensitive (unlike =).<p>* Experienced Excel users like to use double negation to turn logical arrays into number arrays. We have a specialized operator, --, for that, because allowing two unary operators to follow one another would introduce other issues. Here&#x27;s an example: <a href="https:&#x2F;&#x2F;exceljet.net&#x2F;excel-functions&#x2F;excel-sumproduct-function" rel="nofollow">https:&#x2F;&#x2F;exceljet.net&#x2F;excel-functions&#x2F;excel-sumproduct-functi...</a><p>* The Excel operators * and + can be used with logical arrays and ranges to signify logical AND, as well as logical OR, respectively. (<a href="https:&#x2F;&#x2F;exceljet.net&#x2F;formula&#x2F;sum-if-cells-contain-either-x-or-y" rel="nofollow">https:&#x2F;&#x2F;exceljet.net&#x2F;formula&#x2F;sum-if-cells-contain-either-x-o...</a>) We have overloaded versions of those operators that take logical arrays for that reason. (Again, Calcapp uses static typing, which makes this a lot more complicated for us than it is for Excel.)<p>* The latest versions of Excel have great support for dynamically-allocated arrays (along with new array functions like FILTER and SORT). Their new calculation engine supports users providing arrays where, traditionally, non-array parameter values are expected. If arrays are provided for these parameters, then an array is returned. For instance, =SQRT({ 4, 16 }) returns { 2, 4 }. Microsoft internally calls this &quot;lifting&quot; parameters. We refer to these parameters as being &quot;array-capable.&quot; In our type system, an array-capable type is a union type (T|Array&lt;T&gt;), with the notable difference that if an array is provided to an array-capable parameter, then the return type is no longer T, but Array&lt;T&gt;.<p>We do have a test suite for the runtime formula function implementation with a couple of thousand unit tests. Given the number of supported formula functions, though, we should probably have many more.<p>Most of what I have described here pertains to a new Calcapp version, which hasn&#x27;t been released yet. In particular, while I am done implementing the compiler, it still needs to be documented (lots of Javadoc), user-facing documentation needs to be written and the runtime system needs to be implemented, so we still have a few (fun!) months to go before everything is ready.<p>Thanks for taking an interest in what we do.')