Item(by='AnthonBerg', descendants=None, kids=None, score=None, time=1602138328, title=None, item_type='comment', url=None, parent=24711679, text='Optics allow us to do something like this:<p><pre><code>  import optics.for as o_for\n  o_for company.staff.pets as (.{pet}, optics.parentNode as owner) where (pet.type == &quot;cat&quot;):\n    print &quot;{.name|%s} belongs to {owner.name|%s}&quot;)\n</code></pre>\nWe&#x27;re guaranteed to be safe against null values in company and staff and pets – we don&#x27;t have to think about it – and no &quot;for&quot; or &quot;if&quot; is required for walking down the structure. Also the types of pet and owner are completely certain, and we can give verified compile-time guarantees that the string we&#x27;re populating is 100% correct to match the input.<p>This is the very simplest use of optics. Optics also allow us to do express wild things over those structures, such as selecting nodes based on some defined statistical relationship to the statistics of defined parts of the whole structure. It&#x27;s as simple and concise as the example above. And as efficient as possible.')