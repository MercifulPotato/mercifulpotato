Item(by='kingdomcome50', descendants=None, kids=[25990803], score=None, time=1612199151, title=None, item_type='comment', url=None, parent=25990188, text='I understand what you are saying. I&#x27;m not sure how your points are at odds with the OOP counterpart I describe though. The essence of your response seems to be &quot;because we want to use a pure FP paradigm&quot; to which _I_ would add &quot;despite a clear downside to which F# has the capacity to avoid&quot;.<p>If the framework only expects every `Model` to contain 2 methods (`view`, `update`) and never any more (which is the case), I see no reason at all to adopt the Elm architecture. The interface for `update&#x2F;view&#x2F;model` is well-defined and un-changing. It&#x27;s clearly sitting on the wrong side of the expression problem.<p>The program loop could work exactly the same no? Just re-organize:<p><pre><code>    let (model&#x27;,cmd&#x27;) = program.update msg state\n</code></pre>\nto:<p><pre><code>    let (model&#x27;, cmd&#x27;) = state.update msg &#x2F;&#x2F; I&#x27;m not sure where&#x2F;how program fits in\n</code></pre>\nMy question is truly as simple as trying to figure out the advantage of the chosen semantics (in F# - I don&#x27;t know Elm). It can&#x27;t possibly just be &quot;because we want to stay on the Functional programming realm&quot; can it? Immutability can be achieved in any paradigm. Forgive me if I am coming off overly controversial - I don&#x27;t mean to be.<p><a href="https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;webapps&#x2F;structure.html" rel="nofollow">https:&#x2F;&#x2F;guide.elm-lang.org&#x2F;webapps&#x2F;structure.html</a> - Even here in the &quot;MVC&quot; section the documentation _recommends_ you organize your project according to type (containing the `view` and `update` functions). This is very-much akin to my critique. If you reach the point in your project above you have essentially regressed back to OOP (in FP clothes).')