Item(by='to11mtm', descendants=None, kids=[24828879], score=None, time=1603128625, title=None, item_type='comment', url=None, parent=24828032, text='&gt; Thus speaks someone who doesn&#x27;t know anything about the difference between computer programming and software engineering. They may be able to program circles around everyone else, but they can&#x27;t software engineer their way out of a wet paper bag, and they&#x27;re going to produce a disaster.<p>That&#x27;s at least a bit of an assumption. Perhaps it hits close to home from my days in a Lisp shop, but some of the most brilliant Lisp programs I&#x27;ve seen weren&#x27;t even written by programmers or software engineers; they were written by drafters who were clever at math. And while I know I&#x27;m waxing poetic, I do consider that a credit to Lisp&#x27;s purity.<p>Hell, in the drafting industry I would say this story is (or certainly was) absolutely true. I wrote a whole bunch of LISP that I believe is still in use today, 8-12 years later alongside a number of small C#&#x2F;VBA applications. Amazingly what was put together was not only a &#x27;non-disaster&#x27;, but done thoughtfully enough that the team was able to take that code and evolve it over that same time period since I&#x27;ve left (I keep in touch with some of that team, specifically the guy who got 5 days of me offboarding 6 years of work...)<p>On the other hand, I&#x27;ve seen the opposite as well. In the C# world, writing one&#x27;s ORM is often seen as a trial of passage where one should hopefully by the end realize the difference between programming and engineering.<p>BUT, but... I&#x27;ve seen things blown the other way as well. I&#x27;ve seen PDD (Presentation Driven Development) in it&#x27;s worst form; where engineering principles are so overvalued that nobody actually does anything. It wasn&#x27;t even bikeshedding the architecture; it was bikeshedding the project itself.<p>I think we also sometimes forget differences in engineering philosophies. A Youtube channel called Regular Car Reviews did a great video once upon a time discussing the failure of the Chrysler-Mercedes merger from the late 90s. One of the things touched on was differences in engineering <i>philosophy</i>. The way a High performance &#x27;european&#x27; car used to get made was often a measure of precision, lots of fancy pieces working in unison (and, as anyone who had a late 90s BMW with VANOS can say, expensive to fix.) American Engineering? Just make it bigger!<p>We see some of this difference in engineering philosophy today; consider folks who prefer ground iron or cloud iron vs functions as a service.<p>The first lesson I learned about programming versus engineering was about disasters left behind.<p>The second lesson was that sometimes the disasters had a good reason.')