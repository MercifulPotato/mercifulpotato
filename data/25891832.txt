Item(by='joatmon-snoo', descendants=None, kids=[25892221], score=None, time=1611494780, title=None, item_type='comment', url=None, parent=25888983, text='Re-inventing the wheel can be useful for learning, but can have very real costs, often in the form of production outages.<p>* &quot;You can usually use user metadata field X for billing&quot; - except for those users for whom field X actually maps to something else, for tech debt reasons. (Is it stupid and bad? Yes. Is anyone going to be able to fix it this year? No. Is this going to result in Very Big Customer TM getting mad? You Betcha.)<p>* &quot;Oh, I&#x27;ll just roll my own fake of Foo&quot; - congratulations, now anyone looking for a fake needs too decide between yours and the other one. (Yes, this is highly context dependent, but the moment you have multiple fakes in common&#x2F;util libraries this usually starts being a problem.)<p>* &quot;I can just use raw DB writes for this, because I don&#x27;t want to learn how to use this API&quot; - except the abstraction exists <i>because</i> it guarantees you can do safe incremental, gradual pushes and roll back the change, whereas your home-rolled implementation had a small bug and now the oncaller needs to do manual, error-prone surgery on the backup instead of the usual undo button built into the API. (Oh, and legal is going to have a field day because there&#x27;s no audit record of the raw writes&#x27; content.)<p>Cargo-culting is bad, yes, but reusing existing abstractions is often important <i>because</i> they handle (or force you to handle) the various edge cases that someone learned about the hard way.<p>And of course, if you find a bug in the existing abstraction, well, congratulations- you just found a repro and root cause for that infamous support case that&#x27;s been giving everyone data integrity nightmares for months.')