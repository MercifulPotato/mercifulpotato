Item(by='cma', descendants=None, kids=[25884252, 25884549, 25884840, 25884785, 25884472], score=None, time=1611421165, title=None, item_type='comment', url=None, parent=25883675, text='Isn&#x27;t there a way around this?  When coding for graphics stuff writing to GPU mapped memory people usually take pains to turn off compiler optimizations that might XOR memory against itself to zero it out or AND it against 0 and cause a read, and other things like that.<p><a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;d3d12&#x2F;nf-d3d12-id3d12resource-map" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;d3d12&#x2F;nf-...</a><p>&gt; Even the following C++ code can read from memory and trigger the performance penalty because the code can expand to the following x86 assembly code.\nC++ code:<p><pre><code>    Copy *((int*)MappedResource.pData) = 0;</code></pre>\nx86 assembly code:<p><pre><code>    Copy AND DWORD PTR [EAX],0\n</code></pre>\n&gt; Use the appropriate optimization settings and language constructs to help avoid this performance penalty. For example, you can avoid the xor optimization by using a volatile pointer or by optimizing for code speed instead of code size.<p>I guess mmapped files still may need a read to know whether to do copy on write, where mapped memory for the CPU in that case is specifically marked for upload only and gets something flagged that writes it regardless of if there is a change, but mmap maybe has something similar?<p>(edit: this seems to say nothing similar is possible with mmap on x86 <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;31014515&#x2F;write-only-mapping-a-o-wronly-opened-file-supposed-to-work" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;31014515&#x2F;write-only-mapp...</a><p>but how does it work for GPUs?  Something to do with fixed pci-e support on the cpu (base address register <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PCI_configuration_space" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PCI_configuration_space</a>)?')