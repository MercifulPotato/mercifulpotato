Item(by='masklinn', descendants=None, kids=[25580912, 25580894], score=None, time=1609326438, title=None, item_type='comment', url=None, parent=25580396, text='Yes, that part of the readme:<p>&gt; STL std::map will not be implemented in CTL because maps only provide slight syntactic improvements over sets.<p>makes no sense to me.<p>It&#x27;s the other way around: a set is a map with a irrelevant &#x2F; ignored value (or singleton &#x2F; ZST if available), with built-in functions for set-oriented operations (union&#x2F;difference&#x2F;subset&#x2F;superset&#x2F;disjoint). So if you&#x27;re only going to provide one of them, you provide a map (that&#x27;s what Go does).<p>You don&#x27;t <i>have</i> to implement sets in terms of maps though, it can be useful to provide different implementations of them as their usage patterns can be different and thus it might make sense to use a different underlying data structure (not sure about trees there but definitely a possible consideration for hashes).<p>It also makes sense to have a bespoke set implementation if the language doesn&#x27;t have ZSTs, to avoid wasting space (between 1 byte and 1 word per key depending on the storage details).<p>Finally it can make sense to have a bespoke set implementation due to language visibility rules, so you can e.g. hit the hashes directly (rather than have to recompute them) when performing operations involving multiple sets.')