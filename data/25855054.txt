Item(by='kazinator', descendants=None, kids=None, score=None, time=1611200076, title=None, item_type='comment', url=None, parent=25848542, text='I have that darn book somewhere, from 30 years ago.<p>FBP is mostly a crock of shit, unfortunately. It&#x27;s worse than goto.<p>It sounds good in theory: everything is thread with ports; items move through the system like items through a factory. Debug the nodes individually, put them together and everything works!<p>However, when I&#x27;m debugging a problem, I want to have a nice 19 level deep call stack that tells me how we got here.<p>I don&#x27;t want a 4 level deep call stack which ends at the top of a loop where a mystery message was obtained from somewhere.<p>Now you&#x27;re debugging a communication protocol instead of a straightforward application.<p>I say save the message-passing for situations when things must be <i>actually</i> distributed as an external requirement, like on different clients and servers in a network.<p>By fortuitous coincidence, not very long after I got my hands on the FBP book, I landed into a company where something closely resembling FBP was used as the system implementation. The system was divided into blocks serviced by a threads and serving&#x2F;receiving messages. (Everything object-oriented with C++ classes, yadda yadda.)<p>The system was hard to understand because of <i>ad hoc</i> protocols between arbitrary nodes in the system. Basically whenever he original programmers, or whoever came after them, wanted to introduce some new behavior, they did the easiest thing possible and just defined some new message type, generating it here, and writing code to respond to it over there.<p>Just, aargh!')