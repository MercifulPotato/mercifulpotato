Item(by='vgatherps', descendants=None, kids=[25217795, 25219455, 25217700, 25218031, 25217880, 25217620, 25220024, 25220141, 25220352, 25220348], score=None, time=1606373152, title=None, item_type='comment', url=None, parent=25217270, text='I’ve seen this sentiment before and worked on both a “low latency Java” team and low latency C++ teams.<p>I have some sympathy for the idea that the JVM is better since it means you won’t spend all your time chasing crash reports. The thing is, like another comment hinted at, is that this issue is generally more reflective of the environment you build in than the technology choice.<p>Here’s a good talk on the reasons for and limits of using C++ for low latency systems: <a href="https:&#x2F;&#x2F;m.youtube.com&#x2F;watch?v=NH1Tta7purM" rel="nofollow">https:&#x2F;&#x2F;m.youtube.com&#x2F;watch?v=NH1Tta7purM</a><p>If I had to rank in terms of reliability of trading infrastructure I’ve used&#x2F;worked on,<p>* Low Latency C &#x2F; C++ infra at fully automated trading firm. Very much run by the programmers and quants and also fairly small. By far the fastest (near limits of what you could do) and also most reliable.<p>* Low Latency Java execution infrastructure. Pretty reliable, not that fast, had some issues with GC battling and manual memory management to avoid GC, etc. There was a pretty clear latency floor (still quite low) even when “doing everything right” that serious native infrastructure beat.<p>* C++ market making infra at a firm run by manual traders. It was by far the slowest and least reliable. Echos the experience of “spent hours debugging weird crashes”. The culture was very “A trader asked for this and needs it done yesterday. Also this refactoring business doesn’t sound like adding new features, drop it”.<p>What I saw is that if you hire people who have a good idea of what they’re doing and keep a culture of technical excellence, C++ is definitely a better choice if you care about latency. You really have to maintain a culture of high quality code, testing, and in general caring about the technology.<p>This is only really possible when all of the stakeholders are involved in the technology, or at least understand the benefits. Once you start down the path of “well this feature could be done a day quicker if...” this goes down the drain, and a few years later you find yourself getting run over on latency AND with an impossible to use trading system. It’s really the worst of both worlds.')