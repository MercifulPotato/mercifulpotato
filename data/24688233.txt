Item(by='couchand', descendants=None, kids=[24690171, 24689922, 24688988, 24689799], score=None, time=1601909352, title=None, item_type='comment', url=None, parent=24687685, text='I&#x27;m immediately turned off by the entirely gratuitous use of unsafe here.  I clicked through to the linked Reddit discussion and I&#x27;m not convinced the author has really thought it through.  Writing, &quot;pedagogically, that&#x27;s irrelevant to the post, so I didn&#x27;t highlight it&quot; misunderstands the pedagogy here.<p>However, there&#x27;s some really neat stuff later, so it&#x27;s wise to grit your teeth and get past it.<p>In case anyone else had the same reaction, here&#x27;s an entirely-safe version of the first snippet that you can pretend replaced the original:<p><pre><code>    &#x2F;&#x2F; Each state is a unique type\n    struct Receiving;\n    struct Sending;\n\n    &#x2F;&#x2F; The state machine is parameterized by the state\n    struct Channel&lt;State&gt; {\n      chan: ...,\n      _state: PhantomData&lt;State&gt;\n    }\n\n    &#x2F;&#x2F; Methods for the state are uniquely associated with only the state\n    impl Channel&lt;Receiving&gt; {\n      &#x2F;&#x2F; recv consumes ownership, ensuring old state is invalidated\n      fn recv(mut self) -&gt; (Channel&lt;Sending&gt;, String) {\n        let Channel { chan, .. } = self;\n        let msg = chan.recv();\n        &#x2F;&#x2F; The state type changes after executing a transition\n        let next = Channel { chan, _state: PhantomData };\n        (next, msg)\n      }\n    }\n\n    impl Channel&lt;Sending&gt; {\n      fn send(mut self, msg: String) -&gt; Channel&lt;Receiving&gt; {\n        let Channel { chan, .. } = self;\n        chan.send(msg);\n        Channel { chan, _state: PhantomData }\n      }\n    }\n\n    #[test]\n    fn channel_test() {\n      let c: Channel&lt;Sending&gt; = Channel::new();\n      let c: Channel&lt;Receiving&gt; = c.send(&quot;hi&quot;);\n      let (c, msg) = c.recv();\n      &#x2F;&#x2F; and so on\n    }</code></pre>')