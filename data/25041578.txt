Item(by='wahern', descendants=None, kids=None, score=None, time=1604967592, title=None, item_type='comment', url=None, parent=25038690, text='&gt; That said, some structs may have a smaller size, but for efficiency, the Go runtime will allocate them in the same size class, then those structs are not considered sloppy:<p>It&#x27;s not for efficiency, per se. As in C, to support arrays of structs all structs are padded so their size is a multiple of the strictest (largest) alignment of any of its members. If the example struct described above were 24 bytes instead of 32, then the second element of an <i>array</i> of those structs wouldn&#x27;t be properly aligned for any of its uint64 or pointer members. On architectures that require aligned loads and stores that&#x27;s not an efficiency optimization, but required for correctness.')