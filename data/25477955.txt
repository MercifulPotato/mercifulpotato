Item(by='whoisthemachine', descendants=None, kids=None, score=None, time=1608391710, title=None, item_type='comment', url=None, parent=25454659, text='This article takes me back to my college days ca. 2009, my senior design project was asynchronous cryptography circuits... I read this article and a few research papers more than a few times before I gained an entry level understanding of asynchronous circuits. Unfortunately the entire concept was very difficult for even senior computer engineering students to wrap their heads around when they had just been studying clocked circuits in-depth. Understanding the mueller-c element [0] in particular caused me significant difficulties.<p>Understanding the concept from a high-level isn&#x27;t too bad however. As the article covers, if you visualize each piece of information moving along the pipeline as a hand-off, like a chain of people passing balls to each other, with the rule that they can&#x27;t pass a new ball until they&#x27;ve passed the previous ball, you have a rough idea of how asynchronous processing circuits work. What&#x27;s funny is that a natural &quot;clock&quot; begins to take shape at that point, although it&#x27;s determined by the slowest component in your pipeline, rather than by an oscillator. The ball diagrams from the Rx libraries are actually also good visualizations for asynchronous circuits [1].<p>Those were some rough months attempting to achieve our advisor&#x27;s goals, clearly the trauma still hasn&#x27;t left me.<p>[0] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C-element" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C-element</a><p>[1] Example Ball Diagram from the Rx libraries: <a href="http:&#x2F;&#x2F;reactivex.io&#x2F;documentation&#x2F;operators&#x2F;map.html" rel="nofollow">http:&#x2F;&#x2F;reactivex.io&#x2F;documentation&#x2F;operators&#x2F;map.html</a>')