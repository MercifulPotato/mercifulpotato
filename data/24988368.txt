Item(by='shaan7', descendants=None, kids=[24990676], score=None, time=1604492693, title=None, item_type='comment', url=None, parent=24988228, text='&gt;  Why do you think it gets repeated by Go developers?<p>Not by all, only by a subset of Go developers (until very recently I was one as well, maintained a moderate-size webservice). I specifically said &quot;some Go developers&quot; in my comment because that is what happens (at GopherCons, meetups and so on).<p>I don&#x27;t really have a lot of C# experience, but I have read the same story about C++ from lot of people. I think you will agree that abstractions are not a problem, abuse is. Now, I have worked on a C# project for a very short time where I have seen the problems you described. But I do not follow the thinking that a tool was abused and hence its the tool&#x27;s fault. That is silly.<p>I was a Go developer for ~4 years where I struggled because I had to constantly spend mental effort trying to ignore the people in the Go community who, instead of focusing on what Go does well, spent all their time (in GopherCon, meetups and so on) rationalizing missing features from Go. Here I was - with this nice language that let me write webservices which are efficient and do not carry a heavy runtime (CLR, JVM etc). But it is severely missing features that can help you be more productive when programming. After all that, listening to people say &quot;its feature, not a defect&quot; just makes you lose all hope that things will get any better.<p>A better approach is what (thankfully) some folks from the Go team take. You will find blogs from the core team where it is explained that Generics aren&#x27;t missing because they are outright bad. They are missing because the Go team had not yet[1] figured out how to do it the right way (TM). _That_ is fine, it is the truth.<p>Finally, you say that it just isn&#x27;t possible to avoid writing complex code with a powerful language. Well, I have heard that as well, from the same people. But it isn&#x27;t true, I have worked on a C++ project where I was careful to keep things simple[2] and had quite a few developers on the team (with only college-level C++ experience, most of them Go devs) contribute to the project without much trouble.<p>But hey, maybe it is personal preference then. I would rather use powerful tooling and put cognitive effort into keeping things simple - rather than using something else and feeling limited by it all the time.<p>[1] now they have, for the most parts\n[2] for example, it would use templates but avoid nesting more than one level, and so on. You get the idea.')