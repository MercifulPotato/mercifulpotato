Item(by='antonfire', descendants=None, kids=None, score=None, time=1606283545, title=None, item_type='comment', url=None, parent=25206238, text='Fun fact, you can construct and store a lookup table for sums of all possible pairs of O(log(n))-digit numbers in O(n) space. (And O(n) time, probably?)<p>So if your model of computation lets you look things up in a table like that in O(1) time, you can kind of get the situation I&#x27;m describing above. Maybe your model of computation shouldn&#x27;t let you do this, but some do. Often if an algorithm takes up O(foo) space, we don&#x27;t worry about the fact that lookups into that space should take Theta(log(foo)) time (to even read the address) rather than O(1) time, because things are assumed to &quot;fit into memory&quot;.<p>Another fun way to be fussy along these lines is that the usual algorithms for sorting a list of n distinct items only give bounds of O(n (log n)^2) time. Each item takes around log(n) bits to even store, so comparing two of those can&#x27;t be done in time O(1) in the worst case (in a model that forbids the kind of &quot;cheating&quot; I&#x27;m describing above). The best uniform bound you can hope for is time O(log n) per comparison. (Though in some sense the extra log(n) factor might &quot;drop back out&quot;, because it takes O(n log(n)) space to even write down an input to this algorithm.)')