Item(by='DonHopkins', descendants=None, kids=None, score=None, time=1611455443, title=None, item_type='comment', url=None, parent=25888111, text='Sun politics, and opportunistic retroactive credit-takers, pfff! The same kind of bullshit happened with Self and HotSpot. Lars Bak developed the JIT compiler for Self at Sun, which they didn&#x27;t appreciate, so he left for another company, applied his ideas to Java, and they bought his company back, and made HotSpot!<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lars_Bak_(computer_programmer)" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lars_Bak_(computer_programmer)</a><p>&gt;After participating in the design and implementation of the BETA Mjølner System, in 1991 he joined the Self group at Sun Microsystems Laboratories in Cupertino, California. During his time there, he developed a programming environment for Self and added several enhancements to the virtual machine.<p>&gt;In 1994, he joined LongView Technologies LLC, where he designed and implemented high performance virtual machines for both Smalltalk and Java. After Sun Microsystems acquired LongView in 1997, Bak became engineering manager and technical lead in the HotSpot team at Sun&#x27;s Java Software Division where he developed a high-performance Java virtual machine.<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=18691446" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=18691446</a><p>Java’s Forgotten Forebear (2009) (ieee.org)<p><a href="https:&#x2F;&#x2F;spectrum.ieee.org&#x2F;computing&#x2F;software&#x2F;javas-forgotten-forbear" rel="nofollow">https:&#x2F;&#x2F;spectrum.ieee.org&#x2F;computing&#x2F;software&#x2F;javas-forgotten...</a><p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23800625" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23800625</a><p>Call with David Ungar (2015) [video] (youtube.com)<p><a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8nfrC-YLYqc&amp;ab_channel=HernanWilkinson" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8nfrC-YLYqc&amp;ab_channel=Herna...</a><p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20377077" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=20377077</a><p>&gt;Lua&#x27;s main problem is that it isn&#x27;t JavaScript (i.e. in JavaScript&#x27;s enviably lucky position of ubiquitous dominance).<p>&gt;If I had a time machine, I&#x27;d go back and try to convince Netscape to use Lua 2.1 instead of inventing JavaScript (released December 4, 1995). And hire the Self guys (Dave Ungar, Randy Smith and the crew who eventually made the Java HotSpot compiler) away from Sun, and Mike Pall (LuaJIT) from wherever he was!<p><a href="https:&#x2F;&#x2F;www.lua.org&#x2F;versions.html" rel="nofollow">https:&#x2F;&#x2F;www.lua.org&#x2F;versions.html</a><p>&gt;Lua 2.1 was released on 07 Feb 1995. Its main new features were extensible semantics via fallbacks and support for object-oriented programming. This version was described in a journal paper. Starting with Lua 2.1, Lua became freely available for all purposes, including commercial uses.<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=12574290" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=12574290</a><p><a href="https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Blogs&#x2F;Charles&#x2F;A-Conversation-with-Bjarne-Stroustrup-Carl-Hewitt-and-Dave-Ungar" rel="nofollow">https:&#x2F;&#x2F;channel9.msdn.com&#x2F;Blogs&#x2F;Charles&#x2F;A-Conversation-with-...</a><p>Here&#x27;s some discussion with Jens Mönig about Self&#x27;s roots and Morphic&#x27;s evolution, and Lars Bak on JIT compilation:<p>Jens Mönig (the author of Snap!) talked all about the new version of Snap! and the new HyperBlocks feature (APL like arrays) in the Snap!Con20 Keynote!<p>His delight in programming is so contagious even with social distancing and teleconferencing!<p><a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=K1qR4vTAw4w&amp;ab_channel=JensM%C3%B6nig" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=K1qR4vTAw4w&amp;ab_channel=JensM...</a><p>I asked him about the architectural changes, and we discussed them and he sent me this:<p>Don: Hi Jens! I&#x27;m catching up with all the work you&#x27;ve done since the Snap 5 release! You&#x27;ve made excellent progress!<p>The problems you had and optimizations you made for Chrome sound interesting! Is there a summary or design document or discussion thread about it that I can read to catch up with it?<p>Watching your Snap!Con20 keynote on Hyperblocks. Your delight in programming is so contagious even with social distancing and teleconferencing!<p>Jens: Thanks, Don! The architectural changes were kinda profound, and I wasn&#x27;t too eager about them had it not been for Chrome&#x27;s suckiness. Now I&#x27;m really glad that all the work paid off, and Snap! has become much better, more stable and faster on all browsers, especially also on mobile ones.<p>I don&#x27;t really have a document aside from the short &quot;migration guide&quot; in the Github repo, but that doesn&#x27;t discuss the architecture. That was a discussion between moi, John Maloney and some others.<p>Don: Was there a Buddha Nature of the changes, or did everything change?<p>Jens: Not everything changed.<p>Don: I find architectural evolutionary stuff fascinating, like watching people solve the trolley problem for sport!<p>Jens: I basically reverted to a Squeak model of display refreshing, instead of pre-rendering and caching every morph in advance. So the changes were mostly &quot;surgical&quot; and only affected parts of the whole thing.<p>Don: Bert&#x27;s paper about SqueakJS was a delightful mind-blower! His solution to the GC problem!<p>Jens: Now that I mention is, I do have some slides that I drew for SAP management in April that talk about architecture - even though they didn&#x27;t understand any of it. Let me see whether I still have them...<p>Don: I loved reading the original Self papers back in 91 or so. I was visiting Amsterdam for the first time and had printed them out, and was reading them in a coffeeshop smoking weed.  MIND=BLOWN!<p>Jens: <a href="https:&#x2F;&#x2F;drive.google.com&#x2F;file&#x2F;d&#x2F;1QD-tqtTL3ldtmtqmViNm-C7TW0n7Jykp&#x2F;view?usp=sharing" rel="nofollow">https:&#x2F;&#x2F;drive.google.com&#x2F;file&#x2F;d&#x2F;1QD-tqtTL3ldtmtqmViNm-C7TW0n...</a><p>Don: Thank you!<p>I&#x27;d heard so much about Morphic and wanted to know what that was about, and why people liked it so much. Didn&#x27;t that come from Self?<p>Jens: Oh, yes the SELF papers were all wonderful, and Bert&#x27;s &#x2F; Vanessa&#x27;s SqueakJS is the most awesome piece of software.<p>Yep, Morphic came all from SELF, that&#x27;s right<p>Of course, I first saw it in Squeak, and hated it at first, haha.<p>Don: The self papers just kept piling on layer after layer of amazing stuff: clean model. efficient implementation. jit compiler. but actually debuggable, with dynamic deoptimization! And they made it clear in those papers that those ideas could be applied to other languages, not just Self. They meant Smalltalk but didn&#x27;t realize that Java would be the main beneficiary soon (then JavaScript).<p>When I was working for Kaleida and evangelizing ScriptX (like CLOS-y object oriented scheme, kinda like dylan, with a multimedia library), the Python people really annoyed me because they were so smug and happy with their language, and I had a kind of envy for them, clinging to my sinking language.<p>Then I became one of them and it was ok.<p>I still do Python, but it&#x27;s not my focus now, and I&#x27;d start new stuff in JavaScript now.<p>Jens: Yeah, it&#x27;s somewhat ironic that V8 turned out to be the main beneficiary of Lars Bak&#x27;s work, not a Smalltalk system, isn&#x27;t it?<p>Don: Yes, and sadly ironic that David Ungar stayed loyally at Sun while the other guys forked off their own company that got bought by Sun for lots of money, and poor Dave didn&#x27;t cash in on the reward he deserved.<p>Well maybe ironic is the wrong word, just too bad Sun didn&#x27;t treat Dave better, for all his work.\nBut leaving a company, doing something cool, then selling it back to the company is a great &quot;we told you so&quot; move!<p>All those ideas from Self were portable, and migrated out of Self to Java then to JavaScript, and lots of other places too, like LuaJIT! But they called in in the original papers, it was not language specific.')