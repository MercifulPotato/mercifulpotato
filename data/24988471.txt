Item(by='idoubtit', descendants=None, kids=[24990206], score=None, time=1604493738, title=None, item_type='comment', url=None, parent=24986132, text='Other comments have claimed that Go is intended for teams, but my personal experience shows that Go code is easier to maintain than Haskell code, even for a single developer. Though I&#x27;ve coded with Haskell for many years, I never reached an expert level. So, when I went back to an application after 6 month of break, my Haskell skills were rusty, and I struggled to understand what I had written. What&#x27;s that pragma `MultiParamTypeClasses, TypeFamilies`? What does `&lt;*&gt;` mean in that context? And so on. A similar break happened last year, and I still had a hard time getting back to fluent Haskell, while modifying my Go code was still easy.<p>Still, I agree with some of the bad points. Like him, I would have liked more types with a stricter compiler that helps refactoring (sum types, zero values).<p>The official documentation of the language is also very disappointing, as noted by Eric S. Raymond in his conversion notes[^1] from Python to Go.\nThe author of this blog post criticizes the tooling for the lacks of features that in fact do exist[^2], but are hard to find due to the poor documentation (split over a a shallow &quot;tour of Go&quot;, blogs, other official docs, with no links between them).<p>[^1]: <a href="https:&#x2F;&#x2F;gitlab.com&#x2F;esr&#x2F;reposurgeon&#x2F;blob&#x2F;master&#x2F;GoNotes.adoc" rel="nofollow">https:&#x2F;&#x2F;gitlab.com&#x2F;esr&#x2F;reposurgeon&#x2F;blob&#x2F;master&#x2F;GoNotes.adoc</a><p>[^2]: <a href="https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;runtime&#x2F;trace&#x2F;" rel="nofollow">https:&#x2F;&#x2F;golang.org&#x2F;pkg&#x2F;runtime&#x2F;trace&#x2F;</a>')