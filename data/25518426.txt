Item(by='djstein', descendants=None, kids=[25518577, 25519625], score=None, time=1608736777, title=None, item_type='comment', url=None, parent=25518191, text='Look, this argument is always thought provoking, but not worth any devs time to execute. Django&#x2F;Rails&#x2F;Spring&#x2F;.Net have years of combined dev  experience. They contain almost all the things every web application needs, with highly adopted off the shelf plugins for everything else. When engineers fall for the trap of Flask&#x2F;Express&#x2F;Sinatra&#x2F;Go they don’t realize they’ll either be a. Writing everything the above frameworks have by hand or b. Cobbling together a ton of different&#x2F;non related tools that may not be battle tested. In either case they spend time writing features we solved 20 years ago. My favorite example of this is database connections&#x2F;migrations&#x2F;translations.<p>You suggested using nextjs for the backend. This weeks flavor of nextjs database connections is to be done with Prisma. Setting the two up together is no walk in the park. So great, you’ve spent a week setting up Prisma and the layers which connect it to your API. You’ll probably now task yourself with connecting the database to a GraphQL API with a Playground (another week). What about auth? Hand roll of reach some the suggested Auth0 library for nextjs. Another week of integrating. You can see the pattern. Meanwhile, the Django user has everything setup in day one, nextjs app for front end only deployed on day 2, and is building user features day 3.<p>We haven’t even talked about setting up request middleware, integration with logging tools, distributed tracing, exception aggregators, sending email, scheduled background tasks. Which you can spend another week for each or just go to your battle tested framework of choices’ doc page.')