Item(by='abeppu', descendants=None, kids=[25667086], score=None, time=1609971903, title=None, item_type='comment', url=None, parent=25643940, text='When is &quot;mastery&quot; a meaningful concept for a field of endeavor? I think we wouldn&#x27;t believe it makes sense to &quot;master&quot; physics or math, because the advanced work in those fields focuses on open problems. Even if one understands classical physics well, one cannot make specific predictions about medium-sized, low-ish energy systems like a double pendulum. Can anyone claim to be a &quot;master&quot; of an area in which there are such large known gaps in everyone&#x27;s knowledge?<p>Though in software engineering we have a lot of prior examples of successful and unsuccessful projects, we also have lots of open frontiers. And in some ways, it&#x27;s much harder to &quot;know&quot; that an engineering approach or paradigm is &quot;right&quot; than it is to know that a theorem is true.<p>How can we make types track the &quot;important&quot; invariances of a system? How can we convince ourselves that a distributed system can guarantee certain properties, or that a modification to that system doesn&#x27;t break those guarantees? If I build a homomorphic encryption system as a service, how would I build debugging tools for it? Acknowledging the halting problem and its cousins, when can static analysis tools make useful, meaningful predictions about programs?<p>In the bronze age, you could build an impressive stone tower. Sometimes you could even make it stay standing. But I don&#x27;t think there were any master civil engineers.')