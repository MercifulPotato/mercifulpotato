Item(by='RangerScience', descendants=None, kids=None, score=None, time=1607126296, title=None, item_type='comment', url=None, parent=25305746, text='Hmm.<p>So what I&#x27;m doing is that I have a wrapper object with a private member variable that&#x27;s the client from the service&#x27;s API library (for this example, it&#x27;s DialogueFlow). My wrapper then has a function for each basic thing that my code actually wants to do with the library, translating from the plain data objects (or straight arguments) that&#x27;re in use in the rest of my codebase into the nested object mess that DF talks in (and back again, when there&#x27;s return values).<p>Then in tests, I just monkeypatch the private `client` method&#x2F;variable to return&#x2F;be the mock. The mock then replicates only the functionality that I actually use from the service&#x27;s library, which is easy to do since there&#x27;s only one file to look at for all usage.<p>I now have my own DSL for interacting with the service, and I understand the service well enough to fake it, which has been super helpful. So far I&#x27;m loving it, and it doesn&#x27;t feel at all like the &quot;where&#x27;s the !#$%! bean&quot; hell of Spring.')