Item(by='brknckspd', descendants=None, kids=None, score=None, time=1601950417, title=None, item_type='comment', url=None, parent=24692865, text='&gt; I&#x27;m much more concerned with developers writing code which cannot perform well at scale, or which becomes unreliable at scale, where machine failures are common<p>Would you mind expanding (or linking to a documentation) on how Orleans enables reliable systems?<p>I watched this talk (<a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9OMXw0CslKE" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9OMXw0CslKE</a>) that uses an example web application called Smilr to demonstrate some of the features of Orleans. However, that talk doesn&#x27;t really go into detail on how failures are handled.<p>For example, in the Smilr app, each &#x27;Event&#x27; grain is  responsible for notifying an &#x27;Aggregator&#x27; grain whenever it comes into existence (or an existing one has its updated). What happens when a call from Event grain to Aggregator grain fails? Who is responsible for retrying?<p>Link to the code - <a href="https:&#x2F;&#x2F;github.com&#x2F;benc-uk&#x2F;smilr&#x2F;blob&#x2F;master&#x2F;orleans&#x2F;Grains&#x2F;EventGrain.cs#L48" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;benc-uk&#x2F;smilr&#x2F;blob&#x2F;master&#x2F;orleans&#x2F;Grains&#x2F;...</a>')