Item(by='yowlingcat', descendants=None, kids=[24709352], score=None, time=1602080708, title=None, item_type='comment', url=None, parent=24708444, text='Wow, great comment. I ran into similar issues that DoorDash had with Celery&#x2F;RabbitMQ a while back (~2013-2014) so I&#x27;m surprised the plague still continues. It&#x27;s for that reason that I pushed for going with SQS after that point.<p>The way I saw it, a message queue is a really fundamental piece of reliable distributed systems. It&#x27;s fundamentally stateful and I would like it to never go down and certainly never result in dropped messages&#x2F;tasks. Like with an RDBMS, if I can pay someone else to solve that problem for a reasonable fee, I will rush to give them my money. The next time I built a queued task management system, I used SQS. In the past 7 years I&#x27;ve used it, it&#x27;s generally worked like a dream.<p>I can understand if for performance, cost optimization, transparency or portability reasons you still want to run your own RabbitMQ cluster. But my default bias is against that. So with that said, I&#x27;d like to ask a follow up question to this excellent comment: did you consider a managed queue like SQS? If so, why did you elect not to go with it? SQS even has a celery broker now (although certainly not as cleanly integrated as Redis or RabbitMQ).')