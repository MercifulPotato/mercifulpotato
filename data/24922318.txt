Item(by='CyberRabbi', descendants=None, kids=None, score=None, time=1603909490, title=None, item_type='comment', url=None, parent=24921390, text='&gt;&gt; always use .value_or()&#x2F;.value()<p>&gt; But neither of these solve the problem either. Neither one forces the programmer to really confront the possibility of nullness and write the appropriate if&#x2F;else block.<p>.value_or() actually does and you can certainly add a lint check against dereferencing optional or using .value() if you’d like. C++ does not Yet provide Case-style syntax for handling variants like rust, outside of macros and the standard library will certainly not define macros.<p>I think what you have done for your codebase makes sense based on your preferences but I think the standard optional works pretty well given the variety of code based and styles it’s intended to support.<p>&gt; It was already severely hazardous with pointers, that&#x27;s the problem.<p>So then don’t use the dereference operator.')