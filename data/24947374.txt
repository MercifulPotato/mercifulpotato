Item(by='anarazel', descendants=None, kids=[24947602, 24964323], score=None, time=1604096088, title=None, item_type='comment', url=None, parent=24947222, text='&gt; can you elaborate?<p>On what exactly?<p>The freeze map bit I referenced above is the following commit:\n<a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=fd31cd265138019dcccc9b5fe53043670898bc9f" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p><pre><code>    Commit a892234f830e832110f63fc0a2afce2fb21d1584 gave us enough\n    infrastructure to avoid vacuuming pages where every tuple on the\n    page is already frozen.  So, replace the notion of a scan_all or\n    whole-table vacuum with the less onerous notion of an &quot;aggressive&quot;\n    vacuum, which will pages that are all-visible, but still skip those\n    that are all-frozen.\n    \n    This should greatly reduce the cost of anti-wraparound vacuuming\n    on large clusters where the majority of data is never touched\n    between one cycle and the next, because we&#x27;ll no longer have to\n    read all of those pages only to find out that we don&#x27;t need to\n    do anything with them.\n\n\n</code></pre>\nThis means that an anti-wraparound vacuum (automatically started, even when autovacuum is disabled) is cheaper than it used to be. Still not necessarily cheap, as indexes still need to be scanned (but see below).<p>Some of the additional changes were (reverse chronological order):<p>* 2020-03-28 - &quot;Trigger autovacuum based on number of INSERTs&quot; - <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=b07642dbcd8d5de05f0ee1dbb72dd6760dd30436" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>This is important because it will reduce the cost of an eventual index wraparound, as there will be less work in a later anti-wraparound vacuum<p>* 2020-01-20 - &quot;Allow vacuum command to process indexes in parallel.&quot; - <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=40d964ec997f64227bc0ff5e058dc4a5770a70a9" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>As index processing can be expensive (no equivalent to scanning only changed parts of table), processing them in parallel can greatly reduce the time for a vacuum. Note that this isn&#x27;t yet done by autovacuum.<p>* 2019-04-04 - &quot;Allow VACUUM to be run with index cleanup disabled.&quot; - <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=a96c41feec6b6616eb9d5baee9a9e08c20533c38" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>This can be extremely useful for manual vacuum when getting close to a wraparound, since the index processing step is not necessary to stave of wraparound.<p>* 2018-04-04 - &quot;Skip full index scan during cleanup of B-tree indexes when possible&quot; - <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=857f9c36cda520030381bd8c2af20adf0ce0e1d4" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>This can make vacuums for pretty clean tables vastly cheaper.<p>There&#x27;s also a number of changes that make indexes smaller &#x2F; less likely to bloat. That in turn makes vacuuming more efficient. E.g.<p>* <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=0d861bbb702f8aa05c2a4e3f1650e7e8df8c8c27" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>* <a href="https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit;h=dd299df8" rel="nofollow">https:&#x2F;&#x2F;git.postgresql.org&#x2F;gitweb&#x2F;?p=postgresql.git;a=commit...</a><p>Edit: formatting (gah, why is HN formatting so limited)')