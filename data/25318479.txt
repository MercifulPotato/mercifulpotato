Item(by='rsync', descendants=None, kids=[25318507, 25319954], score=None, time=1607203167, title=None, item_type='comment', url=None, parent=25316021, text='&quot;That isn’t really possible, though: CDNs mean that blocking by IP just doesn’t work. The most effective method I’ve found is transparently redirecting all traffic on port 53 to a DNS server I control. DoH means that I might as well setup a transparent HTTPS proxy.&quot;<p>This is a very good point and I am dealing with this myself on my home networks.<p>Like any household&#x2F;family we have some number of dubious&#x2F;untrusted devices that still need Internet access.<p>By establishing my own recursive resolver I can act as a chokepoint (and monitoring point) for their behavior online.  It&#x27;s a very elegant solution, actually, and I have created a nice integration between my datacenter-hosted resolver and nextdns.io as the adblocking upstream DNS.<p>DoH breaks all of this.<p>I have no interest in diving down the &quot;MITM my own network by inserting custom certs into embedded devices that may or may not use them&quot;.<p>Since we&#x27;re talking about it, though, <i>it occurs to me</i> that you could quickly do a DoH lookup to every single new IP connected to, outbound, from your network - and then block all IPs that answer your DoH query.  You&#x27;re basically pre-testing all new SSL connections to see if they are to a DoH resolver that you (presumably) don&#x27;t want to talk to ...<p>This solves the CDN problem ... does it solve the problem entirely ?  I have only just thought of this moments ago ...')