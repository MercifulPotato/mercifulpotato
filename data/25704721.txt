Item(by='knorker', descendants=None, kids=[25705025, 25704830], score=None, time=1610226293, title=None, item_type='comment', url=None, parent=25703903, text='&gt; Why? I don&#x27;t see how it&#x27;s different from requiring a user to install a compiler to build a particular language.<p>The various build systems I&#x27;ve seen, including CMake, are portability projects in themselves. Yes, to build a C++ program you need a C++ compiler. But if it&#x27;s using CMake then you need CMake. Oh, but you don&#x27;t have that. Ok, now you have to install that.<p>Oh, it requires Python X.Y (I&#x27;m not saying CMake does, but I&#x27;ve seen others that do, and CMake has other similar things)? Oh, this system doesn&#x27;t have that. So now I need to build Python from source. Does Python have any dependencies, perhaps? (or worse, you have to use backports, which pull in 1000 dependencies so that now you have a frankensystem)<p>If you&#x27;ve ever been at the point where two steps down the dependency chain you have to build something as fundamental as Python, then you probably know that this is not a fun experience. And in fact you may run out of disk space, several gigs of source and object code later. (not every system is a 100TB server)<p>The whole thing about portability is that it should actually work even on systems the original developer does not have access to. If all you need to support is Ubuntu 18.04 (or newer) and Windows, then why not just have a Makefile and a MSVC project file? That would be much easier than CMake or autotools.<p>Oh, and I&#x27;ve also been hit by dependencies of the build system being too NEW. E.g. CMakeList.txt using features removed in newer versions.<p>And that&#x27;s how autotools is different. The ONLY dependency is a POSIX shell. Do you have that? Then you can build.<p>The number of times I&#x27;ve seen CMake try to link with &quot;-llibfoo&quot; (it&#x27;s &quot;-lfoo&quot;) or be entirely confused about how I&#x27;m not running the exact same system the developer is, I can&#x27;t even count. (e.g. failing to build because &quot;this is not an amd64 system&quot;â€¦ uh, yes it is, with zero logs about why it thinks that)<p>&gt; The elephant in the room here is windows, and at this current point in time, CMake is about as portable there as autotools because Visual Studio has built in support for it.<p>Well that just means CMake has nothing at all going for it, if they are as portable.')