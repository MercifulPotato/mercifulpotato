Item(by='mschaef', descendants=None, kids=[25844298], score=None, time=1611095431, title=None, item_type='comment', url=None, parent=25838757, text='pavlov is right.<p>Early versions of Windows all ran in real mode. Multiple Windows programs were loaded into the same real mode address space (no protection) and co-operatively multitasked based on the GUI&#x27;s messaging infrastructure. (A program could just stop processing GUI messages and totally monopolize the CPU.) There was also some limited support for memory relocation via a block lock&#x2F;unlock mechanism built into the memory manager. If you wanted to run a DOS program, this was all suspended, with the DOS program given control over the full machine in the interim.<p>What Windows&#x2F;386 did is put a 386-specific V86 multitasker called VMM underneath all of this. This multitasker had isolation between the processes it ran, one of which would be the Windows GUI environment I described above and others could be other DOS Programs, for which there were also provisions to put the output into a window of the GUI. This is really the first moment Windows got protected mode support, although none of the user processes actually saw the larger address space.<p>It&#x27;s Windows 3.0 that let the GUI itself run in protected mode, albeit still with 64K segmentation. Combined with some graphics and usability improvements in 3.0, this is really why 3.0 &#x27;got it right&#x27; in terms of feature set and price point.<p>Windows for Workgroups 3.11 then moved the file system to protected mode, a product called Win32s let Windows programs themselves use 32-bit segment addressing, and combination of all of that that was the foundation for the &#x27;fully 32-bit&#x27; Windows 95, which just moved a bunch more functionality into 32-bit code and the VMM 32-bit multitasker originally introduced in Windows&#x2F;386.')