Item(by='yason', descendants=None, kids=[25418690, 25419841], score=None, time=1607958110, title=None, item_type='comment', url=None, parent=25417421, text='RAII is a special case of defer, due to how it abuses constructors and destructors to hook into the points of entering and exiting scope. You could write a RAII implementation in terms of defer but not the other way around.<p>RAII doesn&#x27;t help with a generic pair of init and deinit functions, such as malloc() and free() for example, unless you wrap your mallocs into &quot;memory objects&quot; or something. You can&#x27;t do anything with RAII unless you wrap your stuff into objects which just forces the OO crap on everything regardless of whether it&#x27;s a good fit for the OO paradigm.<p>But even in RAII, classes are merely just a way to bind init and deinit together. As a result, you can&#x27;t &quot;forget&quot; to free the resource. (Unless you use the new operator...) But this is merely an interface issue: defer could be of the form<p><pre><code>    void *block = defer malloc(SZ) with free(block);\n</code></pre>\nor something similar that requires the init and deinit calls to be part of the defer expression itself.<p>Nevertheless, a defer is clearly a useful language feature that C actually lacks. Currently C doesn&#x27;t offer the code any attaching points to the lexical scope of the program. You can fake it with a special for(;;) statement but it&#x27;s a kludge and even by wrapping it into a macro it&#x27;s very hard to make it a generic solution.')