Item(by='abathur', descendants=None, kids=None, score=None, time=1604853967, title=None, item_type='comment', url=None, parent=25025842, text='I agree with most of this, but wanted to comment on the &quot;developer environment&quot; part. TL;DR: I feel like you&#x27;re under-valuing this part?<p>&gt; I think nix isn&#x27;t as useful for developers using it to setup their workstation [...] I like that I can just run &quot;nix --install myPackages&quot; and have the exact, up-to-date versions of software installed... but, it&#x27;s not often that I need to run this.<p>This might be idiomatic to me (i.e., the devices I use; how; my level of anxiety; etc.) but I have (historically) found OS reinstalls and system moves disruptive.<p>Over time, the work, documents, downloads, config changes, cruft, old apps and such on a system all congeal into a big blob of system state. To move with confidence, I ended up with a few choices: 1) have the old system runnable as a reference so that I can jump but have it as a reference every time I encounter something that&#x27;s missing or misconfigured, 2) manually inventory everything on the system to triage what needs to be carried forward and what is crap, 3) copy everything on the system and pretend I&#x27;ll take the time to do number #2 later (ha! in reality I&#x27;ll just accumulate multiple nested copies stretching back decades!)<p>Adopting Nix enabled me to declare my personal essentials, and per-project essentials. This got me close enough to <i>confident I can quickly prepare a fresh device</i> that it motivated me to close most of the remaining gaps on macOS. Instead of feeling like it&#x27;d take me days+ to get back to full productivity on a clean device, I know I just need an hour or two.<p>This confidence liberates me from lot of gnawing everyday anxieties about (i.e., infinite permutations of how inconvenient it would be to lose my system at [already stressful moment where I&#x27;m under pressure to deliver something]).<p>&gt; looks to me like people are just fine using images of development environments&#x2F;toolschains with VMs or Docker. etc.<p>I used to be in the VM (virtualbox + vagrant&#x2F;chef&#x2F;shell) camp. I was net-happier with that than single-system state and things like virtualenv, but on a laptop I&#x27;m not very keen on the extra resource use and performance penalty, and over time I still found one shift or another (virtualbox&#x2F;vagrant updates, chef cookbook updates, VM image updates, or a VM image that stops publishing) created a fairly regular drumbeat of unexpected, low-leverage debug time.')