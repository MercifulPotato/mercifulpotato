Item(by='Supermancho', descendants=None, kids=None, score=None, time=1606017110, title=None, item_type='comment', url=None, parent=25172464, text='&gt; 2. Buy Almost Always Beats Build<p>The prices for a good buy make no sense to an existing business (without VC infuse). RENT beats build.<p>&gt; System A needs building blocks X,Y,Z to work<p>When an American company buys a product with assurances that certain qualities exist (even as small as a $10k purchase), roughly 95% of the time it will fall short. You will have to build some hack solution (which the seller is usually happy to point out) or just ignore the missing feature. There&#x27;s usually very little you can cannibalize out of a purchased product sourcecode in a full rewrite.<p>There was a 1 in 25+ cases as an exception, in my career. My company A was purchasing another european company B at over $100m with a full audit clause prior. My team was flown out to the UK and worked on Company B&#x27;s technology for a couple weeks. It operated exactly as expected with the capabilities they presented (as the audit assured) when we brought the code back to the developers in the US...with branding changes, etc.<p>&gt; 5. QA Gates Make Quality Worse\n&gt; Secondly, the teams doing QA often lack context and are under time pressure. They may end up testing “effects” instead of “intents”.<p>A lot of this is finger pointing. If you don&#x27;t tell the QA what or why, the tests can&#x27;t be written to infer this. If the tests can&#x27;t be maintained, you have a failing QA dept, not a barrier to quality by the mere existence of the gates.<p>&gt; 7. Simple Always Wins<p>Then you don&#x27;t need to BUY it, just BUILD it.<p>&gt; 8. Non-Production Environments Have Diminishing Returns<p>You want at least 3, maybe 4.<p>- Dev (that should be a local docker env).<p>- Managed Test (for QA to always use).<p>(-) Ephemerals for testing deploys, scaling, etc<p>- Prod (Prod)')