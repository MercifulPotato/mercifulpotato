Item(by='theon144', descendants=None, kids=None, score=None, time=1605222316, title=None, item_type='comment', url=None, parent=25075191, text='I&#x27;m sorry, but as a fellow Python &quot;devop&quot; too, this really reads like empty apologism.<p>&gt;Nothing scales well. scaling requires lots of effort.<p>Sure, just like all PLs have their flaws, and most software has security vulnerabilities. But it&#x27;s a question of degree and the <i>tendency</i> of the language. Different languages work better in different domains, and fail in others, and what Python is specifically bad at is <i>scaling</i>.<p>If only for the lack of (strong&#x2F;static) typing and the relatively underpowered control flow mechanisms (e.g. Python often using exceptions in their stead)... While surely all languages have pain points that show up at scale, Python still has a notable lot of significant ones precisely in this area.<p>&gt;docker, poetry, venv...<p>Yes, and this is exactly the point. There&#x27;s at least three different complex solutions, none of which can really be considered a &quot;go-to&quot; choice. What is Rust doing differently? Hell, what are Linux distros doing differently?<p>&gt;If you&#x27;re really into performance then dump out to C&#x2F;C++ and pybind it.<p>If you want performance, don&#x27;t use Python - was the parent&#x27;s point.<p>&gt;If we are being realistic, most of the time 80% of python programs are spend waiting on network.<p>This really, really doesn&#x27;t apply to all of programming (or even those domains Python is used in). Besides, what argument is that? If it were true for your workload, then it would be so for all other languages too, meaning discussion or caring about performance is practically meaningless.<p>&gt;Granted, python is not overly fast, but then most of the time your bottleneck is the developer not the language.<p>Once again, this applies to all languages equally, yet, for example, Python web frameworks regularly score near the bottom of all benchmarks. I doubt it is because of the lack of bright programmers working in Python, or the lack of efforts to make the frameworks faster.<p>&gt;Python isn&#x27;t the problem, its programmer being &quot;clever&quot; or making needless abstractions of abstractions.<p>Just as C isn&#x27;t the problem, it&#x27;s the programmer forgetting to check for the size of the buffer, and PHP isn&#x27;t the problem, it&#x27;s the programmer not using the correct function for random number generation.<p>You can always trace any given error to a single individual making an honest mistake, that&#x27;s really not a useful way to think about this. It&#x27;s about a programming language (or an environment) leading the programmer into wrong directions, and the lack of safety measures for misguided &quot;egotistical programmers&quot; to do damage. You can blame the programmers all you want, but at the end of the day, the one commonality is the language.<p>Now Python is still one of my favorite languages, and I think that for a lot of domains, it really is the right choice, and I can&#x27;t imagine doing my work without it. But performance and large, complex systems, is not one of those domains, and I honestly feel like all you&#x27;ve said in Python&#x27;s favor is that other languages are like that too, and that it&#x27;s the fault of the programmers anyway.')