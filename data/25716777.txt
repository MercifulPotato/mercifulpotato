Item(by='jbmsf', descendants=None, kids=None, score=None, time=1610298677, title=None, item_type='comment', url=None, parent=25716234, text='It&#x27;s always a trade-off though. You say you write most of your own software, but that&#x27;s probably not true for, say your OS or programming language, or editors, or a million other things. Cloud software is the same; you might not be producing the most value if you spend your engineering hours (re)creating something you could buy.<p>In my own experience:<p>- AWS SNS and SQS are rock solid and provide excellent foundations for distributed systems. I know I would struggle to create the same level of reliability if I wrote my own publish-subscribe primitives and I&#x27;ve played enough with some of the open source alternatives to know they require operational costs that I don&#x27;t want to pay.<p>- I use EC2 some of the time (e.g. when I need GPUs), but I prefer to use containers because they offer a superior solution for reproducible installation. I tend to use ECS because I don&#x27;t want to take on the complexity of K8S and it offers me enough to have reliable, load-balanced services. ECS with Fargate is a great building block for many, run-of-the-mill services (e.g. no GPU, not crazy resource usages).<p>- Lambda is incredibly useful as glue between systems. I use Lambda to connect S3, SES, CloudWatch, and SQS to application code. I&#x27;ve also gone without Lambda on the SQS side and written my framework layers to dispatch messages to application code. This has advantages (e.g. finer-grain backoff control) but isn&#x27;t worth it for smaller projects.<p>- Secrets manager is a nice foundational component. There are alternatives out there, but it integrates so well with ECS that I rarely consider them.<p>- RDS is terrific. In a past life, I spent time writing database failover logic and it was way too hard to get right consistently. I love not having to think about it. Plus encryption, backup, and monitoring are all batteries included.<p>- VPC networking is essential. I&#x27;ve seen too many setups that just use the default VPC and run an EC2 instance on a public IP. The horror.<p>- I&#x27;ve recently started to appreciate the value of Step Functions. When I write distributed systems, I tend to end up with a number of discrete components that each handle one part of a problem domain. This works, but creates understandability problems. I don&#x27;t love writing Step Functions using a JSON grammar that isn&#x27;t easy to test locally, but I find that the visibility they offer in terms of tracing a workflow is very nice.<p>- CloudFront isn&#x27;t the best CDN, but it is often good enough. I tend to use it for frontend application hosting (along with S3, Route53, and ACM).<p>- CloudWatch is hard to avoid, though I rather dislike it. CloudWatch rules are useful for implementing cron-like triggers and detecting events in AWS systems, for example knowing whether EC2 failed to provision spot capacity.<p>- I have mixed feeling about DynamoDB as well. It offers a nice set of primitives and is often easier to starting use for small projects than something like RDS, but I rarely operate at the scales where it&#x27;s a better solution than something like RDS PostgreSQL with all the terrific libraries and frameworks that work with it.<p>- At some scale, you want to segregate AWS resources across different accounts, usually with SSO and some level of automated provisioning. You can&#x27;t escape IAM here and Control Tower is a pretty nice solution element as well.<p>I&#x27;m not sure if I&#x27;m up to 20 services yet, but it&#x27;s probably close enough to answer your question. There are better and worse services out there, but you can get a lot of business value by making the right trade-offs, both because you get something that would be hard to build with the same level of reliability and security and because you can spend your time writing software that speaks more directly to product needs.<p>As for &quot;having a fantastic time&quot;, YMMV. I am a huge fan of Terraform and tend to enjoy developing at that level. The solutions I&#x27;ve built provide building blocks for development teams who mostly don&#x27;t have to think about the services.')