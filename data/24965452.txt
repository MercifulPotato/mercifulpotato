Item(by='codebje', descendants=None, kids=None, score=None, time=1604301281, title=None, item_type='comment', url=None, parent=24964594, text='You&#x27;re combining acceptable structural representations with validated as correct inputs - this is a trap to be careful of.<p>It&#x27;s real-world data, which is rarely 100% clean and correct. If you can only represent clean and correct data, you probably can&#x27;t handle all the data you&#x27;ll need to.<p>For an email, a &quot;newtype Email = Text&quot; is, IMO, correct. You can break it down as far as you need though: &quot;data Email = Email (Maybe Name) LocalPart Domain&quot; eg, with the three sub-types being newtypes of text. If you try to go further you&#x27;ll run into problems that the best definition of &quot;valid&quot; is &quot;works when used.&quot;<p>The situation for URLs is similar.<p>ZIP codes is an even trickier one - if you can only represent genuine ZIP codes, what happens if you need to represent an address where someone&#x27;s accidentally transposed two digits and wound up with an unused ZIP code? If you&#x27;re not US domestic only, what do you do for the four billion or so humans who don&#x27;t have a structured address at all?<p>(There&#x27;s a reason vCard gave up on forcing structured addresses and added a &quot;just whatever this text chunk here says&quot; alternative).<p>If you want to represent &quot;validated version&quot; data then IMO it&#x27;s sufficient to use a &quot;data ValidatedEmail = ValidatedEmail Email&quot; with a non-exported constructor and a &quot;validateEmail :: Email -&gt; Maybe ValidatedEmail&quot; function.<p>If you&#x27;re, say, the USPS and really must represent valid ZIP codes and only valid ZIP codes, you&#x27;ll perhaps wind up in the rabbit hole of defining a hierarchical hot mess of sum types. Or pragmatically accept you will risk invalid ZIP codes to avoid needing to do that.')