Item(by='floatrock', descendants=None, kids=[25938315], score=None, time=1611807436, title=None, item_type='comment', url=None, parent=25936394, text='Wasn&#x27;t immediately clear to me why the derivative comes into play, but let me see if I understand the gist of it. I think this is something interesting I haven&#x27;t thought about in dataviz before...<p>So in a traditional 2D heatmap, we discretize the space into squares or bins, then color the bin &quot;proportional&quot; to the number of points that fall inside the bin.<p>If we&#x27;re making a 2D heatmap of a timeseries, though, we don&#x27;t really want to count up the discrete points that make up the timeseries because our binning may not line up with our timeseries sampling frequency. Especially not if we want a very high-resolution heatmap, where each bin is sized to be 1 pixel.<p>So the solution isn&#x27;t to count the number of <i>points</i> (from the timeseries data series) in each bin, but rather to count the number of <i>lines</i> that get projected&#x2F;drawn into each bin (pixel).<p>But we need to go a step further... if we think of each bin as a hypothetical square, the shortest line through a square is a vertical or horizontal line. And the longest line through a square is a diagonal line. So if we want to represent &quot;how much&quot; of the line goes through a square, we need to measure its slope. Hence, derivative.<p>So by 2D heatmapping lines instead of points, we&#x27;re not just counting how many lines fall into each bin, but we also need to weigh each bin-line occurrence by it&#x27;s arc length, which we use the derivative as a proxy for.<p>Neat! (I think...)')