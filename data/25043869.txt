Item(by='lmm', descendants=None, kids=None, score=None, time=1604997172, title=None, item_type='comment', url=None, parent=25043728, text='In a good Scala codebase you use the implicitness to put the business logic front-and-center and push secondary concerns into the background, but without making them completely invisible. The plaintext becomes something akin to the DSLs that people write in e.g. Ruby (using metaclasses and other such magic), but when you open it in an IDE (or compile it in your head) all those extra details become visible to you in a reliable way, rather than having to guess what a given piece of code actually does.<p>IMO modern language designers <i>should</i> be making IDE-first languages - after all, most serious programmers <i>do</i> use IDEs (even if they build that IDE within Emacs or Vim). The problems with &quot;visual languages&quot; are that without a textual representation you can&#x27;t meaningfully diff&#x2F;merge&#x2F;blame, not that using the GUI is an inherently bad idea. With Scala you get the best of both worlds: it&#x27;s textual <i>enough</i> that version control works properly, but you have standard-ish way of folding, hovering etc. that mean that you can &quot;zoom in&quot; on the details of unfamiliar code but also &quot;zoom out&quot; to get a clear overview, in a way that few other languages manage.')