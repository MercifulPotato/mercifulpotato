Item(by='Silhouette', descendants=None, kids=[25805402], score=None, time=1610821229, title=None, item_type='comment', url=None, parent=25802738, text='Not any time soon, certainly. But it really should do. It&#x27;s a language that was designed hastily and without a solid foundation. That was no big deal at the time, but it causes a horrible loss of quality and productivity now that it has become one of the most-used programming languages in the world.<p>JavaScript has a quirky and highly dynamic type system, with lots of edge cases that can cause surprises. See the famous &quot;WAT?&quot; presentation for some examples, though that was only a few minutes long and so could only scratch the surface.<p>JavaScript has awkward syntax, which makes it unnecessarily difficult to write tools and libraries to support it, as well as creating unusual complications like ASI.<p>Modern JavaScript is trying to be half-imperative, half-OO and half-functional programming, and there isn&#x27;t enough sensible grammar to go around. This makes various idioms you&#x27;d often use in each style in other programming languages awkward in JS, while at the same time not providing some of the best features found in languages more specialised for each style.<p>JavaScript has a tiny standard library, and what it does have has plenty of inconsistencies and quirks. This, more than anything else, has led to a catastrophically complicated landscape of large JS programs importing on hundreds of relatively small libraries via transitive dependencies, in a tangled mess that probably no-one has ever even looked through on most projects. That&#x27;s how you get the left-pad fiasco, but more generally, it&#x27;s a staggering hit on productivity because everyone has to jump through hoops to do even quite simple tasks and often people choose to jump through slightly different sets of hoops that get a similar end result, so now you have multiple ways of doing the same things in your code and extra bloat in your build. It&#x27;s also a legal and security nightmare just waiting to happen.<p>TypeScript inherits almost all of the above. It does improve on the type checking, obviously, but even there its type system is actually unsound because its developers made the choice to prefer JS compatibility rather than a completely foolproof type checker. I think that was a reasonable choice, but it doesn&#x27;t change the fact that the one big feature TS brings to the table is actually flawed because of its JS legacy.<p>None of this should be surprising to anyone who programs JS&#x2F;TS regularly, but since my previous comment got heavily downvoted I feel the need to defend it with more concrete and objective criticisms.<p>Given the importance of web development in the modern software landscape, I truly believe that adopting much better languages -- languages designed carefully, built on solid theoretical foundations, learning the lessons from decades with JS and other programming experience since JS was created, equipped with a good standard library and essential tools -- could bring a qualitative improvement in many important respects, particularly productivity and reliability, across what is now a vast part of the software industry.<p>I&#x27;m not crazy and have no illusions that this will just magically happen tomorrow, but with the advent of WASM, there is at least a chance that with a big backer or two behind it, something new might have a shot at becoming established and, in time, attracting enough support to take over.')