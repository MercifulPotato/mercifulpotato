Item(by='steveklabnik', descendants=None, kids=[24719511], score=None, time=1602167701, title=None, item_type='comment', url=None, parent=24719378, text='<a href="https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2000-const-generics.html" rel="nofollow">https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rfcs&#x2F;2000-const-generics.html</a> is the design document, it may or may not be a good resource depending on your knowledge of Rust.<p>A classic example of them being used in Rust is to be generic over arrays, like what the blog post talks about. Arrays encode their length as part of the type; [T; N] is the type of an array of Ts that’s N elements long. In other words:<p><pre><code>  fn foo&lt;T&gt;(array: [T; ?]) {\n</code></pre>\nHow do you define ? to work on any length? When const generics is implemented, you’d write<p><pre><code>  fn foo&lt;T, const N&gt;(array: [T; N]) {\n</code></pre>\nand now you can call this function on arrays of varying lengths.<p>There&#x27;s a bit more to it than that, but that&#x27;s the core of it. Does that help?')