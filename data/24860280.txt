Item(by='samatman', descendants=None, kids=[24860434], score=None, time=1603386210, title=None, item_type='comment', url=None, parent=24855784, text='I don&#x27;t agree, as I&#x27;ve said, because PEG is a declarative formalism, and LALR is a parsing strategy. GLL implemented with graph-structured stacks can and will produce a parse forest for an ambiguous grammar, LALR will manifest one of those parses for the <i>same grammar</i>.<p>To lean on that means you have hidden information: your grammar is BNF + LALR, or BNF + GLL, not just BNF. PEGs, by contrast, are always PEGs. What you see is what you get.<p>A grammar in PEG format will always give you one parse, and which parse is predictable. If you want a different parse, you have to rewrite it. Indeed, as I&#x27;m sure you know, your example grammar isn&#x27;t valid in the original PEG formalism, which prohibits immediate left recursion. Automatic rewrites into an intermediate rule are the leading method of allowing it.<p>Ambiguity is a well-defined concept in grammars, and PEGs aren&#x27;t.<p>I&#x27;ve noticed that a lot of CFG enthusiasts don&#x27;t like this about PEGs. They consider it inelegant, unprincipled. Some of that is aesthetic, some is unfamiliarity, and some is sunk cost: none of it actually engages with the formal expressive power of PEGs, nor their ergonomics as a practical tool for development.')