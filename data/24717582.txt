Item(by='fsloth', descendants=None, kids=None, score=None, time=1602151052, title=None, item_type='comment', url=None, parent=24717002, text='The ecosystem is fragmented for historical reasons. Wikipedia pages of each API explain the historical context of each.<p>The main reasons there has not been a big push to create only one graphics API are:<p>1. it&#x27;s hard after the genie of many API:s is out of the bottle (why should i port my code)<p>2. Surprisingly, the benefits would not be that huge (IMO) - compared to the enormous amount of energy this would take.<p>The graphics data the different API:s consume is more or less the same. Since it&#x27;s eventually fed to the same hardware. So for an engine a large part of the non-trivial code is actually graphics backend agnostic.<p>All of the API:s basically<p>1. select whether to draw to onscreen or texture<p>2. load triangles<p>3. load shader program which a) modifies vertices of triangles (projection etc) b) computes pixel color for each sample in triangle<p>4. load variables and textures that are used as input to the shader program<p>5. draw.<p>The shader code has different languages but all of them are more or less isomorphic.<p>The above is a ELY 5 trivialization, but the gist of it is more or less so.<p>The difficult part actually is managing the state of any complex graphics program, not getting the graphics to the screen. So, first you need to learn a graphics API and think that&#x27;s hard. Not so! What&#x27;s actually hard is then figuring out how to make any coherent application around that.')