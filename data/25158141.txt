Item(by='wahern', descendants=None, kids=[25158407, 25158623, 25158574], score=None, time=1605857998, title=None, item_type='comment', url=None, parent=25154556, text='Your point about the dentry cache seems like a non-sequitur. The cache isn&#x27;t the bottleneck; the bottleneck is that NTFS is a crappy filesystem.<p>Yes, I&#x27;ve read this comment: <a href="https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;WSL&#x2F;issues&#x2F;873#issuecomment-425272829" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;WSL&#x2F;issues&#x2F;873#issuecomment-425...</a><p>The argument about Windows not having a single, central dentry cache doesn&#x27;t hold water. For one thing, there&#x27;s no reason to think that a two-level cache would significantly decrease performance. More importantly, the fact that on Windows most VFS work occurs in the filesystem driver itself only proves that Windows could have implemented an EXT4 driver with better dentry and other semantics and permitted WSL1 environments to keep most of its files on an EXT4 volume, which is what happens with WSL2, anyhow.<p>WSL1 could have been better in every way. It would have required them to track a moving target, but they already accomplished semantic parity with seemingly minimal resources. Improving performance was certainly possible, and keeping up would have required significantly less work on its own. At the end of the day, I think the reason WSL1 was canned is obvious: the decision to ship WSL1 was probably accidental. Why accidental? Because anyone with the slightest business acumen would realize that a WSL1 environment with feature and performance parity to open source Linux would mean there&#x27;d be little reason to target Windows&#x27; native environment at all for new software development. And while Microsoft has done relatively well for itself with Azure and other ventures, its revenue still principally derives from Windows and Office, and the last thing Microsoft needs is to accelerate movement away from those products.<p>WSL2 means that Microsoft can keep its Linux environment a second-class citizen without being blamed for it, while still providing all the convenience necessary for doing Linux <i>server</i> application development locally. Integration with the native Windows environment will be handicapped <i>by</i> <i>design</i> and excused as an insurmountable consequence of a VM architecture. For example, with WSL1 and some obvious and straight-forward improvements it would have been trivial to run a Linux-built Electron app with identical performance, responsiveness, and behavior (not to mention look &amp; feel, given the web-like UI). With WSL2 Microsoft will likely only ever provide GUI integration over RDP, which will never have the same responsiveness (not because it&#x27;s theoretically impossible, but because nobody would ever demand it, and in any event it <i>would</i> require tremendously more effort than the comparable WSL1 approach).')