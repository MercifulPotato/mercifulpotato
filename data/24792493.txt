Item(by='Jtsummers', descendants=None, kids=[24793306, 24792925], score=None, time=1602788723, title=None, item_type='comment', url=None, parent=24792111, text='Regarding terminology, this is something I find frustrating in some languages. C functions aren&#x27;t all functions. Java&#x27;s methods aren&#x27;t really all methods on objects (is it really accurate to call a static method, which is called using the class name and not an object instance, a method?). Some languages do make these distinctions, though. Playing around with SPARK&#x2F;Ada at home lately, it makes a strong distinction between procedures (no return) and functions (have a return value). Procedures look like:<p><pre><code>  procedure Put_Line (A : Integer) is\n  begin\n    Put(A); New_Line;\n  end Put_Line;\n</code></pre>\nFunctions look like:<p><pre><code>  function Square (A : Integer) return Integer is\n  begin\n    return A * A;\n  end Square;\n</code></pre>\nSimilarly, in Common Lisp there&#x27;s a clear distinction between functions and methods (really multimethods) by way of how they&#x27;re declared. Functions are singular, have no multiple dispatch based on type, where as you can have many implementations of the same method dispatched on type. Though, again, a function may not really be a function and could be more accurately called a procedure.<p>However, it probably makes sense for most people to think of everything as functions or everything as methods. At least it doesn&#x27;t leave them asking &quot;Which syntax do I use to declare this?&quot;')