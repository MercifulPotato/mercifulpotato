Item(by='DanielBMarkham', descendants=None, kids=[25988735, 25988754], score=None, time=1612180160, title=None, item_type='comment', url=None, parent=25987765, text='Symbol&#x2F;Semantic leakage. In imperative&#x2F;OO, I&#x27;m organizing as I go using well-established and understood paradigms. In functional programming, you&#x27;re making these paradigms as you go along, or at least you should be. If you come in with an &quot;I&#x27;m going to kick some ass by making these classes to solve my problem&quot; attitude, you&#x27;re already headed down the OO track whether you realize it or not. Then, sure as night follows day, you or somebody else starts using a functional paradigm, say HoF.<p>There&#x27;s nothing wrong with any of that. As a professional, you want to be good in multiple paradigms. The problem is that you&#x27;re mixing them all up, whether you realize it or not (Most of the time, programmers don&#x27;t realize it) And now, every piece of code can go down two entirely separate tracks as you suss out your architecture. Not only is that not going to work, it&#x27;s going to make debugging and maintenance a nightmare.<p>This is very, very similar to how good C++ shops work. You&#x27;ve got to tightly limit the way you solve problems in order for all of the programmers involved to be to reason about the code.')