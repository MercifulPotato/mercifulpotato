Item(by='jorangreef', descendants=None, kids=[25171779], score=None, time=1605978845, title=None, item_type='comment', url=None, parent=25167423, text='&quot;Are sector writes atomic? And if so, for what size sectors?&quot;<p>For a database, this is not the question you want to be asking. It&#x27;s a rabbit hole. The right answer (which is not always the answer we want, so we keep asking): no one knows.<p>It&#x27;s better design to err on the side of assuming disk sector writes are never atomic. This would be taking the security stance, e.g. assume an attacker is actively trying to break your protocol, and use cryptographic guarantees to prevent or at least detect them.<p>Kernel developers also can&#x27;t answer these kinds of hardware questions. There&#x27;s too much hardware out there.<p>Disks may give atomicity guarantees and then you discover edge cases where these degrade, or disks may emulate Advanced Format 4096 byte logical sectors but have smaller 512 byte physical sectors underneath. Disks are too complicated (and firmware too buggy) to trust any kind of guarantee. There are too many layers of abstraction.<p>Instead of trying to figure out the safety of the layer beneath you, assume the worst and bring the design back to using end-to-end guarantees.<p>If you assume and plan for the worst, then you don&#x27;t need to ask the question, and you can handle the worst of hardware, without surprises when those guarantees are broken.<p>In fact, with file systems in general, the situation is even worse than for disks, because of disk corruption (3% per 36 month period per disk) and misdirected writes, which most file systems unfortunately don&#x27;t handle. You should never trust any metadata provided by the file system about your journal file (e.g. file size) and use that as part of your recovery protocol, because the file system itself is storing this kind of metadata on the same disk you&#x27;re writing too. Again, something as important as the metadata size of your journal file should be protected by your own end-to-end protocol.')