Item(by='justinpombrio', descendants=None, kids=[25538912, 25538645, 25538552], score=None, time=1608920577, title=None, item_type='comment', url=None, parent=25536961, text='Slices in Rust make for a clean solution:<p><pre><code>  fn binary_search&lt;T: Ord&gt;(mut array: &amp;[T], key: T) -&gt; Option&lt;T&gt; {\n      use std::cmp::Ordering::*;\n  \n      while !array.is_empty() {\n          let middle = array.len() &#x2F; 2;\n          match key.cmp(&amp;array[middle]) {\n              Less =&gt; array = &amp;array[..middle],\n              Equal =&gt; return Some(key),\n              Greater =&gt; array = &amp;array[middle + 1..],\n          }\n      }\n      None\n  }\n</code></pre>\nThe type &amp;[T] is a slice. Under the hood it consists of a pointer into an array, plus a length. So it (i) does some bookkeeping for you and reduces the number of variables you need by 1, and (ii) avoids the &quot;lower + upper overflow&quot; issue.')