Item(by='vlovich123', descendants=None, kids=None, score=None, time=1602086177, title=None, item_type='comment', url=None, parent=24700696, text='&gt; Yes, which is why it is imperative to continually improve and audit such systems, including maybe removing such single points of failure as you noted, both from an insider threat perspective as well as from exploit discovery processes.<p>Can you join me on a journey to build this hypothetical world to figure out how this addresses the Snowden leak?<p>Let&#x27;s imagine a world where every single server had a registered backdoor key. This key also isn&#x27;t the key itself. No, we&#x27;re smart. It&#x27;s instead used to sign one-time use, timestamped keys that give you access. We assume all these servers are also somehow always running the latest version of the software to implement the backdoor to address any exploits that may have been discovered.<p>We control access to this carefully so that you can only request a code &amp; this is validated by all kinds of bureaucratic controls that are never violated for expediency &amp; no mistakes ever needed. Also the system handing out codes itself doesn&#x27;t even have the keys. It has a temporary key that can&#x27;t generate valid signatures past its expiration. To regenerate, we go into a fortified secure vault that is air-gapped. This air-gapped system is used to generate a new key, burning it onto a CD-ROM. So your admin has to, on a monthly basis, go into the vault to generate some secret that can be used to continue backdoor access.<p>Now imagine your admin going into the vault on a monthly basis with a CD-ROM drive that gets burned is Snowden. You&#x27;ve now stolen the root keys for every machine out there.<p>Let&#x27;s also remember a few things that are elided for this hypothetical world we&#x27;ve built.\n1. I may have gotten some details wrong here, but this is <i>really</i> close to how OS updates are handled by Google &amp; Apple. This is treated as one of the most secure ways to do software deployment at scale (we&#x27;re not talking about one-off carefully controlled &amp; vetted backdoors which are a wholly different problems).\n2. Software deployment is hard. There&#x27;s no world in which you will instantly deploy a security fix to your backdoor code. Some machines don&#x27;t have good uptimes &amp; others can be mostly invisible to the internet. Mobile operating systems are different as Google &amp; Apple dictate the HW design. Google has struggled here more pulling vendors along to do the good security things. Are you proposing we standardize on Apple hardware for everything?\n3. If you have the ability to deploy code to any random machine, that deployment mechanism is a target in and of itself. Since every US machine has to implement it in this hypothetical world, this is an attractive exploit. It&#x27;s easier to secure but now the value of compromising it has increased exponentially. We haven&#x27;t heard of any exploits of this but given the value already (&amp; exponentially more if we&#x27;re talking about every single system in the US), we&#x27;re looking at threat actors with ridiculously deep bank accounts &amp; access to technical expertise.\n4. Timestamps are hard. You&#x27;re talking about every single machine in the world. There&#x27;s plenty running the wrong time. So someone changing the clock breaks your ability to backdoor (unless you ignore timestamps, but then your keys you&#x27;re generating are reusable on that website at least).\n5. Key rotation &amp; management is insanely hard. You&#x27;re talking about every machine in the US. Even every server. Mistakes will happen at this scale so your backdoor either won&#x27;t work (best case) or you&#x27;ll have unintended compromises (or likely both).\n6. Complexity &amp; security are diametrically opposed. The more complexity you add the less secure you are. Modern machines are already ridiculously complex.\n7. Everyone outside of the US (including US companies that have servers abroad) will not implement the backdoors. But may implement the backdoors the other nation states will force them to adopt. Sure, it&#x27;s great if you&#x27;re the US forcing your way to gain advantage over other countries. How do you keep these systems segmented so that a backdoor from another country doesn&#x27;t give you access to the US? Moreover, let&#x27;s say the US implements an impenetrable system. Do you think other countries will care to do the same? Does the US share our tech with them at the risk of making it even easier to find flaws? Also how do we manage distribution of such software when there&#x27;s a flaw?<p>No amount of advise to &quot;invent better math&quot; solves the fact that this isn&#x27;t a technical problem. No amount of &quot;build things better&quot; solves the fact that software engineering is hard &amp; we have 0 examples, even in &quot;big tech&quot; which invests billions here annually, of building truly secure systems that are actively trying to prevent any backdoor&#x2F;exploit. Above all else, you&#x27;re proposing a single point of failure for the entire US economy. You can use this to conduct industrial espionage at an even larger &amp; easier scale than happens today or to take down critical infrastructure in a time of conflict.<p>Is there something I missed in my analysis? What part can we &quot;do better&quot; on that doesn&#x27;t result in exposing a significant vulnerability?')