Item(by='nawgz', descendants=None, kids=[25876944, 25876957, 25876976, 25876615], score=None, time=1611348296, title=None, item_type='comment', url=None, parent=25875470, text='As a React dev for half a decade, I strongly disagree with many of your points.<p>&gt; React [includes] so little that you become reliant on a ton of external dependencies<p>React, since hooks, includes a full state management solution - Context, Provider, and hooks.<p>Second, even if you want an actual state management library, both mobx and Redux are quite stable. Applications I have built in 2016 are still running and building with no pain points today, except maybe that the tooling is way better now.<p>Third, all this noise about &quot;the JS scene has so much churn&quot; is kind of crazy. I don&#x27;t know what kind of library evaluation techniques everyone else has, but React is backwards compatible with techniques they&#x27;ve been saying they&#x27;ll deprecate for years, version pinning works perfectly fine, and with TypeScript there&#x27;s less and less churn and mystery than ever before.<p>&gt; Ultimately though, I just shudder to think about writing large, complex enterprise Apps in the latest and greatest<p>This is a comical take. Facebook is powered by React. Large, complex, enterprise, and fully powered by the cutting edge of JS frameworks.<p>&gt; React now looks completely different from React 1-2 years ago<p>But still fully supports the previous way of working, meaning not only has none of your knowledge been invalidated, but you have additional tools at your disposal.<p>&gt; Libraries fall in and out of favor<p>react-router-dom has been my goto for quite some time, as has mobx. Again, you can version pin and stick with any solution as long as you want to - my things powered by react-router 3 are fine still.<p>&gt; I would much rather take &quot;boring&quot;, stable languages and frameworks<p>&gt; I&#x27;m an ML Engineer<p>Is it not true the entire ML ecosystem has been reinvented in the last 5 years? My React code still builds &amp; runs from 2016. I really feel like this is a case of &quot;external person overestimates complexity in external domain, underestimates complexity in internal domain&quot; because everything you&#x27;re saying sounds like you dipped your toes, and didn&#x27;t actually build applications.<p>Final thoughts: you don&#x27;t need to update Webpack to resume building your old project. Your build scripts work just fine. Better yet, don&#x27;t eject from Create-React-App or some other build provider and you never even need to think about this stuff. React is boring and stable, speaking as someone who has used it for half a decade and sees no reason why that won&#x27;t just become a full decade.')