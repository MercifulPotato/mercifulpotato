Item(by='jacobobryant', descendants=None, kids=None, score=None, time=1607666292, title=None, item_type='comment', url=None, parent=25382510, text='Yes, exactly! The nice thing about framing information discovery as a stream-processing problem is that you can plug other methods into it. For a long time I was thinking just in terms of user-item rating matrices, i.e. collaborative filtering. You&#x27;ve got a list of users, a list of items, and ratings for some of those pairs. Pick 10 items to show a given user. But that doesn&#x27;t give the user a whole lot of control.<p>If you think in terms of stream processing instead, you can treat collaborative filtering&#x2F;other types of recommender systems as some black box that generates a stream. For example, Findka&#x27;s ML recommendation algorithm picks a handful of articles for each user every day. It&#x27;s just another stream, and it can be treated exactly the same way as any of the RSS feeds that users subscribe to.<p>So you get a list of sources, some of which are &quot;regular&quot; RSS feeds, some of which are algorithmically generated--and they can come from within Findka or from outside--and then the user should be able to decide how those feeds are aggregated. Bandit algorithms I think are a great fit (including contextual bandits!), but you can also include manual controls. e.g. you could say &quot;feed X should be 10% of my main sink feed&quot;, or &quot;feed Y should be no more than 5% of my main sink feed.&quot; Or give priorities--sample from all the feeds in priority 1 until the contents are exhausted, then move to priority 2 etc. There are probably lots of interesting things that could be done in this space.<p>Recommendation algorithms are often opaque out of necessity (I guess more generally, ML algorithms), but at least this way they wouldn&#x27;t be in control of everything.')