Item(by='michelpp', descendants=None, kids=[25171984, 25172002], score=None, time=1605984952, title=None, item_type='comment', url=None, parent=25159097, text='There&#x27;s always this confusion that comes up whenever PostgREST is discussed on HN, which is many times at this point.  There is the misconception that arises that you use PostgREST to remove your existing stack entirely and you do <i>everything</i> in SQL.  This is not true, you&#x27;re not going to send emails from SQL or run entire multi-GB ETL reductions during an http request.<p>If you want an API call to kick off some external processing, then insert that job into a queue table and do the same thing you always did before, consume the queue out of band and run whatever process you want.<p>Another one that comes up is that somehow postgrest is &quot;insecure&quot;.  Of course, if you invert the problem, you see that postgrest is actually the <i>most</i> secure because it uses postgres&#x27; native security system to enforce access.  That access is enforced onto your API, and you know what, it&#x27;s enforced on <i>every other client to your DB as well</i>.  That&#x27;s a security unification right there.  That&#x27;s <i>more</i> secure.<p>What PostgREST does is let you stop spending months of time shuttling little spoonfuls of data back and forth from your tables to your frontend.  It&#x27;s all boilerplate, install it in a day, get used to it, and move onto the all those other interesting, possibly-out-of-band, tasks that you can&#x27;t get to because the API work is always such a boring lift.')