Item(by='igoose1', descendants=None, kids=None, score=None, time=1611709538, title=None, item_type='comment', url=None, parent=25922137, text='Hi!<p>Consider trying redo[0]. It&#x27;s an idea of D. J. Bernstein (a.k.a. djb) what could already be a good advertising.<p>Your problem can be solved with make as it pointed by others but I see a wonderful example where redo&#x27;s target files are pretty clear describing what redo can do.<p>redo&#x27;s target files are usually SHELL-scripts but they can be whatever you want if it can be executed by a kernel. `redo-ifchange file1` is a command which waits until file1 have been rebuilt or, by other words, waits until a file1&#x27;s target file have been executed if it requires.<p>There are 4 target files to show how to solve your problem --- downloading and merging two files:<p>all.do file is<p><pre><code>  DEPS=&quot;foo.json bar.json&quot;\n  redo-ifchange $DEPS\n  jq -s &#x27;.[0] * .[1]&#x27; $DEPS\n</code></pre>\nfoo.json.do file is<p><pre><code>  curl &quot;http:&#x2F;&#x2F;example.com&#x2F;foo.json&quot;  # redo guarantees that any errors won&#x27;t update foo.json as it can happen in make world.\n</code></pre>\nbar.json.do file is<p><pre><code>  curl &quot;http:&#x2F;&#x2F;example.com&#x2F;bar.json&quot;\n</code></pre>\nAfter creating these files you could write `redo all` (or just `redo`) and it will create a graph of deps and will execute them in parallel --- foo.json and bar.json will be downloading at the same time.<p>I&#x27;d recommend getting started with a Go version of redo --- goredo[1] by stargrave. There is also a link to documentations, FAQ and other implementations on the web-site.<p>[0] <a href="http:&#x2F;&#x2F;cr.yp.to&#x2F;redo.html" rel="nofollow">http:&#x2F;&#x2F;cr.yp.to&#x2F;redo.html</a><p>[1] <a href="http:&#x2F;&#x2F;www.goredo.cypherpunks.ru" rel="nofollow">http:&#x2F;&#x2F;www.goredo.cypherpunks.ru</a>')