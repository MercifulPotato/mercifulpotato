Item(by='ghub-mmulet', descendants=None, kids=None, score=None, time=1610465154, title=None, item_type='comment', url=None, parent=25747667, text='Hello!<p>Clear statement of what the project does:<p>An Open source maintainer uploads a task to code relay \n(like document this function or fix this GitHub Issue).<p>Code Relay assigns this task to a contributor.<p>The contributor makes <i>incremental</i> progress on the task.\nMaybe the contributor splits the task into two subtasks, or writes one line of code.<p>Then code relay assigns the task to <i>different</i> contributor.<p>Like a relay race, the task gets passed on-and-on to different contributors.<p>Why I made it:<p>I made this because I sat down at my computer one day\nto work on open source and it took me 5 hours to:<p>- find a repo with a good-first-bug that I could do,<p>- clone the repo, build it, fix the bug<p>- make a pull request, fix pull-request, and\n get the pull request accepted,<p>I want to make contributing to open source and quick\nand painless as possible.<p>I want to live in a world where you can open your phone,\n make a contribution (no matter how small) in 5 minutes and be done.<p>I want to live in a world where Open source maintainers\ndon&#x27;t burn-out and let their projects die.<p>I want them to be able get the extra contributions they need without becoming a community manager&#x2F;full-time marketer.<p>So that&#x27;s why I made Code Relay.<p>Disclaimers:<p>I don&#x27;t believe that Code Relay will replace fork-pull-request workflow,\nor the contributor-maintainer setup. I do believe that it can supplement\nboth, make them stronger.<p>Likewise, I don&#x27;t think Code Relay will be the most efficient use of a\nprogrammers&#x27; time. The constant context switching alone will slow everything down,\nand one maintainer with knowledge of a project can work faster than\n10 programmers working for 5 minutes at time.<p>However, Code Relay&#x27;s strength is that it attracts programmers that otherwise would not contribute to open source. My hypothesis is that 1000 programmers working for 5 minutes at time, is faster than 1 maintainer. It&#x27;s a matter of scale.')