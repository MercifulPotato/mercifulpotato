Item(by='wruza', descendants=None, kids=[25860803], score=None, time=1611240703, title=None, item_type='comment', url=None, parent=25856325, text='I deeply disagree!<p>Our code is riddled with heavily overloaded meanings in a single value&#x2F;domain, and if you have a variety of filters, you end up with this atrocity:<p><pre><code>  Foo *f1; &#x2F;&#x2F; hey, just test for NULL\n  double f2; &#x2F;&#x2F; hey, just use isnan()\n\n  int f3; &#x2F;&#x2F; aaaaah, crap\n  bool f3_specified; &#x2F;&#x2F; god why\n\n  std::string f4;\n  &#x2F;&#x2F; requires heavy drugs to solve existential catastrophes\n</code></pre>\nCompare that to<p><pre><code>  template &lt;typename T&gt;\n  struct Filter {\n    bool is_specified;\n    T value;\n  };\n\n  Filter&lt;Foo *&gt; f1;\n  Filter&lt;double&gt; f2;\n  Filter&lt;int&gt; f3;\n  Filter&lt;std::string&gt; f4;\n</code></pre>\nAnd the variety of code that has to work with either of these examples.<p><i>What happens if the boolean is true but the filter is null?</i><p>An assertion fails miserably.<p><i>What would the vice versa case even mean?</i><p>That an assertion failed miserably.<p>What happens if the filter is one? Minus one? Equals to PC(IP), BP? If NULL filter has to search for NULL values in a dataset? If we are looking for NAN values in a corrupted one (this one is even more tricky)?<p>Deeply!')