Item(by='loeg', descendants=None, kids=[25319258], score=None, time=1607204378, title=None, item_type='comment', url=None, parent=25318043, text='&gt; If you suddenly changed int to be 64 instead of 32bits you&#x27;d have a similar problem for instance. I don&#x27;t think anybody would expect such a change not to require a full recompile. So what&#x27;s the difference here?<p>intmax_t is supposed to store any sized integer type.  If you introduce a int128_t, it doesn&#x27;t have any impact on &#x27;int.&#x27;  But it does mean that your intmax_t must be int128_t, and if it was 64-bit before, now your ABI changes (for intmax_t-using ABIs).  Ordinarily introducing a new type or function wouldn&#x27;t cause ABI incompatibility, but introducing a wider integer type that intmax_t cannot represent is not a valid choice.<p>I&#x27;d suggest considering ABIs with intmax_t in them unstable, and probably just avoiding use of intmax_t in ABIs entirely.  Integer size-generic routines are best served with wrapper macros and use of the C11 _Generic() construction, or some of the typeof() magic used by, e.g., Linux.')