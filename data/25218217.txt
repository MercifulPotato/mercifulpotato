Item(by='beagle3', descendants=None, kids=[25220813], score=None, time=1606381249, title=None, item_type='comment', url=None, parent=25217713, text='C++ lets you &quot;get things done&quot; when the other tooling you need is your brain. Unfortunately, that might mean template metaprogramming that makes a compile take &gt;50 minutes, and where any syntax error typo generates a 4000-line error message -- but for some people, being to use C++ to get things done is an intellectual reward onto itself.<p>If you wanted to get the same performance from C, you&#x27;d sometimes need to write your own preprocessor&#x2F;code-generator, and&#x2F;or abuse the built in preprocessor, so you can specaialize. To get the same performance in Python you need to go down to C. To get the same performance in Java, you need to do stuff like what&#x27;s mentioned in this thread (allocate 1TB of memory and disable GC, for example).<p>The only place where this is considered acceptable and commonplace, is the C++ community, I guess a chicken-and-egg problem.<p>In most places, you only <i>need</i> that performance in a small part of your pipeline - which in HFT teams will sometimes be done in FPGA or ASICs or NIC firmware. For those places, C++ is also often required, and network effects (and &quot;impedance mismatch&quot;) often mean that it will get used for a whole lot more than where it&#x27;s actually essential.<p>C++ is not the only such community for algo trading, by the way - the K programming language enables fast yet incredibly short implementations, and thus tends to attract competitions in &quot;how short can you get the fastest code&quot; (aka code golfing) to manifest all over implementations. And personally, I&#x27;d much rather have a oneliner K brainteaser that does alot than a huge 100-line C++ template monster that does the same thing 10% more quickly.')