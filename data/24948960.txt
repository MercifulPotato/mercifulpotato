Item(by='coder543', descendants=None, kids=[24949340, 24949436], score=None, time=1604115593, title=None, item_type='comment', url=None, parent=24948871, text='Sure, I guess that&#x27;s fair.<p>Consider that a route might start as an idempotent way to update a RESTful object, but then requirements change over time and that method call now has non-idempotent side effects, such as updating a counter, or sending an email notification. It may not be practical within this system to determine whether the object being PUT is truly identical to the state already in the system, given the high volume of API calls, or the distributed nature of the state. At that point, everyone sits at the table to discuss what color to paint the bike shed. Should we change the verb, breaking existing clients? Should we require two separate API calls in order to separate the additional behavior from the idempotent simplicity of the original PUT request, doubling our API request load and introducing a possible error wherein a client forgets to make (or errors out while making) the second API call? Oh, and by the way, all of the existing clients won&#x27;t benefit from the new, desirable behavior.<p>Neither of those options sound great to the stakeholders, so then you end up with a non-idempotent PUT, through no fault of the original API design.<p>The verbs quickly lose their meaning, and it would be better to spend that time actually considering how the API should evolve instead of worrying about what verb is associated with it.<p>You&#x27;re obviously entitled to your own opinion. I fully admit that I could be wrong in all of this, but this is how I currently feel.<p>My experiences with HTTP have convinced me that the verbs are an abstract idea at best -- and because of that, we would all be better off eliminating PUT and PATCH. POST can do everything that PUT and PATCH can do. PATCH isn&#x27;t idempotent to begin with, and you can&#x27;t rely on the PUT verb to really indicate that a route is truly idempotent and you can just retry it arbitrarily, unless the documentation says so... in which case, POST can also declare that it is idempotent. (which, yes, does sound kind of weird, but I&#x27;ve also seen that.)<p>gRPC does away with the verbs entirely, as far as the developer is concerned, and that seems good to me. When I&#x27;m using a library, the functions aren&#x27;t labeled with POST, PATCH, etc. The relevant behaviors and guarantees are spelled out in the documentation. I would imagine gRPC is a lot like that. But, as I said in the beginning, I don&#x27;t have any direct experience with gRPC... just a lot of gripes with the way that HTTP REST APIs work, and some optimism that gRPC would let people focus on the actual problems at play, instead of lots of random distractions. (The verbs were only one of several such distractions.)')