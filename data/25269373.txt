Item(by='siraben', descendants=None, kids=[25269668, 25269974, 25269542], score=None, time=1606853928, title=None, item_type='comment', url=None, parent=25264694, text='Having worked with Ethereum, especially the low level bytecode, one of the changes I&#x27;m most excited for that I don&#x27;t see mentioned a lot is the addition of eWASM support for nodes. There&#x27;s many problems with the two dominant smart contract languages Solidity and Vyper, for instance bloated codegen that had to be patched otherwise complex contracts size could not be deployed[0], or more theoretical concerns such as soundness, semantics and correctness. Part of the problem is because of no coherent shared intermediate representation and developers writing backends from scratch, and lots of reinventing of the wheel[1]. There&#x27;s an ongoing project[2] to create an LLVM backend for EVM but the stack based nature is at odds with LLVM IR&#x27;s bias towards register-based architectures. (EVM doesn&#x27;t even have a separate stack for return addresses to implement subroutines cleanly!)<p>The switch to eWASM would greatly improve security, efficiency and perhaps allow a diversity of languages to be used on Ethereum. It should be a matter of exposing the appropriate primitives to call other contracts, generate log events, write to the store and so on.<p>[0] For instance, see a PR that reduces codegen from 55K to 1.6K bytes on an innocuous contract <a href="https:&#x2F;&#x2F;github.com&#x2F;vyperlang&#x2F;vyper&#x2F;pull&#x2F;1488" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;vyperlang&#x2F;vyper&#x2F;pull&#x2F;1488</a><p>[1] I&#x27;m guilty of it too; <a href="https:&#x2F;&#x2F;github.com&#x2F;ActorForth&#x2F;evm-assembler&#x2F;blob&#x2F;master&#x2F;docs&#x2F;evm-assembler-talk.pdf" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ActorForth&#x2F;evm-assembler&#x2F;blob&#x2F;master&#x2F;docs...</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;etclabscore&#x2F;evm_llvm" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;etclabscore&#x2F;evm_llvm</a>')