Item(by='jll29', descendants=None, kids=[24689520, 24690103], score=None, time=1601904044, title=None, item_type='comment', url=None, parent=24686863, text='It&#x27;s a good idea to write a book about a data-oriented development style (I&#x27;m working on a methodology, a way of working in data-intensive projects called Data2Value).<p>However, JavaScript or Clojure are not ideal for demonstrating this methodology in the sense that industrial applications will more likely be built in C++, Java or Python. For example C++ and Java support Apache UIMA, which is an industry standard for data-oriented systems. UIMA (originally developed at IBM before open sourced, and use in their Watson system) manages data as immutable objects (e.g. text, videos) that are enriched with annotations (e.g. syntax graphs, topical tags, subtitles...).<p>Functional designs are often well-suited to data flow related processing, whereas in OOP, you end up with a pipeline object and various DataStream objects that it inputs and outputs.<p>In my experience, data-intensive systems often need to:\n- cater for distributed processing due to large-scale (which calls for Apache Spark, and then PySpark or Scala);\n- compute-intensive work like machine learning, which may require GPUs or other bespoke hardware (Tensorflow supports GPUs, Google&#x27;s cloud has TPUs); and\n- special purpose data structures (e.g. Bloom filters, huge persistent graphs, R* trees...) specific to the nature of the processing (this latter point, I guess, contradicts to the author&#x27;s claims).')