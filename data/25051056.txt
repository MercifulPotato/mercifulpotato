Item(by='CyberDildonics', descendants=None, kids=None, score=None, time=1605038563, title=None, item_type='comment', url=None, parent=25050404, text='&gt; Two completely independent computer systems that are not in communication with each other will never become synchronized,<p>This is not what is being talked about when people discuss parallelism and concurrency since it is trivial. In that example all the tricky stuff has already happened.  Lots of people looking at a painting is easy. Lots of people painting a single picture is hard.<p>Not handling the synchronization explicitly in your own program doesn&#x27;t mean it isn&#x27;t happening.<p>If you write to a disk, to a network or even just display pixels from multiple threads on a monitor, the synchronization is being handled for you.<p>&gt; sidestep the problem altogether by switching to GUIDs (V4 - Random) and allowing each participant to key its own entities<p>That would be a concurrent hash map which doesn&#x27;t side step synchronization, since you still have to deal with collisions, space allocation, ownership and lifetimes.<p>It also isn&#x27;t the same as integer keys since you lose the ordering and lose the ability to do ranged queries.<p>Where synchronization is happening and how it is happening is important, but the idea that it is being avoided is nonsense. Letting something else do it can be sound advice. This however, is like saying that garbage collection means that allocating and freeing memory doesn&#x27;t happen.')