Item(by='geofft', descendants=None, kids=None, score=None, time=1608169683, title=None, item_type='comment', url=None, parent=25450742, text='One, it might be totally fine to run macOS binaries! If your code is portable to macOS and Windows, you might still want to use Docker for dependency management, network isolation, orchestration of multiple processes, etc., but you might not care what the actual host OS is. (Just like how people are interested in running ARM binaries, even though Docker started out as x86-64.) At my day job, all the stuff we put in Docker is either Python (generally portable), Java (generally portable), or Go (built-in cross-compilation support). It&#x27;s absolutely sensible to do local dev on a Mac and then deploy on Linux in prod - it&#x27;s perfectly sensible to do so without Docker in the picture, and plenty of people do just that.<p>So, maybe all the people you&#x27;re yelling at understand the concept you think they don&#x27;t, and they&#x27;re okay with it.<p>Two, it&#x27;s not at all true that to run Linux binaries on non-Linux, you need a Linux VM. WSL1 is an existence proof against this on Windows, as is the Linuxulator on FreeBSD, as are LX-branded zones on SmartOS. Linux itself has a &quot;personality&quot; mechanism for running code from non-Linux UNIXes. You could do the same thing on macOS, and teach the kernel to handle a good-enough subset of the Linux system call interface - it would be <i>far less</i> work than adding containerization (namespacing and resource isolation) in the first place, so I&#x27;m not sure why you&#x27;re so hung up about this.')