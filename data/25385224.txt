Item(by='Twisol', descendants=None, kids=None, score=None, time=1607691631, title=None, item_type='comment', url=None, parent=25385083, text='The lazy collections are an interesting case, because as you build up a stack of transformations, the type itself grows in ways beyond simple A -&gt; B type substitutions. That&#x27;s a really good example of a case better served by GATs than HKTs -- they&#x27;re not that kind of Functor to begin with.<p>To be explicit, a lazy collection type in Rust is more than just `List&lt;T&gt;` -- it needs to carry an additional type describing the set of transformations being applied. You&#x27;d really have something closer to `List&lt;F, T&gt;`, and as you apply transformations, F <i>grows</i> while T is <i>substituted</i>.<p>(You could avoid this by storing a trait object for your transformation stack instead of parametrizing over F, but half the point is that you can often flatten the whole stack down into highly-efficient generated code, and abstracting over the precise F hinders that flattenability.)')