Item(by='gumby', descendants=None, kids=[25242481], score=None, time=1606595630, title=None, item_type='comment', url=None, parent=25238523, text='Let me defend the current situation (more of a devil&#x27;s advocate, actually, but still: this helps me think about it).<p>The general level of programmer ability is lower than it used to be (and this is a <i>good</i> thing IMHO) at the same time the number of degrees of freedom has increased.  Thus the more customization points, the more opportunities for something to go wrong because of some unwitting assumption made elsewhere.  Just look at how many problems we still have with i18n: not enough room allocated for strings; grammar assumptions, and let&#x27;s not get into BIDI.  So reduced options will reduce the percentage and total number of user problems.<p>A corollary to this is the deployment of servers: once every server was a snowflake with its own lovingly-chosen name.  Nowadays servers are spun up, configured, and then erased and repurposed in an instant with nobody thinking about it.<p>Then there&#x27;s the spam and attack vectors: no longer to we craft amusing response text to server handshakes (&quot;username accepted -- socket to me!&quot;).  You can&#x27;t just operate an open SMTP server as a favor to someone who might need it.  And the fact is &gt;99% of all people cannot defend themselves against a phishing attack or avoid downloading malware that will attack someone <i>else</i>.<p>Finally: the number of possible customization points has actually <i>increased</i> dramatically on the highly personal devices like phones: in those cases rather than expose the options (which can interact in weird ways) they are just continuously automatically tuned based on observing my use.  It&#x27;s all in the name of being more custom to me but I don&#x27;t like it.<p>====<p>All that being said, I agree with the author that it&#x27;s a shame.  But my response has been different: taking a cue from the servers, I try to use as little customization as possible, both so I can switch from machine to machine easily and to avoid the problems of poorly-coded machinery.  Even my emacs init file is surprisingly short (and in the 1970s my EMACS init file was a binary image memory mapped into EMACS and (as I later learned) used by a lot of people.  Well those days are over.')