Item(by='chipx86', descendants=None, kids=[25889524], score=None, time=1611464550, title=None, item_type='comment', url=None, parent=25889066, text='That&#x27;s correct, and I&#x27;ve verified it with modern versions of pip for Python 2.7 and 3.x. `pip2.7 install -U pip` just grabs pip 20.3.4 and installs it, ignoring pip 21.0.<p>pip and the legacy easy_install both access the &quot;simple&quot; list for a package when determining download options. This is a basic HTML page with links to all public versions of a package. Here&#x27;s pip&#x27;s: <a href="https:&#x2F;&#x2F;pypi.org&#x2F;simple&#x2F;pip&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pypi.org&#x2F;simple&#x2F;pip&#x2F;</a><p>These links contain Python version specifier information, which pip can use to select an appropriate version. For pip 21.0, that specifier is &quot;&gt;=3.6&quot;, so any modern pip will know it can&#x27;t be used on a Python prior to 3.6. It will therefore fall back to the nearest version that provides a compatible specifier.<p>Looks like this was implemented starting in Pip 9.0 (at the end of 2016). From experience (my product is written in Python), there are plenty of enterprise installs that still use <i>much</i> older versions of pip than this. Those <i>will</i> grab pip 21.0 or newer (I just confirmed with a copy of pip 8).<p>I know for us, that&#x27;ll be important to document. We still support Python 2.7 in part due to slow-moving enterprise installs, and I&#x27;m sure we&#x27;re not alone in that. So geofft&#x27;s example for forcing installs to &lt;21 is exactly what a not-insignificant number of people will ultimately need to do.')