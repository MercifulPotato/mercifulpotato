Item(by='no_wizard', descendants=7, kids=[25621751, 25621206, 25620461, 25620291, 25620737], score=8, time=1609658663, title='Ask HN: Was ES6 a Bust?', item_type='story', url=None, parent=None, text='I been doing a lot of code reading in the front end land the last few weeks and I’ve noticed that much of not nearly all of the features of ES2016&#x2F;ES2015 are hardly used.<p>From what I’ve seen, even in big code bases like react, I only notice the the following:<p>- Classes<p>- Class Properties<p>- Promises<p>- A few object methods (entries, values, keys)<p>- Arrow functions<p>- async functions<p>I see very little code, even in new projects, big or small, where any of the newer features are leveraged. Even things like  Map and Set have sparse usage, despite their efficiency on modern JS engines. For instance I still quite commonly see code that is meant as value stores implemented as objects instead of a Map, even though Map has better performance in high deletion&#x2F;write scenarios (if I recall correctly due to not touching the prototype chain)<p>My favorite example being something like the redux state tree, which could be much more efficiently implemented with  combo of Proxy + Map rather than a single mutated object.<p>Proxy, Reflect, WeakMap and Weakset are non existent even more . The JS community definitely didn’t embrace custom iterators or generators, and symbol never seemed to have taken off as a way to provide library specific code extensions or properties<p>I know Vue 3 leverages Proxies now but it’s not something I see much of in the wild otherwise<p>Seems the advanced programming concepts and promises of ES6 are languishing. It’s still all objects and arrays and mostly still coded like in the ES5 era while leveraging mostly syntactic sugar rather than new features outright despite higher efficiencies<p>I will say the limited Set API is rather annoying (you either have to convey it to an array or iterate over it to get a value out), other than that I don’t think the design of the newer features is harder to adopt, in a lot of cases I have found it’s easier<p>Has this been anyone else’s experience?<p>Edit: I speaking of new code or code that is generally being significantly re-written, or code being refactored that could benefit here. What I’m looking at is code written after ES6 was widely known and available')