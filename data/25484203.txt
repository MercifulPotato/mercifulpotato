Item(by='jiggawatts', descendants=None, kids=[25488858, 25486475], score=None, time=1608443770, title=None, item_type='comment', url=None, parent=25484078, text='Which reminds me of an insightful observation that the array indexing operator [] and the function call operator () are basically doing the same thing: evaluating a function and returning a value.<p>So what you&#x27;ve just described is basically Currying, or partial function evaluation. It&#x27;s a bit like defining &quot;al(i)&quot; as array lookup for an index &#x27;i&#x27; instead of &quot;[i]&quot;. Then the following are equivalent:<p><pre><code>    something[i][j]\n    something.al(i).al(j)\n</code></pre>\nWhat people also want are:<p><pre><code>    something[i,j]\n    something.al(i,j)\n</code></pre>\nIn languages like Haskell, every function can always be evaluated argument-by-argument, with no special effort by the programmer. The compiler takes care of generating the code for the various intermediate call forms. In languages like C++, it would be a significant hassle to create all of the various partially-evaluated wrapper types.')