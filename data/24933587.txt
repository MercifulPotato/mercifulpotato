Item(by='hardwaresofton', descendants=None, kids=None, score=None, time=1603995747, title=None, item_type='comment', url=None, parent=24933376, text='&gt; One thing we continually hear is that the familiarity, trust, ecosystem, maturity, etc. that folks love about Postgres is a huge boon and one deciding factor for their adoption of TimescaleDB.<p>Yeah, I think this is huge, I also personally like that you get the extensibility of Postgres as well. Right now custom table access methods are still &quot;cooking&quot; but I think being able to combine a true postgres-native columnar access method with Timescale&#x27;s benefits would be a game changer. There&#x27;s also zheap which is still being worked on but if&#x2F;when it lands postgres will be even better at OLTP workloads and possibly an even better base for Timescale to stand on.<p>&gt; Just to clarify: those benchmarks about InfluxDB vs. TimescaleDB were fully redone just 2 months ago (August 2020) with the latest versions of both, so should be quite up-to-date. In fact, since the ~year since our last benchmarking, TimescaleDB&#x27;s performance _relative to InfluxDB_ only significantly increased.<p>That&#x27;s fantastic to hear -- I am already sold on Timescale since to get close to a purpose-built tool with a solution built on top of a more general platform is already very impressive, but I will be re-reading the article closely to get more details on the exact trade-offs.')