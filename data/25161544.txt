Item(by='cryptica', descendants=None, kids=[25163086], score=None, time=1605887468, title=None, item_type='comment', url=None, parent=25161045, text='What you&#x27;re claiming here does not match the evidence from your links.<p>For example, in your second link, one of the functions expects a &#x27;complex&#x27; instance DispatchProps which has a method toggleOn... This abstraction doesn&#x27;t make sense conceptually. What is a DispatchProps? It doesn&#x27;t adhere to Alan Kay&#x27;s notion of a &#x27;message&#x27;, it&#x27;s clearly a structure (it&#x27;s a complex one because it exposes a method). Components should communicate to each other via messages, not structures.<p>Also, the method builder.addMatcher(...) accepts a function as an argument - It doesn&#x27;t seem like an ideal abstraction either. Functions are not messages.<p>Also, the thunkSendMessage function signature is very complex; the return type is highly convoluted. That&#x27;s definitely not a message.<p>Overall, I see a lot more of these complex instances being passed around in these examples than used to be the case with JS when mostly just raw objects were being passed as arguments and returned.<p>You can already see the complexity seeping into the interfaces. Just a few years of TypeScript is distorting the original philosophy. I remember Dan Abramov was very careful about what to pass into functions and what to return from them and made it a point to encourage cloning objects using the ... spread operator.<p>That philosophy appears to have been forgotten.')