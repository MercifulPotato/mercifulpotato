Item(by='Joker_vD', descendants=None, kids=None, score=None, time=1602266180, title=None, item_type='comment', url=None, parent=24727639, text='While re-using an existing regexp like<p><pre><code>    [\\s,]*(~@|[\\[\\]{}()&#x27;`~^@]|&quot;(?:\\\\.|[^\\\\&quot;])*&quot;?|;.*|[^\\s\\[\\]{}(&#x27;&quot;`,;)]*)\n</code></pre>\nis easier than writing a tokenizer manually (keeping track offsets and looping and stuff), <i>writing</i> that regexp is definitely harder than writing the tokenizer like this:<p><pre><code>    curr, end = 0, len(s)\n    while True:\n        while curr &lt; end and isspace(s[curr]):\n            curr += 1\n\n        if curr &gt;= end:\n            break\n            \n        if s[curr:curr + 2] == &quot;~@&quot;:\n            yield s[curr:curr + 2]\n            curr += 2\n\n        elif isspecial(s[curr]):        # isspecial(c) matches c against []{}()&#x27;`~^@\n            yield s[curr]\n            curr += 1\n\n        elif isquote(s[curr]):          # isquote(c) matches c against &quot;\n            start = curr\n            curr += 1\n\n            # check this condition out: you can totally support several quotes,\n            # and accurately match the closing and opening ones. Imagine doing it\n            # with a regexp: either duplicate it, or use some back-referencing magic\n\n            while curr &lt; end and not (s[curr] == s[start] and s[curr-1] != &#x27;\\\\&#x27;):\n               curr += 1\n            curr += 1        # we want to include the closing quote\n            yield s[start:curr]\n\n        elif s[curr] == &#x27;;&#x27;:\n            yield s[curr:]\n            break\n\n        else:\n            start = curr\n            while curr &lt; end and not (isspace(s[curr]) or isspecial(s[curr]) or isquote(s[curr])):\n                curr += 1\n            yield s[start:curr]\n</code></pre>\nYeah, it&#x27;s more verbose and somewhat repetitive, but on the other hand, it&#x27;s way more readable, and debuggable too: with regexps, it&#x27;s always a mystery which part of it exactly didn&#x27;t match what you wanted or captured something you didn&#x27;t want to match. Here, the loop invariants and preconditions are almost immediately obvious.')