Item(by='MaulingMonkey', descendants=None, kids=[24756357], score=None, time=1602513691, title=None, item_type='comment', url=None, parent=24752527, text='to_string_t as shown is bait for undefined behavior, when combined with auto:<p><pre><code>  #include &lt;string&gt;\n  #include &lt;string_view&gt;\n  #include &lt;iostream&gt;\n  #include &lt;sstream&gt;\n\n  struct to_string_t {\n      std::string_view s;\n      &#x2F;&#x2F; I&#x27;m too lazy to download boost::lexical_cast:\n      operator int()  const { std::stringstream ss; ss &lt;&lt; s; int  r = 0;     ss &gt;&gt; r; return r; }\n      operator bool() const { std::stringstream ss; ss &lt;&lt; s; bool r = false; ss &gt;&gt; r; return r; }\n  };\n\n  to_string_t from_string(std::string_view s) { return to_string_t{s}; }\n\n  void takes_int(int i) {\n      std::cout &lt;&lt; i &lt;&lt; &quot;\\n&quot;;\n  }\n\n  int main() {\n      std::string foo = &quot;1&quot;;\n\n      takes_int(from_string(foo + &quot;0&quot;)); &#x2F;&#x2F; OK\n\n      const auto a = from_string(foo + &quot;0&quot;); &#x2F;&#x2F; temporary string\n      takes_int(a); &#x2F;&#x2F; use after free bug, the temporary string was freed\n  }\n</code></pre>\nMSVC&#x27;s debug heap seems to have trouble catching it (small string optimizations?) and prints &quot;10&quot; followed by &quot;0&quot; (not another &quot;10&quot;!), but address sanitizer at least has my back:<p><pre><code>  &#x2F;mnt&#x2F;c&#x2F;local&#x2F;evil$ g++ -fsanitize=address -std=c++17 main.cpp -o main &amp;&amp; .&#x2F;main\n  10\n  =================================================================\n  ==154==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7ffd0d828fb1 at pc 0x7f737d8cd733 bp 0x7ffd0d828ad0 sp 0x7ffd0d828278\n  ...</code></pre>')