Item(by='rattray', descendants=None, kids=[25992730, 25992742], score=None, time=1612208071, title=None, item_type='comment', url=None, parent=25990702, text='This is a Python framework claiming Node&#x2F;Go-comparable perf.<p>Here&#x27;s what it looks like:<p>from typing import Optional<p>from fastapi import FastAPI\nfrom pydantic import BaseModel<p>app = FastAPI()<p>class Item(BaseModel):\n    name: str\n    price: float\n    is_offer: Optional[bool] = None<p>@app.get(&quot;&#x2F;&quot;)\ndef read_root():\n    return {&quot;Hello&quot;: &quot;World&quot;}<p>@app.get(&quot;&#x2F;items&#x2F;{item_id}&quot;)\ndef read_item(item_id: int, q: Optional[str] = None):\n    return {&quot;item_id&quot;: item_id, &quot;q&quot;: q}<p>@app.put(&quot;&#x2F;items&#x2F;{item_id}&quot;)\ndef update_item(item_id: int, item: Item):\n    return {&quot;item_name&quot;: item.name, &quot;item_id&quot;: item_id}<p>That can get you an autogenerated openapi spec and docs, which IMO is pretty awesome.<p>Can anyone comment on how it compares to Django Rest Framework? (Other than presumably being faster)')