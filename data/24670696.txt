Item(by='eru', descendants=None, kids=None, score=None, time=1601716457, title=None, item_type='comment', url=None, parent=24665892, text='&gt; From an adversarial standpoint: If I have information about the random algorithm and the seed, I can make exploit it.<p>Randomised QuickSort as an algorithm doesn&#x27;t have any random seed.  It just uses pure randomness.  (Specific implementations might use a pseudo-RNG.)<p>&gt; This statement is imprecise. What is &quot;worst case input&quot; when speaking of &quot;expected&quot;.<p>Oh, just the opposite!  Speaking of &#x27;expected&#x27; tells you exactly what worst-case to look for.<p>What I mean is that &#x27;worst case input&#x27; by itself is not a-priori well-defined for randomised algorithms.  Because you could eg have an input that worsens the 75%-ile runtime but improves the 25%-ile runtime.<p>By specifying eg &#x27;expected&#x27;, you make clear that you are talking about the worst case for the expected runtime.<p>&gt; So yes, even the randomized Quick Sort has worst case of O(n^2)<p>The worst case over both input and random choices is O(n^2).  The worst case over input for the expected running time is O(n log n).<p>Even more, for any input, even the worst case input, randomised quicksort has O(n log n) running time with &#x27;very high probability&#x27;, ie for any epsilon there&#x27;s a big enough m and a constant c, so that with probability at least 1-epsilon, the running time of the worst case input of size n &gt; m is smaller than c * n log n.<p>---<p>There&#x27;s a different, but equivalent, way to analyse randomised algorithms that might be easier to digest for you, because it completely avoids having to directly talk about randomness:<p>Take your favourite deterministic machine model, say a Turing machine or a random access machine, and in addition to the normal input tape, give it access to an extra immutable one-sided &#x27;random&#x27; tape that&#x27;s pre-filled with binary symbols (0 or 1).<p>Everything is deterministic in this model.<p>An analysis of the expected runtime for the worst case input means that the adversary gets to prepare the input tape, but for the rest of the analysis we are analysing all possible contents of the &#x27;random tape&#x27;.<p>For each possibility, there is one specific deterministic run.  Talking about the expected (worst-case input) runtime just means that we are averaging over all possible &#x27;random&#x27; tapes.<p>If we talk about the 95%-ile instead, that means that we are ordering all the runtimes for the different possibilities for the &#x27;random tape&#x27; and taking the runtime of the 95%-ile.  Still, everything is deterministic.<p>When you want to run this algorithm in practice, you sample from the space of possible contents of the &#x27;random tape&#x27;.  But crucially, the standard assumption is that you sample after your adversary has selected their input.<p>That standard assumption is in line with Kerckhoffs&#x27;s principle in cryptography that the adversary knows your system, but that you are able to pick secret random keys at will.<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kerckhoffs%27s_principle" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kerckhoffs%27s_principle</a>')