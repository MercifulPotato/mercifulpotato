Item(by='mrkeen', descendants=None, kids=None, score=None, time=1602006739, title=None, item_type='comment', url=None, parent=24697262, text='Love it - very few languages come close to it.  I miss it when I&#x27;m using Java&#x2F;Scala&#x2F;Rust&#x2F;C&#x2F;JS instead.<p>But there&#x27;s no way you could get a team to adopt it.  Too many non-Haskellers will make up claims about needing to know category theory in order to do anything.  Or it&#x27;s academic, or design-by-committee.<p>Someone commented earlier about Haskell having solutions to problems that only Haskell has, and I can give you a couple of examples:<p>1) Famously it has the Maybe type - instead of null - for dealing with possibly-missing values.  In Haskell, if you want to chain together operations without checking for the presence of each value, you use &quot;&gt;&gt;=&quot;.  As many people have noted before, this is a cryptic symbol.  You can just use JavaScript instead which has &quot;.?&quot;.<p>2) It has mechanisms for cleaning up resources in the case you want to cancel something while it&#x27;s running, notably ResourceT.  Other languages take the approach where you simply cannot cancel a thread&#x2F;future, thus preventing you from needing to write cleanup code in the first place.<p>There&#x27;s also the problem of its community.  Rather that accept information second-hand I invite you to read a few posts from <a href="https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;haskell&#x2F;</a> and see for yourself how it treats newcomers.<p>I should also mention the type system.  As any dynamic typing enthusiast will tell you, statically-typed languages are too verbose.  And Haskell is too terse.  So it kind of loses on both fronts there.  You&#x27;ll need to contend with people who don&#x27;t like type systems because they get in your way, rather than helping you out.  When I&#x27;m feeling lazy and I can&#x27;t think of what to write, I just write &quot;Int&quot; instead and then let the compiler tell me what I was supposed to write, e.g. &quot;Topic -&gt; SequenceNum -&gt; Value -&gt; IO a0&quot;.<p><pre><code>    src&#x2F;Server&#x2F;Paxos&#x2F;Learner.hs:41:68: error:\n        • Couldn&#x27;t match expected type ‘Topic\n                                        -&gt; SequenceNum -&gt; Value -&gt; IO a0’\n                      with actual type ‘Int’\n        • In the third argument of ‘learnService’, namely ‘callback’\n          In the second argument of ‘(.)’, namely\n            ‘learnService myId topicLocks callback’\n          In the ‘learn’ field of a record\n       |\n    41 |     pure $ Learner { learn = liftIO . learnService myId topicLocks callback }\n       |\n</code></pre>\nGod knows how I managed to read that cryptic error message though.')