Item(by='sakisv', descendants=None, kids=None, score=None, time=1602172654, title=None, item_type='comment', url=None, parent=24719525, text='A couple of disclaimers first.<p>1. I&#x27;ve only used monorepo professionally once in a big org and it was SVN based\n2. I&#x27;m going to look at monorepos from the perspective of git and github<p>The main argument I can think of in favor of monorepos, is to maintain the cohesion as high as possible between different parts of your system. For example, if you want to make a change to the load balancer regarding TTL, you can also go and make the same change in your API and your mobile clients and in the end you create one single PR and you have your tests run against that single revision.<p>Compare and contrast the same scenario in the traditional multi-repo approach: You make your changes to your `infra` repo, then you make the same change in your `api`, `android-client`, `ios-client` repos and in you create 4 PRs, that need to be reviewed at the same time. Which one would you prefer to do?<p>Potential arguments against are:<p>1. Too much noise - If multiple people are working on the same repo, you&#x27;d be getting emails for PRs for parts of the code that you may not care about.<p>2. Longer clone&#x2F;pull times - In the same vain as before, the initial `git clone` and maybe every `git pull` after that will be bringing in a lot of code that you may not care about, increasing the time of each operation and increasing your frustration.<p>3. Access control - How do you limit who has write access to which part of your repo? AFAIK this isn&#x27;t possible in git but it may be possible with codeowners in github, I don&#x27;t know.<p>4. Organization - How do you structure your monorepo? Do you know in advance how many components it&#x27;s going to have? How is a restructuring going to affect your history and&#x2F;or dependencies between different components of your code?<p>5. History and code sharing - With a monorepo it&#x27;s more difficult to share&#x2F;open source just part of your code and keep the history intact.<p>Having said all that, I think the monorepo is a good match at a service level, not at an organization level. I know Google and Facebook have gone all in at an org level, but first of all they don&#x27;t use git and second, they have the luxury and the resources to make it work for their use case. At a service level you should have a good idea of your boundaries, your applications and your infrastructure and assuming a relatively small engineering team (~10-12 people) eventually everyone would be confident enough with all parts of your system.<p>Personally I really like the idea of having one hash define the entire state of the world. I have a few common utilities that I use across my projects and I find it too annoying to keep them all up-to-date between different repos. I hope that eventually I will find some time (or be annoyed enough) that I will converge everything in one repo.')