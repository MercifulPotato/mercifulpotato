Item(by='MayeulC', descendants=None, kids=[25621397, 25621422, 25621382], score=None, time=1609676016, title=None, item_type='comment', url=None, parent=25619137, text='Interesting post. They do get a lot of things right, but I tend to prefer a full OSS stack, so jellyfin instead of plex, and btrfs instead of ZFS. I didn&#x27;t know some parts they mentioned, I guess I&#x27;ll investigate :)<p>One data point about btrfs, FWIW: I&#x27;ve been using it since 2016, the only &quot;issue&quot; I had is that it forced a failing drive into read-only, while other filesystems didn&#x27;t detect the upcoming failure, thank checksuming for this.<p>The main missing feature for me is caching on faster disks, though there are some ways to get that. No mention of LVM nor LUKS either, I guess the understanding is either still a bit superficial (everyone has their own areas of interest), or they didn&#x27;t want to complexify the setup too much.<p>For self-hosting, I can recommend <a href="https:&#x2F;&#x2F;yunohost.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;yunohost.org&#x2F;</a> which makes easy some traditionally hard parts of self-hosting, though it is quite opinionated (which isn&#x27;t always a <i>bad</i> thing). Certainly saved me some time on maintenance, though I do see the limitations.<p>The holy grail of a &quot;perfect homeserver&quot; for me would be to run everything in GUIX, with a declarative configuration I can locally test before deploying, and rolling back. More packaging efforts are needed before this can become reality. I&#x27;d also like the option to have simple distributed storage, trough something like hypercore. This would help for backups, and for overcoming low-bandwidth links.<p>But maybe it&#x27;s the Internet that needs to be fixed, with public key routing and content-based addressing, plus &quot;heavy&quot; clients and light, dumb servers instead of pushing everything to the browser.')