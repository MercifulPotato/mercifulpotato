Item(by='just_for_you', descendants=None, kids=None, score=None, time=1611864568, title=None, item_type='comment', url=None, parent=25946103, text='I would actually beg to disagree, as someone who was bored a few weekends ago and decided to go through a few reasonably-complex PSD files (eg, ones with different layer types, bezier curves, etc.) in a hex editor with the official specification in-hand in an attempt to understand the format. (The specification can be found here: <a href="https:&#x2F;&#x2F;www.adobe.com&#x2F;devnet-apps&#x2F;photoshop&#x2F;fileformatashtml&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.adobe.com&#x2F;devnet-apps&#x2F;photoshop&#x2F;fileformatashtml...</a>).<p>After a few hours, I was able to grok it without too much difficulty, and found the format was reasonably well laid-out. Yes, it does suffer from some &quot;let&#x27;s take the in-memory representation and bake it into the on-disk format&quot;-isms, and there were a few things were not covered by the specification (eg, a couple Resource IDs aren&#x27;t mentioned at all, or they are, but there&#x27;s no documentation on how to interpret their content) - but it&#x27;s not anywhere close to insane.<p>To give an example, partially going off memory from what I remember seeing in real files, but mostly skimming the spec, a very basic gist of a typical PSD files might look something like this. (I can only assume HN is going to mangle the formatting of the following text, so expect to see multiple edits to this comment):<p>EDIT: I was right about the formatting getting messed up. I&#x27;ve posted it to Pastebin and will call it a day:<p><a href="https:&#x2F;&#x2F;pastebin.com&#x2F;raw&#x2F;WSkjMxm3" rel="nofollow">https:&#x2F;&#x2F;pastebin.com&#x2F;raw&#x2F;WSkjMxm3</a><p>Then lastly, the complete, finalized rasterized copy of the entire documented is stapled to the very end. It&#x27;s not mandatory however (Photoshop will skip appending it if Compatibility Mode is off when saving the PSD file), but will be handy for applications that don&#x27;t want to deal with the complexity of, well, implmenting Photoshop.<p>So that&#x27;s the basic gist of a PSD file. It&#x27;s mostly just reading 4-byte tags and length fields. Now, <i>rendering</i> a complex PSD file (or worse: generating a complex one) is another matter, but the on-disk format is pretty understandable IMO. Creating a bitmap-to-PSD conversion program from scratch is also something I could see being doable in a weekend if you followed the spec, and, as long as the PSD only contained simple rasterized data (eg, no filters and other fanciness) and only the bare-minimum ResourceID&#x2F;Layer tags.<p>Honestly, I really trust PSD as a general interchange format for images. It&#x27;s quirky in some places, but it&#x27;s pretty logically laid-out, is universally-recognized, and I can rest assured that a rasterized copy of my images will always be stapled to the end of the file if worse comes to worse. There really is no alternative, because while you can contain Photoshop data in a format like TIFF (Photoshop just staples the entire PSD file into a TIFF&#x2F;EXIF tag anyway), and if an application unaware of that PSD data opens the TIFF files and saves it, the Photoshop data might go poof or have a mismatch with the other TIFF data. And then there&#x27;s Gimp&#x27;s XCF format, where the on-disk format is allowed to be changed willy-nilly because you are only supposed to use Gimp&#x27;s official library for reading&#x2F;writing to it (not to mention no application really supports XCF aside from Gimp and maybe a few open-source projects). And let&#x27;s not even bother with $application-specific formats, because they are meant only for that specific application.<p>The moral of the story is I like the PSD format.')