Item(by='specialist', descendants=None, kids=[25015959, 25015351], score=None, time=1604758729, title=None, item_type='comment', url=None, parent=25014756, text='<i>&quot;better alternative to Green threads&quot;</i><p>Do you have opinions about Java&#x27;s Project Loom?<p>I&#x27;m a simple bear. I have always struggled with the architecture and organization of my async code. Stuff like exception handling, percolating errors up, rational back pressure and retry.<p>My goal is to rewrite some of my server code using Project Loom, to see how it helps.<p><i>&quot;why we don&#x27;t make fuller use of ... the fortunes of RAM we have now&quot;</i><p>I know you mention this as an aside, but I&#x27;d appreciate examples.<p>I&#x27;ve been personally frustrated by teammates using external key&#x2F;value stores for hot data sets which would trivially fit within RAM. But haven&#x27;t had ready-made solutions.<p>One recurring objection, for which I&#x27;ve had no good response, is how to quickly hoist (prime, seed, better term needed here) the RAM of new instances.<p>Last time this came up, I helped come up with a compromise kludge using Redis. We added a local Redis instance to each web server, had the &quot;master&quot; create regular snapshots, copied that snapshot onto new EC2 instances during boot, used the snapshot to prime its local cache.<p>It worked pretty good. Though I would have preferred in process, using Redis allowed better inspection and debugging, which was pretty cool. But devops wise, this Rube Goldberg kludge broke most teammate&#x27;s brains.<p>Thanks for listening. I keep looking to see if anyone&#x27;s got a more turnkey solution.')