Item(by='dkersten', descendants=None, kids=[25936810], score=None, time=1611794749, title=None, item_type='comment', url=None, parent=25935700, text='My problem with these arguments is that its meaningless, if this &quot;bad OO&quot; (or &quot;bad &lt;insert paradigm&gt;&quot;) is what most developers write.<p>Its a big problem I have with ORM&#x27;s. Every time a discussion about what&#x27;s bad about ORM&#x27;s is brought up, there&#x27;s a multitude of people saying that its just used wrong, written wrong or otherwise done wrong, yet that&#x27;s basically my experience with every non-toy codebase I&#x27;ve ever worked on as part of a larger team. Telling me that its just done wrong is useless because its out of my hands. Is it the ORM&#x27;s fault? I argue yes because it encourages that kind of programming, even though its not <i>technically</i> the ORM&#x27;s fault.<p>I see it the same with OO or anything else. Is this &quot;bad OO&quot; the type of OO people tend to write? If yes, then OO is the problem. If no, then OO is not the problem.<p>Personally, I like a mixed approach where I use some OO and a lot of functional. I&#x27;m writing a little toy game in C++ from scratch and I have a very flat design, preferring functional approaches where I can, but I have a few objects and even a little bit of inheritance where it makes sense. Sometimes dealing with an object-based API is just more convenient and I won&#x27;t shy away from using OO principles, but I also don&#x27;t default to them just because either.')