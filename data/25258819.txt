Item(by='dTal', descendants=None, kids=[25261897], score=None, time=1606769532, title=None, item_type='comment', url=None, parent=25250815, text='APL was amazing for the time, but array-oriented programming is mainstream now, while the notation never really caught on. A lot of the mystique of APL is <i>because</i> it&#x27;s illegible, but at the end of the day it&#x27;s nothing more than a DSL for &#x27;numpy-like&#x27; code. You can code the same demo, in the same amount of time, using Julia, and the result is (in my opinion) much more legible:<p>The opaque one-liner:<p>using IterTools,ImageInTerminal,Colors;for g in iterated(a-&gt;let n=sum(map(t-&gt;circshift(a,t),product(-1:1,-1:1)));(a.&amp;(n.==4)).|(n.==3);end,rand(Bool,(99,99)));imshow(map(Gray,g));print(&quot;\\n\\n&quot;);end<p>The legible version where we give everything descriptive names so it&#x27;s not cryptic and mysterious:<p><pre><code>  using ImageInTerminal,Colors #the APL demo also uses a library for pretty display\n  using IterTools #okay *technically* this is a minor cheat\n\n  function nextgen(grid)\n        neighborcount = sum(map((t)-&gt;circshift(grid,t), product(-1:1,-1:1)))\n        return (grid .&amp; (neighborcount .== 4)) .| (neighborcount .== 3)\n  end\n\n  function animate(grid)\n        for gen in iterated(nextgen, grid)\n                imshow(map(Gray, gen))\n                print(&quot;\\n\\n&quot;)\n                sleep(0.05)\n        end\n  end\n\n  animate(rand(Bool,(100,100)))</code></pre>')