Item(by='skytreader', descendants=None, kids=[25457992], score=None, time=1608200827, title=None, item_type='comment', url=None, parent=25453168, text='I can&#x27;t make much sense of Djikstra&#x27;s linguistic points either. But with the little I can understand, my objection boils down to the following statement:<p>&gt; A programming language, with its formal syntax and with the proof rules that define its semantics, is a formal system for which program execution provides only a model. It is well-known that formal systems should be dealt with in their own right, and not in terms of a specific model. And, again, the corollary is that we should reason about programs without even mentioning their possible &quot;behaviours&quot;.<p>Perhaps this is another aspect of the &quot;SWE vs. CS&quot; debate but I&#x27;ve come to the conclusion that in SWE, it makes more sense to reason about entities and how they behave (deliberate use of the word) rather than in terms of every single line of code. Said another way, anthropomorphizing programs is another means of abstraction and SWEs and CSs alike should be comfortable going up and down the abstraction ladder as needed. Even in academia, outside your first two programming classes or so, outside algorithms, it is <i>rare</i> to spend time in the realm of &quot;formal syntax and proof rules&quot;. (Or maybe this is simply a difference of the needs of CS education today and during Djikstra&#x27;s time.)<p>But why should we encourage reasoning in this manner? I have many reasons but the bluntest (yet holds no less water) one is because I think Djikstra&#x27;s statement assumes you have access to the readable source code. That&#x27;s simply not true. So it&#x27;s more useful to reason about computing units as entities with &quot;behaviors&quot;.')