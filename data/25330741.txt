Item(by='jfk13', descendants=None, kids=[25330775, 25332630, 25333405, 25347086, 25333338, 25332251, 25335705, 25330948, 25331205], score=None, time=1607335035, title=None, item_type='comment', url=None, parent=25328874, text='Personally, I think this approach -- which as far as the engine is concerned looks like a largely-automated &quot;translation&quot; of xetex from C&#x2F;C++ to Rust -- is misguided.<p>The xetex code is a byzantine tangle of disparate pieces that evolved over the course of a number of years and several changes of direction; it originally started as a personal tool to address one individual&#x27;s use case for a &quot;Unicode-capable TeX&quot;, and grew from there. While it generally works really well, it&#x27;s not a solid piece of engineering on which to build the future.<p>The resulting code doesn&#x27;t benefit from being Rust, except for the added buzzword-ness. It&#x27;s simply a translation of the C code, littered with unsafe blocks, as it has not been architected to work with Rust&#x27;s ownership semantics, borrow checker, etc.<p>What XeTeX (or LuaTeX, though I don&#x27;t find the Lua integration important -- but that depends heavily on your use cases) needs is a rewrite that preserves backward compatibility for documents, while re-architecting the engine using a modern language such as Rust. Simply wrapping the 1980s-era code in a &quot;skin&quot; of Rust syntax brings little value.')