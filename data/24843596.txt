Item(by='socialdemocrat', descendants=None, kids=[24844176], score=None, time=1603238630, title=None, item_type='comment', url=None, parent=24841811, text='I wrote two articles which may clarify this better. One is about creating custom temperature units in Julia and Python. It shows how multiple dispatch gives an advantage over single dispatch: <a href="https:&#x2F;&#x2F;medium.com&#x2F;@Jernfrost&#x2F;defining-custom-units-in-julia-and-python-513c34a4c971" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;@Jernfrost&#x2F;defining-custom-units-in-julia...</a><p>This story is more like a general intro to Julia, but it has an example with Knights, Pikeman and Archers fighting each other (sort of rock, paper, scissors game), which also shows the utility of multiple dispatch.<p><a href="https:&#x2F;&#x2F;levelup.gitconnected.com&#x2F;knights-pikemen-archers-and-multiple-dispatch-69aaee2c4141" rel="nofollow">https:&#x2F;&#x2F;levelup.gitconnected.com&#x2F;knights-pikemen-archers-and...</a><p>But to give a quick idea here. Imagine writing functions for intersecting two geometric shapes. The algorithm for intersecting a circle and square is entirely different from intersecting a polygon and a line segment. The specific algorithm needed will depend on BOTH shapes not just one. Python can only dispatch on one of the shapes, not both.<p>So in Julia I could write a different function implementation like this:<p><pre><code>    intersect(c::Circle, r::Rectangle)\n    intersect(c1::Circle, c2::Circle)\n    intersect(r1::Rectangle, r2::Rectangle)\n</code></pre>\nand so on.')