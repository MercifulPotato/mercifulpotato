Item(by='pjmlp', descendants=None, kids=None, score=None, time=1612038798, title=None, item_type='comment', url=None, parent=25972506, text='Because you aren&#x27;t looking at it from the context of data races anywhere on the application, and focusing on RefCell alone instead.<p>Yes, Rust prevents data races when several threads try to modify a memory location inside the same process.<p>This is just a special case of data races, which may take several forms.<p>If several processes, or even threads are accessing an external resource, like a database, each of them can issue UPDATE statements on the same record, and it is impossible to validate which value you will get back, unless it is done inside a proper transaction block.<p>Ensuring that a SQL data race doesn&#x27;t happen, might be critical, e.g. several people to the same plane seat, yet there is nothing on the RefCell or not using unsafe {} that can enforce it.<p>I would advise to read the &quot;Data Races and Race Conditions&quot; chapter of Rustonomicon regarding what guarantees Rust actually provides, anything else is up to the programmer to take care they don&#x27;t happen.<p><a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;races.html</a>')