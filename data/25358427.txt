Item(by='phendrenad2', descendants=None, kids=None, score=None, time=1607522156, title=None, item_type='comment', url=None, parent=25358160, text='If I were you, I&#x27;d focus on OpenGL 4.x. Going straight to the 3D API, since 2D these days is just a texture on the side of a 3D plane lol.<p>First thing you&#x27;ll need is to somehow open a window in your preferred OS and language and get a simple &quot;hello triangle&quot; (many tutorials for that) running in any OpenGL version.<p>There are OpenGL bindings for most languages, so pick the one that gets you started fastest. I usually use Windows with C (through the raw win32 API - which isn&#x27;t everybody&#x27;s cup of tea and can be somewhat confusing), but maybe there are XCode projects that show a simple window with an OpenGL demo in Objective C or Swift.<p>Also if you&#x27;re familiar with the Java world (maven, etc.) you can use LWJGL, which provides really simple Java wrappers around the OpenGL C API.<p>Once you have the window up and running, you should understand how GPUs actually work. GPUs are basically separate CPUs at this point, but they also do something that&#x27;s tough to reproduce on a CPU: they do rasterization. That means they take a bunch of triangles, expressed as floating point numbers, and splat them all together onto a regular integer-based grid (your framebuffer for your monitor or game window).<p>The bare minimum for OpenGL 4.x is two shaders: a vertex shader and a fragment shader (fragment just means &quot;pixel&quot; unless you do more advanced stuff like multisampling antialiasing etc.)\nThe bare minimum vertex shader just takes a vertex and passes it through unchanged. The bare minimum fragment shader sets a color and takes no input.\nFragment shaders run after rasterization. That&#x27;s why they operate on pixels. Vertex shaders run before rasterization.<p>Of course the GPU also does nice stuff like interpolating per-vertex values across each pixel of the triangle. That&#x27;s why so many &quot;hello triangle&quot; delos show a gradient across the triangle. It&#x27;s an easy easy to show off that feature (which is important for textures later).<p>I&#x27;d get away from thinking in terms of pixels&#x2F;shapes&#x2F;solids. There are higj-level wrappers around OpenGL that do such things (like Java3D), but are you really learning graphics if you don&#x27;t study the bottom levels?<p>If you really want to start with 2D, I suggest going through all the steps of setting up OpenGL, and then just render two textured triangles forming a quad covering your window. Then to draw to the window in 2D, you just write to the texture buffer and re-send it to OpenGL. It&#x27;s more work, but you&#x27;ll be more confident going into real modern 3D stuff.<p>Hopefully I&#x27;ve given you some ideas. I think you&#x27;re somewhat torn between low-level and high level, and I regret to inform you that you really can&#x27;t easily have both out of the box, and you should probably start at the low-level.<p>Although, there are maybe some simplistic 3D engines like OpenScenGraph that might be close, in some ways, to what you want.')