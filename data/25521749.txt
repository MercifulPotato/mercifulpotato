Item(by='mmalone', descendants=None, kids=[25523373], score=None, time=1608755003, title=None, item_type='comment', url=None, parent=25521630, text='Counterpoint: this is also a big problem with SSH. When a host key changes with SSH you&#x27;ll get a &quot;Host Key Verification Failure&quot; that basically says &quot;yo, the key I expected for this host wasn&#x27;t actually presented, you&#x27;re probably being mitm&#x27;d&quot;. Then you have to go into your `~&#x2F;.ssh&#x2F;known_hosts` and delete a line. Then you get a new TOFU warning that you&#x27;ll just type &quot;yes&quot; to and proceed.<p>So most SSH users (who, on average, are <i>way</i> more technically competent than browser users) will automatically 1) panic and think they&#x27;re being hacked, or 2) blindly trust the new key when a key change occurs with SSH. Both of these responses are dangerous. The result is that, unless you have fancy stuff for managing known hosts for all of your users on all of your endpoints, you&#x27;re probably just avoiding this scenario by not rotating host keys at all for SSH. Which is also problematic.<p>By using a CA you&#x27;re delegating the key binding to a trusted piece of infrastructure that can be locked down and monitored by experts. You can&#x27;t do that easily with key-bindings written to files on a bunch of different endpoints. With a CA, end users shouldn&#x27;t need to care about key changes. The fact that the CA can issue a new certificate for some entity is a benefit: it makes credential rotation easier. If you do want to know when credentials rotate there are ways to monitor that yourself (and Web PKI has ways like key pinning and cert transparency).')