Item(by='dfabulich', descendants=None, kids=[24871326, 24872018, 24872150], score=None, time=1603469801, title=None, item_type='comment', url=None, parent=24870759, text='In his 2018 talk, &quot;10 Things I Regret About Node.js&quot; <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=M3BM9TB-8yA&amp;vl=en" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=M3BM9TB-8yA&amp;vl=en</a> he identifies seven (not ten) regrets.<p>1. Not sticking with Promises: This is changing, slowly. You can `import {readFile} from &#x27;fs&#x2F;promises&#x27;` in Node and it works as you&#x27;d expect, including top-level await. (Backwards compatibility means the callback API can never go away.)<p>2. Security (your linter shouldn&#x27;t have complete access to your computer and network): Deno hasn&#x27;t done a great job with this, either. You can restrict the access that a Deno process has, but you can&#x27;t restrict the access for individual modules. If any module in your server needs to access something, then every module in your server can access it.<p>I predict that module-level authorizations will be solved some day by browser vendors, and that Node and Deno will adopt the thing. Deno will probably have to throw out their thing what that happens.<p>3. Build system (GYP). This has no effect on userland Node developers. You build node with make. Another build system could be adopted, but I think nobody&#x27;s bothered. Deno has a protobuf FFI to communicate with V8. You can do that with Node if you want. Shrug.<p>4. require(&quot;package&quot;) relies on package.json. Deno uses import maps. Node will probably honor import maps someday, too.<p>5. node_modules: He said it &quot;complicates the module resolution algorithm.&quot; Meh. He also points out that node_modules is too large, but that&#x27;s a Node cultural problem. Deno&#x27;s community is still small, but it will have that problem, too, except it will have a large shared &quot;cache&quot; instead of a large local node_modules folder.<p>6. require(&quot;module&quot;) without the extension &quot;.js&quot;: Deno does this, too, using import maps. It&#x27;s fine.<p>7. index.js: Again, it &quot;complicated the module loading system.&quot; Meh?')