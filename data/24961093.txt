Item(by='akiselev', descendants=None, kids=[24961312, 24961577, 24961186], score=None, time=1604252652, title=None, item_type='comment', url=None, parent=24961051, text='He&#x27;s talking about variable length arrays, which would be an unsized type in Rust and thus can&#x27;t be stack allocated. For example, the following is valid C99:<p>`<i>void foo(int n) { int values[n]; }</i>`<p>I don&#x27;t know that that&#x27;s a bad thing. AFAIK the implementation details are underspecified even in C and compilers kind of do whatever they want (i.e. I&#x27;ve seen some embedded compilers that monomorphize it in multiples of 2 up to a limit and just hope the user doesn&#x27;t exhaust the stack).<p>Edit: I&#x27;m pretty sure you can create a hacky version using iterators and a recursive function: `fn vla&lt;T&gt;(iter: impl Iter&lt;Item=T&gt;, init: T, index: usize, count: usize) { ... }`<p>Edit2: Actually he&#x27;s talking about `alloca` which is a whole other &quot;here be dragons&quot; feature. See the reddit thread steveklabnik linked for some of the pitfalls')