Item(by='pdimitar', descendants=None, kids=[25967475], score=None, time=1611960155, title=None, item_type='comment', url=None, parent=25954030, text='Yep, I&#x27;ve been quite exposed to [almost] pure FP for 4 years and something now -- by working with Elixir. Definitely not as hardcore as LISP or Haskell but I feel it already made me much better than before. So in terms of being exposed to new programming &#x2F; comp-sci paradigms, I don&#x27;t know, I am sure I haven&#x27;t seem them all (stuff like Coq and Idris 2 comes to mind as an example) but I also don&#x27;t want to only invest in being a walking talking (and useless) encyclopaedia. :)<p>&gt; <i>This is something you don&#x27;t have in Rust or Elixir at all (to my knowledge).</i><p>Maybe I am misunderstanding you but Erlang -- and thus Elixir -- has the best actor system invented so far. Message passing, copying data between actors, immutability, Erlang&#x27;s OTP (fault-tolerance and tunable restarts of crashed actors), all of those things were the entire reason I moved my web work to Elixir at all. Well, the amazingly well done build and task executing tool `mix` turned out to be a huge and pleasant bonus, not to mention the very welcoming community and top-notch docs and best-I-ever-seen REPL experience.<p>In fact Erlang&#x27;s actor system is so good that those in Scala and .NET were very heavily inspired by it. Akka in Java land as well.<p>Rust is getting there too -- the async semantics, the const functions and the various runtimes definitely are converging to much more efficient and machine-native actors with zero copying semantics and dynamic multiplexing on all CPU cores. I am extremely excited to see where Rust is headed in the next 5 years. It has the potential to get very close to the end-all be-all language.<p>&gt; <i>If you want to specialize, learn Rust in and out. :D </i><p>Completely agreed! There&#x27;s <i>so much work</i> to be done out there that requires efficient use of hardware. So many companies have legacy systems still limping on ancient C&#x2F;C++ monoliths and 2-3 brave souls are maintaining them, but the business wants either new features or the tech debt is preventing any improvements -- reasons abound.<p>Rust is extremely well-positioned to disrupt a lot of companies with legacy systems. I am planning to cash in on these opportunities. So it&#x27;s a good advice from you, thank you.')