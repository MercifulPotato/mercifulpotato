Item(by='housecarpenter', descendants=None, kids=None, score=None, time=1610563827, title=None, item_type='comment', url=None, parent=25716340, text='Python does have a &quot;partial&quot; function which does currying:<p><pre><code>  from functools import partial\n\n  a |&gt; partial(zip, b) |&gt; partial(map, func1) |&gt; partial(filter, func2) |&gt; partial(forall, func3)\n</code></pre>\nObviously it&#x27;s a bit more verbose than if the currying was done implicitly, but it&#x27;s not too bad, I think. You could also import partial under a shorter name if you want.<p>partial does have an advantage over implicit currying in that you can use keyword arguments to neatly curry on a parameter other than the first, although this isn&#x27;t properly utilized by Python because most of the built-in functions have place-based rather than keyword arguments. In languages with implicit currying you have to use anonymous function expressions or functions like flip (flip(f, x, y) = f(y, x)) to deal with this.<p>It might also be worth noting that |&gt; doesn&#x27;t essentially need to be an operator, it would just be syntactic sugar:<p><pre><code>  def chain(x, *fs):\n      y = x\n      for f in fs:\n          y = f(x)\n      return y\n\n  chain(a, partial(zip, b), partial(map, func1), partial(filter, func2), partial(forall, func3))\n</code></pre>\nObviously having it as an infix operator is nicer, and produces less parentheses.')