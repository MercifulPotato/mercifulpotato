Item(by='lemmsjid', descendants=None, kids=None, score=None, time=1603745026, title=None, item_type='comment', url=None, parent=24900470, text='Being able to off-the-cuff use JMX to do realtime heap and stack analysis and then go deep with an offline heap dump (via Eclipse MAT, for example) is quite nice.  On top of it you have a standardized interface for emitting counters and gauges.  You can kind of get that through effort with other ecosystems (closest probably being .NET), but with the JVM it&#x27;s just there and it&#x27;s standardized.  Have a memory leak that takes days of operation to manifest?  Set up a trigger to heap dump at a certain time, then open up MAT and you can find some very subtle memory leaks and lock contention issues.  Any JVM is basically running in a valgrind sandbox, with enough symbols to support a low overhead gdb connect, with a standard API for emitting meta-performance data.<p>All the above can be done in other environments, but generally with specially prepared deployments or executables, with choices being made along the way as to how to do it.  I think the two key things are that in the JVM the heap is actually a quite structured database, which allows for introspection without recompilation or special tooling, and there&#x27;s a standard mechanism for exposing detailed performance data.<p>Whether or not that translates into actual productivity differences is tricky.  In my experience large companies tend to build their own equivalent and better-targeted tooling, and smaller companies increasingly pass their performance diagnostics to SAAS companies.  It takes time to learn diagnostic tools and procedures in general, and in my experience a lot of Java teams don&#x27;t know the tooling they have.  I&#x27;d say the main productivity gain would be in quickly diagnosing production issues.  You could argue that the JVM leads to software thinking that increases production issues by relying on long-running processes that need the stability to survive, but in my experience there are definitely niches where that is the only way to meet your performance goals.')