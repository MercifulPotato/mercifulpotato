Item(by='setr', descendants=None, kids=[25934054, 25934249, 25943251, 25934027, 25934165, 25936153, 25934120], score=None, time=1611780885, title=None, item_type='comment', url=None, parent=25933698, text='At least regarding games, ECS is the popular flavor-of-the-month alternative to OOP as a design strategy. The main problem being that games often have a <i>lot</i> of special cases, which break the inheritance hierarchy quite quickly.<p>E.g. Defining a weapon &gt; {sword, wand} hierarchy, with respective properties for melee and casting, and then defining a unique weapon <i>spellsword</i> which is capable of both melee <i>and</i> casting. You could inherit from weapon, and copy &amp; paste sword&#x2F;wand code, or inherit from sword&#x2F;wand, and copy &amp; paste the other, but the hierarchy is broken.<p>ECS would rather have you define [melee] and [casting] components, and then define a sword to have [melee], wand to have [casting] and spellsword to have [melee, casting]. So instead of representing the relationships as a tree of inheritance, you represent it as a graph of components (properties). And then you generically process any object with the melee tag, and any object with the casting tag, as needed.<p>And of course then you could trivially go and reach out across the hierarchies and toss [melee] onto your house object and wield your house like a sword -- I don&#x27;t know why you&#x27;d want to do that, but the architecture is flexible enough to do so (perhaps to your detriment).<p>Dwarf Fortress probably has the best example of this: <a href="https:&#x2F;&#x2F;github.com&#x2F;BenLubar&#x2F;raws&#x2F;blob&#x2F;archive&#x2F;objects&#x2F;creature_amphibians.txt" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;BenLubar&#x2F;raws&#x2F;blob&#x2F;archive&#x2F;objects&#x2F;creatu...</a><p>That&#x27;s probably more an example of &quot;metadata-driven&quot; but it&#x27;s ultimately the same thing -- an entity in the game is defined by its components, and the job of the game engine is to simply drive those components through the simulation. That particular example has its metadata (e.g. aesthetics: [CREATURE_TILE:249][COLOR:2:0:0]), its capabilities (e.g. [AMPHIBIOUS][UNDERSWIM]) and its data (e.g. [PETVALUE:10][BODY_SIZE:0:0:200]).<p>And it even has inheritance :-)<p><pre><code>    [CREATURE:TOAD_MAN]\n       [COPY_TAGS_FROM:TOAD]\n       [APPLY_CREATURE_VARIATION:ANIMAL_PERSON]</code></pre>')