Item(by='barrkel', descendants=None, kids=[24765481], score=None, time=1602594654, title=None, item_type='comment', url=None, parent=24763693, text='GUIs can easily use shallow trees for ownership. There&#x27;s a natural harmony between the hierarchical composition of UIs and ownership hierarchy.<p>E.g. Delphi&#x27;s VCL has a simple and clear ownership mechanism. Components are owned by their Owner, which is either the Application (forms), a form (for almost all the controls on the form), or a control (for custom controls - normally nested controls are owned by the form). And there&#x27;s a couple of eventing mechanisms to resolve peer reference relationships, and to negotiate dynamic control addition and removal. Unless you start adding components to collections or otherwise capturing long-term references to them (and you can use name-based access if you need a safe indirection), leaks and dangling references aren&#x27;t that common.<p>Implementing that model in Rust, with usable borrows that stop you creating dangling references, isn&#x27;t trivially obvious to me, but there are ways around, I think: message passing communication, passing closures in, or ephemeral trees which proxy access to the real UI tree.')