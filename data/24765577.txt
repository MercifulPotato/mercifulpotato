Item(by='ls65536', descendants=None, kids=[24765923], score=None, time=1602597507, title=None, item_type='comment', url=None, parent=24765345, text='The way in which I like to often think about these things in practice is with &quot;hidden&quot; constant factors. For example, you can think of the O(1) algorithm as really taking O(1 * K1) time, and the O(n) algorithm taking O(n * K2) time to complete. For different algorithms, K1 and K2 will almost certainly be distinct, and may even differ by significant amounts. Of course, if K1 is less than K2, then the value of &quot;n&quot; is irrelevant, and the O(1) algorithm always completes faster. But if K1 is greater than K2, as is the case quite often, then this really depends on the nature of what &quot;n&quot; is in practice, and whether or not it is larger than the value of K1&#x2F;K2. This of course still ignores any other, often important, considerations beyond just run time such as memory consumption (which may also affect run time indirectly), but I find it&#x27;s a good starting point when trying to reason about when O(n) can run faster than O(1) in various real-world scenarios.<p>It&#x27;s a good reminder to always try to understand your likely workloads as well as possible (know your &quot;n&quot;), and to get good measurements (what are K1 and K2 values) before prematurely optimizing these kinds of things.')