Item(by='toast0', descendants=None, kids=None, score=None, time=1610178245, title=None, item_type='comment', url=None, parent=25694601, text='Do you have a reference discussing core scheduling specifically to manage heating?<p>There&#x27;s a ton of different rationales for scheduling processes to cores, and lots of core scheduling algorithms, but I wasn&#x27;t aware of try to keep all the cores the same temperature.<p>Modern CPUs can run each cores at a different clock, and you get higher clock speeds when fewer cores are running, so depending on overall system load, condensing to fewer cores can result in better throughput. As well, individual core performance varies, so some schedulers will try to identify which cores can clock the highest and schedule tasks on those cores first.<p>Generally, there are benefits from keeping a process running on the same core, but there&#x27;s all sorts of scenarios that end up with a process bouncing over many cores.<p>For example, if you have an active cpu program and get an interrupt serviced by the core its running on, an otherwise idle core may steal the process, because the process is runnable but not running. Pinning it to any particular core might work better, but if you pin processes without a plan for all your processes, you can end up with a lot worse throughput. It&#x27;s pretty easy to pin too many things to a single core and that core is 100% busy and other cores are idle, even though there were enough processes to saturate all the cores. Of course, if all of those processes are working together on the same shared memory with lots of lock contention, you might have worse throughput because of cross-core synchronization.<p>You can spend a lot of time tweaking things, but most OSes have a pretty decent general purpose scheduler. Pinning works great for things where you take up the whole machine with a single process, and that process has good reasons to pin cpus. Ex: you&#x27;re running Erlang which has its own scheduling, or you&#x27;re running HAProxy and you&#x27;ve done the work to tightly bind each process to a specific NIC queue interrupt, so you want that process to run on the same core that handles that interrupt to avoid cross-core communication.')