Item(by='chubot', descendants=None, kids=None, score=None, time=1602263308, title=None, item_type='comment', url=None, parent=24712166, text='The section following this quote is good:<p><i>The most important principle in rc’s design is that it’s not a macro processor. Input is never scanned more than once by the lexical and syntactic analysis code</i><p>And they describe the IFS=&#x2F; hole for setuid programs which is a good one.<p>Oil follows the same principle, which I call static parsing [1], versus the dynamic parsing or undecidable parsing of Bourne shell and all its derivatives like bash.<p>(A notable difference is that Oil compatible with POSIX, Bourne shell, ksh, and bash, while rc is not.)<p>I probably got that idea from rc shell without realizing it, as I remember reading this paper more than 10 years ago.<p>----<p>I also recently picked up Programming Perl (by Christiansen, foy, Larry Wall), and it points out the same issue with shell multiple times:<p>In Chapter 20 on security:<p><i>Unlike most shell programming languages, which are based on multiple, mysterious substitution passes on each line of the script, Perl uses a more conventional evaluation scheme with fewer hidden snags.</i><p>However, this is not entirely true, because there are corners of Perl that have undecidable parsing [2]<p>I heard Larry Wall say that one of the goals of Perl 6 was to really fix this problem. It doesn’t do dynamic parsing like Perl 5 does.<p>Also, back in January 2019, I rediscovered a security problem due to dynamic parsing which appears in all Bourne-derived shells (and at least the OpenBSD shell actually patched it, not sure about bash):<p><a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2019&#x2F;01&#x2F;18.html#a-story-about-a-30-year-old-security-problem" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2019&#x2F;01&#x2F;18.html#a-story-about-a...</a><p><a href="https:&#x2F;&#x2F;github.com&#x2F;oilshell&#x2F;blog-code&#x2F;tree&#x2F;master&#x2F;crazy-old-bug" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;oilshell&#x2F;blog-code&#x2F;tree&#x2F;master&#x2F;crazy-old-...</a><p>The guy who discovered ShellShock in 2014 wrote a few of the StackOverflow answers there.<p>----<p>Plug: tell me what you think of Oil’s syntax :)  [3]<p>[1] <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.2&#x2F;doc&#x2F;syntactic-concepts.html" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.2&#x2F;doc&#x2F;syntactic-concept...</a> and <a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2016&#x2F;10&#x2F;22.html" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2016&#x2F;10&#x2F;22.html</a><p>[2] <a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2016&#x2F;10&#x2F;20.html#appendix-parsing-c-perl-and-make-is-also-undecidable" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2016&#x2F;10&#x2F;20.html#appendix-parsin...</a><p>[3] <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.2&#x2F;doc&#x2F;syntax-feelings.html" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.2&#x2F;doc&#x2F;syntax-feelings.h...</a><p>(copy of lobste.rs comment)')