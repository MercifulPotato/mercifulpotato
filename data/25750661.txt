Item(by='dragontamer', descendants=None, kids=None, score=None, time=1610474422, title=None, item_type='comment', url=None, parent=25741276, text='&gt; NV has put a great deal of recent work into getting their system to execute regular multi-threaded code with the same sort of speedup as they have had with SIMD workloads.<p>I think you&#x27;re talking about &quot;Independent Thread Scheduling&quot;, which has been deployed since Volta.<p><a href="https:&#x2F;&#x2F;docs.nvidia.com&#x2F;cuda&#x2F;volta-tuning-guide&#x2F;index.html#sm-independent-thread-scheduling" rel="nofollow">https:&#x2F;&#x2F;docs.nvidia.com&#x2F;cuda&#x2F;volta-tuning-guide&#x2F;index.html#s...</a><p><a href="https:&#x2F;&#x2F;images.nvidia.com&#x2F;content&#x2F;volta-architecture&#x2F;pdf&#x2F;volta-architecture-whitepaper.pdf" rel="nofollow">https:&#x2F;&#x2F;images.nvidia.com&#x2F;content&#x2F;volta-architecture&#x2F;pdf&#x2F;vol...</a><p>You&#x27;re close... but wrong in a few key areas.<p>What NVidia has done is make it POSSIBLE to run multithreaded code without deadlocks. There&#x27;s still the thread-divergence performance problem.<p>That is to say: you can now do more classical lock&#x2F;unlock paradigms on NVidia hardware, but the code is serialized and becomes sequential. One 32-wide SIMD unit will execute only 1x thread at a time in that case. (That is: 1&#x2F;32 utilization. The SM is designed to handle 32 SIMD threads but is only executing one of them at a time)<p>So you still have the thread-divergence performance problem. On older GPUs, such divergence would have been a DEADLOCK instead. So you&#x27;ve gone from 0% performance utilization to 3% utilization, which means your code actually will finish.<p>But it doesn&#x27;t mean that your code actually has any degree of worthwhile performance. Indeed: CPUs have proven that time-and-time again, per-thread branch-prediction and prefetching is best for that kind of code.<p>If you have a great deal of divergent if&#x2F;else statements in your code, you&#x27;ll want to run on CPUs. NVidia GPUs can now handle those situations better (ie: without deadlocking if those if&#x2F;else statements contain thread-synchronization statements), but they aren&#x27;t actually high-performance in those use cases.')