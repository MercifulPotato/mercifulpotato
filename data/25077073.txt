Item(by='WorldMaker', descendants=None, kids=[25077759], score=None, time=1605226003, title=None, item_type='comment', url=None, parent=25071685, text='To join in the gripe session because Angular has been hurting me for months: I&#x27;m in a consulting firm and generally we have a lot flexibility on project stacks. I&#x27;ve been really happy with React on the projects I&#x27;ve done with it. I&#x27;ve recommended React on every following project. Lately I&#x27;ve been getting a lot of pushback from some clients that it &quot;has to be&quot; Angular because &quot;they know it&quot;, and got a lot more pushback from colleagues that they wanted it to be Angular because &quot;they know it&quot;. Find out a few months later that everyone &quot;knows it&quot; only in the Stockholm Syndrome bare minimum &quot;checkbox on a resume&quot; fashion and suddenly I&#x27;ve become the expert on Angular in the company because I have problems to solve and know one else that supposedly &quot;knows Angular&quot; actually knows how to solve them. The more I become an expert on Angular the more I hate Angular and would rather be back in React. (But of course it is too late to switch stacks now, given project deadlines, etc.)<p>&gt; There&#x27;s never anything obvious when it comes to analysing the bundle and it seems we&#x27;re using everything we need: Angular, Material, RxJS<p>Yeah, that&#x27;s exactly the major sources of bloat in Angular. Angular&#x27;s runtime and core components are extremely fat despite how much they keep claiming is compile-time optimized. I&#x27;m terrified to look at the source for HttpClient because I cannot imagine how it possibly is big enough to explain its huge {minimized, gzipped} bundle size. That&#x27;s just one Angular component in the vendor chunk that &quot;has to be there&quot;.<p>Angular Material is another huge source of bloat and a lot of what I&#x27;ve been doing is removing it as much as possible. It seems like everyone throws in Angular Material feeling like it is a &quot;best practice&quot;, but &quot;no one&quot; seems to like its styling or behaviors out of the box, put a ton of work into redoing its styling&#x2F;behaviors in a complicated and bespoke way in nearly every usage and end up burying the already extremely bloated Angular Material components under whole new onion layers of their own bloat. Every time I dig into one of these bloat onions I seem to find it easier to write a fresh component from scratch and get rid of the Material dependency altogether.<p>RxJS is also huge, and it&#x27;s a grand source of continuing disappointment with Angular how wishy-washy it has been with respect to Observables. If you are going to require a giant library like that, at least <i>commit</i> to it. Of course if Angular actually committed to Observables that might lead to using a lighter library instead of bundling the kitchen sink that is RxJS. (For several years I worked in an Observable focused React-like called CycleJS and one of the big moves CycleJS did primarily for bundle size reasons was switch to an &quot;RxJS-lite&quot; library named xstream.)<p>As someone that actually understands (and heavily uses Observables) it just absolutely floors me at how bad Angular is with them, almost like it is designed to encourage the worst practices for RxJS&#x2F;Observable code. I see <i>so many</i> components manually (and badly) subscribing and unsubscribing from Observables that should never need to, sometimes simply because the authors weren&#x27;t aware of the &quot;| async&quot; Async Pipe. (And why should they be, pipe documentation is almost hidden and yet another twisted part of Angular&#x27;s template syntax with no relation to Typescript syntax despite appearing in places designed to look like Typescript?) Async Pipe is mentioned like a footnote in the Observable documentation that nearly everyone skips past. It <i>should have been</i> the default (or better yet <i>the only way</i>) in the template language: you have Observables, change detection, even &quot;AOT compiled&quot; change detection shouldn&#x27;t be necessary! Observables should easily replace change detection. Zone.js is nearly entirely bloated redundant nonsense that shouldn&#x27;t ever exist side-by-side RxJS, and would never be necessary if everything were Observables. It&#x27;s almost a painful joke at this point how badly Angular makes use of Observables, how it works twice as hard to do half as well if it merely committed to Observables and only Observables instead of this half-Observable slash old school template change detection beast that it is today. Pick one and commit to it and so much bloat in Angular would just go away.')