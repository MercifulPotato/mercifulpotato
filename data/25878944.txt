Item(by='astrange', descendants=None, kids=None, score=None, time=1611368649, title=None, item_type='comment', url=None, parent=25878675, text='I agree that&#x27;s a real difference and M1 makes good use of it, it&#x27;s just to me RISC (&quot;everything MIPS did&quot;) vs CISC (&quot;everything x86 did&quot;) implies a lot of other stuff that&#x27;s just coincidences. Specifically RISC means all of simple fixed-length instructions, 3-operand instructions (a=b+c not a+=b), and few address modes. Some of these are the wrong tradeoff when you have the transistor budget of a modern CPU.<p>x86 has complicated variable instructions but the advantage is they&#x27;re compressed - they fit in less memory. I would&#x27;ve expected this to still be good because cache size is so important, but ARM64 got rid of theirs and they know better than me, so apparently not. (They have other problems, like they&#x27;re a security risk because attackers can jump into the middle of an instruction and create new programsâ€¦)<p>One thing you can do is have a cache after the decoder so you can issue recent instructions over again and let it do something else. That helps with loops at least.')