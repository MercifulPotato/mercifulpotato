Item(by='suzuki', descendants=None, kids=None, score=None, time=1604664922, title=None, item_type='comment', url=None, parent=25006488, text='I have written almost the identical Scheme interpreters in Ruby and Crystal: [1] and [2].  The biggest difference I have felt between them is the absence of good old Object, which can represent everything at runtime, from Crystal.  I had to declare Obj and Val:<p><pre><code>  class Obj\n  end\n\n  # Value operated by Scheme\n  alias Val = Nil | Obj | Bool | String | Int32 | Float64 | BigInt\n</code></pre>\nto define Cons Cell of Scheme:<p><pre><code>  # Cons cell\n  class Cell &lt; Obj\n    include Enumerable(Val)\n\n    getter car : Val            # Head part of the cell\n    property cdr : Val          # Tail part of the cell\n\n    def initialize(@car : Val, @cdr : Val)\n    end\n\n    ...\n  end # Cell\n</code></pre>\nNote that you see generics, Enumerable(Val), and constructor arguments with &#x27;@&#x27; in the excerpt above.<p>As for performance, Crystal is faster than Ruby 8.6 times as interpreter and 39.4 times as compiler [3].  You can use Crystal as a superfast (and typed) Ruby interpreter, in a sense.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme-in-ruby" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme-in-ruby</a>\n[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme-in-crystal" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme-in-crystal</a>\n[3] <a href="https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme#performance" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nukata&#x2F;little-scheme#performance</a>')