Item(by='exikyut', descendants=None, kids=None, score=None, time=1606747971, title=None, item_type='comment', url=None, parent=25238622, text='Oooh, a wall of pictures, even better!<p>In all seriousness, <i>Wow</i>, this is really cool. Reading through the readmes was admittedly less interesting :) than firing up the editor, getting confused for about 2 minutes, then going <i>&quot;oh&quot;</i> once I got the relationship between metagons and jigs, and that the kernel was basically a placement system based on a rule engine combined with a solver. Coool.<p>This is admittedly very over my head :) (I may or may not have tried deleting most of the metagons to see if I could start with with simpler layouts, but then I just got handed lots of single-metagon renders instead.)<p>This makes me think of a bunch of a different categories of Android apps:<p>- &quot;paint by number&quot; thingies that let you passively &quot;color&quot; pictures by matching up numbered colors with a pixellated numbered grid based on a supplied image<p>- pattern generators that let you create your own wallpapers, quite a few based on tesselated designs (&quot;geometric pattern&quot; and &quot;tangram generator&quot; are good keyphrases; &quot;wallpaper pattern&quot; also seems to weed out lock-screen pattern generators)<p>- active wallpapers that display graphical effects of different kinds<p>- &quot;geometric drawing&quot; apps that generally use some kind of rule system as the basis of control<p>There are likely other general categories I&#x27;m not thinking of.<p>This system doesn&#x27;t directly fit exactly into any of the boxes defined above, but the apparent widespread popularity(?) for the above kinds of apps may suggest the existence of a target demographic that might like being available to play with this kind of thing on a phone or tablet. The only consideration is the learning curve.<p>I cannot deny that I&#x27;m describing several months&#x2F;subprojects-worth of work to port the renderer to run within Android, replace the AWT&#x2F;Swing UI with something that would be intuitive on touchscreens of various sizes, figure out what crowd(s) to make the app appeal to (eg, solely technical focus, or general passive&#x2F;&quot;arty&quot; demographic)... but if you ever wanted to showcase the project further, given that the architecture is already written in Java, an Android port almost seems like a shoo-in answer. (I&#x27;d actually forgotten it was written in Java when I went &quot;ooh, I want to play with this on my phone.&quot;)<p>Hmm; I made a wall of text to say &quot;port this to Android&quot;. I&#x27;m more trying to say, &quot;<i>if</i> you have the motivation, porting to Android may have positive results&quot;. :)<p>Thanks for sharing. It&#x27;s very cool to see the results of sticking to&#x2F;studying&#x2F;exploring the depths of the implications of a specific rule system for as long as you have.')