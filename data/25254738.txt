Item(by='chaorace', descendants=None, kids=[25255006], score=None, time=1606750153, title=None, item_type='comment', url=None, parent=25254361, text='I don&#x27;t actually know what an intent flow is! I tried to Google around, but all I can seem to find are proprietary keyword mishmashes used for digital payment systems. I&#x27;m guessing you&#x27;re talking about, like, intent in the context of a state machine? Set me straight here if I misunderstand.<p>I see the validity of what you&#x27;re saying, but only in the context of insufficiently verbose third-party error messages. There&#x27;s no reason that the exception message could not have been more detailed.<p>In my own projects, I like to design the functions that constitute the &quot;plumbing&quot; in such a way that they rethrow errors with more descriptive errors. We&#x27;re venturing out into the realm of practice from that of theory, so this is just me sharing for the hell of it, but here&#x27;s how that looks:<p><pre><code>    &#x2F;&#x2F; Helper function meant to be reused in many function definitions\n    function throwIfFunctionParameterUndefined(functionName, parameterName, value){\n        if (value === undefined)\n            throw new TypeError(`${functionName} invoked with undefined parameter ${parameterName}`)\n    }\n\n    function doThing(paramA, paramB, optionalParam){\n        &#x2F;&#x2F; Assert and throw for things we can guarantee in a meaningful way\n        &#x2F;&#x2F; Since this is plumbing, we trust that higher level functions will catch if this is recoverable\n        const throwIfParameterUndefined = (paramName, value) =&gt; throwIfFunctionParameterUndefined(&#x27;doThing&#x27;, paramName, value)\n        throwIfParameterUndefined(&#x27;paramA&#x27;, paramA)\n        throwIfParameterUndefined(&#x27;paramB&#x27;, paramB)\n\n        &#x2F;&#x2F; Rethrow errors from third party libraries\n        try {\n            thirdPartyThing()\n        } catch (err){\n            err.message = &#x27;thirdPartyThing invoked by doThing failed with message:\\n&#x27; + err.message\n            throw err\n        }\n    }</code></pre>')