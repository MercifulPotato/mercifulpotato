Item(by='carapace', descendants=None, kids=None, score=None, time=1610461836, title=None, item_type='comment', url=None, parent=25746983, text='I did that, and it was.  :)  I wrote some (incomplete) type inference code for Joy (a Forth-like functional language) and that (among other things) led me to Prolog.  I was surprised how simple it is both syntax and semantics.  ( <a href="https:&#x2F;&#x2F;joypy.osdn.io&#x2F;notebooks&#x2F;Types.html" rel="nofollow">https:&#x2F;&#x2F;joypy.osdn.io&#x2F;notebooks&#x2F;Types.html</a> )  I eventually reimplemented Joy in Prolog and discovered that the type inference code was identical to the interpreter code!  ( <a href="https:&#x2F;&#x2F;git.sr.ht&#x2F;~sforman&#x2F;Thun&#x2F;tree&#x2F;master&#x2F;source&#x2F;thun.pl" rel="nofollow">https:&#x2F;&#x2F;git.sr.ht&#x2F;~sforman&#x2F;Thun&#x2F;tree&#x2F;master&#x2F;source&#x2F;thun.pl</a> )<p>For anyone looking to implement a Prolog Paul Tarau has an interesting approach: &quot;A Hitchhikerâ€™s Guide to Reinventing a Prolog Machine&quot;\n<a href="https:&#x2F;&#x2F;www.cse.unt.edu&#x2F;~tarau&#x2F;research&#x2F;2017&#x2F;eng.pdf" rel="nofollow">https:&#x2F;&#x2F;www.cse.unt.edu&#x2F;~tarau&#x2F;research&#x2F;2017&#x2F;eng.pdf</a>')