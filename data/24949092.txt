Item(by='rswail', descendants=None, kids=[24949591], score=None, time=1604117858, title=None, item_type='comment', url=None, parent=24945529, text='RPC (not just gRPC, but all its ancestors) as an architectural approach has the following problems that gRPC hasn&#x27;t solved:<p>* It requires tight coupling between client and server<p>* It uses non standard naming and discovery which doesn&#x27;t work across network boundaries, which is why SOAP and XML-RPC were invented, a way of channelling RPC over port 80&#x2F;443.<p>* The problems of handling of state synchronization between client and server and the lack of standard failure and error modes.<p>* The lack of standards for caching of responses or middleware boxes for load balancing, rate limiting, deployment practices.<p>REST avoids these (and others) by:<p>* Using content negotiation and media types to communicate the format of requests and responses<p>* Using standard (DNS) naming and discovery network mechanisms<p>* Is a stateless protocol (between requests) that specifically expects that the client and server will exchange their states as part of each individual request. Being stateless, it accommodates network errors and the definitions of idempotency and limits on the number and types of verbs and reasonably strict definitions of their use also provide standard mechanisms for recovery.<p>* Specifically defines and accomodates naming, discovery, caching, chunking requests&#x2F;replies, streaming, middleware cache and content distribution, network boundaries, security authentication and authorization etc.<p>Other than having an IDL that has tooling to generate stubs&#x2F;clients in multiple languages, there are no distinct advantages of gRPC&#x2F;protobuf over REST&#x2F;HTTP, particularly in the general case of independent clients and servers from different organizations and user groups.<p>gRPC is a reasonable solution if your systems are able to be tightly coupled and deployed because they are either being developed as a monolith, or entirely within a common organization. If your network is reliable and not subject to interruption or partitioning between boundaries.<p>The entire &quot;web services&quot; saga of SOAP, WSDL, WS-* was an attempt 10-15 years ago to once again attempt RPC. So was RMI for Java. They failed for the same reasons.<p>People have been trying to &quot;improve&quot; RPC since the 80s, with numerous attempts and incarnations. They all suffer the same problems, which is that you cannot &quot;wish away&quot; the network by abstracting it out of existence.<p>The &quot;annoying, pointless&quot; questions of REST can be solved by not bikeshedding them each time, adopt JSON Schema, OpenAPI, JSON API and understand that REST is about the <i>nouns</i>, not the <i>verbs</i>. Limiting and strictly defining the operation of the verbs, which is what HTTP does, let&#x27;s you focus on the nouns and how you want to &quot;transfer the state&quot; of the nouns between two endpoints. That&#x27;s what REST is about.')