Item(by='identity0', descendants=None, kids=[25342488, 25342585, 25342350, 25343501, 25342247, 25342248], score=None, time=1607400758, title=None, item_type='comment', url=None, parent=25340629, text='&gt;There are two main solutions: Use an option or maybe type or Use a nullable type<p>I don&#x27;t get it. These are literally all exactly the same thing, all slightly varying in ergonomics and compiler support. They may differ slightly but to call them two different categories of solution is just creating a false dichotomy for yourself.<p>&gt; However, the type system is a little more flexible than with option types. The type system understands that a union type is a supertype of its branches. In other words, int is a subtype of int?. That means we can pass a definitely-present-integer to something that expects a maybe-present-integer since thatâ€™s safe to do.<p>You can do that in Swift, despite being placed as an example of &quot;Solution 1&quot;.<p>&gt; The short answer is that, yes, it is entirely possible to live without null, and languages like Rust do.<p>If you can call say that Swift has &quot;null&quot;, then you can equally say that Rust has &quot;null&quot;--it&#x27;s called &quot;None&quot;. The only way &quot;None&quot; and &quot;null&quot;  from other languages differ is in built-in compiler support.')