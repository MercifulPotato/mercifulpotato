Item(by='deaddodo', descendants=None, kids=None, score=None, time=1607817532, title=None, item_type='comment', url=None, parent=25386500, text='&gt; You can write a simplistic boot sector loader for PC in a few hundred ASM opcodes, that would be a lot more difficult for the average ARM bootloader because there&#x27;s a lot more to do before you can just call into Linux. In general you won&#x27;t even have RAM or caches available when u-boot begins executing.<p>This is exactly the point OP&#x27;s getting at though, and the exact &quot;discovery&quot; features you handwave away. If I write an OS (or bootloader) on x86 w&#x2F; BIOS&#x2F;uEFI, I can easily query available memory and start using it. Meanwhile u-boot has to be told via an external resource how much RAM is available before it begins initializing. This is <i>fine</i> for embedded&#x2F;bespoke development (since you&#x27;ll know the hardware you&#x27;re developing for and can make assumptions), but a pain for general OS development where you have to inform the bootloader&#x2F;OS of every devices capabilities.')