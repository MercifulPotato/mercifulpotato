Item(by='EdgarVerona', descendants=None, kids=None, score=None, time=1603268513, title=None, item_type='comment', url=None, parent=24845420, text='This is the approach I like as well, with the caveat that the stores procedures themselves should be kept as dumb and as late in the process as possible.<p>I have made many mistakes in my career in terms of systems that were either overly complicated or inefficient or both, and it has almost always ended up boiling down to either trusting the SQL that an ORM produces, or putting too much of the business logic in hand crafted stored procedures.  I have done both, regretted both, and nowadays advocate for sticking to simple, predictable, and dumb stored procedures so that you can both have the benefit of knowing&#x2F;controlling exactly what will execute in the database and having things like validation occur code side whenever possible.<p>In the real world, that simplification of stored procedures isn&#x27;t always possible.  But if it&#x27;s your starting assumption, then you can fight for it until you are certain that there isn&#x27;t a practical alternative to pushing the logic into the stored procedure.  And if a compromise of these principles needs to happen, I would push complexity into a stored procedure before trusting the SQL produced by an ORM every time.<p>But where I fall on that spectrum may just be due to the severity and types of problems I have seen happen with each approach, do YMMV.  And I wouldn&#x27;t go so far as to call myself an expert, so also YMMV on that front.  I am just a guy who has made a lot of mistakes.  But if it&#x27;ll help others, this is my takeaway.')