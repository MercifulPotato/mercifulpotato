Item(by='natchy', descendants=None, kids=[25317201], score=None, time=1607189702, title=None, item_type='comment', url=None, parent=25312807, text='Yes. Typically interop is very straightforward. You look in the api docs and copy paste.<p>Example here is the String doc[1]. Way down you see all the methods. Some of the methods have overloads (multiple variants). Pretty straightforward here. (E.g. `&quot;mystring&quot;.Contains(&quot;ring&quot;)`)<p>Where it gets more verbose and finicky is when the API takes a C# callback. Even more complex is if it’s asynchronous so it takes a C# callback as a Task.<p>An example being the `.Use` method for defining server middleware.[2]<p>To see how it’s done, here’s a gist I found.[3] Notice how the function for requestHandler is verbosely annotated with Func&lt;&gt; and RequestDelegate, etc.<p>Luckily this isn’t the norm, most APIs are less complicated. Even so, you write a wrapper (abstraction) around that complexity and only look at your wrapper. Which is why someone in this thread said to leave them in a dark corner.<p>[1]: <a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.string?view=net-5.0" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;system.string?vi...</a><p>[2]: <a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.aspnetcore.builder.useextensions.use?view=aspnetcore-5.0#Microsoft_AspNetCore_Builder_UseExtensions_Use_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_Func_Microsoft_AspNetCore_Http_HttpContext_System_Func_System_Threading_Tasks_Task__System_Threading_Tasks_Task__" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;api&#x2F;microsoft.aspnet...</a><p>[3]: <a href="https:&#x2F;&#x2F;gist.github.com&#x2F;kspeakman&#x2F;7870a75283f6942dd96ff34a03a612f8#file-program-fs-L27" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;kspeakman&#x2F;7870a75283f6942dd96ff34a03...</a>')