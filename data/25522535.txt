Item(by='dragontamer', descendants=None, kids=[25524232], score=None, time=1608759574, title=None, item_type='comment', url=None, parent=25521247, text='&gt; I&#x27;m actually really curious what you all do in C&#x2F;C++ to prevent bad operations from ever being performed in the first place.<p>1. Go as far as you can with static memory. Don&#x27;t call the allocator: its slow, sometimes requires inter-thread communications.<p>2. Dynamic uses often can use the stack: almost always in L1 of your local core. Stack allocations are self-cleaning, just don&#x27;t pass those pointers to anyone else.<p>3. unique_ptr&lt;blah&gt; covers most of the true dynamic issues.<p>4. shared_ptr&lt;blah&gt; covers the rest of them.<p>---------<p>The above advice is just general-purpose &#x2F; low-performance code.<p>If you&#x27;re entering high performance coding (aka: you&#x27;re actually worried about fragmentation, memory sizes, and such), then things get more complicated. Embedded is often RAM-restricted, so you end up in this complicated place where you need to think of highly-efficient techniques.<p>That&#x27;s almost always a complexity &#x2F; resource tradeoff. Efficient techniques are just innately more complex than general purpose techniques. Try not to reach for efficient coding unless you know its something you need to do')