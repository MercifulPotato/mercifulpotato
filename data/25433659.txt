Item(by='shiny', descendants=None, kids=None, score=None, time=1608058771, title=None, item_type='comment', url=None, parent=25425263, text='I&#x27;m working on a similar thing, tho I don&#x27;t intend to extract it into a library (yet).  I was inspired by Gary Bernhardt&#x27;s blog post [1] and video [2].<p>I have an endpoints.ts file, shared between client&#x2F;server, which has something like:<p><pre><code>  export type Endpoints = {\n    createProduct: {\n      path: &#x27;&#x2F;api&#x2F;products.json&#x27;;\n      method: &#x27;POST&#x27;;\n      clientSends: { name: string };\n      serverResponds: ProductJSON;\n    };\n  }\n</code></pre>\nThe client can do `makeRequest(&#x27;createProduct&#x27;, ...)` and the Express server can use `registerEndpoint(&#x27;createProduct&#x27;, ...)` which must adhere to the schema defined above.<p>TypeScript&#x27;s structural typing helps a lot here.<p>Of course, I can &quot;lose&quot; typing through things like raw SQL queries (working on a mini db helper library to help with that), but so I&#x27;ll have to validate that the endpoints return what they say they do through tests (probs using io-ts).<p>I&#x27;m just getting started (coming from Rails).  Not sure what the &quot;correct&quot; way to do this is, but my approach works so far.  Would also be nice to have a generic way to create REST endpoints for a given resource, but meh.<p>[1]: <a href="https:&#x2F;&#x2F;www.executeprogram.com&#x2F;blog&#x2F;porting-to-typescript-solved-our-api-woes" rel="nofollow">https:&#x2F;&#x2F;www.executeprogram.com&#x2F;blog&#x2F;porting-to-typescript-so...</a><p>[2]: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GrnBXhsr0ng" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=GrnBXhsr0ng</a>')