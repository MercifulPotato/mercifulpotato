Item(by='evanelias', descendants=None, kids=[25922170, 25921422], score=None, time=1611681679, title=None, item_type='comment', url=None, parent=25917522, text='&gt; Shards increase the number of failure modes and increase the complexity of those failure modes.<p>I would only agree with this during the initial implementation of sharding. Once deployed and stable, I have not found this to be the case, at all.<p>I say this as someone who has directly architected a sharded database layer that scaled to over a trillion rows, and later worked on core automation and operations for sharded databases that scaled to an incalculable number of rows (easily over 1 quadrillion).<p>In both cases, each company&#x27;s non-sharded databases were FAR more operationally problematic than the sharded ones. The sharded database tiers behave in common ways with relatively uniform workloads, and the non-sharded databases were each special snowflakes using different obscure features of the database.<p>&gt; keep it simple, don&#x27;t shard until you need<p>I would have wholeheartedly agreed with this until a few years ago. Cloud storage now permits many companies to run monster 10+ TB monolithic relational databases. Technically these companies no longer &quot;need&quot; to shard, possibly ever. But at these data sizes, many operations become extremely painful, problematic, and slow.')