Item(by='derefr', descendants=None, kids=None, score=None, time=1607473284, title=None, item_type='comment', url=None, parent=25352914, text='Certainly, all the current <i>implementations</i> of Kubernetes are built out of enterprise-scale components — even if they&#x27;re then squeezed into the girdle of a developer tool, the way microk8s is.<p>But the <i>design</i> (functional architecture, APIs, etc.) of Kubernetes makes good sense for small scale as well.<p>There&#x27;s nothing fundamentally stopping someone from creating an &quot;embedded Kubernetes&quot; that exposes all the same resource APIs, but which is just a management interface for e.g. a JVM, or an Erlang node, where all those APIs are just controlling in-memory abstractions existing inside one userland process. Presenting itself as a &quot;cluster&quot; with one fixed node pool, with one fixed node, with one fixed type of container runtime which is just &quot;spawn an actor-thread in this process.&quot;<p>I don&#x27;t disagree that people are pursuing the enterprise k8s stuff when they aren&#x27;t at the right scale to need it — but I think it&#x27;s important to realize that they&#x27;re often doing that because they see the <i>design</i> of k8s as fundamentally sound, providing sensible abstractions and management interfaces that neither plain OS process APIs, nor Docker&#x27;s APIs, nor IaaS-level control-plane APIs have great equivalents for. It&#x27;s that <i>design</i> they&#x27;re after; the HA stuff is just a &quot;nice-to-have&quot; that they end up adding on, because all the guides they read (that are written for enterprise integrators) insist it&#x27;s a great idea.<p>(Tangent: if Docker Inc. would get off their collective butts and do Docker Swarm over again, but this time with k8s-compatible APIs, I&#x27;m sure it&#x27;d become the most-used &quot;Kubernetes&quot; overnight. <i>Most</i> devs just want a regular Docker host, that they can `kubectl apply -f` against.)')