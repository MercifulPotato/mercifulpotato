Item(by='moonchild', descendants=None, kids=None, score=None, time=1606611274, title=None, item_type='comment', url=None, parent=25240806, text='&gt; You manually specified the tool to be run ($CC) and all of the arguments to that tool<p>Notably, I didn&#x27;t specify the arguments to be used to compile the source files.  But if you insist:<p><pre><code>  linklibrary = $(CC) -shared -o $1 $2\n\n  libfoo.so: $(OBJ)\n          $(call linklibrary,$@,$(OBJ))\n</code></pre>\nNotably, linklibrary can be defined according the platform, or according to dynamically set variables, giving you the same level of flexibility as make.<p>&gt;&gt; There&#x27;s no reason [sandboxing] shouldn&#x27;t be possible with make; it just hasn&#x27;t been implemented so.<p>&gt; Make is 44 years old. If it were an easy extension to the existing paradigm, there has been ample time to implement such an extension.<p>‘Nobody&#x27;s done it yet, ergo it&#x27;s not possible or easy’ is not a valid argument.<p>&gt; just one example, any header that is conditionally included (behind an #ifdef) could cause this cache to be invalidated when CFLAGS change, but Make has no idea of this.<p>Then you specify that the source files depend on the makefile.')