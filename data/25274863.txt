Item(by='rdgthree', descendants=None, kids=None, score=None, time=1606901929, title=None, item_type='comment', url=None, parent=25263488, text='This is an argument that I&#x27;ve found myself making fairly regularly, and often frustratingly after attempting to hunt down a bug through 10 levels of abstraction that didn&#x27;t need to be there. Add &quot;debugging complexity&quot; when it&#x27;s warranted, but don&#x27;t add it by default. More files and functions mean more jumping around and more potential blind spots.<p>That being said, John Carmack makes the very important point that this decision (whether to inline or not) should be made case-by-case. Someone in these comments used the flow of a novel as an example and I think it&#x27;s actually the ideal way to describe the balance you want to strike with code as well. Using &quot;The Tortoise and the Hare&quot; as an example:<p>Inlined too much: &quot;The race began. The Tortoise took a step. The Hare took a step. The Hare took another step. The Hare took another step. The Hare took another step...&quot;<p>Inlined too little: &quot;The race began. The Tortoise won!&quot;<p>It&#x27;s interesting because some authors actually make mistakes in this realm - overdoing it on details, or leaving the reader confused without enough context. Thinking about the flow of code like the flow of a novel is probably a good idea - both should delicately balance complexity with readability. The best examples of both often describe complex and nuanced concepts while remaining surprisingly straightforward.<p>If you think this example is contrived and it&#x27;s always obvious where to abstract and where to inline, it&#x27;s likely you&#x27;re over-abstracting. The question of &quot;where to cut&quot; varies greatly from one bit of code to the next and often needs some thought to get right. John&#x27;s list under &quot;To sum up&quot; here is a great set of guidelines to answer that question.')