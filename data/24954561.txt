Item(by='zackmorris', descendants=None, kids=[24954812, 24956072], score=None, time=1604173474, title=None, item_type='comment', url=None, parent=24952136, text='I&#x27;ve been programming for over 30 years and PHP is still my favorite language because it&#x27;s the least-worst (compared to all the others). It&#x27;s really easy to point out the biggest flaws in each language:<p>C++ - too complex&#x2F;brittle, template hell which can&#x27;t be solved on any practical timescale<p>Javascript - stuck at the dead end of the async branch which we later learned was an evolutionary dead end, can only approximate functional programming but at its core is brittle and impossible to future-proof<p>Ruby - too opinionated, solves the easiest problems with syntactic sugar but doesn&#x27;t touch the real conceptual challenges of imperative programming in any meaningful fashion<p>C# - too much like Java, inherits all of the flaws around null for example<p>Java - solves the programming problems of the 90s that we later learned were better solved by JIT compilers, immutable data and such, it&#x27;s biggest flaw being that it&#x27;s object-driven instead of function-driven<p>Rust - the highest expression of imperative programming, whose problems are better solved via immutable, declarative, data-driven and functional programming using copy-on-write<p>Python - killed by the version 2 to 3 transition, unfortunately never really found clarity around string handling, cute at first sight but painful to use beyond a certain level of complexity or code size<p>Perl - perhaps the most adventurous language in the 90s for blurring the lines between all programming paradigms, but succumbed to not having a single source of truth in its style or conventions (I want to love it as much as PHP, but it&#x27;s write-only nature will forever limit it)<p>Lisp - best language conceptually but unfortunately write-only because it clings to old ideas like abbreviations and byzantine academic abstractions that we&#x27;ve now learned are anti-patterns (the assembly language of functional programming)<p>This list grows forever, with each new language having a very specific&#x2F;acute kind of shortcoming which profoundly limits some use case. Which is why I&#x27;m especially fond of PHP not trying to be the best at anything. It&#x27;s the only language I know of that is one conceptual step away from all the others. We can tell C++ or Javascript programmers that PHP is the same but with a $ in front of variables for string interpolation. Shell scripters recognize everything it does immediately.<p>Now PHP does have a lot of problems, the largest being that it&#x27;s starting to succumb to design by committee and cargo culting. I have not been especially happy with the direction it&#x27;s gone since PHP 5 and classes. There are some small wins like ternary &quot;?:&quot;, but for each of those, there are major flaws like &quot;\\&quot; in namespaces. Great shame has befallen PHP at times. But I know of no other language as forgiving, or that tends to &quot;just work&quot; in a REPL, or that has such a vast system library built in. I often find myself thinking in PHP and then having to translate whatever crappy language or framework I happen to be using that day.<p>As far as the future goes, I would very much like to see PHP incorporate some of the newer declarative and data-driven methodologies that have sprung from languages like MATLAB and Julia over the last 10-20 years. I&#x27;m not especially happy with TensorFlow because the forest of elegance is lost in the trees of byzantine concepts like with Lisp. But I really think that if PHP skipped over SIMD and went straight to MIMD with with some kind of simple, easy to understand vector handling that didn&#x27;t break convention, and could be executed synchronously in parallel across many cores, it would really have something. I think this could combine many of the advantages of how Python is being used for data-driven research, without the friction that Python introduces. I could see something like this eventually replacing React&#x2F;JSX if it also got browser support.<p>Writing this out is kind of hilarious and you can laugh if you want to. I agree that PHP is nowhere near ideal. But I know exactly what I need to get real work done on a daily basis, and PHP is the only language (by a wide margin) that even comes close to giving me the leverage I need across many disciplines of computer science.')