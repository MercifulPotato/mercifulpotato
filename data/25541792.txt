Item(by='sedachv', descendants=None, kids=[25542169], score=None, time=1608963145, title=None, item_type='comment', url=None, parent=25541310, text='I wanted a way for a Lisp operating system to be able to use OpenBSD or NetBSD hardware device drivers without modifying the driver source code. NetBSD hackers started writing their device drivers with well-specified interfaces between the driver and kernel (eventually that turned into the rump kernel idea <a href="https:&#x2F;&#x2F;wiki.netbsd.org&#x2F;rumpkernel&#x2F;" rel="nofollow">https:&#x2F;&#x2F;wiki.netbsd.org&#x2F;rumpkernel&#x2F;</a>), OpenBSD hackers borrowed a lot of the ideas (like bus_dma) into OpenBSD drivers. The Lisp operating system runtime would need to implement the applicable kernel functions used by the drivers, and designate certain pointers (hardware registers and buffers) as real memory writes&#x2F;addresses, and the drivers should &quot;just work.&quot;<p>Obviously this is also useful for userland stuff.<p>There are other approaches to this, but Vacietis maps C data and pointers to Common Lisp data structures, so they are inspectable but still memory safe (and you can run a bunch of things in a single address space if you want), and C functions are just Common Lisp functions so all of the development and debugging tools &quot;just work.&quot;')