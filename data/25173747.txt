Item(by='nextos', descendants=None, kids=None, score=None, time=1606004303, title=None, item_type='comment', url=None, parent=25173542, text='A similar book to Concrete Semantics, which I love, is Formal Reasoning about Programs by the same group the OP link comes from: <a href="http:&#x2F;&#x2F;adam.chlipala.net&#x2F;frap&#x2F;frap_book.pdf" rel="nofollow">http:&#x2F;&#x2F;adam.chlipala.net&#x2F;frap&#x2F;frap_book.pdf</a><p>ML for the Working Programmer is written by Paulson, one of the main persons behind Isabelle, and ends up with a prover project: <a href="https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~lp15&#x2F;MLbook&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;~lp15&#x2F;MLbook&#x2F;</a><p>Paulson teaches an undergrad course in Cambridge which is now using Huth &amp; Ryan as a textbook. It&#x27;s an incredible book that focuses on logic, SAT solvers and model checking. Probably the place to begin. An incomplete draft 2nd edition is in the authors website: ftp:&#x2F;&#x2F;ftp.cs.bham.ac.uk&#x2F;pub&#x2F;authors&#x2F;M.D.Ryan&#x2F;tmp&#x2F;Anongporn&#x2F;Ch1+3.pdf<p>If you are interested in tableaux techniques, First-order Logic and Automated Theorem Proving by Fitting is a good text.<p>Personally, I think the place to start from is Huth &amp; Ryan. Logic is the calculus of CS. Then progress to type theory using a book like TAPL by Pierce or Proofs and Types by Girard.<p>Then, depending on your interests, you can proceed to model checking, program analysis and theorem proving. For the first two, the classics are Katoen and Nielson &amp; Nielson, respectively.')