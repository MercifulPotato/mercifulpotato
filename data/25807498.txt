Item(by='virmundi', descendants=None, kids=[25807780], score=None, time=1610850407, title=None, item_type='comment', url=None, parent=25807263, text='I hope to spur conversation on this. I&#x27;ve seen many in the Go community argue against abstractions. Many say, &quot;Pass the database connection in the params.&quot; Or &quot;make the DB pool a global variable&quot;. How can you write tests for logic without having to instantiate a DB? Many gophers appear to say I should have essentially a giant  transaction script for each handler (<a href="https:&#x2F;&#x2F;martinfowler.com&#x2F;eaaCatalog&#x2F;transactionScript.html" rel="nofollow">https:&#x2F;&#x2F;martinfowler.com&#x2F;eaaCatalog&#x2F;transactionScript.html</a>). The handler opens the DB, makes it at least function scoped, and all my business logic goes in the handler, or some similar method where the DB connection is passed. Now my tests are functionally integration testings. This makes them both slow, and hard to test for proper error handling.<p>When I write code in most OOP like languages, I follow the Clean Architecture model. The use case is an actual struct with the interfaces defining the repositories&#x2F;services as members. I am now free to test the use case in isolation. I can test failure cases to since I return an error, which can be easily mocked. I write a factory to create my use cases. The handlers get the factory passed in as an argument to the constructor for server. I can now test handlers in isolation by passing a factor with mocks.')