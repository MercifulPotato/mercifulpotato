Item(by='brundolf', descendants=None, kids=[25831229, 25827723, 25828584, 25827267], score=None, time=1611006940, title=None, item_type='comment', url=None, parent=25809288, text='&gt; Why? I have always thought that every software engineer needs to have more than superficial knowledge of at least two programming languages. However, I have to admit, that in the past few years, my knowledge in pretty much everything except JavaScript has started to fade.<p>Slightly OT, but it&#x27;s interesting to me how common this story seems to be. It&#x27;s basically my story with Rust too. In many ways Rust is the polar opposite of JS: low-level memory model, high-performance, meticulous and cohesive language design, strict-typing-first. But in terms of its culture and ecosystem there&#x27;s a lot of overlap: a vibrant package ecosystem that you&#x27;re encouraged to hook into, trivial cross-platform-targeting, embrace of creativity, and a closeness to the web that spans everything from first-class (de)serialization support to first-class WASM support (unsurprising given its origins at Mozilla).<p>My theory is that there&#x27;s a whole bunch of us who use JS at work and are specifically looking for the exact opposite in our hobby projects, not because we hate JS but because we want a palette cleanser&#x2F;to keep our knowledge broad, and that many of us are turning to Rust, and that this may be a driving force in the way the Rust ecosystem is evolving.<p>Edit: I have to wonder if there&#x27;s a similar phenomenon going on with Clojure. It too is very popular with hobbyists, and less popular with companies, and positioned as both adjacent to (in terms of ecosystem and amenities) and directly opposite from (in terms of semantics and developer experience) an extremely popular enterprise language - Java - which many people use every day at work and have a love-hate relationship with.')