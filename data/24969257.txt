Item(by='muststopmyths', descendants=None, kids=[24969513], score=None, time=1604331605, title=None, item_type='comment', url=None, parent=24966869, text='&gt;However, because in Windows TCP sockets are implemented in the user space,<p>That is not what&#x27;s happening.  TCP is entirely in the kernel.  You are confusing Winsock with TCP.<p>Even then, Winsock has it&#x27;s own driver (AFD.sys, which definitely does not stand for Another Fucking Driver) as well.<p>Most of the user-mode Winsock (ws2_32.dll, mswsock.dll, ws2tcpip.dll) implement the Winsock 2.0 spec-related bookkeeping, but Winsock calls essentially boil down to Ioctl()s to AFD.sys in the common case.<p>The thing to realize is that Winsock 2.0 was spec-ed at a time when Windows NT (and 95) allowed vendors to install things called &quot;layered service providers&quot;, which were providers that hooked into Winsock and allowed you to intercept&#x2F;redirect&#x2F;filter various Winsock calls. Lots of internet filters worked in this way in the early days.<p>Now, given that these 3rd party providers were free to implement their protocol in user space completely, the socket handle you got was not guaranteed to be a kernel handle (Called an IFS handle all over Winsock documentation, for Installable FileSystem handle. )<p>Thus, WSADuplicateSocket() was a way to allow these providers to re-create a socket based on whatever provider-specific information was passed in through IPC.<p>Going back to your original claim, you can actually take a native AFD socket handle to a TCP connection and duplicate it (with DuplicateHandle) into another processes. It will also probably work just fine, but no one at Microsoft is going to officially support this usage, for the above-mentioned compatibility reasons, even though Winsock layered providers are officially deprecated now.<p>Edit: clarified what I meant by duplicate in last paragraph.')