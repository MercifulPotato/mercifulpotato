Item(by='jrochkind1', descendants=None, kids=None, score=None, time=1605224081, title=None, item_type='comment', url=None, parent=25075645, text='Sort of. The equivalent of &quot;virtualenv&quot; would be more &quot;rvm gemsets&quot;, which is what people did <i>before</i> bundler. Bundler is doing something different.<p>Bundler is <i>not</i> a &quot;node_modules&quot; style setup. It does not require dependencies to be in a local path (although they can be, the default is they live in a system-wide location, and this does not limit functionality). It also does not support more than one version of a dependency in the <i>same execution environment</i> (as node_modules does) -- that really would be impossible in ruby too.<p>It&#x27;s possible something about python&#x27;s design would make the bundler approach impossible, I don&#x27;t know. But it&#x27;s not &quot;dependencies are installed globally&quot; <i>alone</i>, as that&#x27;s true of ruby too.<p>We would probably all benefit in understanding better how these things are handled in other environments. And I include myself here. I think ruby&#x27;s bundler really set a new standard for best practices here, and many subsequent managers (like cargo) were heavily influenced by it, although many don&#x27;t realize it. But meanwhile many don&#x27;t even realize what they are missing or what&#x27;s possible.<p>Like the basic idea of having a specification of top-level dependencies (including allowable ranges) separate from a &quot;lockfile&quot; of exact versions in use of ALL dependencies... is just so hugely useful I never want to do without it, and I think is compatible with just about any architecture, and yet somehow JS is still only slowly catching on to it.')