Item(by='joe_the_user', descendants=None, kids=[25460844], score=None, time=1608240874, title=None, item_type='comment', url=None, parent=25453280, text='<i>You wouldn&#x27;t expect a typical mechanical engineer to have research-level mastery of theoretical physics, even if they can build impressive, reliable machines.</i><p>I&#x27;m trying to figure out the world you&#x27;re imagining here. I can see several possibilities.<p>A) The programming language research you are doing will eventually yield some programming practice that will be so advanced that the programming that happening now, before this change, will turn out too be irrelevant. Thus you are paying no attention to what&#x27;s happening.<p>B) The programming language research you are doing will never intersect with the world of the ordinary programmer. You will prove interesting theories to say things about mathematical objects that happen to be programming languages, working on a track forever parallel to what ordinary programmers are doing.<p>C) Like a theoretical physicist, you&#x27;re producing insights about physical reality on a much lower level than the average in engineer. If your insights yield an advance in understanding, you won&#x27;t be the one to turn into a practical tool. That would be the work of the many layers applied-sciences practitioners that sit between the physicist and the engineer.<p>Choice C seems at least logical. But I&#x27;d claim that programming language designers considering things this way is not plausible. The world of programming abstractions just doesn&#x27;t have enough layers that you&#x27;re going to get anything like a pure theoretical science without relation ordinary human step-by-step problem solving. Moreover, we know layers of applied scientists don&#x27;t exist between the ordinary programmer and the language designer. If you want your stuff to be relevant, you&#x27;ll need to sell it yourself, unlike the theoretical physicist.')