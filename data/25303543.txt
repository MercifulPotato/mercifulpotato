Item(by='golergka', descendants=None, kids=None, score=None, time=1607096702, title=None, item_type='comment', url=None, parent=25303309, text='Your customer with 90 trillion dollars will not be happy about it (<a href="https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;Number&#x2F;MAX_SAFE_INTEGER" rel="nofollow">https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Refe...</a>). I have been bitten with this in production, although it was facebook id represented as number and not money amount.<p>On a more realistic scenario, imagine that get 1% cashback on their purchases. When you multiply their purchase amount by 0.01, you get sub-cent amounts. From a point of view of a particular customer, it doesn&#x27;t matter much, so you can just floor the number. But on the scale of your whole organisation, it does matter; so, where&#x27;s all the remainder are going to end up at? And even if you don&#x27;t forget about these remainders, are you sure you will remember to add the values before the division, as 10 or 20, and not after, as 0.1 or 0.2? Because when you some the latter up, you won&#x27;t get 0.3.<p>If you&#x27;re just using a built-in &#x27;number&#x27; type, you&#x27;re facing these mistakes by yourself, but a well-written library for handling money will guard you against this. Types exist not only to represent values, but to guard you against doing such mistakes. (And if that&#x27;s the first time ever you hear about this scenario, do yourself a favour and watch Office Space â€” which does not only include this scenario as a plot device, but is a terrific movie on it&#x27;s own right).<p>I have to be honest, I tend to forget all the details when I don&#x27;t work with these kinds of tasks for some time. Instead, I just remember that using any standard built-in integer type for money is a huge potential minefield. And since in Javascript it&#x27;s really a float, even more so.')