Item(by='_____s', descendants=None, kids=[24771693], score=None, time=1602576989, title=None, item_type='comment', url=None, parent=24762734, text='Assuming you have some experience building simple single-node systems:<p>- Read Designing Data Intensive Applications. As others have said, it&#x27;s a gem of a book, very readable, and it covers a lot of ground. It should answer both of your questions. Take the time to read it, take notes, and you should be well set. If you need to dive deeper into specific topics, each chapter links to several resources.<p>- Read some classic papers (Dynamo, Spanner, GFS). Some of these are readable while some are not-so-readable, but it&#x27;ll be useful to get a sense of what problems they solve and where they fit in.  You may not understand <i>all</i> of the terminology but that&#x27;s fine.<p>That should give you a strong foundation that you can build upon. Beyond that, just build some systems, experiment with the ideas that you&#x27;re learning. You cannot replace that experience with any amount of reading, so build something, make mistakes, struggle with implementation, and you&#x27;ll reinforce what you&#x27;ve learned.<p>Backend is <i>vast</i>, and this helps you build a general sense of the topic. When you find a topic that you&#x27;re really interested in (say stream processing, storage systems, or anything else), you can dive into that specific topic with some extra resources.<p>&gt; I understand Postgres the best, and would love to know why these and others exist, where do they fit in, why are they better over PSQL and what for, and if they are cloud only what&#x27;s their alternatives....It seems all of them just store data, which PSQL does too, so what&#x27;s the difference?<p>A lot of that depends on the way you&#x27;re building a system, the amount of data you&#x27;re going to store, query patterns, etc. In most cases, there are tradeoffs that you&#x27;ll have to understand and account for.<p>For example, a lot of column oriented databases are better suited for analytics workloads. One of the reasons is for that is their storage format (as the name says, columns rather than rows). Some of the systems you mentioned are built for search; some are built from the ground up to allow easier horizontal scaling, etc.')