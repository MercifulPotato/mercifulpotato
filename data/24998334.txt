Item(by='laszlokorte', descendants=None, kids=None, score=None, time=1604585570, title=None, item_type='comment', url=None, parent=24994338, text='If you only think in bits, each extra bit you allow doubles the number of represetable combinations. Eg one bit allows for two values to be represented: on&#x2F;off, true&#x2F;false, yes&#x2F;no, light&#x2F;dark...<p>Now if you have more than two states you want to encode you need at least one additional bit. Eg two bits allow for four different states (00,01,10,11). But that way (adding a bit, or highler level a field in a struct&#x2F;tuple) your numbr of possible states grow exponentially.<p>What if you have exactly 3 states you want to represent (eg small&#x2F;medium&#x2F;largem, up&#x2F;down&#x2F;mute or x&#x2F;y&#x2F;z) or 6 (not a power of two) states? The way you encode the states by combining bits you allow for more states to be encoded than are actually valid. So you allow invalid states. Eg for [&quot;00&quot;~small, &quot;01&quot;~medium, &quot;10&quot;~large] you can not decode &quot;11&quot;.<p>The way combining bits works can be though of as product data types. The number of possible combinations get multiplied when composing data types.<p>Now sum types enable you to define number of states which are not-power-of-two by summing the possible combinations when composing.<p>Algebraic data types combine product and sum types so you can define set of encodable states as the exact number of actual valid sates you want your system to have.')