Item(by='Matthias247', descendants=None, kids=None, score=None, time=1608765925, title=None, item_type='comment', url=None, parent=25521100, text='Yes in some regards. Both offer eventloops (in GCD: dispatch queues), which run small chunks of code which belongs to independent tasks on the same thread.<p>However there are some differences:<p>- Tokio is focussed on running async&#x2F;await based code, whereas libdispatch currently mostly targets running callbacks&#x2F;continuations. This might change once Swift offers async&#x2F;await support, which for sure could run on top of GCD queues.<p>- GCD queues provide a lot more fine-grained control. users can exactly specify on which queue to run some code on. And tasks can jump between code. There might also be a dedicated main thread (UI) queue. Tokio just spins up a single queue which runs all code, which might be empowered by a multithreaded executor. This makes it less usable for UI.')