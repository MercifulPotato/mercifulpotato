Item(by='MaxBarraclough', descendants=None, kids=[24998422], score=None, time=1604584389, title=None, item_type='comment', url=None, parent=24998052, text='Thanks, but you&#x27;ve jumped into detail, where my question was at a more basic level: what&#x27;s the point? What does this tool do for me? How does it stack up against existing solutions? I&#x27;ve not heard of StateBox.org, for instance, so this doesn&#x27;t help orient me.<p>Most programmers don&#x27;t think in terms of how they&#x27;ve impurely implemented product types. Most programmers don&#x27;t even know what the term means. For a project like this I think it&#x27;s important to bring it down to Earth and make it more relatable.<p>So, somewhat like Protocol Buffers, it&#x27;s a programming-language-agnostic generator for type-definitions and it also handles language-agnostic serialization. Its unique advantage is that it takes ideas from &#x27;algebraic type&#x27; theory to offer strong guarantees when it comes to composing complex types from simpler types. Is that right? <i>edit: on closer reading I don&#x27;t think it offers serialisation? Worth emphasising this if you compare it against Protocol Buffers.</i><p>I also have to agree with pmiller2 that the choice of name is counterproductive. It&#x27;s hard to google for, and has a misleading C&#x2F;C++ flavour.<p>With all that said, it sounds like a neat idea. I like these sorts of &#x27;codified design patterns&#x27; that take a code-generative approach and reduce how much code is written by hand. It reminds me of what SCXML does for state machines (although I have no direct experience with that particular solution).<p>Also, if HN will let you edit, please sort out the italics there.')