Item(by='didibus', descendants=None, kids=[25592376, 25596164], score=None, time=1609420603, title=None, item_type='comment', url=None, parent=25592128, text='&gt; So if I understand that correctly: Nim will try to do a light version of Rust&#x27;s borrow checking and then gradually move from static to dynamic solutions for memory management<p>I think that&#x27;s an okay way to put it. Though it might be best to think of it the other way around. It&#x27;ll default to GC and copying data around (pass by value) and will try to optimize things if it can to more deterministic memory management and pass by reference.<p>&gt; I read that Nim&#x27;s GC is optional, does this mean it can be deactivated and when the static memory management fails, I can do it manually for the edge cases that would otherwise done by the GC?<p>It isn&#x27;t optional like that. It&#x27;s more that by default all data is passed by value and allocated on the stack. And if you want to create things on the heap, you need to be explicit about it, at which point you can choose if you want the pointer to be managed by Nim&#x27;s GC or manually. That&#x27;s done by having two type of pointers, ref will be under GC, and ptr won&#x27;t.')