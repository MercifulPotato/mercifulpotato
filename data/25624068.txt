Item(by='maria_weber23', descendants=None, kids=[25624537, 25624239, 25626318, 25625994, 25624741, 25624230, 25624412, 25624223], score=None, time=1609700483, title=None, item_type='comment', url=None, parent=25623764, text='ECC memory can&#x27;t eliminate the chances of these failures entirely. They can still happen. Making software resilient against bitflips in memory seems very difficult though, since it not only affects data, but also code. So in theory the behavior of software under random bit flips is well... Random. You probably would have to use multiple computers doing the same calculation and then take the answer from the quorum. I could imagine that doing so would still be cheaper than using ECC ram, at least around 2000.<p>Generally this goes against software engineering principles. You don&#x27;t try to eliminate the chances of failure and hope for the best. You need to create these failures constantly (within reasonable bounds) and make sure your software is able to handle them. Using ECC ram is the opposite. You just make it so unlikely to happen, that you will generally not encounter these errors at scale anymore, but nontheless they can still happen and now you will be completely unprepared to deal with them, since you chose to ignore this class of errors and move it under the rug.<p>Another intersting side effect of quorum is that it also makes certain attacks more difficult to pull off, since now you have to make sure that a quorum of machines gives the same &quot;wrong&quot; answer for an attack to work.')