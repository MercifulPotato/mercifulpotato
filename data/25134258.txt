Item(by='cjfd', descendants=None, kids=[25134995, 25135370, 25134418, 25134880, 25135260], score=None, time=1605686952, title=None, item_type='comment', url=None, parent=25134070, text='&quot;Anticipating and preparing the right abstractions, thatâ€™s what good software engineering is about.&quot;<p>I find this a rather surprising statement. It sounds almost like something from some weird parallel universe. In my universe I generally take for granted that anticipating abstractions is not something that actually works.<p>Let me give an example. Some years ago I was working on some code that was writing and reading data from a database. A colleague said that we need validation so every field that can be written to the database needs to have the ability to have a validation. So, optionally a validate function can be attached to each and every database field. I was against it at the time because as I stated I do not believe in anticipated abstractions. But the colleague was convinced that it was necessary and wrote this. A few years later indeed validations had been added but literally all validations where about properties that a set of fields together should have and literally none of them were about single fields. At some point I just deleted the single field  validator. It had been there for years but it never was anything besides completely useless.<p>To me anticipating abstractions is a recipe for all kinds of over-engineering. The need for abstractions arises as more requirements need to be fulfilled and when writing those one should probably think about what is likely going to be desired in the future but anticipating them before it is needed is something I have given up a long time ago.')