Item(by='int_19h', descendants=None, kids=[25370463], score=None, time=1607469396, title=None, item_type='comment', url=None, parent=25342748, text='It really depends on what the meaning of None is. OP&#x27;s definition makes perfect sense if it means &quot;unknown&quot;. Yours make sense if it means &quot;zero&quot;, but that&#x27;s far less useful. If it means &quot;missing&quot; - which is what the article says they wanted - then any operation involving None should be an error (but Some can still be handled automatically).<p>It can be interesting to see what other languages do in this situation. For example, C# got nullable value types in version 2, and had to decide what to do with operators in a similar vein (including pre-existing overloaded operators in user code) - they called it &quot;lifting&quot;:<p><a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;language-reference&#x2F;builtin-types&#x2F;nullable-value-types#lifted-operators" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;language-refe...</a>\n<a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;language-reference&#x2F;operators&#x2F;boolean-logical-operators#nullable-boolean-logical-operators" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;language-refe...</a><p>You might notice that it almost, but not quite, has consistent semantics: null means &quot;unknown&quot;, which is particularly obvious from Booleans: (true | null) is true, and (false &amp; null) is false, but (true &amp; null) and (false | null) are both null. However, comparison operators aren&#x27;t consistent: you&#x27;d expect x == null to be null if it meant &quot;unknown&quot;, but the language will always give you either true or false; and ditto for relative comparisons. This last one means that it&#x27;s possible for (x == y), (x &lt; y), and (x &gt; y) to all be false.<p>What&#x27;s interesting is that, in practice, it&#x27;s rare to see reliance on any of this behavior in idiomatic C# code - &quot;null&quot; is usually used as &quot;missing&quot;, not as &quot;unknown&quot;, so all this magic is, at best, irrelevant, and at worst, actively harmful (because it defers a logic error).')