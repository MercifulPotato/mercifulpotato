Item(by='ihumanable', descendants=None, kids=None, score=None, time=1602018390, title=None, item_type='comment', url=None, parent=24702004, text='Yea, I&#x27;m mostly approaching this from the point of view of learning any new language is climbing a learning curve.  If you are coming from most of the mainstream languages (java, javascript, python, etc) you are going to want to rebind things because that&#x27;s how imperative languages roll.<p>This is probably colored from my own experience of going from Python (mainly) to Elixir (mainly).  As a toy example, imagine having to remove all the negative numbers from a list in the middle of a function.<p>Most python programmers would reach for a list comprehension after learning about list comprehensions (which is great because they are more FP)<p><pre><code>  my_list = [number for number in my_list if number &gt;= 0]\n</code></pre>\nSo you pick up Elixir and you are trying to do the equivalent thing after reading through the docs<p><pre><code>  my_list = for number &lt;- my_list, number &gt;= 0, do: number\n</code></pre>\nAnd that works fine, it&#x27;s my_list is exactly what you expect, no negative numbers.<p>Let&#x27;s try the same thing in Erlang<p><pre><code>  MyList = [X || X &lt;- MyList, X &gt;= 0].\n  ** exception error: no match of right hand side value \n</code></pre>\nAs a new user coming to the language, trying to do something so simple and getting a somewhat opaque error message is a significant degree of friction.<p>I have found that when I want the old value of a variable to no longer be available rebinding the name is a great way to ensure that.  If in the future I decide that I need the old value later on in the function I can always just change the bind to some other name easily enough, but it prevents me from using state when I meant to use updated_state.<p>Not to say one way is better than the other, I just found this use of rebinding to work well for me by making it &quot;impossible&quot; to use the old &#x2F; stale &#x2F; out-of-date value.')