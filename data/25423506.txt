Item(by='jiggawatts', descendants=None, kids=[25425439, 25424081], score=None, time=1607980912, title=None, item_type='comment', url=None, parent=25421910, text='I&#x27;ve been cavorting around that minefield recently. I still have some of my legs and a tiny bit of my sanity.<p>The most recent &quot;fun&quot; I had was that on a Citrix NetScaler, if you enable a certain n-Factor workflow, it sends a SAML request to the IdP that Microsoft products only reject as &quot;invalid XML&quot;.<p>From what I can gather the XML being sent is perfectly valid. The issue must be something hideously subtle, like the white space or UTF-8 encoding being subtly different that is upsetting the Microsoft SAML implementations, but not any others.<p>Have a look at some SAML XML examples online: <a href="https:&#x2F;&#x2F;www.samltool.com&#x2F;generic_sso_res.php" rel="nofollow">https:&#x2F;&#x2F;www.samltool.com&#x2F;generic_sso_res.php</a><p>They&#x27;re hideous not because they&#x27;re XML, but because they&#x27;re <i>bad</i> XML! The SAML standard defines its own &quot;namespace attributes&quot; <i>separately</i> but on top of the XML namespaces!<p>Similarly, instead of the straightforward way to encode the data:<p><pre><code>    &lt;tag prop=&quot;attr&quot;&gt;value&lt;&#x2F;tag&gt;\n</code></pre>\nThey abstract one level up unnecessarily:<p><pre><code>    &lt;element name=&quot;tag&quot;&gt;\n        &lt;attribute name=&quot;prop&quot;&gt;attr&lt;&#x2F;attribute&gt;\n        &lt;content&gt;value&lt;&#x2F;content&gt;\n    &lt;&#x2F;element&gt;\n</code></pre>\nThis is the same mistake people make in database schema design, where they&#x27;ll have a table with columns called &quot;Key&quot;, &quot;ColumnName&quot;, and &quot;ColumnValue&quot;.')