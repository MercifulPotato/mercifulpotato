Item(by='saberience', descendants=None, kids=None, score=None, time=1608636948, title=None, item_type='comment', url=None, parent=25500932, text='Microservices are easier to understand and debug.<p>This should speak for itself. If you ship a service which is well defined and only handles a reasonable amount of functionality, reasoning about its runtime behavior, memory, CPU usage, IO, etc, becomes much simpler.<p>Microservices are easier to test, either through unit testing, load-testing, integration testing etc. If you push a new version of a microservice and you see it&#x27;s using more memory than the previous iteration, it&#x27;s usually trivial to work out which line of code caused the change.<p>Microservices are mentally easier to grok for engineers working on them. I&#x27;ve worked on monoliths that required months for engineers to get up to speed on working with them because they did SO much stuff and if we had a memory issue with our monolith it could take weeks to diagnose the issue and we had to have our best engineers look at those problems because the service had grown so big and complex over many years.')