Item(by='mforney', descendants=None, kids=None, score=None, time=1606856033, title=None, item_type='comment', url=None, parent=25268685, text='&gt; I was ever so slightly disappointed to see how manual the packaging is, with every .c file listed in each lua script. It looks quite maintenance-intensive.<p>I was worried about this, too, but it turns out most of the cost in just the initial packaging. Packages do not tend to change their build system very much in between releases, so updating is usually just `git diff` between the version tags, sometimes adding&#x2F;removing a couple source files to `gen.lua`, and regenerating `config.h`.<p>I&#x27;m just one person, but I&#x27;ve been able to keep these 100 or so packages up-to-date fairly easily, while still spending most of my time developing my own projects.<p>&gt; I was almost hoping for some kind of meta-build system which could parse automake etc. files and hoist the dependency graph into the main system build.<p>This would be amazing, but I think it is too difficult a problem to solve, especially with the huge variety of build systems (which are sometimes used pretty creatively). For some packages I get part of the way there with scripts or command snippets to extract source lists from the upstream build system. Here&#x27;s an example:\n<a href="https:&#x2F;&#x2F;github.com&#x2F;oasislinux&#x2F;oasis&#x2F;blob&#x2F;master&#x2F;pkg&#x2F;mpv&#x2F;gensources.awk" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;oasislinux&#x2F;oasis&#x2F;blob&#x2F;master&#x2F;pkg&#x2F;mpv&#x2F;gens...</a><p>One of the main motivations for the oasis build system is that it is often very difficult to get the upstream build system to do what you want. It is very common for projects to ignore your CFLAGS or LDFLAGS, ignore special include&#x2F;lib directories for dependencies, or have automagic dependencies (to borrow a term from gentoo) that can&#x27;t be enabled&#x2F;disabled explicitly with a configure switch. Also, most build systems don&#x27;t work very well for building things statically. libtool will intercept your -static flag, hiding it from the compiler, and libraries which are dependencies of other libraries get left out from the linking command.')