Item(by='GVIrish', descendants=None, kids=None, score=None, time=1612099268, title=None, item_type='comment', url=None, parent=25976440, text='There&#x27;s a couple of reasons government IT projects turn out this way.<p>In my experience, a lot of the time it&#x27;s not so much that the contractor is trying to make money by prolonging the problem.  It&#x27;s that the customer doesn&#x27;t know how to be a competent product owner that prioritizes and scopes things properly.<p>Then, frequently the software being designed ends up replicating broken&#x2F;inefficient business processes, so it ends up being difficult to make cleans and efficient software.  This becomes worse when there&#x27;s legacy software in the mix where the customer wants the contractor to port over all of the clunky functionality of the old app.  Which of course isn&#x27;t documented in the first place, so you&#x27;ve got to perform software archaeology to figure out what it did.<p>Some other show stoppers I&#x27;ve seen are when key stakeholders act as gatekeepers and prevent developers from talking to SMEs directly, so you have to build your requirements based on what the person with the 10,000 foot view knows.  So of course you get incomplete and sometimes completely wrong requirements.  And you might not find out how wrong they are until after you&#x27;ve spent a lot of time building things<p>Just those dynamics alone can add an enormous amount of cost or outright doom a project.  I could probably fill a blog with all of the dysfunctional stuff I&#x27;ve seen in federal IT, but suffice it to say that these factors can easily balloon costs and timelines to a comical degree.  This $44 million failure is actually small compared to some other government IT failures like the billion dollar Air Force accounting system.')