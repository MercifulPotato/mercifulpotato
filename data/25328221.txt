Item(by='munificent', descendants=None, kids=[25328736], score=None, time=1607302207, title=None, item_type='comment', url=None, parent=25326966, text='One way to define &quot;clever&quot; is something you <i>can</i> do but that relies on something you don&#x27;t expect most readers to have already loaded into their head. Like a riddle, it makes sense if you know the trick it relies on but is baffling if you don&#x27;t. The difference between &quot;clever&quot; and &quot;smart&quot; then is based in large part on what you expect your readers to already know. Different people have different expectations there and they reasonably vary across teams and time.<p>Pointers and addresses are pretty fundamental to C, but many C programmers only use them in certain fixed patterns: An address is what you get back from malloc() and pointers are variables to heap-allocated objects. Or pointers are the type you use for parameters when you don&#x27;t want to copy the value.<p>There is a deeper understanding you can have: <i>pointers make storage locations first class entities.</i> A common refrain in programming is that if you want to increase the expressiveness and flexibility of your code, you make some concept first class because then you can abstract over it.<p>In C, storage locations are first class because you can take the address of anything. This lets you abstract over <i>which</i> storage location an operation modifies. Linus&#x27;s &quot;trick&quot; relies on understanding that using a pointer (to a pointer in this case) lets you abstract over where the node pointer is the head pointer or a next pointer.<p>If you have Linus&#x27;s mental model of C, what he&#x27;s doing isn&#x27;t clever. It&#x27;s smart. It uses a fundamental concept of the language to avoid error-prone control flow and edge cases. But if you&#x27;re only used to using pointers within a handful of proscribed patterns, it likely seems very strange.<p>I won&#x27;t make any judgements as to whether thinking of C in this way <i>should</i> be something that people do. Anecdotally, a while back I wrote a blog post on writing a garbage collector from scratch: <a href="http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2013&#x2F;12&#x2F;08&#x2F;babys-first-garbage-collector&#x2F;" rel="nofollow">http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2013&#x2F;12&#x2F;08&#x2F;babys-first-gar...</a><p>The mark-sweep algorithm isn&#x27;t super sophisticated, but this is fairly tricky low-level stuff. A lot of people have read it over the years and basically the <i>only</i> negative feedback I&#x27;ve gotten is around where I use the same pointer-to-a-pointer to remove from a linked list. It confuses a <i>lot</i> of people.<p>So, in my own personal code, I&#x27;m fine with stuff like this. But when coding with others, I tend to avoid it.')