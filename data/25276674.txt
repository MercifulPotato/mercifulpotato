Item(by='acqq', descendants=None, kids=None, score=None, time=1606919794, title=None, item_type='comment', url=None, parent=25276150, text='What name would you use after seeing the implementation of the functions called?<p>std&#x2F;debug.zig:<p><pre><code>    pub fn print(comptime fmt: []const u8, args: anytype) void {\n        const held = stderr_mutex.acquire();\n        defer held.release();\n        const stderr = io.getStdErr().writer();\n        nosuspend stderr.print(fmt, args) catch return;\n    }\n\n</code></pre>\nio&#x2F;writer.zig:<p><pre><code>    pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {\n        return std.fmt.format(self, format, args);\n    } \n</code></pre>\nstd&#x2F;fmt.zig:<p><pre><code>    pub fn format(\n        writer: anytype,\n        comptime fmt: []const u8,\n        args: anytype,\n    ) !void {\n       ...\n</code></pre>\nIt&#x27;s all based on the language features and the actual implementations of zig&#x27;s standard library code, and at least I don&#x27;t see anything &quot;wrapped&quot; there, and nothing what C++, C or asm programmers understand as &quot;a macro&quot;.')