Item(by='bob1029', descendants=None, kids=None, score=None, time=1604427170, title=None, item_type='comment', url=None, parent=24980659, text='At this point I mostly view C# as an &quot;unsafe&quot; F# for all practical engineering purposes. With some amount of discipline, one can drive a very functional C# codebase and fall back to imperative regimes when it makes sense to do so.<p>Most of our platform infrastructure code is imperative, but as you get higher up in the abstraction hierarchy, you will start to see more things declared as functional or data-driven. We would really like for everything above our service&#x2F;platform layer to be functional, but there are some areas where it is a better engineering choice to go imperative (at least for now).<p>I have always thought of imperative vs functional as a very mutual thing. The imperative code is the glue between your fictional&#x2F;business reality (functional world) and the real world (CPU&#x2F;OS&#x2F;Networks&#x2F;etc). Functional code can serve as a perfect model of the business if the imperative code (platform) supporting it is well-engineered.')