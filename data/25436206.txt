Item(by='ChuckMcM', descendants=None, kids=[25437108, 25436272, 25436393, 25437772, 25439640, 25439133, 25438346, 25438422, 25436282, 25436297], score=None, time=1608071782, title=None, item_type='comment', url=None, parent=25434638, text='This, I suppose, is unexpected. It reflects a similar fate of a lot of technology plays that grew fast.<p>I would like to reflect however on this comment in the article -- <i>&quot;The truth is that the Periscope app is in an unsustainable maintenance-mode state, and has been for a while. Over the past couple of years, weâ€™ve seen declining usage and know that the cost to support the app will only continue to go up over time.&quot;</i><p>I understand how a startup madly codes and adapts to get to something that &quot;sticks&quot; with the user community. But where I get lost is how, in the process of acquisition and integration of a startup&#x27;s technology into a company that is nominally <i>not</i> a startup, how is it that you go 5 years after acquisition and NOT retire the technical debt? How does a VP of Engineering oversee the integration of a startup into their domain and not spend the time it takes to reduce the operational costs of maintenance to as close to zero as possible?<p>In today&#x27;s world of BigCorp adding features by buying HotStartup, how can they not follow through an actually make that new tech a feature? If a feature is not getting anything new, it should take zero engineering resources. If the plaform&#x27;s on which it runs change&#x2F;update, there can be documentation on all of the platform features used, and how, a build system and a regression system, so that you take the code out of the box. Port it, test it, put it back in the box and go away again. Same thing with bugs or CVEs.<p>When I was at Google it amazed me how many pieces of infrastructure were &#x27;hot messes&#x27; in the sense that the people maintaining them didn&#x27;t really know anything about how they worked, just how to run a test and revert if they broke. But there was no senior leadership pushing to understand the component interfaces and how the &#x27;fleet&#x27; was at risk or interconnected. Just a bunch of fiefdoms. And inevitably people who kept things complicated so that they were &quot;irreplaceable&quot; for their own job security anxieties.<p>If you are an engineer and you start moving up into senior leadership roles, understand that <i>this is your job.</i> Not to be be the whiz kid that just came up with a billion dollar idea, but to be the careful, thoughtful, strategist that makes sure the billion dollar idea doesn&#x27;t eat all of its revenue in operational costs.')