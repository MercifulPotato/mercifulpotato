Item(by='adamkl', descendants=None, kids=[25888779], score=None, time=1611457752, title=None, item_type='comment', url=None, parent=25888304, text='&gt; So while FP is just another tool, it&#x27;s also <i>a framework for thinking</i> that helps people make better choices<p>I’ve been getting more into functional programming this past year (via Clojure, though my day-job is mostly JavaScript&#x2F;TypeScript) and this is the big takeaway for me.<p>Type theory and monads may have their place, but thinking about separating logic from side-effects is, I think, the most valuable aspect of functional programming.<p>That is a thought process that you can apply in pretty much any language that will give you the biggest bang for your buck.<p>Edit: Here’s some great examples of the benefits of functional thinking without going off the deep end.<p>1. Boundaries by Gary Bernhardt -  <a href="https:&#x2F;&#x2F;www.destroyallsoftware.com&#x2F;talks&#x2F;boundaries" rel="nofollow">https:&#x2F;&#x2F;www.destroyallsoftware.com&#x2F;talks&#x2F;boundaries</a><p>2. Pits of Success by Mark Seemann - <a href="https:&#x2F;&#x2F;youtu.be&#x2F;US8QG9I1XW0" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;US8QG9I1XW0</a><p>3. Grokking Simplicity by Eric Normand - <a href="https:&#x2F;&#x2F;grokkingsimplicity.com&#x2F;" rel="nofollow">https:&#x2F;&#x2F;grokkingsimplicity.com&#x2F;</a>')