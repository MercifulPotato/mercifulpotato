Item(by='bumbada', descendants=None, kids=[25455305], score=None, time=1608201306, title=None, item_type='comment', url=None, parent=25439629, text='We have two approaches for a programming language:<p>1. We design something &quot;perfect&quot; and &quot;pure&quot;, that will never need to change.<p>2. We design something simple that works for something and let other people improve the language.<p>PHP or js were terrible designs, but there are not so bad today. Thousands of people have improved the design over time.<p>BTW, languages like Lisp actually evolved over time too. S expressions were not intended to be definitive, and you were not supposed to interpret code in code itself. McCarthy was just interested in the mathematical proof of creating a Lisp machine different from a Turing one. The practical side of that was of no interest for him and other people added this fucntionality.<p>In fact one of the problems with Lisp is that it is too flexible. In c like languages you have 3 or 4 different loop systems, you have for, while, do. In common Lisp you have more than 20 official loops, and you can create your own infinite set with macros!!<p>And that is with loops alone. It applies to everything in the language. You have so many ways of creating objects or parsing.<p>That is amazing and incredible for academic research, but not so good for production.<p>For production you need standards that are simplified, like if you design a machine, you choose 3 different screws instead of 30. Your prices go down, need less tools, you don&#x27;t need &quot;change of tool&quot; interruptions, everybody can supply you.<p>Most of the time, if you design your own screw you are shooting yourself in the foot. You will have to wait much longer for being manufactured at 100x the price.<p>With software something similar happens. Geeks love learning new paradigms but while you are in &quot;production mode&quot; you should be producing not learning the custom syntax a programmer has created that can be done with a standard one.<p>Everybody has an ego. Dunningâ€“Kruger effect tells us that the less we know about computer languages, the more confident we are that we can change the world with a brilliant design (that is not so brilliant in the first place).<p>In fact, languages like c or PHP or js are actually brilliant in lots of ways. If they were not, nobody would have used them. You should learn what this brilliance is before you create something new.')