Item(by='tooltower', descendants=None, kids=None, score=None, time=1609700730, title=None, item_type='comment', url=None, parent=25623787, text='To avoid race conditions and to preserve abstraction boundaries. This is the archetypical design pattern in functional languages. For a simple example, if you first check the size of a vector before accessing index `i`, you can be sure the length hasn&#x27;t changed right after your size-check. It&#x27;s exactly like writing code only using only immutable Strings of Java, or frozen sets of Python.<p>So in your example, it &quot;continues to exist&quot; in local variables to reflect the state of the system as it was when you read it, as long as you still hold a reference to the old vector. Typically, you&#x27;d ask your software to fetch a fresh copy of the vector any time you&#x27;d want new data. But that&#x27;s explicit in code. You&#x27;ll have fewer surprises if mutation (like vector-appends) are never shared between variables.')