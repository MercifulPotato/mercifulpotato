Item(by='grishka', descendants=None, kids=[25949817, 25949457, 25950412], score=None, time=1611868286, title=None, item_type='comment', url=None, parent=25948677, text='I&#x27;d say do both, actually. But versioning is more important IMO because it gives you the freedom to potentially start from scratch keeping only a small portion of the header.<p>On mainstream file formats... It&#x27;s a mixed bag. Image formats — JPEG and PNG especially — are extensible and reasonably easy to parse. It&#x27;s fairly trivial to get the image dimensions out of one of these without decoding the compressed data. I did as well write a JPEG decoder out of curiosity once to understand the compression algorithm better — it&#x27;s an interesting exercise, really, every software developer should try it at some point.<p>But the worst format I&#x27;ve ever worked with is MP3. It&#x27;s an absolute mess. First, there are two kinds of ID3 tags. These store metadata that your player displays. ID3v1 is a fixed-length, fixed-layout thing that goes on the end of the file. ID3v2 is an extensible, I&#x27;d say <i>way too extensible</i>, chunked thing capable of storing literally anything, including jpegs of cover arts, that goes on the beginning of the file. But none of them store the duration of the file. You&#x27;re supposed to chop the tags off the ends of it, then find the first frame of encoded data by searching for the pattern 0xFFFx, read its header, and determine the byte length, bitrate, the sampling rate and ultimately the duration of a that frame using several lookup tables. Now that you know how much audio each frame contains, and how long it is, you take the size of the file (minus tags of course) and divide it by the frame length, then multiply by the frame duration. That&#x27;s how you get the duration of an MP3. A constant-bitrate one. And to seek within an MP3, you calculate the offset into the file and round it to the nearest frame size and just start playing from there. It gets even worse with VBR, because now you can no longer rely on frames being the same byte length, but I don&#x27;t really remember the details any more. The gist of it is that there&#x27;s &quot;header&quot; encoded into the very first frame in the file, and there are two kinds of these headers, and there&#x27;s a sort of lookup table in it, among other things, to help you seek into the right part of the file because the byte offsets don&#x27;t linearly correspond to the playback time in a VBR file. After you seek, you have to go back and forth to find the 0xFFFx and play from there. Or not, because sometimes there&#x27;s a 0xFFFx in the middle of a frame too, so you have to have some heuristics to detect that it&#x27;s the real one.')