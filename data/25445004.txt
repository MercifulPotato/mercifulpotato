Item(by='samjs', descendants=None, kids=[25445136], score=None, time=1608138375, title=None, item_type='comment', url=None, parent=25444703, text='In general, you shouldn&#x27;t really need to pass in large input objects to oso - it operates over the application data.<p>What this means practically is either the data is processed through whatever data access layer you have (i.e. SQL, or an ORM). And there&#x27;s more work we&#x27;re doing here to make that experience seamless [1].<p>Or if you do have some large input data and you iterate over it in the policy, then the oso host library (the part in your app) will just iterate through it without sending the entire object back and forth.<p>&gt; I presume that this is how youâ€™d rather have users build more advanced policy than extending what seems to be a pretty lightweight language<p>Yep, that&#x27;s the idea. I answered a similar question here [2]. You can call class + instance methods from Polar, so if there&#x27;s anything you can&#x27;t do you can add it that way. We have considered&#x2F;are considering adding a standard library to provide common pieces out of the box, but it&#x27;s not a limiting factor for using oso currently.<p>There are some side benefits though that a standard library would provide - like having a robust implementation of common operations in the Rust core.<p>[1]: <a href="https:&#x2F;&#x2F;docs.osohq.com&#x2F;getting-started&#x2F;list-filtering&#x2F;index.html" rel="nofollow">https:&#x2F;&#x2F;docs.osohq.com&#x2F;getting-started&#x2F;list-filtering&#x2F;index....</a><p>[2]: <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25443354" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25443354</a>')