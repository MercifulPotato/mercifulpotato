Item(by='robocat', descendants=None, kids=[24813438], score=None, time=1602959301, title=None, item_type='comment', url=None, parent=24811915, text='First comment on question: “The JavaScript engine has to do this operation (which is called ToInt32 in the spec) whenver you apply a bitwise operator to a number and at various other times (unless the engine has been able to maintain the number as an integer as an optimization, but in many cases it cannot). – T.J. Crowder”<p>Edit: From <a href="https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.5" rel="nofollow">https:&#x2F;&#x2F;www.ecma-international.org&#x2F;ecma-262&#x2F;5.1&#x2F;#sec-9.5</a><p><pre><code>  9.5 ToInt32: (Signed 32 Bit Integer)\n\n  The abstract operation ToInt32 converts its argument to one of 2 integer values in the range −2³¹ through 2³¹−1, inclusive. This abstract operation functions as follows:\n\n  Let number be the result of calling ToNumber on the input argument.\n  If number is NaN, +0, −0, +∞, or −∞, return +0.\n  Let posInt be sign(number) * floor(abs(number)).\n  Let int32bit be posInt modulo 2³²; that is, a finite integer value k of Number type with positive sign and less than 2³² in magnitude such that the mathematical difference of posInt and k is mathematically an integer multiple of 2³².\n  If int32bit is greater than or equal to 2³¹, return int32bit − 2³², otherwise return int32bit.\n\n  NOTE Given the above definition of ToInt32:\n\n    The ToInt32 abstract operation is idempotent: if applied to a result that it produced, the second application leaves that value unchanged.\n\n    ToInt32(ToUint32(x)) is equal to ToInt32(x) for all values of x. (It is to preserve this latter property that +∞ and −∞ are mapped to +0.)\n\n    ToInt32 maps −0 to +0.</code></pre>')