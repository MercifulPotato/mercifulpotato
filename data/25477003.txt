Item(by='rualca', descendants=None, kids=None, score=None, time=1608380686, title=None, item_type='comment', url=None, parent=25476781, text='&gt; A chair is a chair, in real life. But in terms of data-transformations, in terms of what we do, these classes are really only superficially similar. In the context of a game, we have a Chair, a PhysicsChair, a StaticChair, a BreakableChair. These things are not at all similar.<p>I feel like that comment either takes a very literal and naive analysis to the problem or fails to identify the objects being used.<p>Just because the word &quot;chair&quot; pops up in a few objects that does not mean they are supposed to be the same thing, and thus modeled as specialization of a common Chair class.<p>For example, PhysicsChair makes sense as a specialization of a physics-related class, not a Chair-related class. Breakable hair would also make sense as a specializationof a physics object, which might be comprised of multiple discrete elements or track damage to generate new particles when a threshold is reached. If we take the single responsibility principle seriously, it makes sense to have specialized physics and graphics classes that implement the functional requirements of handling a chair.<p>This by no means implies that class Chair should be a superclass of all these other cases, or even that it makes sense to even consider them to be related at all. A failure to identify the models and their functional relationships doesn&#x27;t mean that your domain has to include relationships that don&#x27;t really exist nor make sense.')