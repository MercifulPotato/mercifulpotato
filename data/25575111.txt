Item(by='chrismorgan', descendants=None, kids=None, score=None, time=1609276477, title=None, item_type='comment', url=None, parent=25570268, text='The technique demonstrated here for producing the markup is bad:<p>1. The use of DOMPurify is either unnecessary or insufficient. Specifically consider reply.content, which is provided from the server as HTML. (I believe it’s the only one that’s supposed to be serialised HTML; all the other fields are text.) If the backend guarantees that you get a clean DOM, DOMPurify is unnecessary†. But if it’s possible for a user to control the markup in that field completely, then DOMPurify as configured is insufficient, because although it blocks XSS and JavaScript execution, it doesn’t filter out remote resource loading and CSS, which can be almost as harmful. Trivial example, &lt;a href=&#x2F;&#x2F;malicious.example style=position:fixed;inset:0&gt;pwned&lt;&#x2F;a&gt;. Given the type of content, you probably want to either blacklist quite a few things (e.g. the style attribute, and the img, picture, source, audio and video tags), or whitelist a small set of things.<p>2. Various fields that could hypothetically contain magic characters are dropped in with no escaping. If they <i>do</i> contain magic characters like &lt; and &amp;, you’ve just messed up the display and opened the way for malicious resource loading and problem № 3 below. Even if they are supposed to be unable to contain a magic character (e.g. I’m going to <i>guess</i> that reply.account.username is safe), it’s probably a good idea to escape them anyway just in case (perhaps an API change later makes it possible), and to guard against errant copy–pasters and editors of the code that don’t know what they’re doing. Perhaps at some point you’ll add or switch to reply.account.display_name, which probably <i>can</i> contain &lt; and &amp;.<p>3. The markup is produced by mixing static templating with user-provided input, and sanitisation is performed on the whole thing. It’s important when doing this sort of templating that each user-provided input be escaped or sanitised <i>by itself in isolation</i>, not as part of a whole that has been concatenated. Otherwise you can mess with the DOM tree accidentally or deliberately. Suppose, for example, that reply.content could contain `&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;img src=&#x2F;&#x2F;ad.example alt=&quot;Legitimate-looking in-stream ad&quot;&gt;&lt;div class=&quot;mastodon-comment&quot;&gt;…&lt;div class=&quot;content&quot;&gt;…&lt;div class=&quot;mastodon-comment-content&quot;&gt;…`. So this means:<p>• Apply attributes and text nodes to a real DOM (e.g. `img = new Image(); img.src = reply.account.avatar_static; avatar.append(img)`), or escape them in the HTML serialisation (e.g. `&lt;img src=&quot;${reply.account.avatar_static.replace(&#x2F;&amp;&#x2F;g, &quot;&amp;amp;&quot;).replace(&#x2F;&quot;&#x2F;g, &quot;&amp;quot;&quot;)}&quot;&gt;`).<p>• Do HTML sanitisation on <i>just the user input</i>, e.g. DOMPurify.sanitize(reply.content).<p>A part of my problem with the code as written is that, purely from looking at the code, I can see that there <i>may</i> well be various security holes. I require knowledge of the backend also before I can judge whether there <i>are</i> security holes. Where possible, it’s best to write the code in such a way that you <i>know</i> that it’s safe, or that it’s not—try not to depend on subtle things like “the <i>particular fields</i> that we access happen to be unable to contain angle brackets, ampersands and quotes”, because they’re fragile.<p>Incidentally, it would also be more efficient to run DOMPurify with the RETURN_DOM_FRAGMENT option, and append that, rather than concatenating it to a string and setting innerHTML. Saves a pointless serialisation&#x2F;deserialisation round trip, and avoids any possibility of new mXSS vulnerabilities that might be discovered in the future. (I don’t really understand why DOMPurify defaults to emitting a string. I can’t remember seeing a single non-demo use of DOMPurify where the string is preferable to a DOM fragment.)<p>—<p>† Though if the server sanitised arbitrary user-provided HTML&#x2F;MathML&#x2F;SVG, I probably don’t trust it as much as I trust DOMPurify, for things that end up in the DOM. There are some pretty crazy subtleties in things like HTML serialisation round-tripping of HTML, SVG and MathML content. There’s fun reading in the changelogs and security patches.')