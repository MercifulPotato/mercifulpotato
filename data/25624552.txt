Item(by='mikelevins', descendants=None, kids=None, score=None, time=1609703291, title=None, item_type='comment', url=None, parent=25620991, text='You misunderstand me. By &quot;repl-drive programming&quot; I do not mean programming that is fixated on the &quot;command-line repl&quot;. On the contrary, what I&#x27;m talking about has much more in common with what you describe as &quot;far more productive&quot;. It&#x27;s not about a particular shell or window or buffer; it&#x27;s about a runtime environment that is designed to support writing software by building and changing it as it runs.<p>By &quot;repl&quot;, I do not mean the window or the buffer or the shell program. I mean the loop of: read an expression, evaluate it, and present the results, in the context of a runtime that is designed to comprehensively support it.<p>Moreover, you can have all of the tools that you listed and still not be working with a properly-designed repl-driven environment. For example, I built a 3D interactive environment on the JVM that worked quite well--it launched into the 3D environment ns no more than a second or two, and could build whole procedurally-generated scenes in a few seconds. It supported networked multiuser interactions. I could start it from a repl and dynamically alter scenes and objects and their behavior in the environment by talking to them.<p>It still wasn&#x27;t a proper repl-driven environment because the underlying runtime could not correctly handle dynamic redefinition of classes and methods. That meant that if I decided that I needed to change a representation or something, I had to kill the environment and rebuild it. It meant that there was always a gratuitous barrier that I might run into at any moment. It meant that some abitrary set of things I was working on was always on the other side of that barrier.<p>Contrast that to working with, for example, SK8, where I could redefine absolutely everything in the environment (including, for example, the system-level procedures used to draw window frames) without ever restarting the code that was under development.')