Item(by='User23', descendants=None, kids=None, score=None, time=1604349299, title=None, item_type='comment', url=None, parent=24972453, text='&gt; Here is a simple specification: write a program that, given a positive even integer, returns two prime integers, whose some is the input, and never fails to do so.<p>I&#x27;m not going to solve Goldbach&#x27;s conjecture on hackernews or anywhere else. I wish I could, I really do, but my incapability there doesn&#x27;t invalidate my arguments. I&#x27;m not even annoyed though, that was a cute trick and I appreciate your cleverness. Fortunately Fields Medal tier mathematical problems have never come up in my professional programming career.<p>&gt; It most certainly does. That is the literal meaning of &quot;formal&quot; in formal logic&#x2F;method&#x2F;synthesis&#x2F;verification. A formal logic has a proof theory made of inference rules. It means that conclusions are reached by manipulation of the syntactic form -- hence formal -- without use of any mathematical intuition.<p>Once again, I completely agree with this. Let the symbols do the work. But we keep coming back to the same misunderstanding. A program can feasibly be derived that can&#x27;t feasibly be verified <i>without access to the discrete documented steps of the derivation</i>[1]. Showing the work of the derivation is sufficient to convince any honest interlocutor of the correctness of the proof. It may well be enough to allow an algorithm to perform the verification too, I&#x27;ll defer to your expertise on that. In any event, as I said before using the analogy of primes, verification is rather a lot harder than construction.<p>Edit: Also I want you to know I&#x27;m finding this a pleasant discussion and am thankful that you&#x27;re taking the time to help develop my thoughts and hopefully yours too.<p>[1] By analogy, factoring the product of two primes is easy when in addition to being given the product you are also given the multiplier and multiplicand.')