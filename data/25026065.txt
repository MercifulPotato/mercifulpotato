Item(by='Eugeleo', descendants=None, kids=[25026985], score=None, time=1604846564, title=None, item_type='comment', url=None, parent=25023996, text='Hey, another Haskeller here!<p>&gt; There where at least two other replies talking about accumulators. I call that pattern, like it or not.<p>It&#x27;s true that you use this way of programming so often in functional languages that it earned itself a name, so that it&#x27;s easier to talk about it. However calling it a &#x27;pattern&#x27; feels weird (to me), even though it technically is one.<p>The equivalent of accumulators in imperative languages would be the &#x27;pattern&#x27; of having some variables outside of the loop and mutating them from within the loop. Maybe you can appreciate that it feels weird calling this a &#x27;pattern&#x27; â€” and now you can better understand how I feel about accumulators being called a pattern.<p>Skipping back to your original question: I write Haskell for living and teach two high-school classes in another functional language, and the only two &#x27;patterns&#x27; regarding recursion I can think of are accumulators and mutual recursion. So, you know almost everything there is to know already! :-) [0]<p>Let me add that you use recursion very rarely in day-to-day programming; mostly you try to spare yourself writing the recursion explicitly and you instead use map, filter and foldr&#x2F;foldl (sometimes called reduce) to do the recursion for you. Especially the folds are super-powerful (AFAIK you can write any recursive function using folds, should you wish to do so), and often under-appreciated.<p>&gt; Haskell is a genius language but I don&#x27;t like the community<p>IMHO the community around Haskell is (in general) great; the people are always eager to help. I&#x27;m a self-learned Haskeller and I couldn&#x27;t have done it without the community. Come join us at r&#x2F;haskell or the IRC and see for yourself :-)<p>[0]: Why do I say this? I remember my old days when I was learning Swift and encountered one new design pattern every day. Factory, Facade, ... I decided to get &#x27;em all (why reinvent the wheel?), I was always anxious that I was coding something that could be better served by a ready-made design pattern. So I just wanted to let you know it&#x27;s nothing like this with recursion, and that you can save yourself the anxiety (if you are anything like me).')