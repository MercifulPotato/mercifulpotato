Item(by='rvense', descendants=None, kids=[24917426, 24917346], score=None, time=1603881289, title=None, item_type='comment', url=None, parent=24916644, text='I think that<p><pre><code>    fn x() {\n        doStuff();\n        moreStuff();\n        forgotSomething();\n    }\n</code></pre>\nis pretty bad code, but that&#x27;s probably because I consider procedures with no arguments and no return value a sign that something is poorly factored. However,<p><pre><code>    fn x(y) {\n       foo = doStuff(y);\n       bar = moreStuff(foo);\n       if (isSomething(bar)) {\n           return theRest(bar)\n       } else {\n           return theBest(bar);\n       }\n    }\n</code></pre>\ncan be a good way to separate the why from the how and clearly communicate what&#x27;s going on, especially with conditionals in the mix.<p>It&#x27;s important, however, that these helper functions are not haphazardly strewn around the code base and accessible to things that don&#x27;t need them. Depending on the language&#x2F;context, I&#x27;d reach for nested function definitions or public&#x2F;private keywords (or a combination), because definitely, it can be very hard to approach a big file with a bunch of (often poorly-named) functions that are <i>defined</i> at the same hierarchical level but not meant to be <i>used</i> at the same level.')