Item(by='the_other', descendants=None, kids=None, score=None, time=1605286418, title=None, item_type='comment', url=None, parent=25083878, text='&gt; We need to introduce decay into software systems, or we end up with zombies that are too useful to let die.<p>We already have this. Just today I read on another post on here how someone had to stop using their 32-bit audio plugins because their OS stopped supporting 32-bit. That software wasn&#x27;t &quot;fit enough&quot; to survive in the current environment, so it was selected against. It died. Its entire species (its copies) died out.<p>The really interesting discussion, I think, is &quot;what is software&quot;? Where does its boundary end? The 32-bit app died because the team that built it couldn&#x27;t&#x2F;didn&#x27;t update it to 64-bit. It <i>didn&#x27;t</i> die because it stopped working for the environment it was built for. It died because of money and people, not bits and transistors. Why was that? What happened to the team? What&#x27;s the lesson? Should the plug-in have been made in the first place? Does it matter? If the &quot;death&quot; is due to people and money more than bits, where&#x27;s the boundary the remarks &quot;software&quot;. What should we let die (copies of bits, or teams?) and how does that look?<p>For me, all this leads into economics, wealth distribution, resource sharing, leadership. The &quot;real&quot; software?')