Item(by='flohofwoe', descendants=None, kids=None, score=None, time=1604574868, title=None, item_type='comment', url=None, parent=24979129, text='In my simple peasant brain I always associate &quot;ownership&quot; with a simple chunk of memory, not with &quot;objects&quot; as in OOP.<p>As soon as a piece of code &quot;knows&quot; about this chunk of memory it has certain responsibilities, like not randomly scribbling over values or freeing the memory while others pieces of code might attempt the same.<p>&quot;Ownership&quot; and &quot;Move Semantics&quot; are entirely artificial conventions to give some structure to those responsibilties. Casting those conventions into &quot;hard language rules&quot; introduces tradeoffs, evaluating those tradeoffs is important when deciding what language to use to solve certain problems. And this is where Rust comes in. Rust just enforces a couple of such &quot;made up&quot; conventions, none of those rules are dictated by the &quot;real world&quot; (e.g. the hardware the code runs on)... it&#x27;s easy to get all tangled up in theoretical concepts like type systems, and functional programming, but in the end the only thing that counts is the machine code that&#x27;s running on a concrete CPU. Sometimes I feel that language designers are losing sight on this simple reality ;)')