Item(by='0xbadcafebee', descendants=None, kids=[25450086, 25451407], score=None, time=1608154168, title=None, item_type='comment', url=None, parent=25447305, text='Personal Access Tokens provide both simpler and better security controls than SSH, so you end up using them in enterprises.<p>You can&#x27;t create an SSH key with select role permissions like you can with a Personal Access Token. But you do need a PAT to use the API. So you can either have one PAT + one SSH key, or just use one PAT and no SSH key. (Or multiple PATs, for fine-grained access control)<p>If you use multiple SSH keys in GitHub (which you should be, to access different things) then you have to manually juggle which SSH key you&#x27;re passing when you pull each repo, because GitHub will just take the first SSH key you have in your <i>ssh-agent</i> that has an account in GitHub. You won&#x27;t know from looking at a Git URI (&quot;ssh:&#x2F;&#x2F;git@github.com&quot;) which one is needed. OTOH, with PAT, you can either make a URL like (&quot;<a href="https:&#x2F;&#x2F;user@github.com" rel="nofollow">https:&#x2F;&#x2F;user@github.com</a>&quot;) to pre-specify which user to use, or use &quot;<a href="https:&#x2F;&#x2F;github.com" rel="nofollow">https:&#x2F;&#x2F;github.com</a>&quot; and specify user and PAT at auth time.<p>Authentication using SSH requires first accepting the host keys of Github.com, which can rotate, so you have to decide if you&#x27;re going to bake the host keys into a container, or require a user to accept them (and know when they change if it&#x27;s a real GitHub key change or a hacker). Or ignore host keys and lose all the security of SSH encryption. The alternative, HTTPS + PAT, requires no such operations, carries less risk, and is less work to implement.<p>And of course some networks block port 22.')