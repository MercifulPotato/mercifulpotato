Item(by='hakre', descendants=None, kids=None, score=None, time=1601936245, title=None, item_type='comment', url=None, parent=24688527, text='Yes, personally I&#x27;m (generally) against version fields, however in the OPs meaning as I read it, if you add the version field it breaks the value (the version field invalidates value comparison for equality) and therefore will end up adding complexity. This may go contrary towards the topic, as OP clearly states major goal is to reduce complexity.<p>So adding a value and make it (inherently) incompatible in the value system breaks the benefits of a couple of the six points outlined in the OP (given the version field suggestion).<p>Just saying. Your mileage may vary. But again, introducing version attributes is most of the time (and that is a warning) _increasing_ complexity.<p>One of the articles referred to by the op is [out-of-the-tar-pit] which is fundamentally about complexity and WTF it is paradigms, on syntax level and language support. A version field is a counter on higher level on top of anything of it (and therefore in the off-topic domain already to a larger extend) and also ruining any of the value comparison ability (adding the version field exploits the value inequality in DO as per OP making it part of the versioning system) introducing meta-date and IMHO ruining DO.<p>If you need to encapsulate state to take a short-cut, introduce state. Don&#x27;t ruin value(s).<p>Just my 2 cents.<p>(&#x2F;edit: better than version attributes are just any attributes as they work towards both directions of change. not that straight forward to deal with at first, but offering more flexibility. it would be that some older value handling functions are incomplete [but compatible] and new ones just fitting. similar, namespacing for attributes are orthogonal as well [as in closure, depends language at task supports them] while version fields are imposing one general forward direction only, IMHO only for last resort if any other kind of consistency is already considered lost beyond recognition [most often this is _not_ true in computer systems, it&#x27;s just that everyone involved is too f-c-k&#x27;ing lazy to take care and then blames others for anything but getting the job done my&#x2F;your-self. when in doubt ask operations, they may tell you if they have time])<p>[out-of-the-tar-pit]: <a href="https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;papers-we-love&#x2F;papers-we-love&#x2F;master&#x2F;design&#x2F;out-of-the-tar-pit.pdf" rel="nofollow">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;papers-we-love&#x2F;papers-we-l...</a> Moseley&#x2F;Marks 2006')