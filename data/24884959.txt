Item(by='masklinn', descendants=None, kids=None, score=None, time=1603617955, title=None, item_type='comment', url=None, parent=24883642, text='&gt; Wouldn&#x27;t this be better with design by contract by having first() enforce length&gt;0 then turning off assertions if desired for release code?<p>I would say very much not, but maybe I&#x27;m misunderstanding what you mean, or maybe you&#x27;re misunderstanding the language?<p>What I&#x27;m getting from your suggestion is<p><pre><code>    pub fn first(&amp;self) -&gt; &amp;T {\n        debug_assert!(self.len() &gt; 0);\n        unsafe { &amp;* self.as_ptr() }\n    }\n</code></pre>\nwhich is a straight UB in &quot;safe Rust&quot; as soon as you invoke it on an empty slice (or vec), which is completely verboten.<p>What you <i>could</i> do is have a separate `NonEmpty` vector either by construction or by assertion, for which `first` wouldn&#x27;t be failible (but other operations would be).<p>&gt; Also OP should have mentioned not matching none is an error otherwise there&#x27;s no point<p>That actually is irrelevant to the story OP is telling. They&#x27;re talking about null-safety, match-completeness is an orthogonal concern (and one they don&#x27;t really care for here, they just want to operate on a present value).')