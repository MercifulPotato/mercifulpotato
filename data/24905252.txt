Item(by='dvdkhlng', descendants=None, kids=[24905456], score=None, time=1603785209, title=None, item_type='comment', url=None, parent=24905187, text='I have the exact opposite experience WRT Tcl channels when compared to other languages.<p>Handling binary data is pretty trivial, e.g. to read a full binary file into a binary string, you do:<p><pre><code>  set h [open &quot;filename.bin&quot; r]\n  fconfigure $h -encoding binary -translation binary\n  set data [read $h]\n</code></pre>\nThen you even have a fantastic way to operate on low-level binary data of any endianness using Tcl&#x27;s binary scan &#x2F;binary format instructions [1] (basically what Javascript later invented as DataView).<p>Tcl was one of the first languages I knew that properly and consistently supported multibyte text throughout the full language, including in Tk GUIs.  I.e. writing a cross-platform GUI that could handle Japanese character input&#x2F;output basically &quot;just worked&quot;.  You could even read ShiftJIS or ISO encodings of japanese text, which was at the time a prerequisite as Japanese Windows versions were non-unicode (everything done in ShiftJIS AFAIR).<p>[edit] here is a real-world example of a trivial script handling binary data [2]: reading binary RGBA 4 bytes&#x2F;pixel image data and outputting RGB 3b&#x2F;pixel into a pipe that finally outputs a .PNG image.  It&#x27;s difficult to find a programming language that can do that in less lines and with more clarity.<p>[1] <a href="https:&#x2F;&#x2F;wiki.tcl-lang.org&#x2F;page&#x2F;binary+scan" rel="nofollow">https:&#x2F;&#x2F;wiki.tcl-lang.org&#x2F;page&#x2F;binary+scan</a><p>[2] <a href="https:&#x2F;&#x2F;stech.muecke.pw&#x2F;opensvn&#x2F;free&#x2F;trunk&#x2F;dkbin&#x2F;nn-fbtopng" rel="nofollow">https:&#x2F;&#x2F;stech.muecke.pw&#x2F;opensvn&#x2F;free&#x2F;trunk&#x2F;dkbin&#x2F;nn-fbtopng</a>')