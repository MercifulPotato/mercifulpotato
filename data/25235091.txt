Item(by='II2II', descendants=None, kids=[25241414, 25237581, 25235246], score=None, time=1606535144, title=None, item_type='comment', url=None, parent=25234774, text='Not really.  The author seems to want to retain a great deal of control over the system while maintaining simplicity.<p>The classic Macintosh system software is a reasonable example of this.  Up to System 7.5 the operating system and the bulk of software only exposed components that were intended to be manipulated by the end user.  For example: you could install a printer driver by dropping the appropriate file into System Folder:Extensions or install a font by dropping the appropriate file into System Folder:Fonts.  If you wanted to remove a component, you could drag it to the trash.  While you would lose access to a particular feature, everything else would continue to function.  Much of that was facilitated by structured files, since everything could be bundled into the component&#x27;s resource fork.\nApplication software behaved in much the same way.<p>Of course, that changed around System 7.5.  The function of the various components were less evident than a printer driver, font, or application dictionary.  Dependencies increasingly became things that must exist for the software to function, rather than being optional features.  Mac OS eventually dropped the concept of resource forks, so things that used to be contained in one file were distributed across many.<p>There are many reasons for those changes and the complexity of modern software likely makes returning to that old model impractical, if not impossible.  That being said, for all of the improvements we have seen a lot of control has been lost.')