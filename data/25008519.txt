Item(by='gingerBill', descendants=None, kids=[25009126], score=None, time=1604678225, title=None, item_type='comment', url=None, parent=25006406, text='A &quot;linear graph&quot; is effectively a graph with no cycles in it, i.e. a basic tree.<p>All hierarchies can be described using graphs, and hierarchy is a relationship between different things in that graph through some dominating aspect (whatever that might be). A &quot;linear hierarchy&quot; is a hierarchy with no overlapping parts, no cycles, and a unique way to traverse up the hierarchy,  e.g. you father is your son is not allowed, a node cannot be part of multiple hierarchies, a node has two parents which share a common ancestor, etc.<p>I am not sure why you brought up my &quot;Value&quot; definition, that was a little random.<p>&gt; Unless you equate the graphs with their traverses?<p>I mostly am because data structures on their own without algorithms are useless things. Type systems try to encode information about the values effectively restricting what algorithms can do to them. Ownership semantics are another aspect of the type system of some languages which encodes a responsibility dependency graph to values. This means it explicitly restricts what data structures can be like _by default_. It encourages linear data structures, where the dependency between the values can be model through linear logic. This is why something as basic as a linked list is difficult to implement in languages designed around ownership semantics. It is of course possible but either requires restricting what the linked lists can do, or doing something to bypass the ownership semantics entirely.')