Item(by='kazinator', descendants=None, kids=None, score=None, time=1607453483, title=None, item_type='comment', url=None, parent=25343710, text='Your comment is a bit unclear. Can you give an example of what you think no Lisp-aware editor will produce?<p>&gt; <i>They specify a couple core forms that have a body, which is indented &quot;semantically&quot; and the rest is treated like functions where new lines are indented to the first argument.</i><p>Your &quot;they&quot; looks like it refers to &quot;examples&quot;, which is the first (actually, only) plural word that we encounter in a leftward scan from the pronoun.<p>I think it&#x27;s actually supposed to refer to &quot;lisp-aware editors&quot;.<p>Firstly, that is not quite right. There is no fixed <i>core</i> of forms that have a body, because user-defined macros extend that repertoire. You have to teach that to your editor, in the light of what projects you are editing. For instance, in Vi, the &quot;:set lisp&quot; mode has an associated &quot;lispwords&quot; variable which holds a list of the symbol names that are to be treated as operators that have a body rather than functions.<p>But the code in the Semantic Clojure Formatting page linked to by the submission is in fact exemplifying this formatting. It shows operators that have a body being indented, and function calls exhibiting argument alignment.<p>Can you cite an example of what you think is wrong?<p>The only exception I see is the &quot;narrow format&quot; for function calls. But that&#x27;s not an invention from the Clojure world. I&#x27;ve resorted to that narrow format myself, in code that is deeply nested and hitting the maximum column limit of the surrounding coding convention.<p><pre><code>          (deeply\n            (nested                                   |___|___|\n                 .........................  (aargh    |__|___|__\n                                              too     |___|___| brick wall\n                                              cramped |_|___|__\n                                              here    |___|___|\n</code></pre>\nI don&#x27;t like it very much; I prefer to refactor the code to avoid it, if possible. But if you put a line break immediately after the function name, then that is realy the only sensible indentation you can follow.')