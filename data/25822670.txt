Item(by='berkes', descendants=None, kids=None, score=None, time=1610983907, title=None, item_type='comment', url=None, parent=25813957, text='This was a Node, Rails and-then-some project.<p>Rails comes with Rake, the Ruby make. Node comes with &#x27;scripts&#x27; and then gulp, grunt, or whatever the node-js-buildsystem of january 2021 is. &#x27;and then some&#x27; is a bash script or four, custom rake tasks, bash-scripts+follow-some-wiki and so on.<p>Make&#x27;s other great advantage is that it makes a great &#x27;overarching&#x27; general setup. Whether I have a rails, node, ansible, cargo&#x2F;rust, jekyll-project, `make install` installs it, `make [build]` builds it, `make test` tests it and `make deploy` deploys it. It solves the &quot;yea, but here you need npx&quot; and &quot;this will only work with bundle exec prefixed&quot; or &quot;you have to run this with `python2` as `python` is python 3 and... We all know these cases.<p>Edit: or, in your examples: `JAVA_HOME=&quot;.&quot; maven build` is fine. As is `PDF_BUILD=true maven run test {integration,unit,model,jobs}` already less so (I don&#x27;t know much about maven). All require the dev to know how to operate maven, to learn that this project uses maven and to know the intricacies of maven. But they could all be abstracted away beind one predictable `make build` and `make test`; and whould therefore work for your maven project, node project, that ancient ant-setup and whatnot: all the same (well, if they all have a Makefile, that is).')