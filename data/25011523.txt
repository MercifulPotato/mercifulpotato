Item(by='jariel', descendants=None, kids=[25011697], score=None, time=1604699458, title=None, item_type='comment', url=None, parent=25008587, text='I&#x27;m not so sure if it&#x27;s &#x27;lack of understanding&#x27; of some other tech.<p>And it&#x27;s not &#x27;debt&#x27; or rather, only debt in a certain context.<p>It&#x27;s highly rational to expend minimal energy trying a new feature, because time to market is key, and so is the fact that there&#x27;s a good chance nobody will want it.<p>&#x27;Debt&#x27; is only ostensibly incurred once the feature actually works, thus there&#x27;s real material value to be gained whereupon the ostensible refactor becomes impending, and therefore seen as &#x27;debt&#x27;.<p>The &#x27;debt&#x27; didn&#x27;t materialize in a bunch of other things because they were dumped.<p>I also don&#x27;t think anyone has too much trouble with understanding this, the operational issue is that &#x27;technical debt&#x27; will always be put alongside &#x27;shiny new feature&#x27; in terms of priority, in which case it becomes much less amenable for investment.<p>To put another way, and this hurts all of us Engineers at a deep level: <i>The most efficient perpetual state of code may be messy, unfinished and have bugs outstanding</i>.<p>Just let that one sink in: in a situation of ongoing feature development which yields benefits to userland, the optimal level of &#x27;completeness&#x27; of most code is literally &#x27;never really complete&#x27;.  Bugs and ugly architecture likely represent a more efficient operating state when we consider value creation as the real goal.<p>The more &#x27;core&#x27; and longstanding a bit of code is, probably it makes more sense to go after the technical debt because the yields of the effort are pervasive. But for many other things, nope.<p>If you&#x27;re building a home to last 500 years (ie Europe) you want a solid foundation, if you&#x27;re building it only to last maybe 50 years before they tear down and put up something new, then some things are less important.')