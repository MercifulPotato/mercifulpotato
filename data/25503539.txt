Item(by='lost-theory', descendants=None, kids=None, score=None, time=1608618287, title=None, item_type='comment', url=None, parent=25501943, text='I&#x27;ve looked into this a bit and the closest thing I could find is in VimWiki, where certain plaintext patterns are dynamically replaced with other text without actually changing the buffer.<p>See how line 11 dynamically changes in this video based on whether his cursor is on the line:<p><a href="https:&#x2F;&#x2F;youtu.be&#x2F;C0OwhiCp2Hk?t=223" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;C0OwhiCp2Hk?t=223</a><p>I believe this is done using &quot;conceal&quot; as JNRowe says, e.g. here:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;vimwiki&#x2F;vimwiki&#x2F;blob&#x2F;619f04f89861c58e5a6415a4f83847752928252d&#x2F;syntax&#x2F;vimwiki.vim" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;vimwiki&#x2F;vimwiki&#x2F;blob&#x2F;619f04f89861c58e5a64...</a><p>I also second what JNRowe says about trying the new popup feature. I recently used this to run a script that calculates something based on where my cursor is currently at in the file, then show the result at the cursor using a popup:<p><pre><code>    fun! CalculateFoodCalories()\n      let day = GetSectionName()\n      let day = substitute(day, &quot;\\[&quot;, &quot;&quot;, &quot;g&quot;)\n      let day = substitute(day, &quot;\\]&quot;, &quot;&quot;, &quot;g&quot;)\n      let out = split(trim(system(&quot;food --date=&quot; . day)), &quot;\\n&quot;)\n      call popup_atcursor(out, #{ title: &quot;Today&#x27;s calories&quot;, highlight: &#x27;Statement&#x27;, border: [],  padding: [1,2,1,2]})\n    endfun\n    nnoremap &lt;silent&gt; &lt;leader&gt;m :call CalculateFoodCalories()&lt;CR&gt;</code></pre>')