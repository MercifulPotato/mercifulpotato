Item(by='cb321', descendants=None, kids=[25224405], score=None, time=1606432902, title=None, item_type='comment', url=None, parent=25224182, text='Well, it was not hard for me to add batching for every syscall.  The whole module is under 200 lines of C.  Granted, I only did x86_64.<p>I think it has some bearing to those using eBPF to just batch calls, too.  Unless I am missing something, I do not think there needs to be any super-user&#x2F;root&#x2F;capability restriction on syscall batching since all the syscalls check permission &quot;on the inside&quot;.  That gives it maybe more scope for applications.<p>That sys_batch is kind of a tiny &quot;jump-forward-only&quot; assembly language where you can use the output of prior calls in later ones.  The jump forward only (no loops) I do should also guarantee termination { at least conditioned upon all syscalls terminating...but that&#x27;s a whole other domain ;-) }.  (EDIT: IIRC, the article that this conversation is about was excited about this aspect.  In my examples&#x2F; I have an &quot;mmap a whole file in one syscall&quot; example.)')