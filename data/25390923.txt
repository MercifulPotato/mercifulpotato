Item(by='ethbr0', descendants=None, kids=None, score=None, time=1607720487, title=None, item_type='comment', url=None, parent=25390565, text='I can&#x27;t offer any modern links, but some background and framing that might help a bit.<p>Disclaimer: Everything to follow circa-2010. Modern ROS* may be substantially different.<p>First, and most importantly, &quot;Why ROS?&quot; To which one might reply &quot;To run robots,&quot; but that&#x27;s not <i>really</i> why.<p>Historically, ROS&#x27; purpose is so that researchers can avoid rewriting boilerplate linking &#x2F; low-level code, and reuse high-level components developed elsewhere.<p>To that end, ROS provides two main functional components: a standardized message bus, and a somewhat-structured framework into which one can plug arbitrary modules. So yes, closer to an API&#x2F;spec than an OS.<p>So the easiest way to think about ROS (the base framework) is as a no-batteries-, no-motor-, no-X-included kit. Bring your own everything. And for values of everything, where there is likely some component out there that does X... but that component isn&#x27;t ROS.<p>So you (as it sounds like) essentially end up with the JavaScript ecosystem problem, except moreso. Do I use X or Y for this purpose? Does X integrate cleanly with A? Does Y?<p>When you look at ROS as something useful to a PhD student pursuing their robotics dissertation on SLAM, but who doesn&#x27;t want to write all the other bits, it makes a bit more sense.')