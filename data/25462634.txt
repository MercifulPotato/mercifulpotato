Item(by='ryukafalz', descendants=None, kids=None, score=None, time=1608253899, title=None, item_type='comment', url=None, parent=25462021, text='I haven&#x27;t done that much, but generally those modifications are things like... adding a new package, updating an existing package, etc.<p>As for how, it depends on what I&#x27;m doing. If I&#x27;m modifying a single package, I might reach for inheritance first (in a file or manifest), although it depends on whether or not that package is at the end of a dependency chain. If it is, inheritance is fine; I&#x27;ll inherit the upstream version first, change a few fields, and try building&#x2F;installing it. If not, though, I might be trying to update a library but the program I really care about is an application further down the chain; then I&#x27;ll typically work from a local Guix checkout so that I can update the library then install the application.<p>Regarding the ergonomics of each of these:<p>- If I&#x27;m doing something that involves working on a Guix checkout... well, that involves looking up where to find Guix&#x27;s source code, `git clone`ing it, finding the Guix revision I&#x27;m currently on with `guix describe` so I can check out the same one for consistency&#x27;s sake, `make`ing it, `guix environment guix`, using `pre-inst-env`, etc. I don&#x27;t really have a problem doing this, but I&#x27;ve also been working with Git and GNU&#x2F;Linux for years now. It&#x27;s not very approachable to beginners. Don&#x27;t get me wrong, it&#x27;s easier to make changes to Guix than it is to most distros, but I still think it could be better.<p>- Inheritance can be pretty convenient, but of course when you finish working on something and want to go contribute a patch, you have to go get yourself a Guix checkout anyway and copy your changes over.<p>I think in my ideal world, there would be a command like `guix edit`, where `guix edit foo` would do something like... give you a local editable checkout of Guix, open an editor to the file at the line where the start of the package is, give the user a quick way to build their new package, etc. I haven&#x27;t thought through exactly what the UX would be, but essentially the idea is to have the closest thing possible to an &quot;edit source of &lt;package&gt;&quot; button. Bonus points if it can walk the user through the upstream contribution process, and maybe automate the more trivial commit messages for things like adding a new package. I always have to look up that format as I don&#x27;t contribute packages very often.<p>This is not to say that what&#x27;s going on behind the scenes should be completely hidden (verbose flag that shows what commands you could have run?), but providing a simple on-ramp to contributions that doesn&#x27;t require much pre-existing knowledge is huge for engaging beginners (and even non-beginners who just don&#x27;t have much time on their hands).')