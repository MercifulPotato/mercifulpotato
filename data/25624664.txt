Item(by='calmbeluga54', descendants=0, kids=None, score=3, time=1609703920, title='Ask HN: Product feedback: “state machine as a service”?', item_type='story', url=None, parent=None, text='I frequently run into the problem of &quot;lifecycle management&quot; for various entities.<p>In short, when some &quot;thing&quot; is created in our system e.g. an &quot;order&quot;, &quot;user&quot; etc... there is a semi-automated song and dance commenced between customer service, customers, and community members, over the course of days or weeks...<p>For example:<p>- Order lifecycle: New, Awaiting Shipment, Pending cancellation, Awaiting Review, Disputed, etc... The problem isn&#x27;t defining the states, but rather defining who could make a transition and when.<p>- Listing lifecycle management: Pending Review, Closed, Sold, Banned, Open, etc... Once again the complexity arises when we try to define which transition is allowed by which user, and at what point.<p>- Community membership management: Awaiting confirmation, Active, Probation, Banned<p>My idea was to create a low-code platform where you can easily design and deploy state machines. The goal would be that once you define the entity lifecycle (the state machine), You could just send us an API request anytime a new entity was created in your system, and we would handle involving the key people needed at the right times, sending notifications, status updates, etc...<p>An example: https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;mr5Pdss<p>This represents an order&#x27;s lifecycle. Once deployed, you could send an &quot;order&quot; to this service to kickoff execution:<p>1) Purchased - sends a notification to customer service that a new order was purchased. The &quot;Customer Service&quot; role (“C”), can take the action &quot;confirm availability&quot;, which when taken, transitions the entity into state &quot;Confirming Availability&quot;.<p>2) Confirm availability - Whoever is assigned to the &quot;warehouse&quot; role (“W”) would receive a notification that the order is in this state, and once they confirmed availability, could either take the action &quot;available&quot; or &quot;unavailable&quot; transiting to the order to the appropriate state.<p>etc…<p>Does any of this make sense, or have I gone off the deep end?')