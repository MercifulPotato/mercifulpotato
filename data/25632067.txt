Item(by='dSebastien', descendants=None, kids=None, score=None, time=1609772252, title=None, item_type='comment', url=None, parent=25631284, text='We designed our documents just like separate tables and didn&#x27;t want to denormalize the data model. This was a mistake and known anti-pattern for NoSQL, because we just can&#x27;t easily join different documents together. It caused issues with updates (e.g., If I change the state of a meeting document that is linked to a number of other documents, then I need to fetch&#x2F;update those separately) and all without a transaction, because CouchDB only ensures atomicity at the document level (&amp; with bulk ops). It&#x27;s far from intuitive, prone to error, and complex.<p>Certainly, having a classic RDBMS with an powerful ORM makes such operation much easier in practice, and safer as well.<p>I&#x27;m not bashing on NoSQL; we just use it badly and suffer from all the drawbacks while getting none of the benefits (since our schema is strict after all..).<p>CouchDB was appealing for offline-first because it exposes a RESTful API &amp; means to replicate entire databases. So we had in mind to use PouchDB on the client-side; store a copy of the data locally while online, saving changes locally and synchronizing when going back online.<p>So it allows for a true offline-first approach, not a middle ground where you keep access to the subset of the data that you already got while browsing the app.<p>But it doesn&#x27;t mean that it&#x27;s easy, or that it ain&#x27;t possible to do the same with a classic RDBMS, or a mix of tech...')