Item(by='lima', descendants=None, kids=[25801160, 25797563, 25801223, 25800860], score=None, time=1610750442, title=None, item_type='comment', url=None, parent=25797348, text='&gt; <i>KVM and Xen have a smaller attack surface and are known to have a better isolation model, but I&#x27;m sure there are still plenty of exploits given enough resources.</i><p>KVM - the low-level kernel-level hypervisor - has a tiny attack surface and has been audited exhaustively. It&#x27;s unlikely to have critical bugs in it.<p>When people talk about &quot;KVM vulnerabilities&quot;, they&#x27;re usually talking about vulnerabilities in <i>QEMU</i>, which implements the actual device emulation. QEMU has all of the attack surface, deals with low-level data shuffling, and is written in C. Even worse, most stock QEMU-KVM deployments simply run qemu as root with no extra sandboxing or MAC like SELinux&#x2F;sVirt. It&#x27;s very likely that a bunch of 0days exist for those environments.<p>This is why many cloud providers use KVM-the-kernel-module, but an in-house replacement for QEMU.<p>Fortunately, there&#x27;s a growing ecosystem of QEMU replacements written in Rust:<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;cloud-hypervisor&#x2F;cloud-hypervisor" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;cloud-hypervisor&#x2F;cloud-hypervisor</a><p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;firecracker-microvm&#x2F;firecracker" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;firecracker-microvm&#x2F;firecracker</a><p>- <a href="https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;platform&#x2F;crosvm&#x2F;" rel="nofollow">https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;platform&#x2F;crosvm...</a> (the Chrome OS VM runtime which Firecracker was forked from)<p>Google&#x27;s gVisor - the sandbox that App Engine and Cloud Run uses - uses KVM as well: <a href="https:&#x2F;&#x2F;gvisor.dev&#x2F;docs&#x2F;" rel="nofollow">https:&#x2F;&#x2F;gvisor.dev&#x2F;docs&#x2F;</a><p>With an emulation layer written in a language like Rust, the trust boundary is much better.<p>As for VirtualBox in particular - that one should <i>not</i> be considered a trust boundary. Nobody is seriously using it in production, and it&#x27;s regularly featured in CTF competitions as a fun exploitation target.')