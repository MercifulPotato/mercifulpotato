Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1611549562, title=None, item_type='comment', url=None, parent=25897198, text='Welcome! You&#x27;ll be glad for it (and cranky about it). This sensation is what many of us feel when we find the incidental complexities of things designed to be simple. Once you find enough you start to spot them yourself, and then you see them everywhere. The ugly part is... you see them everywhere. The beautiful part is you don&#x27;t just get pattern recognition, you get a familiar solution mapping.<p>I felt this way as a young programmer really getting my teeth in. I was also self-taught, so I didn&#x27;t have familiarity with some things that would probably be considered basics&#x2F;fundamentals.<p>My advice regardless is: when you get this unsettling mind-expanding feeling go research prior art. Go find out how other people solve problems like it. Even if you come up wanting more&#x2F;better, at least you have a lay of the land. And learn the terminology used describing the problem space to expand your hunt. You&#x27;ll be amazed what you turn up!<p>Edit: since this is on the topic of JSON (de)serialization, while I’d love to tout the very good pattern I see in my usual stack (TypeScript) where I’m working on an offering in the space, I’d actually recommend looking at prior art in a very different stack with very different goals:<p>- Transit[1] which standardizes type metadata within JSON (but leaves type resolution up to producers&#x2F;consumers).<p>- EDN[2], which is the philosophical basis for Transit, written in Clojure syntax. It’s demonstrably worse for performance but syntactically a nicer format&#x2F;DX if you have tooling to deal with it, and it’s nearly tooling-free if you use the stack.<p>A lot of efforts to standardize rich data type representation in JSON unfortunately do it very haphazardly, so I wanted to include examples that come from the “pattern recognition&#x2F;solution mapping” side as an example. Both have downsides, but they’re exceptionally well designed for what they are and deserve to be part of this discussion.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;cognitect&#x2F;transit-format" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;cognitect&#x2F;transit-format</a><p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;edn-format&#x2F;edn" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;edn-format&#x2F;edn</a>')