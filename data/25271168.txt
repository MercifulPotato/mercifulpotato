Item(by='brandur', descendants=None, kids=[25271762], score=None, time=1606863389, title=None, item_type='comment', url=None, parent=25271025, text='(Author here.) I think you&#x27;re confusing a couple different major classes of languages — declarative versus procedural. I said specifically &quot;most expressive ever <i>for querying and manipulating data</i>&quot;, and I&#x27;d stand by that.<p>The nice part about SQL compared to the languages you&#x27;ve cited is that you just need to specify the &quot;what&quot; and not the &quot;how&quot;. I tell it what data to fetch, where I want it from, how I wanted it grouped&#x2F;sorted (etc.), and the engine figures out the best (and probably a very efficient) way to do that. This is different from a procedural language like Python or Rust where it&#x27;d be on me to also define every implementation detail  — get data from here, join by doing this and with that algorithm, sort what comes out, ...<p>This gives SQL a number of very nice properties:<p>* It&#x27;s very fast and succinct to write.<p>* Even very complex queries are likely to be executed as optimally as they can be (because database engines tend to be very good at this).<p>* It&#x27;s so high-level that it can actually get more performant over time. See for example Postgres 12, which eliminated an optimization fence for CTEs (common table expressions) [1], which means that a lot of queries got faster automatically, without the user having to do _anything_.<p>I love a lot the languages you listed, but SQL is a different animal, and amazing in a way that&#x27;s quite unique.<p>---<p>[1] <a href="https:&#x2F;&#x2F;info.crunchydata.com&#x2F;blog&#x2F;with-queries-present-future-common-table-expressions" rel="nofollow">https:&#x2F;&#x2F;info.crunchydata.com&#x2F;blog&#x2F;with-queries-present-futur...</a>')