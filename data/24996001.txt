Item(by='chrismorgan', descendants=None, kids=[24997406], score=None, time=1604556105, title=None, item_type='comment', url=None, parent=24995841, text='Linked lists and graphs are the canonical examples of things that are difficult to model and express effectively in Rust. In other languages you can just store a pointer&#x2F;handle&#x2F;reference to the things each node is connected to, which is commonly not the <i>most efficient</i> way of working (and as systems scale up they routinely replace such techniques with fancier techniques), but is very straightforward conceptually and matches people’s intuitions about how to design such a thing. In Rust, you simply <i>can’t do</i> that directly, roughly because it’s not provably safe (in fact, in the general case, it’s provably not safe). So you have to solve things in other ways, the simplest being to wrap each node in Rc&lt;RefCell&lt;_&gt;&gt; or similar, which is basically a way of saying “I can’t cope with ownership semantics, gimme a kludgy way of checking it at runtime”; but it’s also common to immediately reach for fancier data structures like <a href="https:&#x2F;&#x2F;lib.rs&#x2F;crates&#x2F;petgraph" rel="nofollow">https:&#x2F;&#x2F;lib.rs&#x2F;crates&#x2F;petgraph</a>. Yet even with that, you’re often spitting in the face of ownership semantics with your <i>traversals</i>, because traversing a potentially-cyclic graph is fundamentally against ownership semantics, so you have to be careful because some things will be being checked at runtime.<p>In the case of these fancier data structures, it is perhaps also worth pointing out that many of them <i>actually do</i> follow ownership semantics, down to things like allowing shared access to multiple nodes, or exclusive access to a single node, so that no runtime checks are necessary. This is where I think the original article severely missteps in calling it a <i>fatal flaw</i>—because people are successfully building safe ownership-oriented abstractions using unsafe code. That’s a super-important capability of Rust.')