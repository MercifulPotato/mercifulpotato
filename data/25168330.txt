Item(by='darksaints', descendants=None, kids=None, score=None, time=1605943444, title=None, item_type='comment', url=None, parent=25165752, text='I get that there are many out there that have fully bought into the idea that developer productivity is more valuable than efficiency. But I think it is many times a false and very misleading tradeoff, or at least they got their cost function drastically wrong.<p>1) There are plenty of fast languages out there that are suitable for high productivity environments. Go, Kotlin, Scala, F#, C#, even Java, are all great languages for developing web apps and services. And they&#x27;ll all beat the pants off of your PHP, Ruby, or Python framework of choice.<p>2) Many of the frameworks that get you up and running extremely quickly really only save you a day or two at the very beginning before they level out and are more comparable with other frameworks. Sure, `rails new myapp` and your first few migrations will save you hours over something like Play Framework, but after that, you don&#x27;t really have any more jawdropping productivity tools left to use. I once had a conversation with a die-hard Rails enthusiast tell me about how he decided he would never go back after using his first ActiveRecord migration, and realizing how much code was generated for him. I asked him how much time he saved, and he said, with pride, &quot;LIKE 4 HOURS!&quot;. Meanwhile, he probably spent probably 2-3 hours <i>every day</i> writing tests and debugging errors that C# or Scala would never even let compile in the first place.<p>3) It&#x27;s not too long before you have to start thinking about performance anyway because your high latencies are a terrible user experience. This goes for client-side software as well. My 8 year old doesn&#x27;t know shit about software, but he knows that he absolutely hates Microsoft Teams and would much rather his school use Zoom...because the bloat and terrible performance are a massive disappointment in user experience, especially on cheap school-provided laptops.<p>4) People really undervalue the quality of life and productivity improvement that comes from managing one server versus ten. Even with the cloud, which supposedly takes care of those headaches, you still have to worry about load balancing, health monitoring, auto scaling, complex caching, etc. And even if you could autoscale your web server worry-free, you&#x27;re soon gonna have so many connections to your database open that you&#x27;re gonna have to worry about setting up connection pooling, read replicas and logical replication, and configure all your servers to partition their queries into reads vs writes, etc. And 95% of stack overflow answers that you google when you hit a snag are now irrelevant to you because they don&#x27;t take into account the complexity of your environment.<p>Performance is absolutely an improvement in productivity and quality of life. It&#x27;s one that pays dividends <i>every single day</i>, as opposed to a handful of days at the very beginning of a project.')