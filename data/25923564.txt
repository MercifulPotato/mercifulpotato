Item(by='adam_arthur', descendants=None, kids=None, score=None, time=1611714659, title=None, item_type='comment', url=None, parent=25923032, text='I&#x27;ve found the problem of &quot;too many abstractions&quot; fairly common in functional programming contexts... though not saying it&#x27;s inherent to the paradigm.<p>Usually it manifests in having tens or hundreds of tiny, stateless functions, with very little logic in each one. There&#x27;s a common line of thinking about this being &quot;good&quot; because you can &quot;mathematically&quot; prove the correctness of a function, and thus can ignore its implementation. But abstraction is only a big win when the abstraction is easily and widely understood. When you create a one off, ad hoc abstraction its purpose is not going to be obvious to the reader off the bat.<p>The important thing is that the total &quot;api surface area&quot; within your context is low, and each function&#x2F;abstraction has sufficient meaning. There&#x27;s a sweet spot where you can fit most of the local functions in your head, without having to constantly re-read to remember the purpose of a given function. Naming is quite important to this end.')