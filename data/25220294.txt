Item(by='doix', descendants=None, kids=[25220448], score=None, time=1606401166, title=None, item_type='comment', url=None, parent=25219511, text='I work in the industry but don&#x27;t have a perfect understanding of everything, hopefully someone will correct any mistakes in my explanation.<p>So Icarus Verilog can only be used for simulation, you will never produce a physical chip using (only) this tool.<p>I guess I&#x27;ll quickly start with the end goal. Assuming you don&#x27;t have your own fab and want to get something manufactured by one of the fabs, you&#x27;ll most likely send them a GDS file[0]. It&#x27;s basically a file that contains coordinates for a bunch of rectangles and their layer which define how the mask [1] should look like.<p>How do you go from verilog to a GDS file? Well it&#x27;s a pretty long process, none of the steps can be done with Icarus Verilog:<p>1. Synthesis, this will synthesize (coming from the software world, I guess you could call this &quot;compile&quot;) your verilog into standard cells(imagine AND&#x2F;NOT&#x2F;OR gates) and how they are connected.<p>* These standard cells come from a PDK[2](process design kit) which will be supplied to you by your semiconductor fab. I think if you wanted to break into the industry, supporting PDKs will be a pain. Allegedly there is OpenAccess[3] which is meant to allow for a &quot;standard&quot; way of developing these PDK&#x27;s, but I&#x27;m not convinced.<p>2. Placement, your chip is a rectangle of a certain size (you decide the size, the bigger, the more expensive it&#x27;ll be since wafters are fixed size) and it needs to fit all those standard cells. A tool will figure out how to optimally place them. There are certain rules it needs to follow defined by your PDK.<p>3. Routing, you&#x27;ve placed the cells on your chip, but they aren&#x27;t connected. A tool will find an optimal?(maybe?) solution on how to connect the standard cells so that it matches the netlist generated in step 1. This pretty much gets you the GDS.<p>3.a. After everything has been routed, you can extract the physical properties from the layout and resimulate everything with the &quot;real&quot; design. When you were simulating with icarus verilog, it was just checking that the logic is sound. It didn&#x27;t have any of the real world delays, with the extractd netlist, you can simulate it with the delays. I&#x27;m pretty sure Icarus Verilog would support this, I think the delays are just implemented with &quot;`delay X&quot; statements, but I might be wrong.<p>Now this primarily deals with the &quot;digital&quot; part of the chip. Now I&#x27;m a bit unsure about this part, but I&#x27;m pretty sure you can&#x27;t just make a &quot;digital&quot; (i.e verilog) only chip. I&#x27;m assuming at a bare minimum any product now days will have some ESD protection which will require at least a bit of custom.<p>For the analogue part of the chip, it&#x27;s completely separate form Icarus Verilog. Analog designers will be manually placing transistors to create circuits for the chip. The PDK will define how the transistors behave under different voltages&#x2F;temperatures&#x2F;process corners[4]. They will then simulate their circuit to see if it works. To go from the circuit they designed to the GDS, someone (a person) will go through the circuit and manually layout their circuit. There are tools that check that the manual layout process matches the schematic&#x2F;circuit (LVS – layout vs schematic). There are a bunch of design rules that the fab will specify (DRC, design rule checks) that the layout needs to meet, there are tools which will check those for you. Basically, a bunch of tools and licenses you need to pay these vendors for.<p>Normally someone will pull in the synthesized digital into the analogue layout to create the final GDS before it’s sent to the fab.<p>I hope that gives you a peek into what’s involved in making these chips from a tools perspective. These EDA tool licenses are almost all token based and use FlexLm[5]. You&#x27;re paying per instance of the tool running. Most of the simulations run in parallel and take multiple tokens. The licensing costs for these things go into multi-millions for any decently sized semi-conductor company.<p>Apologizes in advance for any inaccuracies or any omissions. There&#x27;s definitely a lot more stuff involved in the process, but the comment was getting really long already.<p>notes: I&#x27;ve used verilog everywhere, but it might as well be VHDL or any other HDL.<p>[0] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GDSII" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GDSII</a>\n[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photomask" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Photomask</a>\n[2] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_design_kit" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_design_kit</a>\n[3] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenAccess" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenAccess</a>\n[4] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_corners" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Process_corners</a>\n[5] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FlexNet_Publisher" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FlexNet_Publisher</a>')