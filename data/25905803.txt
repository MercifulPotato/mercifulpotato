Item(by='lostcolony', descendants=None, kids=[25906340, 25905946], score=None, time=1611594860, title=None, item_type='comment', url=None, parent=25905720, text='As both I and the parent said, &quot;If you have multiple instances&quot;.<p>In which case, locks (like those mentioned in the article) don&#x27;t work. Because instance A reads 0, instance B reads 0, instance A writes 50, instance B writes 50. Totally serialized on each instance, totally unpredictable in when they hit the DB.<p>Just like you have a lock serving as a synchronization point on an instance, in the case of multiple instances, you want to push the synchronization point down into a single instance at the data layer (which you often have when using a traditional RDBMS). But RDBMS&#x27; don&#x27;t have locks, per se, for that synchronization; they have transactions that serve a similar purpose.<p>But, regardless of where that synchronization is, you have to ensure the update logic stays there. Having an interface that loads data, and saves data, at the application layer, ensures that a DB layer lock won&#x27;t work, either. You have to change it to have the DB actually read and update the data to benefit from the synchronization the DB transaction provides you.<p>So, as I said before...a lock (at the application layer) is neither sufficient nor necessary. A DB transaction (with the implied update of the query necessary to make a transaction mean anything) is both.')