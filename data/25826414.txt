Item(by='VLM', descendants=None, kids=[25827395, 25829446], score=None, time=1611002685, title=None, item_type='comment', url=None, parent=25823907, text='I thought it kind of odd the author asked randos off the street to define &quot;engineering&quot;<p>Back in &#x27;47, the ECPD, which later more or less turned into the ABET, used the definition:<p>&quot;The creative application of scientific principles to design or develop structures, machines, apparatus, or manufacturing processes, or works utilizing them singly or in combination; or to construct or operate the same with full cognizance of their design; or to forecast their behavior under specific operating conditions; all as respects an intended function, economics of operation and safety to life and property.&quot;<p>It would seem programming-type-stuff is more of a technical craft than an act of engineering.  Ideally on the best days on projects of small scope, programming can approach engineering levels of rigor.<p>The tolerance for bugs is vastly higher in programming than in structural steel engineering, for example.  There are no valid statistical analysis techniques for programming to reliably predict quality of code, although infinite conflicting opinions exist alongside some rather trivial rules.  Some &quot;full stack&quot; types approach full cognizance of their design; but its rare outside narrow areas like embedded or device driver designers.  Economics of operation is usually hand waved away with &quot;moores law&quot; and &quot;batteries always get better over time&quot;, and environmental impacts (aside from mere greenwashing and virtue signaling) are ignored.  Engineers use reliable and predictable statistical process control methods to ensure mass produced parts work together under a well defined standard, programmers are like &quot;here&#x27;s a URL to the docs for the API from a couple versions ago best of luck to ya&quot;.<p>I&#x27;d say on the technical continuum that programming is very much like village blacksmithing.  Somehow in general the horses get horseshoes but its not cheap, efficient, safe, clean, predictable, or fast.<p>The future being distributed very unevenly, I&#x27;d predict we&#x27;ll see the first widespread &quot;real engineering&quot; of computer-stuff appear in corporate IT departments probably revolving around statistical analysis of cloud computing.')