Item(by='munchbunny', descendants=None, kids=[25140551, 25139029, 25139292], score=None, time=1605716787, title=None, item_type='comment', url=None, parent=25138125, text='The portability category has some non-intuitive results. By that I mean that I think they&#x27;re wrong, but it&#x27;s a matter of how you measure &quot;portability&quot;.<p>The criterion the author uses is:<p>&gt; If you write some software in a particular language, can you copy the compiled program to another computer and expect it to work?<p>I coalesced the two columns the author used because it was &quot;No&quot; for both in the four examples below:<p>&gt; Java No Complex and fragile bundling of a separate runtime (with licensing issues)<p>&gt; C#&#x2F;F#&#x2F;.NET No Complex and fragile bundling of a separate runtime (with licensing issues)<p>&gt; Python No Complex and fragile bundling of a separate runtime<p>&gt; Ruby No Complex and fragile bundling of a separate runtime<p>I don&#x27;t think that&#x27;s how we generally think about portability. We usually consider installing the runtime as the platform dependent tax you pay to get your compile-once artifacts. Compiled JARs are generally considered portable. .NET Core binaries are generally considered portable. Python and Ruby scripts are generally considered portable.<p>Requiring that the application be portable by only copying the files across (without installing the runtime or platform abstraction layer) isn&#x27;t representative of how users or even dev ops teams that handle mixed-platform carry programs across platforms in the first place.')