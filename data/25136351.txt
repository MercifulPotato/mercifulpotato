Item(by='studius', descendants=None, kids=None, score=None, time=1605705247, title=None, item_type='comment', url=None, parent=25124556, text='&gt; I think there red flags if they are needing to jump into stash, cherry, etc on a daily basis.<p>Without stash, things can be nasty. Some alternatives:<p>1. Commit frequently, one tested piece of code at a time.<p>I&#x27;m sure this is what you meant. Not every environment and process allows this and not every change is small.<p>If you can though and have time, do this. If needed perhaps you can combine things and rebase later into larger commits. This is the reliable and clean process of development that everyone would love to have as a base, and then to do whatever they feel with it and it always stay like this with hard work and dedication.<p>Let&#x27;s move on because that isn&#x27;t always going to be the case.<p>2. Commit unfinished&#x2F;non-working code.<p>The best analogy of this is like leaving unfinished crap all over the place that might look finished to some. At some point, it may go wrong. If you do this, you might name the branch with something standard indicating it&#x27;s unfinished.<p>This always seems to happen when a developer leaves for a holiday&#x2F;vacation or leaves permanently. Then some other developer tries to build&#x2F;test it, it works, they smooth some rough edges and commit it. In my experience, it is was truly unfinished, the quality may end up being somewhere between a point on a line anywhere below the initial committer&#x27;s typically code quality and anywhere below the fixer&#x27;s code quality. There are exceptions, but as a general rule, be more careful with such commits if the personal investment and sense of ownership is not strong in that code.<p>3. Multiple copies of the repo.<p>It&#x27;s likely going to be less efficient to have multiple copies of the repo from a storage standpoint.<p>Showing the stashes may be more efficient than searching through different versions of the files in copies of the repo or having to recursively diff repo copies.<p>Using multiple copies of the repo may also increase the chance of things going wrong or history being lost.<p>I still would recommend having a backup of anything really important in the repo at times, if you&#x27;re not feeling confident or are worried about losing anything.<p>4. Throw away code changes.<p>Every time you switch priorities, you could throw away all of the work you had locally. If it was crap, this might be best. Be careful; you could lose something important.<p>5. Manually copy changed files to another area outside of the repo to ensure it doesn&#x27;t get stomped accidentally.<p>This can be messy, but with tools to make it easier, it might be &quot;ok&quot;. Compared to git stash though, it&#x27;s likely less efficient, because whole files are being copied instead of just the changes.<p>6. Manually backup only the diff&#x2F;patch files of changes.<p>Well, now you&#x27;re just recreating git stash functionality, but sure, you could do that. People did this before git stash and still do. Create patch files. It doesn&#x27;t sound as easy or clean, and you&#x27;ve got to put those patch files somewhere. Will that be consistent between developers? If a developer leaves or is unavailable, where would you find them?')