Item(by='libraryofbabel', descendants=None, kids=[25720093], score=None, time=1610313608, title=None, item_type='comment', url=None, parent=25717390, text='I agree with a lot of this article and it reflects the culture at the kind of places I like to work.<p>But - I&#x27;m curious what <i>costs</i> folks have seen in making this switch to giving engineers more autonomy and expecting them to be problem solvers for the wider business rather than code-factory workers. My hunch is that it&#x27;s usually worth it - but what are the risks?<p>It&#x27;s easy to mention a couple of anecdotes about some engineer who made an improvement or feature that represented millions of dollars for the company bottom line. But what about people going down strange rabbit holes, engaging in resume-driven development or following the allure of cool tech that isn&#x27;t really needed for the use case (e.g. &quot;let&#x27;s use Cassandra for this!&quot;), Not Invented Here syndrome, premature optimization, spinning up unnecessary microservices because that&#x27;s the way to get promoted, building a fancy internal system that internal stakeholders don&#x27;t actually need or want, etc. It&#x27;s really really hard to simultaneously see the business big picture and also be down in the technical details, and very easy for engineers to fall victim to the Dunning-Kruger effect and go off in the wrong direction. Perhaps the few people who are able to do this well are able to compensate for all the waste, but I don&#x27;t think we can assume that it leads to good results for the business in every case.')