Item(by='bacon_blood', descendants=None, kids=[25409939, 25411318, 25410159, 25410893, 25409615, 25410557, 25410129], score=None, time=1607889103, title=None, item_type='comment', url=None, parent=25408853, text='This article has a mistake. I actually ran the benchmark, and it doesn&#x27;t return a valid result on arm64 at all. The posted numbers match mine if I run it under Rosetta. Perhaps the author has been running their entire terminal in Rosetta and forgot.<p>As I write this comment, the article&#x27;s numbers are: (minify: 4.5 GB&#x2F;s, validate: 5.4 GB&#x2F;s). These almost exactly match my numbers under Rosetta (M1 Air, no system load):<p><pre><code>    % rm -f benchmark &amp;&amp; make &amp;&amp; file benchmark &amp;&amp; .&#x2F;benchmark\n    c++ -O3 -o benchmark benchmark.cpp simdjson.cpp -std=c++11\n    benchmark: Mach-O 64-bit executable arm64\n    minify : 1.02483 GB&#x2F;s\n    validate: inf GB&#x2F;s\n\n    % rm -f benchmark &amp;&amp; arch -x86_64 make &amp;&amp; file benchmark &amp;&amp; .&#x2F;benchmark\n    c++ -O3 -o benchmark benchmark.cpp simdjson.cpp -std=c++11\n    benchmark: Mach-O 64-bit executable x86_64\n    minify : 4.44489 GB&#x2F;s\n    validate: 5.3981 GB&#x2F;s\n</code></pre>\nMaybe this article is a testament to Rosetta instead, which is churning out numbers reasonable enough you don&#x27;t suspect it&#x27;s running under an emulator.<p>Update, I re-ran with the improvements from downthread (credit messe and tedd4u):<p><pre><code>    % rm -f benchmark &amp;&amp; make &amp;&amp; file benchmark &amp;&amp; .&#x2F;benchmark\n    c++ -Oz -o benchmark benchmark.cpp simdjson.cpp -std=c++11 -DSIMDJSON_IMPLEMENTATION_ARM64=1\n    benchmark: Mach-O 64-bit executable arm64\n    minify : 6.7234 GB&#x2F;s\n    validate: 17.7723 GB&#x2F;s\n</code></pre>\nNote that my version also uses a nanosecond precision timer `clock_gettime_nsec_np(CLOCK_UPTIME_RAW)` because I was trying to debug the earlier broken version.<p>That puts Intel at 1.16x and 1.07x for this specific test, not the 1.8x and 3.5x claimed in the article.<p>Also I took a quick glance at the generated NEON for validateUtf8 and it doesn&#x27;t look very well interleaved for four execution units. I bet there&#x27;s still M1 perf on the table here.')