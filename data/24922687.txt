Item(by='throwaway894345', descendants=None, kids=[24923322, 24923172, 24923504, 24923104, 24927194, 24922919], score=None, time=1603911288, title=None, item_type='comment', url=None, parent=24922522, text='This is why I see little hope for Python, which is to say that while I&#x27;m sure it will continue to have a large following for many years a la C, C++, etc, I don&#x27;t have hope for it being an exciting language or one that is particularly productive. Python already has performance and packaging problems which don&#x27;t seem to be easily divorced from CPython, since virtually the whole reference implementation is depended upon directly by much of the ecosystem due to the sprawling C-extension interface.<p>Pypy has done yeoman&#x27;s work in improving performance while maintaining compatibility with an impressive amount of the ecosystem, and even still there are many important packages which aren&#x27;t compatible with Pypy and for which Pypy-compatible analogs don&#x27;t exist (or aren&#x27;t supported&#x2F;maintained). For example, the only Pypy-compatible Postgres drivers were unsupported last I checked.<p>Moreover, the Python community (or at least its leadership) seems to have very little energy around tackling these longstanding problems. Meanwhile, there are many other languages which are not only performant, but which are rapidly encroaching on Python&#x27;s historically unique(ish) &quot;easiness&quot; (in the sense that Python is considered &quot;easy&quot;, which is to say for people who don&#x27;t have to manage build&#x2F;deploy&#x2F;packaging&#x2F;etc or otherwise have performance issues). Further, many of these languages continue to improve at a remarkable pace, while Python is content to rest on the laurels of its scientific computing mindshare--and given the rather poor nature of the numeric computing package APIs and their somewhat low performance ceiling, I don&#x27;t expect Python to be so dominant in this domain in another 5-10 years, especially as more companies need to figure out how to productionize scientific workloads.')