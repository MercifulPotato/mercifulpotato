Item(by='ratww', descendants=None, kids=None, score=None, time=1602688487, title=None, item_type='comment', url=None, parent=24773599, text='Exact same experience here.<p>At my previous workplace it was a disaster.<p>They hired too many developers in order to grow, and that led to too many people working on the same codebase. Microservices were adopted to solve that. After two years our product was <i>exactly</i> the same as before, except it had much more issues with latency and errors. Headcount was many times bigger, though.<p>The problem was microservices being adopted for political rather than technical reasons. They wanted teams to own their stuff, but the boundaries were too fuzzy.<p>We had a lot of duplicated data because leadership never decided which team owned what. Also, some features had to be made by duplicating data in two different services: if team #2 couldn&#x27;t convince team #1 to send certain events to their microservice, team #2 had to duplicate the whole DB table using Kafka (Very appropriate, right?) and do a cron job.<p>Another problem happened was when they banned &quot;microservices&quot; but asked to make &quot;well-sized services&quot;. New teams had a limit of how many services they could have and to get around the limitation they started having to mix completely unrelated functionality in a single microservice (and yep, that was sanctioned by leadership).<p>My current company has Microservices, but they exist purely for technical reasons and are extremely loosely coupled, so it works great.')