Item(by='tabtab', descendants=None, kids=None, score=None, time=1607443538, title=None, item_type='comment', url=None, parent=25330609, text='Re: &quot;A great example of this is the fact that we still use the metaphor of files and folders for organizing our source code.&quot;<p>I agree 100%! Trees are too limiting. I&#x27;m not sure we need entirely new languages to move away from files, we just need more experiments to see what works and what doesn&#x27;t, and add those features to existing languages &amp; IDE&#x27;s if possible. I don&#x27;t like the idea throwing EVERYTHING out unless they can&#x27;t be reworked. (Files may still be an intermediate compile step, just not something developers have to normally be concerned with.)<p>I believe IDE&#x27;s could integrate with existing RDBMS or something like Dynamic Relational, which tries to stick to most RDBMS norms rather than throw it all out like NoSql tried, in order to leverage existing knowledge.<p>Your view of source code would then be controlled by querying (canned and custom): bring all of aspect A together, all of aspect B together, etc. YOU control the (virtual) grouping, not Bill Gates, Bezos, nor your shop&#x27;s architect.<p>Most CRUD applications are event driven, and how the events are grouped for editing or team allocation should be dynamically determined and not hard-wired into the file system.  Typical event search, grouping, and filter factors include but are not limited to:<p><pre><code>   * Area (section, such as reference tables vs. data)\n   * Entity or screen group\n   * Action type: &quot;list&quot;, &quot;search&quot;, &quot;edit&quot;, etc.\n   * Stage: Query, first pass (form), failed validation, render, save, etc.\n</code></pre>\nAnd &quot;tags&quot; could be used to mark domain-specific concerns. Modern CRUD is becoming a giant soup of event handlers, and we need powerful RDBMS-like features to manage this soup using multiple attributes, both those built into the stack and application-specific attributes&#x2F;tags.')