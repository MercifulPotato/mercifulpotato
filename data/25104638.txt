Item(by='didibus', descendants=None, kids=None, score=None, time=1605473077, title=None, item_type='comment', url=None, parent=25101207, text='I think that&#x27;s because people are kind of forgetting what the concrete thing being discussed even is.<p>A programing language can be thought of in the asbtract, as simply a syntax for computation and programming.<p>But if you go in the concrete, a programming language implementation translates language into machine code for a particular machine.<p>From that angle, the Cython interpreter&#x2F;compiler is pretty bad at doing that. This experiment actually shows it. It is 40% slower even if all it does is orchestrates the calls between C code.<p>This is true of hash map as well. Python is so bad at generating efficient machine code from its own language syntax and semantics, that it would be unreasonably slow to implement hash map in Python. Why? Because Python is really slow.<p>In order to speed up programs written in Python, you need to write more of your program in some other faster language, such as C.<p>Now if you reuse a bunch of components written in fast languages, like hash map being implemented in C, well you avoid the need to write the C code yourself. But it doesn&#x27;t make Python any more efficient.<p>In practice though, you might be able to not have to implement 90% of your application, because there exist C libraries that do most of what you already need. Thus only 10% of your application will have degraded performance due to using Python. And for that 10%, it might be Python is a great choice, because you like the language and productivity, readability and all it gives you in order to implement that 10%, and can deal with 10% of the code being slower.<p>But if there doesn&#x27;t exist existing fast libraries you can leverage, well more and more of your program will be Python, and thus it&#x27;ll get slower and slower, unless you start using C yourself and implementing your own C code libraries.<p>Yes, that&#x27;s true of hash map as well. For example, if for any reason you needed a hash map that behaved differently than the standard one, you would most likely need to write it in C to get any performance out of it. Writing it in Python would be just too slow.<p>So to recap, Python is a slow language, because there are no known interpreter&#x2F;compiler for it that generate fast machine code for some real machine. This is not a falsehood, but the current reality. But it turns out most applications can leverage existing C libraries for a large amount of their functionality, thus making it that you can build an app that is reasonably performant, with the only code you need to personally implement being implemented in Python.')