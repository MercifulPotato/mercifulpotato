Item(by='throw_m239339', descendants=None, kids=[25751294], score=None, time=1610476093, title=None, item_type='comment', url=None, parent=25750812, text='Actually not that much, I remember 2 very different proposals, including this one.<p>The previous one was confusing as F and the antithesis of the simplicity Go claims it abides by. It felt very much like a plot to add generics without ever using the word generics anywhere and looking too much like Java&#x2F;C#&#x2F;...<p>The current proposal is basically what you&#x27;d expect from generics in a programming language, but a bit more limited.<p>It took basically 10 years, a generation of developers, to quell the opposition against generics in Go, to end up with generics...<p>They might even have unknowingly followed the ADA implementation except that Go&#x27;s type inference makes them even easier to use.<p>&gt; To use a generic type, you must supply type arguments. This is called instantiation.<p><a href="https:&#x2F;&#x2F;go.googlesource.com&#x2F;proposal&#x2F;+&#x2F;refs&#x2F;heads&#x2F;master&#x2F;design&#x2F;go2draft-type-parameters.md" rel="nofollow">https:&#x2F;&#x2F;go.googlesource.com&#x2F;proposal&#x2F;+&#x2F;refs&#x2F;heads&#x2F;master&#x2F;des...</a><p>This is basically how generics as packages in ADA works. I would add that ADA solved many existing problems in Go decades ago...<p><a href="https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Generics" rel="nofollow">https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Generics</a><p>&gt; The generic procedure can be instantiated for all the needed types.<p>Now all Go needs to do is to look at how Ada tasks work in order to fix every single issue with Go routines...')