Item(by='rvense', descendants=None, kids=None, score=None, time=1605805163, title=None, item_type='comment', url=None, parent=25151219, text='I&#x27;m guessing you haven&#x27;t actually used it. It&#x27;s a fantastic fit for React or similar frameworks. There&#x27;s honestly nothing spaghetti messy or Goldbergian about it. It&#x27;s just generating a stylesheet.<p>I absolutely do have a .btn class in my Tailwind projects, that&#x27;s a given. For consistency, it&#x27;s built from the utility classes that Tailwind provides, but buttons are kind of a pathological case in many ways, they&#x27;re really not how you should evaluate a framework. When I put two buttons next to each other, I don&#x27;t make a new class for one of the to get some spacing, I just slap a &quot;ml-4&quot; on one of them, and that matches all my other spacings.<p>But the real magic is when I&#x27;m building up my mid-level components, I don&#x27;t have to try to come up with names or abstractions for the CSS, I just make things look and work right, and as I notice patterns I can break them out into semantic classes as needed. It&#x27;s a great way to work and the results have been good for me.<p>In my mind, the real mess is a bunch of poorly named CSS classes that end up being specific to the place where they&#x27;re used. Specificity battles, 40 character BEM selectors, mismatched margins sizes and randomized colour palettes. Setting up a Tailwind configuration is a very ergonomic way of turning your basic design system into CSS.')