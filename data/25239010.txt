Item(by='notacoward', descendants=None, kids=None, score=None, time=1606585363, title=None, item_type='comment', url=None, parent=25238043, text='IMX it has often been pretty obvious by inspection. If two or more functions do &quot;if {complex condition} then {complex action with only one variation}&quot; any competent programmer should be able to see that a modification using a common function is equivalent. A slightly more complex case might require more review eyeballs to prove equivalence. Then there are tests. For a relatively small piece of the code you can test quite exhaustively. Most often those tests can live on as permanent unit tests. Occasionally they&#x27;re so tied to the implementation that they&#x27;re better thrown away after they&#x27;ve accomplished their purpose.<p>Obviously any but the most trivial refactor requires some care. Is it worth it, when (in the context of OP) you&#x27;re in there to do something else? Sometimes yes, sometimes no. One rule of thumb is whether you&#x27;re just rearranging code or changing the fundamental way that it works. Refactors of the first type can generally be kept low-risk and are probably worthwhile. Rewrites of the second type involve more risk and are probably better left to be projects unto themselves.')