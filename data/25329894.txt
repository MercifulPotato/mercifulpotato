Item(by='blisse', descendants=None, kids=None, score=None, time=1607323232, title=None, item_type='comment', url=None, parent=25329108, text='`git shortlog -sne --oneline --since=&#x27;Jan 1 2010&#x27;`<p>I like running the above command because it gives a good sense of coding productivity at the very least. And then you can dig into specific people to understand why exactly they have lots of commits or not. Most people use Git in a very similar fashion so you can very quickly make a generalization about how they commit if you look through their last N commits.<p>Some &#x27;high commit count&#x27; people have lots of low value commits, e.g. lots of &#x27;fix it&#x27; commits.<p>Other &#x27;high commit count&#x27; people are very productive but mix in a lot of atomic commits, e.g. lots of &#x27;another commit to change this comment&#x27;, leading to a PR of 9 super small commits + 1 real commit, that&#x27;s readable alongside their actual work.<p>Others are actually just more productive than other people. That might be because their code changes are simpler, or in an area that&#x27;s easier to be productive in and write lots of code. Or they just work more. Or they work at a higher velocity because they understand the codebase and domain better.<p>Definitely don&#x27;t _only_ use these metrics because some people just code slower and put out 1 large PR, but I can definitely believe a pattern of people at the top end of productivity who put out both small and large PRs at a higher velocity than the &#x27;less productive&#x27; people.<p>I would honestly just attribute those high value, high commit count people to being stronger developers overall, in my limited experience. Overall as in, not weak in any particular area, and quite strong technically in every area. The people you can put in any situation in the domain and they&#x27;d probably succeed. Because they&#x27;re strong across the entire codebase, their productivity is just generally higher no matter what they&#x27;re doing.')