Item(by='geofft', descendants=None, kids=None, score=None, time=1601827376, title=None, item_type='comment', url=None, parent=24677326, text='I think we&#x27;re disagreeing on what the central point is, then. I think least-privilege architectures are great, and I use them for many things. I think they do not save you from the problem being addressed in this article. That is, do not read what I&#x27;m saying as an argument against least-privilege architectures: read it as an argument against using that hammer to drive in this screw.<p>In turn, I think that means that there isn&#x27;t enough justification for using them <i>in this case</i> that users will feel like the additional complexity of wiring through least-privilege across their libraries is worth it. Even if you take the approach of incrementally adding the security to the existing design, the implication is it won&#x27;t actually be securing end users for a long time, and only against minor and unlikely threats at first, but it will impose increasing complexity all along.<p>See also this excellent post about mitigations: <a href="http:&#x2F;&#x2F;addxorrol.blogspot.com&#x2F;2020&#x2F;03&#x2F;before-you-ship-security-mitigation.html" rel="nofollow">http:&#x2F;&#x2F;addxorrol.blogspot.com&#x2F;2020&#x2F;03&#x2F;before-you-ship-securi...</a><p>KeyKOS is great and I&#x27;ve read about it and tried to adopt its lessons in my own designs, but the fact remains that KeyKOS is dead. And I certainly agree that a small performance overhead for guaranteed security properties shouldn&#x27;t be seen as a tradeoff (assuming it is in fact <i>solely</i> a performance overhead, and not a developer mental burden, nor a reviewer mental burden, nor an operational burden) - but I&#x27;m not commenting on what <i>I</i> see, I&#x27;m commenting that the vast majority of NPM users <i>will</i> see it as a tradeoff, regardless of what you and I believe.')