Item(by='benlivengood', descendants=None, kids=None, score=None, time=1605889727, title=None, item_type='comment', url=None, parent=25161436, text='ZFS is useful if you don&#x27;t have any higher-level abstractions for bulk storage.  Databases and object storage (including cloud storage) generally provide integrity, reliability, and snapshot features at least as well as ZFS.  If you need robust posix&#x2F;samba file servers then ZFS is a good choice.  I&#x27;ve never worked on a site with a large fleet on ZFS; it always had its own niche.<p>Maybe a good rule of thumb is that if you&#x27;ve ever needed to track down a missing file, fix file corruption, or have contingency plans for such an event in production then ZFS can help.  If the default action is to wipe a host and reinstall if the local filesystem looks fishy then ZFS won&#x27;t provide many benefits.<p>Btrfs has the advantage of living in the kernel tree (but I use ZFS on Freebsd where the same is true), but still carries an aura of not being quite done.  There are several &quot;things seem to work well at version X, and watch out for Y&quot; statements in <a href="https:&#x2F;&#x2F;btrfs.wiki.kernel.org&#x2F;index.php&#x2F;Incremental_Backup" rel="nofollow">https:&#x2F;&#x2F;btrfs.wiki.kernel.org&#x2F;index.php&#x2F;Incremental_Backup</a> for example.  This is a year old at least so maybe all bugs and caveats are fixed.  How could I be sure?  No idea.  zfs send and receive just work.<p>Btrfs seems to be the filesystem to use if you can dedicate enough time to testing your specific use case thoroughly and keeping up to date with changes and improvements as opposed to ext4 or ZFS which change relatively infrequently. \nZFS enables&#x2F;tracks new features in the zpool metadata so there&#x27;s a modicum of forward- and backward-compatibility.<p>To be honest I am even a bit leery of ZFS-on-Linux but even Freebsd is moving there soon.  Abandoning a working, trusted codebase is always scary.')