Item(by='deanCommie', descendants=None, kids=[25328500], score=None, time=1607294076, title=None, item_type='comment', url=None, parent=25326966, text='I started reading the article agreeing with you. Hearing Linus talk about &quot;taste&quot; made me expect something obscure and esoteric, with a marginal performance benefit, and a subjective&#x2F;objective debate about whether the value of micro-optimizations at scale throughout the linux kernel adds up to meaningful benefits, and if they are traded-off with less readable code.<p>Surprisingly, I ended up in a different spot.<p>I actually think this is a low-level C-version example of the best practice of &quot;use idiomatic language concepts&quot;.<p>When C# first got LINQ, when Java first got Streams, and when both got inline anonymous Lambda functions a lot of old-school developers resisted both.<p>&quot;The syntax is confusing!&quot;. &quot;The behaviour is hidden!&quot;. &quot;What&#x27;s wrong with a good ol&#x27;d for&#x2F;while loop?&quot;<p>I know because that was my first instinct too.<p>But I quickly embarced these ideas because they allowed me to write more terse declarative code and spend a larger percentage of my TLOC on business logic. There was a small learning curve to new developers to understand the libraries, but after that everyone was more performant.<p>I feel the same way about C and pointers and address manipulation magic. No, it has no place in Java or C#. But for C developers, these are their idiomatic principles and concepts. Pretending otherwise, and not leveraging all the capabilities possible with direct pointer and address manipulation is not utilizing the benefits of C to it&#x27;s full potential.<p>NOTE: I am not a C developer. This is just how this comes off to me. I&#x27;d love to hear from actual C developers if they would say that this is the equivalent of running around with a loaded shotgun and languages like Rust have been designed with solving these things in mind (or something).')