Item(by='bern4444', descendants=None, kids=[25354379, 25348858, 25341679], score=None, time=1607400207, title=None, item_type='comment', url=None, parent=25341572, text='The difference I see is, when you work with a nullable type, each function has to do the check<p>so<p><pre><code>    const add3 = (val) =&gt; val ? val + 3 : null;\n\n    const multiplyBy10 = (val) =&gt; val ? val * 10 : null\n</code></pre>\nSo the argument type goes from being \n    val\nto \n    val?\nwhere the calling code doesn&#x27;t necessarily have type safety since this argument is now optional (it can be a number or null and either is acceptable) instead of the following (with no conditionals or ternaries)<p><pre><code>    const add3 = val =&gt; val + 3;\n    const multiplyBy10 = val =&gt; val * 10;\n</code></pre>\nThis is possible cause\n    optional.map\nimplicitly handles the case where the data is missing by default, its built into the data type and the code you write doesn&#x27;t need to worry about it. Its the responsibility of the Optional object.')