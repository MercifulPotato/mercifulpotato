Item(by='soraminazuki', descendants=None, kids=None, score=None, time=1610546839, title=None, item_type='comment', url=None, parent=25759917, text='&gt; the package was not properly isolated, so it ended up depending on something from &#x2F;usr&#x2F;bin.<p>I don&#x27;t know when you last used Nix, but Nix now enforces sandboxed builds by default so it should be better at catching these kind of things during packaging. But note that isolation in Nix is mostly a build time thing, and it does not prevent running programs from accessing filesystem paths in &#x2F;usr. You could still fire up a bash prompt and enter &quot;ls &#x2F;usr&#x2F;bin&quot;, there&#x27;s nothing stopping you from doing so.<p>&gt; I highly dislike the location of the nix-store. It doesn&#x27;t belong in &#x2F;<p>I see many people express this sentiment, but I&#x27;m not sure what&#x27;s wrong with &#x2F;nix&#x2F;store when you&#x27;ve mostly[1] abandoned &#x2F;usr. Nix is fundamentally incompatible with traditional Unix directory layouts.<p>&gt; long path names (due to the hashes) are very impractical to use<p>That&#x27;s why you never need to specify them directly. You could either install packages globally and get it symlinked into &#x2F;run&#x2F;current-system&#x2F;sw&#x2F;bin or ~&#x2F;.nix-profile&#x2F;bin, both of which are included in PATH, or use nix-shell and direnv to automatically add packages to PATH whenever you enter a specific directory.<p>[1]: &quot;Mostly,&quot; because &#x2F;usr&#x2F;bin&#x2F;env is kept for compatibility')