Item(by='AmericanChopper', descendants=None, kids=[24845799, 24845958, 24845910], score=None, time=1603267568, title=None, item_type='comment', url=None, parent=24845420, text='Having worked as a DBA in numerous large financial institutions, and also as a SWE in a lot of node&#x2F;python&#x2F;MEAN-style startups. I can assure you that there are some very significant trade offs made with stored procs (or any business logic that is compiled to your database). It takes your one codebase and turns it into at least two seperate codebases. If you have a monolith, now you’ve got a distributed system. Any stored proc codebase is guranteed over time to become a maze of complexity and footguns. The more db features you use in this area, the worse it gets. If you’re using stored procs, then somebody is eventually going to create a table trigger. If a table trigger exists, then somebody will eventually write to that table not knowing it’s there.<p>The complexity it adds to release management alone makes it not worthwhile in a lot of situations.<p>It’s like doing full blown OOP design. Your codebase has to pass a certain (rather large) size before the complexity trade offs can even begin to make sense, and even then they often don’t.')