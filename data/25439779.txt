Item(by='web007', descendants=None, kids=[25439862], score=None, time=1608100971, title=None, item_type='comment', url=None, parent=25439652, text='Terraform is much, much better.<p>I used CloudFormation for a few years and ran up against a lot of its limitations. Maximum file size. Maximum resource count. Automatic rollbacks of THE WHOLE STACK on any subsystem failure like unavailable instance. It has no templating built in, so doing ten things with minor differences means copying and pasting 10x or deploying your own templating solution to generate CF. And I did this back in the ROLLBACK_FAILED days, where if you did something that it couldn&#x27;t automatically undo you were stuck - no way to roll forward or backward, just abandon innplace. The button for &quot;Continue rollback&quot; or whatever that came out 5-10 years ago was huge.<p>Contrast that with Terraform: all of your points addressed, plus all of mine are non-problems. It lets you do some awesome things that are no doubt inspired by CF, but it takes them to an entirely new level.<p>There are a few downsides too, but nothing compared to CF. You can build too-complex things much more easily in TF, so you have to be careful not to go overboard. It also bugs me that I can&#x27;t spec a high-level thing like &quot;compute with 4 cores and 32GB RAM, repeat 10x and put behind a load balancer with DNS name foo&quot; and use it anywhere, I have to say google_compute or azure_load_balancer or aws_dns. That was the biggest disappointment coming out of CF and hearing how awesome this thing was, and then realizing it still left me vendor locked.')