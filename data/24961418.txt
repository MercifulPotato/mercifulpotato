Item(by='Jtsummers', descendants=None, kids=[24961995], score=None, time=1604255599, title=None, item_type='comment', url=None, parent=24958350, text='&quot;Fun&quot; is way too subjective to use as a differentiator here. There are some languages most people would consider &quot;not fun&quot;, at least outside the puzzle sense like &quot;Can I make a Ruby on Rails clone in Cobol?&quot; And there are some languages that most people would consider more &quot;fun&quot; for some specific thing, like Processing is &quot;fun&quot; for the ease of getting graphical and interactive results. I&#x27;d say that Racket is at least as fun as Python given the readily available graphical and network libraries. Common Lisp, for me, is as fun as Python but requires a bit more work. And I can&#x27;t comment on Clojure&#x27;s &quot;funness&quot; because I haven&#x27;t used it extensively, but with its Java interop it has access to a lot of things that should put it on par with Python. Here I&#x27;m equating &quot;fun&quot; with relative ease of entry + ease of accomplishing more complex tasks (like GUI building, or making a basic interactive web app) + relative simplicity&#x2F;consistency of the language. What&#x27;s your definition of &quot;fun&quot;?<p>I find it puzzling that you describe Clojure as spaghetti code because I have <i>literally</i> no idea what you mean with that statement. Spaghetti code, in programming, has a rather specific meaning that I cannot conceive of applying to Clojure. Namely: spaghetti code = unstructured code that abuses goto&#x2F;jumps or their equivalents. So that sentence makes zero sense as presently written.')