Item(by='programd', descendants=None, kids=None, score=None, time=1610830958, title=None, item_type='comment', url=None, parent=25802912, text='Couldn&#x27;t you use just a vanilla Golang (or any other language) microservice for all of this? If you know what you are doing you can have a bulletproof basic service with all of the above up and running in no time, just add your game logic. Most of your requirements are part and parcel of any modern commercial Docker microservice. Never mind that such frameworks already exist, e.g. nano [0] specifically designed for games.<p>Scalability is also not an issue. Number of simultaneous players and objects is limited by bandwidth and latency only. There are certainly no barriers to handling multi-million entity databases on any modern server. You&#x27;re really only limited by how much data you can push out to your users within an update tick. And of course by how much money you&#x27;re willing to pay for back end compute capacity on an ongoing basis. But those costs are very low these days, especially if you have dedicated servers rather then AWS&#x2F;Google&#x2F;Azure.<p>I think perhaps the issue is not so much that frameworks don&#x27;t exist, but rather that no single framework has achieved popularity in the game design community. The indie crowd is not likely to want to, or afford to, run servers for years and years, so the demand is not there. The triple-A studios roll their own.<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;lonng&#x2F;nano" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;lonng&#x2F;nano</a>')