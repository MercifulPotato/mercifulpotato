Item(by='Iceland_jack', descendants=None, kids=None, score=None, time=1604535972, title=None, item_type='comment', url=None, parent=24994417, text='For simplicity written with a type synonym, but it cannot be partially applied. So I would use constraint synonym encoding (<a href="https:&#x2F;&#x2F;gist.github.com&#x2F;Icelandjack&#x2F;5afdaa32f41adf3204ef9025d9da2a70#constraint-synonym-encoding-or-class-synonym" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;Icelandjack&#x2F;5afdaa32f41adf3204ef9025...</a>)<p><pre><code>    type FunctorOf :: forall (s :: Type) (t :: Type). Cat s -&gt; Cat t -&gt; Constraint\n\n    class    (Functor f, Src f ~ src, Tgt f ~ tgt) =&gt; FunctorOf src tgt f\n    instance (Functor f, Src f ~ src, Tgt f ~ tgt) =&gt; FunctorOf src tgt f\n</code></pre>\nThe other definitions can be eta reduced<p><pre><code>    type EndofunctorOf cat = FunctorOf cat cat\n    type OldFunctor        = EndofunctorOf (-&gt;)</code></pre>')