Item(by='gregkerzhner', descendants=None, kids=[24959548], score=None, time=1604239101, title=None, item_type='comment', url=None, parent=24959042, text='We are doing something similar on my project except using the J2OBJC compiler. The compiler is a cumbersome, unwieldy tool, but the cross platform approach overall is great.  We write the core logic of our app using the cross platform approach.  Platform specific APIs like geolocation or maps get handled natively, but pass their data off as inputs to the cross platform implementation.  So for example, you wouldn&#x27;t render a map natively, but you could write a handler for an updated location from a map, or query the network based on the current map area and return some results.<p>An added bonus of this approach is that it forces you to have a clear separation between your user interface code, and your business logic. A lot of mobile (and front end) apps out there have no architecture, putting API calls, state management and UI right next to each other in the same modules.  Our approach forces you to keep UI code just focused on UI, while keeping all logic somewhere else, where it can isolated and as a benefit much more easily unit tested.<p>You would be surprised just how large of a share of your codebase can be moved into platform agnostic code if you have a solid architecture.  Our UIs are &quot;dumb&quot; and render themselves from view models which have exactly the data needed to render the view.  All the logic and state management to construct these view models can be written in the cross platform repo and shared across the Android and iOS apps.  For example, to render a list, you will need to use the native UITableView or RecyclerView separately, but all the code that manages how many rows are in the list, the data each row needs, as well as updating the data when the list is reordered can be shared across platforms.')