Item(by='patrec', descendants=None, kids=[25467017, 25467703, 25467408, 25466945, 25469119, 25473331, 25468373, 25466480], score=None, time=1608294070, title=None, item_type='comment', url=None, parent=25466236, text='I think his argument is fairly simple:<p>1. Learning (fundamental) stuff deeply is the way to become great.<p>2. But knowing how stuff works fundamentally at an abstract level (e.g. being able to write your own toy OS) is not directly economically useful (and&#x2F;or very time consuming to get to that stage). So it won&#x27;t get you a job.<p>3. So for starters learn just one thing that people actually use (say git) deeply at a concrete level. That is economically useful, because most devs will only have fairly superficial git skills, so you becoming the go-to person for git will provide economic value to the company.<p>4. At the same time, this is an effective way to bootstrap a more abstract deep understanding. E.g. if you really master git, you will also learn a fair amount of abstract concepts that go beyond the concrete tool (deep understanding of git implies the ability to implement at least a toy version yourself, which will teach you useful stuff; in particular if you can implement your own version of git you are probably already better than 90% of programmers).<p>5. Be mindful that you will be blinkered at this stage (because you only know a single thing and thus lack a basis for comparison), so don&#x27;t become opinionated yet.<p>I think this a great early career strategy as long as you pick the right thing to deep-dive into. E.g. if you picked AspectJ or Agent Learning or CASE tools or the semantic web around 15-20 years ago (at the peak of their hype-cycle), this possibly wouldn&#x27;t have worked out so hot. In particular, learning some things like Spring or Freudian Psychology will probably harm rather than help your intellectual development.<p>Making a good pick is hard if you lack experience; I&#x27;d say if in doubt pick something really everyone in your line of work uses but most people have not mastered and where there is value in mastery (and you can see how mastery might tie into things you want to learn more about at a fundamental level). Also, preferably pick something that has been around for at least 5 years (unless you are quite confident in your nose for trends).')