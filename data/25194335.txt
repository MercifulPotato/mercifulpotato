Item(by='Jugurtha', descendants=None, kids=None, score=None, time=1606182404, title=None, item_type='comment', url=None, parent=25190385, text='&gt;<i>Of which the end result will be that the desired functionality will be somehow hacked within the plugin or will not be available at all.</i><p>It depends on the scope of the functionality. For example, right now, authentication and token generation are in the core, but it&#x27;s okay right now because authentication spans across the whole product.<p>We eventually will extract it out, so we could use it as a component in another product, but for now, it&#x27;s not inappropriate to leave it in the core.<p>&gt;<i>When business requirements change, you then have the difficult dilemma - just insist on &quot;no&quot;, introduce a minimal hack, redesign interfaces to support the use case in a clean way (possibly big task) etc.</i><p>Some days are easier than others.<p>&gt;<i>Yes, worst outcome of all. In reality, plugin based architecture is no silver bullet. It can be very counter productive, especially when you&#x27;re figuring out what you actually want to build, as you build it.</i><p>That&#x27;s why I talked with the scope and abstraction level. We tend to make the few and loose assumptions that get us a lot of <i>leg work</i> done automatically. We won&#x27;t make further assumptions just for 1% advantage. And if we do, there&#x27;s a fallback. For example, we say that a plugin has a certain structure and expects say an icon file. If it&#x27;s not there, it&#x27;s not there, the plugin is loaded but just not displayed. We issue a warning, in case it was by mistake, but the application does not break.<p>Very few and loose &quot;specs&quot; that one can go through quickly and easily without looking at a checklist or something.<p>Again, it&#x27;s not a panacea. The underlying assumption in what I wrote is that neither I nor the reader believe in silver bullets. It&#x27;s not a dichotomy. The question of course is not whether a plugin architecture solves all problems and makes bacon or solves nothing, and I may have been unclear in my message. My point was that it&#x27;s one of the most useful things we have done because it reduced the amount of work we had to do. We still wake up and build product.')