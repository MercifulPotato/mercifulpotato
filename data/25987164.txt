Item(by='paavohtl', descendants=None, kids=[25989551], score=None, time=1612172555, title=None, item_type='comment', url=None, parent=25986670, text='Ehh, not really. It depends on how you define functional programming. C# supports first class functions, tuples, some form of pattern matching and LINQ extensions support basic FP collection operations like map (Select), filter (Where) and fold (Aggregate). But I think that&#x27;s just scratching the surface compared to a &quot;real&quot; FP language:<p>- F# has function composition operators<p>- F# functions are curried and support automatic partial application<p>- F# variables and data structures are immutable by default<p>- F# has powerful global HM type inference<p>- F# uses option &amp; result monads over exceptions and null<p>- F# has algebraic data types with exhaustiveness checking<p>These capabilities make writing code in F# a very different experience from C#. Some of these can be added to C# as features, but many things are fundamental parts of language design that are hard to change afterwards.')