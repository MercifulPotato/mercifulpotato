Item(by='williamkuszmaul', descendants=None, kids=[25359573, 25360617, 25359975, 25360252, 25359600, 25360467], score=None, time=1607527833, title=None, item_type='comment', url=None, parent=25342972, text='For perspective, here are some examples of other data structures in the past 35 years that are fundamentally new. (I am only including data structures that differ significantly from their predecessors)<p>B-epsilon trees: These allow asymptotic speedups for insert&#x2F;update&#x2F;delete operations on search trees in external memory (Introduced in 2002 by the paper, Lower Bounds for External Memory Dictionaries)<p>Cache-Oblivious B-Trees: This is an external-memory search tree that exhibits optimal behavior on a cache with <i>any</i> (possibly unknown) cache-size and cache-line size parameters. (Introduced in 2000 by the paper Cache-Oblivious B trees)<p>Fusion trees: This allows for search operations in a small binary tree (i.e., a tree whose size is polynomial in the machine word size) to be performed in constant time, rather than logarithmic time. (Introduced in 1990 by the paper Blasting through the Information Theoretic Barrier with Fusion Trees.)<p>Cuckoo hashing: This is a hash table design introduced in 2001. In 2009, the paper De-amortized Cuckoo Hashing showed how to make all operations in Cuckoo hashing take truly constant time with high probability. This remains (as far as I know) the only known technique for guaranteeing constant-time operation for a hash table without the use of bit manipulation tricks or the method of four Russians.<p>These are just examples off the top of my head. I&#x27;m sure there are many more.')