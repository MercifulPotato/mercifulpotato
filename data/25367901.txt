Item(by='danudey', descendants=None, kids=None, score=None, time=1607561116, title=None, item_type='comment', url=None, parent=25357138, text='curl | sudo bash (the typical use case) means that whatever ass-backwards method of installation the developer thinks makes sense just happens without you being able to put any reigns on it.<p>For example, Homebrew by default installs everything into &#x2F;usr&#x2F;local, but as your user. This is great for single-user systems, but everything goes all the way to hell when someone goes and installs it on a multi-user system and suddenly whatever versions of anything they&#x27;ve chosen to install become the default version for everyone on that system.<p>For Linux, if you have sudo permissions, it recommends you install it into &#x2F;home&#x2F;homebrew&#x2F;.linuxbrew, which is completely nonsensical; it doesn&#x27;t create a &#x27;homebrew&#x27; user, and it shouldn&#x27;t store local data in &#x2F;home&#x2F;&lt;wherever&gt;&#x2F; anyway (use &#x2F;usr&#x2F;lib&#x2F;&lt;wherever&gt; or &#x2F;var&#x2F;lib&#x2F;&lt;wherever&gt;).<p>Basically, the people who created HomeBrew don&#x27;t seem to really understand the benefits of not making a complete mess of an existing system.<p>Compare that with, for example, MacPorts. They have an installer package that you can use on MacOS, or you can just clone the code and do &#x27;.&#x2F;configure&#x27; and pass in whatever options you like. The first is great for the less technical, and the second is great for more technical. They install by default into &#x2F;opt&#x2F;local, which I&#x27;ve never seen anything else use, and they help you add the relevant paths to your path so that you can use it, but no one else does by default.<p>I&#x27;ve also seen other &quot;install shell scripts&quot; which do even worse things. One (I think from the Apache project?) would download a .deb package, if you were on Ubuntu, and then just manually unpack it over top of your existing filesystem. It wouldn&#x27;t `dpkg -i foo.deb`, it would `dpkg-deb -x foo.deb &#x2F;`, potentially overwriting anything that shared the same path, and making it impossible to uninstall. It&#x27;s already a debian package! Just install it normally!<p>In other words, aside from encouraging the bad habit of &quot;run code from the internet blindly as root&quot;, it&#x27;s extremely, extremely rare that I come across a project which instructs me to do this but doesn&#x27;t do something incredibly stupid in their script.<p>&gt; At least with `curl|bash` I get some feedback of where the code is originating from, what URL will I be downloading something from and is that some place that I can trust. At least I get somewhat of an identity verification (albeit very very weak) as long as I trust the owner of the site to protect it adequately from preventing unauthorized uploads.<p>This isn&#x27;t even remotely true. That shell script that you downloaded from <a href="https:&#x2F;&#x2F;llamasi.te&#x2F;install" rel="nofollow">https:&#x2F;&#x2F;llamasi.te&#x2F;install</a> might download and install arbitrary binary packages, binaries, config files, etc. from anywhere on the internet. It might install an older version of npm with security holes, overwrite your local node installation, and then download a bunch of npm packages with pinned versions full of exploits.<p>Unless you stop and read through their shell script to see specifically what they do, you have literally no idea what is going to happen with your system, and if you&#x27;re going to stop and read their shell script it&#x27;s probably <i>significantly faster</i> to just provide you with a list of prerequisites and a few commands to run, rather than make you read through a shell script full of if&#x2F;else&#x2F;fi to check which versions of sed and awk you have and where they are, just so that it can use them to parse out version information from other tools that you wouldn&#x27;t need to use.<p>Basically, when you curl|bash, you&#x27;re assuming that the other person is trustworthy and knows what they&#x27;re doing, and while you can make the determination of #1 fairly quickly, it takes a lot more time and energy to determine #2.')