Item(by='bob1029', descendants=None, kids=None, score=None, time=1609897331, title=None, item_type='comment', url=None, parent=25647753, text='The problem with operating at the level of the containerization abstraction is fundamentally the number of dependencies you are calling upon, and the emergent properties of all of these things interacting together (i.e. the mutually-shared state). Furthermore, you have to contend with the explosion in the dependency graph, because of the mindset that seems to be pervasive throughout: Everything should be vendored and never replicated in-house.<p>If you really want to get to the bottom of it, minimizing your interactions with external dependencies (i.e. binary images compiled outside of your control) is the only way to get closer to a provably-secure solution. Some might take offense with the prospect of a system that is &quot;provably&quot; secure, but all things are relative if you want to get really pedantic about it. I will concede that in many cases that security is not paramount, but it should always be a consideration when other humans are involved with your software. For instance, authentication protocols that a junior developer can read and understand in a few hours are going to be more secure than something that takes a team full of enterprise architecture and containerization specialists many weeks and meetings to figure out. Something that someone can play with in their head without much difficulty is going to be easier to probe for potential flaws. All of my project managers could explain in-depth the hows &amp; whys of authentication&#x2F;session protocols throughout our codebase because we went with something very simple.<p>I don&#x27;t understand how so many seem to get buried under these mountains of tools&#x2F;vendors either. Our entire list of 3rd party code-area dependencies is as follows: AWS, Windows, O365 (+Teams), SQLite, C# 9.0, VS2019, Git[Hub], .NET Core, AspNetCore (+Blazor), Apache PDFBox, Jenkins, iOS, XCode, MacOS. This is it. 100% of what we require for operating our humble software factory, including on-going delivery &amp; support. There is no containerization and certainly no orchestration of such things. Our entire stack can be stood up on a t3a.nano without any performance problems. Developers enjoy being able to walk up to any blank windows PC and arrive at an operational development environment within 20 minutes (assuming you have to install VS2019; &lt;60 seconds if you do not). I cannot comprehend sacrificing one ounce of this agility for even the most tantalizing of shiny new things. Yes, we had to write a lot of stuff in house. No, I would never go back and do it differently. This is better in almost every way. I have operated in environments where 100% of the things are outsourced. It is a hellish dystopia by comparison. There is probably some happy medium, but my security objectives are too intensive to explore such grey areas.')