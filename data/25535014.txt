Item(by='mpweiher', descendants=None, kids=None, score=None, time=1608883347, title=None, item_type='comment', url=None, parent=25533846, text='&gt; The problem of informal languages will not go away<p>...possibly because it isn&#x27;t actually much of a &quot;problem&quot;.<p>And of course it&#x27;s also not actually &quot;informal&quot;.  Just because it&#x27;s not the kind of formalism the author likes, does not make an implementation not a formalism.<p>And just because it isn&#x27;t describable by the kind of formalism the author likes doesn&#x27;t mean it is &quot;an object of nature&quot;.  It&#x27;s as artificial as can get, and to get to the ground truth you can check the implementation, rather than the specification, as the implementation is the specification.<p>Or you can see how it operates &quot;from the outside&quot;, which is what 99.99% of people will do with the &quot;formally specified&quot; language as well.  Because the fact that there might be a discrepancy with a formal specification is of little to no relevance to somebody creating a program.  What counts is how the machine actually behaves.<p>&gt; What went wrong?<p>What went wrong is that the author&#x27;s answer to &quot;what went wrong&quot; is largely irrelevant to producing useful software.  I.e. if there is some evidence that formally specified languages provide significant practical benefits in that endeavour, I have yet to see them, whether in the field or in research.  (So yes, there may be some conceivable or possibly even measurable benefit, but it&#x27;s not in the top 5 of what makes a language useful)')