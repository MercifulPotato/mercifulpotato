Item(by='avhon1', descendants=None, kids=[25366234], score=None, time=1607549003, title=None, item_type='comment', url=None, parent=25359289, text='The issue is worse with Rust, which is still a young and rapidly-changing language. Debian stable currently packages rustc 1.41.1 (February 2020), which is 11 releases behind the most recent 1.48.0 release. The older compiler&#x27;s differences after 10 months include:<p>* doesn&#x27;t have subslice patterns\n* has `Error::description`, which has since been deprecated\n* doesn&#x27;t have x86 CPU feature detection\n* lacks fix for unsound typecasts between integers and floats\n* lacks fix for incomplete constant propagation\n* doesn&#x27;t let you use conditionals, loops, match, $$, or || in constant fns, or cast arrays to slices in constant fns\n* has less-helpful error messages and backtraces\n* doesn&#x27;t let you implement traits on arrays with lengths &gt;32\n* has worse type inference, this (valid since 1.43.0) code doesn&#x27;t compile because 0.0 and &amp;0.0 are f64s:\n  let n: f32 = 0.0 + &amp;0.0;\n* requires you to import standard libraries to use predefined numeric constants (like MAXINT or NaN)\n* doesn&#x27;t support Control Flow Guard on Windows\n* doesn&#x27;t generate documentation links from classpaths (you have to write relative file paths instead)<p>and numerous libraries being pre-stable.<p>For code that you&#x27;re writing yourself, not having these features is mostly just a quality-of-life issue: you&#x27;ll have to do things that you wouldn&#x27;t have to do if you had the latest compiler. For code that you&#x27;re collaborating on, having an 10-months-older compiler can be a showstopper: the code might just not compile at all, and very likely the only fix will be to uninstall your system-packaged rustc and install the version from rustup.<p>Contrast this with C&#x2F;C++ development, where your system&#x27;s pre-packaged compilers are much more likely to be sufficiently up-to-date. These languages are more mature than Rust: they change slower, and new features are adopted by programmers more gradually. For example, the Linux kernel only requires GCC 4.9 [1], which was released in 2013. Debian stable supplies GCC 8.3, which will probably be able to compile unmodified kernel source code for many years without being updated.<p>[1] <a href="https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;latest&#x2F;process&#x2F;changes.html" rel="nofollow">https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;latest&#x2F;process&#x2F;changes.html</a>')