Item(by='nkurz', descendants=None, kids=None, score=None, time=1610070264, title=None, item_type='comment', url=None, parent=25679152, text='Great comment, and great accurate explanations of complex stuff!  I&#x27;m still going to disagree with the conclusion, though.  Yes, x64 has to jump over horrible hurdles to prevent instruction decode from being a bottleneck.  Yes, this makes for more complex processors, possibly with poorer performance per Watt.  But I&#x27;m asserting (in my reasonably expert opinion) that the ridiculous contortions currently in use are (in almost all cases) adequate to prevent the instruction decoder from being the bottleneck.<p>What&#x27;s missing from your description is the extra level of decoded µop cache between the decoder and instruction queue on modern Intel chips.  In a tight loop, this pre-decoder kicks in and replays the previously decoded µops at up to 6 per cycle.   It&#x27;s a mess (and complicated enough that Intel needed to disable part of it with a microcode update on Skylake) but it provides enough instruction throughput that the real bottleneck is almost always elsewhere.  Specifically, the 4-per-cycle instruction retirement limit almost always maxes out my attempts at extremely tight loop code earlier than instruction decoding.<p>Which is to say, you are right about how much easier it is to decode ARM64 instructions, but I think you are wrong that decoding x64 is in-practice a limiting factor for performance.  If you have a non-contrived example to the contrary, I&#x27;d love to see it.<p>More details here: <a href="https:&#x2F;&#x2F;en.wikichip.org&#x2F;wiki&#x2F;intel&#x2F;microarchitectures&#x2F;skylake_(client)#Fetch_.26_pre-decoding" rel="nofollow">https:&#x2F;&#x2F;en.wikichip.org&#x2F;wiki&#x2F;intel&#x2F;microarchitectures&#x2F;skylak...</a><p>And in this nice blog post: <a href="https:&#x2F;&#x2F;paweldziepak.dev&#x2F;2019&#x2F;06&#x2F;21&#x2F;avoiding-icache-misses&#x2F;" rel="nofollow">https:&#x2F;&#x2F;paweldziepak.dev&#x2F;2019&#x2F;06&#x2F;21&#x2F;avoiding-icache-misses&#x2F;</a>')