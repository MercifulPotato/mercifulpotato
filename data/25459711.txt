Item(by='ryukafalz', descendants=None, kids=[25462021], score=None, time=1608235599, title=None, item_type='comment', url=None, parent=25458080, text='&gt;In &quot;Free software is not enough&quot; &lt;<a href="https:&#x2F;&#x2F;jfred.dreamwidth.org&#x2F;479.html" rel="nofollow">https:&#x2F;&#x2F;jfred.dreamwidth.org&#x2F;479.html</a>&gt;, jfred relies unknowingly on an eerily similar hook as the one from Spitz&#x27;s take.<p>jfred here from that link; thanks for putting together this summary. I&#x27;d seen some of these before (I mentioned the Malleable Systems Collective in the post) but I hadn&#x27;t seen some others, and it&#x27;s nice to see all of these in one place.<p>&gt;Another way to would be to adopt &quot;non-destructive compilation&quot; techniques to bring about a world where &quot;package distribution is source distribution&quot; at least in the interim &lt;<a href="https:&#x2F;&#x2F;wiki.triplescripts.org&#x2F;wiki&#x2F;SDIPD" rel="nofollow">https:&#x2F;&#x2F;wiki.triplescripts.org&#x2F;wiki&#x2F;SDIPD</a>&gt;.<p>GNU Guix does this to some extent. Guix packages are build definitions that refer directly to upstream source URLs rather than source tarballs or binary packages, and while there are typically binary packages available (as long as they&#x27;ve been built on CI, which they aren&#x27;t always - resource constraints, etc) it&#x27;s always possible to build any given package locally with `guix build &lt;package name&gt;`. The ergonomics around trying out modifications of these package definitions locally aren&#x27;t as nice as I&#x27;d like, but it&#x27;s been improving.')