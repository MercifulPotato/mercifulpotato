Item(by='tomxor', descendants=None, kids=[25478461], score=None, time=1608373022, title=None, item_type='comment', url=None, parent=25474874, text='&gt; A 20 character name doesn&#x27;t do any damage if it communicates the correct point.<p>That depends on the context. If the function is the highest level task called infrequently (as in your example), then long highly descriptive names are completely fine.<p>If this occurs at every level, all the way down to the building blocks it absolutely, severely affects legibility of the entire code base - it is literally a multiplier of code size, in the worst case of &quot;all the way down&quot; it&#x27;s some kind of power function.<p>This barely fits on a line:<p><pre><code>  (a leftmultipliedbyright (a leftsubtractedbyright 1)) leftdividedbyright 2\n</code></pre>\nYet it&#x27;s a simple polynomial that should just be a(a-1)&#x2F;2, probably part of a larger expression, now the other parts will end up on other lines (because no one writes 500 char width code), the effect is artificially spreading code thinly - this destroys locality and legibility.<p>You would be right to point out my example is extreme and absurd, however operators <i>are</i> functions, they only use different, implicit syntax. Many intrinsically complex pieces of code must create their own domain specific building blocks at a slightly higher level of abstraction that are much like operators, and this is the place for extremely short function names (think vector libraries), as such a commonly used building block it is unreasonable to expect each reference to fully and explicitly express the functions purpose.<p>As with all of these types of things, there is a balance, I am arguing _for_ balance, not suggesting all names should be single letter or single word - but that they have their place. However in my experience very long names are far more commonly due to thoughtlessness, they include excessive redundant context and at worst even grammatical words.')