Item(by='jnxx', descendants=None, kids=None, score=None, time=1603292642, title=None, item_type='comment', url=None, parent=24848084, text='&gt;  Is there a non-root way to build and a way to install at least some of the packages in my $HOME<p>Yes. You can install Guix as a package manager on top of your POSIX OS. Then, you have profiles, and you can install packages into your personal profile in your $HOME, or into temporary project-specific environments. You can also define the environment by writing a manifest file which list requested packages and their versions, and put that file under version control.<p>How it is used is documented here:<p><a href="https:&#x2F;&#x2F;guix.gnu.org&#x2F;manual&#x2F;en&#x2F;guix.html#Package-Management" rel="nofollow">https:&#x2F;&#x2F;guix.gnu.org&#x2F;manual&#x2F;en&#x2F;guix.html#Package-Management</a><p>&gt; How does it handle python wheels and other non-source language-specific packages?<p>Of course you can install Python packages:<p><a href="https:&#x2F;&#x2F;guix.gnu.org&#x2F;packages&#x2F;P&#x2F;page&#x2F;12&#x2F;" rel="nofollow">https:&#x2F;&#x2F;guix.gnu.org&#x2F;packages&#x2F;P&#x2F;page&#x2F;12&#x2F;</a><p>If there are no pre-built packages for your machine architecture (say, you are developing on ARM), they are built and installed on your machine (or, a build server which you defined), otherwise you get automatically a compiled package from the Guix server. Also, and in difference to pip and so on, any needed C libraries will be installed as well, with the right versions. So, it is a bit like Conda, but it will also work if your project happens to mix, say, Python, C, C++ and Rust, and perhaps runs on mips or armhf. (My next side project will be a Game with a strategy engine in Rust, and a GUI written in Racket, just as an example).<p>I have not yet tried it with Python, but I can confirm it works with Common Lisp libraries. Basically, you can get anything which is FLOSS, and if you need proprietary stuff you might be able it via a non-free package channel (similar to Debian).')