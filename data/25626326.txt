Item(by='loopz', descendants=None, kids=None, score=None, time=1609716728, title=None, item_type='comment', url=None, parent=25623188, text='For me I just use what&#x27;s available and do not go into too much detail beyond what I need. However, slices can be confusing at first, and your above example could help think of them the right way. Although, until you get &quot;bit&quot;, you might not deduct the consequences of slices right away. Especially when accustomed to other languages.<p>The latest thing that made me go &quot;hmm&quot; last time, was this one (I didn&#x27;t get &quot;bit&quot;, just went &quot;hmm&quot; reading it):<p><a href="https:&#x2F;&#x2F;play.golang.org&#x2F;p&#x2F;2bTvXr6WLNN" rel="nofollow">https:&#x2F;&#x2F;play.golang.org&#x2F;p&#x2F;2bTvXr6WLNN</a><p><pre><code>  package main\n  \n  import (\n   &quot;fmt&quot;\n  )\n  \n  func main() {\n   b := []byte{&#x27;g&#x27;, &#x27;o&#x27;, &#x27;l&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27;g&#x27;}\n   fmt.Println(string(b[1:4]))\n   &#x2F;&#x2F; Output:\n   &#x2F;&#x2F; ola\n  }\n</code></pre>\nI&#x27;m sure everyone expected this output when using b[1:4], right? All languages do these things a bit differently, so is why I always forget the detailed syntax required. I&#x27;m sure there&#x27;s a valid pragmatic explanation and there&#x27;s lots of ways to do this (ie. allow negative values etc.). Just a thing that while speedtyping, one could easily miss this little detail.<p>This one is a good intro, but doesn&#x27;t explain this I believe:<p><a href="https:&#x2F;&#x2F;blog.golang.org&#x2F;slices-intro" rel="nofollow">https:&#x2F;&#x2F;blog.golang.org&#x2F;slices-intro</a>')