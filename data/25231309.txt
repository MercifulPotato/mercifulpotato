Item(by='nneonneo', descendants=None, kids=[25232842, 25232794, 25232329, 25232170], score=None, time=1606501568, title=None, item_type='comment', url=None, parent=25230707, text='It looks like gobfuscator just modifies the source code by renaming package and file names to random strings, and adds string encryption. The resulting source code is compiled by the Go compiler as usual, and no further obfuscation is applied.<p>This is fairly weak: Go runtime functions are unobfuscated, and package names are consistently renamed (that is, if &quot;geacon&quot; is renamed to &quot;ammopppfcdmmecpgbkkj&quot; in one function, it&#x27;s renamed that way consistently for all functions). This in turn should make it much easier to deobfuscate by gradually expanding the set of &quot;known&quot; package, class and function names.<p>XOR-encoding of strings is slightly annoying, but since gobfuscator replaces each string with an anonymous function, you could in principle write a simple Unicorn script to emulate each string decoder function, coupled with some heuristics to detect such functions (e.g. just look for functions which have an xor and a single call to runtime_slicebytetostring).<p>Having worked on really &quot;heavily obfuscated&quot; code (flattened control flow, functions implemented in obfuscated VMs, custom incompatible ABI, cryptographic encryption of code, etc.), this gobfuscator looks comparatively easy :)')