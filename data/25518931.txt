Item(by='tharkun__', descendants=None, kids=None, score=None, time=1608739184, title=None, item_type='comment', url=None, parent=25509889, text='Not a real issue at all in my experience. Businesses all over have done this for decades.<p>If you have many many microservices what is the combined resource usage vs. the monolith? Probably about the same and microservices may use more resources actually if we are talking anything with a runtime like Java.<p>Migrations in my experience mean migration of data so its about the volume of the data you need to change and not about the code operating against that data. Whether you have your monolith or a bunch of microservices waiting for the conversion job does not matter. It also does not matter whether your monolith or the microservices have to be able to read the data at any given time. With a quick starting microservice you may be able to say &quot;eff it a transaction might fail but the new service will be up quick and the user can redo it&quot; but that&#x27;s not what you really want in big mission critical workloads. You really want to wait until all transactions on the old nodes finish before shutting them down. So your load balancer will route all traffic to the old nodes until new nodes are up, then shift traffic over and you kill your old nodes when all transactions have finished. Then you deploy those nodes and bring them back in. You have reduced redundancy and less capacity to handle load if we are talking old real iron businesses but in current cloud environments you just start up new instances and literally just kill old nodes after you&#x27;ve let the transactions finish. So you could even deploy during high load times.<p>I&#x27;m not talking hours of deployment here. Monolith doesn&#x27;t mean you have to have all the cruft and startup times that say a jboss server with EJBs. You can have a monolith that starts up in a reasonable amount of time if you make the right choices for how you build your monolith.<p>Post deployment verification is slower why? If you do this manually why does it matter whether your changed customer flows are spread across 6 microservices that you just deployed new versions of or your monolith?<p>Also monolith doesn&#x27;t necessarily mean you only have exactly one service. At my last place we had multiple services for various parts of the overall system but they were all monoliths themselves and shared some code through a library as well. But the services definitely weren&#x27;t micro and did lots of things that weren&#x27;t that related in the end. Could&#x27;ve split it up into many microservices.')