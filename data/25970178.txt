Item(by='dragontamer', descendants=None, kids=[25970358], score=None, time=1612023022, title=None, item_type='comment', url=None, parent=25970149, text='&gt; The advantage of such a model however is that the complexity of this is abstracted away from even the compiler. This makes it a change in the programming model. That&#x27;s why it&#x27;s not _just_ named SIMD.<p>That changes the history of the term SIMT. SIMT was first used for NVidia Tesla in 2006: over a decade older than the incremental changes made between Pascal -&gt; Volta&#x2F;Turing.<p>There has been no name change from Pascal -&gt; Volta&#x2F;Turing, as far as I&#x27;m aware. Furthermore, the PTX is substantially similar. The per-thread instruction pointers is pretty transparent in most code.<p>&gt; The advantage of such a model however is that the complexity of this is abstracted away from even the compiler. This makes it a change in the programming model. That&#x27;s why it&#x27;s not _just_ named SIMD.<p>Have you looked at AMD&#x27;s GPU ISA? Its just jump instructions, extremely similar to NVidia&#x27;s PTX &#x2F; SASS instruction set. AMD SIMD doesn&#x27;t juggle execution masks explicitly either: its handled at a lower level (probably the decoder or something).<p>You still pull the execution mask for things like ballot instructions, but... both AMD and NVidia SIMD are pretty similar. (Similarly, NVidia PTX can still access the execution mask for ballot instructions as well)<p>------------<p>Although, I guess both of those GPUs can laugh at AVX512, where the execution masks are explicitly handled by the assembly programmer. But I don&#x27;t know if explicit execution masks is necessarily a bad thing (its the job of the compiler instead of the decoder or whatever...)<p>&gt; Unlike a vanilla SIMD machine, you can diverge more cheaply when you need to<p>If we take CM2 from 1985 as a &quot;vanilla SIMD machine&quot;, it had execution masks and diverged extremely cheaply, just like modern machines.<p>C-Star and star-Lisp even had a programming model very similar to modern CUDA.<p><a href="http:&#x2F;&#x2F;bitsavers.informatik.uni-stuttgart.de&#x2F;pdf&#x2F;thinkingMachines&#x2F;CM2&#x2F;starLisp_Referenece_Version_5.0_Sep1988.pdf" rel="nofollow">http:&#x2F;&#x2F;bitsavers.informatik.uni-stuttgart.de&#x2F;pdf&#x2F;thinkingMac...</a><p>Back then, you&#x27;d use &quot;when&quot; statements to do a parallel divergent branch, while &quot;if&quot; was only for uniform branches. But it wasn&#x27;t like &quot;when&quot; statements were expensive, they just diverged.')