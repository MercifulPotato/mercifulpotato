Item(by='derefr', descendants=None, kids=None, score=None, time=1609436393, title=None, item_type='comment', url=None, parent=25589829, text='There usually is, though it&#x27;s arbitrary — basically an implementation detail of the emulator which was tuned based on in-practice behavior observation. Input-event messages that haven&#x27;t been integrated into the canonical state after a &quot;long time&quot; must be dropped&#x2F;undone by those who <i>did</i> integrate them, including by the player who originally generated them. In effect, an implicit &quot;anti-event&quot; is generated saying the opposite of the original input-event message, and applied to history by all players who applied the original message.<p>How do players tell if their event managed to become part of the consensus state? Depends on the networking protocol. In a gossip protocol, messages get sent to peers individually, and ACKed by those peers. In an elected-leader client-server protocol, as long as the server peer ACKs the message as &quot;in the queue&quot;, it&#x27;s canonical. In an IRC-like spanning-tree message-relay system†... something complicated involving vector clocks containing message IDs.<p>† I don&#x27;t think I&#x27;ve ever seen an emulator choose a hierarchical message-relay architecture. It makes good robustness+efficiency trade-offs, but it&#x27;s just far too complex to work with compared to the alternatives. It&#x27;s more the domain of MMOs, that need to be concerned with many nodes colocated in one site speaking to many nodes colocated at other sites.')