Item(by='uryga', descendants=None, kids=None, score=None, time=1610381142, title=None, item_type='comment', url=None, parent=25729993, text='&gt; You&#x27;d write code pretending it&#x27;s pure while it really isn&#x27;t.<p>in a way, it&#x27;s the opposite! the point is you can&#x27;t pretend, you have to make impurity painfully explicit:<p><pre><code>  getTradeTax :: CountryId -&gt; CountryId -&gt; IO Float\n  --                                       ^ sirens blaring, side-effect alert\n  getTradeTax ca cb = do\n    aInEu &lt;- lookupEUMemberDB ca\n    bInEu &lt;- lookupEUMemberDB cb\n    if (aInEu &amp;&amp; bInEu)\n      then (pure 15.00)           -- made up value\n      else getNonEUTradeTax ca cb -- another impure operation\n</code></pre>\nthere&#x27;s the &quot;IO&quot; in the signature, and all the do-notation `&lt;-`, ie syntactic sugar for `&gt;&gt;=`, piping the result into a callback. to use the Promise analogy again, `x &lt;- foo` is kinda like `x = await foo` (but more general, bc Monads are cool)<p>&gt; I can see part of the appeal, but I can do that in my current language.<p>true, and i&#x27;ve seen IO-monad-alikes for Python and JS, but most of the benefits come when every library you use has to be explicit about impurity and there&#x27;s a typechecker enforcing it.')