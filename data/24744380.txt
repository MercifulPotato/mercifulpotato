Item(by='nendroid', descendants=None, kids=None, score=None, time=1602403370, title=None, item_type='comment', url=None, parent=24744190, text='Unfortunately for your argument, it actually is completely true.<p>You&#x27;re thinking about it the wrong way, an analogy to english doesn&#x27;t prove your point when the analogy is irrelevant.<p>Sure there&#x27;s advanced vocabulary in English. But within that domain the english is still understandable. If the reader understands the domain he understands what is written and does not need to decipher or decode what is written. The domain expert just reads it and gets it, no deciphering needed.<p>This is not what happens with domain specific code and this is not how domain experts read code therefore your analogy does not apply.<p>Reading code tends to be very very different from reading english and much much slower. Reading is actually an inaccurate term. The reader for code spends much of his time deciphering code and any name that helps elucidate context and eliminate deciphering is a plus. This occurs EVEN for domain specific code.<p>What happens with domain specific code is that a programmer tends to make up abbreviations on the fly and ends up writing something that is not readable at first glance and the reader needs to decipher the code. For example let&#x27;s say I&#x27;m a domain expert in robotics and I want to encode positioning of the robot. For elegance I use this:<p><pre><code>    xPosRelB = 23\n\n    which is short for x position relative to base.\n</code></pre>\nversus<p><pre><code>    meters_west_from_base = 23\n</code></pre>\nI can assure you 95% of programmers write the former rather than the latter and it&#x27;s definitely not for efficiency gains. You might lose like 1 nanosecond of efficiency reading the latter but this only applies if you already know the meaning of xPosRelB, seriously if every single variable was written in the same way as the former you LOSE efficiency from trying to decipher meaning from context.<p>The end result is that in order to figure out what xPosRelB is the reader always has to sort of dig a bit at the context. He has to see how it&#x27;s used, where that variable comes from or in other words he needs to &quot;decipher&quot; it. This is super common in programming but not very common when reading English. Again your analogy does not apply. In short the second name in the example is just read and understood and is by far the better choice.<p>When you ask the average programmer why he wrote xPosRelB rather than meters_west_from_base, he&#x27;ll tell you that meters_from_base is too long and too ugly. Programmers bitch and moan about stuff like this that doesn&#x27;t even matter. I had one guy tell me that you shouldn&#x27;t mix and match camel_case or snakeCase because it just looks bad (there&#x27;s a real reason why people don&#x27;t mix it, and it&#x27;s not aesthetics).<p>If I go meta and bring this topic up and ask the programmer why again.... then he brings up reading efficiency, exactly what you&#x27;re doing here.<p>Readability and structure is what&#x27;s important not aesthetics.  What matters is that someone can read your code rather than decipher it.<p>Length and prettiness contribute nothing to readability and barely dents reading efficiency.<p>Domain targeted programming is stuff like this:<p><pre><code>    gallonsOfCompoundV = 34\n</code></pre>\nCompound V is the domain. There&#x27;s no need to explain what  compound V is in the variable name. This is not a big problem with coding for readability. The big problem and the problem I am addressing is this:<p><pre><code>    compVg = 34\n</code></pre>\nSeriously. Someone once complained to me about the word &quot;Of&quot; in my variable name. My bad, I&#x27;m sorry that added 2 nanoseconds to your reading time with the word &quot;of&quot;.<p>Of course the team may have conventions. For example my team prefixes the letter k to all constants. This stuff is fine and doesn&#x27;t harm readability, but this is not what I&#x27;m talking about.')