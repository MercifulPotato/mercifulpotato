Item(by='babel_', descendants=None, kids=None, score=None, time=1611496013, title=None, item_type='comment', url=None, parent=25890996, text='... It is called &quot;tree&quot;, so if we&#x27;re going by graph theory and typical ADT form then being acyclic is to be expected.<p>While I agree that a checked mode would be useful, and would likely be the best compromise for a &quot;one-off&quot; use, if you&#x27;re preserving the structure like this does, then I feel it&#x27;s quite likely you&#x27;d want to do multiple passes. If so, then pre-processing to ensure that it&#x27;s acyclic would be useful: rather than a checked mode, perhaps an is_acyclic() method, similar to their is_nested(), would be the better compromise? That would allow it to be a nicely optimised function for just that, rather than adding overhead for &quot;nested structures&quot; that are known to be acyclic.<p>Adding is_acyclic() also means you can handle &quot;sanitising&quot; it yourself. I say that because it may be non-trivial depending on what you&#x27;re doing and so not best-handled by an passed-through lambda etc. that may need to modify the structure mid &quot;iteration&quot;, which would be awkward. Also, you&#x27;re then doing it up-front, rather than handling an exception, which may have interrupted side-effects, and then makes it awkward because how do you modify and resume without repeating work &#x2F; side-effects?<p>As to whether it&#x27;s pretty common error or not, we&#x27;d probably need a wider study to see whether this has caused errors -- after all, sometimes cyclic &#x2F; self-referential structures are correct. So I don&#x27;t feel that this is an aggressive compromise, though I do agree that doing something to help with this case (in case of cyclic structures being erroneous) would be the &quot;correct&quot; thing to do.<p>While is_acyclic() seems better to me, a checked mode would be good for one-shot uses of this library, but as this would be pointless overhead on known tree &#x2F; tree-like structures (what I would expect to use personally) then as a kwarg I&#x27;d prefer check_acyclic=False by default... and we&#x27;d likely need multiple cycle detection options, since space&#x2F;time tradeoffs can be important and what&#x27;s optimal will likely vary depending on the actual structure used. Similar options for is_acyclic() would be needed by the same argument, of course.<p>My biggest issue with check_acyclic= would be that it&#x27;s an additional kwarg to almost every single function in the library, which is a bigger change (I feel) than an independent function. Occam&#x27;s razor &#x2F; separation-of-concerns and the like means that I feel the compromise of a checked mode outweighs its benefits, whereas adding is_acyclic() only has the compromise of a new, independent function (and the costs associated with implementing it), and otherwise has the same benefits.')