Item(by='Lammy', descendants=None, kids=None, score=None, time=1606030854, title=None, item_type='comment', url=None, parent=25175184, text='It&#x27;s like a &quot;shadow class&quot; that&#x27;s unique to an instance of something. No written description of this concept ever really &#x27;clicked&#x27; for me, personally, so maybe an example will help. Here&#x27;s a class with a single method `:hello` that will simultaneously increment a counter on its class and on its singleton_class&#x2F;eigenclass&#x2F;metaclass:<p><pre><code>  irb:1* my_class = Class.new do\n  irb:2*   def hello\n  irb:2*     &quot;I&#x27;ve counted #{self.class.instance_variable_set(:@count, (self.class.instance_variable_get(:@count) || 0) + 1)} of #{self.class}… &quot; +\n  irb:2*     &quot;but only #{self.singleton_class.instance_variable_set(:@count, (self.singleton_class.instance_variable_get(:@count) || 0) + 1)} of #{self.singleton_class}!&quot;\n  irb:1*   end\n  irb:0&gt; end\n  irb:0&gt; foo = my_class.new\n  irb:0&gt; bar = my_class.new\n\n</code></pre>\nThen if we send :hello a few times to each instance you can see how it behaves:<p><pre><code>  irb:0&gt; foo.hello\n  =&gt; &quot;I&#x27;ve counted 1 of #&lt;Class:0x0000561efb9d8238&gt;… but only 1 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efbaa8488&gt;&gt;!&quot;\n  irb:0&gt; bar.hello\n  =&gt; &quot;I&#x27;ve counted 2 of #&lt;Class:0x0000561efb9d8238&gt;… but only 1 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efb9d7040&gt;&gt;!&quot;\n\n\n  irb:0&gt; foo.hello\n  =&gt; &quot;I&#x27;ve counted 3 of #&lt;Class:0x0000561efb9d8238&gt;… but only 2 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efbaa8488&gt;&gt;!&quot;\n  irb:0&gt; bar.hello\n  =&gt; &quot;I&#x27;ve counted 4 of #&lt;Class:0x0000561efb9d8238&gt;… but only 2 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efb9d7040&gt;&gt;!&quot;\n\n\n  irb:0&gt; foo.hello\n  =&gt; &quot;I&#x27;ve counted 5 of #&lt;Class:0x0000561efb9d8238&gt;… but only 3 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efbaa8488&gt;&gt;!&quot;\n  irb:0&gt; foo.hello\n  =&gt; &quot;I&#x27;ve counted 6 of #&lt;Class:0x0000561efb9d8238&gt;… but only 4 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efbaa8488&gt;&gt;!&quot;\n  irb:0&gt; foo.hello\n  =&gt; &quot;I&#x27;ve counted 7 of #&lt;Class:0x0000561efb9d8238&gt;… but only 5 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efbaa8488&gt;&gt;!&quot;\n  irb:0&gt; bar.hello\n  =&gt; &quot;I&#x27;ve counted 8 of #&lt;Class:0x0000561efb9d8238&gt;… but only 3 of #&lt;Class:#&lt;#&lt;Class:0x0000561efb9d8238&gt;:0x0000561efb9d7040&gt;&gt;!&quot;\n\n</code></pre>\nFor a real-world example of how this can be useful, I use this pattern in my Jekyll multimedia toolbox to handle the specifics of any certain type of media file (e.g. images, videos, audio, etc). I defined separate Modules for separate media_type handling, a single instance will detect the media_type of its associated file (from the file extension or filemagic), then the instance will differentiate itself by Module#prepend-ing the media_type-specific Module to the instance&#x27;s `singleton_class`. Then the next instance for the next possible-different-type media file has a clean undifferentiated base to start from and the process can repeat: <a href="https:&#x2F;&#x2F;github.com&#x2F;okeeblow&#x2F;DistorteD&#x2F;blob&#x2F;master&#x2F;DistorteD-Core&#x2F;lib&#x2F;distorted&#x2F;invoker.rb#L71~L73" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;okeeblow&#x2F;DistorteD&#x2F;blob&#x2F;master&#x2F;DistorteD-...</a>')