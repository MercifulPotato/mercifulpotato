Item(by='RedShift1', descendants=None, kids=[25344430], score=None, time=1607428938, title=None, item_type='comment', url=None, parent=25343642, text='There appears to be some confusion in the terminology here<p>- database transactions are not meant to prevent the &quot;user A and B are editing object X at the same time&quot;.<p>- Database transactions ensure that when you ask the database to modify X, it either happens in its entirety or it doesn&#x27;t. It&#x27;s not meant to prevent concurrent edits, it&#x27;s meant to keep the data in the database consistent.<p>- CRDT&#x27;s allow user A and B to edit object X concurrently, because it&#x27;s mathematically proven that two instances of the CRDT can be merged later without conflict.<p>You also don&#x27;t need to start locking things yourself if all you want is to prevent user A from overwriting user B&#x27;s changes. Add a column &quot;version&quot; to your table and when the user submits a change, include this version number in the change request. Then upon database UPDATE, check if the version in the DB still matches expectations. If it doesn&#x27;t you reject the UPDATE and you can report back to the user what happened. You could easily apply this logic using triggers which will ensure that no matter the source of the UPDATE statements, it will be a certainty older versions can&#x27;t overwrite newer versions.')