Item(by='adamnew123456', descendants=None, kids=None, score=None, time=1610589293, title=None, item_type='comment', url=None, parent=25768553, text='The Advent of Computing [1] podcast recently put out their episode 47 which I think provides a sort-of explanation of this line of thinking. The short answer is that the context in which Emacs was originally developed (a contemporary of Unix, and not Unix itself, which was something I wasn&#x27;t aware of before) emphasized user power and lack of restriction to a much greater degree than much of the current computing landscape does. Why would you lock users or developers into a fixed, defined plugin API when you could write the application in such a way that they have access to whatever they need?<p>Excluding maybe NodeJS, most of the Javascript you encounter is going to be executed by a browser which has a whole ton of sandboxing and mitigation mechanisms to prevent the big bad web from abusing your computer. I don&#x27;t blame it for working that way given how few trustworthy (I mean really trustworthy, as in &quot;free range within $HOME&quot;) actors exist on the web these days, but one wonders how far we could take the web ecosystem if we tossed the idea of granting special access through WebGL or WebUSB and just gave the browser full access to calling C or executing processes on your system.<p>Don&#x27;t get me wrong - it would be a security nightmare, but there&#x27;s a cost to trying to guarantee security through mechanism rather than trust.<p>[1] <a href="https:&#x2F;&#x2F;adventofcomputing.libsyn.com&#x2F;episode-47-its-open-computing" rel="nofollow">https:&#x2F;&#x2F;adventofcomputing.libsyn.com&#x2F;episode-47-its-open-com...</a>')