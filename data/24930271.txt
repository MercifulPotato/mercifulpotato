Item(by='yunyu', descendants=52, kids=[24931295, 24931353, 24937333, 24930381, 24941084, 24941234, 24935454, 24933747, 24930653, 24939852, 24931869, 24931696, 24931435, 24941021, 24938569, 24931327, 24932669, 24931449, 24937405, 24932416, 24932226, 24932339, 24935393, 24931218, 24937980], score=171, time=1603978413, title='Launch HN: Cohere (YC S20) – Real-time user support for web apps', item_type='story', url=None, parent=None, text='Hey everyone! Yunyu, Rahul, and Jason here. We&#x27;re co-founders of Cohere (<a href="https:&#x2F;&#x2F;cohere.so" rel="nofollow">https:&#x2F;&#x2F;cohere.so</a>), which lets you see what your users are seeing on your web app and remote control their browser with their permission. This requires zero setup on their part, which is particularly helpful for less tech-savvy users.<p>Pointing things out over Zoom screenshare is highly time consuming (&quot;click the 4th checkbox on the right&quot;, &quot;click the handle and drag&quot;), and trying to figure out what users are doing over a live chat or phone call typically leads to endlessly frustrating back-and-forths.<p>When COVID forced all of us into remote work, we found ourselves spending a lot of time in screensharing sessions. We were tired of choppy frame rates and blurry text, and realized that we could get around this by sharing the user’s screen in a different way. Rather than video streaming, which is how it’s usually done, we could send over diffs of their webpage’s DOM representation and reapply those in the viewer’s browser – this is similar to how virtual DOM frameworks like React work.<p>We first used this technique for an earlier project (<a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23363250" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23363250</a>) that rendered React apps on the server (a Node equivalent of Phoenix LiveView). This reduces development complexity for web apps by completely eliminating the need for RPC layers (REST, GraphQL) – for instance, you&#x27;d be able to write to the database directly from your React component and share state across sessions with a single hook. It works by sending DOM updates from the server (e.g. insert a node, change an attribute) in response to input actions sent from the client (e.g. click a button, type a character).<p>This approach uses significantly less bandwidth compared to traditional\nscreen sharing solutions, and gives us a semantic understanding of the webpage (e.g. a button is sent over as a &lt;button &#x2F;&gt;, instead of a blob of bytes). As a result, we can selectively filter out sensitive content and allow viewers to scroll and type on the webpage without any perceived latency.<p>To solve our screen sharing problem, we initially built a Chrome extension that let users browse web pages collaboratively. During YC, we saw that our early adopters were primarily using this tool to walk through their own web apps with their customers, so we decided to refocus the product towards helping companies onboard and support their users.<p>Because we&#x27;re focused on the real time use case, we only record the DOM when a session is being viewed. This means that no data is sent to our servers unless Cohere is actively being used. Additionally, we don’t persist or retain any session data.<p>Thanks for reading our story – we&#x27;d love to get your thoughts, feedback, and ideas!')