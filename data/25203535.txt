Item(by='pdfernhout', descendants=None, kids=None, score=None, time=1606255774, title=None, item_type='comment', url=None, parent=25202607, text='Try using plain ES7+ (with async&#x2F;await) JavaScript with Mithril (for defining components and their behaviors) and Tachyons (for Atomic CSS for styling). I like that combination best after having used Smalltalk and a variety of GUI builders (including Delphi and ones for Smalltalk and NewtonScript) and Angular and React. (TypeScript is OK too for bigger projects where documenting interfaces wins out over speed of development in plain JavaScript...)<p>And having dealt with GUI builders with special formats and coding implication related to objects sending special events, I&#x27;d much rather just write plain code in one language in a text editor than wrestle with a limited WYSIWYG tool.<p>Mithril&#x27;s brilliance is assuming the UI is dirty if you have touched it in some way (mouse click, keystroke, etc.) and always rerendering after the event is handled (except if you want to optimize that). That leads to UI code which is much easier to reason about than arbitrary networks of dependencies like older UI toolkits emphasized. That style of UI development feels a lot more like, say, programming a continually-rerendering video game in for OpenGL than programming a dependency-based UI for VisualWorks&#x2F;NeXTSTEP&#x2F;Delphi&#x2F;VB&#x2F;etc..<p>More on all that by me: <a href="https:&#x2F;&#x2F;github.com&#x2F;pdfernhout&#x2F;choose-mithril" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;pdfernhout&#x2F;choose-mithril</a>\n&quot;tl;dr: Choose Mithril whenever you can for JavaScript UI development because Mithril is overall easier to use, understand, debug, refactor, and maintain than most other JavaScript-based UI systems. That ease of use is due to Mithril&#x27;s design emphasis on appropriate simplicity â€“ including by leveraging the power of JavaScript to define UIs instead of using an adhoc templating system. Mithril helps you focus on the essential complexity of UI development instead of making you struggle with the accidental complexity introduced by problematically-designed tools. Many popular tools emphasize ease-of-use through looking familiar in a few narrow situations instead of emphasizing overall end-to-end simplicity which -- after a short learning curve for Mithril -- leads to greater overall ease-of-use in most situations.&quot;<p>And I say that even having been an official NeXTSTEP developer once upon a time -- after I gave Steve Jobs my business card when I met him after he gave a talk at Princeton and he got me into the developer program (after my paperwork to join that developer program had previously apparently been ignored with its aspiration to build a system where any piece of data could be linked to any other piece of data). Even reading through all the glorious NeXT developer info, I never felt I could afford the NeXT hardware though as much as I wanted it (the short warranty gave me pause too) -- so my career as an independent software developer went in different directions. After reading the article and comments here, I can wish I had just thought to go work for NeXT instead of wanting to be a customer...')