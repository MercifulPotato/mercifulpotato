Item(by='alex-lawrence', descendants=None, kids=None, score=None, time=1608656169, title=None, item_type='comment', url=None, parent=25503834, text='The Aggregate Root must track all Domain Events that occur upon executing an action and make them accessible somehow. Only after the successful persistence of the associated state change (and&#x2F;or the events), they can be published via an Event Bus. The Aggregate itself only expresses that Domain Events occurred, but does not deal with publishing.<p>The article from Udi Dahan shows Domain Event handlers that &quot;will be run on the same thread within the same transaction&quot;. This implementation is not suitable for handlers that affect other transactions. Udi explains that &quot;you should avoid performing any blocking activities, like using SMTP or web services. Instead, prefer using one-way messaging to communicate to something else which does those blocking activities.&quot; What he is referring to as &quot;one-way messaging&quot; is the actual event publishing in my opinion and must guarantee event delivery.<p>In my book, the example implementations store all occurred Domain Events together with the Aggregate state. This is because it resembles the later use of Event Sourcing. There is a separate component that watches for changes in Aggregate data and publishes new Domain Events. After publishing, the events are marked accordingly.<p>Regardless of where newly occurred Domain Events are retained, it should be persistent. Many times, the events are stored in a separate table inside the same store as the affected Aggregate. Later, they are retrieved, published and either marked or deleted. This is called a Transactional Outbox: <a href="https:&#x2F;&#x2F;microservices.io&#x2F;patterns&#x2F;data&#x2F;transactional-outbox.html" rel="nofollow">https:&#x2F;&#x2F;microservices.io&#x2F;patterns&#x2F;data&#x2F;transactional-outbox....</a> The approach ensures that both the Aggregate change and the request to publish an event happen within the same transaction. The actual publishing happens in a separate one. This way, you get guaranteed event delivery or more specifically &quot;at least once&quot; delivery.')