Item(by='csnover', descendants=None, kids=[24845164, 24844351, 24844258], score=None, time=1603232002, title=None, item_type='comment', url=None, parent=24841768, text='&gt; That tweet is a big deal if true.<p>One thing you can independently verify is that the backdoor string is still in their client. The installer starts transmitting data <i>during</i> the installation process, so I would not recommend installing it outside of a VM—just look at the files directly. The macOS installer has it in `Backblaze Installer.app&#x2F;Contents&#x2F;Resources&#x2F;instfiles.zip&#x2F;bztransmit`. The Windows installer is a self-extracting ZIP file, so just use unzip and look in `bztransmit.exe` and `bztransmit64.exe`.<p><pre><code>  $ strings bztransmit |grep BACKDOOR\n  DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file exists: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file could not be read: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file existed but less than 10 chars or could not be read: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file did not contain bz_cvt: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file contained bz_cvt but wrong num digits: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file did not contain bz_upload_url: \n  ERROR DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file contained bz_upload_url but did not start with http: \n  DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml file exists and is valid and bz_cvt=\n  DoHttpPostSyncHostInfo - BACKDOOR_prefer.xml SUCCESSFULLY_swapped_in new_bz_cvt=\n</code></pre>\nWhat does the corresponding code do? I genuinely don’t know. My goal was to find backup software, not to do a security analysis. An easy-to-exploit root code execution vulnerability was enough for me to uninstall the software, submit a report as a professional courtesy, and go do something else.<p>Clearly it’s dumb to put the word BACKDOOR in your code if your goal is to plant a secret backdoor, but it’s also pretty dumb to use world-writable directories, disable host certificate verification, use magic hard-coded strings to “sign” updates, and implement data encryption in a way which requires the ‘private’ password to be sent to the server, so who knows. As I said in the tweet, even if it turns out to be innocuous, the optics are <i>terrible</i> and show a serious lack of good judgement on their part, especially given how much they claim to be security experts who care about their reputation[0].<p>&gt; Were there any follow-ups from Backblaze?<p>No. The only “follow-up”, as it were, was to cancel their HackerOne public bug bounty programme. (Though this was a month ago, their web site still tells people to “visit our public bug bounty program managed through Hacker One”[2].) They have not communicated with me at all except for one tweet about that change[1]. I have seen no public statement from them acknowledging that this happened, or that they made mistakes, or that they have steps they plan to take to improve their internal software development practices.<p>[0] “We stand by our reputation as trustworthy, careful programmers who have worked in the security field for over a decade. […] we have <i>LOTS</i> of interest in keeping our reputations rock solid and utterly clean.” <a href="https:&#x2F;&#x2F;help.backblaze.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;217664798-Security-Question-Round-up-" rel="nofollow">https:&#x2F;&#x2F;help.backblaze.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;217664798-Secur...</a><p>[1] <a href="https:&#x2F;&#x2F;twitter.com&#x2F;backblaze&#x2F;status&#x2F;1308157606368882688" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;backblaze&#x2F;status&#x2F;1308157606368882688</a><p>[2] <a href="https:&#x2F;&#x2F;www.backblaze.com&#x2F;security.html" rel="nofollow">https:&#x2F;&#x2F;www.backblaze.com&#x2F;security.html</a>')