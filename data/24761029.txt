Item(by='petergeoghegan', descendants=None, kids=None, score=None, time=1602548364, title=None, item_type='comment', url=None, parent=24759846, text='I am cautiously optimistic that my own recent work on version churn in B-Tree indexes will go a long way towards fixing those problems:<p><a href="https:&#x2F;&#x2F;postgr.es&#x2F;m&#x2F;CAH2-Wz=CEKFa74EScx_hFVshCOn6AA5T-ajFASTdzipdkLTNQQ@mail.gmail.com" rel="nofollow">https:&#x2F;&#x2F;postgr.es&#x2F;m&#x2F;CAH2-Wz=CEKFa74EScx_hFVshCOn6AA5T-ajFAST...</a><p>This can be used without changing anything in the heap. It&#x27;s less than a thousand lines of C. You could say that it&#x27;s complementary to zheap, actually.<p>zheap makes it possible to update the same row many times without requiring new index entries, even when there is a long running transaction that holds back VACUUM. However, it does not avoid the problem of requiring a whole new set of index entries for all indexes in the event of even one indexed column being modified by updates.<p>Strictly speaking my patch doesn&#x27;t &quot;fix&quot; that problem, either, but it comes pretty close. It teaches the indexes to &quot;fight back&quot; against version churn caused by updates that cannot use the HOT optimization. It makes non-HOT updates responsible for cleaning up their own mess -- no more negative externalities. In practice this seems to more or less fix the exact thing that the Uber blog post complained about, which was the &quot;write amplification&quot; incurred in all indexes when only one indexed column was changed by an update.<p>(I am omitting some subtleties here, but that&#x27;s the general thrust of it.)')