Item(by='mjgs', descendants=None, kids=None, score=None, time=1609674083, title=None, item_type='comment', url=None, parent=25615888, text='I was a render wrangler and sys admin at a vfx shop for a few years, I then moved to a digital intermediate shop. Reading this thread has me remembering fun times.<p>I wrote about my experiences in more detail a couple of months ago:<p><a href="https:&#x2F;&#x2F;blog.markjgsmith.com&#x2F;2020&#x2F;11&#x2F;24&#x2F;what-its-like-working-in-tech-in-the-visual-effects-industry.html" rel="nofollow">https:&#x2F;&#x2F;blog.markjgsmith.com&#x2F;2020&#x2F;11&#x2F;24&#x2F;what-its-like-workin...</a><p>There’s also some render farm setup stuff in my portfolio on the blog if you’re interested.<p>The hardware side of things was incredible. So much expensive kit. There’s a lot of great hardware related comments in the thread, so I won’t go over that.<p>The thing that I found really cool was how all the software systems were setup for so many artists to collaborate. Though we didn’t talk about agile methodologies (it was back in 2003&#x2F;2004), the ways we worked had a lot of similarity to a classic agile &#x2F; scrum setup, with daily standups, though they were called ‘dailies’, and there was no notion of sprints (we were always sprinting!) or sprint planning, but similar planning was done by producers and department heads, instead of user stories &#x2F; features, people worked on ‘shots’. At the digital intermediate place the unit of work tended to be reels since we were scanning and printing entire reels, combining all the shots that the vfx houses completed.<p>Everyone used version control, though it was subversion, I don’t think git was that popular back then. Artists worked on their shots, checking in their project files rather than rendered files, we could always re-render a shot if necessary. There were also cli tools to submit finished rendered files, which were automatically organised into a standard folder structure on shared storage. The artists Linux shells would load environment variables from a dB, and their applications (Shake&#x2F;Maya&#x2F;Houdini etc) would load these transparently, so they never had to worry about where things were stored. That was all automatic as long as they knew which shot they were working on.<p>It was a great place to learn about technology and collaborating on digital production at scale.<p>I’ve always thought there were a lot of setups and tools that could be applied to software development at scale. I’d love to work on that sort of project. Hint: I am available for hire :)')