Item(by='CivBase', descendants=None, kids=[24983396, 24984382, 24983493], score=None, time=1604432294, title=None, item_type='comment', url=None, parent=24980263, text='This article seems to fundamentally misunderstand why the testing pyramid is a pyramid in the first place.  You shouldn&#x27;t have more unit tests because they&#x27;re easier to write.  You should have more unit tests because they&#x27;re easier to maintain.  By definition, they focus on a small part of the software and should not break if an unrelated part of the software changes.<p>Of course, just because each individual part of a machine works, it doesn&#x27;t mean the machine itself works.  That&#x27;s where integration tests come in.  Turns out it&#x27;s usually fairly easy to make sure all the parts work together once you&#x27;ve verified all of the parts individually, so you usually need fewer integration tests.<p>Once you&#x27;ve verified all the parts work <i>and</i> that they work together correctly, now all you need to do is make sure you actually made the right thing.  Enter functional tests and E2E tests.  These are usually especially costly to maintain, but they&#x27;re also so high-level that you usually need very few of them.<p>Writing tests is easy, but they&#x27;re only useful if you run them.  It&#x27;s not enough for a test to work when you write it - it has to continue working into the future.  Maintenance is a recurring cost and, in my experience, is where automated testing can get really expensive.  The testing pyramid helps minimize that cost.<p>In an ideal world, you would maximize testing at every level - but in the real world that&#x27;s often just too expensive.')