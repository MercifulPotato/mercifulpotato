Item(by='pmeunier', descendants=None, kids=[25248618], score=None, time=1606685040, title=None, item_type='comment', url=None, parent=25247981, text='&gt; Then adding &quot;Fix&quot; to another channel will automatically pull in the &quot;dependent change&quot; &quot;pre_Foo&quot; as well, if applicable? Or is a separate &quot;new_Fix&quot; created?<p>I&#x27;m not 100% certain of which is which in your sentence, but if Fix and Fox are in conflict (maybe Fix is Alice&#x27;s fix, and Fox is Bob&#x27;s), and they are both pushed to the same channel, we need to solve the conflict. We do that by creating a change, called &quot;Resol&quot;.<p>Now, if you push Fix to another channel (that doesn&#x27;t have Fox), that doesn&#x27;t necessarily pull in Fox and Resol. If you push Fix and Fox, you&#x27;ll get the exact same conflict. But instead of solving it again, you can simply push Resol, and the conflict will be solved.<p>&gt; Can a link between two changes be created manually, even though the delta does not require it? E.g. to attach an empty commit, if these are even possible in Pijul (compare git&#x27;s &quot;--allow-empty&quot;). Or, more reasonably, to record logical dependencies which do not show up in the code, such a separate changes for testing vs. the code itself.<p>Absolutely, the syntax for that is, when presented with a change draft when running `pijul record`, add a line of the following form:<p>[] BQDE4VH6OZHULHAOP37GSBJMCI5QIFSOU6COBYKPAY6FPH3IMISAC<p>To the dependencies section (that is, empty square brackets, a space, and the hash of the change you want to add to the dependencies).<p>We can even imagine adding dependencies automatically with external tools via record-time hooks, taking the specific programming language into account.')