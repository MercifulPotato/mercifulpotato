Item(by='olvy0', descendants=None, kids=[25006820, 25006628], score=None, time=1604651029, title=None, item_type='comment', url=None, parent=25004554, text='I wrote an internal tool which is similar but for a more complicated use-case: synchronizing an hierarchical database into an hierarchy of json files, in a git repo, which are then automatically or manually committed by the user.<p>Our internal database is deeply hierarchical and also has a concept of a &quot;folder&quot; record, which users can create and nest. Users have complained for years that there was no change tracking.  I surveyed some of the tools mentioned here (and other commercial ones) but they all just flattened the database into json or XML or just raw sql files, which made it very difficult for users to see the changes.<p>We also thought about getting rid of the database and running off of json files, but that would have required completely rewriting our already brittle internal ORM, which uses raw SQL in too many places for performance, and would have been a breaking change.  I have a heavy dislike for rewriting or throwing away whole modules, and also dislike breaking changes, having been personally bitten by them many times in the past.  And due to other constraints on my team this was unacceptable.  It&#x27;s still on the table, just not for now.<p>Instead I wrote a layer which translates back and forth between the ORM (or the raw database) and the json files in the file system.  This is an addon to the application and is written in such a way that is mostly transparent to the users.  Each change to a record in the database is translated into the correct json file on disk.  Users can commit and push at their leisure.  Users can also switch branches &#x2F; reset to an earlier version, and request the database to be updated from the json files.<p>I had thought many times about open sourcing the basic part of this addon.  But I was never sure how common this use-case is.  Also, it&#x27;s actually pretty trivial to write the base part.  The hard parts were gluing it to the existing application&#x2F;ORM, and working around the many edge cases and bugs in our existing application.<p>So, I wonder, how common is this use case (version control of an existing hierarchical SQL database in a user friendly way) in other organizations?')