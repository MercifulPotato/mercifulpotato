Item(by='rokob', descendants=None, kids=[25342693], score=None, time=1607406097, title=None, item_type='comment', url=None, parent=25341590, text='Yes Dart has generics which is how you would implement optional types yourself. The type of type system doesn&#x27;t play a role here you are right. I was thinking of the really good pattern matching I have experienced usually being present with structural subtyping.<p>Dart is considering adding pattern matching (and real tuples!) and I think they will eventually get there. I just think that would have had to come first to make the case of optionals over nullable types more compelling.<p>I would call that example destructing in the normal sense and it is basically a form of pattern matching. To do that in an imperative language without pattern matching (i.e. what I am calling imperative destructuring), you end up with code like<p><pre><code>  if (maybeFoo.isSome) {\n    final foo = maybeFoo.asValue;\n    ...\n  }\n</code></pre>\nwhen you really want<p><pre><code>  if let Some(foo) = maybeFoo {...}</code></pre>')