Item(by='jfrisby', descendants=None, kids=[25598448], score=None, time=1609451986, title=None, item_type='comment', url=None, parent=25594285, text='Well, for starters, it&#x27;s simply untrue that every company (likely) will (barring bankruptcy of course) eventually need extreme scale, and the implicit assumption that the up-front cost of implementing such scalability is necessarily worthwhile.  That may be true in Staruplandia, but the industry is a _lot_ bigger than the world of Silicon Valley style startups.<p>For example: My current company is a small lifestyle biz.  Sure, it&#x27;s a &quot;tech company&quot;, has an event-processing pipeline and the like, but if we were 100x more successful than our wildest ambitions, we still wouldn&#x27;t need anywhere near 25.6k IDs&#x2F;sec&#x2F;server.  And, given the objectives of the company, it would make more sense to turn customers away than to grow the team to accommodate that sort of demand.<p>The simple fact is that in a great many situations extreme scale isn&#x27;t needed.  And, either way, the cost of implementing extreme scalability can inflict its own harm.  Highly scalable systems usually come with more operational complexity, and steeper learning curves.  When you have a small team, this can impair -- or even cripple -- product development.  If your company hasn&#x27;t found product&#x2F;market fit yet, this attitude of sacrificing the present for an imagined future can materially reduce the likelihood of that future coming to pass.  Of course, the opposite is sometimes true as well.  Companies have, in fact, failed because they found product market fit but took so many shortcuts they couldn&#x27;t adapt and grow into their success.  But the point is that determining how much to invest in future-proofing is a complex and nuanced problem not amenable to sweeping generalizations.<p>Now, this clearly isn&#x27;t such an extreme case, but frankly Sonyflake (the original, not the Rust implementation) seems to be operationally simpler than Snowflake while offering perfectly reasonable tradeoffs.  The Rust implementation might prove entirely useful to any number of organizations _based on their needs_.  If they have a Rust codebase with a single process per machine this could easily be a simpler and more robust option than Sonyflake.<p>The kind of arrogant dismissiveness based on one&#x27;s own personal (and highly specialized) experience that&#x27;s shown in the downvoted comment tends to leave a bad taste in peoples&#x27; mouths.  Thus the downvoting.')