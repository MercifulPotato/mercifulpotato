Item(by='calpaterson', descendants=None, kids=[25650576, 25649521, 25647221], score=None, time=1609862982, title=None, item_type='comment', url=None, parent=25645041, text='A few months ago I wrote an article testing out the relative speed of Python&#x27;s async options for web apis&#x2F;sites (<a href="https:&#x2F;&#x2F;calpaterson.com&#x2F;async-python-is-not-faster.html" rel="nofollow">https:&#x2F;&#x2F;calpaterson.com&#x2F;async-python-is-not-faster.html</a>).<p>My findings were a bit controversial at the time as I found that uWSGI + sync Python is about the best option, largely because replacing interpreted Python code with native code is a very significant factor in the performance of a Python program.<p>In the following discussion (and private emails) I was stunned by the number of async enthusiasts who proposed raising the number of database connections in the connection pool by two or three <i>orders of magnitude</i> (I had 20 conns in a pool for a 4 cpu machine) for reasons along the lines of &quot;the async app is starved of connections&quot;.<p>In my opinion that suggestion betrays a misunderstanding of what is likely going on in the database when you have 100s or 1000s of connections all contending for the same data: in SQL even reads create locks.  Async applications yield <i>a lot</i>, by design, and under hundreds or thousands of requests per second there is a considerable buildup of &quot;work in progress&quot; in the form of async tasks that were yielded from and which have not yet been returned to and completed.  Many hundreds of database connections is going to create an enormous volume of bookkeeping on the database side and is very likely to slow things down to a absolute crawl.<p>Even idle connections are known to have detrimental effect in postgres.  Someone at Microsoft is apparently working on this and released this great blog post quantifying the problem:<p><a href="https:&#x2F;&#x2F;techcommunity.microsoft.com&#x2F;t5&#x2F;azure-database-for-postgresql&#x2F;analyzing-the-limits-of-connection-scalability-in-postgres&#x2F;ba-p&#x2F;1757266" rel="nofollow">https:&#x2F;&#x2F;techcommunity.microsoft.com&#x2F;t5&#x2F;azure-database-for-po...</a>')