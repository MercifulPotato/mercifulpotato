Item(by='donmcronald', descendants=None, kids=None, score=None, time=1608367079, title=None, item_type='comment', url=None, parent=25475878, text='Yeah.  Java is pretty solid as a language &#x2F; platform IMO.  I gave up on it when Oracle fumbled the ball with JavaFX, but I agree a lot of the criticisms aren&#x27;t really issues.<p>The one that gets me is the microservices.  I&#x27;ve never really understood it.  I can build a Java project with a bunch of small, composable modules and things like refactoring across the entire codebase are trivial.  There&#x27;s no rule saying you can&#x27;t put your (ex) auth API in a separate module and bundle it independently at build time, right?<p>Or, if you want to use the same module in multiple projects, formalize the versioning and bundle it as a library.<p>I think the thing that drives microservices adoption is that it&#x27;s easy to start out without any planning or API design.  You just yeet some code out, publish the REST &quot;API&quot; via Swagger, and call it a &quot;service&quot;.  There&#x27;s no versioning, no clear rules, etc..  All of that becomes tomorrow&#x27;s problem.<p>Then, since you don&#x27;t have proper API versioning or anything, you start to end up with things like mono-repos to ensure your &quot;API&quot; changes aren&#x27;t going to break anyone relying on your &quot;service&quot;.<p>Seriously.  Microservices in mono-repos.  It&#x27;s like a bad joke.')