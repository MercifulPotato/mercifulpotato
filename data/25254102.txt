Item(by='ibraheemdev', descendants=None, kids=[25254652, 25257492, 25255990, 25256453, 25254490], score=None, time=1606746985, title=None, item_type='comment', url=None, parent=25253525, text='&gt; working with async Rust is not as simple as writing regular Rust code<p>Working with async Rust is very simple if you are not writing futures yourself. Tokio and async-std provide api&#x27;s that mirror std except for the fact that you have to add `.await` to the end of the operation and add the `async` keyword to your function. With proc-macros, `async main` is just a matter of adding a small annotation to the top of the function. Async functions in traits are blocked due to compiler limitations, but `async-trait` makes it easy. What part of async Rust is more complicated than synchronous Rust?<p>&gt; and it just doesn&#x27;t provide you the same features as Elixir Processes do.<p>Can you explain this? How is tokio&#x27;s `task` different then elixir processes? From the tokio docs:<p>&gt; Another name for this general pattern is green threads. If you are familiar with Go&#x27;s goroutines, Kotlin&#x27;s coroutines, or Erlang&#x27;s processes, you can think of Tokio&#x27;s tasks as something similar.')