Item(by='maerF0x0', descendants=None, kids=[25893584], score=None, time=1611507351, title=None, item_type='comment', url=None, parent=25880414, text='<p><pre><code>    Performance. This is an I&#x2F;O-bound process; the main influence in performance\n    is the buffer size: the tool reads a chunk from the source, writes the chunk\n    to the destination, repeats. If the chunk is too small, the computer spends \n    its time switching between tasks. If the chunk is too large, the read and \n    write operations can&#x27;t be parallelized. The optimal chunk size on a PC is \n    typically around a few megabytes but this is obviously very dependent on the \n    OS, on the hardware, and on what else the computer is doing. I made benchmarks\n    for hard disk to hard disk copies a while ago, on Linux, which showed that\n    for copies within the same disk, dd with a large buffer size has the advantage,\n    but for cross-disk copies, cat won over any dd buffer size.\n</code></pre>\nAs a meta comment, it has been a shocking revelation in my career that the difference between &quot;get it work&quot; engineers and &quot;make it right, make it fast&quot;[3] has been this kind of low level knowledge. At least in my context, the majority of the bugs that have come up in the past while haven&#x27;t been because someone didn&#x27;t know how to concatenate 2 strings or even that many off by 1 errors. They have been things like not knowing the difference between theoretical TCP models and how their actually implemented on the OS in a high throughput environment (see TIME_WAIT[1] if you&#x27;re curious), or understanding misorder of operations in distributed computing[2].<p>[1]: <a href="https:&#x2F;&#x2F;9oelm.github.io&#x2F;2018-05-06--Listening,-Established,-Close_wait-and-Time_wait-in-netstat&#x2F;" rel="nofollow">https:&#x2F;&#x2F;9oelm.github.io&#x2F;2018-05-06--Listening,-Established,-...</a><p>[2]: <a href="http:&#x2F;&#x2F;book.mixu.net&#x2F;distsys&#x2F;" rel="nofollow">http:&#x2F;&#x2F;book.mixu.net&#x2F;distsys&#x2F;</a><p>[3]: <a href="https:&#x2F;&#x2F;wiki.c2.com&#x2F;?MakeItWorkMakeItRightMakeItFast" rel="nofollow">https:&#x2F;&#x2F;wiki.c2.com&#x2F;?MakeItWorkMakeItRightMakeItFast</a>')