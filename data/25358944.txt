Item(by='jlokier', descendants=None, kids=None, score=None, time=1607525086, title=None, item_type='comment', url=None, parent=25358723, text='If you&#x27;re going to send data speculatively by keying on IP address, why not key on long-term user-id cookie instead?  That is more accurate and potentially more secure, and for many people the cookie changes less often than their ephemeral IP address anyway.<p>But if the client data is small enough, that wouldn&#x27;t actually reduce the latency to speed up the page load, if these assumptions hold:<p>- Getting the decryption key is subject to an authorisation round trip; current data fetch is subject to the same round trip; and the client data is small so sending it takes about the same time as sending the key.<p>But the round trip can be brought to a minimum by not requiring a large page full of HTML&#x2F;CSS&#x2F;JS to be send on auth - just requiring the client data (or key as you suggested).<p>All the parts which don&#x27;t depend on client data can be preloaded asynchronously after the login page is shown, including a template for the page ready to be populated when client data is received.<p>So:<p>- Make the login page as fast as possible, using inlined data etc. like any static page.  Make the page cacheable, probably validated with an Etag.  The remembered &quot;your name&quot; field can be populated, that&#x27;s fine even if it&#x27;s cached because the browser cache (&quot;Cache-Control:private&quot;) is unique to the user.<p>- Have the login page preload all non-client-data dependent resources for the next page asynchronously, but ensure these don&#x27;t start fetching until all resources for the login page itself have finished being fetched.<p>- When password is entered, perform auth and get client data in a single round trip, combine with the templates just loaded to load the new page.<p>- Use 0-RTT TLS for everything.<p>Each interaction will be about as fast as possible while validating with the server, but you can go further if you&#x27;re ok with relaxing that:<p>- Make the first page load &quot;instant&quot; by changing the cache policy to validate after a timeout instead of just on Etag.<p>- Asynchronously preload all the resources for the authenticated next page except the client data.<p>- Make the authenticated next page &quot;instant&quot; by detecting when the user appears to have paused typing in the password field (or immediately without pause if it&#x27;s refilled by a password manager or user paste into it), and before they hit enter or click submit, send speculative auth requests which return client data if they succeed, but don&#x27;t treat the user as properly authorised until they do enter&#x2F;submit.  When they do, use the preloaded client data if it&#x27;s already arrived (and the password field hasn&#x27;t changed), and also send an auth-confirm request.')