Item(by='necovek', descendants=None, kids=None, score=None, time=1603930243, title=None, item_type='comment', url=None, parent=24917816, text='Oh sure, there&#x27;s always going to be some friction!  So let me go on a tangent here.<p>While the current education system is geared toward procedural programming for the most part (I imagine mostly theoretical computer science curriculums only focus on functional programming and lambda calculus too, but even then, only very late and very theoretical), the question is more of whether it is a better approach when applied &quot;universally&quot; (with non-functional languages, it&#x27;s unlikely to be really pure)?<p>If deemed that it is, functional proponents like me (and you, it sounds like) should push for it to get a better coverage in Universities than eg. OOP, even for OOP languages.  Most academia is out of the software industry, so should we educate them or not?  And how best to do that if the answer is yes?<p>I do have a worry that some of it is also incomprehensible to some people, or that the barrier to entry is higher.  Is such purity more reserved for those that also like mathematical abstractions?<p>Now, the biggest problem I have with colleagues reviewing my code is that it seems too-simple, and they would have introduced another 2 layers of indirection&#x2F;abstraction, but they can&#x27;t really say that anything is wrong with my approach.  It&#x27;s really hard to get them to jump out of their &quot;OOP bubble&quot;.<p>The code is easy to maintain, but there is a big risk that someone will pop in and just turn it into one big side-effect mess that will be hard to maintain. But then again, that&#x27;s what they would have done anyway, this has at least some chance of not becoming that :)')