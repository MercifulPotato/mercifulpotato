Item(by='bcherny', descendants=None, kids=None, score=None, time=1611773336, title=None, item_type='comment', url=None, parent=25931768, text='Author here.<p>Data fetching, caching, consistency, and UX are all closely related. If you treat them as separate problems, you&#x27;re punting the problem onto product engineers, who won&#x27;t solve it well. (See the last paragraph of the post, which suggests this same idea.)<p>&gt; That is state management, yeah, and you can build proper state management with any HTTP library and any message serialisation format.<p>You&#x27;re right that to do this <i>manually</i> it&#x27;s just state management. But to <i>automatically</i> update the UI, it means your client data layer (eg. Apollo) needs to know &amp; track the identity of fields; the data layer also needs to be able to subscribe to fetches anywhere in your app, not local fetches; it also means your protocol needs to support this identity (via agreed-upon ID fields); etc. These problems are all closely related.<p>&gt; Request batching: How would that happen &quot;automatically&quot;? By waiting to fire requests and then batching them?<p>eg. Relay does this by statically combining requests throughout a React tree into a single request at the top of the tree. You could also do it dynamically, as you suggest. The tradeoff is often performance.<p>&gt; UX when fetching data<p>Having engineers manually define loading states doesn&#x27;t scale. React is approaching this problem with Suspense, and you could imagine standard loading states when fetches are in flight.')