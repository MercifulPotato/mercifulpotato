Item(by='Geminidog', descendants=None, kids=[25689875], score=None, time=1610132320, title=None, item_type='comment', url=None, parent=25688148, text='&gt;Teaching programming with imperative constructs first encourages imperative thinking. Teaching programming with computational concepts encourages computational thinking<p>Imperative thinking is computational. All forms of thinking are computational by definition.<p>&gt; Expressions are fundamentally easier to reason about, and there’s no reason they would be more difficult to a beginner.<p>What does expressions have to do with anything. Recursion can be both defined in an expression and as an imperative jump instruction. The concept is orthogonal to expressions.<p>&gt;I’d even say that people usually have a good grasp on recursion even if they don’t know that’s what it’s called. Multiplication is just recursive addition. Exponents are just recursive multiplication. And so on.<p>But people don&#x27;t think of multiplication this way. The teacher doesn&#x27;t teach multiplication to you in terms of recursion she literally teaches you it with the &quot;times&quot; keyword. What&#x27;s 5 * 6? Add 5 to 5, 6 times.<p>It has bearing on language. Nobody outside of programming&#x2F;mathematics communicates concepts recursively. Our communication is a reflection of how we think naturally. Recursion takes training. Looping is just learning syntax for a concept we already know about: repetition.')