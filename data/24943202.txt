Item(by='Yoric', descendants=None, kids=None, score=None, time=1604071423, title=None, item_type='comment', url=None, parent=24941996, text='First, I want to clarify that I&#x27;m not advocating Rust for all use cases. It just happens so that Rust is pretty well matched for the kind of things I generally need.<p>Now, Haskell or (modern) Java or C# are good languages, too, and they&#x27;re by far not the only ones.<p>If you wish examples of the kind of features I need:<p>1. I pretty systematically need to juggle with many threads;\n2. I very often need to juggle with many processes, with non-trivial interactions (i.e. actual protocols);\n3. I very often need to access the OS;\n4. I pretty systematically need to juggle with sophisticated data structures and algorithms (think graph matching algorithms, or dynamic trees of dependencies between ongoing tasks);\n5. I regularly need to handle distributed applications in which pieces interact through non-trivial protocols;\n6. I pretty systematically need to ensure that the event loop remains responsive.\n7. Whenever I interact with the rest of the world (either the OS or as a web client or server), I want to be sure of which piece of data is sanitized and which isn&#x27;t.<p>Of course, every single of these task can be achieved in any language. It just happens so that:<p>1. Rust has the best support for threads that I know in an industrial language.\n2. and 5. Rust&#x27;s type system is the best I know to express protocols among industrial languages. I hear that Ada&#x27;s type system is just as good, but I don&#x27;t know Ada, so I cannot compare. I hear that Haskell&#x27;s type system is currently being extended with linear types, so I&#x27;ll need to test-drive that, too.\n3. While there are other languages that are at similar level as Rust for such things, I don&#x27;t know anyone that is strictly better.\n4. and 7. Any language with a strong, static type system is good here, including Rust and all your examples.\n6. Great support for coroutines is really useful. Many languages have it these days, including Rust.<p>Once again, to clarify, I&#x27;m not trying to convince everyone to switch to Rust. I&#x27;m just answering the assertion that the <i>only</i> reason to use Rust is performance. That&#x27;s certainly not the case for me.')