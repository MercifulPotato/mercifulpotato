Item(by='BatteryMountain', descendants=None, kids=None, score=None, time=1605097196, title=None, item_type='comment', url=None, parent=25057578, text='I&#x27;d say the IStockService with 15 methods and 10 dependencies are not a .net thing but rather &lt;enterprizey-domain-driven-design-all-the-things-coolaid&gt; thing. I&#x27;ve seen it in more than one shop and it totally makes sense why it comes into being.<p>DI just hides the problem because such a class is now only 500 lines long instead of 2000 lines, so for some people that is acceptable (not for me though). You don&#x27;t see any lifecycle code in your classes anymore since the DI container manages it for them.<p>Remember it is typical to see a business project with 300 classes&#x2F;tables if the project is about 5 years old and never seen a major refactor&#x2F;rewrite, and each of those classes gets manipulated in some form from an orchestration point (xManager class or xService class), which in turn might depend on each other or have 10 inner dependencies. To keep things &quot;simple&quot; most guys would just add another method to an existing service where it seems to make the most sense.<p>I argue against that cause the services become heavier and heavier over time and can do allll sorts of things after 5 years (aka IStockService can now check stock, send email notification, generate invoice, save pdf to disk etc). So I&#x27;ve come to the conclusion its better to have more folders&#x2F;files to contain handlers, and each handler only has one Execute&#x2F;Process method, and it&#x27;s constructor declaring only the minimum amount of dependencies to do it&#x27;s work. It also encourages ALL your services to do only one thing: you know and can trust that IPdfDiskPersistor only does one thing and doesn&#x27;t have other weird side effects (like trying to send an email).<p>If all this is really not clean enough, then maybe an ActorModel framework like Orleans Framework might be better suited, but I haven&#x27;t been able to convince anyone at work to use it instead of DDD (they are slightly at odds with each other).<p>Hope that answers some of your questions. If other are reading this, please think twice before you go down the DDD path - it is expensive both in code and time and can easily spiral into a monster (but also well worth it if a <i>good</i> developer have stewardship of it in the long term - keyword being <i>stewardship</i>). Unfortunately teams with high turnover is basically doomed to have a messy&#x2F;failed project.')