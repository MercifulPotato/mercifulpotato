Item(by='simias', descendants=None, kids=[24959119, 24959471, 24959338, 24963749], score=None, time=1604233425, title=None, item_type='comment', url=None, parent=24958423, text='I enjoyed reading this a lot, I keep seeing RISC-V being touted as a potential replacement for ARM but I had yet to read a good critique of the ISA by people who know what they&#x27;re talking about.<p>This point I didn&#x27;t quite understand:<p>&gt;Highly unconstrained extensibility. While this is a goal of RISC-V, it is also a recipe for a fragmented, incompatible ecosystem and will have to be managed with extreme care.<p>Most successful ISAs (including ARM) have their share of extensions, coprocessors, optional opcodes etc... ARM has the various Thumb encodings, Jazelle, VFP, NEON and more. Toolchains and embedded developers are used to dealing with optional features of computers, I&#x27;m not sure why RISC-V would fare worse here.<p>Beyond that I notice that many of the ascribed weaknesses are shared with other RISC ISAs like MIPS (but not ARM):<p>- No condition codes<p>- Less powerful, simpler instructions that require more opcodes to do the same thing but can potentially run faster.<p>- No MOV instruction<p>- The &quot;unconstrained extensibility&quot; is arguably a thing on MIPS too, with the four coprocessors that can be used to implement all sorts of custom logic.<p>Of course ARM has been more successful than MIPS, so maybe it&#x27;s a sign that those things are indeed bad idea but given that this comes from an ARM dev I wonder if part of it is not just &quot;that&#x27;s now how ARM does it&quot;.<p>On the other hand I must say that I was surprised that RISC-V made multiplication optional, in this day and age it seems like such a useful instructions that it&#x27;s well worth the die area. Optional DIV I can understand, but an ISA without MUL? That&#x27;s rough, even for small microcontroller-type scenarios.')