Item(by='throwaway_pdp09', descendants=None, kids=None, score=None, time=1604090760, title=None, item_type='comment', url=None, parent=24946158, text='I was unclear I&#x27;m afraid, I was elaborating on your comment about lisp allocating madly, so lisp and not programs in general.<p>Moving to a stack costs, in that you can&#x27;t do some things, per my original comment. You gain efficiency for what you can do though.<p>&gt; used a stack to parse expressions and generate machine code for them<p>Prob this <a href="https:&#x2F;&#x2F;html.duckduckgo.com&#x2F;html?q=dijkstra%20shunting%20yard%20algorithm" rel="nofollow">https:&#x2F;&#x2F;html.duckduckgo.com&#x2F;html?q=dijkstra%20shunting%20yar...</a> which I thought came from dijkstra but your digging suggests not, didn&#x27;t know! (edit: it did <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shunting-yard_algorithm" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shunting-yard_algorithm</a>)  infix -&gt; rpn which matches a stack very well (can evaluate as an interpreter, or emit code as a compiler. Not very efficient but it works).<p>Edit: much credit for digging and reading before posting, wish I could give you several upvotes for that.')