Item(by='PeterCorless', descendants=None, kids=[25866991], score=None, time=1611269430, title=None, item_type='comment', url=None, parent=25863222, text='&gt; This strikes me as odd. In my experience, traditional OLTP row stores are I&#x2F;O bound due to contention (locking and latching). Does anyone have an explanation for this?<p>Yes. My CTO, Avi Kivity did a great talk about this at Core C++ 2019: <a href="https:&#x2F;&#x2F;www.scylladb.com&#x2F;2020&#x2F;03&#x2F;26&#x2F;avi-kivity-at-core-c-2019&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.scylladb.com&#x2F;2020&#x2F;03&#x2F;26&#x2F;avi-kivity-at-core-c-201...</a><p>Let me boil it down to a few points; some beyond Avi&#x27;s talk:<p>• Traditional RDBMS with strong consistency and ACID guarantees are always going to exhibit delays. That&#x27;s what you want them for. Slow, but solid.<p>• Even many NoSQL databases written (supposedly) for High Availability still use highly synchronous mechanisms internally.<p>• You need to think about a multi-processor, multi-core server <i>as its own network</i> internally. You need to consider rewriting everything with the fundamental consideration of async processing, even within the same node. Scylla uses C++ futures&#x2F;promises, shared-nothing shard-per-core architecture, as well as new async methods like io_uring.<p>• Between nodes, you also have to consider highly async mechanisms. For example, the tunable eventual consistency model you&#x27;d find in Cassandra or Scylla. While we also support Paxos for LWT, if you need strong linearizability, read-before-write conditional updates, that comes at a cost. Many classes of transactions will treat that as overkill.<p>• And yes, backups are also a huge issue for those sorts of data volumes. Scylla, for example, has implemented different priority classes for certain types of activities. It handles all the scheduling between OLTP transactions as highest priority, while allowing the system to plug away at, say, backups or repairs.<p>More on where we&#x27;re going with all this is written in a blog about our new Project Circe:<p><a href="https:&#x2F;&#x2F;www.scylladb.com&#x2F;2021&#x2F;01&#x2F;12&#x2F;making-scylla-a-monstrous-database-introducing-project-circe&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.scylladb.com&#x2F;2021&#x2F;01&#x2F;12&#x2F;making-scylla-a-monstrou...</a><p>But the main point is that you have to really think about how to re-architect your software to take advantage of huge multi-processor machines. If you invest in all this hardware, but your software is limiting your utility of it, you&#x27;re not getting the full bang you spent your buck on.')