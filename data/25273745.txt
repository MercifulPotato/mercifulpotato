Item(by='reificator', descendants=None, kids=[25284839, 25275081], score=None, time=1606890066, title=None, item_type='comment', url=None, parent=25272611, text='&gt; <i>If your primary operation is inserting at a random location in the list, linked lists are faster than arrays at large sizes. You avoid having to move all the memory after the index you are modifying (to make space for the inserted element).</i><p>This is false.  Big O notation says it should be true, you&#x27;ll get marked wrong if you say arrays are faster in your algorithms &amp; data structures final, but when you&#x27;re running on actual hardware the array is faster at all sizes of n and as n becomes larger so does the gap in performance.<p>Here is a talk[0] by Bjarne Stroustrop (Creator of C++) that even includes imaginary graphs demonstrating this phenomenon.  If you want a visual for what the missing graph was supposed to look like, here&#x27;s a similar one.[1]<p>Here&#x27;s another video[2] by Scott Meyers (Author of Effective C++) that goes into more detail about why this happens.<p>[0]: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YQs6IC-vgmo" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YQs6IC-vgmo</a>\n[1]: <a href="https:&#x2F;&#x2F;airspeedvelocity.files.wordpress.com&#x2F;2015&#x2F;08&#x2F;pasted_image_8_2_15__1_17_pm.png" rel="nofollow">https:&#x2F;&#x2F;airspeedvelocity.files.wordpress.com&#x2F;2015&#x2F;08&#x2F;pasted_...</a>\n[2]: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WDIkqP4JbkE" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WDIkqP4JbkE</a>')