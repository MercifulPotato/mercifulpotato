Item(by='c-smile', descendants=None, kids=[25930569], score=None, time=1611765662, title=None, item_type='comment', url=None, parent=25929943, text='&gt; Applications, especially desktop applications, are nothing like that. Seperations of concerns gains you very little there.<p>I think you are making critical mistake here.<p>IAccessible &amp; Co. (<a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;oleacc&#x2F;nn-oleacc-iaccessible" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;oleacc&#x2F;nn...</a>) maps nearly directly onto HTML DOM tree. So no matter what CSS you have there your UI will accessible.<p>The thing is that accessibility works acceptable only on <i>semantic</i> DOM trees. HTML and its DOM was designed with that in mind. Flutter&#x27;s DOM is not, it is not semantic - it is a Dart code that defines visual structure for particular screen layout.<p>Mobile applications are significantly less demanding (more simple in UI terms) - they have very reduced set of components and layouts. Essentially all mobile UIs are built with &lt;radio&gt;,&lt;checkbox&gt;,&lt;button&gt; and &lt;list&gt; vocabulary.<p>The reason is simple: most of the time mobile apps are serving &quot;reading user&quot; role. While desktop is the place for &quot;writing user&quot;s (a.k.a &quot;content generation&quot; role). Desktop is the place where you must support different editing, object manipulation paradigms - UI on desktop is more rich. Just check apps on your mobile - 90% of them are very close UI-wise.')