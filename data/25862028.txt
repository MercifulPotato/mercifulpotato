Item(by='ProfHewitt', descendants=None, kids=None, score=None, time=1611252707, title=None, item_type='comment', url=None, parent=25836398, text='State machines are incompatible with concurrent systems.  For example there is no nondeterministic state machine for the following program:<p><pre><code>   IndeterminateLargeNumber:[]→Natural ≡\n       []↦\n          aCounting←Counting.[], &#x2F;&#x2F; Bind aCounting to a newly created Counting\n          aCounting.go|||  &#x2F;&#x2F; Send aCounting a go message while concurrently\n          aCounting.stop   &#x2F;&#x2F; sending aCounting a stop message\n\n    Counting:[ ]→Interface go→Void, stop→Natural \n       ≡ []  ↦↦   &#x2F;&#x2F; constructor has no arguments \n          count:=0,   &#x2F;&#x2F; The variable count is initially 0\n          continue:=False|  &#x2F;&#x2F; The variable continue is initially False\n          go ↦      &#x2F;&#x2F; When a go message is received: \n            continue cases   &#x2F;&#x2F; Cases for continue are as follows:\n                     True then  &#x2F;&#x2F; If continue is True,  \n                        count:=count+1;         &#x2F;&#x2F; then increment count and afterward\n                        Hole (This Counting).go      &#x2F;&#x2F; in a hole in the region of mutual exclusion,  send a go message this instance of Counting\n                     else Void     &#x2F;&#x2F; If continue is False, then return Void\n          stop ↦    &#x2F;&#x2F; When a stop message is received:\n              continue:=False;       &#x2F;&#x2F; Assign continue the value False and then\n              count     &#x2F;&#x2F; return the value of count\n</code></pre>\nSee the following for an explanation:<p><a href="https:&#x2F;&#x2F;papers.ssrn.com&#x2F;abstract=3459566" rel="nofollow">https:&#x2F;&#x2F;papers.ssrn.com&#x2F;abstract=3459566</a>')