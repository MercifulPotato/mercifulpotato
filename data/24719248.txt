Item(by='dragonwriter', descendants=None, kids=None, score=None, time=1602166549, title=None, item_type='comment', url=None, parent=24716344, text='&gt; The law specifically protects programs as a form of literary work.<p>No, it doesn&#x27;t (it&#x27;s true that it implicitly does so with limitations on the protection that can be applied to them later than where it specifies what is protected, but it does not explictly include them in the list of what is protected, or explictly define them as “literary works” which are explicitly protected.) Computer programs (whether source code or otherwise) are processes. They aren&#x27;t literary works describing processes. It&#x27;s easy enough to see this is true.<p>If you change the expression of a literary work but not the process it describes, if someone is executing the process based on the new description as part of a larger set of processes, there is no impact—the process itself is unaffected.<p>If you change the supposed “expression” of a piece of computer source code, say by changing the names used for functions and arguments either that it calls or that it defines, and then compile it with other software it normally links with, it either breaks or creates object code that behaves differently at runtime. There is no “literary expression” that is not part of the process code describes, whether it relates to the compile time process the code describes, the link time process, or the runtime process. Code is pure process, and not only is process not explicitly protected it is explicitly <i>not</i> protected by copyright.<p>&gt; API declarations constitute expression of an idea which has many ways to be expressed.<p>No, they are a concrete embodiment of a process (well, a set of potentially compile time, link time, runtime, and maybe other processes), and any change alters the process embodied materially. That&#x27;s even more obviously the case with API definitions than it is with code generally, since the whole use of API declarations is to formally, mechanically define the functionality of the interface between separate pieces of code.')