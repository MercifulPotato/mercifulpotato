Item(by='yakubin', descendants=None, kids=None, score=None, time=1609838129, title=None, item_type='comment', url=None, parent=25638718, text='In my experience, it&#x27;s not about being line-oriented. It&#x27;s about being punctuation heavy or not. Lisp, except parens, for the most part doesn&#x27;t have all that much punctuation (quotes and commas are rare). Now let&#x27;s take this program in C++:<p><pre><code>  #include &lt;iostream&gt;\n  \n  int main() {\n      std::cout &lt;&lt; &quot;hello, world!&quot; &lt;&lt; std::endl;\n  }\n</code></pre>\nIf my cursor is after &quot;main&quot;, then M-f will move my cursor to after &quot;std&quot;. It completely ignored &quot;()&quot; and &quot;{&quot;. Another M-f moves my cursor to after &quot;cout&quot;. Here it ignored &quot;::&quot;. Another M-f moves the cursor to after &quot;hello&quot; (&quot;&lt;&lt;&quot; and the quote-mark ignored), another to after &quot;world&quot;, and another to after &quot;std&quot; (quote-mark and &quot;::&quot; ignored) etc. It behaves similarly when hitting C-Backspace, where sometimes half a line disappears suddenly, because it was punctuation-heavy. I think once I stumbled upon code where it deleted several lines. On the other hand, when I have a variable like &quot;big_number&quot;, then Emacs will happily jump into the middle of it. Even though it&#x27;s an indivisible token in the eyes of the language&#x27;s lexer. Of course there is a well-known hack of adding the &quot;_&quot; character to be recognised as a &quot;word character&quot;. But it doesn&#x27;t solve the issue really. The issue is that forward-word uses just one set of word-characters, instead of several sets of characters&#x2F;regexes for different syntactic categories, which would enable jumping first to &quot;cout&quot; and then to &quot;&lt;&lt;&quot;.')