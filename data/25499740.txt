Item(by='3bodyProblem', descendants=None, kids=None, score=None, time=1608585799, title=None, item_type='comment', url=None, parent=25498079, text='I don&#x27;t really see what this article nails. So, if I understand the argument correctly. Microservices were used to increase development speed. While old pieces were left behind (legacy) new systems have come up to modernize (these are still microservices)? His team, now responsible for many, legacy unloved old microservices, are being merged back into a monolith. The real question is, is remerging all the code back into 1 application the right solution for their problems they had with stability.<p>I think mental models are important, and having a huge blob of unrelated roles, makes sense to the current development team. But won&#x27;t, just like the old situation, to the new developers.<p>Perhaps it&#x27;s just the clickbait article, but a better title would have been. &quot;Homogenizing our wild-west legacy microservices&quot;.<p>For me personally microservices was a god send, working on getting stuff done, instead of dealing with ancient code that doesn&#x27;t reflect the current business anymore.<p>I still buy in the thought of, if you can&#x27;t develop a great monolith, you sure won&#x27;t be great at building microservices. \nmodular-monolith is the cool thing currently. Create a Monolith, without the shortcuts that create problems in the long run. Public interfaces are your most valuable pieces in the system. Worship them, code-review them, fight about them. Currently I could care less about the implementation itself. Does it solve our problems, is it fast enough, is it tested great, ship it. What language you used, architecture. database, I don&#x27;t care. Just make sure it&#x27;s a joy to use from the outside.<p>If more developers would spend longer on thinking about the problems and less with throwing large amount of code that makes them feel smart. Making a microservice doesn&#x27;t fix that problem.<p>Think that what is missing is the stability that microservice are able to give in its most optimal form. Each service being the main source, the second it leaves the system it is stale reference data. Is stability important? use the old reference data, how fresh does your data really needs to be.')