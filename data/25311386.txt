Item(by='hardwaresofton', descendants=None, kids=None, score=None, time=1607138281, title=None, item_type='comment', url=None, parent=25299727, text='&gt; I was really surprised at how well Timescales compression worked. It was pretty much comparable to best in class columnstores. Only the row-by-row query execution engine was holding it back. Perhaps something that future versions of postgres can help with.<p>I think zedstore[0] might be something that could help here.  I&#x27;ve mentioned it in the past but one of the best things about postgres is it&#x27;s extensibility, and if timescale rides that wave (and maybe contacts zedstore to get this integration started early) it could be awesome.<p>[0]: <a href="https:&#x2F;&#x2F;blogs.vmware.com&#x2F;opensource&#x2F;2020&#x2F;07&#x2F;14&#x2F;zedstore-compressed-columnar-storage-for-postgres&#x2F;" rel="nofollow">https:&#x2F;&#x2F;blogs.vmware.com&#x2F;opensource&#x2F;2020&#x2F;07&#x2F;14&#x2F;zedstore-comp...</a><p>&gt; Didn&#x27;t look into Druid in detail, but did try out Hive. Both of them look more suitable for cases where there is significant engineering effort in developing the data ingest and structuring pipeline. I wouldn&#x27;t recommend either to a small team. With a measly triple digit TB database size both seemed overkill.<p>Thanks for this -- I haven&#x27;t tried it yet at all but will try to remember this. ClickHouse was already first on my list for hobbyist-&gt;enterprise scalability but this cements it.')