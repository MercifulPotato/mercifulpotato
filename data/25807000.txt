Item(by='tikhonj', descendants=None, kids=[25807176], score=None, time=1610844253, title=None, item_type='comment', url=None, parent=25806672, text='I think this works, but only in cases where two things are true:<p>- the team is <i>actually</i> responsible for the date—often, there&#x27;s massive asymmetric pressure to aim for less time\n - if it&#x27;s an actual deadline, the team has the autonomy to adjust scope to hit it<p>In my experience, the worst situations happen when <i>estimates</i> are treated like <i>deadlines</i>. An estimate <i>has to have uncertainty</i>. Without some way to manage uncertainty, you&#x27;d have to pad estimates out to like the 99th percentile to hit them consistently, but people read estimates as averages and push back against that. If teams are consistently going over estimates, it&#x27;s a problem in how you do estimates, not how you&#x27;re working. (Which is also why evaluating people&#x27;s performance based on how well they hit estimates—which seems common on a lot of teams—is completely misguided. Estimating is a nice skill to have, but it matters far, far less than the quality of the work people actually do!)<p>On the other hand, a deadline is only a deadline if you&#x27;re willing to adjust scope to hit it. If there is a <i>real</i> deadline and it looks like we might not hit it, the answer isn&#x27;t &quot;try to be more productive&quot; (which is all that &quot;work harder&quot; actually means!). Instead, we should figure out how we can change what we&#x27;re focusing on and what we&#x27;re concretely building in order to still hit the underlying goal as well as possible with the time remaining. If we&#x27;re working towards an estimate rather than a deadline, we might still adjust scope and focus, but the first step would be adjusting and sharing a new estimate.<p>But if the culture is that estimates are hard commitments and you can&#x27;t adjust the scope <i>or</i> the timeline, the work environment is going to be absolutely miserable, people will get stressed out for no real reason and the quality of the work is going to suffer. People will do whatever it takes to technically achieve estimates, even if that means cutting corners everywhere, sweeping bugs under the carpet, not spending any time to iterate or improve on the system and indefinitely putting off engineering work that has a small cost now but gives a massive medium- to long-term benefit in productivity. A month or two into this process and you move towards a death march that burns everyone out and, on the time scale of months, accomplishes <i>substantially</i> less than a less aggressive approach would have.<p>I&#x27;m currently working with a team that has this problem to <i>some</i> extent—of course, the managers think of it as &quot;accountability&quot; and &quot;a focus on delivery&quot;—and in a bit over a year, they&#x27;ve built a codebase that already feels like a legacy mess, while accomplishing what would have been like eight months&#x27; worth of work with a better engineering approach. It&#x27;s pretty frustrating to see and I&#x27;m trying to change things, but not sure whether I&#x27;m going about it effectively.')