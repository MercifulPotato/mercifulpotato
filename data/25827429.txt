Item(by='weff_', descendants=None, kids=None, score=None, time=1611008673, title=None, item_type='comment', url=None, parent=25827080, text='&gt;All of these seem like very reasonable justifications to rethink the way we build software, to change what&#x27;s standard practice or to invent new tools that solve old problems in a modern context. To some degree the clock on when our industry starts accumulating stable knowledge won&#x27;t start ticking until these kinds of changes stop happening.<p>But we already have stable knowledge that&#x27;s simply not considered valuable. Your list of changes over the decades is of course a change but I don&#x27;t understand why the attitude is &quot;unless things stay stable over the next 30 years, there&#x27;s no point in trying&quot;.<p>All those SOLID, agile, TDD, DDD, micro-services memes that are being implemented so superficially and cargo-cultishly are actually grounded in a real understanding that has a context, constraints, and trade-offs. The issue is that superficial and cargo-cult application. &quot;Software engineers&quot; that decide they&#x27;re going to do micro-services without understanding what it solves, how it solves it and what they&#x27;re trading off. And a business that doesn&#x27;t care or know enough to ask for better. Maybe they don&#x27;t need better! Maybe it&#x27;s ok to slap together and the product will be equally mediocre whether the devs use cargo-cult pattern X or not. Maybe the quality doesn&#x27;t matter that much to the business. In which case the devs being hired also don&#x27;t need to actually know that much software engineering. In which case maybe the idea of electrical engineer vs electrician makes sense here too.')