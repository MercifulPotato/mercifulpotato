Item(by='pfalcon', descendants=None, kids=[25622907], score=None, time=1609691628, title=None, item_type='comment', url=None, parent=25622481, text='&gt; Its implicitness is zero -- there is zero information not available in the syntax of the current block<p>Ah, so your mind&#x27;s window is single block, that what you bang on. You know, blocks can be long too. To the end of reading 1000-line block, you think that you know how it ends. But oops, you completely forgot about some &quot;defer&quot;, which implicitly executes at the end of block. That&#x27;s my definition of &quot;true explicitness&quot;, where all code which executes at some point is available <i>locally</i>.<p>And if you forgo that definition of explicitness, why stop at block? Exceptions work across blocks, i.e. on the level of the entire subroutine, and not much harder to reason about than &quot;defer&quot;.<p>&gt; In fact, the third clause in C&#x27;s `for` header works almost exactly like defer<p>Good point. It&#x27;s a clause in &quot;for&quot;, so best practice is to use it for &quot;loop iteration expression&quot;. It&#x27;s also familiar syntax to the entire generation<i></i>s<i></i> of programmers. Unlike Zig&#x27;s &quot;2nd clause in while&quot; which is &quot;original design&quot; people will &quot;thank&quot; you for.<p>&gt; it could be replaced almost everywhere.<p>The question is with what. IMHO, Zig isn&#x27;t good enough to replace C at all. Too much NIH, again. It does <i>too much</i> differently. Naive thinking is of course &quot;so that it&#x27;s better&quot;, but actually, it just repeats C&#x27;s mistakes (ugliness in language) and makes its own, &quot;very original&quot; ones.')