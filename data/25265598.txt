Item(by='amw-zero', descendants=None, kids=None, score=None, time=1606834007, title=None, item_type='comment', url=None, parent=25264667, text='I&#x27;m glad you asked this!<p>I generally give these business systems the name of &quot;interactive information systems.&quot; That&#x27;s exactly primarily what I work on as well (and I imagine what most people work on, but not all of course).<p>Maybe counterintuitively, this kind of system is what brought me to math. I kept hearing things like &quot;oh this is just a CRUD app&quot; and it&#x27;s a solved problem - yet we were opening 50 bug tickets per week (and that&#x27;s not an exaggeration, we have a large application, and we measure our bug intake and report on it every sprint).<p>So the first place where math can help with this is at the source - the data! I know not everyone is using a relational database, but the relational model of data is firmly based on math. Learning more about set theory explicitly has improved my interactions with our relational DB immensely.<p>In my experience, I was taught data access through ORMs. Honestly, the relational model is so much simpler and more elegant. I read somewhere that Edgar Codd used to express relational queries using only predicate logic notation, and I imagine that that would be so much simpler than SQL, and certainly more simpler than bloated ORM code.<p>On the query front, we like to treat the database as an implementation detail, but I find that this is not practical. Practically, lots of domain logic has to live in queries. I have had 2 bugs recently where a query itself was not returning the right data. Improving my formal reasoning via sets and predicate logic has improved my querying immensely.')