Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1609780456, title=None, item_type='comment', url=None, parent=25634208, text='You don&#x27;t connect (necessarily) the REPL to production. The code can be stateful code if you&#x27;re not careless. Just like you oughtn&#x27;t log into the production database server and write&#x2F;update&#x2F;delete data entries directly.<p>This is about the development phase more than the production phase. Do something like this (directly in the REPL or in a buffer as mikelevin has described doing elsewhere):<p><pre><code>  (defparamater *db* (connect-to-test-db))\n  (query-db *db* (make-query some-query-description))\n  ;; see that it pulls out the desired record\n  (let ((record (query-db *db* (make-query sqd)))\n    (update-record record)\n    (write-to-db *db* record)) ;; update the entry\n  ;; rerun the query above to see that things changed as expected\n  ;; rewrite that let as a defun:\n  (defun make-update-to-some-record (sqd db)\n    (let ((record ...))\n      ...))\n   ;; test that it works\n   (make-update-to-some-record sqd *db*)\n   ;; see that it does in fact do the same as the let above.\n   ;; move that to a permanent source file, and build it\n   ;; into the system.\n   ;; move tests into test file.\n   ;; repeat with next feature&#x2F;task\n</code></pre>\nThe functions run in the REPL are stateful, but we aren&#x27;t careless about what they&#x27;re touching.<p>NB: You <i>can</i> connect to production environments. You can even connect to live, production lisp images. This could be useful for: profiling real-world activity, debugging real-world problems, applying hot-fixes. But especially that last one should be done carefully, and ought to have been validated using a test environment first.')