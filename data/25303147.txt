Item(by='ragnese', descendants=None, kids=[25303496], score=None, time=1607095060, title=None, item_type='comment', url=None, parent=25302451, text='&gt; Syntactic coroutines, on the other hand, were something to avoid.<p>Could you articulate or point me to some of the arguments or thoughts that lead to the conclusion here? I know and understand the term &quot;colored functions&quot;, but I&#x27;d love to read a real analysis of the pros and cons of colored functions, because I personally go back and forth on whether I think they are bad or good. On the one hand, having a function that is explicitly marked as &quot;this thing needs to be treated specially because it may block for a long time&quot; is actually kind of nice. On the other hand, it&#x27;s hard to write generic functions&#x2F;tools when you have to handle different colored closures, for example. Also on that hand is the fact that I can still write a function as the &quot;wrong color&quot; if I&#x27;m inept.<p>Or was that decision based on something other than language semantics?<p>&gt; There are certainly languages we consider serious competitors, but Kotlin is still an order of magnitude in size away from being one of them.<p>Just out of curiosity, what are those languages? C#? PHP?<p>Also, this statement makes you sound like Goliath. I don&#x27;t disagree with you that Kotlin, in particular, is probably not a huge &quot;threat&quot; to Java. But you&#x27;re slinging numbers like a politician or a PR person: &quot;Kotlin, which has reached ~2-4% on the Java Platform, and might even reach 5-7% some day&quot;. Java has 25 years of legacy- are you seriously saying that picking up 5% of JVM code in &lt; 10 years from the HOST LANGUAGE OF THE PLATFORM is not a little unnerving? Also, do you only care about the JVM? What if everyone switch from Java to C#? Would you still brag that &quot;90% of code on the JVM is Java&quot; even if 0 new projects started choosing Java? I mean, those are unlikely events, but I&#x27;m just saying &quot;there&#x27;s lies, damn lies, and statistics&quot;.<p>The truth is that until pretty recently, Java was really lagging behind and many devs were cursing their fate that they were still working on Java projects. Java 8 was a huge leap forward, and Java 15 is another sizeable leap. So I suspect that Java will stop the bleeding. But it was not at all guaranteed to stay a behemoth, IMO.<p>&gt; Nope. First of all, Kotlin doesn&#x27;t have records. Kotlin-like data classes were something we looked at (we look at all languages) and said, we don&#x27;t want that, we want records. Second, the inspiration for records was ML. So records are actually yet another example where we decided not to go in the same direction as Kotlin. This isn&#x27;t to say Kotlin did something worse or better, but it did do something decidedly different.<p>I haven&#x27;t used them yet, but I think that records look better than Kotlin&#x27;s data classes. But the only difference I see is that they don&#x27;t auto-generate a `copy()` method, like Kotlin&#x27;s data classes do. I believe that was a big mistake on Kotlin&#x27;s part. Is there some other way that Java records are different than data classes? Because if that&#x27;s the only difference, it sounds really disingenuous to suggest that records are not inspired by data classes. Like, what are the odds that it took until 201x for you (all) to decide to copy records from ML? You certainly didn&#x27;t do it <i>before</i> Kotlin for some reason.')