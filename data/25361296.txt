Item(by='lambda_obrien', descendants=None, kids=None, score=None, time=1607535862, title=None, item_type='comment', url=None, parent=25355715, text='Yup, when I do programming, I imagine the data inputs to be some &quot;shape&quot; and, in my mind, that shape transforms as I apply operations to it, like `filter`, `map`, `take N`, etc. I just visualize what I want the data to do, then start modifying it.<p>Another set of analogies I use is that the data, to me, is like clay or a block of wood, and I&#x27;m either forming or carving it depending on the context. For example, if I am doing some calculation where I take several bits of data and combine them to get a result then I&#x27;ll imagine &quot;forming&quot; the data like clay in my mind as I apply mathematical operations to it like `*` or `sin`. If I&#x27;m doing stream operations in some &quot;rules engine&quot; where I need to sort through the data, rather than a straightforward equation like the former example, then I imagine &quot;carving&quot; the data like wood with  `filter` or `reduce`.<p>I also get a &quot;feeling&quot; when I look at code or architecture as to better ways to do it, I don&#x27;t have evidence at the time to support my feeling, but later on they are often correct.<p>Also, I don&#x27;t break things down into tasks as such, but I do start a project&#x2F;task by commenting with TODO at high level and then drill down, much like a functional programmer would do so. For example, if I&#x27;m writing a tool to count the number of lines in a file, I would start with something like:<p><pre><code>    # TODO: initialize the program\n\n    # TODO: load the file\n\n    # TODO: count the lines\n\n    # TODO: output the count\n\n    # TODO: finalize the program\n</code></pre>\nThen, as I go along, I add the more-specific steps to replace the &quot;load the file&quot; (or I just remove the TODO prefix and it acts as a organizational sectioning comment), and eventually I&#x27;ll start taking those comments and turning them into code&#x2F;functions when they&#x27;re sufficiently atomic. I kind of imagine this as a combination of clay and wood, I&#x27;m building up the comments like clay, but also sort of &quot;carving&quot; the raw comments into code (the block of wood is an empty file, and I&#x27;m carving it bit by bit into the form it will eventually become: a file that compiles into a program that does what it should).')