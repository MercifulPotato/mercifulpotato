Item(by='hardwaresofton', descendants=None, kids=[24849658], score=None, time=1603295960, title=None, item_type='comment', url=None, parent=24834117, text='Always impressed to see what Netflix comes up with -- you almost always know you&#x27;ve had a good idea if it overlaps with what Netflix has built internally.<p>In my case though, I think people are going about mostly wrongly -- my ideal observability tool is:<p>- structured logs as the source of truth. Metrics and tracing are actually just special cases of any normal log stream. For applications it doesn&#x27;t get much simpler than log-to-stdout&#x2F;stderr, and the log shipping tools we have today can pick out&#x2F;filter and bucket the metrics&#x2F;traces&#x2F;regular logs that come through (or do it on a node-local collector). You don&#x27;t even have to necessarily trace context very well if you know that the logs from <i>roughly</i> 1-5 seconds are likely relevant and you can filter for signal (warnings&#x2F;errors&#x2F;etc) there.<p>- all-in-one but pluggable with reasonable defaults, for easy administration (because you don&#x27;t really care how team X does their observability, you just want your own little instance with your own data in it)<p>- federated (rather than worrying about scaling one mega large service, why not run little ones that can move queries to data and come back?)<p>- Histograms, because distribution&#x2F;bucketing is the fastest way to solve a lot of these problems<p>- schema driven (ex. sprinkle in some JSONLD)<p>- standardized RED&#x2F;USE for <i>everything</i> (so your load balancer, network card, CPU, as low&#x2F;high as you dare&#x2F;care to go vertically)<p>To bring all these &quot;features&quot; together, I think the UX you&#x27;d put on top of that is incident driven and focused -- context is what matters for solving non-obvious problems, and getting the <i>right</i> context as quickly as possible <i>usually</i> has to do with distance-to-incident. In addition to this, the real next-level goal is to never have an un-analyzed&#x2F;tagged incident, and soon you can start recognizing (via simple rules, at least) problems and suggesting solutions, or identifying problematic commits before they land (in your infra-as-code repo, or your code-as-code repos).')