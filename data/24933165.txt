Item(by='mfreed', descendants=None, kids=[24933629], score=None, time=1603994112, title=None, item_type='comment', url=None, parent=24933011, text='Thanks for all the questions @eloff!  I might try to separate responses for hopefully some threading :)<p>The software in our architecture is actually unified:  You spin up K instances of TimescaleDB, log into one of them and then call &quot;add_data_node&quot; to attach others and data nodes, and &quot;create_distributed_hypertable&quot; to make this node the access node _for that particular hypertable_.<p>In fact, you can explicitly specify different data nodes as the &quot;backend&quot; for different distributed hypertables, e.g., same access node, but data nodes {A, B} for distributed hypertable 1; data nodes {C, D, E, F} are for distributed hypertable 2.  You could also have different nodes play the role of access nodes for different hypertables and vice-versa.  Lots of flexibility here, although we imagine most users won&#x27;t need it, so by default your distributed hypertable is created across all connected data nodes.<p>Now, because these nodes are just running TimescaleDB, if you were to create a regular table or even a regular (non-distributed) hypertable on that access node, it would be just stored locally.  Then, any JOIN between the distributed hypertable data and regular table happens transparently on the access node.<p>Now, that&#x27;s what in the current release, but not surprisingly, we plan to add support for better local JOINs.  For regular tables, one approach will likely be to provide an option to replicate the table on all data nodes, so that you can perform the JOINs locally (and because TimescaleDB 2.0 already supports 2PC for individual rows across data nodes to support replication factors &gt; 1, that machinery somewhat already exists). A second approach for regular tables that are also partitioned -- particularly if using the same &quot;space&quot; partitioning key as your distributed hypertable -- is to collocate partitions of the regular table across the data nodes, so that JOINs on the space partition keys (e.g., server_id, user_id, etc.) can again be local.')