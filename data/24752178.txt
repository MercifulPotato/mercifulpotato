Item(by='tomduncalf', descendants=None, kids=None, score=None, time=1602487366, title=None, item_type='comment', url=None, parent=24750904, text='Yep, totally agree about the docs and tutorials promoting bad practices, it’s almost impossible to find up to date, modern examples.<p>I am not a game dev, more app&#x2F;audio&#x2F;web, but our app uses Unity for the 3D and interactive video lesson playback parts and recently I’ve been refactoring the video part, which is a perfect candidate for building out with unit and integration tests. It took a lot of digging to work out how to use the Unity unit test stuff effectively as there are really just a few toy examples out there, same with async&#x2F;await (and the unit test runner still cannot handle async&#x2F;await in tests!).<p>I guess maybe it’s a culture thing to some extent, unit testing maybe isn’t as prevalent in games for whatever reason? Once I worked out, as you say, that I could move most of the logic into plain C# classes and test them much the same way I would any old business logic, things became much easier to deal with.<p>I did think about using DI but in the end found that passing GameObjects in via the IDE and public members as the other comment says sufficed for anything which is a GameObject, and the other (plain class) dependencies I am new’ing up in a top level Manager class and passing down through the constructor, and using NSubstitute to pass in mocks in the unit tests.<p>I might write up my experience&#x2F;findings some time when the work is complete.<p>On the whole, I do think Unity is great, I’ve seen how fast we were able to build out a great looking experience and it’s pretty easy to figure out. C# is a really nice language too. Just a shame that more “modern” dev practices are not actively promoted, and parts like async&#x2F;await and unit testing seem to be left half-finished.')