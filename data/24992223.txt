Item(by='brundolf', descendants=None, kids=[24993330, 24992537], score=None, time=1604518129, title=None, item_type='comment', url=None, parent=24992157, text='&gt; It turns out that the vast majority of Rust code is just fine using Arc and letting the reference counts handle your memory management.<p>There are disadvantages to Rc&#x2F;Arc compared with GC, though:<p>- They tend to be less performant<p>- Reference cycles can leak<p>- In languages where they exist at a library level instead of a language level, they&#x27;re much less ergonomic than GC<p>So if your core problem domain involves creating and disposing of lots of heap-allocated stuff all the time, you&#x27;re probably better off just using a language with a proper GC. The Rust version may not even <i>perform</i> better if you&#x27;re just using Arc, everywhere, by default.<p>Use Rust when your core domain&#x2F;hot paths can mostly stick to the single-ownership model (and ideally the stack). Rc&#x2F;Arc&#x2F;RefCell are a band-aid for when that fails.')