Item(by='dolni', descendants=None, kids=None, score=None, time=1607530184, title=None, item_type='comment', url=None, parent=25354780, text='&gt; But then you need to make up a deployment system with rollbacks and all the other stuff k8s gives you.<p>This is borderline trivial. If you build an AMI, you update a launch template with the new AMI and use instance refresh (<a href="https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;compute&#x2F;introducing-instance-refresh-for-ec2-auto-scaling&#x2F;" rel="nofollow">https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;compute&#x2F;introducing-instance-re...</a>) to replace instances. Rolling back is the same thing, you just set it back to the previous AMI. Instance refresh took way too long to become a thing, but it was not even very difficult before that. List instances in your autoscaling group, mark them unhealthy one by one.<p>Now, you&#x27;ll probably want a couple other safety checks in your deployment process to make sure it all goes smoothly. But you&#x27;re realistically looking at what, a couple of days of work to have something built to your specifications that can deploy any of your services without introducing the added complexity of Kubernetes?<p>&gt; I&#x27;ve got the feeling that if you&#x27;re reasonably comfortable with k8s, there&#x27;s no harm in starting with it from day 1.<p>The harm is not that the deployments are hard. In fact, they&#x27;re quite nice. The problem is that small teams don&#x27;t have the bandwidth to keep up with the relentless release cadence. They may not have the expertise to get the upgrades done confidently.<p>There is also the fact that, when something does go wrong, you&#x27;ve got a whole lot of complex Kube stuff to churn through.<p>None of that applies to managed Kube, but then you&#x27;re paying extra for Kube every month. By contrast, you could have just paid extra one time for a relatively simple deployment script in CI.')