Item(by='NotPavlovsDog', descendants=None, kids=None, score=None, time=1608983065, title=None, item_type='comment', url=None, parent=25542487, text='1) How much physics and math do you need to ride a bike?<p>2) How about designing and manufacturing a bike? Spokes and gears and diameters and metal expansion &#x2F; contraction coefficients and whatnot.<p>3) How about doing number 2 from scratch? You start with some iron-enriched bacteria sludge ....<p>For 1), not a lot. Same for basic applied programming. I was perfectly fine modifying source code files to change strings &amp; output without understanding any math, or even much programming.<p>For 2) When I wanted to develop a trading application, I needed some. It was before proper APIs, so I had to learn about rounding and what pitfalls it entails for currency.\nBut today so much of development is glue. \nI made a license scanning and identifying app just by using someone else&#x27;s code and gluing it together, but you bet there is math underneath doing the text recognition.<p>And then, if you want to develop something algorithmic, such, as, an example, a search algorithm, well, you are basing your algorithm on theory, and some of it math. Behavior and the concept of quality comes in, etc etc, but you better be good at math.<p>So really, if you want to make a product, you should be asking how much traction do I need before I invest more in the product.<p>If you want to program, you want to program what you like.\nIf you need to program to solve a problem, then you start with the science classic, the literature &#x2F; domain review. It sure will outline how math heavy the domain is.<p>And if you want to address something with math, you probably know at least some math. I&#x27;m not going into how you address finding out what you don&#x27;t know.<p>My point, as many others have made above, is: how much math you need for programming depends on what you need to program, and why.')