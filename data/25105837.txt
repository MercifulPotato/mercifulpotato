Item(by='rapjr9', descendants=None, kids=None, score=None, time=1605481501, title=None, item_type='comment', url=None, parent=25094956, text='I used Nordic SDK&#x27;s for years and didn&#x27;t like them.  There were many problems:<p>- They released new versions often, and they were tied to new versions of the hardware.  So you HAD to upgrade your SDK to use the new hardware.  And they would drop support for the old hardware so if you wanted to be able to buy chips you had to upgrade.<p>- They changed the API&#x27;s often which broke all my software.  Not little changes either but major ones.<p>- They have lots of examples programs but the examples can&#x27;t be combined.  Want to use the interrupt handling example with the timer example?  It doesn&#x27;t work and you have to reverse engineer their code to find out why.<p>- The example programs are not updated until long after the SDK changes.  Because the changes in API&#x27;s are large the examples often don&#x27;t work.<p>- Some features didn&#x27;t work.  We specifically chose the nRF51822 because it was supposed to be able to do simultaneous send and receive of BLE on multiple channels.  Turns out that was marketing hype, the feature was experimental, and they didn&#x27;t deliver a complete working example for years.<p>- The debugger was useless.  It worked for simple programs but this chip is a real time system and turning on the debugger broke the real time operations.  Often it didn&#x27;t even work at all, returning random values for variable contents.<p>It&#x27;s difficult to find out things like this when all you have is the spec sheets and forums to rely on.  It&#x27;s only when you get deep into the system you find them out.  That&#x27;s why developers often stick with one microcontroller forever; they know it inside out and all the tricks to making it work.  I have a suspicion that some of the problems were intentional to get people to buy their development services.<p>Microcontrollers themselves are still stuck in the dark ages.  Atmel introduced some positive changes but most MCU&#x27;s are still really primitive and difficult to use.  A 5000 page manual?  You&#x27;ve got to be kidding!  And critical changes to the info in the manuals is published in errata sheets?  Unusable!  If I turn on a UART why doesn&#x27;t it default to a standard configuration instead of making me set bits in registers?  Perhaps it would increase cost slightly but there should be much more standardized automation in MCU&#x27;s and more should be done in hardware rather than requiring software.  There should be autonegotiation of communication protocols.  MCU design hasn&#x27;t changed much in decades and is ripe for disruption.')