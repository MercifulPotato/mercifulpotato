Item(by='tpoacher', descendants=None, kids=None, score=None, time=1609693524, title=None, item_type='comment', url=None, parent=25621125, text='It&#x27;s important to be aware this says more about you and your personal preferences (and possibly experience and skill in either language) than about octave and its overall value-proposition as a project though.<p>If I&#x27;m allowed to offer a (non-opinionated) counterpoint, I have almost the opposite experience and opinions to you (both in the positives and negatives).<p>Background: I have been working daily with python for the last 3 years in a scientific field. Before this, I worked daily with octave for about 3 years in a similar field. I&#x27;m equally happy and skilled in both languages.<p>So, to counter:\npoint 1: I mostly agree, though I think the &#x27;frequent source of bugs&#x27; point is slightly dramatic. If anything, to me it  feels like the numpy system is much more conducive to bugs (e.g. given all the acrobatics one needs to do to ensure compatible ranks).<p>point 2: You absolutely do need to import libraries in octave. And that is generally a positive thing for a number of reasons, not too dissimilar to python. However unlike python, the octave team maintains relatively strict control and quality-processes for &#x27;official&#x27; and &#x27;endorsed (third party)&#x27; packages. This has an advantage over python where for each popular package there are 100 clones and variants and poor or unfinished packages, sometimes even phishing packages.<p>As for &#x27;packages&#x27; in matlab, it&#x27;s true you don&#x27;t need to &#x27;import&#x27; toolboxes, but this is only because of matlab&#x27;s business model which sells them as add-ons. You can think of &#x27;enable in licence&#x27; as an import of sorts if you&#x27;d like.<p>point 3: Octave derives its plotting syntax from matlab, and for the most part it&#x27;s very intuitive. I always felt matplotlib is a poor attempt at replicating that syntax, but thankfully there are alternatives.<p>point 4: It&#x27;s true that octave&#x27;s biggest compatibility problem with matlab is in the &#x27;toolboxes vs equivalent package&#x27; case. Which is partly why octave has been providing bindings to equivalent python packages as a workaround (same as Julia). One of the more successful examples is octave&#x27;s reimplementation of python&#x27;s sympy package, to create a symbolic package using matlab&#x27;s api and simplicity of syntax, but calling python&#x27;s sympy under the hood.<p>As for the &quot;python has more stuff&quot;, this is purely the networking effect. And while obvioulsly the networking effect is not a trivial issue for any language, as an open source project it is always a matter of time, which is not something that can be said for something like matlab. And I&#x27;m sure that octave&#x27;s rising popularity in recent years through its promotion in things like Andrew Ng&#x27;s introductory course to machine learning, can only lead to an increased engagement with the language, and we can expect lots of good packages to crop up as a result.<p>point 5 (not labelled as such). I don&#x27;t think the &quot;python &gt; matlab&#x2F;octave&quot; mantra is necessarily true. It&#x27;s just personal opinion + engagement. It is certainly true that python has more users, but there are many reasons for that which cannot be reduced to a simple &quot;python &gt; matlab&#x2F;octave&quot;. As for jupyter notebooks, I really dislike them and much prefer matlab&#x2F;octave&#x27;s &#x27;publish&#x27; for producing straightforward html reports. But, again, that&#x27;s just personal preference. Also, I much prefer 1-bassed indexing and closed ranges, as I find them much less prone to bugs.<p>I agree about the prohibitive nature of Matlab&#x27;s licence, but I do not necessarily agree that the &quot;natural&quot; choice is therefore python. Surely the decision is more multifactorial than that. After all, if it&#x27;s ecosystem you&#x27;re after, why not julia? or c++? or java? In my view, octave is a reasonable contender regardless of an existing matlab codebase. It is a friendly language, with a big open-source community, excellent math and graphing facilities, and can easily interface with other languages if you really need that extra pizzaz on occasion, without the overhead that comes from needing to have your whole project based on those languages.')