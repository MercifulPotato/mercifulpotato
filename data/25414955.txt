Item(by='ajuc', descendants=None, kids=[25417309, 25415355], score=None, time=1607937321, title=None, item_type='comment', url=None, parent=25414534, text='I&#x27;ve worked on a 2-layer warehouse management system written in PL&#x2F;SQL on the backend with very thin C++ layer in Qt 3 on the front end.<p>It was pretty nice, there was a proprietary framework to use one XML file per form with SQL and metadata to generate CRUD with SQL-backed grids, filtering, sorting, and simple actions, and everything else was added with straightforward C++ Qt code.<p>Almost all business logic was in PL&#x2F;SQL. It was simple and quick and the divisions were obvious.<p>We moved it to 3-layered Java code with SQL (and some PL&#x2F;SQL still) on the backend, then Jboss application server and EJB3 code, and Java Swing forms on the frontend.<p>The goal was to eventually move all business logic from PL&#x2F;SQL to Java and avoid Oracle Tax (it was before Oracle bought Java BTW - funny how that worked out :) ).<p>That all would be fine, but our architects bought the cool aid and decided to overengineer the crap out of this software.<p>What was PL&#x2F;SQL + 1 XML file + 1 Qt form became like 10 layers of XML files (1 specifying how to get the data from database, another how to transform it to DTO format, another how to represent it on the frontend, another what actions should be possible on it in the frontend, another how to transform from DTO to action object for each action, etc.<p>Yes you had to write less code in edge cases than in the C++ solution, but instead you had to juggle over 10 XML configuration files even for simplest cases where before 1 SQL wrapped in XML was enough.<p>It wasn&#x27;t 3 layers of abstraction - more like 12 in practice. And all that configuration bought you was the ability to potentially write slightly less code when using several forms together and passing data between them (which we almost never did anyway).<p>It  was developed for years and finally shipped (I think), but only to one customer out of dozens and we completely switched the technology again soon after for unrelated reasons.')