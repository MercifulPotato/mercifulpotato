Item(by='the_duke', descendants=None, kids=[25594039], score=None, time=1609430363, title=None, item_type='comment', url=None, parent=25593716, text='You are essentially complaining that Rust is not C#, while at the same time admitting that you don&#x27;t know much about the language.<p>Rust is much lower level and makes very different tradeoffs. Sometimes for the sake of performance, sometimes to enhance code readability.<p>But most of the design decisions are there for a reason, and are good choices.<p>Simple types (that are small and can be trivially memcopied) can implement the `Copy` trait, which makes cloning transparent. For other types, the `Clone` trait is there with `.clone()`. Having expensive copies be explicit is a intentional design decision.<p>For value conversions, the `Into&#x2F;From` and `TryInto&#x2F;TryFrom` traits make conversions a (usually type inferred) function call (.into(), .try_into()), which is really quite convenient, though at the expense of readability.<p>Regarding strings: they are are definitely complicated and sometimes awkward in Rust. But I&#x27;d argue that strings are inherently complicated. Most languages hide this complexity by just allocating and doing everything on the heap, which is not great in a language that values performance and wants to support environments without allocators.')