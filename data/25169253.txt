Item(by='YeGoblynQueenne', descendants=None, kids=None, score=None, time=1605960479, title=None, item_type='comment', url=None, parent=25154982, text='A thousand cards is not much of a training set so I&#x27;m not really sure deep learnign would get very far.<p>A few years ago there was a community project training RNNs to generate M:tG cards [1], that if I&#x27;m not mistaken became Roborosewater [2]. M:tG already had around 12-15k cards by the time and still the majority of generated cards did not make sense. In the mtgsalvation thread in [1], most of the time people crack out with the nonsense that&#x27;s generated by the RNNs people train [3]. There are also plenty of cards that make sense and are interesting and even usable, but they had to be hand-picked out of buckets of nonsense. A lot of curation and probably editing generated cards by hand would be needed, which somewhat defeats the purpose of the whole endeavour.<p>To generate new cards it would make much more sense to use good old procedural generation starting with a hand-crafted grammar of the rules text. This is certainly doable for a game of the size of M:tG, let alone Netrunner. For instance, M:tG Arena, the online p2p version of the game, runs on a game engine with a hand-crafted parser, the Game Rules Parser, that essentially resolves spells like an interpreter executing a script [4][5].<p>I mean to say, sometimes jumping feet-first into learning how to use a new set of complex tools is not necessary. Simpler tools that should already be in every programmer&#x27;s toolbox can do the job fine, sometimes, even when it seems easier to just get a bunch of data and put it through a machine learning meat grinder. &quot;Easier&quot; might turn out to mean you need to do a lot more work before and after you can use the &quot;easier&quot; method (e.g. labelling, training, curation, etc) and not even get very good results in the end.<p>___________<p>[1] <a href="https:&#x2F;&#x2F;www.mtgsalvation.com&#x2F;forums&#x2F;magic-fundamentals&#x2F;custom-card-creation&#x2F;612057-generating-magic-cards-using-deep-recurrent-neural" rel="nofollow">https:&#x2F;&#x2F;www.mtgsalvation.com&#x2F;forums&#x2F;magic-fundamentals&#x2F;custo...</a><p>[2] <a href="https:&#x2F;&#x2F;twitter.com&#x2F;RoboRosewater" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;RoboRosewater</a><p>[3] The project was started by the user Talcos, then more people started training their own nets using Talcos&#x27; code.<p>[4] <a href="https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;magicTCG&#x2F;comments&#x2F;74hw1z&#x2F;magic_arenas_gre_the_groundwork_for_future&#x2F;do0rvfe&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;magicTCG&#x2F;comments&#x2F;74hw1z&#x2F;magic_aren...</a><p>[5] To tout my own horn a bit, I did the same thing in my degree as a final year project, but I didn&#x27;t have enough time to get full coverage of the entire card corpus at the time - still, I was just one undergrad student and I did manage to get a big chunk of the game working with a rules parser. The parser was written in Prolog meaning I could &quot;run it backwards&quot; as a generator so the project had an M:tG ability text generator that spat out grammatically correct, if not always particularly useful, text. I&#x27;m not linking to the project because it was 9 years ago and it&#x27;s painfully embarrassing looking at it now.')