Item(by='johndoe0815', descendants=None, kids=None, score=None, time=1608602882, title=None, item_type='comment', url=None, parent=25498685, text='Literate programming could solve some of our everyday problems, such as discrepancies between documentation and implementation (in contrast with often hard to use automatically generated documentation e.g. using JavaDoc). I&#x27;m not sure why it never caught on - perhaps most programmers rather want to work on code and not on explaining it...<p>While not as elaborate as Knuth&#x27;s WEB system, I liked the approach used by Douglas Comer in his Xinu OS books (my first OS textbook) very much. Comer&#x27;s integration of explaining text sections and related code is not as tight as some of the commonly mentioned literate programming examples, but IMHO it still helps a lot to understand the system structure and the  dependencies of the piece of code discusses with other parts of the system.<p>What is great about the Comer books is that - like Oberon - they also cover more than just the OS. In the original version of the Xinu book, there was an extensive explanation of the PDP11 the system was developed on, though not on a sufficient level of detail to actually build a PDP11. While Comer doesn&#x27;t include a compiler or GUI in Xinu, he extends the system in another useful direction with Xinu-based  Ethernet and TCP&#x2F;IP support in a second volume. The Project Oberon book includes a short chapter on networking, but this is a point where the &quot;not-invented-here&quot; paradigm that helps to keep the Oberon system so simple and elegant seems to break down, as real-world interfacing is essential today. The difference in complexity between the homebrew approach and TCP&#x2F;IP is easy to see, however. Networking is covered in a single chapter (IIRC) in the Project Oberon book, whereas it took Comer a whole book volume to describe his TCP&#x2F;IP implementation (admittedly, also including the description of a number of network protocols on top of TCP&#x2F;IP).')