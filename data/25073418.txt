Item(by='iamwil', descendants=1, kids=[25073675], score=2, time=1605207441, title="Ask HN: How come there's a distinction between defining vs. calling a function?", item_type='story', url=None, parent=None, text='In pure functional languages, like Haskell, a function with no arguments is treated as its result.<p>foo : Int\nfoo =\n  1 + 1<p>Whereas in most other imperative languages, there&#x27;s a distinction between defining a function, and calling the function. Example in javascript<p>&#x2F;&#x2F; defining a function\nconst foo = () =&gt; 1 + 1<p>&#x2F;&#x2F; calling a function\nfoo()<p>If you want to call a function right after defining it.<p>const foo = (() =&gt; 1 + 1)()<p>How come most languages make this distinction? The only thing I could think of is that it gives fine-grained control to programmer when something is executed. If it wasn&#x27;t, then you&#x27;d have to rely on lazy evaluation.<p>Are there other reasons? Was it a historical accident?')