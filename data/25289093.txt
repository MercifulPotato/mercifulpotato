Item(by='tsumnia', descendants=None, kids=[25289712, 25289570, 25289558], score=None, time=1607005584, title=None, item_type='comment', url=None, parent=25287139, text='I would disagree - Alice[1], Scratch[2], and Snap![3] are all attempts to be beginner friendly; that is the entire area of block based programming. There are also attempts via Python with websites like CodeCombat[4].<p>However, I would say the issue is there is no &quot;transition&quot; to &quot;real&quot; programming languages. No one builds a Red-Black tree in block based programming and there is still an unrecognized issue about how &quot;end-game&quot; programming should be. Is it through layers of abstraction like corporate Java or is it completely linear with the current adoption trends of Jupyter and Data Science?<p>In my opinion, where the issue stands currently is that older languages like BASIC made the visual creation aspect of coding super  easy. You could write 250 lines of code and you have a rudimentary space invaders game. Today, this requires external libraries, creating objects, etc. It used to simply be &quot;HPLOT&quot; to make graphics, now you have to introduce shaders.<p>[1] <a href="https:&#x2F;&#x2F;www.alice.org&#x2F;resources&#x2F;lessons&#x2F;programming-in-alice&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.alice.org&#x2F;resources&#x2F;lessons&#x2F;programming-in-alice...</a><p>[2] <a href="https:&#x2F;&#x2F;scratch.mit.edu&#x2F;" rel="nofollow">https:&#x2F;&#x2F;scratch.mit.edu&#x2F;</a><p>[3] <a href="https:&#x2F;&#x2F;snap.berkeley.edu&#x2F;" rel="nofollow">https:&#x2F;&#x2F;snap.berkeley.edu&#x2F;</a><p>[4] <a href="https:&#x2F;&#x2F;codecombat.com&#x2F;" rel="nofollow">https:&#x2F;&#x2F;codecombat.com&#x2F;</a>')