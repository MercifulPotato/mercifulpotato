Item(by='corysama', descendants=None, kids=[25609316, 25615648, 25611570, 25609429], score=None, time=1609549781, title=None, item_type='comment', url=None, parent=25608241, text='Lots of cynic-cynics in here :)  I&#x27;ll stand up for the author.  The lists in the article are not great, but I still agree with the sentiment.<p>I recommend everyone watch Bret Victor&#x27;s classic &quot;The Future of Programming&quot; <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8pTEmbeENF4" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8pTEmbeENF4</a><p>Yes, we&#x27;ve had a trillion dollars invested in &quot;How to run database servers at scale&quot;.  And, we&#x27;ve had some incremental improvements to the C++ish language ecosystem.  We&#x27;ve effectively replaced Perl with Python.  That&#x27;s nice.  Deep Learning has been a major invention.  Probably the most revolutionary I can think of in the past couple decades.<p>But, what do I do in Visual Studio 2019 that is fundamentally different than what I was doing in Borland Turbo Pascal back on my old 286?  C++20 is more powerful.  Intellisense is nice.  Edit-and-continue worked 20 years ago and most programmers still don&#x27;t use it.  If you are super awesome, you might use a reversible debugger.  That&#x27;s still fringe science these days.<p>There is glacial momentum in the programming community.  A lot of &quot;grep and loose, flat ASCII files were good enough for my grandpappy.  I can&#x27;t accept anything different&quot;  And, so we don&#x27;t have code-as-database.  A lot of &quot;I grew up learning how to parse curly bracket blocks.  So, I can&#x27;t accept anything different&quot;.  So, so many languages try to look like C and are mostly flavors of the same procedural-OO-bit-of-functional paradigm.  A lot of &quot;GDB is terrible, don&#x27;t even try&quot; so many programmers are in reverse-stockholm system where they have convinced themselves debuggers are unnecessary and debugging is just fundamentally slow and painful.  So, we don&#x27;t have in-process information flow visualization.  And, so on.')