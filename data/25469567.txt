Item(by='kazinator', descendants=None, kids=None, score=None, time=1608312837, title=None, item_type='comment', url=None, parent=25459506, text='Hey, you mean &quot;DRY IA TO&quot;! Don&#x27;t repeat common phrases like &quot;is a&quot; and &quot;trade-off&quot;, damn it! Define an acronym and use that instead.<p>DRY is literally impossible. If something has to be performed or evaluated two or more times, and you factor that out under a definition, you still have to invoke the definition multiple times. I.e. you are still repeating yourself, just using an abbreviation.<p>What you are doing is called &quot;compression&quot;.  Classic data compression algorithms like LZ77 work by abbreviating.<p>&quot;LZ77 algorithms achieve compression by replacing repeated occurrences of data with references to a single copy of that data existing earlier in the uncompressed data stream. &quot; - Wikipedia<p>Outside of alcoholic drinks, that&#x27;s the ultimate DRY.<p>Thus, the argument against DRY is obvious: it&#x27;s a form of compression, and excessive compression destroys readability: or else we would all be able to read source code that has been put through LZ77.<p>Only mild compression improves readability. Mild compression improves readability largely because it&#x27;s easier to see that two brief invocations of a definition are exactly the same, than to see that two repetitions of a code block are exactly the same. When we see that two code blocks are exactly the same, we don&#x27;t have to understand them separately.<p>Basically, brainless repetition and verbosity hinders readability, as does dense, thorough compression. One extreme might be represented by reams of Java boilerplate; the other by IOCCC entries.')