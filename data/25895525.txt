Item(by='c-smile', descendants=None, kids=None, score=None, time=1611519722, title=None, item_type='comment', url=None, parent=25891435, text='Flexbox shall not exist. At least in the way it is defined.<p>1. It breaks CSS box model that postulates that &quot;width&quot; defines element width. With flexbox that is not so as width can be overridden by flexbox in non-trivial manner.<p>2. flexibility shall be defined by flex&#x2F;fraction units like in Grid module. So we may have:<p><pre><code>    width: 10fr;\n    margin-left: 2fr;\n    border-spacing: 1fr;\n</code></pre>\n3. CSS and HTML shall have unified flex units. Flexibility in HTML uses ** units like<p><pre><code>    &lt;frameset rows=&quot;200,1*,200&quot;&gt; \n    &lt;frameset rows=&quot;200,2*,1*&quot;&gt; \n    &lt;td width=&quot;2*&quot;&gt; \n</code></pre>\nand so CSS might use that as<p><pre><code>    width: 10*;\n    margin-left: 2*;\n</code></pre>\n4. Flexibility as an entity shall be expressed uniformly among different CSS modules. Instead of bunch of separate flex-** properties and separate FR units it should be just flex units width:2*; and flex functions if that is needed.<p>-----------------------<p>&quot;box-sizing&quot; shall have also padding-box value.<p>When defined padding shall go into scrollable content : <a href="https:&#x2F;&#x2F;terrainformatica.com&#x2F;2019&#x2F;10&#x2F;17&#x2F;css-overflow-padding-handling-is-broken-in-all-browsers&#x2F;" rel="nofollow">https:&#x2F;&#x2F;terrainformatica.com&#x2F;2019&#x2F;10&#x2F;17&#x2F;css-overflow-padding...</a><p>In general box-sizing is broken (or under specified) in regard of paddings of the element.<p>-----------------------<p>&quot;outline&quot; shortcut property shall include outline-offset value too.<p>-----------------------<p>&quot;visibility&quot; shall have &quot;none&quot; value.<p><pre><code>   visibility:none; \n</code></pre>\nshall be treated as display:none and display shall not have none value. So for hiding&#x2F;showing a table for example we can use<p><pre><code>   .some { \n     visibility:none; \n     visibility:visible; \n   }\n</code></pre>\nBut not<p><pre><code>   .some { \n     display:none; \n     display:block; \n   }\n</code></pre>\nwhich is obviously wrong.<p>In short: visibility and display model shall be orthogonal.<p>-----------------------<p>Syntax:<p>Modules shall use functional notation rather introducing bunch of conflicting prefixed properties, so use this<p><pre><code>   display: grid(\n      column: 2 &#x2F; 4,\n      row: 1 &#x2F; 3 \n   ); \n</code></pre>\ninstead of<p><pre><code>    grid-column: 2 &#x2F; 4;\n    grid-row: 1 &#x2F; 3;\n</code></pre>\nDifferent modules in future may also want to have \ngrid-columns, etc.<p>------------------------<p>&#x2F;&#x2F; - line ending comments please')