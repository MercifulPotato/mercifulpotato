Item(by='geophile', descendants=None, kids=None, score=None, time=1611423154, title=None, item_type='comment', url=None, parent=25881704, text='I was working in C++ when Java came out, and I remember my initial reactions:<p>1. Nice language, a relief after the complexity of C++, which was a complicated mess even in the early 90s.<p>2. GC! A great relief.<p>3. Completely bizarre memory model, due to the inability to physically embed one object inside another.<p>25 years later:<p>Language: My view of the language itself is lower than it used to be. This is not due to the current &quot;objects are evil&quot; fad, not due to the preposterous AbstractFactoryManagerFactory abstractions that are sometimes enforced, and not due getters&#x2F;setters (don&#x27;t use them if you don&#x27;t want to, I don&#x27;t).<p>No, I think there are two basic problems with the language itself. First, type erasure is just bad. It does simplify a number of things for implementation, but it leads to non-intuitive hacks required to get things right. Second, they got closures all wrong, basically limited to constant values so that the implementation can rely on copying. So many other languages get it right. (Have they fixed this?  I haven&#x27;t been an active Java user for a few years.)<p>GC: Still nice, but: GC performance is still an issue. This is undeniable -- Oracle is still experimenting with new GCs. Tuning is getting so arcane, that I think I might actually prefer the C model. Valgrind was not available when I was an active C++ developer. It makes C memory debugging so simple, and GC tuning is such a mess, that my preference for GC (at least in Java) has diminished.<p>If I had to rank memory management models, I think I&#x27;d go with 1) C + valgrind, 2) GC, and a very distant 3) Swift-style reference counting.<p>Memory model: The lack of physically embedded objects is still a miserable choice. I understand why they did it -- it makes object identity much more complicated. But it really does rob Java of some critical tools for improving performance. Project Valhalla (value types) seems to be perpetually several releases in the future.')