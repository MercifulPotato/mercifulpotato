Item(by='mark_and_sweep', descendants=None, kids=[25374086], score=None, time=1607610357, title=None, item_type='comment', url=None, parent=25373460, text='Sorry, jQuery was a bad example - I remember jQuery not working in Node at all, but that was roughly 10 years ago. Things have improved.<p>The fact remains that the most popular JS env is the browser. It has APIs such as window which are not compatible with Node and Node has APIs which are not compatible with the browser like __dirname or require. That&#x27;s why tools such as browserify and webpack exist to bridge the gap.<p>In Deno the gap is much closer. Obviously, the Deno namespace is not available in the browser (but there&#x27;s a shim for most APIs, e.g. Deno.writeFile and readFile are implemented with a virtual FS) and some web APIs are not available in Deno (yet), but the compat story is much better.<p>This is no surprise since web compat is a core goal of Deno. Node compat is not.<p>&gt; Wouldn&#x27;t it be trivial to just fall back to checking node_modules for named packages?<p>No, the resolution algo is not trivial (nor performant). Also, it&#x27;s not necessary: There is already a standard for how to import code in JS; it&#x27;s import statements. Import statements do not allow named packages, e.g. import $ from &quot;jquery&quot; does not work in the browser. Except, again, import maps.')