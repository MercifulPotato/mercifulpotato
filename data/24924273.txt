Item(by='protoduction', descendants=None, kids=[24954197, 24924972], score=None, time=1603920021, title=None, item_type='comment', url=None, parent=24923427, text='I&#x27;ll try to provide my thoughts on each of the issues you&#x27;ve mentioned, let me know if there&#x27;s something I missed.<p>On using blake2b:\nI chose blake2b as I was looking to use a hash function that is small in implementation, readily available and already optimized. With WebAssembly the solver can achieve (close to native) speeds and be least be an order of magnitude or two closer to optimized GPU algorithms.<p>Using specialized hardware, image tasks (and even more so audio tasks which must be present for accessibility reasons) have the same issue that they can be solved by GPU algorithms (i.e. machine learning, in which even a low percentage success rate would already be enough). If you search on GitHub you will find there are more ML captcha cracking repos than captcha implementations - they are probably even easier to get started with than adapting GPU miner code.<p>Image&#x2F;Audio Captcha vs ML is an arms race that can be beat for split seconds of compute (even on CPU) or cheap human labeling: it&#x27;s just as broken. FriendlyCaptcha optimizes for the end user (privacy + effort + accessibility) by not engaging in the arms race - I think it makes a better trade-off. Like the sibling comment pointed out the captcha solving can happen entirely in the background so that hopefully it doesn&#x27;t even make the user wait.<p>As for rate limiting&#x2F;difficulty adjustment: it&#x27;s not perfect and it could lead to problems if you share the IP with a spammer (and let&#x27;s be realistic: even with a million users on one IP there won&#x27;t be tens of users signing up to some forum per minute). Also normal captchas have problems here though: users from these locales already get presented with much more difficult+frequent recaptcha tasks (I also doubt they are localized: American sidewalks are harder to label if you&#x27;ve never seen one in real life). Setting a reasonable upper limit to difficulty may be good enough here.<p>On not using blake2b:\nI have considered mutating the hashing algorithm every day randomly to make writing an optimized solver for it all that more difficult - but that would mean one could no longer self-serve the JS+WASM and be done with it. I won&#x27;t rule it out for FriendlyCaptcha v2 if this does ever become a real problem.<p>Swapping out the hash function should be easy (the puzzles are versioned to allow for this). If you have a different function in mind and someone implements it in Assemblyscript (so we also have a JS fallback) then we can definitely consider it.')