Item(by='pwdisswordfish5', descendants=None, kids=[25558504], score=None, time=1609150809, title=None, item_type='comment', url=None, parent=25557898, text='It’s a libc implementation accompanied by a linker script that tricks the linker into generating a polyglot executable file, simultaneously interpretable as an MZ executable, x86 boot sector and a Unix shell script, the latter of which re-writes the executable into ELF or Mach-O format and then executes it again. I haven’t analysed it all that thoroughly, but that’s the gist of it. Here’s more information: \n<a href="https:&#x2F;&#x2F;justine.storage.googleapis.com&#x2F;ape.html" rel="nofollow">https:&#x2F;&#x2F;justine.storage.googleapis.com&#x2F;ape.html</a><p>Polyglot files are not a particularly new invention, but devising a reproducible process to generate those can be quite tricky, so most don’t bother unless there’s a special need for it. (For example, the GRUB4DOS fork of GRUB contains a ‘bootlace’ executable that is simultaneously executable as a DOS .COM and an ELF file.)<p>The libc itself contains a number of specially-crafted functions and header files that expose the functions’ clobbered register set as part of the functions’ public ABI, which allows the compiler to use that knowledge to better allocate registers and optimise more aggressively. The downside is that if the clobbered register set changes, it requires everything using the function to be recompiled.')