Item(by='phoe-krk', descendants=None, kids=[25494018, 25494008], score=None, time=1608548953, title=None, item_type='comment', url=None, parent=25493495, text='&gt; Thus, if you&#x27;re looking to get started with programming in Common Lisp, then there are 2 options:<p>The author misses the third, most classical, and constantly useful option: doing it all yourself. Despite the scary name, there&#x27;s not all that much to do, and this approach is the most widely supported in the community. The checklist is:<p>* SBCL&#x2F;CCL (from your package manager or from official binaries),<p>* Quicklisp (by downloading it from <a href="https:&#x2F;&#x2F;quicklisp.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;quicklisp.org&#x2F;</a>),<p>* Emacs (in any preferred way),<p>* Slime&#x2F;Sly (manually, or via `(ql:quickload quicklisp-slime-helper)`, or via using an Emacs distribution, such as Spacemacs with its common-lisp layer, which already contains preconfigured slime&#x2F;sly).<p>There, you&#x27;re good to go.<p>Using some sort of toolkit which enables interactive and incremental programming (such as Swank&#x2F;Slynk on the Lisp side and any Slime&#x2F;Sly client on the editor side) is an ABSOLUTE MUST while doing Lisp. If you&#x27;re allergic to Emacs and therefore can&#x27;t use Slime&#x2F;Sly, use:<p>* slimv&#x2F;vlime for vim,<p>* Alive for VSCode,<p>* Slyblime for Sublime,<p>* atom-slime for Atom.')