Item(by='danieldk', descendants=None, kids=None, score=None, time=1604844541, title=None, item_type='comment', url=None, parent=25025618, text='I think you mean Team Silverblue, right?<p>They are very different, but lead to some of the same benefits. Silverblue largely follows the same system layout as traditional distributions (FHS, with packages in a global namespace). But compared to traditional distributions, it replaces the package manager snapshots in a git-like store (OSTree). The system is immutable and provides atomic updates&#x2F;rollbacks, like NixOS. They offer an mechanism on top of OSTree (rpm-ostree) to layer traditional RPMs from Yum&#x2F;DNF repositories. To keep the base system lean and immutable, they encourage installing desktop applications through Flatpak and doing development through traditional, mutable containers through podman&#x2F;toolbox.<p>Silverblue is a bit strange in that it is in two worlds: on the one hand it touts the benefits of immutable systems, on the other hand it acknowledges that in their own setup, development is only really comfortable by also providing mutable systems through containers.<p>NixOS is far less compromising than Silverblue. It chooses one model, functional package management, and that&#x27;s the way of the highway (no FHS, immutable store, all packages live in their own directories in <i>&#x2F;nix&#x2F;store</i>). There are some small escape hatches like <i>buildFHSUserEnv</i>, but no major compromise as Silverblue has. Nix shares some benefits like atomic updates&#x2F;rollbacks and an immutable system. But provides many others that Fedora&#x27;s model cannot easily provide (or has as the answer &#x27;spin up another container&#x27;), such as permitting several different versions of packages in parallel, virtual environments (but for any package), etc.<p>I think both approaches are very promising and not one is necessarily better than the other. Nix&#x2F;NixOS&#x27; approach is more consistent and more powerful. However, Silverblue&#x27;s pragmatic use and strong integration of containers, makes it much more familiar for most people. Also, much more software works out-of-the-box as a result.')