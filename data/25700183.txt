Item(by='cuddlecake', descendants=None, kids=None, score=None, time=1610199097, title=None, item_type='comment', url=None, parent=25699574, text='I feel like being Anti-Haskell is becoming a ridiculous meme.<p>The author makes a lot of statements, but no arguments, no proofs, and no explanations.<p>Also, the post is riddled with &quot;The Community does X&quot; memes, such as:<p>&gt; Funnily enough everyone in the Haskell community blamed everyone else instead of [...]<p>&gt; [Senior Developers tell you to just] write types and interfaces for the types and fill in the blanks<p>&gt; Look, even most haskellers would agree that purescript is a better choice compared to GHCJS<p>&gt; [Haskellers are] using some obscure definition from category theory to explain [Monads]<p>&gt; Haskell proponents try to claim that type signatures are somehow documentation<p>&gt; Every few months some newbie comes along to the Haskell reddit and asks why is Haskell documentation so confusing, and the post get destroyed by people telling them to get good or just pointing at academic papers. Really?<p>&gt; suddenly their precious castle [of type declarations] is reduced to dust<p>and the author does not give a single link or concrete example, not a single proof or evidence of this actually being the case. In the author&#x27;s defense, I would also think that the Haskell Community behaves exactly like that, if I had taken every comment on HN about Haskell as being correct and truthful.<p>One very absurd claim by the author that I&#x27;d like to point out is:<p>&gt; programs deal with data, and data has no types<p>All data has a type (structure, schema, intent), otherwise it wouldn&#x27;t be data. Instead, it would be electrical noise.<p>&gt; Types wrap data and treat it like a black box whereas schema describes the shape and content of data.<p>I don&#x27;t understand why the author makes a distinction between &quot;types&quot; and &quot;schema&quot;. I get the feeling that the author makes the distinction only to bash on Haskell because Haskellers will talk of &quot;data types&quot; and not of &quot;data schemas&quot;.<p>&gt; Suddenly they are left reeling as they find out that the real world is, in fact, dynamic.<p>That&#x27;s why Haskell has `Maybe`, duh. I don&#x27;t buy into the statement that the &quot;real world is dynamic&quot;. It&#x27;s just as slogan-y as &quot;The Real World is Object-Oriented&quot;, because it seems to be trivially observed, BUT, programming is not the Real World. One programmer has a data type that he&#x2F;she sends over the wire. It would be weird if another program didn&#x27;t anticipate the data but could still handle it correctly without expecting the data to have a certain type. Programming is not dynamic, programming is guessing &quot;what the fuck did the other programmer try to send me&quot; and defining a type for that. This is done either implictly by just accessing the fields or explicitly by defining the type and parsing the data.<p>---<p>All in all, I feel like this post adds nothing in value, and I am very annoyed that it has been ranked #1 on HN, but this stays consistent with how I personally perceive the broader HN Community.<p>Sidenote: I am not a Haskell Developer.')