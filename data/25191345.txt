Item(by='dehora', descendants=None, kids=None, score=None, time=1606163225, title=None, item_type='comment', url=None, parent=25186708, text='&gt; Are there any drawbacks of using a plugin centric approach?<p>Here are some:<p>1. You&#x27;re perhaps more subject to Hyrum&#x27;s law. If plugin devs can see it, they will use it. The general observation here is that it&#x27;s harder to control the visible interfaces and implicit dependencies you export than the dependencies and interfaces you rely on. As one example, semantic versioning doesn&#x27;t cater for this at all. Plus, most of the practice knowledge in software is on managing relied on dependencies.<p>2. Dog follows tail. It can happen that a plugin becomes so successful the overall system evolution slows down. The core system can upgrade, but adoption&#x2F;deployment can be constrained when a particularly valuable plugin doesn&#x27;t move up to the latest and the customer base sees more value in the plugin than its core platform. This can compound poorly over time, and in extreme cases the desirable plugin can become its own platform&#x2F;system (something I think business savvy tech leaders are increasingly aware, and wary, of).<p>3. Operational complexity. It can be harder to run and maintain a plugin based system than a closed one. 2 is a consideration here, but so are other concerns, such as security and resource isolation. Strategies vary, but who pays this cost on a relative basis is one of the more (and perhaps the most) interesting aspect of working on or using plugin systems. As one example of this, think about allocating responsibility for bugs.<p>4. R&amp;D complexity. It may take more time to design and build a plugin system than a closed one. Incrementally evolving to a plugin system can be difficult if you didn&#x27;t start there to begin to with. So you usually need a clear opening motivation to delay reward (or avoid over engineering) to invest in a system design where functionality can be  extended by non-core developers.')