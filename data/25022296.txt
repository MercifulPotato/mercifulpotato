Item(by='Diesel555', descendants=None, kids=[25022728, 25025126], score=None, time=1604803044, title=None, item_type='comment', url=None, parent=25014708, text='I&#x27;m surprised at all the people that prefer REST over GraphQL.<p>I&#x27;m a developer of my own projects for fun. I don&#x27;t work in tech. My frontends are on iOS &#x2F; Android &#x2F; the web with Typescript. So my confusion is from a perspective without expertise.<p>I started with REST via Django and a few others, and now I&#x27;ve switched to GraphQL. I love GraphQL over REST backends due to the type automation tools such as GraphQL Code Generator and query tools like Apollo. Also being able to construct a query and access children via one request is super nice. For example my old REST APIs call for a post, then get pictures for that post, then get comments for that post, then gets the username and other user data for the owner that made the comment. It&#x27;s four requests. My GraphQL requests just get them all in one customizable request. Post can contain pictures and comments and all their properties. Comments can contain the owner of the comment and all its properties to include things like username.<p>The result is a typescript object that is strongly typed and has all the data I need. Before GraphQL, in REST, this would be four requests, three of which are in series (post -&gt; comment -&gt; owner to get username). I know I could make a custom REST API to do the same thing, but it was just so easy in GraphQL, I didn&#x27;t have to worry about it.<p>I&#x27;m not working in teams, I&#x27;m not creating a super large backend, it&#x27;s not complex projects... so I don&#x27;t know what I don&#x27;t know.<p>But what am I missing? Maybe not everyone needs &#x2F; uses the typing I do? That&#x27;s the big benefit for me. Maybe not everyone cares about being able to query children (or create children via a nested create)? Maybe these things were easier than how I was doing it in REST?')