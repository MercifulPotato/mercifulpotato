Item(by='Jugurtha', descendants=None, kids=None, score=None, time=1607783799, title=None, item_type='comment', url=None, parent=25398138, text='I don&#x27;t think there are or it could just be that I don&#x27;t understand the question.<p>Software engineering is an activity to produce an output, to fulfill a &quot;job to be done&quot;. Focusing on things with the bigger impact, and these change and are specific.<p>I know what &quot;general&quot; actions I would do if I were to start a new project based on pain points we have suffered through many projects, and that saved us a bunch of time and morale down the road:<p>- Include monitoring for errors and system&#x27;s health, and analytics for user behavior: I shouldn&#x27;t dig through logs to see an exception (Sentry). I should look at one dashboard and have an idea on which systems are up or down, metrics, load, latency, etc. (Prometheus and Grafana). I should know how users are interacting with the product, where they are failing and succeeding (PostHog).<p>- Add communication channels to interact with users into the product (issue template, Slack, something, email): asking users about which ways the product failed to solve their problem.<p>- Use a plug-in architecture in order to easily add and, more importantly, <i>remove</i> functionality easily. It makes testing ideas easier: easily introduce a feature, and as easily kill it without rewriting the whole codebase.<p>- Make functionality accessible through APIs (one guideline we have is that everything should be accessible through an API call). Have an SDK for the main language first to simplify this.<p>- Document everything. An issue is closed if there has been a test written for the bug, or it&#x27;s documented somewhere so anyone has access to it.<p>- Align everyone: through written communication accessible anytime by anyone. Communication should tie objectives to actions and penetrate several abstraction levels and be consumable by advisors, board members, non-technical people, technical people. Call it &quot;fractal communication&quot; that still makes sense from any abstration level you read it. This enables everyone on the team to chime in at the abstraction level they&#x27;re comfortable with. You write an email that ties objectives on say, revenues, in a language that speaks to some, and then tie it back to specific activities, an issue in the issue tracker, and a line of code, so that everyone sees how things fit together and are intertwined. Everyone knows what to do and why they&#x27;re doing what they&#x27;re doing. They can come up with ideas or correct assumptions or mistakes.<p>- Have issue templates for incidents, features, improvements, and bugs: this reduces the &quot;activation energy&quot; to writing good issues. It beats having a blank screen and reduces variance in issue quality.<p>These are just a few points.')