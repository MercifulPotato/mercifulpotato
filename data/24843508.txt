Item(by='ncmncm', descendants=None, kids=None, score=None, time=1603237876, title=None, item_type='comment', url=None, parent=24842298, text='Generally speaking, most design patterns reveal weaknesses in the languages where they are found. Regularities that <i>can</i> be captured in libraries do not become design patterns because they end up expressed in one or a family of libraries, and just used. Others, heavily used, are often pulled into the core language.<p>So, in a stronger language, fewer of the design patterns noticed in other languages are seen. The strongest languages show least use of common design patterns, and also the fewest of them pulled into the core language, because their ability to capture patterns in libraries is better.<p>An example is the lowly hash table.<p>In C, this is a design pattern, and there may be millions of more or less independent implementations of the pattern in the corpus of C programs and C libraries. A hash table library in C just cannot be made very widely useful.<p>Many, many other languages provide hash tables, often called dictionaries, in the core language. It doesn&#x27;t matter so much, then, that you can&#x27;t usefully code one in the language, because the language fills that gap. It does mean that if you need a substantial variation on the basic hash table pattern, you are out of luck, but almost all small programs, and even most big ones, don&#x27;t need anything fancier.<p>A few languages, notably C++, the MLs, Haskell, D, and Rust among them, are strong enough to capture the pattern in libraries, and you find libraries in these languages implementing numerous variations on the hash table pattern.<p>There are still patterns that cannot be captured in libraries even in these languages. That failure can help to guide development of useful new features in these languages. The most useful new features enable the language to capture more usage patterns in libraries, so they be coded just once (or a few times) and then used anywhere.<p>Being able to capture a pattern in a library is much better than pulling it into the language core, because then you get not just the basic pattern, but as many variations on it as turn out to be worth coding a library for.')