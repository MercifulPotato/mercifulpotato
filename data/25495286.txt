Item(by='SAI_Peregrinus', descendants=None, kids=None, score=None, time=1608561432, title=None, item_type='comment', url=None, parent=25492032, text='Exactly. This article is titled &quot;Understanding how AES encryption works&quot;, but it doesn&#x27;t describe how AES encryption works! It only describes how AES works.<p>AES is a block cipher, basically an approximation of a &quot;Pseudorandom Permutation&quot; (PRP).[1]<p>A PRP can be used for secure (authenticated) encryption, eg in AES-CCM or AES-GCM. PRPs can be used for semi-secure (unauthenticated) encryption, eg AES-CTR or AES-CBC. PRPs can be used to make a Message Authentication Code, eg CMAC. PRPs can be used to make a hash function (no direct example with AES, but Whirlpool uses a modified AES, and one could also use it in a Sponge construction, and Keccak uses an internal PRP). PRPs can be used to make a CSPRNG (random number generator), eg AES-DRBG. PRPs can even be used to make a public-key signature scheme: make a hash function (say, via a Sponge construction) and then make a Merkle hash-based signature scheme! The only common operation I don&#x27;t know how to make with AES (or another PRP) as the main component is a Key Encapsulation Mechanism.<p>Calling this an article on how &quot;AES Encryption&quot; works is a bit like writing an article &quot;How Programming in C works&quot; and then describing NAND gates, ALUs, instruction decoding, and other bits of how a CPU works. It&#x27;s the wrong level entirely given the title.<p>[1] A PRP is a sort of keyed super-shuffle. I&#x27;ll use decks of cards for this analogy. A PRP is a bit like shuffling 52 decks of cards (in a deterministic way based on the state of an input deck) and taking the top card from each, then returning the resulting 52 cards as a &quot;deck&quot; of output. There can be repeated cards. A deck of all one card (say, ace of spades) will come out totally different, while a normal shuffle would just get you back 52 ace of spades. The determinism lets you repeat this process by knowing the input deck&#x27;s state.')