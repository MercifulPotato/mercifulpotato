Item(by='dkarl', descendants=None, kids=None, score=None, time=1603376478, title=None, item_type='comment', url=None, parent=24854069, text='In the current-day context there are a lot of ways you can improve Java code just by <i>not</i> using OO mechanisms.  A lot of the pervasive use of inheritance in the past was driven by the assumption of working in big monolithic codebases in huge teams with long development cycles and really poor use of SCM.  Working in small teams, on microservice codebases, in short dev cycles, without long-lived feature branches and late merges, you don&#x27;t need as much protection against other people&#x27;s code.  You can use concrete classes instead of interfaces, and you can separate data from algorithms instead of finding ways to conceptualize every function as a &quot;behavior&quot; of some anthropomorphized collection of data.<p>A couple of edits:<p>The old style makes sense for the API surface of libraries; I won&#x27;t dispute that.<p>As much as they annoy me, I do see a bright side to people who insist on defining &quot;correct&quot; Java style as the circa-2000 style motivated by a bunch of long-dead assumptions:  they will help Java die.  Nobody under forty wants to write code that way.  All it will take to kill Java will be for Oracle to declare a future release (say Java 25) as an &quot;eternal support&quot; release and then release an entirely different language as &quot;Java 26&quot; the way Microsoft did with Visual Basic.')