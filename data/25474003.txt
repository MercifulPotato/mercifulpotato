Item(by='verberant', descendants=None, kids=None, score=None, time=1608339957, title=None, item_type='comment', url=None, parent=25473470, text='&gt; And this leads me to the conclusion that software quality is mostly driven by the company and economics. If the project doesn&#x27;t pay for solid quality assurance or has too much time pressure on developers, the software you get might be bad at least to some degree. Even good developers can&#x27;t make up for that.<p>I think this is absolutely the case. As an extreme example, an organization that uses formal methods is probably going to ship higher quality software because they&#x27;ve meticulously worked out design bugs before they&#x27;ve even written a line of code and, once the program is implemented, they&#x27;ve rigorously verified its correctness – the economics of this methodology, however, are not really feasible in most circumstances and so instead we opt for duct tape fixes and crunch time.<p>The author also mentions the lack of gatekeeping for software engineering – this is often pointed to as one reason for bad software existing. I tend to agree, since &quot;good code&quot; and &quot;bad code&quot; that both do what they&#x27;re supposed to under the common case can appear the same to the user and the manager who signs off on it (excluding bad UI). Point being, if someone can code just well enough to get by in their field, they will probably remain employed. This is a tricky problem to solve though, because so much of the practice of software engineering is qualitative (bordering on aesthetic, I would argue) and involves designing abstractions. While much of software engineering is analytical and must obey a certain set of axioms, higher-level systems and software design is really more akin to art and architecture than civil or mechanical engineering.')