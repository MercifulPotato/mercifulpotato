Item(by='musicale', descendants=None, kids=[25632819], score=None, time=1609728656, title=None, item_type='comment', url=None, parent=25625045, text='&gt; real world C is a lot less <i>performant</i> than people think it might be<p>What is meant here? Fast? Reliable? Secure? Memory efficient? Power efficient? Easy to write? Easy to maintain? Quick to compile? Easy to debug?<p>I have no illusions about the reliability&#x2F;security&#x2F;correctness of real-world C code, especially since it&#x27;s usually not compiled with a memory-safe compiler or run with memory-safe libraries and runtime environments (though it&#x27;s often sandboxed to limit the damage.) It&#x27;s relatively easy to introduce memory errors which are not detected by the compiler or runtime.<p>Certainly many algorithms and data structures (in C and other languages) exhibit tradeoffs including things like speed vs. memory use vs. code size vs. complexity, etc..<p>But C compilers are pretty fast, which I really like. Then there are&#x2F;were environments like Turbo Pascal or Think C, which seem to have been amazingly compact while offering a rapid edit-compile-debug cycle as well as decent runtime speed and code size.')