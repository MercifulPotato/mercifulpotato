Item(by='BeeOnRope', descendants=None, kids=None, score=None, time=1610699980, title=None, item_type='comment', url=None, parent=25787950, text='Yes, you don&#x27;t need C++ to get an inlined comparator, but C++ certainly makes it <i>easier</i> in the sense that you can get basically guaranteed inlining [1]. In the C case, your options are fewer, and often more reliant on optimization and the vagaries of the compiler.<p>In particular, I tried to modify glibc&#x27;s qsort to force inlining of the comparator, using both flatten and always_inline attributes, but failed probably because of the recursive nature of merge sort: the main sorting function is recursive, meaning it cannot be flattened without limit, which ends up inhibiting inlining of the comparator as well.<p>It can definitely be made to work, but it&#x27;s less automatic than C++ and compatators passed as template arguments. Of course, the &quot;specialize everything&quot; approach of C++ has plenty of downsides too!<p>---<p>[1] Really, what you get is guaranteed specialization, and then inlining follows easily from that, if the compiler decides it is profitable to inline the small comparator into the sort function.')