Item(by='ChrisMarshallNY', descendants=None, kids=None, score=None, time=1607352990, title=None, item_type='comment', url=None, parent=25332346, text='I enjoyed the read (but it isn&#x27;t really the type of article I usually come here to read. It seems to be something that may be better served in a management or personal improvement venue). It&#x27;s a bit disappointing to see it being treated so cynically, but that&#x27;s really who we are, in this industry (wish it were different, but we need to accept the bad with the good).<p><i>&gt; When a program stops working, do you face a baffling error message with no further guidance or clear instructions for how to get help?</i><p>Error handling is <i>incredibly</i> important to me.<p>Not just trapping errors, but also presenting them to the end-user. Masking technical details is quite important. Most engineers won&#x27;t ever be informed that the error happened, so there&#x27;s no reason to provide a core dump to the user. They just need to know that the program has encountered an anomaly, and how that affects the end user, at that moment. They need to be informed of the consequences of the error, and any possible mitigation.<p>Helping to remove the &quot;emotional sting&quot; from an error message is important. There was this excellent comedy routine, in the early &#x27;oughts, called &quot;Welcome to the Internet Help Desk&quot;[0]. In it, the support rep encounters a user that breaks down in tears, when confronted by a fairly standard Microsoft error message.<p>I&#x27;ve found that the best way to resolve errors, is to not encounter them. This is accomplished by a combination of good programming, and good usability. Doing things like disabling or hiding paths that could lead to errors, developing a carefully-worded product glossary, etc.<p>[0] <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=nL24aNugo_4" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=nL24aNugo_4</a>')