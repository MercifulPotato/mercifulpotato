Item(by='derefr', descendants=None, kids=[25934052], score=None, time=1611781773, title=None, item_type='comment', url=None, parent=25933348, text='Copyleft licensing was invented in an era when most things were written in C, and software fell into roughly four categories:<p>• Unix-ish black-box &quot;primitive&quot; tools, that were so focused on accomplishing one fundamental job that they were essentially &quot;final&quot; in their interfaces, with there being no point to extending them any further; where you reused them by <i>executing</i> them, not by integrating with them.<p>• A library for such Unix-ish black-box tools to use. Most tools that used any libraries at all, would use <i>one main</i> library to accomplish their <i>one primary</i> purpose, effectively making the tool a &quot;driver program&quot; for the library.<p>• Academic data-science&#x2F;statistics code.<p>• Cathedral-style highly-integrated software, e.g. Windows.<p>Copyleft was mostly devised <i>for</i> the purpose of licensing the codebases of the first two types.<p>As Unix tools are self-contained, they only &quot;infect&quot; direct forks. The GPL <i>originally</i> intentionally avoided infecting the things that called (i.e. interacted with) those tools — because, back then, a downstream project that &quot;uses&quot; a tool wasn&#x27;t vendoring in its own version, but rather relying on the <i>system installation</i> of that tool, through that tool&#x27;s known API; and it wouldn&#x27;t make sense for a license to be infectious through a standardized API.<p>It was intentional that libraries would infect their downstream clients with copyleft; but downstream clients, back then, were mostly just those single-purpose tools. It wouldn&#x27;t make sense for e.g. libgit to be GPL-licensed, but for git(1) to be proprietary.<p>Of course, there was also an awareness that the Cathedral-style codebases would have their whole monolith infected if they used the GPLed library. The idea there, though, wasn&#x27;t to actually cause that infection — it was to inhibit Cathedral-style codebases from using GPLed software at all.<p>(With the parallel awareness that such entities could always reach out to the project maintainers, and buy a separate license, just like you can purchase a license from any IP-holder. There were few-enough contributors per project, back then, that &quot;copyright assignment&quot; and such wasn&#x27;t a concern; you could just get a proprietary license from the one dude who built the whole thing.)<p>And that same consideration was implicit with academic use of GPLed software. FOSS programmers, back then, considered academic (or non-profit) integration&#x2F;derivation of their software to be something they&#x27;d grant a free license for if asked; and academics knew this, and so didn&#x27;t bother to ask for such licenses, because they knew they&#x27;d almost assuredly get one, for free, if-and-when it ever became important to do so.<p>---<p>The GPL was well-suited to this early-90s software IP ecosystem. It doesn&#x27;t fit nearly as well in the modern software IP ecosystem.<p>There&#x27;s a whole fifth category of software — semi-Cathedral, semi-Bazaar mega-tools, like youtube-dl or Calibre; or mega-libraries, like Qt, or LLVM, or WebKit; which both <i>are</i> components while also <i>consuming</i> many components themselves. The GPL never &quot;expected&quot; this type of software. This kind of software just didn&#x27;t exist back then; only its entirely-Cathedal final-product equivalent did.<p>Which is a problem, because it&#x27;s impossible to build something like WebKit or LLVM in a self-contained, &quot;you call it over a standard interface&quot; sort of way, where it&#x27;s non-infectious. These days, lot more projects are infectious, even when &quot;integrated&quot; at a much higher level of abstraction, than the GPL was ever <i>intended</i> to require.')