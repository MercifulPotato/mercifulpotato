Item(by='jbreckmckye', descendants=None, kids=None, score=None, time=1609006039, title=None, item_type='comment', url=None, parent=25545015, text='&gt; What astonishing progress! It&#x27;s almost as fast of a feedback cycle that you would have had working in Lisp at a REPL 30 years ago!<p>Indeed - I chose the word REPL for a reason.<p>&gt; Javascript is popular, but in most ways it&#x27;s actually a much worse language than PHP, especially for new learners. The package ecosystem is a pigsty. It only exists because of legacy.<p>Agreed.<p>&gt; I would hate to send some shiny new university grad down the route of learning that stack in depth when eventually, inevitably, it will be pushed out by something that sucks less. As soon as WASM matures to the point where in-browser UI that is NOT javascript&#x2F;DOM powered is feasible on most devices, we&#x27;re going to see a spate of new frameworks, new &#x2F; repurposed languages on the client, etc. and the big advantage of &quot;JS on both frontend and backend&quot; will go away.<p>Hard to say. JS has a powerful incumbent factor, and a lot of the difficulties in browser dev are less down to JS-the-language than asynchronous programming in an actively hostile runtime (web browsers). I think there will be a trough of disappointment when the e.g. Java devs realise that crossing the gulf between systems and UI dev is much bigger than just the programming language.<p>Right now the big movement for WASM is to do high performance frontend work in it. I have had some experience in this domain - e.g. zero GC webVR apps - and it&#x27;s probably the area where WASM will initially bring the greatest benefits. That means that initially the best supported WASM toolchains will likely be for systems languages like C++ and Rust.<p>So I think it&#x27;s likely that JS will be killed by a WASM targeting language, but that this language will be selected for its near term benefits on the web. And right now the momentum seems heaviest behind Rust.')