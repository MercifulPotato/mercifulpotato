Item(by='Jweb_Guru', descendants=None, kids=None, score=None, time=1603086678, title=None, item_type='comment', url=None, parent=24805834, text='For what I hope is the last time, whatever the merits of a type with no values, that does not describe the semantics of void in argument and return position in C.  ISO&#x27;s definition is not relevant at all here, since they are using definitions specific to C rather than type-theoretic ones, and given that you haven&#x27;t addressed any of the points I&#x27;ve made except to cite various standards bodies, I&#x27;m not really sure how else to explain this to you.<p>You are correct that it is possible to forego unit in exchange for defining vectors of length N as a fundamental type.  This is the solution used by Rust, for example, in defining its tuple types, and in Rust indeed the empty tuple and unit are equivalent.  Personally, I do not find this simpler than defining unit as a base type and pairing as a fundamental operation on types, since you are effectively just hiding the same cons&#x2F;nil definition in the definition of natural numbers used for the list length.  In any case, unit is not intended to automatically generalize to multiple types, and the rule for product types is a completely orthogonal feature that is useful by itself, so this seems like a bit of an aside.  It also seems a bit pointless to introduce a general type like tuples of arbitrary length if you are going to restrict &quot;arbitrary&quot; to 0 or 1 (well, not pointless in some contexts, but in this one it seems strictly more complicated than just having a unit type, since any type you could use with a 1-tuple already has to exist in the first place).<p>I don&#x27;t know why you assert that we don&#x27;t need bottom under this model, however.  A list of length zero is not the same as bottom, it is the same as unit (I believe you may have a fundamental misunderstanding about this?).  To model bottom in an equivalent fashion, you would want a mechanism for defining sum types with N constructors--0 constructors represents bottom.  And just like with the tuple case, this functionality is effectively equivalent to providing the bottom type plus a two-constructor sum type (although depending on the strength of your type theory, a more elaborate construction may be preferred, generally speaking you don&#x27;t need to be able to define more than two constructors at a time).<p>Just to reiterate (and close the door on my end of this conversation): bottom and unit are not the same, and your proposed solution does not allow you to represent bottom.  It allows you to represent void because void is not semantically bottom, it is semantically unit.  I am extremely confident that whatever solution you come up with for representing void, whatever its individual merits, will either be interpretable as unit, or not reflect the actual semantics of C.')