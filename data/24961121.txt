Item(by='CalChris', descendants=None, kids=None, score=None, time=1604252890, title=None, item_type='comment', url=None, parent=24960113, text='Agreed. Waterman&#x27;s thesis says this about that:<p>&quot;Several ISA features, including implicit condition codes and predicated moves, are onerous to implement in aggressive microarchitectures. Yet, their complexity often does not result in higher performance because their semantics were ill-conceived. For example, x86 provides a conditional load instruction, but, if the unconditional load were to cause an exception, it is implementation-defined whether the conditional version would do so. Thus, a compiler can only rarely use this instruction to perform the if-conversion optimization.<p>Recognizing the inefficiency of their conditional operations, Intelâ€™s recent implementations go to some lengths to fuse comparison instructions and branch instructions into internal compare-and-branch operations.&quot;<p>Yeah, doing condition codes right is complicated but then that&#x27;s the purpose of microarchitecture, to factor that complexity out.<p>RISC-V succeeds in having a minimalist to a fault design which is appropriate for a certain design point. ARMv8 and x86_64 are more useful for a broader set of designs. The burden now is on RISC-V to show that their minimalist approach is fast+efficient rather than just simple. You have to <i>get</i> something out of the simplicity; otherwise what you get is design debt.')