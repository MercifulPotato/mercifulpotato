Item(by='hinkley', descendants=None, kids=None, score=None, time=1602796209, title=None, item_type='comment', url=None, parent=24793099, text='I have only gotten as far as setting up K3s and am still figuring out how I want to deploy code to it.<p>Gotta say, the docker ps output on those machines looks like line noise to me.<p>Not all movement is progress. Young developers are incentivized to embrace new technology because it levels a playing field where time with a tool is your most important asset. That playing field is not real, but a lot of managers seem to think it is, so the strategy works. I don&#x27;t know how we sell a different version of reality there, but we need to figure it out.<p>At my first big job, the oldest developer told me shortly before he left that essentially we keep facing the same set of problems in a loop, and that if I watch for it I&#x27;ll see it happening. That was in many ways a very big shoulder to stand on.<p>That challenge, added to historical information I had learned in a class on distributed computing, changed my perception of my first loop, like I&#x27;d found a shortcut. In my second loop, I found myself having productive conversations with people on their third loop, while my coworkers were still chirping on about how it&#x27;s going to be different this time.<p>We just keep playing a game where the rules (like cost inequalities between resource classes) get tweaked every game, but quite often they revert back to the previous rules in the following game (because the people who make hardware for that resource finally figure out how to fix their bottleneck). But instead of recycling or democratizing the tech that worked last time the rules looked that way, we reinvent it badly with new names.<p>Elixir is a rare exception in this case, which is part of what attracts me to it. It&#x27;s essentially recycling 25% of Erlang and 45% of Rails <i>and being transparent about it</i>, creating a new recipe out of old ingredients that have worked well in the previous 4 tech cycles.')