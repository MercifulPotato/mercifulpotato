Item(by='TheAsprngHacker', descendants=None, kids=None, score=None, time=1606844270, title=None, item_type='comment', url=None, parent=25267358, text='You can have recursion right from Beginning Student Language (which lets you define top-level functions and call them recursively). Structural is taught early, together with lists. Structural recursion is explained together with recursive data: To unpack the data (any data, not just recursive), unpack the inner members, and therefore the structure of the program follows the structure of the data.<p>As someone who is taking the accelerated version of this course right now, but had prior functional programming experience, I did feel limited at first. Some other people responded negatively to the student languages because they weren&#x27;t &quot;mainstream.&quot;<p>As for the expressive power of languages, as a matter of fact, Felleisen wrote a paper that rigorously defines this idea. Here is a talk by Shriram Krishnamurthi that discusses it: <a href="https:&#x2F;&#x2F;pwlconf.org&#x2F;2019&#x2F;shriram-krishnamurthi&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pwlconf.org&#x2F;2019&#x2F;shriram-krishnamurthi&#x2F;</a> It turns out that local transformations (macros) do not add expressive power. A language feature adds expressive power if you can find two programs that are observationally equivalent in the base language, but not the extended language.')