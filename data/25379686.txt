Item(by='Groxx', descendants=None, kids=None, score=None, time=1607639480, title=None, item_type='comment', url=None, parent=25377336, text='I suspect it is common.  And mostly inevitable.  When you have 10^N engineers working on something, protecting them from each other (and themselves) grows increasingly important.  At some point, it becomes your <i>main</i> priority, as without it you have a totally non-functioning system.<p>Which partly implies that the only solution is to not grow to that scale.  Keep a smaller, more skilled team instead.  In most cases I think that&#x27;d be better, and I think most people (and companies) would agree (if only they could <i>hire</i> those skilled teams reliably)...<p>... but <i>sometimes</i> throwing more people at a problem really is the best (or only) option, e.g. when you have to deal with a large volume of ridiculous external constraints.  For example: my first job was at a company that aggregated loan providers, which entailed consuming <i>hundreds</i> of random PDFs per day and dozens of weird RPC calls.  We had dozens if not hundreds of hand-crafted bits of automation to detect when things changed and handle the new format.  Many APIs had hand-rolled XML parsers and producers... because the company we were calling would choke if your attributes weren&#x27;t in a specific order, or if X wasn&#x27;t within a specific number of bytes from the start of the request, or they returned invalid XML.  It was absolutely ridiculous, but there&#x27;s no way a bunch of banks were going to fix their APIs for us, so there&#x27;s not much of an option but to do it by hand.')