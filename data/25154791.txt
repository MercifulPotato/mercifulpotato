Item(by='stouset', descendants=None, kids=[25155043], score=None, time=1605822588, title=None, item_type='comment', url=None, parent=25148891, text='Agreed again.<p>Also, the longer I write code the more I find myself <i>avoiding</i> anything but single-line if&#x2F;unless statement modifiers. And I avoid if&#x2F;else in almost all scenarios.<p>For the first situation, most `if` branches fall into two categories: guard statements, or genuine branching logic. For the former, guard statement style greatly improves clarity and you only need the statement modifier form. For the latter, I find in almost all cases you either should be writing <i>two</i> methods (one for the true case, one for the false case), or the inner logic of the `if` should simply be its own method.<p><pre><code>    return nil  if     thing?\n    return true unless other_thing?\n\n    logic()\n\n    special_situation if\n      another_thing?\n\n    logic2()\n</code></pre>\nThat just reads significantly easier to me than anything involving nested conditional logic. This isn&#x27;t <i>always</i> the case, but it is often enough that I write a block-style `if` less than once a month.<p>For `if`&#x2F;`else`, I avoid them at all costs. If there&#x27;s exactly two cases, odds are I probably want to separate methods (and can write a short method that chooses between the two if necessary). In almost all other cases, I&#x27;d infinitely rather prefer a `case` statement that can use tabular alignment for clarity.<p><pre><code>    case foo\n      when bar then baz\n      when ham then spam\n      else          qux\n    end\n</code></pre>\nThat&#x27;s <i>way</i> easier to parse visually than if&#x2F;else&#x2F;elsif&#x2F;elsif&#x2F;else blocks. Plus it makes sure that I keep absolutely minimal logic inside of the branched cases, and never have nested branching.')