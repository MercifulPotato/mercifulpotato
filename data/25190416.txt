Item(by='asdfasgasdgasdg', descendants=None, kids=[25190911, 25190814, 25194570, 25191740, 25193031, 25196250, 25194788, 25190717, 25191434, 25192114, 25192038, 25195712, 25194026, 25192963, 25191146], score=None, time=1606158616, title=None, item_type='comment', url=None, parent=25183811, text='We have a kind of varint-based delta decoder at work that can read up to 15 bytes past the end of its buffer, because it uses uint64s to read the buffer faster, than the buffer doesn&#x27;t encode byte-length information. Since it doesn&#x27;t know how many bits wide the last entry will be, and since it reads ahead a little, it can end up 16 bytes starting at the last byte and proceeding 15 bytes onward. It doesn&#x27;t matter that these bytes are filled with garbage, because a well formed program will only use the bits from one of the valid bytes. The outer code knows how many entries to look for, so it just calls the advance function the correct number of times, and those bits past the end don&#x27;t get used.<p>This can lead to a pretty subtle crash because, except in msan mode, reading those fifteen bytes won&#x27;t cause any problem except at the page boundary. This is because you don&#x27;t corrupt the sentinel bytes, since they&#x27;re never written. So to detect the bug you either have to run the code in debug mode (which we rarely do, because the code is deep inside a very expensive database system), or you have to get unlucky.<p>I tried fixing this, but adding a &quot;past the end&quot; test really hurt performance. Instead, we continued with the preexisting solution: copy the data into a buffer fifteen bytes longer than the data, then decode it. T_T')