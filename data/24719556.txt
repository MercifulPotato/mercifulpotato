Item(by='oconnor663', descendants=None, kids=None, score=None, time=1602168552, title=None, item_type='comment', url=None, parent=24719203, text='&gt; I remember trying it out back in 2014 and saw nothing of interest<p>The 1.0 release was in 2015, and there wasn&#x27;t much industry adoption before that. Today most of the big tech companies are using it for something. Microsoft published a series of articles this year about using Rust internally.<p>&gt; A lot of the main &quot;selling points&quot; of Rust are getting introduced in C++.<p>In the C++ world, Rust&#x27;s biggest selling point by far is memory safety. The safety story is based on notions of ownership, borrowing, and lifetimes that are built into language itself. Most of the standard library, and many foundational crates like Serde and Rayon, have designed their APIs around these concepts. These things tend to go &quot;all the way down&quot;: Every single function or datatype that deals with references defines its lifetime requirements for those references, and every single callsite of one of those functions or variable of one of those types is statically checked to meet those requirements.<p>I wouldn&#x27;t go so far as to call this an &quot;all or nothing&quot; thing. Languages like TypeScript make it clear that you can get good value out of a strict type system even when much of the ecosystem isn&#x27;t strict. But there&#x27;s a <i>lot</i> of value in being on the &quot;all&quot; side of the fence here -- especially for languages with pointers and destructors -- and I think it&#x27;s unrealistic to expect an established language like C++ to make that many changes.<p>&gt; Also, what is it about Rust that gets automatic top view on HN?<p>Having a new, serious contender in the C&#x2F;C++ world is exciting! And maybe Rust being more challenging to learn makes people more excited about being &quot;in the club&quot; when they do learn it. On the other hand, all the talk about memory safety seems to make some people kind of...self-righteous?...about the language, which we would all prefer to see less of :p')