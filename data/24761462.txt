Item(by='nfw2', descendants=None, kids=None, score=None, time=1602553452, title=None, item_type='comment', url=None, parent=24759588, text='I agree.  The assertion in the article that &quot;when engineers are developing products strictly for other engineers...their UX is fantastic&quot; seems way off, at least from my experience.<p>I think one of the problems that no one has mentioned yet is that developers like to think about things in logical absolutes, which doesn&#x27;t work well in UX, which is a more holistic field.  In UX, there are always trade-offs.<p>For example:\n - Adding features to a UI could help support more complex use cases.\n - BUT the new complexity might using the core functionality harder.\n - OR we could refactor to a different conceptual model that intuitively supports all use cases\n - BUT this shift could totally confuse the existing users who are used to the old model.<p>The only way to solve these sort of problems is to collect information about all the tradeoffs, make a judgement call, get the change(s) in front of users, and iterate.<p>Unfortunately this isn&#x27;t always how internal dev tools are built.  I&#x27;ve seen entire systems planned and roadmapped following some abstract ideal like &quot;consistency&quot; or &quot;flexibility&quot; and built out over months or years without ever really consulting the users who will be using the systems.  Concerns about the system being too confusing are dismissed because &quot;we&#x27;ll just add documentation in confluence.&quot;')