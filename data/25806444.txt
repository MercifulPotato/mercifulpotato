Item(by='mr_tristan', descendants=None, kids=[25808821], score=None, time=1610838929, title=None, item_type='comment', url=None, parent=25805314, text='I suspect that Android and Kotlin have really helped Gradle adoption. But even before this, Gradle has a very easy &quot;customize it&quot; approach. Though... honestly, it might just be that people hate XML.<p>Personally, I&#x27;ve stuck with Gradle, even though I&#x27;m not really happy with it, mostly because of these features:<p>1. Composite builds - <a href="https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;composite_builds.html" rel="nofollow">https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;composite_builds.h...</a>\n2. Dependency substitution\n3. &quot;local&quot; plugins, i.e., stuff in `.&#x2F;buildSrc`<p>These features let me combine projects defined in multiple git repositories in a &quot;workspace&quot; project. Then IntelliJ can read all these projects, and it magically substitutes my local version over a specific version. Ergo, I can have multiple libraries, edit and debug them and and application code. When it&#x27;s time to commit, I push them up in individual MRs back in GitLab - And I could swear GitLab was going to make some kind of multi-project MR possible at some point.<p>So, the &quot;workspace&quot; is generally for development, then we use GitLab CI for each project independently, for a &quot;formal&quot; versioned approach. It&#x27;s quite nice.<p>In any case, I&#x27;ll typically work with a pretty broad set of apps and libraries in a single workspace, typically between 15-30, and Gradle and IntelliJ handle this just fine. Our Maven projects with fewer modules never seem to get things working as smoothly ironed out - I suspect it&#x27;s something wacky going on with the build.<p>So, while Maven allows build composition, but doesn&#x27;t really have the dependency substitution concept, useful for local workflows. Also, it just doesn&#x27;t seem to perform as well, especially with the IDEs we&#x27;ve been using. I can&#x27;t explain it, haven&#x27;t investigated it, but then again, I&#x27;ve found a solution that works.')