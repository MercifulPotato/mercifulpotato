Item(by='necubi', descendants=None, kids=None, score=None, time=1603216236, title=None, item_type='comment', url=None, parent=24838111, text='Sort of. Let&#x27;s say you&#x27;re counting the number of unique users visiting your site in a 5 minute fixed window. This is pretty simple: you have a set, and each time a request comes in you add it to the set. At the end of the 5 minute window you output the set cardinality to your downstream consumer and throw out the raw data.<p>But what if this is a mobile app, and requests may be delayed by minutes or even hours due to gaps in cellular connectivity? In that case, we need a strategy to handle &quot;late arriving&quot; data.<p>Flink has several approaches for this, but they&#x27;re all based around a &quot;high-watermark.&quot; This is basically an estimate at time T that all data from time T-D has arrived. Once the watermark has passed the end of our window we consider it closed and can compute the final value for it. (How you compute the watermark is up to you; typically you use a fixed value but this can be made more accurate if you have out-of-band information).<p>In addition to the default behavior (where late-arriving data is dropped) you can customize this by specifying a trigger that runs when late-arriving date comes, which can be used to e.g., update an external datastore. However at that point the reconciliation is outside of the scope of Flink.<p>There are various other ways to organize this within flink, i.e., you can keep the windows open indefinitely, update the internal state of your flink job, and serve directly from the flink state, or you can use a periodic trigger to periodically update your downstream from that state. Obviously this will require a larger state size (in disk or in memory depending on your state backend) since you won&#x27;t be able to close out the window and have to keep all of the data around.<p>Much more about all this in the Flink docs (<a href="https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.11&#x2F;concepts&#x2F;timely-stream-processing.html" rel="nofollow">https:&#x2F;&#x2F;ci.apache.org&#x2F;projects&#x2F;flink&#x2F;flink-docs-release-1.11...</a>).<p>Also a lot of the theory behind this comes from the Google Dataflow paper (<a href="https:&#x2F;&#x2F;research.google&#x2F;pubs&#x2F;pub43864&#x2F;" rel="nofollow">https:&#x2F;&#x2F;research.google&#x2F;pubs&#x2F;pub43864&#x2F;</a>) which is also just a great read.')