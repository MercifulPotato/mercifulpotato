Item(by='jnwatson', descendants=None, kids=[25302350], score=None, time=1607089871, title=None, item_type='comment', url=None, parent=25300233, text='I have a lot of experience using concurrency in Go, and for the last couple years have been at the bleeding edge of Python async.  The tradeoffs between the two approaches are immense.<p>With the virtual thread model you have:<p>* No function coloring problem.  This also means existing code is easier to port.<p>* possibility of transparent M:N scheduling.<p>* Impedence mismatch with OS primitives.<p>* Much more sophisticated runtime.<p>* Problematic task cancellation.<p>* Lots of care still needed for non-trivial inter-task synchronization.<p>With the async API model you have:<p>* Viral asyncification (the method color problem).<p>* Simpler runtime.<p>* Obvious and safe task cancellation.<p>* Completely orthogonal to parallelism (actually doing more than one thing simultaneously) for good and for bad.<p>* Inter-task coordination is straightforward and low-overhead even for sophisticated use cases.<p>* Higher initial learning curve.<p>I&#x27;m leaning toward liking the async approach more, but that might be just because I&#x27;m deep in the middle of it.  I think the biggest argument in favor of virtual threads is the automatic parallelism; that&#x27;s also the biggest argument against:  free running threads require more expensive synchronization and introduce nondeterminism.')