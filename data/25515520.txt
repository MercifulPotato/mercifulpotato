Item(by='lmm', descendants=None, kids=None, score=None, time=1608710636, title=None, item_type='comment', url=None, parent=25514483, text='&gt; Based on my not-much experience with type inference, the code ends up with neither. Sure the compiler can figure out what it is, but the humans not so much.<p>A decent IDE should make the type information available when you need it.<p>&gt; This seems reasonable to me, but I&#x27;m curious what counts as a &quot;program bug&quot;, or how to know that some error is recoverable.<p>I would assume recoverable errors would be explicitly represented in an Either-like style, and if you don&#x27;t have a better way to handle them you can explicitly turn them into a program bug (exception&#x2F;panic) by some unwrap()-like operation.<p>&gt; an unexpected nil is really a type error.<p>Right, which is why you want &quot;nullable x&quot; to be distinct from &quot;x&quot; in the type system. The problem isn&#x27;t the NPE per se, it&#x27;s silently allowing the program to continue in an invalid state until the error happens far away from the problem that caused it, and that&#x27;s just as much of a problem in Clojure.<p>And so either you create a special ad-hoc thing in your type system with a bunch of syntax and special cases in the language standard that misbehave when your users do something you didn&#x27;t anticipate, or you can write a normal datatype to represent &quot;nullable x&quot; and everything will just work, and then maybe put some lightweight syntax sugar on top if you really want to.')