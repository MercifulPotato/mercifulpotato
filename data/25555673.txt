Item(by='socialdemocrat', descendants=None, kids=None, score=None, time=1609116714, title=None, item_type='comment', url=None, parent=25554667, text='The approach of making a small instruction-set with optional extensions means RISC-V is very well suited for making specialized co-processors. This story discuss that more in detail: <a href="https:&#x2F;&#x2F;erik-engheim.medium.com&#x2F;apple-m1-foreshadows-risc-v-dd63a62b2562" rel="nofollow">https:&#x2F;&#x2F;erik-engheim.medium.com&#x2F;apple-m1-foreshadows-risc-v-...</a><p>On example of this is Esperanto Technologies, which has created an SoC with slightly more transistors than the M1, which has over 1000 RISC-V cores which implement the RISC-V vector instruction set extension to allow the processing of a large number of matrices and vectors. Basically the ET-SoC-1 as they call it is supposed to offer superior performance in the Machine Learning domain. 30-50x better performance with 100x less power consumption.<p>Esperanto Technologies are using the full flexibility of RISC-V by having more general purpose RISC-V cores, four of them, which are meant to run an operating system, which schedules machine learning tasks to this large number of smaller vector oriented RISC-V cores.<p>My understanding is that creating a good ISA is actually quite a task. RISC-V has over 1000 contributors over years who have made it happen. Esperanto Technologies apparently began with their own proprietary ISA for their coprocessors but found they could not beat RISC-V, and that making something better would just cost a lot more money and resources.<p>So in short the value proposition is in having a highly customizable ISA, that is well designed. There are no such other options on the market. ARM isn&#x27;t highly customizable, since it has over 1000 instructions you must implement. RISC-V only has 47 instruction you must implement. All fairly simple ones.')