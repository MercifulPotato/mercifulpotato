Item(by='kansface', descendants=None, kids=[25192112], score=None, time=1606165360, title=None, item_type='comment', url=None, parent=25190583, text='&gt; For example, we have code in systems that performs network retries, and I have code in my own software that performs polling operations when a request&#x2F;response &quot;should&quot; work, but in practice, a variety of reasons cause it to be less robust.<p>Apples and oranges.  The network is unreliable and all code dealing with the network should treat it as such.  The file system and disks are also unreliable, but are probably more reliable by a factor of 10K than the network.  Engineers mostly choose to ignore these potential errors via unintentional decisions or do stuff like let the process crash because restarting an API server once a year doesn&#x27;t matter.  Of course, not everyone has that luxury.  Determining how much memory to allocate ought to be perfectly deterministic which is why this is such a code smell.<p>&gt; where is the line, exactly?<p>The line to me is pretty clear in this case!  There are all sorts of reasons why this code would be acceptable: if fixing the code to prevent the bug[s] is sufficiently onerous as to cause more bugs than the fix would prevent, or is so much work that it would never be undertaken, or so complex that the code is un-mergable, an emergency hot fix... all acceptable so long as the code is documented as such.  In other words, the line crossed here was in the comment.  Where did the number 5 come from?  Where&#x27;s the link to an issue tracking memory allocation&#x2F;estimation?<p>I believe most comments in code are worse than useless - that we shouldn&#x27;t merely document bad code, but write code that is so blindingly obvious and idiomatic  that comments detract from its perfection.  Comments exist when we deviate from the platonic ideal â€” the real world with leaky abstractions, deadlines, bugs and dollars.')