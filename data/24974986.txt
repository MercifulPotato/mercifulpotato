Item(by='daly', descendants=2, kids=[24975908], score=3, time=1604362661, title='Beauty is in the eye (and hand) of great programmers', item_type='story', url=None, parent=None, text='Digging through my (paper) library the other night I came across the listing (on green-bar, fan-fold) of the implementation of a LISP system written around 1967. I used it quite a bit back in the day. It is implemented in old-school FORTRAN. By old-school, I mean a FORTRAN that only had computed IF statements, as in<p>IF (X) 3,4,5<p>which means<p>if x&lt;0 then goto 3\nif x=0 then goto 4\nif x&gt;0 then goto 5<p>This is a listing of a punched-card deck. Columns 73-80 are sequentially numbered so that, if you dropped your card deck, you could sort the cards by those columns. The increment per-line is 100 so the numbers are 00000100, 00000200, 00000300, etc. This allows new cards to be put in between existing cards while maintaining the sort sequence, e.g. 00000150.<p>This program is a work of beauty. Many of the statements have numeric labels so they can be reached by GOTO or computed IF statements. This programmer chose the label numbers so they are in ascending order (so you know where to look for a jump target). They are 4 digit labels where the left-most digit is the main task (e.g. handle recursive function calling), the next digit is a subtask within the main task, etc.<p>The FORTRAN function names mirror the intended LISP names, e.g. CAR, CDR, etc. so it is clear to a LISP programmer what the semantics will be. The call stack is named STACK, etc.<p>Every grouping has a comment line (character in column 1), e.g.<p>C    EVALUATE THE FUNCTION<p>I am typing in the source code so I can share it with the LISP history site. Something this beautiful deserves to be preserved. This programmer is an artist.<p>Read source code. You can tell how good a programmer is just by looking.')