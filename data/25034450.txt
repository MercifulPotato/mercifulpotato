Item(by='KMag', descendants=None, kids=None, score=None, time=1604927836, title=None, item_type='comment', url=None, parent=25034099, text='Since the days of phone phreaking, we&#x27;ve known in-band signalling is just a terrible idea.  Any time a legal message token&#x2F;signal&#x2F;sequence in your data payload can escape data to metadata&#x2F;code status, encapsulation complexity goes way up and at least one implementer is going to screw something up in a bad way.  XSS was entirely predictable from the design of &lt;script&gt; tags and onload, onclick, etc. handler HTML tag attributes.<p>One alternative would be to force all &lt;script&gt; tags to come immediately after the &lt;html&gt; tag (before any &lt;head&gt;, &lt;body&gt;, &lt;style&gt;, etc. tag), and have it be a fatal error disabling scripting if a script tag came after any other html tag except for &lt;html&gt;.  You&#x27;d also need to reverse the way onlead, onclick, etc. handlers are set, having them set from the script side instead of setting handlers via html tag attributes.  If you were extremely careful about the design, you might be able to have scripts opt-in individual functions to being handlers, but the corner cases get hairy very quickly.<p>The are some other solutions involving unambiguous length-prefixed type-tagged sections clearly separating text and code, but those are better suited to non-textual formats, and a weird hybrid text-and-binary format (such as PDF) is another type of security minefield.<p>Edit: formatting.  Also, one of my favorite classes was a retrospective look at a variety of computer systems, critiquing very good and very bad design decisions.  We looked at X11, zlib, Therac-25, Ariane 5, etc.')