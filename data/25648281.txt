Item(by='BoorishBears', descendants=None, kids=[25650957], score=None, time=1609868525, title=None, item_type='comment', url=None, parent=25648000, text='Not having generics, by definition, invites a lot of repetition and boiler plate. I know generics are overrated and coming soon, but right off the bat that stuck out.<p>I recall a point where I had written a function that needed to return a channel, but of course had to forgo types due to the lack of generics.<p>The end result was having to wrap that channel in another channel that added typing at each call site.<p>I asked around in go circles if that made sense, and called out how bad the felt but the answer was &quot;no that&#x27;s great! channels are cheap! the repetition is good because it&#x27;s simple!&quot;<p>-<p>The error handling has some sore points to that end too, and the implicit shadowing with shorthand assignments on one hand makes it easier to deal with multiple errors, but on the other hand introduced subtle logic bugs on one than more occasion where &quot;err&quot; was silently shadowed, which I greatly disliked.<p>I&#x27;m actually suprised Go didn&#x27;t forgo shadowing for the shorthand operator and force people to label their errors when dealing with multiple, it seems very &quot;in brand&quot;, but I guess even Go draws the line somewhere lol<p>-<p>Then there&#x27;s the whole stack trace situation. Which after plenty of reading still just wasn&#x27;t making sense. I mean the idea of logging a stack of wrapped messages sounds very nice, but man proper stack traces not being <i>the</i> first class citizen of error handling just did not make sense to me in a language I hear referenced for systems work so much (and I realize they can be had)<p>I saw proposals to rework Go&#x27;s error handling, I don&#x27;t know if any progress has been made to that end, but it&#x27;s another example where simplicity can get in the way of itself<p>-<p>And I&#x27;ll balance this all out by saying it was still fun to write, I don&#x27;t want to seem like I&#x27;m just shitting on Go for existing.<p>It&#x27;s just these little warts that I kept getting over with just a little bit of &quot;idiomatic Go&quot; which I often found was just writing a little bit more code than you&#x27;re used to, started to add up.<p>And eventually I realized I was creating something that, while very easy to reason about, had a lot more to reason about than it needed to. That&#x27;s where I kind of petered out in my personal usage.')