Item(by='ericbarrett', descendants=None, kids=None, score=None, time=1607109216, title=None, item_type='comment', url=None, parent=25302636, text='Long before leetcode, I used to ask an &quot;algorithm&quot; question in interviews.  I don&#x27;t remember it exactly, but IIRC it was about determining quickly if a number was 2^n-1 for any n.  (Don&#x27;t shoot me, this was a decade ago.)<p>There were three broad ways candidates answered it:<p>1) Hack out a for-loop-style bit count.  This was good, because even though it wouldn&#x27;t be optimized, it demonstrated they could understand the problem and at least conceptualize a solution.<p>2) Give the &quot;leetcode&quot; best-answer (it was some bitwise math trick).  I&#x27;d then ask if they&#x27;d seen the problem before, and the answer was always yes.  This was a mark in their favor—but no better than (1)—and also a signal I needed to ask them a follow-up question that actually made them think.<p>3) Code a bit, but not quite arrive at a solution. I&#x27;d then probe them about their thought process.  Not an automatic fail, sometimes our brains just don&#x27;t walk down the corridors we want them to at a given time, especially during an interview.  (One candidate couldn&#x27;t hold the marker steady because his hands were shaking too much!  Poor guy.)<p>4) Give up and say they had no idea.  Obviously the worst case for the interviewee.<p>The purpose was not to check a candidate&#x27;s recall and test-taking abilities, but rather to watch them reason through a novel problem, appropriately limited in scope for the interview timeframe.  Case (2) served as a great short-circuit to block test-preppers lacking actual experience.')