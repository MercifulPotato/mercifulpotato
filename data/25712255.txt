Item(by='skohan', descendants=None, kids=[25714936], score=None, time=1610266729, title=None, item_type='comment', url=None, parent=25707546, text='&gt; type safety and correctness simply arenâ€™t nearly as important as velocity from an economic perspective<p>In my experience type safety is one of the most factors in terms of being able to produce code quickly, at least once a project grows beyond a couple hundred lines.<p>I agree with your overall point, and I think the advantages of Go are especially relevant in a team setting: Go&#x27;s categorical aversion to complexity makes it much more difficult to write code that someone else will not understand, where Rust projects can become relatively impenetrable when they wade too far into getting &quot;clever&quot; with the more esoteric aspects of the type system.<p>Also the learning curve is real: you can take a Javascript developer and get them writing Go code in a couple of weeks.  If you hire someone who&#x27;s not experienced with Rust for a Rust project, you may be paying them for months just to get up to speed.<p>Don&#x27;t get me wrong, I&#x27;m a huge fan of Rust and use it for almost all of my personal projects currently.  But I think the idea that Rust can become the main programming language in all settings comes from a place of heavy bias.  Rust is definitely on one extreme when it comes to complexity, and it&#x27;s a more relevant trade-off for some use-cases than others.<p><i>aside</i> - I know it&#x27;s a minority opinion, but I actually think that Swift is a sweet-spot language in terms being simple to program in like Python (by aggressively obviating away low-level details), but giving you many of the powerful tools for correctness which Rust has, like algebraic types.  It&#x27;s a shame that it&#x27;s painful to use in all but a few &quot;blessed&quot; applications.')