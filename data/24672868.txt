Item(by='tsimionescu', descendants=None, kids=None, score=None, time=1601740915, title=None, item_type='comment', url=None, parent=24672505, text='There are many ways to look at this. One of the simpler ones is looking at the Rx side: a frame has arrived on the network interface. <i>Something</i> needs to decode that and decide what to do with it, perhaps dropping it immediately.<p>The TCP&#x2F;IP stack will interpret the Ethernet headers, drop the frame if it is not addressed to any of the machines, check checksums, handle ARP requests etc. Also, the stack would buffer the frames until it can reassemble an entire IPv4 datagram out of them. Then, it will perform similar checks on the datagram destination address as above.<p>Finally, with the IP datagram in hand, we can decide whether to hand the payload over to the TCP handler, the UDP handler, the ICMP handler, or perhaps others. Of course, we need some TCP knowledge as well, to allow multiple TCP handlers to co-exist, choosing the right one to forward the packet to by port.<p>At all of these steps there are other concerns that need to be handled. Network security tools should get to look at the IP addresses and MACs to decide if the packet is accepted at all. Raw sockets created by user space can receive the Ethernet frames or IP datagrams directly, before other processing. There can also be contention on those as well (e.g. Maybe 2 processes both open a raw socket on the same NIC - who gets the bytes?).<p>Multiple NICs on the same machine also need to be shared and load-balanced. The Linux kernel for example handles routing between these, even applying networking decisions such as advertising IPs from one NIC on other NICs when it thinks it can improve delivery rates.<p>Now, all of these can and have been done in user-space for various reasons. But it&#x27;s important to understand that there is a large amount of processing. Also, given the importance of networking to IPC and security, there are also security considerations at almost every step of the way. For example, if two privileged processes on the same machine are communicating over a virtual NIC with static IP allocation, can they expect their communication to be isolated from a non-privileged process running on the same machine, or do they need to use an encrypted&amp;authenticated scheme? A centralized TCP&#x2F;IP stack can make that guarantee, a per-process stack can&#x27;t.')