Item(by='jonnymoe', descendants=None, kids=None, score=None, time=1606050031, title=None, item_type='comment', url=None, parent=25176252, text='Core contributor here: I think you&#x27;re right when talking about DSLs ONLY introdrucing a high level of abstraction. But Matestack&#x27;s first layer only maps HTML tag rendering to Ruby method calls, which actually doesn&#x27;t add any abstraction and thus gives you the same level of flexibility when implementing things. The advantage of doing things in pure Ruby (even without any abstraction layer) is simply that it&#x27;s now possible to utilize Ruby&#x27;s languange features to create clean and readable UI code within a proper Ruby class - which means you can use class inheritance and modules for UI code structuring. That could be a big thing if you&#x27;re into writing Ruby code ;)\nOn top of that Matestack offers components (used via a DSL) with a higher level of abstraction in order to hide implementation complexity of - for example - rerendering a specific part of the UI. The idea behind these components is to drastically reduce the amount of code and effort you have to invest in order to implement typical UI requirements. And yes it&#x27;s true: When using these components you loose some flexibility on how exactly things will work but you gain development speed and productivity. If the components don&#x27;t perform as desired, you simply create your own component in pure Ruby or pure Vue.js and do whatever you want - e.g. consuming a JSON API and perform client side rendering. Without this customization path I would totally agree with what you said here: &quot;the problem of DSLs is that they can quickly turn into giant pain in the ass once you need to do something they aren&#x27;t prepared for&quot; Matestack tries to enable you to use components with high level of abstraction next to components with low level of abstraction next to your very own components... and they are all meant to live happily side by side :D')