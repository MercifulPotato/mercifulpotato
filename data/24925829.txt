Item(by='tomhallett', descendants=None, kids=[24926842], score=None, time=1603931935, title=None, item_type='comment', url=None, parent=24920702, text='My goal is to write a demo app with:<p>- Rails<p>- StimilusReflex<p>- view_component (<a href="https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;view_component" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;view_component</a>)<p>- Web components<p>With these 4, it divides responsibilities very cleanly&#x2F;pragmatically: Rails is your app framework.  view_component is how you divide your view into an organized&#x2F;flexible structure.  StimilusReflex is the &quot;reflexive&quot; bridge between the 2.<p>What happens when you need just a sprinkle of javascript to re-render a component when websockets&#x2F;StimilusReflex are too slow (ie: user interacting with a color picker or something)?  You could use Stimilus.js to sprinkle this interactivity... BUT you might end up with duplication between your view_components and your Stimilus.js controller.  If you use webcomponents, then you can follow the open&#x2F;closed rule:  Your view_component can only interact with your custom webcomponent and then your webcomponent knows how to render&#x2F;re-render those custom bits.  So it doesn&#x27;t matter if that webcomponent is rendered from: initial page load, StimilusReflex, or rapid js events (before they are throttled to StimilusReflex), it&#x27;s all goes through the webcomponent &quot;front door&quot;.')