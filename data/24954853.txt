Item(by='jrockway', descendants=None, kids=None, score=None, time=1604175420, title=None, item_type='comment', url=None, parent=24953549, text='Generally I agree with you and tend to avoid writing or calling functions that can panic.  I make a slight exception in this case because it will &quot;never&quot; hit the error case; you are &quot;always&quot; calling the RPC through an interceptor that adds the necessary value to the context, so your MustGet functions will &quot;always&quot; work.  I use &quot;quotes&quot; around never and always because ... sometimes someone edits the code to delete this invariant, and it is very easy to do that.  But, it explodes loudly when it panics, so at least you can go in and fix the problem without much effort.  (It would be really insidious to return an error and not check it -- some code three functions deep would then blow up with a nil pointer exception; or to return a subtly-not-working default value that cause subtle broken behavior that&#x27;s hard to detect.   Panics are preferred because the program crashes at the exact line of code that&#x27;s broken.)<p>For any case where the error would depend on runtime input, rather than compile-time structure, you should return and check an error.  If hitting the error case means &quot;we need to edit the code and release a new version&quot;, panic is a fine tool to surface that problem.<p>All in all, I&#x27;d basically be happy either way.  If you make your GetFoo function return an error that all the handlers check, I&#x27;d approve that PR.  If you judiciously panic when something that can &quot;never&quot; happen happens, I&#x27;d approve that PR.  The obvious preference is to update the codegen to pass those parameters in explicitly, so that if the interceptor structure changes, the program will simply not compile.  But, the design of things like net&#x2F;http and grpc kind of preclude easily doing that, and I&#x27;m not sure it&#x27;s worth the effort to write something on top of those that fix the problem, when it&#x27;s simple enough to do the unpacking manually and your integration tests test it for free anyway.')