Item(by='opheliate', descendants=None, kids=[25454878, 25455447, 25455387], score=None, time=1608200300, title=None, item_type='comment', url=None, parent=25442165, text='This is a very strange &quot;getting started&quot; guide to C, and I&#x27;m not sure who the intended audience could possibly be.<p>The tone at the start really does seem to be aimed at &quot;absolute beginners&quot; (&quot;[...] programs must be written in a very strict way. Miss a comma and the program will stop working&quot;), but then it quickly gets into the weeds without much explanation.<p>I&#x27;m trying to imagine an beginner reading this: The first thing we&#x27;re told to do is &quot;Installation&quot;, that makes sense. Then the first line says &quot;The Apple provided C compiler is the LLVM clang compiler&quot;. But what&#x27;s a compiler? How does that help me learn C? The tutorial hasn&#x27;t even indicated that C is a compiled language, or what a compiler does at this point, and it doesn&#x27;t elaborate on this throughout.<p>We go on to a hello world example, and we&#x27;re told to type in some code (&quot;Remember: programming languages are very strict, so type it exactly&quot;), and then we&#x27;re given an explanation of what it&#x27;s doing: Great! I can&#x27;t wait to learn what this means. But the explanation uses terms that a beginner would not be familiar with: The very first line of the explanation is &quot;the first line loads the stdio.h function library, which provides the printf() function, used to write a message on the terminal&quot;. What&#x27;s a function? What&#x27;s a library? Obviously these things are trivial to anyone with programming experience, but for an <i>absolute beginner</i>, these terms don&#x27;t yet have an intuitive meaning, and they&#x27;re never fully explained in the article.<p>We compile that program (again, never being told what compilation is or why it&#x27;s necessary), and then we&#x27;re suddenly thrust into writing a GTK+ program. We haven&#x27;t covered the absolute basics like types, pointers, etc, and yet we&#x27;re given a huge chunk of (reasonably complex) code with no explanation, and just told to &quot;read the code bottom to top&quot; as an &quot;additional hint&quot;.<p>I think a much better title for this would be &quot;getting started with C tooling&quot;, but even then, the article does a very poor job of explaining why such tooling is even necessary.')