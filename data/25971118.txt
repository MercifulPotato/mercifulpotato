Item(by='jmercouris', descendants=None, kids=[25972091], score=None, time=1612028690, title=None, item_type='comment', url=None, parent=25970769, text='A welcome critique, though unfortunately mostly incorrect :-D! I&#x27;ll address some of your comments:<p>1. Nyxt is entirely written in Common Lisp, so yes, any part of it can be reprogrammed at any time. All of our FFI bindings are also written in Common Lisp (<a href="https:&#x2F;&#x2F;github.com&#x2F;atlas-engineer&#x2F;cl-webkit" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;atlas-engineer&#x2F;cl-webkit</a>). In fact, you can even GENERATE bindings at run time. So it is irrelevant what part is invoking C, it is still fully funcall&#x27;able at runtime. This is what makes Nyxt not a &#x27;thin veneer&#x27;, but rather a deep integration which exposes all resources to the end-user (something unique to Nyxt).<p>2. Our project is a chrome that is agnostic of the renderer engine. We can use both WebKit and Web Engine (Chromium). This makes us resilient to renderer specific problems. If websites decide to ban browsers that utilize WebKitGKT+, we&#x27;ll have another renderer available to us. We talk about this in our article where we justify some of our technical design decisions: <a href="https:&#x2F;&#x2F;nyxt.atlas.engineer&#x2F;article&#x2F;technical-design.org" rel="nofollow">https:&#x2F;&#x2F;nyxt.atlas.engineer&#x2F;article&#x2F;technical-design.org</a><p>3. Security is very important to us. We rely on upstream providers of web engines (WebKitGTK+, Qt WebEngine) to test and audit secure web engines for us. We can&#x27;t do everything, you&#x27;re right about that. For this reason, we give users the choice, and hope for the best!<p>4. &quot;Lack of flexibility and power&quot;- I think this point is probably the most inaccurate. If you look through our articles you&#x27;ll see a couple of things that make Nyxt powerful and flexible.<p>4.A. Composability, all extensions (plugins, as you may call them) can call and utilize each other. That means, as our ecosystem grows, so does the power grow exponentially!<p>4.B. Flexibility: We give the user access to the complete Common Lisp compiler, all packages on Quicklisp, and the ability to override and change literally any aspect of Nyxt. I often speculate that Nyxt is potentially the most flexible browser to have ever existed.<p>5. Lastly, no, we are not trying to deliver &quot;apps&quot; on top of Nyxt. Nyxt is a browser, and a programmable platform, not an app delivery mechanism.<p>I hope that the above was informative, and if not changed your mind, at least exposed you to our view point!<p>Once again, thanks for the critique, and happy hacking!')