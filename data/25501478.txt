Item(by='brundolf', descendants=None, kids=[25501904, 25501584], score=None, time=1608596718, title=None, item_type='comment', url=None, parent=25501418, text='&gt; this post seems like a graphically appealing way of just making the usual &quot;FP is better&quot; argument<p>I would rephrase it as &quot;FP is a better default&quot;. A big part of my thesis is that dogmas tend to have shortcomings, which contrasts with the stereotypical &quot;FP is better&quot; literature.<p>&gt; in my experience I&#x27;ve seen codebases that are entirely object oriented where we are writing methods, not functions, or codebases that use methods or functions as appropriate<p>Using X &quot;as appropriate&quot; is one of the things I was hoping to encourage :)<p>As for &quot;most codebases have a pure functional subset&quot;, perhaps what I should have said is &quot;most projects&#x27; domains have a pure functional subset&quot;. The idea being that some slice of the business logic is naturally just deriving values from other values, and that if you isolate that substrate you get many of the benefits people talk about FP having (lack of sprawling side-effects, composability, easy parallelization, etc), without the more extreme costs like having to learn what an IO-Monad is')