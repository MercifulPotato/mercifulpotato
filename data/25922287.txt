Item(by='1ris', descendants=None, kids=None, score=None, time=1611703707, title=None, item_type='comment', url=None, parent=25919289, text='As I&#x27;m not a K8s user take this with salt.<p>Heavily depends on your exact situation. Keeping your source code in git and let it build on a CI server was almost always enough for me. If your build server runs windows this is usually just fine.<p>C and C++ compilers on Linux have this IMHO very unpleasant property that the operating system wants to manage your development environment, so that the build output is a function not only of the repo, but also of things not under your control. I have little experience with that (I&#x27;m mostly a desktop developer, and these desktop applications are for windows), but so far simply not installing any -dev packages seems to have eliminate that problem. Put the library source code in the repo, use a git submodule, use a per repo package manager like nuget or cargo, whatever, just make sure your build input is in the repo and only there. For other programming languages this is generally not a issue. Thankfully no Linux distribution I&#x27;m aware of tried to sneak in their version of log4net, so far. Same seems true for every other languages I&#x27;m aware of, so this is a non-issue for any other language than C and C++.<p>Automated tests can run in a chroot to make sure all runtime requirements are contained in your build artefact. On Windows running them in a clean VM might be a good idea, but keeping the machine clean seems enough. Don&#x27;t give people the password to that machine, so they are not tempted to &quot;fix&quot; problems by installing software there, fiddling with system settings, creating &quot;magic&quot; files, but by chaing the code in the repository.<p>I used repository singular, but this works for both monorepo and polyrepo.')