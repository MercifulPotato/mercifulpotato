Item(by='kyshoc', descendants=None, kids=[25628500, 25628128], score=None, time=1609733249, title=None, item_type='comment', url=None, parent=25627743, text='To split this hair a bit, I think “code quality” has two definitions:<p>1. the degree to which the code can be trusted to operate correctly and in a fault-tolerant way (i.e. “yeah that API endpoint will give you a 5xx about 2% of the time, sorry about that, just retry!”)<p>2. the degree to which the code optimally models the problem it’s solving, as well as how flexible it is as priors&#x2F;needs change in the future and whether optimal languages&#x2F;frameworks&#x2F;patterns are used to solve the problem expressively.<p>The former has obvious customer implications — if your webapp craps out every ~20min of usage, or your API silently drops data when it can’t persist something to a data store, that’s <i>bad</i>, you will lose customers (and you deserve to!). Conversely, lacking in the latter could slow you down as you iterate, but you’re just as likely to not need to touch that code for a while if you’re off building new views&#x2F;features&#x2F;what-have-you.<p>I think the “don’t worry about code quality” folks are generally trying to beat it into  technical founders&#x2F;builders’ heads that the thing they’re building is ultimately being judged as a product, not as an engineering project... but that doesn’t mean that reliability and performance aren’t part of what may make your product valuable.')