Item(by='Teknoman117', descendants=None, kids=[24682755, 24682715], score=None, time=1601849008, title=None, item_type='comment', url=None, parent=24682051, text='That&#x27;s a current project for me right now. When I took computer architecture in university, it was fairly light on hard details about things like superscalar and out of order designs. Sure there&#x27;s the concepts, but there are so many interesting problems it didn&#x27;t cover.<p>E.g. how do you, at a hardware level, actually do the reservation stations for a out of order design. How do you actually implement a register file with enough read and write ports to satisfy such a design without taking up a whole die for it?<p>I know there are a few Linux capable soft-core RISC-V designs out there (VexRisc, etc.) and microcontroller class ones (PicoRV32, etc.). If my goal was implement a system and it needed one of those things, sure, I&#x27;d use an off the shelf one. But I really want to understand how the CPUs work, and the best way to do that is doing it myself without looking at the answer key.<p>Turns out register files are complicated and fascinating. I&#x27;d never come across &quot;register file banking&quot; in my architecture courses. Makes what I had to deal with in CUDA make a lot more sense now.')