Item(by='hospadar', descendants=None, kids=[25334231, 25334010, 25334058, 25334024, 25334053], score=None, time=1607360234, title=None, item_type='comment', url=None, parent=25332101, text='Genuine question, I&#x27;m a dev, but primarily backend and all my frontends are internal&#x2F;chunky&#x2F;it doesn&#x27;t matter<p>I usually do 2 things when styling my crummy internal sites: a) manually write semantically-named classes for things that need it (&quot;help-text&quot;, &quot;external-link&quot;) and b) just in-line styles for everything else (esp. when a style really only applies to one element, or is intimately related to important layout considerations).<p>It seems to me that css classes which contain styling info in their name (h-32, font-semibold, text-cyan-600) aren&#x27;t really any better than just in-line styles, and in fact maybe worse because they [seem to me] to just be an alias [which I have to learn, and will forget later] for a css style.  Wouldn&#x27;t it be simpler to just inline the style?<p>So my question is: what&#x27;s the real benefit of this kind of css framework? What are the scenarios where it really helps to do styling this way? Is it just a performance thing? Is it about streamlining a dev workflow in some way that I don&#x27;t get?')