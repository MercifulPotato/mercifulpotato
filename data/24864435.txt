Item(by='GlennS', descendants=None, kids=None, score=None, time=1603409180, title=None, item_type='comment', url=None, parent=24859159, text='Speaking to NixOps in practicular, I&#x27;ve used quite a bit at previous jobs, and still use it for my personal stuff.<p>It&#x27;s very good and convenient (if you already know Nix), but it doesn&#x27;t have a lot of maintainers so it&#x27;s missing a lot of features compared to Terraform.<p>For a lot of people these features don&#x27;t matter, but at companies over a certain size they&#x27;re probably be considered table stakes:<p>* Not really a good story out of the box for teams, because the state file is just an SQLite database on your computer. Terraform has all sorts of helpful options for where to store its state file. There was some work in progress to improve this on NixOps last time I looked.<p>* Doesn&#x27;t support AWS load balancers. There is support for Azure load balancers though, so maybe this will come in the future? You can setup a load balancer separately and point it at your NixOps deployed instance, but meh.<p>* Doesn&#x27;t support AWS ECS&#x2F;Fargate, which is a shame because that would be an excellent combination (building a customized NixOS docker image is very easy and space-efficient).<p>* Doesn&#x27;t support authenticating with temporarily assumed AWS roles. AWS &quot;best practice&quot; encourages using these.<p>On the other hand, it does have one feature that Terraform doesn&#x27;t: you can very easily build and deploy your code at the same time as your infrastructure. Whether it&#x27;s actually a good idea to do so is up for debate, but it&#x27;s certainly convenient.<p>It&#x27;s also usually a bit faster than Terraform I find.')