Item(by='NieDzejkob', descendants=None, kids=[25937738], score=None, time=1611769364, title=None, item_type='comment', url=None, parent=25925452, text='&gt; But it comes with costs. Someone has to learn Rust and then convert all of these programs.<p>Someone has to learn compiler engineering and then design and implement a &#x27;safe&#x27; ABI. Unlike learning Rust, this is probably worthy of a research paper.<p>&gt; Rust programs are only memory safe if the unsafe keyword is not used anywhere in the program<p>If you use unsafe, then you take some of the responsibility for maintaining memory safety. However, you can audit the unsafe parts of the code, and it will compose with the compiler-provided guarantees for the rest of the code. Besides, one can easily avoid unsafe code for safety-critical tools like these.<p>&gt; Much more interesting (to my mind, anyway) is something like Miri. The rust interpreter, which uses fat-pointers to make things (more? completely? someone more informed can correct me..) memory-safe by inserting some relatively lightweight run-time checks.<p>Miri does not support most interaction with the outside world [1]. It is focused more on detecting UB in unsafe code when it is exercised by tests, than on having your code running in production through Miri. Moreover, I wouldn&#x27;t call a thousand-fold slowdown [2] &quot;relatively lightweight&quot;.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;miri#miri" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;miri#miri</a>\n[2]: <a href="https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hosvqu&#x2F;will_the_miri_interpreter_eventually_lead_to&#x2F;fxjyxe3" rel="nofollow">https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hosvqu&#x2F;will_the_miri_...</a>')