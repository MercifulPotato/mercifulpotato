Item(by='chriswarbo', descendants=None, kids=[25110233], score=None, time=1605519818, title=None, item_type='comment', url=None, parent=25100989, text='&gt; That statement is objectively wrong. Was the use of undecidable here intentional?<p>It was intentional, and here&#x27;s a proof (sketch) that it&#x27;s objectively right. Consider the question of whether a procedure&#x27;s return value (if it halts) will be a string?<p>We can prove that this question is undecidable in Python, by considering procedures of the form:<p><pre><code>    def foo():\n      if bar():\n        return &quot;hello&quot;\n      else:\n        return 123\n</code></pre>\nThe answer to our question will be true if &#x27;bar&#x27; returns a truthy value (or doesn&#x27;t halt), or false if &#x27;bar&#x27; returns a falsy value. Since the truthiness of bar&#x27;s return value (if it halts) is a non-trivial property of the (partial) function it implements, it is undecidable for arbitrary &#x27;bar&#x27; (via Rice&#x27;s theorem). QED.<p>Yet in Java this question is trivially decidable, since all return values must have the same static type; i.e. procedures like the above aren&#x27;t valid Java programs, and this can be determined statically, so they present no difficulties.<p>In this particular case, Java&#x27;s static type system makes this a trivial question about the procedure&#x27;s syntax; rather than a non-trivial question about the (partial) function it implements.<p>This same argument applies to all sorts of DSLs too. Many use a similar type-based approach, e.g. linear types forbid expressions like &#x27;if (bar()) { free(myMemory); }&#x27;.<p>Others work by providing an extra semantics, alongside the normal result-calculating one; e.g. incremental lambda calculus has a semantics for calculating changes; differentiable languages (e.g. provided by machine learning libraries) have a semantics for calculating derivatives; probabilistic programming languages have a semantics for sampling and induction; etc. We generally can&#x27;t apply these semantics to other languages, due to the existence of language constructs which don&#x27;t exist in that semantics (e.g. exceptions, or GOTO, or whatever).')