Item(by='joshgev', descendants=None, kids=None, score=None, time=1605101868, title=None, item_type='comment', url=None, parent=25057891, text='No, it isn&#x27;t outdated.  The claims are still issues.  In the scenario you describe, multiprocessing should work pretty well because each processes can run independently of the others and report one big result at the end (all the hashes that process computed).  There are plenty of scenarios, however, where the different processes do have to talk to each other frequently which, in Python, means you introduce a ton of overhead in serializing and deserializing these data (Python transmits pickled data between processes).  From personal experience I can tell you that this can be a major problem in terms of performance.<p>Other languages give you more flexibility in how to share data between processes.<p>The fundamental claim that threads running pure Python are limited by the GIL still stands.  Others do point out that you can get around this in C and some of the standard libraries in Python (like hashlib) do this for you.  That goes a long way to helping the issue, of course, but as yet others point out, it is weird to support Python in this context by saying &quot;Yes Python can use threads effectively; all you have to do is use C.&quot;')