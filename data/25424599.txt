Item(by='mehrdadn', descendants=None, kids=[25426477], score=None, time=1607987069, title=None, item_type='comment', url=None, parent=25422833, text='But this is LLVM IR, not C. It feels like a trick question (hear me out). Either with IR semantics the code is already UB (as in C), or it isn&#x27;t. If the code isn&#x27;t UB, then why? The obvious assumption is that it&#x27;s because LLVM IR treats this as a model of a concrete machine (where provenance isn&#x27;t a thing), not as a C-like abstract machine with UB. In which case, the optimization #3 is clearly invalid. OTOH, if it is already UB, then the optimizations are fine, right?<p>The only way I can see that we can implicate optimization #1 or #2 is by claiming LLVM IR has neither C semantics nor machine semantics, but with some kind of in-between wobbly semantics. There&#x27;s nothing fundamentally wrong with that, but that&#x27;s not what a reader would assume in the absence of other information. <i>Especially</i> not when the author writes &quot;this program has two possible behaviors&quot;â€”this clearly tells us there&#x27;s no UB and that we should assume this is based on concrete machine semantics (where provenance isn&#x27;t a thing). So, I would also say, given the info in the post prior to the conclusion, #3 has to be the culprit. I just can&#x27;t implicate #1 or #2 based on the preceding text; to implicate those you&#x27;d have to pull assumptions out of thin air.')