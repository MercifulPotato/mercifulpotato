Item(by='virgilp', descendants=None, kids=[24962101], score=None, time=1604257060, title=None, item_type='comment', url=None, parent=24960108, text='&gt; Thus, in this single case when a Rust implementation is more or less faster than C, the performance difference is not about better compiler, but about more efficient structure of the program, which allows a compiler to optimize code better.<p>This is strange takeaway.... I would say that&#x27;s almost the only thing that matters. They compared one Rust compiler to 3 C++ compilers and picked the best result? Who does that in practice - who compiles their codebase with 3 different compilers and picks the most efficient one for each object file? Also, the compiler can often improve, where as the language itself is much more difficult to improve - the fact that the language lets you to write a more efficient (and more readable!) structure is crucial.<p>Also, they seem to misunderstand the point of Rust entirely. The main point of Rust is &quot;safety&quot; (w&#x2F;o sacrificing performance, yes - but safety was the primary design goal). And for a good reason! Systems programming is more about safe systems than it is about fast systems - fast buggy system programs are useless. The authors decry the loss of goto saying it&#x27;s &quot;good for juniors but too limiting for professionals&quot; - as if professionals aren&#x27;t humans too! I&#x27;m sorry to say that, but whenever I saw that attitude before - it was with programmers that greatly overestimated their skill level.')