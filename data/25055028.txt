Item(by='mbakke', descendants=None, kids=None, score=None, time=1605063166, title=None, item_type='comment', url=None, parent=25037175, text='There are quite a few HPC clusters that are powered by Guix:<p><a href="https:&#x2F;&#x2F;hpc.guix.info&#x2F;about&#x2F;" rel="nofollow">https:&#x2F;&#x2F;hpc.guix.info&#x2F;about&#x2F;</a><p>Whether or not these institutions qualify as Real Companies is up to you.  Other than that I occasionally see focused patches and bug reports from people using their work credentials, but nothing on the scale of Pinterest and Target of course.<p>We did recently get a bugfix for &#x27;guix system container&#x27; from Google, but I suspect that was more the result of an evaluation than anything else:<p><a href="https:&#x2F;&#x2F;issues.guix.gnu.org&#x2F;43540" rel="nofollow">https:&#x2F;&#x2F;issues.guix.gnu.org&#x2F;43540</a><p>As for benefits in a professional setting, there are a few design (and implementation) differences that I think gives Guix an edge. One is grafts: Guix can deliver security updates for core packages really fast, whereas Nix needs to rebuild every dependent package.  The grafting mechanism can also be used to perform other transformations, e.g. to locally enable CPU optimizations for low-level libraries without having to rebuild the world.<p>On the topic of security, Guix has a strong focus on bootstrapping, meaning that e.g. the Rust and Java compilers are built purely from source code, whereas Nixpkgs use opaque binaries provided by upstream projects.  This property (as well as excellent cross-compilation support) is why Bitcoin chose Guix to build their installers:<p><a href="https:&#x2F;&#x2F;bitcoinmagazine.com&#x2F;articles&#x2F;guix-makes-bitcoin-core-development-trustless" rel="nofollow">https:&#x2F;&#x2F;bitcoinmagazine.com&#x2F;articles&#x2F;guix-makes-bitcoin-core...</a><p>Another important design difference is gratuitous use of so-called &quot;search paths&quot;.  I noticed one common criticism in this thread is that packages often needs patching to work in NixOS.  In Guix, such cases are very rare.  Take a look at the patches carried by Guix, conveniently stored in a single directory:<p><a href="https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;packages&#x2F;patches&#x2F;" rel="nofollow">https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;packages...</a><p>By and large, these are just security- or bug (often test suite) fixes.  I won&#x27;t go into detail on how search paths work, but if you try Guix on any distro (maybe except Guix System) you&#x27;ll quickly understand.<p>It&#x27;s funny that you mention &quot;non-machine editable Scheme code&quot;.  In the Lisp world, <i>code is data</i>, which powers among other things the &quot;updaters&quot; in Guix: &#x27;guix refresh -u foo&#x27; will update the &quot;version&quot; and &quot;sha256&quot; fields of &quot;foo&quot; in your git checkout.<p>Finally, a huge selling point for me personally, is general scriptability.  I recently added code to build Chromium extensions with Guix.  It was about 150 lines of code, and packaging extensions is pretty much like packaging anything else:<p><a href="https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;build&#x2F;chromium-extension.scm" rel="nofollow">https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;build&#x2F;ch...</a><p><a href="https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;packages&#x2F;browser-extensions.scm" rel="nofollow">https:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;guix.git&#x2F;tree&#x2F;gnu&#x2F;packages...</a><p>There are many other things of less importance that makes me stick to Guix, such as running the test suites of most packages, largely preventing compatibility and other run-time problems that occasionally show up in Nixpkgs (and even popular distros like Arch).<p>Now, the end user experience of Guix System is not great due to lack of proprietary firmware, as well as GNOME and KDE maintainers, but as a professional tool Guix is really solid in my (supremely biased) opinion.')