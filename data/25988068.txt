Item(by='JackMorgan', descendants=None, kids=None, score=None, time=1612182776, title=None, item_type='comment', url=None, parent=25987758, text='I just left a team that was using F# as our language for all new code. We built shrinkwrap banking software and found it a much better alternative to C#. We were the market leaders in that space, most of the worlds big banks runs code we wrote in F#.<p>I think F# is an improvement to C# just like how C# was an improvement to VB.NET, which was an improvement to VB6.<p>However, it&#x27;s not really a hill I&#x27;d die on, frankly new co-workers complaining about missing curly braces gets really old after the first day. Ultimately most programmers just don&#x27;t care about using the best tools, and would still be happy using VB6 if the industry as a whole hadn&#x27;t moved them along kicking and screaming into C#.<p>If I&#x27;m working alone, I&#x27;ll choose the best tools for the job, and I tend to think F# in modern dotnet core is one of the best tools for backend servers out there. It&#x27;s much more coherent then Scala, less mushy at large codebase size than Clojure, very performant, and has great libraries like aspnet core, and compiles so much faster than Haskell and has an incredible wealth of better libraries. I also prefer a more functional style than Kotlin, Go, Java, or C# provide, because for me that means fewer unit tests to get the same confidence.<p>There&#x27;s plenty annoying with the language, but it&#x27;s a great hybrid with reasonable tradeoffs.<p>My elevator pitch typically is: with F# I need to write fewer unit tests to get the same confidence I&#x27;d need elsewhere, and that means more time programming.')