Item(by='TomNomNom', descendants=None, kids=None, score=None, time=1604696845, title=None, item_type='comment', url=None, parent=25008609, text='I think this is a good point. It&#x27;s definitely hard to grep for certain parts of gron&#x27;s output; especially where there&#x27;s arrays involved because of the square brackets. I find that using fgrep&#x2F;grep -F can help with that in situations where you don&#x27;t need regular expressions though.<p>It&#x27;s not an ideal output format for sure, but it does meet some criteria that I considered to be desirable.<p>Firstly: it&#x27;s unambiguous. While your suggested format is easier to grep, it is also lossy as you mention. One of my goals with gron was to make the process reversible (i.e. with gron -u), which would not be possible with such a lossy format.<p>Secondly: it&#x27;s valid JavaScript. Perhaps that&#x27;s a minor thing, but it means that the statements are eval-able in either Node.js or in a browser. It&#x27;s a fairly small thing, but it is something I&#x27;ve used on a few occasions. Using JavaScript syntax also means I didn&#x27;t need to invent new rules for how things should be done, I could just follow a subset of existing rules.<p>FWIW, personally I&#x27;m usually using gron to help gain a better understanding of the structure of an object; often trying to find where a piece of known data exists, which means grepping for the value rather than the key&#x2F;path - avoiding many of the problems you mention.<p>Thanks for your input :) I&#x27;d like to see your jq script to help me learn some more about jq!')