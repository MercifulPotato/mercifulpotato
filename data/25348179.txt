Item(by='olsonjeffery', descendants=None, kids=[25348325], score=None, time=1607447634, title=None, item_type='comment', url=None, parent=25346460, text='This essay is full of awful advice and is more about the author venting that their work isn&#x27;t organized how they like. I would recommend they found a startup and experiment with the kind of structure they think would work best and see how it scales!<p>&gt;No backlog grooming meetings or burn-down charts either. Your manager simply looked at how your products were coming along. A little trust, some accountability, and a healthy portion of “give me some space to do my work.”<p>The author speaks as though they have never been in the situation where their team delivered a product that meets the spec but isn&#x27;t actually useful to their customers. Agile (what the author means when they speak about tasks&#x2F;backlogs) doesn&#x27;t guarantee this problem will be fully solved by doing by-the-numbers scrum or w&#x2F;e, but the system they are flirting with in this essay is almost certainly worse. It&#x27;s a complete recapitulation of waterfall&#x2F;cowboy and adhoc design processes, without the honesty to interrogate why these processes failed organizations large and small.<p>&gt;As I see it, little tasks are born of a fundamentally different management attitude. Small tasks are a not-so-subtle way of saying that all the product vision lies with management. Keep away. Don’t touch.<p>The author is talking, here, about how encountering agile makes <i>them</i> feel. This is not a universal experience. I would reply that we have a division of labor&#x2F;responsibility because technical personnel are often some of the worst people to speak for the customer, and history has born this out.<p>&gt;Then you went back to your private office (I sure miss private offices, but that is a topic for another day) and fixed a few things. Later, in a weekly status meeting you would tell people how it went — yep, that’s right, no daily stand-ups where you look mournfully at your shoes and admit that you didn’t make any notable progress yet.<p>Once again, the author is telling on themselves If they don&#x27;t like feeling like they aren&#x27;t making progress, it&#x27;s almost always because they aren&#x27;t motivated or need help. Certain team strutures (e.g. Mob Programming) actually produce incentives for this sort of task-going-nowhere problem to be addressed constructively (also against silo-ing, another perverse tendency that this author implicitly endorses throughout the essay).<p>As an aside, I agree about the communal working space trend in tech being shitty, <i>if you team can&#x27;t work communally</i>. This is a problem that agile practices are only beginning to address (again, please see Mob Programming for a way to deal with this).<p>&gt;Sadly, as developers, we do it to ourselves as well. Once someone gives us a better title, we are right on board with the program. When a regular developer might have had a chance to do some research or design, we immediately snatch it away for ourselves.<p>This is a philosophical non-sequitur. How are tasks related to snatching design work away from non-architect&#x2F;technical-lead developers? Any team that wants to spread around design work can address this and whether a team does agile&#x2F;task-based work has no bearing.<p>&gt;Worse yet, we design every product’s architecture, and expect any deviation to be approved by us first. All that is left are tiny morsels. Grunt work for the foot soldiers once the fun has been stripped away.<p>The author moves and back and forth between speaking as a grunt developer and speaking as an architect&#x2F;technical-lead, and it&#x27;s quite confusing. They are also, per their bio, a fan of &quot;organizational self-management&quot;. Furthermore:<p>&gt;“I am Amerigo, the product guy. Heretofore, no developer will make product decisions, for they are mine.”\n&gt;“And I am Ferdinand, process guy. Heretofore, no developer will make process decisions, for they are mine.”\n&gt;“I Bartolomeu will enforce compliance.”\n&gt;“I Vasco used to be pretty good at Microsoft Access, I guess I’ll be the database guy.”<p>I feel like you put all of these things together and get a picture of a programmer who I, personally, would be absolutely terrified to allow in front of a customer, let alone expect them to work constructively with other functional stakeholders.<p>For the record: I&#x27;m a technical lead in a medium-sized (~150 developer seats, many more non-technical roles) enterprise software organization. Most of my experience is in the enterprise&#x2F;consulting space and my perspective reflects that.<p>I think the kind of unstructured&#x2F;responsibility-based approach the author advocates is naive and says more about their problems working with others than it does about how dysfunctional agile can be. I think the main barriers to teams delivering is how to cooperate to deliver consistently and sustainably, and not that rockstars needs to be set free to pursue their own agenda within vaguely defined boundaries of responsibility.')