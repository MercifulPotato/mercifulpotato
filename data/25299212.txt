Item(by='wtallis', descendants=None, kids=[25302895], score=None, time=1607058646, title=None, item_type='comment', url=None, parent=25298521, text='&gt; we were talking about &quot;compiled code&quot;, then your answer jumps to talking about shaders. Can all OpenGL code be represented as shaders? Or is the OpenGL code needing hardware-specific compilation shaders only? When the above poster said that Mesa &quot;compiles code from OpenGL to some target backend&quot;, were they referring to shaders already?<p>OpenGL code consists of both code running on the CPU, and shader programs running on the GPU. Most of the heavy number crunching is handled by the shader programs and the CPU acts mostly as the control plane, handling resource allocation and dispatching data and work items to the GPU.<p>Early versions of OpenGL predated programmable GPUs and had no concept of shader programs. Instead, various GPU mode registers were programmed to set up the rendering pipeline, which was then fed vertex and texture data to render. Modern OpenGL largely abandons that beginner-friendly immediate mode paradigm and requires you to provide shader programs and do various other setup work to get anything on screen; you can&#x27;t simply make a DrawTriangle kind of function call on the CPU. Newer APIs like Vulkan strip away even more abstractions.')