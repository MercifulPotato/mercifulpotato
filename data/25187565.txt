Item(by='leoc', descendants=None, kids=[25189392], score=None, time=1606144521, title=None, item_type='comment', url=None, parent=25185397, text='A lot of what Blow says is not entirely accurate. For example he presents a simple picture of declining software quality over time, but anyone who was around at the time knows that both desktop OSes and desktop applications (including web browsers) were certainly much more crashy, and probably more buggy in general, than they are now. Likely quality has started to decline again over the past decade, but it&#x27;s still not remotely back to where it was. It&#x27;s hard not to suspect that Blow passes over this because it tends to contradict his &quot;higher-level languages and more infrastructure → declining quality&quot; argument. Section 7.4, &quot;Programming Environments Matter&quot; <a href="http:&#x2F;&#x2F;philip.greenspun.com&#x2F;research&#x2F;tr1408&#x2F;lessons-learned.html" rel="nofollow">http:&#x2F;&#x2F;philip.greenspun.com&#x2F;research&#x2F;tr1408&#x2F;lessons-learned....</a> of Phil Greenspun&#x27;s, apparently, 1993 SITE CONTROLLER dissertation <a href="https:&#x2F;&#x2F;dspace.mit.edu&#x2F;handle&#x2F;1721.1&#x2F;7048" rel="nofollow">https:&#x2F;&#x2F;dspace.mit.edu&#x2F;handle&#x2F;1721.1&#x2F;7048</a> makes the same &quot;we don&#x27;t expect software to work any more&quot; lament which Blow delivers at 22:17 <a href="https:&#x2F;&#x2F;youtu.be&#x2F;ZSRHeXYDLko?t=1337" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;ZSRHeXYDLko?t=1337</a> :<p>&gt; Another reason the &quot;horde of C hackers&quot; approach has worked remarkably well is that, although the resultant software is rife with bugs, most users have no experience with anything better. When an MBA&#x27;s Macintosh Quadra crashes due to a C programmer&#x27;s error in Microsoft Excel, he doesn&#x27;t say &quot;I remember back in 1978 that my VAX 11&#x2F;780, with only one tenth the processing power of this machine, had memory protection between processes so that a bug in one program couldn&#x27;t corrupt the operating system or other applications.&quot; Rather, he is likely to say, &quot;Well, it is still easier than using pencil and paper.&quot;<p>but places the blame on a switch to <i>lower</i>-level languages and runtime systems. The improvements on the desktop over about the &#x27;00s seem to be attributable to (not an expert) the mainstreaming of, and continued development of, the WinNT and OS X platforms, increasing use of memory-managed languages and&#x2F;or more recent versions of C++ in applications, and adoption of online crash-reporting infrastructure (though probably also increasing use of increasingly effective error-detection tools, which I assume Blow is fine with as they don&#x27;t create a runtime dependency). So it certainly seems that Greenspun is more correct than Blow, which is certainly not to say that adding more layers of infrastructure has always been an unqualified good.<p>Also, Blow&#x27;s talk has a very &#x27;90s focus on crashers, error messages, and the like, but many of the worst regressions in software over the last 10 or 20 years don&#x27;t manifest as crashers or other straightforward bugs at all; and when they <i>do</i> manifest as bugs the bugginess is often intertwined with architectural issues in a way that makes a bug-hunting mentality relatively ineffective. For example, the pinnacle of WYSIWYG rich text editing was probably about Word 4 for Macintosh, which was a slightly awkward but workable mating of stylesheets to the WYSIWYG UI. Unfortunately it was something of a local optimum: further progress on the problem largely requires serious developer thought and&#x2F;or further user education. So everyone more or less decided to instead pretend that rich text is a solved problem, and things have largely been gently regressing since then. Which is probably part of the deep background to the GMail rich-text jank Blow complains about at 23:47 <a href="https:&#x2F;&#x2F;youtu.be&#x2F;ZSRHeXYDLko?t=1427" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;ZSRHeXYDLko?t=1427</a> . “We can not solve our problems with the same level of thinking that created them”, as Lincoln said. ;)')