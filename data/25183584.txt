Item(by='ledauphin', descendants=None, kids=[25183727], score=None, time=1606105658, title=None, item_type='comment', url=None, parent=25178639, text='I&#x27;m way out of my depth here, but interested in trying to understand a few of these things, particularly because I&#x27;ve long wondered how functional programmers reason about the &quot;effects&quot; that happen under the hood when dealing with Turing machines which are essentially 100% state.<p>Specifically:<p>1) do you consider variable reference to be an effect because you&#x27;re getting a value from memory&#x2F;disk&#x2F;network? Or is it effectful simply because you&#x27;re replacing a name with a value somehow? I&#x27;d love to understand the point of view here.<p>2) Relatedly, why do you say that creating a lexical closure is effectful (I assume here that we are storing an immutable memory address, or at least a value which represents a way to reliably find another value in the future), but using it (dereferencing that address&#x2F;value) is not? I can see why you&#x27;d say that creating a dynamic closure is not effectful (the code is essentially unattached to anything at the time of creation and can easily be represented by a pure value), but using it is (it now inhabits a scope and will act differently depending on that scope).<p>Having typed that out, I wonder if what you mean is that creating the lexical closure in a language with immutable data means that at the time of creating the closure, you are (one way or another) making a copy of that data, which is an input &quot;effect&quot; in a sense. That isn&#x27;t, of course, how things actually work in most non-functional (e.g. OO) languages - the lexical closure only binds the name, but the value represented by the name could in fact change if the data itself is mutable.<p>Anyway, I&#x27;m still curious about #1 above. These are the sorts of comments I come to Hacker News to read, so thank you. :)')