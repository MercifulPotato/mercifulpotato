Item(by='sushshshsh', descendants=None, kids=None, score=None, time=1603545141, title=None, item_type='comment', url=None, parent=24878801, text='Thanks for the comment, let me try to answer :)<p>&gt;if the dev leaves?\nTheir code should be in a viewable repo and it should maybe even be documented. If it&#x27;s not, no sweat, because I&#x27;ve seen lots of undocumented code in my life from bigger teams. Continue using the service until someone becomes an expert in it or the business problem is solved again. But, ideally you would have a few devs as experts on a few different services. It doesn&#x27;t need to be 1:1.<p>&gt;Service goes down while dev on vacation\nI&#x27;m thinking a production service should aim to have 2 devs and 2 ops supporting it. They could each be responsible for 2-3 major services and 2-3 minor or experimental services.<p>&gt;Single point of failure\nLet&#x27;s say you have a service that, if you give it a user id, returns only the history of that users orders. It doesn&#x27;t fulfill orders or give delivery statuses or help initiate a customer support conversation. It is conceivable that if this service goes down in production, there may not be a way to get order history from anywhere else quickly. The information definitely exists in another db in another service somewhere, because that&#x27;s the db where the order history service gets its information in a read only status. But it&#x27;s not all neatly organized and available over HTTP. What do you do? You make the order history team own their SLA, otherwise their SLA will own them. In microservices world, you can&#x27;t blame other people if you go down. You just have to do everything you can to keep your service running, by configuring AWS yourself and being on call yourself.')