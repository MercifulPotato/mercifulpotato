Item(by='Blikkentrekker', descendants=None, kids=None, score=None, time=1611894194, title=None, item_type='comment', url=None, parent=25953724, text='Methnks you approach the control flow differently, as in for instance in pseudocode:<p><pre><code>  assert(list.len() &gt; 0);\n  &#x2F;&#x2F;code that assumes that the list not be empty\n</code></pre>\nWhereas in a functional language, what would happen is:<p><pre><code>  if list.len() &gt; 0 then\n    &#x2F;&#x2F; code assumes that the list not be empty\n  else\n    assertion_fail(&quot;list is not empty&quot;)\n</code></pre>\nFunctional languages lack sequencing syntax that execute two expressions, ignoring the result of the first, altogether, and every function definition is one single expression.<p>One does not as such first makes an assertion as the first element of a sequence, and then proceeds under the assumption that the assertion did not fail, but rather calls the `assertion_fail` function on some code paths, which then never returns if ever it be reached.<p>The type system will call the function all the same, as as far as the type system and language runtime is concerned, it is an ordinary function that will return a value of the expected type, but under the hood it aborts the entire program, and prints proper diagnostics.')