Item(by='10x-dev', descendants=None, kids=None, score=None, time=1609771502, title=None, item_type='comment', url=None, parent=25628474, text='Don&#x27;t be too hard on yourself or you&#x27;ll start doubting your own decisions too much. Everyone screws up some things, and nails some other ones.<p>Here&#x27;s something that helps me with development. First, decide if it&#x27;s a personal project for learning&#x2F;fun, or if it&#x27;s a commercial solution you are developing for someone else.<p>Personal projects get the cleanest code. I obsess with perfection. Max optimizations. Sexy tech. I&#x27;m Michelangelo and this us my Sisteen Chapel. John Carmack himself should take notes from that code. You get the idea. This project never ships though. 9&#x2F;10 times I learn what I need and then it&#x27;s just about grinding, I get bored and move on.<p>Commercial products or projects I really need to ship get a clean design, but thats all. I spend some time to design the foundation correctly, and from there, its an ugly, duct taped, unoptimized piece of crap that I can iterate quickly on.<p>Also, make sure the power dynamics in your team are correct. Dont get hired to write the code. Get hired to develop the technical solution. This way you can say &quot;no&quot; to things.<p>A pattern I&#x27;ve noticed much later in my early endeavors: if the business people (those writing the check) are also the product managers, the project is likely doomed. You know the type of person. They will insist on which features need to be there because having money automatically makes you an expert. They typically think of the end product as the MVP.<p>One last thing, internalize the following:<p>&quot;Make it work. Make it right. Make it fast.&quot; &lt;- in that order.<p>I say this, because you mentioned code coverage, and I would like to say that my opinion is one doesn&#x27;t need unit tests for the first step.<p>Basically, screw the tests. I know, I know, how can anyone take me seriously when I say that. But, why do you need unit tests? To catch bugs in an MVP? Who expects rock solid, bug free MVPs? Maybe its to sleep better at night because code coverage is representative of code quality? We know it&#x27;s not, so why bother?<p>Your MVP should be small enough that it&#x27;s entire functionality is critical paths through the code. This means that every time you click through your product you are testing your code and you should be able to exercise most of it quickly and often. Unit tests are basically code that you have to maintain when something changes and it decreases your velocity. You don&#x27;t want that, you just want to &quot;make it work&quot;.<p>Will you eventually pay the price for not having unit tests initially? Yes, of course, but, if you designed your MVP correctly, this will either be never, because the product doesn&#x27;t have market fit, or right at the time when you are getting product-market fit and are growing your team. At this time you will have a great idea of what functionality to add tests for. You won&#x27;t even give a damn about the code coverage, because now is when you &quot;make it right&quot;.<p>Either way, exclusions apply because software is hard. Good luck with your endeavors and keep coding ;)')