Item(by='no_wizard', descendants=None, kids=None, score=None, time=1602255400, title=None, item_type='comment', url=None, parent=24730000, text='I&#x27;ve recently taken a different stance on this. the issue isn&#x27;t number of dependencies, its the reliability of said dependencies to be the following<p>- Secure. Does this contain malicious code, exploits or otherwise known bugs that could be fixed but aren&#x27;t? This of course is hard, and will never be perfect. There are static security scans though, espcially in a language like rust, that should be able to verify what the code does before its being published for consumption via carog. NPM is trying to do something similiar. This isn&#x27;t foolproof and more sophisicated exploits always will exist, but getting low hanging and mid-level fruit should be within reach, which is a net win<p>- Is it quality? This is beyond just secure, but does it provide real utility value? One thing we always hear is DRY, which may mean sometimes you consume alot of dependencies, since the problem space you work in involves a lot of things, so why re-invent every single fix if something exists and you can glue together to start making impact in your problem domain? I don&#x27;t think this is an issue espcially if #1 is true<p>So I don&#x27;t know, I think its fine to have a lot of dependencies, I think the justification for those dependencies is often related to the complexity of the work involved. I&#x27;d expect a cURL replacement to have quite a few dependencies, since its complicated software with lots of edge cases, so for instance not re-inventing a HTTP parser is a great idea.<p>Now if only we all shared as developers this sentiment in terms of upstreaming contributions back too. The more we contribute and share with each other the more productive we can be.<p>Of course, sometimes package managers do terrible jobs at ensuring some sort of base quality, around security or otherwise, and thats never great. So its important to be aware of the trade offs you make when you source your dependencies.<p>By no means does this excuse developers from not understanding their dependency tree either. Its really the opposite.')