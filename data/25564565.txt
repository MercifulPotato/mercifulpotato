Item(by='bikeshaving', descendants=None, kids=[25565413, 25564597, 25566278, 25566065, 25564819], score=None, time=1609197951, title=None, item_type='comment', url=None, parent=25562800, text='&gt; A pure function only looks at the parameters passed in to it, and all it does is return one or more computed values based on the parameters. It has no logical side effects. This is an abstraction of course; every function has side effects at the CPU level, and most at the heap level, but the abstraction is still valuable.<p>Rereading this for the umpteenth time, this is the paragraph which sticks out to me this time around, and a point which I think most people miss, specifically the latter part about “pure” functions consuming CPU and memory.<p>The reality is that there is no such thing as a “pure” function, insofar as execution of that function costs <i>something</i>. Certain functional programmers corrupted this idea to somehow mean pure functions are free; that these functions can be executed one to infinity times and the result is the same.<p>For instance, this idea taken to an extreme has resulted in the current situation with React.js, where most React applications pathologically over-execute the “pure” rendering functions which we use to define components, resulting in degraded performance, increased GC pressure, and a lack of understanding of how our code executes.<p>Just because you can call a pure function many times doesn’t mean you should.')