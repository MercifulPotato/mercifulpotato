Item(by='lhorie', descendants=None, kids=[25882461], score=None, time=1611348993, title=None, item_type='comment', url=None, parent=25875639, text='&gt; It&#x27;s a feature, not a bug. Not understanding this is a red flag that you&#x27;re going to run into problems.<p>This attitude smells of &quot;you&#x27;re attacking my way of doing things, therefore you&#x27;re wrong&quot;. While there&#x27;s truth in both your claims and the GP&#x27;s, there _is_ churn and there _is_ a ton of garbage in the ecosystem, that much is very true.<p>The nuance is that the distribution is not uniform: lodash has been stable for ages, axios is perfectly fine for HTTP requests, etc. Where it gets sketchy is when you get to the fringes of what a framework is expected to do. But at that point, not even Angular or Ember can save you.<p>As for framework-specific churn, React itself is not the only cog in the equation. As part of my job, I see a lot of React codebases from various periods in time and honestly, yes, there&#x27;s a lot of churn. Looking only at React&#x27;s API churn, we have code using hooks, class components, HOCs, render props, heck even React.createClass.<p>And then there&#x27;s hipster libraries that willy-nilly break APIs to match each new React idiom, libraries that just can&#x27;t make their minds about what their API looks like, abandoned libraries that uses the old Context API, libraries that depend on componentWillUpdate, libraries that read the shape of the virtual dom node, libraries that depend on those libraries, and on and on goes the rabbit hole. React Router, for example, is both extremely popular and notorious for having given people migration headaches.<p>On top of that, there is of course the self-inflicted pain: redux-saga messes that no one wants to go near, misguided attempts at &quot;functional programming&quot; and other forms of over-engineering, etc.<p>But here&#x27;s the rub: Angular _has_ idioms for forms. You don&#x27;t wrangle w&#x2F; random breaking changes in react-form there. Angular has a router. No need to worry if your favorite router lib will break APIs when Suspense comes along. Angular has HTTP requesting. No bikeshedding over axios vs isomorphic-fetch or whatever. Angular has state management idioms; no fussing over where async stuff goes in redux (assuming you&#x27;re not still arguing redux vs mobx). Pluralization? Hope what you picked is maintained. CSP support? Yeah, go google that, I can wait. Etc.<p>You can definitely become a competent React dev and spend many years on good, well maintained projects in React-land, but that doesn&#x27;t mean there aren&#x27;t problems directly attributable to the React&#x27;s limited scope as far as &quot;frameworks&quot; go.')