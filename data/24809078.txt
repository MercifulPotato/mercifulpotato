Item(by='ThePhysicist', descendants=None, kids=[24809230, 24809702], score=None, time=1602931912, title=None, item_type='comment', url=None, parent=24808936, text='Um, what? I&#x27;ve been building websites since the late 90s and I absolutely disagree that there were only &quot;minor&quot; additions to HTML and CSS. Sure, the basic structure of HTML is unchanged, but you can&#x27;t look at it without looking at CSS, as HTML just describes what to display, but now how (well there is a standard way of displaying HTML without any styling but it&#x27;s not very appealing).<p>The progress that CSS(+HTML) has made in the last 20 years is incredible: I still remember using ugly DIV tricks to get the luxury of rounded corners and shadows, which work out of the box in modern CSS. Or how hard it was to align content, which is still not super trivial but so much easier with things like flexbox and CSS grid layouts (which before also required ugly hacks like floating DIVs and clearing techniques).<p>I think it has also never been easier to self-publish and self-host HTML websites, and no one forces you to use JS or frontend frameworks. We e.g. build all our professional websites using static HTML and we host them ourselves. For non-programmers there are tons of great tools available to visually design webpages as well.<p>JS is also fantastic, and frameworks like React make it so much easier to write clean, good-looking web apps. I still remember the tangle of code that most websites were made of in the early 2000s, with jQuery and a dozen other frameworks mixed together and poorly bundled. Today we have a great compiler chain to which you can feed JS, (S)CSS, YAML, JSON, Typescript, images, fonts etc. and that produces clean, minified and (if you like) separate bundles for consumption by the web browser. I&#x27;ll take that any day over the mess that was manual DOM manipulation and manual script inclusion and bundling. I also don&#x27;t think web apps were inflicted onto us by a &quot;browser cartel&quot;, it just turns out that they make development easier in many circumstances, so most companies adopted them. I wrote traditional web apps before e.g. using Django (and Perl before that) and I vastly prefer the separation of concerns that a single-page app with a REST (or GraphQL if you&#x27;re feeling fancy) backend provides me with.<p>And I really don&#x27;t think it&#x27;s &quot;impossible&quot; to build a basic site that doesn&#x27;t suck, where do you get that notion from? Look e.g. at <a href="https:&#x2F;&#x2F;jgthms.com&#x2F;web-design-in-4-minutes&#x2F;" rel="nofollow">https:&#x2F;&#x2F;jgthms.com&#x2F;web-design-in-4-minutes&#x2F;</a>, he creates a nice-looking website with only a few lines of HTML and CSS (most of the modern CSS he uses wouldn&#x27;t work 10 years ago btw).')