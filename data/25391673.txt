Item(by='morelisp', descendants=None, kids=[25394550], score=None, time=1607723582, title=None, item_type='comment', url=None, parent=25391431, text='Packrat parsers are notably faster than recursive descent parsers (also critical for IDE use) and by turning them &quot;inside out&quot; (replacing their memoization with dynamic programming) you get a pika parser which has very good recovery ability.<p>There are varying techniques to improve error recovery for all forms of parsing but hacked-up recursive descent (certainly the most common kind of parser I still write for my hacked-up DSLs!) have poor error recovery unless you put in the work. Most LR parsers are also awful by default.<p>When I was in university most focus was on LL and LR parsers with no discussion of error recovery and more focus on memory usage&#x2F;bounds than speed. I also have no idea how common it is to teach combinator-based parser grammers these days; stuff like ANTLR and yacc dominated during my studies. This would add another level of unfamiliarity for students going to work on a &quot;real compiler&quot;.')