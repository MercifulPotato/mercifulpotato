Item(by='Garlef', descendants=None, kids=None, score=None, time=1611836790, title=None, item_type='comment', url=None, parent=25935065, text='&gt; Black boxes<p>There are a few black boxes most people are very happy not to peek into; Having these black boxes is a huge productivity win:<p>* Compilers<p>* Garbage Collection<p>* OS Kernels<p>* File systems<p>* Docker<p>* App Stores &#x2F; package managers<p>* Infrastructure as code frameworks (i.e. terraform)<p>* JS Frontend frameworks<p>I think there&#x27;s three things at work here: 1. Familarity with treating item X as a black box (High for compilers, low for infrastructure as code). 2. Maturity of the interfaces (High for compilers, low for infrastructure as code). 3. Relevance of the details for your use case &#x2F; business context.<p>&gt; Having a number of simpler functionalities that you&#x27;re free to compose any way you like is for me preferred approach anytime. Most of the things that you mention can be solved with fairly simple wrapper libs doing just one thing<p>I totally agree: That&#x27;s how I imagine how the magic functions are defined.<p>&gt; Black boxes with tons of magic are great if you need to do exactly that one thing that creators had in mind.<p>This totally depends what your business context is. For most companies, dealing with CORS in HTTP requests is very far from their business domain. Still, developers spend a lot of time configuring and building endpoints, API clients, etc. at a low level of abstraction.')