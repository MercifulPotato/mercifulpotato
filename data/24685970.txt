Item(by='orbifold', descendants=None, kids=None, score=None, time=1601889945, title=None, item_type='comment', url=None, parent=24685919, text='All the major toolchains work on Linux. I personally liked Pynq <a href="http:&#x2F;&#x2F;www.pynq.io&#x2F;" rel="nofollow">http:&#x2F;&#x2F;www.pynq.io&#x2F;</a>, it works fairly well and is beefy enough to do non-toy projects with it. For something totally barebones you can try <a href="https:&#x2F;&#x2F;www.latticesemi.com&#x2F;Products&#x2F;DevelopmentBoardsAndKits&#x2F;iCE40HX8KBreakoutBoard.aspx" rel="nofollow">https:&#x2F;&#x2F;www.latticesemi.com&#x2F;Products&#x2F;DevelopmentBoardsAndKit...</a>, it has the advantage that it has a very nice open source tool flow available for it: <a href="http:&#x2F;&#x2F;www.clifford.at&#x2F;icestorm&#x2F;" rel="nofollow">http:&#x2F;&#x2F;www.clifford.at&#x2F;icestorm&#x2F;</a>. I own both boards and I work professionally with EDA tools, honestly the biggest cliff is setting up tooling and processes around a given project. If you don&#x27;t want to do everything from scratch you need to either rely on proprietary libraries, which will cost you a fortune and&#x2F;or lock you into a very specific tool flow (Synopsis Designware libraries). The other alternative is to use one of the open source ecosystems like <a href="https:&#x2F;&#x2F;github.com&#x2F;m-labs&#x2F;migen" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;m-labs&#x2F;migen</a> or tooling around Chisel or various scattered libraries of open-source components which are often hard to get to work together, but also this requires a massive amount of time investment to just get the synthesis &#x2F; simulation flow working.<p>The situation is slowly improving and there are various university research groups and corporations that have released larger amounts of open source code that one can use as a starting point:<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;openhwgroup&#x2F;cva6" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;openhwgroup&#x2F;cva6</a> (mostly done by ETHZ people initially, also see <a href="https:&#x2F;&#x2F;github.com&#x2F;pulp-platform&#x2F;pulpino" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;pulp-platform&#x2F;pulpino</a>)<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;chipsalliance&#x2F;Cores-SweRV-EL2" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;chipsalliance&#x2F;Cores-SweRV-EL2</a> (one of several high quality open-source RISC-V cores by Western Digital)<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;chipsalliance&#x2F;rocket-chip" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;chipsalliance&#x2F;rocket-chip</a> (UCB by initial creators of RISC-V)<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;electronicvisions&#x2F;nux" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;electronicvisions&#x2F;nux</a> (POWER based embedded processor, that we have used in several neuromorphic chip tapeouts (silicon proven))<p>On the tooling side one great thing that happened is that the verilator open source simulator has gained <i>a lot</i> of traction.<p>- <a href="https:&#x2F;&#x2F;github.com&#x2F;verilator&#x2F;verilator" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;verilator&#x2F;verilator</a><p>On the hardware synthesis side some exciting developments are also happening, mostly driven by the desire of companies like Google to be vendor independent for their Deep learning accelerator designs and through funding by DARPA.')