Item(by='ucarion', descendants=None, kids=None, score=None, time=1605467608, title=None, item_type='comment', url=None, parent=25102163, text='One thing that&#x27;s a bit unclear to me about properties, as described in this article, is how they should behave with respect to serialization.<p>For instance, in C#, both System.Text.Json and Newtonsoft.Json will get and serialize all properties, regardless of whether they are virtual &quot;projections&quot; (like the &quot;red&quot; property in the article&#x27;s RgbColor example) or &quot;plain&quot; properties. Similarly, all properties are deserialized and set when doing the reverse.<p>This has the consequence that you may have redundant information in your serialization format. That&#x27;s not the end of the world, and in fact there are some use-cases for this. The bigger consequence is that you can have redundant and <i>conflicting</i> information in the serialized data you read in.<p>For instance, adapting the author&#x27;s example to C#:<p><a href="https:&#x2F;&#x2F;try.dot.net&#x2F;?fromGist=1bb01bd2b78a3212c52b40ff7955c04a" rel="nofollow">https:&#x2F;&#x2F;try.dot.net&#x2F;?fromGist=1bb01bd2b78a3212c52b40ff7955c0...</a><p>You get a different deserialization result depending on the order of the properties in the JSON, because the last property wins and the properties are mutually inconsistent with respect to the underlying data model.<p>Is the conclusion from this that objects which you intend to serialize should avoid using this &quot;properties&quot; feature, or else be extremely deliberate about what properties to include in the serialization format?')