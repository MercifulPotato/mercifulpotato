Item(by='evincarofautumn', descendants=None, kids=None, score=None, time=1601939423, title=None, item_type='comment', url=None, parent=24690990, text='Cool, thanks!<p>I’m thinking about a similar sort of coercion system for a language project, and it’s good to have a slightly broader view of the design space. This area hasn’t been very well explored yet, not just in terms of semantics, but also developer ergonomics: most of the time you want to hide representations for convenience, but when considering safe coercions, you <i>really</i> want to make it possible to talk about them explicitly &amp; precisely.<p>This feature is also very subtle, and right at the very edge of the type system, so it’s <i>extremely</i> easy to break soundness here, usually by failing to consider things like variance. The reason “roles” were added to GHC in the first place isn’t just because of the issue with type families &#x2F; associated types mentioned in that RFC; it’s also because anything that provides a safe API atop unsafe internals could <i>also</i> be used to violate soundness, especially in conjunction with mutation. The classic examples are: 1. coercing “container of A” to “container of B” using the coercion from A to B, then inserting a B that is not a valid A, either in its value or just because A and B have incompatible trait instances (like ordering or hashing). You need to be able to disallow conversions between things even if they have identical representations.')