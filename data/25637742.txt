Item(by='heresie-dabord', descendants=None, kids=None, score=None, time=1609793454, title=None, item_type='comment', url=None, parent=25626202, text='I agree with you that the immediate start-up and feedback is a great benefit to the coder. This is why I dislike complex, Rube-Goldbergian REPL systems.<p>There is a use-case for a throw-away interaction with a REPL. For example, how does $builtinFuncX work, or how would $data best be imported into a structure?<p>A REPL can also be a good initial approach to a more ambitious problem. In this case, a REPL can be good for focus and discipline.<p>If the second case is going to answer your concern and be constructive, it&#x27;s necessary to be able to build the code for sharing and cleanly export the code for re-use.<p>I&#x27;ve had success tackling challenges using REPLs for Python and Perl [1] in both ways. But no tooling is going to solve the problem of a sloppy teammate who claims success just because &quot;it compiles&quot; and &quot;it works on my box&quot;. A person who knows how to build good tooling goes further.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;viviparous&#x2F;preplish" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;viviparous&#x2F;preplish</a>')