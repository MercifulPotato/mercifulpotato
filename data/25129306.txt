Item(by='spijdar', descendants=None, kids=None, score=None, time=1605644758, title=None, item_type='comment', url=None, parent=25128371, text='This really depends. Once-upon-a-time, at least in the UNIX (tm) world, there were a plethora of ISAs, and this was the environment where ideas like Java really made sense. Write once, run anywhere.<p>Most OSes are still pretty well situated to handle this. Java remains, and is easily cross platform. I can run Java-based proprietary games like Minecraft on my POWER9 desktop, despite no-one involved probably ever considering ppc64le a valid target.<p>The CLR on Windows is also pretty easily cross-platform, although it won&#x27;t help legacy x86 PE executables. Apple has solved this for ages on the tooling side, encouraging production of &quot;fat&quot; binaries with many arches since OS X was NeXT, and your .app packages needed to run on x86 + m68k + SPARC + PA-RISC.<p>Emulators like Rosetta (and qemu&#x27;s usermode emulation) can fill the gap of legacy executables, while these other technologies can make the end-user experience good. Of course, that&#x27;s only if a) someone writes your platform&#x27;s equivalent of Rosetta, and b) developers write crossplatform apps.<p>So, the answer depends on how cynical or optimistic you are :-)')