Item(by='bern4444', descendants=None, kids=None, score=None, time=1607399112, title=None, item_type='comment', url=None, parent=25341233, text='If you have a function that works on numbers:<p><pre><code>    const add3 = val =&gt; val + 3;\n</code></pre>\nand need to make it work on optional&lt;number&gt;, all you need is map<p><pre><code>    const optionally6 = Some(3).map(add3);\n</code></pre>\nwhere Optional.map works just like array.map. Its the same idea when you map over an array:<p><pre><code>    const add3 = val =&gt; val + 3; \n    [1, 2, 3].map(add3);\n\n</code></pre>\nThough an even nicer approach is to use static versions of these functions:<p><pre><code>    const add3 = val =&gt; val + 3;\n\n    const add3ToArrayVals = Array.map(add3);\n    const add3ToOptionals = Optional.map(add3);\n\n    const someSix = add3ToOptionals(Some(3)); &#x2F;&#x2F; Some(6);\n    const some456 = add3ToArrayVals([1, 2, 3]);&#x2F;&#x2F; [4, 5, 6];\n\n</code></pre>\nThis is just a static version of Array.map (doesn&#x27;t officially exist in JS but is trivial to write) or Optional.map<p><pre><code>    const staticArrayMap = (fn) =&gt; (array) =&gt; array.map(fn);\n</code></pre>\nEdit to add, from your example<p><pre><code>    func(some(3))\n</code></pre>\nwould just become<p><pre><code>    some(3).map(func);\n</code></pre>\nand then you can do<p><pre><code>    some(3)\n        .map(func)\n        .map(otherFunc)\n        .map(yetAnotherFunc);</code></pre>')