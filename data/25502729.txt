Item(by='Geminidog', descendants=None, kids=[25506592], score=None, time=1608609901, title=None, item_type='comment', url=None, parent=25502600, text='I&#x27;m more referring to a type of technical debt. Of course if your product manager wants you to refactor your web app into a PS5 video game nothing can save you. I wouldn&#x27;t call the fact that your code wasn&#x27;t prepared to be refactored into a PS5 video game &quot;technical debt.&quot;<p>As most software engineers know, there&#x27;s tons of examples where the main issue was mostly organizational issues preventing the programmer from simply removing&#x2F;replacing&#x2F;moving logic to fulfill the main objective. This is the &quot;technical debt&quot; I&#x27;m talking about.<p>In that case if all your logic was combinators (and thus dependency free) then all you need to do is move things around, pull things out and&#x2F;or put things in like lego blocks.<p>The main reason why people can&#x27;t move code around like lego blocks is because most logic contains dependencies or is tied to state. Combinators are never tied to state or anything and thus if all your code was made up of combinators you would have no issues in moving logic around. The problem of organizational technical debt is solved with combinators.<p>If you take it a step further and use the point free style, you are eliminating state all together further protecting your program from ever being dependent on state.<p>The logic is pretty sound though most people can&#x27;t put the benefits of FP into purely logical terms. They only talk about why they like it qualitatively without ever pinpointing why it&#x27;s truly better for design&#x2F;organizational issues.')