Item(by='Jeaye', descendants=None, kids=[24821931], score=None, time=1603044744, title=None, item_type='comment', url=None, parent=24817594, text='C++&#x27;s more recent changes, in the past decade, have made it <i>easier</i> to write. However, adding more to C++ is never going to make it <i>simpler</i>. C++ still carries all of the baggage of C and all of the baggage of the older C++. None of these can be removed without breaking millions of programs, but all of these things can still bite C++ devs and will still exist in older C++ code.<p>For example, undefined behavior by default, value categories (rvalues, lvalues, etc), exceptions in destructors, SFINAE, and so much more.<p>Even if C++ were to end up making its syntax closer and closer to Python, which it seems to be doing, beneath the sugar is still a haggard mound of a ridiculously complex  and unsafe language. The only way to change that is to start  fresh, as Rust did. Rust is complex, indeed, but it removes a whole lot of the safety concerns and legacy crud.<p>Presumably, 20 years from now something else will be created which improves upon Rust in such profound ways and we can all talk about how complex Rust is and how its idioms aren&#x27;t as &lt;something&gt; as they could be. Maybe we&#x27;ll be using machine learning to write and compile code for us and Rust will be shat on for being so complex and manual. But, for now, even with its complexity, it should be a breath of fresh air for anyone working on non-trivial, multi-threaded C++ applications.<p>There will be those who don&#x27;t dig it, just as there were those who have stayed with C all this time. But how else would we keep the vulnerability finders busy? Everyone needs to eat.')