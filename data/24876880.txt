Item(by='chubot', descendants=None, kids=None, score=None, time=1603512747, title=None, item_type='comment', url=None, parent=24874485, text='Right, I&#x27;m not really familiar with PowerShell, but my understanding is that the objects in object pipelines are literally .NET objects with methods on them.<p>So the entire shell script is confined to the .NET VM?<p>In that case, I would hesitate to even call it a shell in the traditional sense.<p>Shell has a kind of code &lt;-&gt; data &lt;-&gt; code &lt;-&gt; data architecture, i.e. programs in different languages processing standard language-independent data formats (lines of text, JSON, HTML, QSN, etc.)<p>It&#x27;s more like functional programming, where functions stand alone.  (And note Oil is in a very OO style, because it deals with significant program state, so I&#x27;m not against objects.  Right tool for the right job.)<p>-----<p>Other questions:<p>What if I want to pass some data to R and plot it?  Or throw away some outliers with a little formula?  I now have to figure out how to serialize those objects.  Or do I have to write an R interpreter for the .NET VM? :)<p>What about splitting the pipeline over two different machines?  I can do &quot;ssh user@host find &#x2F; -type f&quot; trivially in shell.  And I do this in practice, e.g. in Oil&#x27;s continuous build: <a href="http:&#x2F;&#x2F;travis-ci.oilshell.org&#x2F;jobs&#x2F;" rel="nofollow">http:&#x2F;&#x2F;travis-ci.oilshell.org&#x2F;jobs&#x2F;</a><p>&quot;Distributed objects&quot; have proven to be a bad idea.  &quot;Real&quot; (large scale, deployed) distributed systems are architected more like Unix than Windows.<p>The point of shell is to integrate disparate tools, so if there are some privileged tools in the .NET VM, and then some other tools that require a lot of work to get at, then that misses the point IMO.')