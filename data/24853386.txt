Item(by='Arnavion', descendants=None, kids=[24854247], score=None, time=1603322613, title=None, item_type='comment', url=None, parent=24852307, text='I like TOML too, but speaking of footguns, there is one where it comes to serialization. If you have something like:<p><pre><code>    struct Foo {\n        int bar;\n        Baz baz;\n        int quux;\n    }\n</code></pre>\n... you can&#x27;t naively serialize this like:<p><pre><code>    [foo]\n    bar = 5\n\n    [foo.baz]\n    ...\n\n    quux = 6\n</code></pre>\nbecause that makes `quux` a property of `foo.baz`, not of `foo`.<p>The serializer has to be smart enough to recognize that primitive fields have to be serialized before object fields. As a practical example, Rust&#x27;s TOML library is <i>not</i> smart enough to do so, though it does at least detect when this would happen and fails with a runtime error. (The workaround is to change your type definition to reorder the fields yourself.)<p>Ref: <a href="https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=dbc26ca3f9ba00c0d30492ae73e3a230" rel="nofollow">https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;editio...</a>')