Item(by='kelchm', descendants=None, kids=None, score=None, time=1601912234, title=None, item_type='comment', url=None, parent=24686527, text='Great discussion in this post. While I do generally prefer squashed commits when merging a branch, I absolutely seen that  cause some pain in specific circumstances.<p>I think part of the problem is that modern repository software has built an &#x27;additional layer&#x27; on top of git (IE: pull requests) that most of us have become accustomed to using in our day to day workflows. Git itself doesn&#x27;t really have a &#x27;lossless&#x27; way to persist that extra information.<p>Squashing commits at merge gets us close, but ultimately we’re throwing away potentially useful information by doing so. The main time I’ve seen it be problematic is when multiple people are working on a complex feature where PRs are getting merged into a long-lived feature branch rather than directly to the default branch.<p>Say I need to base my work on someone else’s WIP branch for said feature. If they squash their commits when merging their work into the feature branch, I’m going to end up with merge conflicts that need to be manually resolved as the individual commits that I had based my work on no longer exist, as they’ve all been squashed into a single new commit.<p>What if git supported a sort of &#x27;soft squash&#x27; concept, where associated commits could (optionally) be grouped together with additional metadata. That would let the application consuming the git history (IDEs, CLI tools, etc) make the decision in how commit histories are presented to the user.')