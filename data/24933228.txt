Item(by='hardwaresofton', descendants=None, kids=[24933376, 24933564, 24935050], score=None, time=1603994464, title=None, item_type='comment', url=None, parent=24933136, text='Clickhouse and Timescale are different types of databases -- Clickhouse is a columnar store and Timescale is a row-oriented store that is specialized for time series data with some benefits of columnar stores[0].<p>Something like InfluxDB is a better thing to compare to TimescaleDB (and TimescaleDB does very well, though the benchmark was a bit old[1] and influx might have improved in the meantime).<p>Database types aside, what really gets me excited about Timescale is that it&#x27;s just another Postgres extension. If you&#x27;re already running a Postgres cluster for your OLTP workloads (web-app-y workloads) and have just a bit of fast-moving time series data (ex. logs, audit logs, event streams, etc), Timescale is only an extension away. You get the usual time-tested battle hardened Postgres, with all it&#x27;s features <i>and also</i> support for your time series workloads. Yeah you could set up declarative partitioning yourself (it is a postgres feature after all) but why bother when Timescale has done the heavy lifting?<p>[EDIT] - see the response below -- the benchmark is up to date, and Timescale does even better against the purpose-built tool that is InfluxDB.<p>&gt; Note: This study was originally published in August 2018, updated in June 2019 and last updated on 3 August 2020.<p>[0]: <a href="https:&#x2F;&#x2F;blog.timescale.com&#x2F;blog&#x2F;building-columnar-compression-in-a-row-oriented-database&#x2F;" rel="nofollow">https:&#x2F;&#x2F;blog.timescale.com&#x2F;blog&#x2F;building-columnar-compressio...</a><p>[1]: <a href="https:&#x2F;&#x2F;blog.timescale.com&#x2F;blog&#x2F;timescaledb-vs-influxdb-for-time-series-data-timescale-influx-sql-nosql-36489299877&#x2F;" rel="nofollow">https:&#x2F;&#x2F;blog.timescale.com&#x2F;blog&#x2F;timescaledb-vs-influxdb-for-...</a>')