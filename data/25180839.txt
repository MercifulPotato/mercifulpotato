Item(by='skybrian', descendants=None, kids=None, score=None, time=1606077512, title=None, item_type='comment', url=None, parent=25180661, text='There is the specific issue with async functions, but that&#x27;s only one example of a general problem what I&#x27;m calling &quot;function coloring.&quot; Workarounds are often possible, but they are still workarounds and often result in bad code.<p>We&#x27;ve been there with Java. An API takes a Runnable. You need to do something that does IO, so you catch the exception... and then what? Log and suppress it? This is how bad code happens. At best you get chained exceptions.<p>With Callable, they got smarter and declared it to throw Exception, which means it can only be easily propagated by other methods that declare they throw Exception. So it&#x27;s a viral declaration, unless you engage in workarounds like exception wrapping.<p>You don&#x27;t need an effect system for this to happen, though. In Go, you don&#x27;t have the problem with different kinds of errors, but you can still classify functions into two categories: those that may return an error, and those that (apparently) always succeed. If you need to fix the API, you might end up with lots of refactoring [1].<p>Mistakes at the API level can be hard to fix without touching lots of API&#x27;s. This is unsolvable in general. The only way to avoid workarounds (via escape hatches or by mocking things out) is to standardize whatever you can so it works together.<p>[1] <a href="https:&#x2F;&#x2F;www.dolthub.com&#x2F;blog&#x2F;2020-11-16-panics-to-errors&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.dolthub.com&#x2F;blog&#x2F;2020-11-16-panics-to-errors&#x2F;</a>')