Item(by='Dunedan', descendants=None, kids=[25101071, 25101190, 25101231, 25102509], score=None, time=1605446506, title=None, item_type='comment', url=None, parent=25100397, text='&gt; A lambda publishes a message to SNS, another one picks it up and writes something to DynamoDB, the third one takes that new record and sends an email…<p>Or, you know, just do related functionality in the same AWS Lambda function. While I would probably do the sending of an e-mail asynchronously as well (as AWS Lambda function triggered by a DynamoDB stream), the indirection over SNS to write something to DynamoDB seems overly complex.<p>Why would you do something asynchronously with a Serverless architecture you&#x27;d do synchronously with Ruby on Rails?<p>&gt; […] and random hardcoded configs in AWS console.<p>Just don&#x27;t do that. A Serverless application will always be a pita if it relies on manual configuration. Ensure all relevant configuration is part of Infrastructure as Code (e.g. CloudFormation or Terraform).<p>&gt; Impossible to replicate production environment<p>If the project is set up properly with Infrastructure as Code replicating the production environment is as easy as it can possibly get. And because it&#x27;s Serverless, if an environment isn&#x27;t used, it usually doesn&#x27;t even incur notable costs.<p>There is no silver bullet and I believe Serverless as well as other approaches have their place, but what I miss are similar posts about great experiences with Serverless applications. I for myself wouldn&#x27;t want to go back and I&#x27;m really happy with the problems Serverless applications solve.')