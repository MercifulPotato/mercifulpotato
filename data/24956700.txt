Item(by='spekcular', descendants=None, kids=None, score=None, time=1604195727, title=None, item_type='comment', url=None, parent=24956001, text='Certainly, algebraic topology is a huge win for algebraization!<p>&gt; Yes, parallelizing a program is about making it run faster; but parallelism is also a base fact of many problem domains, where you have multiple agents (up to and including humans) collaborating and interacting simultaneously.<p>Maybe I should say what I meant more clearly. The claim &quot;one can achieve a 7x speedup on 8 cores by adding a handful of lines to a program&quot; implicitly has a &quot;and this is good because being fast is good&quot; at the end. Why care about a speedup if you don&#x27;t care about speed in the first place?<p>It follows that when evaluating a language&#x27;s ability to gain speed through parallelization, we should also evaluate how fast that language is in the first place. If you can get a 7x speedup on 8 cores from a few lines of code, but the original algorithm is, say, 10x slower than a similar implementation in C&#x2F;Rust&#x2F;Go on one core, then who cares? The ultimate criterion is always <i>absolute speed</i>, not <i>relative improvement</i>.<p>I agree that being able to deal with concurrency is important, but as the Go people always remind me, concurrency and parallelism are distinct concepts.')