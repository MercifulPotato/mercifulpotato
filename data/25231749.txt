Item(by='patterns', descendants=None, kids=[25233293], score=None, time=1606504746, title=None, item_type='comment', url=None, parent=25230061, text='If I remember correctly, Adele Goldberg once remarked that &quot;in Smalltalk everything happens somewhere else&quot;. Although there has been ongoing work to collapse the many layers of indirection you find in message-passing systems, I am not convinced that throwing more tools at the problem will address the deeper underlying issues. At some level, you need more concise descriptions of your system and operators to shape its structure and organization; perhaps even compute different organizations. This is very difficult to accomplish in purely object-oriented systems&#x2F;languages that have no direct and convenient &quot;algebraic&quot; correspondence for composing complex communication structures and specifying relationships such as inheritance. For example, I was very taken by the idea of class definitions as expressions, having seen it in Racket first many years ago.<p>On the other hand, I believe that when it comes to low-level &quot;machine&quot; work, objects are a good abstraction to model components such as activation records such that they can be uniformly explored and modified (on the fly). But this is perhaps a moot point.<p>Over the years, I have studied many object&#x2F;component-oriented systems and come up with a sizable catalogue of message-exchange patterns, plumbing and machinery. My hope is that at some point, this can be crystallized into a language or calculus for specifying systems; and Scheme&#x2F;Racket is certainly a good language to think about these issues from another perspective (which is worthwhile to preserve).<p>So I guess, I understand your point. Thanks for raising it, much appreciated.')