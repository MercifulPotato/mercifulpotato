Item(by='rzimmerman', descendants=None, kids=[25306584, 25306810, 25307835, 25311994, 25307667, 25310244, 25309630, 25309485, 25307394], score=None, time=1607109614, title=None, item_type='comment', url=None, parent=25306071, text='Just because code is touched during the test process doesn’t necessarily mean it has been tested. Coverage is more useful for finding chunks of code that aren’t exercised at all by tests. Branches that never get hit that probably deserve extra scrutiny. Coverage is an interesting heuristic but 100% code coverage is not 100% bug free code.<p>Likewise, there’s stuff that’s just not worth it to wrap in a test. The effort involved in mocking&#x2F;wrapping&#x2F;abstracting sometimes isn’t worth the effort for some code, like simple calls to common libraries, reading a file, CLI help strings, etc. This stuff generally is better served by end-to-end or integration tests. Or just gets exercised naturally as part of development. Or can crash without much consequence.<p>My point is coverage is a tool that tells you where to look, not the one and only metric that tells you how reliable your code is.')