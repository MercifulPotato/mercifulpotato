Item(by='SAI_Peregrinus', descendants=None, kids=None, score=None, time=1604110100, title=None, item_type='comment', url=None, parent=24943741, text='Get a job working in embedded systems. Preferably in the right industry.<p>Like any programming job, but without formal experience you&#x27;ll need more (and interesting) informal experience, ie side projects.<p>Start with something simple, like an STM32Discovery board. Blink the LEDs. Respond to the button.<p>Get a logic analyzer, like a Saleae ($400 for the Logic8) or Digilent Digital Discovery ($200, worse software IMO) or something similar. Get a bench power supply. Get an oscilloscope (Rigol DS1054Z is cheap ($400 or so) and hackable. Don&#x27;t get a PC-based one, get one with a UI similar to what you&#x27;ll use in professional work.) Get a couple of cheap USB-UART adapters, maybe a BusPirate, an ST-Link, and a hand full of STM32BluePill boards.<p>Get an SPI flash memory dev board, and write code to read&#x2F;write that external flash. Use the STM32&#x27;s built-in SPI peripheral. Use the logic analyzer to decode the signals &amp; for debugging.<p>Get an I2C sensor dev board, and write code to read the sensor value. Use the STM32&#x27;s built-in I2C peripheral.<p>Get FreeRTOS running on your Discovery board. Make tasks for your sensor reads, LED control, maybe log data to the SPI chip. Show that it&#x27;s all hard real-time.<p>From there, maybe add more inputs &amp; outputs. Making a 3D printer or CNC router from scratch would be impressive. Or an RC car, or some sort of robot, or a drone. Maybe go to a more capable SoC, like a BeagleBone Black board or Raspberry Pi. The product I work on (an eletronic logging device for the trucking industry) was initially prototyped using a BeagleBone Black. (This post is my own opinion, and should not be taken as official statements of my employer.)<p>Or go to a less capable chip, like a PIC16F18345 ($12 dev boards) and see what you can do with &lt;=1024 bytes of RAM.<p>Definitely learn to build your code without using the vendor IDE. It&#x27;ll save you a lot of pain. Makefiles (or CMake, or whatever build system you prefer) + writing linker scripts + \npointing your preferred IDE (or editor) at that is a much better way.<p>Espressif&#x27;s ESP32 and ESP8266, Nordics NRF52 parts, and some others have built-in networking (BlE, WiFi, Cell, etc). Those can be good for all sorts of projects.<p>There&#x27;s some industry bias against Arduino, it&#x27;s seen as overly abstract and not something &quot;real&quot; programmers use. If you get an Arduino, it can be a great starting place, but also get an ICSP (In Circuit Serial Programmer) and learn to use the ATMEGA328p chip without the Arduino bootloader+libraries. It&#x27;s a fine chip and a fine platform, but not necessarily great for resume building.<p>Basically look on Adafruit and Sparkfun and the like, figure out what sorts of sensors &amp; outputs look interesting, and start making things to use them. The product lines I mentioned happen to be popular among hobbyists, which means less chance of getting stuck without community help available.')