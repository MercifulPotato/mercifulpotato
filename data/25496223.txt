Item(by='Symbiote', descendants=None, kids=None, score=None, time=1608567423, title=None, item_type='comment', url=None, parent=25494152, text='I write scripts which don&#x27;t need to be portable using Zsh, and I find it very useful for interactive use too.  If I&#x27;m handling a lot of files&#x2F;file formats, the parameter expansion flags are very useful:<p><pre><code>  for i in (#i)*.png~*orig*(oL); convert $i $i:r:l.jpg\n</code></pre>\nThat&#x27;s a (#i) case-insensitive match for ∗.png, but excluding ~ files matching ∗orig∗, and (oL) ordered by length&#x2F;size.<p>The $i:r strips the final file extension (i.e. .png), and the :l downcases the filename.<p><pre><code>  x=( DSC_&lt;0450-0630&gt;.JPG )\n  some-command -A${^x}\n  Runs: some-command -ADSC_0450.JPG -ADSC_0451.JPG -ADSC_0452.JPG …\n</code></pre>\nx is set to an array matching files like DSC_0500.JPG, where the number is in the range 0450-0630.  The -A${^x} expands the array, prefixing each entry with -A.<p><pre><code>  ls -l **&#x2F;src&#x2F;**&#x2F;*(.x)\n</code></pre>\nRecursively list all plain files (.) that are executable (x), and where the directory &quot;src&quot; is somewhere in the path.<p>Have a look at &quot;man zshexpn&quot; (then &quot;Parameter Expansion&quot;) or [1], then &quot;Filename Generation&quot; further down.  30 minutes reading this is worthwhile for anyone who uses Zsh regularly.<p>[1] <a href="http:&#x2F;&#x2F;zsh.sourceforge.net&#x2F;Doc&#x2F;Release&#x2F;Expansion.html#Parameter-Expansion" rel="nofollow">http:&#x2F;&#x2F;zsh.sourceforge.net&#x2F;Doc&#x2F;Release&#x2F;Expansion.html#Parame...</a>')