Item(by='pwm', descendants=None, kids=None, score=None, time=1604326219, title=None, item_type='comment', url=None, parent=24964441, text='&gt; Forcing someone to write iFoo instead of foo isn’t type safety, but it’s a certain kind of safety<p>The term I&#x27;d use (at least from the top of my head) is hygiene. The article uses the word safety in a restrictive sense, ie. preventing errors. Forcing iFoo instead of foo, to me, is more about hygiene where one could still potentially make an (accidental or deliberate) error but that would go against said hygiene. Maybe another way to put it is that safety prevent misuse while hygiene guides correct use. Or another is that with safety the letter and spirit of the law are one and the same while with hygiene it&#x27;s not.<p>Haskell&#x27;s `newtype` is an amazing tool for (proactive) hygiene and, as the article says, a limited tool for safety. By proactive hygiene I mean that if you have:<p><pre><code>  bmi :: Float -&gt; Float -&gt; Float\n</code></pre>\nLooking at it you don&#x27;t know what those params are. They are all just `Float`s. There&#x27;s not vocabulary to them. Meanwhile here:<p><pre><code>  newtype Height = MkHeight Float\n  newtype Weight = MkWeight Float\n\n  bmi :: -&gt; Height -&gt; Weight -&gt; Float\n</code></pre>\nIt is both clear what they are as well as the compiler will prevent you from passing `Weight` as the 1st param. Now it&#x27;s not safety as you can still wrap the wrong `Float` as `Height` but that would go against the hygiene.')