Item(by='physicles', descendants=None, kids=None, score=None, time=1604624618, title=None, item_type='comment', url=None, parent=24993837, text='I’m so glad they dispensed with the “constraint” language construct from earlier drafts, and just folded it into “interface”.<p>The solution for supporting &lt; and &gt; — or rather, continuing to support them only for built-in types — feels powerful enough without introducing full-on operator overloading.<p>If I read correctly, this does mean we’ll still need multiple versions of some common functions like min&#x2F;max depending on whether the type is a built-in or something else that’s comparable (like bigint.Num or time.Time), but that feels ok to me. I wonder how the standard library will accommodate this — perhaps you just redefine math.Max to be generic, since such a change would be backwards-compatible for the vast majority of uses.<p>Like other posters, I’d also appreciate support for user-defined types in language constructs like for..range and [ ], but that’s orthogonal to generics and can be added in a later 2.x revision (just need to define a built-in constraint-interface for these).')