Item(by='jswny', descendants=None, kids=None, score=None, time=1610651498, title=None, item_type='comment', url=None, parent=25779417, text='&gt; and the ones willing to learn will need many months or years to be productive<p>That’s interesting. I’ve been doing Elixir for a while and found it almost overwhelmingly simple. As in, I’d do something in a very simple way which would usually take me a lot longer and have to think whether it was actually right because I’m not used to that.<p>I recently learned Go and I think it was only slightly more difficult to learn than elixir. I could see having trouble if you have never done functional before, but that’s kind of a separate issue. The language itself is tiny.<p>OTP is one thing that can take a bit of getting used to. But again, I think that’s only for people who are only used to traditional threading methods of concurrency, which is again a separate issue. OTP and the actor model themselves are dead simple in terms of how to use them.<p>&gt; The editor plugins are terrible, slow, and blow away your CPU doing god knows what kind of indexing<p>Without even looking I already know what this is. You are using ElixirLS and you are hitting the Dialyzer PLT generation which is needed for type assistance. Elixir LS gives you a pop-up (at least in VSCode) telling you that it&#x27;s building the PLT and it might take a while. You can disable this if you really want. Most importantly it ONLY RUNS ONE TIME. So, if you&#x27;ve already generated the PLT for a project, it will NEVER run again until you upgrade Elixir or something major. Other than that, I rarely ever see Elixir LS taking up any noticeable CPU.<p>&gt; Compilation is slow and takes a lot of time\nYes it does. However, you can just cache the _build&#x2F; directory in CI. Then it will act like it does locally, only recompiling what has changed and doing it very quickly. Usually, dependencies will not need to be recompiled if they haven&#x27;t changed.<p>Also, testing in Elixir is crazy fast and everything runs nicely async by default, even database tests with Ecto.')