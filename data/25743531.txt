Item(by='Kalium', descendants=None, kids=None, score=None, time=1610436752, title=None, item_type='comment', url=None, parent=25743389, text='&gt; I don&#x27;t see how this is any different from Valve &quot;reinventing&quot; SSL by using RSA.<p>What Valve is doing is layering cryptography to make it possible to do access control more granular than a pure binary. What you are proposing is layering <i>hashing</i> in a way that does not introduce access control.<p>I hope this is clearer!<p>&gt;  I just don&#x27;t want my password to be in plain-text. The only thing the server should get is the hash. If you are using RSA on the password, that means your password is going to be in plaintext on their servers eventually.<p>OK. Now your hashword is on the server. Your hashword now has essentially all the properties of your password that you were trying to get away from in the first place. It is <i>de facto</i> your password now.<p>Sure, it&#x27;s a different string now. Your goal is accomplished and the server doesn&#x27;t have your magic string. Instead it has a different one that&#x27;s equally magical, equally came from you, and equally security-sensitive.<p>That&#x27;s why pass the has was brought to your attention. Network security has been down this road before. We had login systems where the server only ever had a hash, and never the original magical string. They were not safer.<p>&gt; The original password? Ok go ahead and encrypt it (and also hash it). But only do it once and not every login.<p>OK. So now we have a new thing that&#x27;s identical to a password in all of its properties, except that it requires extra work client-side. Again, <i>what have we gained</i>? This is not an idle question, it&#x27;s the only one that matters.<p>Valve has an answer, and it&#x27;s a reasonably compelling one that speaks to real-life use-cases.<p>&gt; It just seems strange to me that you would have trouble trusting your administrators to accidentally leak logs.<p>I <i>routinely</i> see developers do things like dump full web request contents into logs without thinking about consequences. With that in mind, I think it&#x27;s very possible that exactly this kind of scenario could happen. Indeed, I think it a virtual certainty.<p>The plaintext of passwords being stolen from the memory of servers that handle logins is a comparatively uncommon event, as far as I know.<p>&gt; What happens if they need to debug or log the app server behind the SSL layer?<p>A great question! That&#x27;s critical info. In this scheme, they can. They just cannot access the most sensitive contents, such as passwords. Literally every other part of the request has been decrypted and is available for use.<p>I hope this has answered your questions.')