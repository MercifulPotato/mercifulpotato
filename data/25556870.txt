Item(by='siraben', descendants=None, kids=None, score=None, time=1609132213, title=None, item_type='comment', url=None, parent=25554756, text='Writing a Lisp transpiler is a great exercise, and becomes more involved but more also educational as the source and target language become more and more distant. Here&#x27;s my Scheme to JS transpiler that supports higher order functions, variadic lambdas, set! and recursion.[0] The function that performs the conversion is <a href="https:&#x2F;&#x2F;github.com&#x2F;siraben&#x2F;lisp-to-js&#x2F;blob&#x2F;0251892e55d1a88f9046242a4081d9c48cb949ad&#x2F;src&#x2F;Translation.hs#L158" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;siraben&#x2F;lisp-to-js&#x2F;blob&#x2F;0251892e55d1a88f9...</a><p>- Lisp -&gt; JS is quite easy, good practice for AST representation and working with trees<p>- Lisp -&gt; C is more challenging, you&#x27;ll need to perform \nclosure conversion and generate C structures to hold the environment, see[1] as an example for another functional language<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;siraben&#x2F;lisp-to-js" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;siraben&#x2F;lisp-to-js</a><p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;jozefg&#x2F;pcf&#x2F;blob&#x2F;master&#x2F;explanation.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;jozefg&#x2F;pcf&#x2F;blob&#x2F;master&#x2F;explanation.md</a>')