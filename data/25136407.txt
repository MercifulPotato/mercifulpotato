Item(by='simiones', descendants=None, kids=None, score=None, time=1605705600, title=None, item_type='comment', url=None, parent=25127039, text='P4 definitely has its own rough sides, but I find the model is overall much simpler.<p>In essence, P4 is a file tracker - you have remote files and local files kept in sync (git clone, git fetch, git pull). The basic workflow is to modify, add, copy or delete one or more files (git add), group the changes into a changelist (git stage), give it a description (git commit), and submit that change list to the remote (git push). Of course, if someone else modified the same files between your last sync and your submit, you will also have to resolve conflicts.<p>Of course, you can sync all or part of your files to some specific older CL (git checkout). You can revert a change on the remote as well (git reset). When you look at a file or directory, you can see the log of all changes that happened to it (git log).<p>The biggest difference from Git is in the branching area - branches in P4 are simply copies of one or more files, together with some metadata to tell P4 that this is an intentional branch. Working with branches is simply working with different copies of a file. When you want to bring changes from one branch back into the other, you can merge (integrate in P4&#x27;s parlance) one or more changes between the branches. At that time, it does a 3-way merge just like Git - last common ancestor, changes in branch A, changes in branch B =&gt; result. The most common way of creating branches is to have each branch be a copy of the entire project dir (so you would see on your local system ~&#x2F;p4&#x2F;root&#x2F;proj1&#x2F;main,~&#x2F;p4&#x2F;root&#x2F;proj1&#x2F;dev,~&#x2F;p4&#x2F;root&#x2F;proj1&#x2F;feature1 etc.).<p>One limitation of P4 branching is that you can&#x27;t really revert a merge in P4. You can of course revert the changes, but the merge is forever considered the new common base for the two branches. So if you integrate branch A into branch B, then revert the change on branch B, and then try to integrate again, P4 will tell you that all of the changes have already been integrated. If you try to integrate B into A now, it will try to integrate the revert into branch A.<p>And this is essentially it. P4 scales much better than Git, so most companies have a single P4 repo, and everyone syncs only the parts that they need.<p>All of these things can be done from either the command line (p4 sync, p4 edit, p4 reconcile, p4 submit, cp + p4 branch, p4 integrate) or from the very simple first party GUI, P4V.')