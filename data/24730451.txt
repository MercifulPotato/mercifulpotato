Item(by='steveklabnik', descendants=None, kids=[24731850, 24730717], score=None, time=1602255141, title=None, item_type='comment', url=None, parent=24730400, text='&gt; The overall result is that everyone pays the cognitive cost of exception (spelled &quot;unwind&quot; in Rust) safety<p>Very, very few people have to think about unwind safety, because it really only comes into play when you&#x27;re writing unsafe code, and relying on the ability for panics to be caught. Many folks aren&#x27;t writing any unsafe, and many who are are doing it explicitly in a panic=abort environment. And most don&#x27;t rely on panics being able to be caught in the first place.<p>So, some subset of library authors have to pay attention to unwind safety in some cases. This is hardly &quot;everyone.&quot;<p>&gt;  pays the syntactic<p>It&#x27;s one character.<p>&gt; and runtime costs of error code checking,<p>Exceptions also have runtime costs. I&#x27;m not aware of anything demonstrating that there is a really major difference between the two in real systems. I would be interested in reading more about this! Most of the discussion I&#x27;ve seen focuses on microbenchmarks, which can be very different than real code.<p>&gt; pays the runtime cost of unwind tables,<p>Only if you want them, as you yourself mention, you can turn this off. And many do.')