Item(by='jurip', descendants=None, kids=None, score=None, time=1603958376, title=None, item_type='comment', url=None, parent=24923217, text='Not the OP, but:<p>1. Value types<p>2. Tuples<p>3. Key paths<p>4. Checked exceptions (could be more powerful in Swift, but they are there, and when not used in excess they are actually pretty nice, and Swift&#x27;s `try` syntax is excellent)<p>5. Swift&#x27;s enums and `switch` feel both more straightforward and more powerful than Kotlin&#x27;s sealed classes and `when` (I&#x27;m not sure about this, but I think there are situations where you get better coverage checking with Swift&#x27;s pattern matching.)<p>6. Reified generics (I know that opinions on this vary, and it doesn&#x27;t often matter, but I&#x27;ve been just writing some code where it&#x27;s been nice to be slightly more type safe with Any values)<p>7. More principled null handling (Optional is just an enum, although with some extra syntactic support)<p>8. `if let`, `if case`, `guard let` and `guard case` allow for simpler handling of multiple values than Kotlin&#x27;s `?.let` and null checks<p>I like Kotlin being more expression oriented, but in the end I often find my Swift code to be less contorted due to the more powerful conditional constructs. GC vs ARC isn&#x27;t much of an issue, both work for me.')