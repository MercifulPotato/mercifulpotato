Item(by='drdeca', descendants=None, kids=None, score=None, time=1603348270, title=None, item_type='comment', url=None, parent=24850509, text='I don&#x27;t think the numbers really have to be &quot;infinite&quot; exactly (well, I suppose it depends what you mean).\nSuppose you introduce a data type which consists of an ordered pair of floating point numbers, along with an ordering relation, such that the elements of the data type are ordered lexicographically (i.e. if the first entries differ, then the one with a larger first entry is larger. Otherwise, the one with the larger second entry. If they are equal then they are equal.)<p>If you have an environment which gives rewards of this type, and you want the model which gets the highest reward, you are likely to have an issue if you try to represent the rewards using a single floating point number. (well, you could just use the first entry, and do decently well, but you would lose out a bit on what could be accomplished on the second number.)\nOf course, because there are, in actuality, only finitely many floating point values of a given precision, you can actually give an enumeration of the values of this type in order, and if you use that enumeration for the rewards, then that could work.<p>However, when we use floating point numbers, we sometimes sorta-pretend that they don&#x27;t have a finite range of actual-number-values . We sometimes sorta-pretend that they are the actual real numbers (with a little fuzziness and errors tacked on, when we are being careful). We use them in computing &quot;derivatives&quot; and such. And this works pretty well!\nBut if we wanted to use the enumeration of the pairs of floats, if we just treated them as the (bigint) integer index of the pair, we would lose all the nice interpretation that goes with floating point numbers, and be left with only the ordering. The notion of the relative distances between the different values would be lost. The whole &quot;use the derivative of this function (except we are using floating point numbers)&quot; trick stops being applicable.<p>While adding together any number of copies of (0.0 , 1.0) would never surpass (1.0 , -5.0) , that&#x27;s not really a reason to make it so we can&#x27;t define the preferences we want to represent, uh, unable to handle that situation.')