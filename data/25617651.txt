Item(by='infradig', descendants=None, kids=[25618010], score=None, time=1609629871, title=None, item_type='comment', url=None, parent=25610741, text='New to Rust, was excited to see Prolog anonymous variables make an appearance. But one thing struck me is the mismatch between variable and function declarations...<p><pre><code>  let x: i32 = 42;\n</code></pre>\nvs<p><pre><code>  fn fair_dice_roll() -&gt; i32 { 4 }\n</code></pre>\nIt seems the designers missed an opportunity, as the latter could quite easily have been:<p><pre><code>  fn fair_dice_roll() : i32 = 4;\n</code></pre>\nor<p><pre><code>  fn fair_dice_roll() : i32 = { ... code that produces 4... }\n</code></pre>\nat the slight expense of giving up the cutesy right-arrow. Maybe i&#x27;m just used to Prolog&#x2F;Lisp code=data syntactic simplicity.<p>And that&#x27;s as far as I got as I exited the page scratching my head to write this comment.')