Item(by='tonyhb', descendants=None, kids=[25382764], score=None, time=1607662653, title=None, item_type='comment', url=None, parent=25379373, text='I use both in different projects.  OPA (and its language Rego) is a good matching and policy engine with declarative blocks, modules, and expressive functions for HTTP headers, JWTs, etc.  It&#x27;s great for security.  For building up abstractions and testing arbitrary JSON with complex, pre-defined policies.  Testing is built in, and that&#x27;s great.  You can create &quot;functions&quot; and your own DSL for matching&#x2F;evaluation.<p>If you want ABAC, use OPA.  In every case.<p>CEL, and CEL-GO, is entirely different.  It allows you to evaluate arbitrary expressions with random data.  Think a search (eg. linkedin API&#x27;s crappy search, or log searching, or random predicates).<p>You would not define complex policies in CEL like you would in OPA. Well, I would not - you can define arbitrary macros and functions in CEL but it is not made for that scale. OPA is more suited for that.<p>Some examples:<p>- In OPA, you can define a policy that matches RBAC, ownership&#x2F;acl, and ABAC in one file.  With multi-tenancy.  Think:  &quot;as a patient, I can see my data&quot;, and &quot;as the patient&#x27;s guardian, if they&#x27;re under 18, I can see their data&quot;.  And &quot;As a doctor in the patient&#x27;s clinic, I can see their data&quot;.  And &quot;as a clinical director in sudo mode, I can see their data&quot;.  All in the same policy package, with tests.<p>- OPA supports &quot;partial evaluation&quot;.  For example, if you only have a subset of data available, you can evaluate an OPA policy and have OPA tell you whether the policy evaluates to true or what data is missing.  This is quite powerful for building up complex auth layers.<p>- In CEL, you can say &quot;all users &gt; 30 days old&quot;.  Simple, easy, filtering.  EG, with a custom date macro, `date(users.created_at) &gt; duration(&quot;30d&quot;)`.<p>In short, use both.  OPA for security and complex policies.  CEL for user-defined &quot;expressions&quot;.')