Item(by='danhor', descendants=None, kids=[24821409], score=None, time=1603052903, title=None, item_type='comment', url=None, parent=24820188, text='(Have [mostly embedded] rust experience, only dabbled in go)<p>&gt; Is D ever a better choice? When?<p>Probably not, very small community, few resources, etc. â€¦<p>&gt; Why do we act like you can only pick one, when IPC and FFI and microservices mean you can split the difference if a language is only best for a portion of your project?<p>FFI is a huge pain and pretty slow in golang if not already done for you.\nIPC &amp; microservices do have a lot of overhead, so you probably don&#x27;t want use it for e.g. your text parser. It also makes it harder to use established knowledge in another language.<p>&gt; If I&#x27;m starting greenfield, when should I pick C++ over Rust?<p>- Do you have experienced C++ developers&#x2F;are you one?<p>- Is your environment geared for C&#x2F;C++ code, e.g. kernel modules or RTOSes, maybe game development?<p>- Do you have dependencies that <i>strongly</i> expect you to use a certain language, e.g. QT or (less so) GTK? Might be a pain to use with Rust<p>&gt; If I&#x27;m looking at C++ alternatives, how would I choose between Rust and Golang?<p>- Rust is more speed&#x2F;correctness focused while Go feels a bit like a faster scripting language. So something that might have started in python is probably a better match for go (a webserver, something script-like)<p>- Go really isn&#x27;t meant for constrained environments (although there do exist solutions) like small linux IOT devices or even bare-metal stuff,<p>I feel like Go &amp; Rust are pretty good complements and while you can do a lot of things with both, they are clearly very different. For some examples, with what I&#x27;d recommend, not necessarily what I&#x27;d use, since I do have a huge fondness for Rust, not so much for go<p>- Normal web backend: Go<p>- High performance web server: Rust<p>- DB: Rust<p>- App server: Go<p>- Crypto (the non-money kind) stuff: Rust<p>- WASM (it&#x27;s pretty embedded-like): Rust')