Item(by='butterisgood', descendants=None, kids=[25703238], score=None, time=1610208221, title=None, item_type='comment', url=None, parent=25699574, text='I find the &quot;I&#x27;m more productive with Python&quot; claim in the post to be specious.<p>Maybe I&#x27;ve been abused (and abusive) by bad programming practices with python in the past, but it seems you really need to lint and exercise python code to have any kind of confidence that something you think is correct won&#x27;t blow up at runtime.<p>False confidence that something is &quot;ready to go&quot;, is the worst, and it can cost a lot of money, and sometimes human life.<p>Erlang has this problem too. It&#x27;s so late binding you can make spelling mistakes and it won&#x27;t be caught until runtime. It&#x27;s actually the basis of some very powerful features, but you really have to know that coding in Erlang is not like coding in Rust, Haskell, or something else strongly typed.<p>So while I think the author has a point that concretions can get you into an inflexible, hard to refactor mess over time, I think sometimes those concretions don&#x27;t have to be as bad as they seem.<p>Consider Go. Interfaces are a form of concretion too, but the advice is to keep them small. An interface of exactly one function can be a beautiful thing. I think it&#x27;s better to have a type implement many interfaces than to have a type implement one huge interface.')