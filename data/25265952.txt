Item(by='dragontamer', descendants=None, kids=None, score=None, time=1606836427, title=None, item_type='comment', url=None, parent=25265765, text='At the assembly level, barriers are not required in many cases because x86 have total-store ordering. There are a few cases where memory-barriers are still needed... but not nearly as many examples as in ARM-world.<p>At the C &#x2F; C++ level, barriers are required because almost all compilers rearrange code in the name of optimization (especially as you go from -O to -O1, to -O2, to -O3... more aggressive rearrangements happen).<p>The optimizer needs to know &quot;not&quot; to rearrange some code, so a compiler barrier is needed.<p>---------<p>It turns out that a compiler barrier (hey compiler: do not rearrange this read&#x2F;write I&#x27;m specifying) is identical in concept to a CPU-memory barrier on a weak-ordered system (hey CPU: don&#x27;t reorder this read&#x2F;write I&#x27;m specifying).')