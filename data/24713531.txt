Item(by='ksml', descendants=None, kids=None, score=None, time=1602109590, title=None, item_type='comment', url=None, parent=24712920, text='&gt; That&#x27;s an interesting take, because I don&#x27;t see Rust as being more abstracted in this way than C++ is. Obviously it&#x27;s more abstracted than C, but by the time you get to &quot;modern&quot; C++ you&#x27;re programming in a much higher-level language than C.<p>I agree, but C++ doesn&#x27;t force you to write good, modern code, and so in lecture, we are better able to show examples of bad code that well-intentioned people might write and discuss the consequences. Also, you can&#x27;t directly make syscalls in Rust without using &quot;unsafe&quot; or a library, and it&#x27;s harder for students to see how programs interact with the kernel when that extra stuff is in the way.<p>I&#x27;m checking out Firecracker right now, and it looks like a really neat project! I&#x27;d love to talk more about virtualization in the class, especially since I feel that our current curriculum doesn&#x27;t spend as much time preparing students for the modern cloud computing architectures they are bound to work with. Curious: can you think of any safety issues you&#x27;ve encountered in Rust or bizarre bugs that Rust&#x27;s type system didn&#x27;t save you from? Those often make great lecture examples, and while we always remind students that Rust is not a panacea, I don&#x27;t think we had any good concrete examples.')