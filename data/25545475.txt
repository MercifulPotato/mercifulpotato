Item(by='pasabagi', descendants=None, kids=None, score=None, time=1609008788, title=None, item_type='comment', url=None, parent=25532990, text='I think if a dependency is a perfectly sealed abstraction, where a complex function is reduced to a simple one with no leakage, then there&#x27;s no reason not to use it.<p>Obviously, in the real world, this basically never happens. Performance is one thing that&#x27;s basically always going to &#x27;leak&#x27;, so you still get people rewriting stuff in assembly, or making custom asics, because the abstractions that higher level languages offer are not perfect.<p>In a strongly typed language, with strong safety guarantees, I think there are less ways an abstraction can leak (for instance, by corrupting memory or whatever), so there&#x27;s a correspondingly lower cost to pulling in a dependency than there would be if you were working in an unsafe language, or a dynamic one.<p>I also think if performance is the only way in which your dependency leaks implementation details, then it still makes sense to pull in a dependency first, profile, then swap out if necessary.')