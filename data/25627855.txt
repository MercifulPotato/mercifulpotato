Item(by='discardable_dan', descendants=None, kids=None, score=None, time=1609733424, title=None, item_type='comment', url=None, parent=25626202, text='I have worked on massive LISP projects that were developed using REPL-driven development, and your fears are critically valid. Even worse, this basically hamstrings it as a standalone application. The workflow to _use_ the application becomes &quot;start the REPL under emacs and launch it&quot;, which is, in my personal opinion, a completely unacceptable distribution model. And if you don&#x27;t use emacs, good luck to you! Once set up as REPL-based development, Smalltalk and LISP both have to essentially ship their &quot;whole environment&quot; to deploy the application. This only works out well for small projects that do not need to be distributed, or whose distribution you, the developer, have a lot of control over.<p>(There&#x27;s an aside to be said about building binaries from a LISP compiler, but most binaries I have seen produced by such compilers still need access to the required libraries, which sort of hoses it as a distribution solution. This could be a result of the build system used on the projects I work on.)<p>And your documentation concern is valid, but I think even worse is the design concern: when designing an API, you have to stop and design it and consider the various concerns. If you develop it as you need it &#x2F; as you go, it is possible to arrive at sub-optimal designs. Hacking the &quot;next piece&quot; out at each step is likely to lead to slanted designs with poor APIs, requiring future refactoring. You see this with programmers at every level: if you ask them to write a program to do a single thing, then add more (related) capabilities, and continue ad nauseum, at some point the program will need to be refactored. This suggests that, without prior planning, REPL-based design is set up to incur technical debt. Unfortunately, my real-life experience confirms this. Moreover, refactoring something in a REPL is... a chore, to say the least.')