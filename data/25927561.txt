Item(by='dynamite-ready', descendants=None, kids=[25927750], score=None, time=1611751717, title=None, item_type='comment', url=None, parent=25922639, text='&quot;A toy example: if you happen to have 2 products that are the same price you still wouldn&#x27;t want to combine them into one constant value.&quot;<p>A more common example, take an online clothes store. They only sell shirts and trousers (pants - :]). It&#x27;s a really simple app. Obviously, I&#x27;m skimming a great deal here, but each product category is described by the following properties:<p>- Shirts\n-- Price\n-- Size\n-- Colour<p>- Trousers (Pants - :])\n-- Price\n-- Size\n-- Colour\n-- Length<p>What the DRY principle generally addresses, is this basic idea.\nMy instinct would be to create an abstract class called Clothing:<p>- Clothing\n-- Price\n-- Size\n-- Colour<p>Trousers (Pants - :]), for me, would definitely be an extension of Clothing.\nBut until my suppliers can furnish me with Dresses, T-shirts, Scarves, etc, I would not be too concerned about even creating a separate Shirt class, but probably would.<p>What I&#x27;ve since found through experience however, is that not everyone thinks this way. For some people, each product category would have absolutely have to have it&#x27;s own wholly encapsulated class in this situation. I can see the problem such an approach attempts to head off, but until the problem actually exists, I believe this pattern makes the development process painfully inefficient, and harder to maintain.<p>It&#x27;s interesting to me, because while it seems like &#x27;one of those&#x27; arguments, it&#x27;s somewhat more impactful than &#x27;tabs vs spaces&#x27;.')