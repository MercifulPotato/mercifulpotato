Item(by='mschaef', descendants=None, kids=[24906078], score=None, time=1603761040, title=None, item_type='comment', url=None, parent=24900375, text='&gt; Tcl has declined in use over the years, and while there&#x27;s a vocal community of people who like it,<p>To my way of thinking, Tcl is one of the languages that falls into the same category as Lisp, Smalltalk, and Forth. Like those three, Tcl takes a relatively smaller number of concepts compared to most other languages and tries to get more mileage out of combining them together than resorting to adding new conceptual layers.  For Tcl, the core concepts strings and string manipulation.  Most languages have these things, but very few languages build their list libraries, evaluators, etc. nearly as directly upon them as does Tcl.<p>The net result of this approach is a language that&#x27;s almost guaranteed to feel strange for the vast majority of developers, who work in languages that tend to be composed of larger numbers of more specialized features. So immediately off-putting to large numbers of potential users.<p>The other property these languages share, once you get past the initial barriers to entry, is a certain sense of enablement and power. The first few times, you realize how control flow structures, etc. are easily implemented in terms of user-visible language constructs, it&#x27;s at first gratifying and exciting to see and then potentially enabling. After all, it&#x27;s easier to write a custom expression evaluator in Tcl than, say Java or Python.<p>So the community of opinion around these opinions tend to bifurcate along lines of whether or not the individual in question has spent enough time to truly &#x27;grok&#x27; the nature of the language.<p>And note that this can be totally orthogonal to opinions on whether or not the language should actually be used.  It&#x27;s easily possible to not &#x27;get&#x27; the nature of Tcl or Lisp and yet have it be the thing you have to write to program your EDA tool or AutoCad. Similarly, it&#x27;s easily possible to see the power of a language like Tcl and lament either that too few people understand its full power or that it&#x27;s full power is maybe too flexible to be used in a production setting on a large industrial project.<p>None of that means these languages are not worth pursuing, but I do think this line of thought helps explain how they succeed and fail in the marketplace of ideas.<p>&gt; I never got the impression that Tcl was popular nor that its popularity was increasing.<p>Because it was developed as part of work on EDA tools, it developed a niche there. Also in early web via AOLserver.<p>Where it truly shown, however, was in GUI programming on Unix. Tcl and its GUI library Tk were around X11 before virtually anything other than the original Xt-derived widget libraries. Even more than that, you could open up an interactive &#x27;wish&#x27; session and get an active and clickable button on the screen in literally three interactive commands. Compared in ease of use of almost anything other than Visual Basic, Tcl&#x2F;Tk was light years ahead, and Tcl&#x2F;TK far surpassed VB in expressivity. (For the reasons I mention above.) Between this and a few other libraries like &#x27;expect&#x27;, it&#x27;s hard to overstate exactly how much power Tcl&#x2F;Tk put in your hands, and relatively easy to use at that. To be honest, there are still large swaths of modern development where we&#x27;ve really regressed in expressive power. (Although HTML&#x2F;JS does make it pretty easy to get a button on the screen in the simplest case.)')