Item(by='KMag', descendants=None, kids=None, score=None, time=1609901054, title=None, item_type='comment', url=None, parent=25652813, text='See my post in this discussion &quot;You can write &lt;strike&gt;FORTRAN&lt;&#x2F;strike&gt;Prolog in any language&quot;.  One subset of Prolog is a nice concise declarative notation for rule matching engines.<p>Back when I worked at Google, one of my colleagues (Jeremy) did some Bayesian inference on &quot;1% experiment&quot; results, where he needed to see which observations matched a complex hypothesis and complex rules for the context.<p>So, Jeremy found it easiest to think about the problem in terms of Prolog, and wrote some Python objects whose constructors defined these rules.  He also whipped up a memoizing backtracking engine that effectively lazily generated a DFA over experiment observations.<p>He talked and thought in terms of Prolog, because that&#x27;s the mental tool that he used, but the programming tool was Python.<p>Interesting guy, that Jeremy.  He used to do cacao price forecasting for Mars (Mars Bar&#x2F;M&amp;Ms).  He also enjoyed craft beer and carving pumpkins with chainsaws.<p>We also worked in the same (NYC) office with Fergus Henders, who in grad school wrote Mercury, a statically typed dialect of Prolog with an optimizing native code compiler.')