Item(by='fzingle', descendants=None, kids=[25476101], score=None, time=1608366223, title=None, item_type='comment', url=None, parent=25475723, text='&gt; Simpler code base from not having to worry about concurrency and multi-threading<p>This kind of thing irks me when I read it. I don&#x27;t understand why people think of microservices as an architecture pattern. To me they seem more like an implementation detail.<p>When it comes to concurrency and multi-threading, microservices mean you have different problems to worry about, not that they go away. I try to get people on my projects to imagine microservices as network function calls. If you diagram out how your data flows, how your concurrency works, you tend to see that a microservice is roughly a thread in a monolith. You gain not worrying much about mutexes or shared memory, but you lose on performance. Languages like Rust let you get close to having your cake and eating it too.<p>It is also a useful exercise for teams to consider &quot;how big does my service need to get before microservices on Python scale better than a 64-core monolith in C&#x2F;C++&#x2F;Java&#x2F;Rust?&quot; Another good question, &quot;if a monolith is stateless, does it scale as well as microservices?&quot;')