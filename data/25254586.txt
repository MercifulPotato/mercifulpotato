Item(by='jcranmer', descendants=None, kids=[25255020], score=None, time=1606749436, title=None, item_type='comment', url=None, parent=25254110, text='What obsolete stuff could you remove?  If you want to actually meaningfully cut out a large amount of space on the processor, you&#x27;ll have to cut into the actual instruction space and remove instructions that take up space in your execution units.<p>Removing the 16-bit and 32-bit modes don&#x27;t actually remove any instructions from the platform (save the binary-coded decimal instructions)--you&#x27;re largely saving only a few bits of decoder table entries at best. Furthermore, processors reset into 16-bit mode on startup for compatibility reasons, so killing 16-bit and 32-bit mode would introduce major compatibility headaches.<p>ISA extensions can be more easily removed since there&#x27;s already a CPUID bit that tells operating systems and applications whether or not they are used. The MPX extension for bounds checking is now regarded as a mistake, and Intel has already confirmed that they are removing it from future processor generations. The TSX extension for transactional memory is apparently on the hit list because of Spectre, and was removed from some processor generations.<p>The only significant processor execution unit space that is truly obsolete I can think is the x87 floating-point execution unit logic, with the concomitant MMX execution unit logic--SSE is just strictly better for everything here, except if you&#x27;re trying to actually get the 80-bit precision. But the existence of 80-bit floating point in the 64-bit ABI (i.e., long double) means you&#x27;d have a hard ABI break that would potentially break software even written today, and the pain of breaking that ABI is probably not worth whatever savings you get out of it.')