Item(by='benlivengood', descendants=None, kids=None, score=None, time=1603826292, title=None, item_type='comment', url=None, parent=24907634, text='1. Look at the latency of historical successful commits and your success_percentage.  Take the latency at the success_percentage-th percentile and call it max_success_latency.  This should be bounded closely from below by longest round trip time between nodes.  If it&#x27;s not, it&#x27;s worth fixing.<p>2. Look at your external SLO and get target_latency and target_success_percentage from your thresholds.<p>3. Retry on failure.  Retry on timeout as late as target_latency-max_success_latency and optimistically as early as max_success_latency.  The wiggle room gives you a helpful idea of how close you are to breaking SLO.  The earlier you retry, the more likely you are to overload the backend if it slows down due to load.  The later you retry, the more likely you are to break SLO under load.  Use a rate-limiting back-off strategy in clients to avoid overloading the backend completely.  Probabilistic rate-limiting to the observed success rate (plus a little) on each client works pretty well.<p>4. Provision your Raft&#x2F;Paxos for (1 + (1 - success_ratio))^max_retries times the maximum expected traffic to account for the load from retries.<p>Note that if (max_success_latency * 2) &gt; target_latency AND success_percentage &lt; target_success_percentage then you will need optimistic retries which can put quite a lot of load on the backend and even that may not keep you within SLO; it mostly depends on whether failures&#x2F;timeouts are independent or data-dependent.')