Item(by='dkarl', descendants=None, kids=[24854069], score=None, time=1603297858, title=None, item_type='comment', url=None, parent=24842298, text='<i>In my job I do a lot of code review of client code, mostly in Java, and some of it is particularly terrible. In fact, there’s one problem I see that is endemic. That’s where the code is “supposedly” object-oriented, but in fact, it doesn’t take advantage of any of the features of object orientation (no inheritance, no method overrides, and few if any uses of type substitution). In particular I see tons of code where there are these static “data” objects (a misunderstanding of another pattern from Martin Fowler, called the Data Access Object) and these “processing” objects that are, for the most part, just bags of procedures that operate on the data objects. </i><p>The author really loses me here.  I cut my professional teeth on Java, read <i>Design Patterns</i> while I was working my first job, and wrote his preferred style of OO code for years.  I still use those OO features in my code, because they&#x27;re still useful for a lot of things, but over the years I&#x27;ve learned other techniques as well that have helped me make my code simpler to understand and maintain.<p>In the early 2000s I did see bad C-style Java written by people who didn&#x27;t yet know how OO could be used for good, and if the author had written this in 2000 or even 2010 I could give them the benefit of the doubt that that&#x27;s what they&#x27;re complaining about, but if the author is seeing Java code in 2020 that they think isn&#x27;t OO enough, it isn&#x27;t because people don&#x27;t know the style.  It&#x27;s because they know there are different choices that can often produce better results.  I still run into people in real life who criticize code for not being written in that old 1990s&#x2F;early 2000s style, for tackling problems with techniques other than inheritance and polymorphism, for daring to have data without behavior, etc.  If you&#x27;re satisfied with that old style and want to spend the rest of your career solving problems with it -- fine.  But when other people move on, don&#x27;t criticize them as if they haven&#x27;t caught up.')