Item(by='wrsh07', descendants=None, kids=None, score=None, time=1609569214, title=None, item_type='comment', url=None, parent=25609254, text='You and the post I&#x27;m responding to are saying slightly different things. They say &quot;this seems to be geared towards beginners who are not intending to understand the underlying primitives&quot;<p>I disagree with the premise. When you use a tool, you don&#x27;t need to understand the internals, but depending on documentation, error messages, and the surrounding community you can learn what&#x27;s going on under the hood as you need to.<p>When I use a library I don&#x27;t plan one way or the other to become a deep expert or stay a beginner. I develop the knowledge I need to solve my problems. The tool is useful at all points in my own progression - from being a good place to learn about and practice using concurrency to being a codebase I can browse to learn more about how the primitives work.<p>You&#x27;re saying &quot;concurrency is harder than other abstractions, so in order to use it correctly you actually need to understand what&#x27;s going on&quot;<p>I also disagree with that premise. There are lots of hard things in programming. Concurrency is one of them, but so is memory management. There are footguns all over. It&#x27;s possible to misuse most abstractions, and the reasoning could often be chalked up to &quot;not understanding underlying primitives&quot;<p>I think this is all besides the point. If you run into problems when using your tool, you will have to learn how to fix or debug them. If in the case of serializing your whole application: either your application didn&#x27;t need to be parallelized or you will debug why it&#x27;s not scaling like it should be.<p>That step, the debugging what&#x27;s wrong... it&#x27;s going to make you learn a little bit more about what&#x27;s going on under-the-hood. I think all of us agree about that.<p>So what are you and the original post I was responding to saying? I think the first post was saying something like &quot;you should learn concurrency primitives; if you know concurrency primitives, then this library is overly pedantic.&quot;<p>I don&#x27;t really know what you&#x27;re saying.<p>I&#x27;m saying: use whatever entry point you want to solve your problems. It seems very likely to me that the abstractions provided here will make sense to some people (eg maybe they&#x27;ve learned idiomatic go concurrency or used kotlin coroutines), but they might be brand new to others. If the examples are sufficient for you to get concurrent code working, then that is really great! I&#x27;m not sure why people insist that we learn things one way or in some specific order. I don&#x27;t see their research indicating that bottom up is better for retention (or something else), they are simply positing without fact that their way is best. I disagree.')