Item(by='bborud', descendants=None, kids=None, score=None, time=1603754931, title=None, item_type='comment', url=None, parent=24889669, text='&gt; Imho because it is highly opinionated and the designers of the language also suggests best practices.<p>In my experience this is actually a plus.  I&#x27;ve lead a department that made the transition from Java to Go, and one of the really noticable things were entire classes of fruitless (and frankly, unnecessary) discussions disappeared.  Having an opinionated language that comes with a canonical formatter and lots of established idioms made it <i>easier</i> to scale up to more people because more of the code looked homogenous more of the time.<p>However, with any new language someone takes up there is the risk that people will try to bring along their old habits from other languages and be unhappy if they can&#x27;t just continue writing C&#x2F;C++&#x2F;Java&#x2F;Python&#x2F;C#&#x2F;JavaScript&#x2F;Lisp in Go.  If this takes hold, you will waste a lot of time having fruitless discussions.<p>It is easier to adapt to a coding style that is shared than it is for every project and every team to invent their own.  For instance, I&#x27;ve worked for only one company where using C++ was even somewhat pleasant:  and it was in large part because a) the company had a very strictly enforced code standard for C++ (and other approved languages), and b) you had to demonstrate you could stick strictly to the code standard before you were able to approve changelists.  At the time that company had some 7000 developers, of which probably 3-4000 had &quot;C++ readability&quot; rating.<p>The upshot being that after getting used to it, it was pretty easy to understand other people&#x27;s code.  And you would spend a <i>lot</i> of time reading other people&#x27;s code.<p>I suspect Go being opinionated is a direct result of this experience.')