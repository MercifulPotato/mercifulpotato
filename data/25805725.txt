Item(by='dragonwriter', descendants=None, kids=None, score=None, time=1610832911, title=None, item_type='comment', url=None, parent=25801963, text='&gt; Having a clean and DRY data access layer is necessary regardless of the underlying database.<p>SQL databases (via views and even sprocs) allow you to abstract particular clientâ€™s view of the data from the base storage layer <i>inside the database</i>.<p>&gt; As soon as multiple independent codebases share the same database I would argue you need to put an API on top of that database and turn it into a microservice that owns its database.<p>An RDBMS <i>is</i> is an integrated service that owns its own datastore with a very-well-defined, extremely battle-tested API designed to support multiple clients with completely different views of and access to the data, all as logically isolated as necessary from the design of the base storage layer.<p>If you aren&#x27;t using an RDBMS, sure you may need to wrap something around the datastore that provides a tricky-to-get-right subset of what an RDBMS provides fairly trivial-to-use facilities for out of the box, just like like not using an RDBMS often forces you to do for another subset if you are concerned about integrity.')