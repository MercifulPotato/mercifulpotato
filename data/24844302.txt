Item(by='rstuart4133', descendants=None, kids=None, score=None, time=1603248175, title=None, item_type='comment', url=None, parent=24832980, text='&gt; I would say that documentation-driven development is not really documentation-first: when I do it there&#x27;s a close feedback between implementation and documentation.<p>I&#x27;ve done it both ways.  I&#x27;ve literally written the documentation first (it&#x27;s the style of doco you read for the standard Python library), and I&#x27;ve designed the API and written the doco afterwards.  In either case there is another step: writing the unit tests.<p>All three steps can have a large effect on the design of the API.  You focus on getting the internals working correctly when writing the code - the API is just an interface sitting on top.  Unit tests make you focus how easy or otherwise it is to use that API, which turns out to be a very different thing.  When when you write the doco, you have to explain how the API should be used to someone else.  I can&#x27;t count the number of times I&#x27;ve produced a working tested API, only to discover when I tried to explain how to use it someone else (ie, write the doco), I&#x27;ve found myself twisted in knots.  Rather than push through it&#x27;s easier to rewrite the API in terms that is easier to explain.<p>I&#x27;ve not noticed doing the three things any particular order is always more efficient that any of the other orderings.  Sometimes one stage triggers a lot of re-work, sometimes it doesn&#x27;t.  I guess that means I&#x27;m not smart enough to focus on all three outcomes at one time.')