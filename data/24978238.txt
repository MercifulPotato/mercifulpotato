Item(by='momentoftop', descendants=None, kids=[24978822], score=None, time=1604399094, title=None, item_type='comment', url=None, parent=24975349, text='The Haskell community, in my experience, is far more academic. A recent post to the Haskell libraries mailing list began with:<p>&quot;It was pointed out to me in a private communication that the tuple function \\x-&gt;(x,x) is actually a special case of a diagonalization for biapplicative and some related structures monadicially.&quot;<p>It received 39 pretty enthusiast replies.<p>I don&#x27;t expect this sort of discussion on Ocaml mailing lists (please correct me, Ocaml mailing list subscribers!) And I think the reason is that Haskell makes this sort of abstraction very very easy, and makes it pay off, while Ocaml does not. In Ocaml, it&#x27;s not even useful to abstractly define functors, which are the most basic data of category theory. In Haskell, functors are a typeclass that comes with the prelude and are hard to avoid. And there&#x27;s no reason why you wouldn&#x27;t use a biapplicative either:<p><a href="https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;bifunctors-5.5.7&#x2F;docs&#x2F;Data-Biapplicative.html" rel="nofollow">https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;bifunctors-5.5.7&#x2F;docs&#x2F;Da...</a>')