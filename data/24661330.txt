Item(by='josephg', descendants=None, kids=[24661514], score=None, time=1601636756, title=None, item_type='comment', url=None, parent=24661029, text='&gt; arbitrary-size array lookup is not actually constant, but only amortised constant.<p>Array <i>lookup</i> operations are constant time. You don&#x27;t need to grow an array while reading from it. <i>Append</i> operations in a vector are O(n) but <i>amortized constant</i> time.<p>Hash tables work the same way - they have amortized constant time when inserting, but they should have constant time for reads when using a good hash function.<p>That said, technically we still classify hash table reads and writes as O(n). Big-O notation defines an <i>upper bound</i> on time, not the average time. And the upper bound on hash table reads and writes is O(n) if you have a terrible hash function (or carefully crafted inputs).<p>This is not useful knowledge though, because hash tables are usually fast in practice. If you&#x27;re trying to figure out how something performs in practice (like the &quot;isVowel&quot; function in the blog post), the tool to reach for is a benchmark. Guess how a benchmark result will come out before you see the result, and over time you&#x27;ll build an intuition for these things.')