Item(by='derefr', descendants=None, kids=[25937557], score=None, time=1611782835, title=None, item_type='comment', url=None, parent=25934052, text='I&#x27;m not talking about the GPL or the LGPL specifically, but rather I&#x27;m talking about the thing that was in Stallman&#x27;s head before either of them existed — the <i>concept</i> of copyleft, of an infectious &quot;Free&quot; license.<p>Yes, you can create different implementations of that concept, that are variously infectious. But the reason I laid out the whole state of the ecosystem as RMS would have seen it when he was still just <i>conceptualizing</i> copyleft, is that in that ecosystem, &quot;infectiousness&quot; was something that&#x27;s almost <i>trivial</i>, toothless.<p>In the ecosystem of the early 90s, licensing a codebase was just a consideration of who you <i>trusted</i> to freely use and modify your thing (&quot;us&quot;, hackers); vs. who you wanted to <i>not</i> use your thing, unless they paid you (&quot;them&quot;, corporate.) Copyleft neatly prevented &quot;them&quot; from swiping and profiting off of the software created by &quot;us&quot;, while not really inhibiting anything that &quot;us hackers&quot; wanted to do with that same software.<p>Contrast to the ecosystem of today: there&#x27;s an entire category of people — individuals who start projects <i>as</i> hackers or academics, but then <i>build</i> huge software businesses around them — that didn&#x27;t even <i>exist</i> back in the 90s.<p>Google is the epitome of this: at its inception, BackRub (Google Search) was exactly the type of project that copyleft was designed to <i>avoid</i> restricting. But it evolved, through commercialization, patenting, SaaS-ification, and scale, into exactly the type of project that copyleft <i>wants</i> to &quot;shun out of&quot; the FOSS ecosystem. (Not that Google Search integrated any FOSS libraries; just that it could have.)<p>Google&#x27;s story, is the story of <i>most</i> software projects today. <i>Every</i> developer is considering their project as a potential &quot;open core&quot; for a SaaS, or considering having an &quot;enterprise version&quot; of their tool, or considering licensing their algorithm as a plugin to some big studio to redistribute. Which is exactly why many programmers avoid integrating copyleft software into even their hobby projects. Why build on GCC when you can build on LLVM, and ensure that there&#x27;ll be no legal problem<p>Modern copyleft licenses are ever-more-strained legal contortions to make a <i>design</i> that&#x27;s no longer very applicable to the modern software IP ecosystem, work for it anyway. They&#x27;re licenses with epicycles.<p>Sure, I <i>can</i> in fact link AGPLed and LGPLed system libraries in my language runtime; and in a pinch — if there&#x27;s no equally-good alternative — I&#x27;ll take the time, work out the precise legal implications, and go ahead with it.<p>But if there&#x27;s a BSD or MIT-licensed (or even Apache-licensed) alternative to those libraries? I&#x27;ll choose that one. Because, in the modern landscape, by doing so, I&#x27;m saving myself, my future self, and my future hypothetical SaaS&#x27;s future hypothetical lawyers, a lot of time and effort.')