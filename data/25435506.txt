Item(by='vlmutolo', descendants=None, kids=[25438787, 25435940], score=None, time=1608067881, title=None, item_type='comment', url=None, parent=25434349, text='This is a good place to link to Orion [1], a pure-Rust crypto project for AEAD, stream ciphers, KDFs, MACs, and plain hashing. There hasn&#x27;t yet been a formal security audit (hard to justify until there&#x27;s a significant user base), but the API is tough to beat for usability and hard-to-misuse-ability (docs [2]).<p>It&#x27;s an unproven library, but the author takes security pretty seriously. There&#x27;s no unsafe, heavy testing, and fuzzing done for both safety (fuzzing with a sanitizer) and constant-time operation verification to minimize the danger of a timing attack.<p>Here&#x27;s an example of the API.<p><pre><code>    let key = aead::SecretKey::default();\n    let ciphertext = aead::seal(&amp;key, &quot;msg&quot;.as_bytes())?;\n    let plaintext = aead::open(&amp;key, &amp;ciphertext)?;\n</code></pre>\nIt doesn&#x27;t get much easier than that. Also, notice the lack of a user-facing nonce. Can&#x27;t screw it up if it isn&#x27;t there.<p>There are also lots of details that are right in the library. Traits like PartialEq are implemented using constant-time operations so that users don&#x27;t have to know or remember to use special operations provided by the library for comparison. Methods that return types without these protections (like getting the raw bytes out of a PasswordHash) are helpfully named things like &quot;unprotected_as_encoded&quot;.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;brycx&#x2F;orion" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;brycx&#x2F;orion</a><p>[2] <a href="https:&#x2F;&#x2F;docs.rs&#x2F;orion&#x2F;0.15.5&#x2F;orion&#x2F;aead&#x2F;index.html#example" rel="nofollow">https:&#x2F;&#x2F;docs.rs&#x2F;orion&#x2F;0.15.5&#x2F;orion&#x2F;aead&#x2F;index.html#example</a>')