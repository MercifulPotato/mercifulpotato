Item(by='tzs', descendants=None, kids=None, score=None, time=1603571648, title=None, item_type='comment', url=None, parent=24866897, text='Calendars can be fun. When I realized that my HP-48SX display had enough lines and was wide enough to display a one month calendar, I wrote one.<p>My first try was annoyingly slow, and I determined that the problem was with the code to actually draw the calendar. Going through each day and telling it &quot;draw this number here&quot; was just not efficient enough.<p>I switched to a string based approach. Here is what it would look like in Python. This draws a cal-style calendar or a month given the day of the week of the first day of the month (Sunday == 0, Monday == 1, ...) and the number of days in the month:<p><pre><code>  def print_cal(first_day, num_days):\n    hdr_str = &quot;Su Mo Tu We Th Fr Sa &quot;\n    cal_str = &quot;                  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &quot;\n    offset = 3*(6-first_day)\n    cal_flat = cal_str[offset:18+3*num_days]\n    cal_flat += &quot;                     &quot;\n    print(hdr_str)\n    print(cal_flat[0:21])\n    print(cal_flat[21:42])\n    print(cal_flat[42:63])\n    print(cal_flat[63:84])\n    print(cal_flat[84:105])\n</code></pre>\nAll the string operations were primitives in the calculator&#x27;s slow interpreted language, implemented in fast assembly language, so this was very fast.<p>Calculating the first day and number of days for a year&#x2F;month was in the slow interpreted language, but that isn&#x27;t much computation so it wasn&#x27;t noticeable. In Python, it would be something like this:<p><pre><code>  def first_and_length(year, month):\n    # Correction for centuries 16, 17, 18, 19\n    # Repeats every 4 centuries.\n    century_table = [2, 0, 5, 3]\n    # Correction for each month for years that are not leap years.\n    # For leap years, need to subtract 1 for January and February.\n    month_table = [4, 0, 0, 3, 5, 1, 3, 6, 2, 4, 0, 2]\n    month_length = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    num_days = month_length[month-1]\n    first_day_on = 1\n    first_day_on += century_table[(year&#x2F;&#x2F;100)%4]\n    first_day_on += year%100 + (year%100)&#x2F;&#x2F;4\n    first_day_on += month_table[month-1]\n    if month &lt;= 2 and year%4 == 0:\n        if year%400 == 0 or year%100 != 0:\n            first_day_on -= 1\n            if month == 2: num_days += 1\n    return first_day_on%7, num_days</code></pre>')