Item(by='amluto', descendants=None, kids=[25317315, 25315484], score=None, time=1607183697, title=None, item_type='comment', url=None, parent=25314126, text='As a long-time user of C++ variants with a home-grown tool much like the article’s make_visitor, I think there’s a much bigger problem with C++ variants: the sub-types don’t have <i>names</i>.<p>If you genuinely want your variant to just be a mildly polymorphic object, this is okay. But you probably don’t.  Imagine the classic use of variants for a parse tree:<p>variant&lt;string, shared_ptr&lt;Node&gt;&gt;<p>Okay, presumably the string is a token and the Node is a subtree.  This is already a bit unpleasant, but at least it’s serviceable. But then you discover that you really want tokens and symbol names to be separate.  You try:<p>variant&lt;string, string, shared_ptr&lt;Node&gt;&gt;<p>And you lose, because the two unnamed string cases are ambiguous. To work around this, you need to wrap the strings in newtypes, which is quite verbose in C++.  And you start to wonder why, after all these years, C++ hasn’t sucked it up and come up with real sum types in the language.<p>(For those who are too stuck in C++ land, this problem simply does not exist in a language like Rust.)')