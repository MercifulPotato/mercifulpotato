Item(by='burntsushi', descendants=None, kids=[24721367, 24722325], score=None, time=1602176727, title=None, item_type='comment', url=None, parent=24719998, text='&gt; Which is what you&#x27;d expect; Rust isn&#x27;t garbage collected, so the programmer has to do the garbage collection, and every program is responsible in some sense for designing and implementing that part of its own runtime.<p>This seems like a really odd thing to say in at least two dimensions. Firstly, I would say that &quot;the programmer has to do the garbage collection&quot; isn&#x27;t an accurate way to describe Rust. Secondly, and particularly in comparison with Go, Rust&#x27;s RAII applies more universally than Go&#x27;s garbage collection. How many times have you seen a missing defer or a defer inside of a loop? I&#x27;ve seen both quite a bit. But those bugs basically don&#x27;t happen in Rust precisely because the programmer almost never needs to deal with destruction directly. It&#x27;s done automatically by the compiler.<p>As to the broader point, I would very strongly oppose the notion that Rust is less reliable than Go. While I don&#x27;t think I would argue that Rust gives the same boost over Go that, say, Java or Go give over Ruby (that&#x27;s a tough argument to make anyway, even if I agreed with it), I would say there is a meaningful boost. But that&#x27;s a tough argument to make too. Aside from the obvious bits (nil errors and forgetting to check errors), for me, it basically comes to my belief that Go punishes its practitioners for abstraction. I wrote a bit more about that here: <a href="https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;what-made-you-choose-rust-over-go&#x2F;37828&#x2F;7" rel="nofollow">https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;what-made-you-choose-rust-over...</a>')