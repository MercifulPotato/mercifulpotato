Item(by='dragontamer', descendants=None, kids=[24772519], score=None, time=1602638564, title=None, item_type='comment', url=None, parent=24772208, text='Hmm... my multithreaded strategy typically uses task-based parallelism with a thread-pool.<p>In particular: #pragma omp task<p>Those omp-tasks can &quot;float&quot; between threads, depending on your implementation. If some task enters a blocking situation (usually a task-barrier), it could switch to another pthread during the implementation.<p>Ex: Task A is running on Hardware-Thread#10. Task A mallocs something from Thread#10&#x27;s local malloc. Task A calls barrier, which means Thread#10 &quot;gives up Task A&quot; back to the work queue.<p>Later, all tasks hit the barrier, and Task A can run again. But which threads run TaskA is left up to the runtime. Thread#25 might be running the task now. At this point, Thread#25 calls free(fooptr), but it now has to be a global-synchronization, since the data came from Thread#10&#x27;s pool.<p>----------<p>Its probably not safe to assume thread-local storage to be sufficient for task-based parallelism.')