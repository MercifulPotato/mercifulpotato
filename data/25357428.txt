Item(by='MacTuitui', descendants=None, kids=[25357849, 25372191], score=None, time=1607512329, title=None, item_type='comment', url=None, parent=25356486, text='I was wondering why the sudden spike in followers...\nI&#x27;m also on <a href="https:&#x2F;&#x2F;twitter.com&#x2F;MacTuitui" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;MacTuitui</a> if you prefer.<p>As for the direct points (note that I am _not_ part of nannou&#x27;s team, just one _heavy_ user):<p>1. That&#x27;s sadly true, it&#x27;s been a long time issue (not only nannou&#x27;s problem to be fair, it&#x27;s shared by all rust projects at the moment): <a href="https:&#x2F;&#x2F;github.com&#x2F;nannou-org&#x2F;nannou&#x2F;issues&#x2F;178" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nannou-org&#x2F;nannou&#x2F;issues&#x2F;178</a><p>2. If you were following my talk at GitHub universe yesterday where I was livecoding (archive will be up &quot;soon&quot;), the rebuilds are fast enough I don&#x27;t really care (simple stuff are &lt;3s for me, even my latest dailies where I have heaps of extra stuff are averaging &lt;6s rebuild time). The compiler (via lsp) catches most bugs beforehand, so I would say it is not very much an issue at this point. Using a cargo cache will make things far easier as well.<p>3. Exactly why I started using nannou (coming from using processing via scala)!<p>As for the &quot;why nannou?&quot;, and sorry for being nerdy, but nannou is the only framework I know of that does color right: you are working &quot;naturally&quot; in LinSrgb with float16 precision per channel (if that does not speak to you, just look for gamma correction and go down the rabbit hole). The blending of color is exceptional if you&#x27;re into that sort of things (I am: see for example in HQ <a href="https:&#x2F;&#x2F;superrare.co&#x2F;artwork-v2&#x2F;road-to-nowhere-12621" rel="nofollow">https:&#x2F;&#x2F;superrare.co&#x2F;artwork-v2&#x2F;road-to-nowhere-12621</a> )<p>Nannou is also focused towards the future: there&#x27;s been a couple of major backend rewrites from opengl to vulkan then webgpu (without any issues for the end-user if you were using the core nannou api functions): you get to play with the latest toys and finally you get access to your whole GPU. No need to stay in a OpenGL-centric state based workflow (that does not make any sense since years)! I&#x27;ve been able to run crazy compute shaders passes while making my own render pipelines _on top of what nannou does_. It&#x27;s crazy powerful.\nAlso I have to say the team behind nannou has been wonderful in dealing with my requests over the last two years, and they always provided help when I needed (to be honest, I chose nannou <i>because</i> the team was in Australia, and as I am in Japan, it made communication easy). Huge thanks to them. Have a look at the github issues to see how nice the team is.<p>And with cargo, I&#x27;m confident (not <i>very</i> confident, mind you, but optimistically confident) that I&#x27;ll be able to get the thing building again in a few years.<p>So if your interest peaked a bit, please try it, if you have any questions, join the matrix chat and ask away!')