Item(by='StefanKarpinski', descendants=None, kids=[24752414, 24750172], score=None, time=1602459402, title=None, item_type='comment', url=None, parent=24748685, text='That you believe this violates the principle of &quot;do one thing and do it well&quot; indicates a certain &quot;abstraction blindness&quot;. Do you really believe that &quot;parse CSV to a data frame&quot; and &quot;parse CSV to a parquet file&quot; and &quot;parse CSV and apply a query to it in-place&quot; are completely separate, unrelated things? It seems clear to me in any case that with the right abstraction, those are the same thing composed with different choices of what to do with the parsed data.<p>At a higher level, this seems like a classic Julia versus Python dynamic. In the Python ecosystem there are a dozen different versions of each thing that make different trade-offs and specialize in different ways. When you&#x27;re picking one, you have to spend a week evaluating all the possible CSV parsers (for example).<p>In the Julia ecosystem, the ideal it to have one really high-quality, fast, flexible implementation that everyone collaborates on to make it great for all kinds of use cases. And the language design and the compiler make this possible, since you can write pretty abstract code and compose it with various types and get a really fast implementation. The annoying and tricky logic of parsing the CSV format only needs to be done once, and reused for all different situations.<p>This isn&#x27;t done for &quot;macho bragging rights&quot; but because it is a waste of time and effort to implement a dozen half-baked versions of the same thing. When there are a dozen separate implementations of something like this, they also end up disagreeing on their behavior, which causes no end of headaches.')