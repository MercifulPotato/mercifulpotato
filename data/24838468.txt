Item(by='robinei', descendants=None, kids=None, score=None, time=1603207722, title=None, item_type='comment', url=None, parent=24837709, text='I also think that engineering concerns can dictate or at least strongly influence language design. It can still lead to innovation though, like in the way Zig handles async&#x2F;await, and how it will try to handle recursion.<p>It is just innovation mostly guided by practical engineering concerns. In this case: How to avoid requiring expensive heap allocation for async tasks, and how to be sure you don&#x27;t crash from a stack overflow due to unexpected input for example.<p>I suspect that the excellent Zig comptime support is made possible by intentionally going for a pretty unambitious type system. Otherwise how could you soundly let arbitrary code generate a type? A fancy type system that wants to reason about that will fail, or at least cause the whole language to revolve around making that work.<p>I think you are right that it would be very hard for a language to innovate both here, and in the traditional PL-teoretical way.')