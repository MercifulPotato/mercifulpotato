Item(by='brundolf', descendants=None, kids=[25500146], score=None, time=1608587511, title=None, item_type='comment', url=None, parent=25497065, text='This seems really powerful, but I can&#x27;t shake my discomfort with just how much magic is going on (and I say this as someone who&#x27;s fairly intimately familiar with the traditional, client-side React&#x2F;JSX&#x2F;Babel&#x2F;Webpack story):<p>- Webpack and&#x2F;or React must be very aware of what the other is doing here in order to drop the server-only JS from the bundle. Is it even possible to use alternate bundlers with this feature?<p>- The React server has to be deeply concerned with the application logic to know how to transparently pass state back and forth, presumably via some generated JSON endpoints. I guess maybe this was already the case for hybrid client&#x2F;server apps.<p>- What&#x27;s the lifetime of &quot;persisted server-component state&quot;? A component lifecycle? A page reload? A user session?<p>- The react-fetch package that &quot;works as if it were synchronous so you don&#x27;t have to wrap it in an effect or anything&quot; is, from the outside, super weird. How did they make an asynchronous call synchronous? JS doesn&#x27;t normally allow that outside of an async&#x2F;await context. Did they wrap the JSON response object in some kind of lazy proxy or something?<p>Of course &quot;magic&quot; is relative, and can do wonders for productivity in the right environment. I just find myself in a place again where I have no idea how these abstractions are actually working, and I don&#x27;t love that.')