Item(by='wokwokwok', descendants=None, kids=[25612195, 25615160, 25612289], score=None, time=1609588274, title=None, item_type='comment', url=None, parent=25612027, text='You misunderstand; what confuses me is how &#x27;static can mean the <i>same thing</i> in both of these contexts.<p>T: &#x27;static does <i>not mean</i> the references in T must exist for the lifetime of the application.<p>Ie. the lifetime constraint on T isn’t the same &#x27;static from &amp;&#x27;static where the reference must life for the entire lifetime of the application.<p>Types are static. T: &#x27;static applies to instances at runtime.<p>These instances do not have and are not related to the &#x27;static lifetime which is “the entire length of the application”.<p>I accept:<p>&gt; Type: lifetime means that the type is constrained by the lifetime.<p>I don&#x27;t accept the explanation:<p>&gt; Because &#x27;static means &quot;the lifetime of the whole process&quot;. That means that the type is not constrained.<p>A does not follow from B.<p>If you want something to mean &quot;A type cannot have references in it&quot; then invent a &#x27;noref lifetime.<p>&#x27;static in this context would mean that all members of T must be &#x27;static, which means that <i>all instances of T must be &#x27;static</i>.<p>It does not mean that.<p>I don’t understand why they have the same name; they are not the same thing; it is an example of failure to have orthogonality in the language design in my opinion.')