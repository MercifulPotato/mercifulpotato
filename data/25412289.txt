Item(by='SkyPuncher', descendants=None, kids=None, score=None, time=1607908546, title=None, item_type='comment', url=None, parent=25407693, text='&gt; This is one vector for complexity, to be sure. Saying &quot;no&quot; to a feature that is unnecessary, foists a lot of complexity on a system, or has a low power to weight ratio is one of the best skills a senior developer can develop.<p>I don&#x27;t consider myself to be an exceptional developer, but this alone has launched my career much faster than it would if I was purely, technically competent. Ultimately, this is a sense of business understanding. The more senior&#x2F;ranking you are at a company, the more important it is for you to have this tune in well.<p>It can be really, really hard to say no at first, but over time the people ask you to build things adapt. Features become smaller, use cases become stronger, and teams generally operate happier. It&#x27;s much better to build one really strong feature and fill in the gaps with small enhancements than it is to build everything. Eventually, you might build &quot;everything&quot;, but you certainly don&#x27;t need it now. If your product can&#x27;t exist without &quot;everything&quot;, you don&#x27;t have a strong enough business proposition.<p>----<p>Note: No, doesn&#x27;t mean literally &quot;I&#x27;m&#x2F;we&#x27;re not building this&quot;. It can mean two things:<p>* Forcing a priority. This is the easiest way to say no and people won&#x27;t even notice it. Force a priority for your next sprint. Build a bunch of stuff in a sprint. Force a priority for another sprint. Almost inevitably, new features will be prioritized over the unimportant left overs. On a 9 month project, I have a 3 month backlog of things that simply became less of a priority. We may build them, but there&#x27;s a good chance nobody is missing them. Even if we build half of them, that still puts my team 1.5 months head. For a full year, that&#x27;s almost like getting 2 additional months of build time.<p>* Suggesting an easier alternative. Designers have good hearts and intentions, but don&#x27;t always know how technically difficult something will be. I&#x27;m very aggressive about proposing 80&#x2F;20 features - aka, we can accomplish almost this in a much cheaper way. Do this on 1 to 3 features a sprint and suddenly, you&#x27;re churning out noticeably more value.')