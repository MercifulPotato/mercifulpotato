Item(by='phillipcarter', descendants=None, kids=None, score=None, time=1604441311, title=None, item_type='comment', url=None, parent=24980295, text='&gt; Whereas in F# you&#x27;ll run into this using references<p>It depends :)<p>F#-defined reference types cannot be assigned a <i>null</i> value by default. If your reference is an F# library (or one with F# bindings, of which there are several) then this isn&#x27;t something you run into. Technically this can be bypassed by giving the type an attribute called <i>AllowNullLiteral</i>, but it is extremely rare to see that in practice because it&#x27;s so unsatisfactory to use <i>null</i> from a cultural perspective in F#. Once a C# programmer uses F#, something switches on in their brain and they tend to eliminate all possible ways <i>null</i> can creep in as thoroughly as possible. It&#x27;s neat.<p>Another aspect where you don&#x27;t see <i>null</i> is in initialization soundness. In F#, all values must be initialized before use. This is in sharp contrast to C# or Java where you can accidentally access something that hasn&#x27;t been initialized before. While you can also technically bypass this to inject a <i>null</i> somewhere, it is also exceedingly rare because it&#x27;s not a default behavior.<p>F# data types also cannot be assigned a <i>null</i> value, so that&#x27;s also a place where <i>null</i> doesn&#x27;t come in.<p>So it really leaves interop with .NET assemblies, some serialization scenarios, and .NET reflection. The first is really the only time people can still get &quot;surprised&quot; by a _null_ value. The rest are all technically possible, but just tend not to come up.<p>The reason why this all matters is it&#x27;s not a binary thing about having <i>null</i>&#x2F;non-<i>null</i>. Just like it&#x27;s not a binary thing about having exceptions&#x2F;vs. not. It&#x27;s about how frequently they can come about in normal programming scenarios. I can write a simple Haskell program that throws an exception at runtime, does that mean that Haskell is not safe? Of course not, because it&#x27;s not usually what normal Haskell code does. The same thinking applies here. The ways that <i>null</i> can creep into an F# program are simply smaller than C# or Java and do create this mindset that <i>null</i>is something that F# programmers tend not to think about that much.')