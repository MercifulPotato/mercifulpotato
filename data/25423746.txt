Item(by='JamesBarney', descendants=None, kids=None, score=None, time=1607982120, title=None, item_type='comment', url=None, parent=25420075, text='&gt;means unpredictable behavior<p>There is something to be said about making sure it&#x27;s clear where and when state mutates.  But functional code has it&#x27;s own set of pitfalls.  I&#x27;ve seen otherwise good devs struggle like crazy reasoning about complex functional code. (Especially when it comes to performance)<p>&gt; Real-world-modeling was found a long time ago to be a bad approach to OOP. The author is right to say that classes should represent clearly distinct concepts that are easy to name, but there&#x27;s no reason those concepts also need to map to real-world entities. Often, they shouldn&#x27;t.<p>I 100% disagree with this.  Most applications are modeling domain logic and business processes as code.  And ideally as many of your classes as possible refer to a concept or  should translate to simple and understandable objects in your domain.  In an ideal world every class would be named after a concept&#x2F;entity your domain expert understands and uses.<p>*Unless you read real world objects as physical objects, but I think the author meant real world as in domain concepts.')