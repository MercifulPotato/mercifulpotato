Item(by='dataflow', descendants=None, kids=[25975230], score=None, time=1612047485, title=None, item_type='comment', url=None, parent=25970583, text='I actually don&#x27;t follow your example; I don&#x27;t see why this is cyclic. In your example what exactly would CustomerService be responsible for that prevents it from functioning unless it has a reference to AccountService? AccountService is pretty obvious (add&#x2F;remove money, link other accounts, close account, etc.) but I&#x27;m struggling to see what CustomerService would do on a per-customer basis that it would need a reference to AccountService for. The only thing I can imagine is a get&#x2F;add&#x2F;remove accounts operation, but (a) you need nothing but an account ID for that (not the actual AccountService class) and the caller can look up the actual accounts using the IDs if they want, and (b) you can (and I think perhaps should?) model this as a database table managed by the Account class where you&#x27;re associating customer IDs with account IDs.<p>Another way to think about this is, how would you do this in C++? You have header files, and they shouldn&#x27;t be cyclic. Who #includes who? Well in this case it seems to me AccountService.hpp should #include CustomerService.hpp, but not the reverse. Maybe CustomerService.hpp would #include AccountID.hpp? Whatever I imagine I just don&#x27;t see why you&#x27;d need cyclic #includes.')