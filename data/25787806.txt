Item(by='remexre', descendants=None, kids=[25788532, 25788318], score=None, time=1610693665, title=None, item_type='comment', url=None, parent=25787035, text='I&#x27;m (slowly!) working towards an OS where every user-invoked application is a GUI, most applications are many processes (more like Erlang than Unix), and every interprocess interaction, including GUI programs asking the OS to be drawn, is message-passing of data.<p>My theory is that if applications are written as servers that do message-passing, one can have a shell language that orchestrates the passing of messages between servers instead of the flow of bytes between CLI programs; the semantics of the shell language still need to worked out, though. e.g. does it need session types, or can one get reasonable behavior by structuring data specially to indicate &quot;this is only part of a response that&#x27;s being streamed.&quot;<p>On the GUI side, the idea of describing a UI in pure data (like HTML) seems very reasonable, and seems like it would make it much easier to quickly throw together small GUI programs. So the drawing part of an application would just be a process that sends the screen&#x2F;compositor process a message describing the state of its window as a tree, and receives messages for events in response.<p>A big advantage is it makes the semantics of composing GUIs a lot more reasonable &quot;replace this leaf of my tree with this other process&#x27; tree&quot; is a simple-to-implement and simple-to-understand operation, but seems like it&#x27;d make sharing widgets way easier: widgets are just processes that render without the &quot;this is a window&quot; flag set, and you ask the compositor to put them into your window&#x27;s tree. Events flow back to the widget, and each side can send the other messages easily. An application could also &quot;proxy&quot; for a widget, including over a network link, so you get fairly simple network transparency this way too.')