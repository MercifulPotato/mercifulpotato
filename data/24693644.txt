Item(by='joshuamorton', descendants=None, kids=[24694115, 24694806], score=None, time=1601944104, title=None, item_type='comment', url=None, parent=24693619, text='&gt; Type annotations in Python do not actually affect any aspect of runtime and are ignored during evaluation.<p>This is equally true in Java. Types are erased at runtime. They don&#x27;t exist in the bytecode.<p>Just because the type checking and evaluation are done using one tool, &quot;javac&quot; doesn&#x27;t really mean anything.<p>Again, what&#x27;s the difference between a bash script that runs mypy prior to invoking python and a bash script that compiles and runs a java program, from the perspective of type safety, assuming you know <i>nothing</i> about the two programs?<p>There is <i>no</i> difference. Neither provides any more guarantees than the other. Put another way, by enforcing use of mypy prior to invocation, you convert the annotation to an ascription.<p>A deeper analysis would suggest that &quot;ascriptions&quot; are actually the things you use to disambiguate when type inference is not powerful enough (<a href="https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;style&#x2F;types.html" rel="nofollow">https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;style&#x2F;types.html</a>).<p>Scala, for example, calls its type declarations &quot;annotations&quot;, except when they are needed to disambiguate, when they are &quot;ascriptions&quot;. So under the scala definition, python&#x27;s annotations are exactly the same as scalas as long as they are used for type checking, which, if you use mypy, they are.')