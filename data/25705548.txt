Item(by='mysterymath', descendants=None, kids=[25706404], score=None, time=1610230909, title=None, item_type='comment', url=None, parent=25700135, text='I&#x27;m porting LLVM&#x2F;Clang to the 6502. Notoriously difficult project, attempted dozens of times by as many folks.<p><a href="https:&#x2F;&#x2F;github.com&#x2F;mysterymath&#x2F;clang6502" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mysterymath&#x2F;clang6502</a><p>My take generates pretty darn good assembly for the cases it handles, but it&#x27;s absurdly incomplete. Still, a huge amount of risk factors have already been addressed, and there&#x27;s only a few big known unknowns left.<p>Example input:<p><pre><code>  void print_int(char x) {\n    if (x &lt; 10) {\n      x += &#x27;0&#x27;;\n      asm volatile (&quot;JSR\\t$FFD2&quot; : &quot;+a&quot;(x));\n      return;\n    }\n    print_int(x &#x2F; 10);\n    print_int(x % 10);\n  }\n</code></pre>\nExample output:<p><pre><code>  .code\n  .global print__int                      ; -- Begin function print_int\n  print__int:                             ; @print_int\n  ; %bb.0:                                ; %entry\n    CMP #10\n    BMI LBB0__2\n  ; %bb.1:                                ; %if.end.preheader\n    LDX #10\n    PHA                                     ; 1-byte Folded Spill\n    JSR ____udivqi3\n    JSR print__int\n    PLA                                     ; 1-byte Folded Reload\n    LDX #10\n    JSR ____umodqi3\n  LBB0__2:                                ; %if.then\n    CLC\n    ADC #48\n    ;APP\n    JSR $FFD2\n    ;NO_APP\n    RTS\n                                        ; -- End function\n  .global ____udivqi3\n  .global ____umodqi3</code></pre>')