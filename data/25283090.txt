Item(by='TeMPOraL', descendants=None, kids=None, score=None, time=1606950959, title=None, item_type='comment', url=None, parent=25277781, text='HTML generators that work on trees. They do exist, and they&#x27;re very popular in Lisp world, though they also exist elsewhere.<p>So instead of reading a template file and interpolating it with strings, you&#x27;d write something like (using JS &#x2F; PHP syntax):<p><pre><code>  const html =\n    [&#x27;form&#x27;, {action: myHandlerUrl, method: &#x27;post&#x27;},\n      [&#x27;input&#x27;, {id: &#x27;key&#x27;, name: &#x27;key&#x27;, type: &#x27;hidden&#x27;, value: randomKey()}],\n      [&#x27;button&#x27;, {type: &#x27;submit&#x27;}, &quot;Send!&quot;]];\n\n  OutputHtml(html);\n</code></pre>\nWith OutputHtml() being the replacement for templating engine. The above structure is semantically a tree, and you can&#x27;t in any way screw it up as to leave tags incorrectly nested (it won&#x27;t compile&#x2F;interpret). It&#x27;s composable too - you can concatenate a bunch of such representations and always get a result that represents a valid tree. OutputHtml() is relatively easy to write even by yourself, because at any given time, when turning a dynamic value into output HTML, it&#x27;s apparent how the value has to be converted (and&#x2F;or &quot;escaped&quot;).<p>SQL also has its equivalents of this idea. The most basic of which is &quot;prepared statements&quot; - an API in which, instead of:<p><pre><code>  query(&quot;SELECT foo, bar FROM baz WHERE bar = &quot; + userInput\n        &quot; AND foo &gt; &quot; + anotherInput);\n</code></pre>\nyou write:<p><pre><code>  query(build(&quot;SELECT foo, bar FROM baz WHERE bar = ? AND foo &gt; ?&quot;), userInput, anotherInput)\n</code></pre>\nwhich against gives the API the most basic ability to recognize and encode interpolated values correctly. There are of course more complex libraries available, which let you parametrize any part of an SQL query, while making the generation template respect SQL&#x27;s semantics, and that use composable representations.')