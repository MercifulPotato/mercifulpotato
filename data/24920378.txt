Item(by='billyhoffman', descendants=None, kids=[24921707], score=None, time=1603900979, title=None, item_type='comment', url=None, parent=24918861, text='GP is talking about server response time for the base HTML request, saying they see 800ms+. Here are the resource timings I&#x27;m seeing for the base HTML (pulled from the HAR of our commercial web monitoring product. Running from Virginia on a 20&#x2F;5 Mbps connection, latest chrome, desktop user agent and 1080p viewport):<p>&quot;dns&quot;: 158.37,\n&quot;connect&quot;: 328.503,\n&quot;send&quot;: 0.148,\n&quot;wait&quot;: 856.465,\n&quot;receive&quot;: 91.914,\n&quot;ssl&quot;: 175.243<p>&quot;Wait&quot; is the time between when the last byte of request is sent, and the first byte of the response comes back. This is measured all after the DNS+TCP+TLS stuff has happened, and is basically measuring the latency to the server, the backend processing time, and the latency coming back.<p>800ms+ is... not good because this site is supposed to be behind a CDN (lower latency) and with a supposedly optimized backend. I also am still seeing the &quot;cf-cache-status: DYNAMIC&quot; response header, so whatever optimization was made didn&#x27;t stick.<p>(Also, That connect time is oddly high. 300+ms of which 175ms is the TLS handshake. Something to look at as well.)<p>FWIW I&#x27;m in the web performance industry as well, and Todd is correct, a 4-6 seconds for window.onload is common for sites (not just web apps, but sites). Of course modern site development practices (lazy loading images, deferring&#x2F;asyncing scripts, font fallbacks, etc) have made using the &quot;onload&quot; time essentially useless as a good metric.<p>(PS: Todd I&#x27;m a big fan of your videos on building Request Metrics)')