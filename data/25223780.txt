Item(by='beagle3', descendants=None, kids=None, score=None, time=1606427509, title=None, item_type='comment', url=None, parent=25222555, text='&gt; FFI: Can nim use a C++ class and vtables? D does it all the time, nearly every language proclaims to have the best C++ interop but only D seems to be actually able to do it. Templates, classes, structs, and more all work.<p>Well, it depends on how you define &quot;best&quot;. Beyond an ABI, FFI is obviously a function of the implementation rather than the language per-se.<p>The main Nim implementation can use C++ as a backend language, and when it does, it can use any C++ construct very easily by way of the .emit and .importcpp directives. For sure, classes, structs, exceptions all work, and IIRC templates do too (although you might need to instantiate a header yourself for each concrete type or something .... haven&#x27;t done that myself). This implementation also means that it can use any C++17 or C++20 construct, including lambdas and friends. Does D&#x27;s C++ interop support C++17? C++20? Can you guarantee it will support C++27? Nim&#x27;s implementation already does, on every single platform you&#x27;ll be able to use C++27 on (as long as C++27 can compile modern C++ code; there had been backward incompatible changes along the C++ history).<p>You can&#x27;t just #include a C or C++ header and call it a day; You need to have a Nim compatible definition for any symbol (variable, macro, function, class, ...). There are tools that help you and make it almost as easy as #include, such as nimterop[0] and and nimline[1], and &quot;c2nim&quot; which is included with the Nim compiler is enough to generate the Nim definitions from the .h definitions (though it can&#x27;t do crazy metaprogramming; if D can do that, then D essentially includes a C++ compiler. Which is a fine way to get perfect C++ compatibility - Nim does that)<p>But Nim can also do the same for JS when treating JS as a backend.<p>And it can basically do the same for Python, with nimpy[2] and nimporter, generating a single executable that works with your installed Python DLL (2.7, 3.5, 3.6, 3.7) - which is something not even Python itself can do. There was a similar Lua bridge, but I think that one is no longer maintained.<p>&gt; We also have Mir, which I haven&#x27;t benchmarked for a while but was faster than OpenBLAS and Eugene<p>There&#x27;s quite a bit of scientific stack built natively with Nim. It is far from self-sufficient, but the ease with which you can use a C library makes up for it. I haven&#x27;t used it, but Laser[3] is on par with or exceeds OpenBLAS speedwise, and generalizes to e.g. int32 and int64 matrix multiplication; Arraymancer[4] does not heve all of numpy&#x27;s functionality but does have quite a few nice bits from scikit-learn, supports CUDA and OpenCL, and you can use numpy through nimpy if all else fails. Also notable is NimTorch[5]. laser and arraymancer are mostly developed by mratsim, who occasionally hangs out here on HN.<p>D is a fine language, I used it a little in the D1 days, and it was indeed a &quot;better C++&quot; but did not deliver enough value to be worth it for me, so I stopped. I know D2 is much better, but I&#x27;ve already found my better C++ (and better Python at the same time!) in Nim, so I haven&#x27;t looked at it seriously.<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;nimterop&#x2F;nimterop" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;nimterop&#x2F;nimterop</a><p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;sinkingsugar&#x2F;nimline" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;sinkingsugar&#x2F;nimline</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;yglukhov&#x2F;nimpy" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;yglukhov&#x2F;nimpy</a><p>[3] <a href="https:&#x2F;&#x2F;github.com&#x2F;numforge&#x2F;laser" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;numforge&#x2F;laser</a><p>[4] <a href="https:&#x2F;&#x2F;github.com&#x2F;mratsim&#x2F;Arraymancer" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mratsim&#x2F;Arraymancer</a><p>[5] <a href="https:&#x2F;&#x2F;github.com&#x2F;sinkingsugar&#x2F;nimtorch" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;sinkingsugar&#x2F;nimtorch</a>')