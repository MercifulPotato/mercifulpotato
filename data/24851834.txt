Item(by='beagle3', descendants=None, kids=[24852712], score=None, time=1603312319, title=None, item_type='comment', url=None, parent=24849777, text='Python does have a lot in common with CL; but the problem with Python is that almost any call you cannot statically inline, which is most of them, can change the semantics of everything else - you&#x27;ve just called math.floor() ; are you sure it wasn&#x27;t just monkeypatched to assign 7 to all local variables who have an &#x27;x&#x27; in their name in the caller&#x27;s frame?<p>Most of these uses are very rare, but the tail is incredibly long for Python, and the problem is that you can&#x27;t even compile a &quot;likely normal&quot; and a &quot;here be dragons&quot; versions, and switch only when needed - you need to constantly verify. The same is not true, AFAIK, with Common Lisp - being a lisp1 and having a stronger lexical scope than python does.<p>Shedskin is a Python to C++ compiler that mostly requires the commonly-honoured constrained that a variable is only assigned a single type throughout its lifetime. (And that you don&#x27;t modify classes after creation, and that you don&#x27;t need integers longer than machine precision, and ....); While many programs seem to satisfy these requirements on superficial inspection, it turns out that almost all programs violate them in some way (directly or through a library).<p>The probability that Shedskin will manage to compile a program that was not written with Shedskin in mind is almost zero.<p>Nuitka was started with the idea that, unlike shedskin, it will start by compiling the bytecode to an interpreter-equivalent execution (which it does, quite well), to get a minor speed up - and then gradually compile &quot;provably simple enough&quot; things to fast C++; a decade or so later, that&#x27;s not working out as well as hoped, AFAIK <i>because</i> everything depends on something that violates simplicity.')