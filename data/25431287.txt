Item(by='pron', descendants=None, kids=[25432755, 25431685], score=None, time=1608047130, title=None, item_type='comment', url=None, parent=25431143, text='I would say yes. There is nothing that inherently connects TLA+ to distributed systems. It&#x27;s just that 1. it&#x27;s general enough to deal with nondeterminism and concurrency that, unlike some other formalisms, it <i>can</i> be easily and naturally used to specify them, and 2. distributed systems and concurrency are a very common example of subtle algorithms that engineers often encounter and are tricky to get right without help. The combination of these two aspects, as well as the fact that the inventor of TLA+, Leslie Lamport, is very well-known for his work in distributed systems, led to TLA+ being popular in that field.<p>The level of trickiness&#x2F;subtlety of the problems you encounter can determine how much benefit you&#x27;ll see from TLA+, although I believe people often <i>underestimate</i> it (in a way, all bugs are a result of programmers underestimating the complexity of a problem).<p>TLA+ is relatively easy to learn compared to a new programming language, and you can become reasonably proficient in it in two weeks of self study. The biggest difficulty is <i>unlearning</i> some habits from programming and internalising that while writing a mathematical specification shares some superficial similarities to programming the activities are different in most ways (and fun in very different ways).')