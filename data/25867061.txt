Item(by='mumblemumble', descendants=None, kids=None, score=None, time=1611278727, title=None, item_type='comment', url=None, parent=25866763, text='I see you chopping the first two words off that quote. ;)<p>In this specific case, that single instance of a single pattern is such a throw-away that it doesn&#x27;t deserve a name, but the pattern itself is easy enough to name. So I&#x27;d skip the single-purpose function and create a combinator.<p><pre><code>  def do_each(*args):\n    def helper(x):\n      for fn in args:\n        fn(x)\n    return helper\n</code></pre>\nand then, when I need to do both foo and bar, I don&#x27;t even need a lambda.<p><pre><code>  map(do_each(foo, bar), some_sequence)\n</code></pre>\nThat&#x27;s a fairly specific case, though. Moving back to the general, I would say that a function that does more than one thing, but can&#x27;t easily be named, is a code smell.<p>Of course, every general rule has its exceptions. But I&#x27;m not so keen on the idea of optimizing one&#x27;s coding style for the exceptional cases. Going back to PEP 20, &quot;Special cases aren&#x27;t special enough to break the rules.&quot;<p>(I realize mapping a function that returns nothing is terrible, but I&#x27;m feeling too lazy to think of a better example.)')