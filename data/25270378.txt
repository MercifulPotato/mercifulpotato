Item(by='tcgv', descendants=None, kids=[25270674], score=None, time=1606859133, title=None, item_type='comment', url=None, parent=25267174, text='&gt; Why is changing an integer to a class an improvement?<p>Sorry, I should have said &quot;extend&quot; instead of &quot;improve&quot; which would have better captured my intent. My bad.<p>&gt; Within a class you have several entities that are managed by the class. I&#x27;m saying take away the management layer all together.<p>This is a central point in our disagreement, we have different strategies for handling this kind of business logic. From my OOP background I&#x27;m more comfortable abstracting the management logic required for running a jungle in a &#x27;Jungle&#x27; class, which is the whole point of OOP. You prefer another approach, and that&#x27;s all right.<p>&gt; if you remove a banana you have to remove a gorilla too? What do you do? You edit the space station method to account for that.<p>Yes, if you have a requirement that in Space Stations the number of Gorillas should be proportional to the number of Bananas, you implement that specific behavior in the Space Station class.<p>&gt; Suddenly the house class requires this too. How do you account for that in the house without copying your logic?<p>Ok, if more classes have the same requirement maybe it&#x27;s not a specific behavior, but another abstraction, which could potentially be extract into a new component, mixin or an utility class.<p>&gt; So Why not remove the concept of classes all together?<p>It&#x27;s a design choice. I feel that OOP, when used properly, allows me to manage complex abstractions more easily.<p>&gt; Not to mention that your style requires something called dependency injection which greatly complicates code.<p>Indeed, it requires dependency injection, along with all of the other SOLID [1] principles. But from my point of view it helps to manage and reduce complexity, not increase it, and I have even written about it in my blog [2] :)<p>&gt; Why restrict the ability to reuse something? This is all a class does<p>Classes are intended to encapsulate behavior&#x2F;knowledge, not to restrict the ability to reuse something. Even though you bring valid points to the conversation, I think you have a few misconceptions about the objectives of OOP. Here&#x27;s another article I wrote describing what I believe to be the fundamental concept of OOP [3]<p>Lastly, I&#x27;m not here saying that OOP is better than Functional Programming. They are different things, both valid in their own domain (and also combined together in the case of OOP, which benefits from borrowing a few concepts from Functional Programming).<p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SOLID" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SOLID</a><p>[2] <a href="https:&#x2F;&#x2F;thomasvilhena.com&#x2F;2019&#x2F;07&#x2F;integrating-third-party-modules" rel="nofollow">https:&#x2F;&#x2F;thomasvilhena.com&#x2F;2019&#x2F;07&#x2F;integrating-third-party-mo...</a><p>[3] <a href="https:&#x2F;&#x2F;thomasvilhena.com&#x2F;2020&#x2F;03&#x2F;a-strategy-for-effective-system-modularization" rel="nofollow">https:&#x2F;&#x2F;thomasvilhena.com&#x2F;2020&#x2F;03&#x2F;a-strategy-for-effective-s...</a>')