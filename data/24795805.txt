Item(by='aarchi', descendants=None, kids=None, score=None, time=1602806024, title=None, item_type='comment', url=None, parent=24790218, text='This same blog has a post on the idiosyncrasies of the C preprocessor. Reminds me of several convoluted macros I assembled to stress test a C&#x2F;C++ static analyzer at my last job. My favorite that I wrote was the following, combining line continuations, trigraphs, digraphs, universal character names, and block comments. Particularly insidious is the line continuation between &#x2F; and * in the block comment. It is equivalent to: #define ðŸ‡©ðŸ‡ª() &quot;de&quot;<p><pre><code>   ??&#x2F;\n  %: \\\n  &#x2F;??&#x2F;\n  *&#x2F;*\\\n  **&#x2F;\\\n  def\\\n  ine\\\n   \\U\\\n  0??&#x2F;\n  001\\\n  F??&#x2F;\n  1E9\\\n  ??&#x2F;\\\n  U00\\\n  01F\\\n  1EA\\\n  (??&#x2F;\n  ) &quot;\\\n  de&quot;\\\n</code></pre>\nThis example also exposes undefined behavior from the C++ standard: &quot;if a splice results in a character sequence that matches the syntax of a universal-character-name, the behavior is undefined&quot; [0].<p>[0]: <a href="https:&#x2F;&#x2F;eel.is&#x2F;c++draft&#x2F;lex.phases#1.2" rel="nofollow">https:&#x2F;&#x2F;eel.is&#x2F;c++draft&#x2F;lex.phases#1.2</a>')