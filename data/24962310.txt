Item(by='pron', descendants=None, kids=[24962985], score=None, time=1604263195, title=None, item_type='comment', url=None, parent=24961621, text='&gt; They work in the exact same manner as in normal predicate (higher order) logic.<p>It is based on dependent products which you need to understand sooner-or-later (sooner, really), and are rather more intricate than FOL.<p>&gt; Uh, are you talking about the normal identity function?<p>Ah, but that&#x27;s the thing. It&#x27;s not a function and it can&#x27;t be (for the same reason you don&#x27;t have an identity function in set theory). In TLA+ the meaning of terms is simpler, as there is a clear distinction between pure syntactic operators and domain objects (sets, but also functions). So in TLA+, you can have either:<p><pre><code>    Id(x) ≜ x\n</code></pre>\nwhich is just parameterised syntax that does not denote any domain object, or perhaps you&#x27;d want:<p><pre><code>    Id(S) ≜ [x ∈ S ↦ x]\n</code></pre>\nwhich is an operator defining the identity function on a given set.<p>In Lean, however,<p><pre><code>    universe u\n    def id {α : Sort u} (a : α) : α := a\n</code></pre>\nwhich is similar in spirit to the second TLA+ definition, describes a rather complex object in the meta-domain.')