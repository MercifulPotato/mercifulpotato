Item(by='psykotic', descendants=None, kids=[25364150], score=None, time=1607538247, title=None, item_type='comment', url=None, parent=25360547, text='The term &#x27;persistent data structure&#x27; goes back to papers by Tarjan, et al in the 80s but the path copying technique is much older. My favorite technique from one of those papers, the in-place v2 trick, is an alternative to path copying that achieves amortized O(1) space per update as opposed to O(depth) space per update for path copying; this only gives you partial persistence (linear history like an MVCC database system, not branching history like a purely functional data structure or Git) but often that&#x27;s all you need. (There&#x27;s also an extension of the trick to full persistence but it&#x27;s not very practical.)<p>&gt; I’m not a Clojure expert, but I believe you could trace a direct line to Clojure’s core immutable data structures from Okasaki’s doctoral thesis.<p>I believe the direct inspiration for Clojure&#x27;s persistent vectors and maps are Bagwell&#x27;s papers on HAMTs, which weren&#x27;t so much a new data structure as an example of data structure engineering. Okasaki&#x27;s thesis has several contributions but its main theme is how you can apply amortization in the purely functional setting if you have laziness or memoization, which is in a very different direction.')