Item(by='tkahnoski', descendants=None, kids=None, score=None, time=1609867850, title=None, item_type='comment', url=None, parent=25641234, text='In an era before cloud, one of the major project risks was under-provisioning hardware. Load testing made sense then. It makes less sense now.<p>I&#x27;ve given up on load testing all together. Most applications or services quickly grow to complex to maintain in a cost-effective way with the pace of change demanded of them.<p>Instead every team I talk to about load testing or performance I shift it to observability. If the team can&#x27;t understand current performance and load in production, any sort of load testing results in another environment will be poorly understood and hold little value.<p>This approach positions the team much better to react to regressions in production vs holding up work trying to create or pass a load test.<p>The exception I make for this is load testing for validating technology choices as an effort in risk mitigation that the technology can&#x27;t perform. (i.e. Will this query work moving from SQL to ElasticSearch? What happens if I have 100x amount of data in that table?) Targetted specific scenarios, to confirm behavior of things too expensive to do in production.<p>I&#x27;m sure there are a few performance critical apps that need these tools, but the vast majority of software doesn&#x27;t. Don&#x27;t burn 100s of hours like I did to validate performance before release. Start with gaining a deep understanding of your production behavior and push for production experimentation. It is significantly less time-consuming and pays way more dividends.')