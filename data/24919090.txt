Item(by='fsloth', descendants=None, kids=[24924612, 24924245, 24921645], score=None, time=1603895335, title=None, item_type='comment', url=None, parent=24901244, text='This codebase won an Oscar:<p><a href="https:&#x2F;&#x2F;pbrt.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pbrt.org&#x2F;</a><p><a href="https:&#x2F;&#x2F;github.com&#x2F;mmp&#x2F;pbrt-v3" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mmp&#x2F;pbrt-v3</a><p>That said, IMHO, there is no &quot;clean&quot; C++ code. There are C++ codebases that use different styles, and their &quot;quality&quot; more or less is context sensitive.<p>Personally I felt the best tutorial to C++ were actually two other programming languages - Scheme and F#.<p>Scheme drove in the concept that it&#x27;s totally fine to model things based on the shape of the data and that you don&#x27;t need to create type based abstractions around every thing.<p>F# then demonstrated how a language with type system is supposed to work.<p>The problem with C++ is that the language is so verbose that unless you have an abbreviated model in your head how a type based language can be used to solve problems in best way, you will get lost in trivial C++ minutiae.<p>So, personally, I generally think &quot;Am I solving a Scheme like problem or Standard ML like problem&quot; and then try to apply C++ as simply as possible.<p>Several academics have created a career of how to patch C++&#x2F;Java&#x2F;C# with concepts that make them less fragile in a collaborative context:<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Design_Patterns" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Design_Patterns</a><p><a href="https:&#x2F;&#x2F;www.amazon.com&#x2F;Design-Patterns-Elements-Reusable-Object-Oriented&#x2F;dp&#x2F;0201633612" rel="nofollow">https:&#x2F;&#x2F;www.amazon.com&#x2F;Design-Patterns-Elements-Reusable-Obj...</a><p>In my opinion design patterns are not a fundamental concept, but rather provide common syntax for collaboration purposes for various patterns that are parts of language and more or less invisible in e.g. Scheme or F#. But if one is diving into C++ it&#x27;s probably convenient to be familiar with these concepts.')