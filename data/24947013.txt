Item(by='greenshackle2', descendants=None, kids=None, score=None, time=1604092918, title=None, item_type='comment', url=None, parent=24944660, text='REST is centered on resources (nouns), RPC is centered on procedures (verbs). REST is more constrained.<p>A Remote Procedure is just that, a procedure. Procedures don&#x27;t have many constraints. They can implicitly change the state of resources on the server. They can do whatever you want.<p>REST APIs are supposed to be designed around state transfer. You transfer the state of a resource from server to client with a GET. You transfer the state back to the server with a POST&#x2F;PUT. The operations are supposed to be &#x27;stateless&#x27; in that the result is not supposed to depend on the pre-existing state of the resource on the server.<p>To give a silly example, let&#x27;s say I have a Counter service. In RPC I could expose a incrementByOne procedure. And then clients could just call:<p><pre><code>    incrementByOne(id=1)\n</code></pre>\nIn REST I would have a Counter resource. The RESTful way to increment the counter would be:<p><pre><code>    GET &#x2F;api&#x2F;counter&#x2F;1\n    -&gt; OK {&#x27;id&#x27;: 1, &#x27;value&#x27;: 12}\n\n    PUT &#x2F;api&#x2F;counter&#x2F;1 {&#x27;id&#x27;: 1, &#x27;value&#x27;: 13}\n    -&gt; OK\n</code></pre>\nIt&#x27;s more cumbersome, but notice that unlike the RPC call, the result of the PUT request doesn&#x27;t depend on the current state in the server. The counter will always end up at 13. The PUT request is idempotent, I can repeat it n times and end up with the same result. Obviously that&#x27;s not true with the RPC call. Notice also that the client must implement its own logic for incrementing.<p>You could design a RESTful RPC, where the only methods are like:<p><pre><code>    getCounter(id) -&gt; Counter\n\n    createCounter(Counter) -&gt; id\n\n    putCounter(Counter)\n</code></pre>\nThe opposite, RPC over REST, doesn&#x27;t really work. I guess you could try representing procedures as resources but it would be incredibly awkward. That&#x27;s why I say REST is more constrained.<p>With well designed REST you should end up with very decoupled logic between server and client since all they can do is transfer state, they each have they wholly separate logic to deal with the state.<p>With RPC you can end up with some real spaghetti, where the logic of client and server are intertwined. But not everything can be modeled cleanly as resources, sometimes you really do just want to execute some logic on the server.')