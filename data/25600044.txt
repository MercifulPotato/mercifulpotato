Item(by='mumblemumble', descendants=None, kids=None, score=None, time=1609466589, title=None, item_type='comment', url=None, parent=25593410, text='&gt; When a Python thread is holding on to the GIL (running Python bytecode), how many other Python threads can concurrently<p>You&#x27;ve been tricked by jargon. It&#x27;s a common misconception. In this context, &quot;concurrency&quot; has a specific meaning that is different from the everyday one you&#x27;re using in this sentence.<p>For a good introduction to what the two words mean in a software engineering context, check out this written version of Rob Pike&#x27;s talk, &quot;Concurrency is not Parallelism.&quot;<p><a href="https:&#x2F;&#x2F;rakhim.org&#x2F;summary-of-concurrency-is-not-parallellism-a-talk-by-rob-pike&#x2F;" rel="nofollow">https:&#x2F;&#x2F;rakhim.org&#x2F;summary-of-concurrency-is-not-parallellis...</a><p>The very tl;dr summary is:<p>&gt; Concurrency is composition of independently executing things. . . Parallelism is simultaneous execution of multiple things.<p>When Python&#x27;s threading model was implemented, parallelism just wasn&#x27;t much of a concern. CPUs had a single core and could therefore only be working on one thing at a time. (In a macro sense; pipelining and supersclar architectures were still a thing, but not super relevant here.) Multithreading was not a way to do multiple things at once, it was just a way to ensure that some long-running calculation would not cause the program to lock up by, e.g., preventing it form responding to event queues in a timely manner. This was done by, not by running things in parallel, but by switching back and forth among them them very quickly.<p>Python&#x27;s GIL was designed for this kind of situation. It&#x27;s there to ensure that nothing bad happens if one of those context switches happens in the middle of a sensitive operation. Which is, strictly speaking, a concurrency concern and not a parallelism concern.<p>(It&#x27;s also possible to have parallel work that is not concurrent, in which case locks are not necessary. But just because it&#x27;s common for parallelism and concurrency to co-occur does not mean that they are the same thing.)')