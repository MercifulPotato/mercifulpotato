Item(by='virgilp', descendants=None, kids=None, score=None, time=1611303282, title=None, item_type='comment', url=None, parent=25867693, text='I wanted to pick it up, I feel it&#x27;s under-appreciated technology that has lots of potential. Reasons why I didn&#x27;t:<p>- It&#x27;s somewhat hard to sell to management. There (was) no company behind it to provide support; and it&#x27;s not a &quot;successful Apache project&quot;&#x2F; with large-ish community, either. And generally for a long while it was a passion project more than something Frank McSherry would actively encourage you to use in production.<p>- As other have said, the &quot;hello world&quot; is somewhat tricky. Not a lot of people know Rust. If you say &quot;let&#x27;s do this project in Rust&quot;, this will likely not go well; if I were able to use it from .NET and JVM, as a library, it might be an easier sell (I&#x27;m personally more invested in .NET now but earlier in my carer it would&#x27;ve been JVM)<p>- last but not least: the &quot;productization&quot; story is a bit tricky; comparing it to Spark does it no service. For Spark, not only do I have managed clusters like EMR, but I have a decent amount of tooling to see how the cluster executes (the spark web UI). Also I can deploy it in mesos, yarn not just standalone (and mesos&#x2F;yarn have their own tooling). For differential dataflow, one had none of that (at least last time I checked). Maybe it&#x27;d be more fair to compare it to Kafka Streams?<p><pre><code>  * Might I add: spark-ec2 was a huge help for me picking up spark, since before the 1.0 version. You can do tons of work on a single machine, yes... but, for this kind of systems, the very first question is &quot;how do you distribute that?&quot;. And you have the story that &quot;it&#x27;s possible&quot;, but you don&#x27;t have easy examples of &quot;word count, done on 3 machines, not because it&#x27;s necessary but because we demonstrate how easy it is to distribute the computing across machines&quot;.\n\n  * Compared to Kafka Streams: the thing about Kafka Streams is that you know what to use it for (Kafka!) and one immediately groks how one uses this in production (all state management is delegated to Kafka, this is truly just a library that helps you work better with Kafka). With differential dataflow, it&#x27;s much less clear. You could use it with Kafka, but also with Twitter directly, or with something else. And what happens if it crashes? How do you recover from that? What are the data loss risks? Does it give you any guarantees or do you have to manage that?</code></pre>')