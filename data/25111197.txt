Item(by='kdkeyser', descendants=None, kids=None, score=None, time=1605532393, title=None, item_type='comment', url=None, parent=25109260, text='I second this. I dislike the liberal usage of metaprogramming, especially in the context of a code base that you have to work on with multiple people. It adds another layer of concepts&#x2F;complexity&#x2F;magic that everyone in the team has to learn.<p>With PPX, the barrier to use metaprogramming has become lower (especially compared to camlp4), resulting in most modern Ocaml codebases depending on it. But the ergonomics of the end-to-end software delivery have not really followed: the fact that PPX&#x27;s break between compiler versions means that in practice, a compiler upgrade becomes a very costly thing to do. It is difficult to make the case for this in an industrial setting, where languages with almost religious backwards compatibility are common (Java, C++, even Go). For Ocaml, it is especially sad, because the core language is already quite powerful and expressive, lowering the need for metaprogramming (imo).<p>For scenarios where code generation is needed, I prefer a separate code generation step, which produces explicit &quot;standard&quot; code (e.g. like protoc)')