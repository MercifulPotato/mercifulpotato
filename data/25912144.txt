Item(by='kelnos', descendants=None, kids=[25913271], score=None, time=1611631720, title=None, item_type='comment', url=None, parent=25911070, text='Not really.  As an example, the configure script will often output a &quot;config.h&quot; header that will have a bunch of preprocessor macros that the developer can use to make decisions about what platform features are supported.<p>So you might have HAVE_FOO and HAVE_BAR in config.h.  But if the developer doesn&#x27;t do something like:<p><pre><code>    #ifdef HAVE_FOO\n    int ret = foo();\n    #elif HAVE_BAR\n    int ret = bar();\n    #else\n    int ret = do_some_fallback();\n    #endif\n</code></pre>\n... then that&#x27;s on the developer for just working on a system that has foo() and doesn&#x27;t consider other systems that only have bar(), or have neither.<p>Of course, that assumes they even put the tests for foo() and bar() in configure.ac in the first place!<p>I would still use autotools for a C project even if I was only targeting linux&#x2F;x86_64, just so I could write a simple declarative Makefile.am file that lists sources and defines target outputs, and have autoconf&#x2F;automake figure out everything else, and put it behind a standard interface (that is, one that respects prefix, destdir, etc.).  Also being able to easily write tests for dependencies and get the appropriate cflags and ldflags makes life easier.')