Item(by='humanrebar', descendants=None, kids=[25222909], score=None, time=1606418750, title=None, item_type='comment', url=None, parent=25209145, text='I always like hearing about more work in this space. More attention needs to be paid to native language packaging.<p>That being said, the core problems with current packaging tech don&#x27;t seem to be addressed here. Though maybe they are and someone can enlighten me.<p>1. Repo contents are not portable across packaging systems or distributions.<p>Antipatterns: Often your Makefiles have to be hardcoded to assume pkg-config. Or assume there&#x27;s a monorepo. Or your CMake has to explicitly mention your packaging system (i.e., Conan::zlib). Or all the projects must be ported to use a particular build system (like CMake exported config packages).<p>2. Repo contents are not portable across architecturesnand OSs.<p>There are well known source code anitpatterns here, but per-repo build and packaging specifications still like to have &quot;if windows&quot; and &quot;if ARM&quot; sections. I can live with working around edge cases, but it&#x27;s really pervasive.<p>3. Repo contents are not portable across sets of ABI assumptions.<p>Similar to item 2, but with respect to de facto ABI levers like what language standard is used (libraries often have different ABIs based on language feature detection) or magic preprocessor defines (like which std::string is assumed).<p>Now, I think the above are hard problems. But I would like to see more folks thinking about them. Especially people researching package management. Especially because someone just wanting to meaningfully use folly or boost::filesystem is generally unaware of the above foot guns.')