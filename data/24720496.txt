Item(by='gen220', descendants=None, kids=[24721948, 24720615], score=None, time=1602173470, title=None, item_type='comment', url=None, parent=24719525, text='I&#x27;ve worked in environments across the version-control gamut. The best-run places have had monorepos. But, for the life of me, I would <i>not</i> trust the companies that didn&#x27;t have monorepos, to operate a monorepo.<p>To go mono is to make an org-level engineering&#x2F;cultural commitment, that you&#x27;re going to invest in build tools, dependency graph management, third-party vendoring, trunk-driven development, and ci&#x2F;cd infrastructure.<p>Can you make a mono repo work without all of those things? Yes, but you are sacrificing most of its benefits.<p>If your eng org <i>cannot afford</i> to make those investments (i.e. headcount is middling but there is zero business tolerance for investing in developer experience, or the company is old and the eng org is best described as a disconnected graph), forcing a monorepo is probably not the right idea for you.<p>Monorepo vs microrepos is analogous in some ways to static vs dynamic typing debate. A well-managed monorepo prevents entire classes of problems, as does static typing. Dynamic typing has much lower table stakes for a &quot;running program&quot;, as do microrepos.<p>edit:<p>It&#x27;s worth noting that open source solutions to build tooling, dependency graph management, etc. have gotten extremely good in the last 10 years. At my present company (eng headcount ~200), we spend about 2 engineers-per-year on upgrades and maintenance of this infrastructure. These tools are still quite complex, but the table stakes for a monorepo  are lower today than they were 10 years ago.')