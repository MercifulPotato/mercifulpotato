Item(by='buybackoff', descendants=None, kids=None, score=None, time=1612183669, title=None, item_type='comment', url=None, parent=25987808, text='&gt; Inline functions are still fine though for writing zero-cost helpers, and I don&#x27;t think C# has them (there&#x27;s an &lt;AggressiveInlining&gt; attribute but IIRC it&#x27;s just a hint, the compiler isn&#x27;t required to actually obey).<p>In F#, you cannot disable inlining of small functions. It does IL source code inlining, like copy-paste, not machine code inlining. That increases generated dll&#x2F;exe size a lot for generics. And sometimes you do not want to do that because it&#x27;s worse for performance. There is an issue for that: <a href="https:&#x2F;&#x2F;github.com&#x2F;fsharp&#x2F;fslang-suggestions&#x2F;issues&#x2F;838" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;fsharp&#x2F;fslang-suggestions&#x2F;issues&#x2F;838</a><p>In C#, the AggressiveInlining attribute works well, in predictable manner. Non-inlineable cases are well known (`throw\\switch\\fixed\\try..catch\\calling delegates` and some more <a href="https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;master&#x2F;src&#x2F;coreclr&#x2F;jit&#x2F;inline.def" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;dotnet&#x2F;runtime&#x2F;blob&#x2F;master&#x2F;src&#x2F;coreclr&#x2F;ji...</a>).<p>&gt; because it supports directly inlining IL instructions intermixed with regular code<p>This works for very simple things only. And using InlineIL.Fody, Sigil, raw IL.Emit or just raw IL code as text is not that more difficult if you already know IL.<p>&gt; you _can_ write F# that&#x27;s about as fast as non-unsafe C#<p>I tried this several times. It always ends with fighting the compiler more than just rewriting in C#, even without the `unsafe` keyword. In most cases due to generated IL that I cannot control from F#.')