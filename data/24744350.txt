Item(by='m_mueller', descendants=None, kids=[24744765], score=None, time=1602402835, title=None, item_type='comment', url=None, parent=24736849, text='I’m missing a bit of prescriptiveness here. Here’s a formula I’ve arrived at after 15y of academic and professional programming - sharing here with the purpose of having it challenged by the reader:<p>* every abstraction has a cost - DO a quick cost&#x2F;benefit analysis in your head, or even better in the code comments, when choosing for&#x2F;against an abstraction.<p>* generally, start with KISS.\n    - a process begins with a verb and its design usually starts with being a function&#x2F;procedure\n    - pieces of data that belong together across multiple processes should start out as an immutable object or struct. In python I’m almost never using direct descendants of object, rather I inherit either from NamedTuple (for final classes) or I decorate with @dataclass(frozen=True) for non-final.<p>* using the above, you’ll start seeing violations of DRY. DO use the rule-of-threes. If there’s a second repetition you’re either writing, or already anticipate based on the JIRA backlog - factor out the repeating code using an appropriate abstraction.<p>I’ve found that code written with these rules tends to be simple yet clean (these two properties can often be opposite, I’ve seen simple code that is constantly repeating itself and thus becomes unmaintainable, and I’ve also seen clean code that is the opposite of simple because of an abundance of abstractions (think FizzBuzzEnterprise).')