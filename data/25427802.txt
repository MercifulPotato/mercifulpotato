Item(by='Dylan16807', descendants=None, kids=[25428617], score=None, time=1608016239, title=None, item_type='comment', url=None, parent=25427578, text='There are two big issues.<p>One is that the as-is rule only says that code has to match a <i>possible</i> execution of the abstract machine.  Let&#x27;s say an optimization changes the address where a variable gets allocated.  That&#x27;s an extremely valid optimization, even though the program can observe the change.  But that would make it fail the &quot;eval e = eval (opt e)&quot; rule in siraben&#x27;s proof.  The same for picking a different order to execute the functions in &quot;f() + g()&quot;.<p>The other is optimizing around undefined behavior.  The as-is rule only applies for valid inputs.  Optimizing a loop by assuming you won&#x27;t overflow would get rejected by that proof.  So would optimizing code so that it won&#x27;t segfault.<p>And depending on how exactly that eval test works, it might effectively mark every variable as volatile too.')