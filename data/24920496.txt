Item(by='steveklabnik', descendants=None, kids=[24922007], score=None, time=1603901490, title=None, item_type='comment', url=None, parent=24919526, text='Hey there! Rust core team member and long-time C programmer here.<p>The short of it is, this is complicated, and it really depends on individual circumstance. You have given your circumstances, so I can help answer on that basis, but doesn&#x27;t mean I agree it&#x27;s the same for everyone.<p>There are two major ways of thinking here: Rust first, or C first. The advocates for Rust first will point to an easier onboarding story, a supportive community, a helpful compiler, and that you&#x27;ll start off with good habits. The advocates for C first will point out that C is the latin of software development, and that you may not appreciate what Rust does for you without first experiencing the wild west of C.<p>Both of these have merits. I personally prefer Rust first. I of course, have a lot of bias.<p>I work in embedded Rust, and the thing is, the industry is still C based. Depending on <i>which</i> embedded devices, it may be your only option. So, I don&#x27;t think there is any world in which you <i>cannot</i> learn C. Even though my codebases have no C in them at all, data sheets refer to C concepts, example code from vendors is all in C, blog posts and other helpful documents are generally in C.<p>So, absolutely, learn C to some degree.<p>Personally, what I would do in your situation is this: pick up a copy of K&amp;R. Pick up a copy, either online for free, or in paper, &quot;The Rust Programming Language.&quot; (I am a co-author. I don&#x27;t make any money from the book; I recommend these two because they are generally considered the go-to book for each language.) Read them. See what speaks to you. Go from there. There is no reason you have to make a big choice up front and commit to it to all time. Try things. See what makes you go &quot;I want to do more of that.&quot; And then move forward. Maybe you&#x27;ll love C and never learn any more Rust. Maybe you&#x27;ll like Rust and stick with it primarily. No way to tell until you give them both a shot.<p>(I actually strongly disagree with many of the ways that people characterize C, and even in this thread. C is not actually a small language, it is not super simple... but that doesn&#x27;t mean it&#x27;s not worth learning.)')