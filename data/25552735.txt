Item(by='Nextgrid', descendants=None, kids=[25552820], score=None, time=1609091279, title=None, item_type='comment', url=None, parent=25552622, text='I don&#x27;t think the hate on MongoDB or NoSQL itself is justified. The hate should be directed at developers or CTOs that go &quot;all in&quot; on it because of hype or lack of skill and the illusion that not having to deal with schemas is somehow a silver bullet.<p>NoSQL databases are great for storing arbitrary JSON-like structures, retrieving them by ID and <i>occasional</i> queries&#x2F;aggregations on the inner fields of those structures.<p>NoSQL is absolutely not suitable for most business logic and the lack of a schema is actually a major drawback. It feels like a solution (because inserting invalid data will succeed on NoSQL compared to a conventional DB which will reject it based on constraint violations, missing fields or mismatched column types) but in reality you&#x27;re just kicking the problem down the road and it will come back to bite you because your application now has to be able to deal with this inconsistent data (and in most cases <i>that</i> isn&#x27;t accounted for with dealing with NoSQL, and the result is predictable).<p>I&#x27;ve been on a project where the main database was MongoDB and while it worked fine for the most part, we&#x27;d get exceptions when the application tries to read some records (most likely from earlier on in the business&#x27; lifetime) that had missing keys and would predictably explode. This isn&#x27;t the fault of MongoDB by itself - the whole point of it is to be able to deal with unstructured data - but the fact that someone chose to use it while they actually needed structured data and constraints to ensure only valid data is inserted in the DB, which traditional relational databases do provide. Of course, it&#x27;s easier to blame MongoDB rather than admit &quot;we&#x27;ve been stupid and shouldn&#x27;t have chosen the wrong tool for the job&quot;.')