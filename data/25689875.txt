Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1610137192, title=None, item_type='comment', url=None, parent=25688540, text='&gt; Imperative thinking is computational. All forms of thinking are computational by definition.<p>I meant in the mathematical sense. Math doesn’t have imperative statements and side effects.<p>&gt; What does expressions have to do with anything. Recursion can be both defined in an expression and as an imperative jump instruction. The concept is orthogonal to expressions.<p>In case it wasn’t clear, I’ve been arguing this whole time for teaching pure FP concepts. Starting with computing a value, then computing a value from input, then with a function returning a value computed from its input... then with a function computing a value recursively from its input. Recursion is the fundamental building block for repetition in FP. Even if you can express it with a loop-like expression it eventually desugars to recursion.<p>&gt; But people don&#x27;t think of multiplication this way. The teacher doesn&#x27;t teach multiplication to you in terms of recursion she literally teaches you it with the &quot;times&quot; keyword. What&#x27;s 5 * 6? Add 5 to 5, 6 times.<p>That... is recursion. It’s mind boggling to me that it’s not plain as day, here in this context. It’s literally:<p><pre><code>    (+ 5 (+ 5 (+ 5 (+ 5 (+ 5 5))))))\n</code></pre>\nAnd that’s <i>precisely</i> how I was taught multiplication. It was just written with infix:<p><pre><code>    5 * 6 = 5 + 5 + 5 + 5 + 5 + 5\n</code></pre>\nWhich, the teacher demonstrated can be partially unwrapped:<p><pre><code>    5 * 6 = 5 + 5 * 5\n</code></pre>\nAnd so on. All you have to do to teach that as recursion is declare those operators as functions and call them. You can also use this to teach reduce, which is just a generalized recursive loop expression.<p>&gt; It has bearing on language. Nobody outside of programming&#x2F;mathematics communicates concepts recursively. Our communication is a reflection of how we think naturally. Recursion takes training. Looping is just learning syntax for a concept we already know about: repetition.<p>From a learning perspective, they’re literally just different syntax for the same thing. Recursion is just moving the repetition intent to the body of the loop and eliminating intermediary values. There’s no reason other than tautology that one syntax is easier to learn than the other.')