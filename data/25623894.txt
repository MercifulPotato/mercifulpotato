Item(by='afandian', descendants=None, kids=None, score=None, time=1609699280, title=None, item_type='comment', url=None, parent=25623787, text='A specific example:<p>I have context scratch-pad hashmap object I pass into a top-level function. It can then be decorated with extra scratchpad data all the way down the call-stack and passed into lower functions, for them to make use of. So each function can pass stuff down, but it&#x27;s not available further up the call stack. It effectively looks like a stack object in terms of its semantics: as you unwind the stack you unwind history, &#x27;undoing&#x27; changes. And the stack can take many different paths over execution.<p>Functions can do pretty much anything they want to the object further down the stack, without affecting other functions&#x27; inputs (parents or siblings). If it were mutable, the functions would suddenly be coupled to each other, and could change each other&#x27;s data inputs. Add concurrency to that and it gets worse.<p>There are other ways to do this with Clojure. But I like this method, it&#x27;s obvious and easy to test. It also feels  reminiscent of Prolog.<p>In my example I&#x27;m associating new values into a hashmap, not appending to a vector, but it amounts to the same thing.')