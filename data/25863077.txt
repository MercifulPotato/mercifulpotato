Item(by='zackmorris', descendants=None, kids=None, score=None, time=1611257564, title=None, item_type='comment', url=None, parent=25860413, text='After learning Docker, I second this.<p>The great mistake happened way back in the 1980s (maybe earlier) when most OS developers didn&#x27;t implement a proper permissions system for executables. Basically, the user should always be prompted to allow a program read&#x2F;write access to the network, the filesystem and other external resources.<p>Had we had this, then executables could have been marked &quot;pure&quot; functional when they did&#x27;t have dependencies and didn&#x27;t require access to a config file. On top of that, we could have used the refcount technique from Apple&#x27;s Time Machine or ZFS to have a single canonical copy of any file on the drive (based on the hash of its contents), so that each executable could see its own local copy of libraries rather than descending into dependency hell by having to manage multiple library versions sharing the same directories.<p>Then, a high-level access granting system should have been developed with blanket rules for executables that have been vetted by someone. Note that much of this has happened in recent years with MacOS (tragically tied to the App Store rather than an open system of trust).<p>There is nothing in any of this that seems particularly challenging. But it would have required the big OS developers to come on board at a time when they went out of their way to impose incompatibility by doing things like: using opposite slashes and backslashes, refusing to implement a built-in scripting language like Javascript, or even providing cross-platform socket libraries, etc.<p>The only parts I admire about Docker are that they kinda sorta got everything working on Mac, Windows and Linux, and had the insight that each line of a Dockerfile can be treated like layers in an installer. The actual implementation (not abstracting network and volume modes enough so there&#x27;s only one performant one, having a lot of idiosyncrasies between docker and docker-compose, etc) still leave me often reaching for the documentation and coming up short.<p>That said, Docker is great and I think it was possibly the major breakthrough of the 2010s. And I do love how its way of opening ports makes a mockery of all other port mapping software.')