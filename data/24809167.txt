Item(by='jnxx', descendants=None, kids=None, score=None, time=1602933368, title=None, item_type='comment', url=None, parent=24808016, text='&gt; That assertion makes zero sense if we take into account that parallelization is one of the most basic performance techniques there is<p>I would not support that stance. There are areas where parallelization is helpful, like numerical weather models, graphics, and scientific number crunching, but for by far the most cases, parallelization is anything but trivial and requires a pretty deep knowledge about things like the C++ memory models, what read-write barriers, locks, and fences are, and so on. Less than 1% of C++ programmers can really handle that. And apart from that this is an area where other languages like Rust, Clojure, Scala have a strong point, because whether it is done <i>correctly</i> is completely implicit in a C++ program while in Rust, many errors will have the result that your program does not compile. Debugging the same  mistakes in C++ will make you pull your hair.<p>In fact, I&#x27;d urge anyone who wants to learn principles of safe concurrent computation in C++, to learn Rust, Clojure and Scala first, they are wonderful languages with strong, highly coherent concepts, and it will make you a much better C++ programmer even if you never use them again.<p>Of course it is not only possible but common practice to implement parallel computation in games and such in C++, but this is not the standard application of C++.')