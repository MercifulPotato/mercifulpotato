Item(by='commandlinefan', descendants=None, kids=None, score=None, time=1611351430, title=None, item_type='comment', url=None, parent=25874984, text='&gt; it would be faster for most teams to create their tech stacks utterly from scratch<p>I actually agree, but maybe not for the same reasons he gives.  The problem with modern tech stacks is that, yes, they&#x27;re insanely complex, and each of the dozen or so individual components has dozens if not hundreds of its own hidden expectations about what should be where and what it should look like.  As long as you meet all of those expectations, everything works magically like it should, but as soon as you miss one, you&#x27;ll be lucky if you even get an error message that you can google the solution for.<p>There are two efficient ways to solve this: 1) no dependencies, build everything from first principles that you already understand.  Then, although there will be plenty of assumptions baked into the code, you&#x27;ll know what they are and how to deal with them because you put them there.  2) take advantage of pre-built solutions, but actually read and understand the docs before you rely on them.<p>The second solution depends on two rarely present preconditions: one, the docs actually exist.  Two, management understands that it takes more than twenty minutes to realistically absorb 500 pages of dense technical documentation.<p>What we end up doing as a workaround is using the off-the-shelf stuff without really understanding what it&#x27;s doing (or are you telling me that you understand the 9000 files that are installed by NPM?  I&#x27;m not exaggerating, BTW, go take a peek).  We cross our fingers and hope that we got all the assumptions right, cut-and-paste solutions from stackoverflow, and let the horrifically inefficient solution take the place of actual engineering because the &quot;timelines are aggressive&quot;.')