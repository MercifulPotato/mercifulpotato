Item(by='zweizeichen', descendants=None, kids=None, score=None, time=1607339614, title=None, item_type='comment', url=None, parent=25329513, text='Some great points! I built a project similar to this (think online lectures but it never went anywhere) in spring when the pandemic hit. I highly recommend building a platform like this if you have some spare time. It involves lots of interesting engineering&#x2F;architecture challenges all over the stack. IMHO, from a technical viewpoint, it&#x27;s mostly integration work, as all the really hard parts were already done by excellent 3rd party tools and libraries. You&#x27;ll probably have some kind of RTMP bridge (nginx [1]), wrap ffmpeg for transcoding and play it back using something like Shaka player [2] where the segments are being served by some kind of caching reverse proxy. It took me a few weeks to get a prototype running inside a K8S cluster where oAuth-ed users could publish RTMPS streams which could be watched by other authed users via HLS in a somewhat scalable way. It was surprisingly easy to build this using Elixir&#x2F;Phoenix LiveView.\nSome thoughts on your comment:<p>&gt; - Probably the hardest part of running these things is managing outbound bandwidth costs.<p>This. As others noted, you may be getting around this by using something like Hetzner&#x27;s&#x2F;Scaleway&#x27;s&#x2F;OVH&#x27;s offerings. However, I think they won&#x27;t be too happy if you really use that much bandwidth all the time. You can probably forget using IaaS of one of the bigger cloud platforms unless you negotiated some special terms.<p>&gt; - You&#x27;ll almost certainly need admin and moderation tools soon.<p>That&#x27;s one of the main reasons why I did offer a public instance. It&#x27;s probably best to host a platform like this in a non-public context such as members of a single org. Just look at what happened to Firefox Send...<p>&gt; - Please don&#x27;t keep using RTMP [...] and its security is, uh, _weak_.<p>Yes it is a bit of a pain to work with but AFAIK you can wrap RTMP inside a TLS session which is supported by OBS. I think I just exposed a stunnel instance back then which forwarded it to a nginx instance which handled auth&#x2F;auth and forwarding to the transcoding backend. This way you won&#x27;t leak any streaming keys or video data. Please correct me if I&#x27;m wrong. If you have any additional pointers regarding RTMP security, I would be highly interested!<p>Also, as others pointed out, SRT may be just around the corner. I think we&#x27;re in for some interesting times as LL-DASH&#x2F;CMAF and similar technologies are more widely supported. Additionally, there are interesting projects like [3] going the WebRTC route for delivering low latency streams.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;arut&#x2F;nginx-rtmp-module" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;arut&#x2F;nginx-rtmp-module</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;shaka-player" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;shaka-player</a><p>[3] <a href="https:&#x2F;&#x2F;www.ovenmediaengine.com" rel="nofollow">https:&#x2F;&#x2F;www.ovenmediaengine.com</a>')