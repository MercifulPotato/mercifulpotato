Item(by='candiddevmike', descendants=None, kids=[24975761], score=None, time=1604368974, title=None, item_type='comment', url=None, parent=24975509, text='&gt; * our enterprise db was bursting at the seams containing Literally Everything. Now, every part of the split up monolith has it&#x27;s own self contained data store tailored to what is appropriate for that particular thing. (some use MariaDB, others Redis etc etc)<p>Why do you consider an enterprise DB &quot;bursting at the seams&quot; to be a bad thing?  Isn&#x27;t that what enterprise DBs are built for?  Seems like you traded having everything in one large database to having everything scattered in different databases.  You probably sacrificed some referential integrity in the process.<p>&gt; * developing, building, testing and deploying took ages. Eg if I only needed to capture some new detail about a business partner user (eg their mfa preference app vs sms) I would still have to do deal with the unwieldy monolith. Now, I can do it in the dedicated business partner user service, which is much easier and faster.<p>You traded a clean codebase with a solid toolchain for probably a template repository that you hope your users use or everyone is reinventing some kind of linting&#x2F;testing&#x2F;deployment toolchain for every microservice<p>&gt; * the whole monolith, including business partner facing operations, could go down because of issues to do with completely unrelated, non critical things like eg internal staff vacation hours.<p>This could apply to any software.  Sure, a monolith can have a large blast radius, but I can guarantee one of your microservices is critical path and would cause the same outage if it goes offline.<p>&gt; The few callers that do need to obtain both pieces of data just make concurrent calls to both and them zip them into a single result.<p>Almost like a database join?')