Item(by='djs55', descendants=None, kids=None, score=None, time=1604485047, title=None, item_type='comment', url=None, parent=24983247, text='I do OCaml programming on Windows and I found that it was a bit confusing at first with too many different ports and install options. However once I settled on <a href="https:&#x2F;&#x2F;github.com&#x2F;fdopen&#x2F;opam-repository-mingw" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;fdopen&#x2F;opam-repository-mingw</a> I was fine. To my surprise I was able to extend existing C bindings to use Win32 APIs fairly painlessly (for example <a href="https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;mirage-block-unix&#x2F;commit&#x2F;7cf658f8a9956c51f053b39eb397b3628b7ee207" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mirage&#x2F;mirage-block-unix&#x2F;commit&#x2F;7cf658f8a...</a> ) . I did have problems with I&#x2F;O scalability at first but I fixed these by using libuv via <a href="https:&#x2F;&#x2F;github.com&#x2F;fdopen&#x2F;uwt" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;fdopen&#x2F;uwt</a> . The core compiler and runtime are rock solid on Windows. Docker (where I work) ships OCaml&#x2F;Windows binaries to lots and lots of desktops with no problem.<p>Apart from the too-many-ports problem, I think the main remaining problem is that too many 3rd party libraries require Unix-isms to build, like shell scripts. This necessitates the presence of cygwin for build (but not at runtime). However the ongoing &quot;dune-ification&quot; of the OCaml universe should help fix this since dune can do everything directly from OCaml code. I&#x27;m really looking forward to being able to open a powershell window and type &quot;git clone&quot;; &quot;dune build&quot; and have everything just work.')