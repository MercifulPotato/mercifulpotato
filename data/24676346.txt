Item(by='quietbritishjim', descendants=None, kids=[24676938, 24677395, 24677338], score=None, time=1601782357, title=None, item_type='comment', url=None, parent=24676186, text='&gt; If your child node has unique name among its siblings and does not contain nested nodes, then it&#x27;s an attribute. Otherwise it&#x27;s an element. Seems pretty obvious to me.<p>That is really not what attributes are for. I feel a bit of a fraud posting that because I&#x27;m not an XML expert and so not really clear what they actually are for. (This reenforces the parent&#x27;s point: you need to be an expert to know what such a fundamental feature is for.) I remember it&#x27;s something like &quot;something used to help interpret the actual value&quot; e.g. units of measurement. But most of the time, even if it&#x27;s non-repeating with no children, you&#x27;re supposed to use elements rather than attributes.<p>One problem here is that attributes are so much more compact (and so often easier to read) than elements that it&#x27;s tempting to use them in places where you ought to use an element (and many people over time have given in to that temptation). Another problem is that the distinction between attributes and elements is almost never useful. That was the parent comment&#x27;s point by the looks of things.<p>&gt; The fundamental issue with XML is its impedance mismatch with common data structures<p>That&#x27;s probably part of it, but I think at least as problematic is that it has many features that most of the time you don&#x27;t need and don&#x27;t want to have to care about. Things like CDATA (also mentioned by the parent comment), custom entities, external entities, DTDs (which can be inline in XML files so you need to know all about DTDs to understand XML properly). That&#x27;s why there are all sorts of weird XML vulnerabilities that JSON doesn&#x27;t have. Did you know you can make an XML file that reads your &#x2F;etc&#x2F;passwd file when it&#x27;s parsed? That is not an issue with JSON.')