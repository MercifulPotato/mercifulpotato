Item(by='simias', descendants=None, kids=[24748303], score=None, time=1602443536, title=None, item_type='comment', url=None, parent=24748102, text='&gt;First, bit field descriptors is a huge pain - where, in C, you would define an enum for the task, there isn&#x27;t a real equal in vanilla Rust, other than a litany of constant variables.<p>Have a look at the bitlags crate, I use it a lot for this purpose: <a href="https:&#x2F;&#x2F;docs.rs&#x2F;bitflags&#x2F;1.2.1&#x2F;bitflags&#x2F;" rel="nofollow">https:&#x2F;&#x2F;docs.rs&#x2F;bitflags&#x2F;1.2.1&#x2F;bitflags&#x2F;</a><p>You still have to give the literal value of the field instead of using the auto-incrementing enum but that&#x27;s how I do it in C as well, I find it too error-prone otherwise. And how do you deal with fields that take up multiple bits anyway?<p>&gt;Second, the over-reliance on nightly is a tough sell for - having inline asm gated makes it very hard.<p>I agree 100%. I can understand them prioritizing higher level system programing and taking the time to do asm right, but it does make it a bit of a pain to do bare metal Rust at the moment.<p>&gt;Third, while format is great, it&#x27;s also very heavyweight. Not having (AFAIK) variadic arguments is hard, and there isn&#x27;t really an equal to printf.<p>What do you have in mind here? format! is strongly typed and a lot more flexible than printf. You can&#x27;t even print custom structs with printf... Actually even printing standard types like uint32_t and friends require macro soup to work portably.<p>Variadic arguments are pretty much a no-go for a strongly typed, static language since you would need a lot of trickery to get it to work safely under the hood (hence format! being a macro).<p>But what use case do you have for printf that can&#x27;t be implemented with println!&#x2F;format! and friends?')