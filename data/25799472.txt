Item(by='spiffytech', descendants=None, kids=[25799862, 25800594, 25799662, 25799728], score=None, time=1610764899, title=None, item_type='comment', url=None, parent=25797674, text='I&#x27;ve been reviewing this problem lately for a project, and I&#x27;ve settled on a solution that feels elegant and versatile which this article doesn&#x27;t cover: lexicographical sort.<p>I&#x27;m using Mudder.js to do it, but the algorithm is straightforward. Define an alphabet (e.g., A-Z). Every time an item is inserted&#x2F;repositioned, its sort order is given the midpoint between the sort values of its two neighbors. So the first item is given the sort value M (midpoint between A and Z). Inserting before that item gets G (between A and M). Inserting between these two items gets J (between G and M).<p>Once you run out of letters between two sort values, the algorithm tacks a digit onto the sort value of the item ahead of it. So inserting between M and N yields MM. If you do this enough times in a pathological pattern and wind up with some long string of characters you can reflow your list and rebalance everything out evenly (though that&#x27;s strictly an optimization for storage space&#x2F;bandwidth, and not a requirement for the algorithm to function).<p>This all sorts perfectly with ORDER BY etc., supports an number of repositions bounded only by your storage space, and doesn&#x27;t require arbitrary-precision decimal datatypes or fraction handling.')