Item(by='peter_d_sherman', descendants=None, kids=None, score=None, time=1611520704, title=None, item_type='comment', url=None, parent=25895669, text='&gt;&quot;Common Lisp is a battle-worn language designed for practical programming. It is full of ugly warts and compatibility hacks -- quite the opposite of Scheme&#x27;s elegant minimalism. But it is also much more featureful when taken for itself.<p>Common Lisp has bred a relatively large ecosystem of portable libraries. You can usually switch implementations at any time, even after application deployment, without too much trouble. Overall, Common Lisp is much more uniform than Scheme, and more radical language experiments, if done at all, are usually embedded as a portable library rather than defining a whole new language dialect. Because of this, language extensions tend to be more conservative, but also more combinable (and often optional).&quot;<p>[...]<p>&quot;Summing up,<p><i>Scheme is a more elegantly designed language.</i><p>It is primarily a functional language with some dynamic features. Its implementations represent various incompatible dialects with distinctive features. Common Lisp is a fully-fledged, highly dynamic, multi-paradigm language with various ugly but pragmatic features, whose implementations are largely compatible with one another. Scheme dialects tend to be more static and less interactive than Common Lisp; Common Lisp implementations tend to be heavier and trickier to install.&quot;<p><i>Discuss...</i>')