Item(by='Geminidog', descendants=None, kids=[25513793], score=None, time=1608661810, title=None, item_type='comment', url=None, parent=25508872, text='Yeah technically it&#x27;s not point free. But technically nothing can truly be point free just like nothing can ever be truly purely functional.<p>In purely functional programming your IO and state has to live somewhere just like how your points in point free programming still have to exist on the function call.<p>A function that takes multiple arguments introduces extra points to your program similar to introducing extra IO calls to your purely functional program. These points are inevitable additions to your program. The philosophy remains point free however.<p>Another way to think about it is that every parameter in a point free program is tied to a point somewhere up the pipeline. If you introduce a function with multiple arguments, that extra argument will still need to be tied to a point either right now or up some other pipeline.<p>So either you curry in a point into that extra parameter or you curry in the result of another pipeline.<p>A good way to think of the point free style is a series of pipes flowing in one direction, from left to right. All pipes segments must be eventually connected to a source and eventually flow to an output.<p>A function with 2 parameters is a T junction within this system with 2 inflows and one outflow. No matter how you configure your network of pipes; points need to live to the at the source and output of this network either as IO or actual state.  There is no &quot;point&quot; in creating a network of pipes that isn&#x27;t connected to a source and an output.<p>When you introduce a new T junction into this network of pipes, you will inevitably need to connect these inflows to points at the source of the pipe network. There&#x27;s no way around it.')