Item(by='throwaway894345', descendants=None, kids=[25626164, 25626967, 25626485], score=None, time=1609714087, title=None, item_type='comment', url=None, parent=25625362, text='I agree with this. Benchmark code differs from real code in in that it approximates the performance ceiling for a language implementation; it&#x27;s not &quot;ordinary code&quot; or even &quot;somewhat optimized&quot; but usually the most optimal code one can conceive of with little respect paid to competing concerns, like maintainability. Rust aspires to make idiomatic, maintainable code almost as performant as benchmark code by way of zero-cost abstractions; probably more so than any other language, including C and C++, and all the while keeping the ceiling high relative to other languages.<p>Unfortunately, I&#x27;m still of the opinion that &quot;idiomatic Rust&quot; is quite a lot harder to write than idiomatic Go or C# or etc, and many applications absolutely index on developer velocity and performance and quality are &quot;nice-to-haves&quot;. Many companies are making money hand over fist with Python and JavaScript, and Go and C# are quite a lot more performant and typesafe than those languages already; Rust is better still in these areas, but returns diminish. If C# and Go preclude 95% of the errors found in Python and JS, it&#x27;s not worth trading tens or hundreds of percents of developer velocity for that extra 4% or so improvement in quality (a Go developer could recoup a bit more of that 4% by writing tests in the time they save over Rust).<p>Of course, this is all subjective, and I&#x27;ve met smart people who argue with a straight face that Rust is better for developer velocity than languages like Go, so YMMV.')