Item(by='jandrewrogers', descendants=None, kids=None, score=None, time=1607026903, title=None, item_type='comment', url=None, parent=25281377, text='Pervasive end-to-end hiding of memory cache misses using coroutines is a standard architectural feature of some database engines. It follows naturally from I&#x2F;O latency hiding; systems designed like the paper suggests are well over a decade old in industry. However, the devil is in the details of the scheduler design when it comes to making the performance benefits robust in real systems.<p>The scheduler design is non-trivial because it is an inference engine that feeds back into the thing it is making inferences about, and there are temporal locality optimizations well-worth doing aside from hiding cache misses. A naive scheduler, like round-robin, can inadvertently cause the thing it prefetched to be evicted under real workloads. There are many examples of how a cache miss hiding design can suddenly turn into a cache miss creating design when the workload patterns shift modestly. At the same time, the scheduling logic, which is theoretically hard, needs to be simple enough that the cost is worth it. And you also need to manage tail latencies in real designs; robust and highly optimal schedulers in terms of aggregate throughput have a tendency to have high worst-case scheduling latencies. The tradeoff space is very complex and interacts with real design constraints in subtle ways.<p>Even if you address all of that in the scheduler design, the efficacy of these optimizations are sensitive to the physical architecture of the CPU cache, which varies widely. The scheduling algorithms are implicitly making assumptions about the design and specification of the target silicon.<p>tl;dr: This is a mature database technique with real benefits but robust real-world implementations are expensive to design. The code is simple, the cost is in being forced to think through the implications and edge cases so that your execution schedule doesn&#x27;t get stuck in a pathological equilibrium.')