Item(by='theamk', descendants=None, kids=None, score=None, time=1608952672, title=None, item_type='comment', url=None, parent=25538610, text='Are you saying you want &quot;sudo&quot; to use a a password entry mechanism which cannot be spoofed or intercepted? Something very similar to this is pretty easy on Linux.<p>If you are willing to pay a little, requiring Yuibikey press for sudo is supported [0].<p>If you don&#x27;t want extra hardware, you can use &quot;pam_exec&quot; PAM method to read second factor (like PIN) from &quot;&#x2F;dev&#x2F;input&#x2F;by-id&#x2F;...&quot;. This&#x27;ll read from specific input device directly, bypassing GUI session or any other processes controlled by non-root user. Or use a &quot;chvt&quot; call instead, and you can have a secure display output too.<p>But while this will prevent &quot;evil sudo&quot; from capturing your password, it won&#x27;t prevent &quot;evil sudo&quot; modifying the commands you want executed (the same problem exists with Windows SAK &#x2F; Escalation prompt: you know you are approving some action, but it is not clear which action exactly).<p>I guess Linux has a unique advantage in that &quot;sudo&quot; is designed for user-readable commands -- so in many cases, confirming the command on un-tamperable output will be enough for safety (for example, &quot;sudo apt install foo&quot; will be safe this way). But you&#x27;d still want to make sure you are vigilant at all times -- if you have a habit of typing &quot;curl ... | sudo sh&quot;, then no type of SAK process will save you from evil sudo.<p>[0] <a href="https:&#x2F;&#x2F;support.yubico.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;360016649099-Ubuntu-Linux-Login-Guide-U2F" rel="nofollow">https:&#x2F;&#x2F;support.yubico.com&#x2F;hc&#x2F;en-us&#x2F;articles&#x2F;360016649099-Ub...</a>')