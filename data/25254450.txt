Item(by='shepmaster', descendants=None, kids=[25254478], score=None, time=1606748718, title=None, item_type='comment', url=None, parent=25253471, text='As the author of [SNAFU], another error handling library, this is how I&#x27;d encourage it:<p><pre><code>    use snafu::{Snafu, ResultExt};\n    \n    #[derive(Debug, Snafu)]\n    enum Error {\n        #[snafu(display(&quot;Failed to read {}&quot;, filename))]\n        ReadInput { filename: String, source: std::io::Error },\n    }\n    type Result&lt;T, E = Error&gt; = std::result::Result&lt;T, E&gt;;\n    \n    fn main() -&gt; Result&lt;()&gt; {\n        let filename = &quot;input.txt&quot;;\n        let s = std::fs::read_to_string(filename).context(ReadInput { filename })?;\n        println!(&quot;{}&quot;, s);\n        Ok(())\n    }\n    </code></pre>\nUnfortunately, this uses the default `Debug` formatting, so what is printed to the user in this `main` example is still less-than-ideal:<p><pre><code>    Error: ReadInput { filename: &quot;input.txt&quot;, source: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; } }\n</code></pre>\nI encourage using the `Display` formatter or something more complete.<p>I find that doing this rigorously creates what I call a &quot;semantic backtrace&quot;, where the linked list of (error, context, underlying cause) provides a great deal of insight into the problem.<p>The next release of SNAFU will incorporate something that allows for stringly-typed errors:<p><pre><code>    use snafu::{ResultExt, Whatever};\n    \n    type Result&lt;T, E = Whatever&gt; = std::result::Result&lt;T, E&gt;;\n    \n    fn main() -&gt; Result&lt;()&gt; {\n        let filename = &quot;input.txt&quot;;\n        let s = std::fs::read_to_string(filename)\n            .with_whatever_context(|_| format!(&quot;couldn&#x27;t read {}&quot;, filename))?;\n        println!(&quot;{}&quot;, s);\n        Ok(())\n    }\n</code></pre>\nYou will also be able to combine stringly-typed errors with the structured errors.<p>Other features of the currently-released SNAFU:<p><pre><code>    - Custom error types\n    - Backtraces\n    - Extension traits for Results &#x2F; Options &#x2F; Futures &#x2F; Streams\n    - Suitable for libraries and applications\n    - no-std compatibility\n    - Generic types and lifetimes\n</code></pre>\n[SNAFU]: <a href="https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;snafu" rel="nofollow">https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;snafu</a>')