Item(by='chubot', descendants=None, kids=None, score=None, time=1604083012, title=None, item_type='comment', url=None, parent=24944496, text='The funny thing is that all of these examples are valid Oil syntax [1],  since I added Ruby-like blocks with { } to shell.  A block can be evaluated to a JSON-like data structure, e.g. this:<p><pre><code>    server foo {\n      port = 80\n      root = &#x27;&#x2F;&#x27;\n      section bar {\n        ...\n      }\n    }\n</code></pre>\ncould become:<p><pre><code>    {name: &quot;foo&quot;, port: 80, root: &quot;&#x2F;&quot;, &quot;bar&quot;: { ... } }\n</code></pre>\nAnd you can use if statements and loops to generate repetitive structures!  Rather than using textual templating.<p>(The syntax is all there, but the evaluation is incomplete -- contact me if you want to help, and influence the API&#x2F;language design)<p>-----<p>The shell is a logical place for configuration, because shells start processes that need configuration.  Configs are often passed in as environment variables or flags.<p>The syntax can support:<p><pre><code>    title &quot;Hello World&quot;  # like SDLang\n</code></pre>\nin addition to<p><pre><code>    title = &quot;Hello World&quot;\n</code></pre>\nalthough I&#x27;m still wondering if we should enforce one or the other for consistency.  The latter is more flexible in Oil because you have arbitrary expressions on the RHS.<p>[1] <a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;latest&#x2F;doc&#x2F;idioms.html" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;latest&#x2F;doc&#x2F;idioms.html</a><p><a href="https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;6oxpe3&#x2F;s_lot_yaml#c_mje209" rel="nofollow">https:&#x2F;&#x2F;lobste.rs&#x2F;s&#x2F;6oxpe3&#x2F;s_lot_yaml#c_mje209</a>')