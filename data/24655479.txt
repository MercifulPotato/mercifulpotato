Item(by='dwrodri', descendants=None, kids=[24659658], score=None, time=1601581942, title=None, item_type='comment', url=None, parent=24649959, text='Some of the most fun I have as a graduate student in computer architecture is trying to write the fastest possible code snippets for complicated chips. Working your way &quot;down&quot; from C&#x2F;C++ is a great place to start, assuming you&#x27;re familiar with either of those languages.<p>Take some collision detection algorithm for a game or some linear algebra kernel used in your machine learning model of preference.<p>If you&#x27;re referencing a library that&#x27;s already high-performance (e.g. Intel&#x27;s MKL), what does the assembly look like? What&#x27;s happening to your caches as the assembly is being executed? What are the trade-offs your compiler has to make when it comes to optimizations? How does Intel&#x27;s compiler output differ from Clang? I mention these compilers in particular because they provide optimization reports.<p>My advisor guided me through &quot;Computer Architecture: A Quantitative approach&quot; by Hennessy &amp; Patterson and it&#x27;s been very eye-opening to pull back the curtain on the last logical layer of &quot;magic&quot; I had never fully understood. There&#x27;s an enormous of amount of circuitry in the latest chip designs dedicating predicting the outcome of pending work so that we can &quot;hide&quot; the latency introduced by having to wait for data to arrive into the CPU core all the way from RAM. The way an instruction set architecture and compiler (e.g. x86-64, AArch64) unite to abstract away the work underneath is really one the coolest technical feats of the 20th century. Hopefully this inspires you (or anyone reading this) to go explore it. I think if you can document your exploration and communicate your findings effectively then that would be a great first step towards getting your bearings at a high level of how the &quot;chip industry&quot; operates.<p>As others here have mentioned, the chip industry is an enormous field and you could build an entire career around just the physical&#x2F;mat.sci. side of fabrication for these chips. The physical side is still somewhat foreign to me, but I hope to explore it more in the years to come.')