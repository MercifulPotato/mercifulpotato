Item(by='nwallin', descendants=None, kids=[25287061, 25288994], score=None, time=1606982620, title=None, item_type='comment', url=None, parent=25286218, text='I want a faster computer so that Visual Studio&#x2F;MSVC compiles the code I write faster. I don&#x27;t need a faster computer so that the application I develop runs faster. I&#x27;m already running an unoptomized debug build of our application which takes an order of magnitude of time longer to execute any given operation.<p>I live in a world where I cannot make performance evaluations based on my benchmarks on my &quot;normal&quot; build- I have to switch to a release build and recompile everything in order to make performance determinations. This led to my first personal experience of &quot;premature optimization is the root of all evil&quot;. I implemented a new feature, performance was completely fucking untenably awful, so I threaded it. Performance was still awful, but it was 7x better because I has 7 free cores (8 total cores) to play with. I thought great, I tested, I found the bottleneck, I bandwidthed the fuuuck out the bottleneck, problem solved. A few weeks later I was testing on a release build, and in the same feature, the aforementioned bottleneck was using roughly 5% of the total CPU usage. Because the optimizer just - fixed all the slow stuff. The bottleneck that I threaded the shit out of didn&#x27;t contribute significantly to the total CPU usage of the release build, while it was 87.5% or whatever of the debug build. And in the release build, I&#x27;m pretty sure all the threading overhead I added took away any and all benefit.<p>The thing I learned from that experience was to ignore all performance problems unless I observe them in a release build. If I had a faster computer, it would be <i>significantly</i> easier for me to switch back and forth between release and debug builds. And I would thus be able to observe performance problems easier.<p>I imagine there&#x27;s a significant divide between front end web development and desktop application development here.')