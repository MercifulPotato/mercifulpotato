Item(by='gwd', descendants=None, kids=[24696442], score=None, time=1601903202, title=None, item_type='comment', url=None, parent=24684174, text='It really depends on your context.<p>On the x86 side, Xen has two unique advantages over KVM in terms of security.<p>The first is the mature XenProject Security Response process [1].  All known Xen-related security issues, even DoSes, are announced and documented, so it&#x27;s easy to find out when you need to patch your software.  If you&#x27;re a cloud provider, or make software with Xen as a component, you can be notified under embargo before the public announcement, so you can have your cloud patched &#x2F; have a software patch tested and ready to download on the day the announcement goes public.<p>KVM doesn&#x27;t have an equivalent process.  Many high-profile KVM issues are issued under embargo on a mailing list, but 1) many are not 2) only distros are allowed to be on the list.<p>The second thing on the x86 side are some additional defense-in-depth security measures, including driver domains and device model stub domains.  Driver domains allow you to run device drivers in a completely separate VM; so (for instance) a privilege escalation in iptables would allow an attacker only to control the bridge and the network device, as opposed to being able to take over the whole system.  Similarly, device model stubdomains run QEMU (or the emulator of your choice) in a separate VM; which means if there&#x27;s a privilege escalation bug in QEMU, you&#x27;ve just broken into Yet Another VM; whereas in KVM you&#x27;re now inside a Linux host process.  KVM processes inside Linux can be restricted with things like SVirt, but it&#x27;s fundamentally more difficult to isolate a process than a VM.<p>These are some of the reasons why QubesOS [2] and OpenXT [3] both rely on Xen.<p>On the embedded side, the distinctive that Xen has over KVM is that it&#x27;s a microkernel-style hypervisor.  This leads to a couple of advantages.<p>First, Xen itself boots in less than a second, and using the &quot;dom0less&quot; feature, can direct-boot any number of other domains from the same initrd [4].  This means that if none of your VMs are Linux, you don&#x27;t need to run Linux at all -- you can boot up all of your VMs and have them up and running in hundreds of milliseconds; or, if you need a single VM up and running quickly, you can start that one along with dom0, and start your other ones from dom0.<p>Secondly, Xen is small enough to be safety certified.  This is possible for a microkernel-style hypervisor like Xen, particularly with the &quot;dom0less&quot; direct-boot feature, in a way that would be impossible for KVM, since you&#x27;d have to not only certify enough of the Linux kernel, but all of the userspace which is running to start your other VMs.<p>This is why Xen has been making significant inroads into the embedded space.  It&#x27;s been put on rockets [5], and was chosen by ARM to be part of their Automotive Reference Platform [6].<p>If you just want to run the occasional VM on your x86 desktop, then KVM is likely to be a better bet: There won&#x27;t be a significant performance difference, and it&#x27;s less effort to set up.<p>But if you&#x27;re making a product in which you want to embed virtualization, Xen has a lot of advantages.  This to me is actually why the Xen for RPi is so interesting: Because actually 44% of RPi sales are actually for industrial use cases, and this port expands the market both for Xen and RPi.<p>Obviously there are lots of other strengths and weaknesses, but that should give you an idea.<p>[1] <a href="https:&#x2F;&#x2F;xenproject.org&#x2F;developers&#x2F;security-policy&#x2F;" rel="nofollow">https:&#x2F;&#x2F;xenproject.org&#x2F;developers&#x2F;security-policy&#x2F;</a>\n[2] <a href="https:&#x2F;&#x2F;www.qubes-os.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.qubes-os.org&#x2F;</a>\n[3] <a href="https:&#x2F;&#x2F;openxt.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;openxt.org&#x2F;</a>\n[4] <a href="https:&#x2F;&#x2F;xenproject.org&#x2F;2019&#x2F;12&#x2F;16&#x2F;true-static-partitioning-with-xen-dom0-less&#x2F;" rel="nofollow">https:&#x2F;&#x2F;xenproject.org&#x2F;2019&#x2F;12&#x2F;16&#x2F;true-static-partitioning-w...</a>\n[5] <a href="https:&#x2F;&#x2F;www.embedded-computing.com&#x2F;guest-blogs&#x2F;the-final-frontier-why-engineering-firm-dornerworks-is-taking-xen-hypervisor-to-space" rel="nofollow">https:&#x2F;&#x2F;www.embedded-computing.com&#x2F;guest-blogs&#x2F;the-final-fro...</a>\n[6] <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=boh4nqPAk50" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=boh4nqPAk50</a>')