Item(by='ChuckMcM', descendants=None, kids=[24925088], score=None, time=1603924509, title=None, item_type='comment', url=None, parent=24924100, text='Okay, if somewhat harsh :-).<p>As someone with north of 15 programming languages that I consider myself &quot;fluent&quot; in, albeit some latency involved in ones I&#x27;ve not used for a while, I always look for the idiomatic expression of computation. It is the difference between &quot;writing FORTRAN in &lt;x&gt;, and writing an algorithm in &lt;x&gt;.&quot;<p>One of main the reasons I posted the question is that I found that design patterns I expected to be there, were not there, or were not idiomatic, and for whatever reason I am reasonably good at figuring out when something is &quot;not quite right.&quot;<p>That said, I think it is unfair to characterize the choices of any language designer as either ignorant or wrong. As someone who participated in the design of Java I can assure you that the team &quot;understood&quot; why C++ did what it did. During that development, if there was any confusion, Guy Steele, whose office was three down from mine, would eloquently explain it so that everyone could understand it. That is not to say there weren&#x27;t different opinions about &quot;better&quot; ways and &quot;worse&quot; ways to do things, Bill Joy was never a big fan of the Java choices and often took the opposing view across from Gosling. The language that Bill was designing was called &#x27;Self&#x27; and it embodied <i>his</i> design choices, just as Java embodied Jame&#x27;s design choices.<p>Me, as a systems guy, could really care less if Boolean was a first class type or just a uint1. I just want to write code that works.')