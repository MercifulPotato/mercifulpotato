Item(by='fullstop', descendants=None, kids=[24806131], score=None, time=1602879680, title=None, item_type='comment', url=None, parent=24801665, text='I&#x27;ve used Buildroot for the last 8 years and Yocto&#x2F;OE for the last year.<p>There is a significantly steeper learning curve for Yocto when compared to Buildroot.  Buildroot is faster for the initial build, but often slower than Yocto after the initial build.<p>Here&#x27;s what I like about Yocto:<p>1. It forces you to be organized, everything has a home and things can&#x27;t conflict with each other.<p>2. By using Yocto&#x27;s shared state cache, you can have one central build server and automatically fetch pre-built artifacts on other computers.  With this I can get a developer hooked up with everything that they need to build a full system image on their computer in just a few minutes -- and completely build the image at that time.<p>3. I am confident that incremental changes are built correctly.  If you change a build-time parameter of a package in Buildroot, things which depend on that package are not rebuilt.  This is not the case with Yocto.  This can also result in unfortunate rebuilds of many packages just because of a minor change to, say, glibc.  I know that they do not need to be rebuilt but Yocto does not.<p>4. Buildroot puts built items in a single staging directory.  Package install order differences mean that you can overwrite files accidentally.    Consider &#x2F;usr&#x2F;include&#x2F;debug.h in two different packages, or something like that.<p>If you are not explicit with dependencies, the build may actually succeed but it may not be deterministic.  If package A happens to be built before package B, you&#x27;re golden.  This does not always happen, and sometimes this is not found until you do a clean and a rebuild.  Yocto forces you to be explicit -- the build tree only includes artifacts for recipes which have explicitly been defined.<p>5. Yocto can use the same tree and shared state cache to build multiple images for a given product without having to clean the world.<p>I loved buildroot -- it was fast, nimble, and easy to use.  It also lets you cut corners and find yourself in situations where builds would unexpectedly fail after a clean.  I am also very happy that I took the time to learn how to effectively use Yocto.')