Item(by='nawgz', descendants=None, kids=None, score=None, time=1611598093, title=None, item_type='comment', url=None, parent=25881193, text='&gt; I really wish I saw what everyone else sees in TypeScript<p>&gt; It&#x27;s surprisingly common for me to wrrite code that compiles but crashes at runtime<p>Well, is it also common for you to allow `any` in your code?<p>TypeScript is strongest when it can type-check your entire code. If your API endpoints return data that doesn&#x27;t match your type (or at any other external data load point), TypeScript clearly can&#x27;t help with that. I&#x27;m actually quite sure that if you have this kind of behavior in TypeScript, your other JS-targeting languages would fail too; you have just mis-typed something.<p>&gt; Other, better<p>Yes, you&#x27;re not biased<p>&gt; JS-targeting languages manage to allow me to retain type-level features at runtime<p>What does this mean? They compile to put a magic key `_type` on an object?<p>&gt; while also outputting leaner, faster, and safer code<p>I highly dispute your claims. You&#x27;re building JS still, it&#x27;s not going to be magically better - this just means you write bad TS. Show me some numbers or some code to make this claim.<p>&gt; it feels like a huge push for the right reasons and in the worst possible direction<p>Given that you started your complaint with &quot;no one documents their types&quot;, I am not so inclined to listen to your opinion. Types <i>are</i> the documentation. Interface names, key names, types, full autocorrect interacting with any objects, generic type support, reasonably smart type solver &#x2F; caster, great error messages; these are all things TypeScript offers for learning a thin extension of JS.<p>&gt; I&#x27;m not even going to touch how visually noisy and distracting I find the C#-style type syntax to be<p>Why not? I would love to hear more ridiculous complaints which only make sense thru your personal lens and have no justification or empirical evidence behind them')