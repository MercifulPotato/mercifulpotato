Item(by='com2kid', descendants=None, kids=[25642943], score=None, time=1609803517, title=None, item_type='comment', url=None, parent=25638731, text='&gt; While not perfect, given its copy-paste compatibility with C, you can opt-in into bounds checking by using the STL data types, or similar.<p>I&#x27;ve heard of abuses of templates to add something that resembles proper ranged types, but it is not a path I&#x27;d want to go down.<p>Partly, because C++ templates are not an excuse for a proper type system, even if they are a tool that can be used to force a type system into the language.<p>A proper type system lets you do things like add centimeters and meters together, divide by seconds, and pop out a proper unit and ensure no overflow happens.<p>A proper type system lets you <i>easily</i>, without the visual noise or compile time hit that templates have, add bounds checking wherever it is appropriate.<p><pre><code>    type Age is Integer range 0 .. 130\n    type Day_Of_Week is (Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday);\n    subtype Working_Day is Day_Of_Week range Monday .. Friday;\n\n</code></pre>\nTake a look at <a href="https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Type_System#Defining_new_types_and_subtypes" rel="nofollow">https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Type_System#De...</a><p>For all the flak it gets, Ada did this right <i>long</i> ago. And a huge part of all this is compile time only, and you can opt in&#x2F;out of the runtime checks as performance dictates.<p>I&#x27;d kill for a proper &quot;milliseconds&quot; type everywhere, one that can only have other milliseconds added to it. And then double the fun with a &quot;seconds&quot; type, and a language that keeps track of which is which for me. Why the heck am I writing timeInMs or timeInSeconds still?<p>Subtyping integers should be a basic and primitive operation in any modern language.')