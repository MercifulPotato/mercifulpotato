Item(by='lilyball', descendants=None, kids=[25665713], score=None, time=1609977464, title=None, item_type='comment', url=None, parent=25661392, text='Do you have any insight as to why libdispatch added support for this new clock internally (in the last year or two), but did not expose it in any public API? In C I can manually construct a dispatch_time_t that will use make libdispatch use CLOCK_MONOTONIC_RAW¹, if I&#x27;m willing to make assumptions about the format of dispatch_time_t² (despite libdispatch warning that the internal format is subject to change³). And I can&#x27;t even do this in Swift. It would be really useful to have this functionality, so I&#x27;m mystified as to why it&#x27;s hidden.<p>¹Technically it uses mach_continuous_time() first if available (which appears to be equivalent to CLOCK_MONOTONIC_RAW), then clock_gettime(CLOCK_BOOTTIME, &amp;ts) on Linux, then clock_gettime(CLOCK_MONOTONIC, &amp;ts), then some other API for Windows.<p>²Conveniently enough the value that is equivalent to DISPATCH_TIME_NOW using the monotonic clock is just INT64_MIN, at least in the current encoding.<p>³Swift makes assumptions about the internal format of dispatch_time_t so I don&#x27;t know if it actually can meaningfully change. Newer versions of Swift now use stdlib on the system, but any app built with a sufficiently old version of Swift still embeds its own copy of the stdlib. Granted, additions (like the monotonic clock) should be fine, as the Swift API does not actually bridge from dispatch_time_t so it only ends up representing times it has APIs to construct. Since it doesn&#x27;t have APIs to construct monotonic times, they won&#x27;t break it.')