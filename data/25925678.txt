Item(by='Silhouette', descendants=None, kids=None, score=None, time=1611736184, title=None, item_type='comment', url=None, parent=25925338, text='A lot of new tools were indeed invented to solve real problems, albeit not necessarily real problems shared by as many people as subsequently adopt those tools.<p>But there is also a huge amount of reinvention because, as mstipetic was saying, a lot of developers just don&#x27;t study their subject any more. It&#x27;s so superficial, rarely learning lessons from history.<p>In particular, that&#x27;s how we get the modern world of web development, with new tools and frameworks every few months that do require retraining but don&#x27;t contribute many new <i>ideas</i>. This is an industry where the dominant programming language for the front end literally had no standard concept of modules until relatively recently. To this day, almost all of the main tools like building, testing and static analysis usually have at least one extra layer of transpilation complexity on top, and usually it has to be configured separately for each tool. The tools themselves are often relatively basic, with routine (in the rest of the programming world) optimisations like tree shaking regarded as some sort of incredible advance. The same goes for the software architecture patterns used by the big front-end libraries and frameworks. And setting all of this up has become so complicated that there are now tools to scaffold the project and set up the other tools that orchestrate the other tools, which I really wish was a joke but is literally true.<p>Unfortunately, I think the real root cause of the rot is money. There is so much cash now in certain parts of the industry that it is undeniably a successful career strategy for developers to go job-hopping and collecting buzzwords working at those places, even if they are never really learning much of substance or building much of actual, lasting value. It turns out that huge numbers of people are willing to pay, directly or indirectly, for junk. And so writing junk and not caring is an effective business model.<p>The silver lining is that it&#x27;s a huge industry and there is still room for quality as well, so those who do make the effort to build better software can at least make a living doing it, even if the rewards are more in satisfaction than greater financial compensation.')