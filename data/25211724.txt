Item(by='didibus', descendants=None, kids=[25212338], score=None, time=1606325327, title=None, item_type='comment', url=None, parent=25202832, text='&gt; If I build a compiler and test a thousand constants for default configuration options and choose the ones that perform the best<p>What if that was automated in the build? I had assumed the quote meant that it would be, not that they&#x27;d manually run a few random cases and manually pick the best. I thought it be automated, like given a new course, you&#x27;d run some training routine where the machine would play the course say 100 times each time choosing random coefficients and at the end, it&#x27;ll take the ones from the pass that resulted in the quickest playthrough, and those would say go in some config file and become the coefficient used by the AI CPU race cars for that course.<p>To me this is machine learning. Especially if you crank up that 100 to 1 million or 1 billion. At that point, it&#x27;s still something that only a machine could do, I couldn&#x27;t realistically try 1 billion random coefficients for the ones that result in the fastest playthrough.<p>So in effect, I see the machine is learning which coefficients perform better for a given course. If it tried 1 billion, it learned that out of 1 billion different possible coefficients, some particular set was the best.<p>&gt; there&#x27;s no feedback loop, the machine doesn&#x27;t &quot;learn&quot; anything<p>So that&#x27;s interesting, because if my prior statement is not to be considered machine learning. My next question is what&#x27;s the criteria to go from the above to machine learning proper? So it seems that it could be the learning has to be a feedback loop. So each attempt at learning must take something away from the previous.<p>I&#x27;d be okay with this definition. And now I&#x27;m thinking what&#x27;s the most minimal modification I can make to meet this new definition.<p>What if as it tried random coefficients, it remembered the ones it tried prior? And what if it made sure that no new attempt at a random set of coefficients had already been attempted before? This isn&#x27;t super refined, no heuristic to what are the best coefficients to try next given the ones tried prior like say what linear regression would accomplish. But it still meets the definition. It starts random on the first round, and the next round is no longer truly random, since it can&#x27;t pick the previous&#x27;s round coefficients again. So at least it&#x27;s descending along the set of possible coefficients through a path that will eventually try all combinations.<p>Would this be enough to be considered machine learning?<p>I&#x27;m also thinking this can start to sound a lot like Evolutionary Computation. Oh boy, in all honesty, I&#x27;ve always been confused about differences between stochastic, metaheuristc, and machine learning optimization techniques.')