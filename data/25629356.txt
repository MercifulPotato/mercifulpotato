Item(by='ChrisMarshallNY', descendants=None, kids=None, score=None, time=1609754187, title=None, item_type='comment', url=None, parent=25627081, text='Thanks for an honest, forthright chronicle. I wish you luck, going forward.<p>For myself, after leaving the corporation that I had been at for 27 years, I rapidly discovered that no one wants to work with older folks; regardless of our skill level, so I went on an odyssey of self-actualization that played out a lot like what the OP described.<p>I hadn’t sunk as much cost, and was realistic that I’d need to try out a lot of stuff before hitting my stride. I think that helps with the morale&#x2F;motivation stuff.<p>I also consulted a couple of <i>cranky old men</i>, with cynical views, and quite a few scars.<p>It was humbling, but their clear-eyed judgment of my [scant] chances helped me to make some massive course changes, early on.<p>I spent about seven months, a couple of years ago, developing a powerful, high-quality backend server that was never really meant to be used[0]. It was more like a “dissertation.” I needed to develop a Discipline that could carry me forward.<p>In my experience, non-technical, “soft” skills, like Discipline, Integrity, Reliability, and Honesty have been important; Even if no one else appreciates them.<p>I need to keep a personal Discipline. For example, I get up every day, quite early, even though I don’t need to, and walk a couple of miles, first thing. It helps me to clear my head, and plan out the day’s work. I also never work in sweats (except if I need to do a bit of work, right after my walk). I think that I need the structure imposed by dressing for work.<p>I am now partnering with a couple of other folks, in a non-profit endeavor. It is working quite well, but we also have a very flexible plan. That’s mostly because of me. I insisted on a “pave the bare spots” approach[1]. Our project is morphing as we develop it, and I couldn’t be more thrilled. As an added bonus, it uses that backend that I developed a couple of years ago[0]. It has also allowed me to learn a great deal of stuff, and I <i>love</i> to learn.<p><i>&gt;  we went through the user stories, completed those, created a story map, devised a roadmap, and clarified the scope of the MVP.</i><p>I’ve become less-than-enamored of this approach. I know that makes me apostate, but I haven’t seen it bear fruit <i>(besides a couple of withered crabapples)</i>, in my personal experience.<p>What <i>has</i> worked for me, is “paving the bare spots.”[1]. I start with a vague, general project concept, then work on creating usable, high-quality partial prototypes, quite quickly, with built-in flex points. It has worked a charm. It is especially valuable in getting useful stakeholder involvement. It helps them to feel good about the project, incubates their sense of “ownership” (and commitment), and we create stuff that is actually <i>useful</i> to the end user, as opposed to “meeting specification.”<p>Also, the very old practice of “constant beta” has paid dividends. This means no development or alpha release stages. The product is <i>always</i> in “beta-quality” stage, even if only partially done. The first release is “beta,” not “alpha.” I never say “I’ll fix that later.” If I encounter a bug while developing, I stop forward movement, until the bug is fixed. I may say “I’ll <i>implement</i> that later,” but I don’t leave known bugs behind me, and I’m <i>constantly</i> testing.<p>Ultra-high Quality is important to me. I write highly-structured, heavily-documented code, with thorough (seldom automated, at first) testing, and am <i>very</i> hard on myself.<p>A significant benefit of this approach, is that we have <i>very</i> solid product to show in that important “shopping around” phase of things, and that phase can start quite early. If we want a potential investor to look at the product, we simply loop them into the TestFlight group. No chaperone necessary, and no sacrifice to The Demo Gods. In fact, any feedback or bugs found are appreciated and integrated into the project (or we develop talking points to address the issue). An important part of this, is that the “prototype” code is actually <i>ship</i> code. It <i>is</i> the product, not a “sizzle reel,” so this means that <i>actual project progress</i> is demonstrated; not some vague, hand-wavy “this won’t take long to realize as ship code” promises.<p>The jury is still out on where this is all going, but I’m extremely happy with the integrity of my work.<p>[0] <a href="https:&#x2F;&#x2F;riftvalleysoftware.com&#x2F;work&#x2F;open-source-projects&#x2F;#baobab" rel="nofollow">https:&#x2F;&#x2F;riftvalleysoftware.com&#x2F;work&#x2F;open-source-projects&#x2F;#ba...</a><p>[1] <a href="https:&#x2F;&#x2F;littlegreenviper.com&#x2F;miscellany&#x2F;the-road-most-traveled-by&#x2F;#paving" rel="nofollow">https:&#x2F;&#x2F;littlegreenviper.com&#x2F;miscellany&#x2F;the-road-most-travel...</a>')