Item(by='wwright', descendants=None, kids=None, score=None, time=1605884374, title=None, item_type='comment', url=None, parent=25160825, text='I assume you write fairly &quot;static&quot; software that knows its job pretty well in advance. Ada programs tend to use a similar allocation strategy.<p>A lot of programs written in C and C++ are <i>very</i> dynamic, and may need to massively increase or decrease the number of objects they use while running. For example, consider an audio workstation: when you first start it, it has very little to do, but the user can add literally hundreds or thousands of tracks, each with dozens of effects and modifications.<p>Each of these features is composed of many objects. <i>Ownership</i> comes in when these objects have complex relationships, where one object may need to be referenced by many others. When it is time to clean up some of these objects — for example, when a user deletes a track in the audio workstation — you have to know <i>which</i> of these shared objects to delete. Ownership is one way of modelling that problem.<p>Languages that talk about ownership try to optimize the &quot;best case&quot; where an object has exactly <i>one</i> owner, because then it&#x27;s very simple for the compiler to free that object. The trick is that you have to <i>prove</i> that no one else is using it, or else you have memory errors.')