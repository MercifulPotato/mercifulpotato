Item(by='mjb', descendants=None, kids=[24713531, 24712934], score=None, time=1602105950, title=None, item_type='comment', url=None, parent=24711314, text='Teaching a class about safety in systems code seems like a great idea, and at first glance the class content here seems useful and interesting. I do a lot of OS-level stuff at work (especially around virtualization and Firecracker), and while safety (and security) are obviously a critical topic for industrial systems, they don&#x27;t tend to be things that new grads have thought about at all. Great to see that changing (even, as with all curriculum additions, it means covering some other stuff less).<p>&gt; CS 110 [multiprocessing, multithreading, and networking in C++] is not just about how we do things, but also why – why are things designed the way they are, and if we get certain bugs or performance characteristics, why is that?<p>That&#x27;s an interesting take, because I don&#x27;t see Rust as being more abstracted in this way than C++ is. Obviously it&#x27;s more abstracted than C, but by the time you get to &quot;modern&quot; C++ you&#x27;re programming in a much higher-level language than C.<p>&gt; I also think it’s hard for students to appreciate Rust without having first experienced C and C++.<p>This part does make sense. Explaining the &quot;why can&#x27;t we just write C really carefully?&quot; piece to people who haven&#x27;t experienced trying to do that is going to be harder. As we all know, it is possible to write safe C, but it takes a level of discipline and tooling support that is beyond most undergrads.<p>&gt; that looks at what is often going wrong in systems and how we can improve practices to build better systems.<p>I&#x27;d love to see more research here too. There&#x27;s some systematic studies of the causes of bugs in systems code, and obviously a lot of well-known bug patterns (see all of C&#x27;s string handling). On the other hand, there seems to be fairly little research on the causes of more pernicious and subtle problems that become vulnerabilities (and data corruption, crashes, etc) in systems code.')