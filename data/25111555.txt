Item(by='valenterry', descendants=None, kids=None, score=None, time=1605534545, title=None, item_type='comment', url=None, parent=25101712, text='&gt; Not jumping through hoops... the point is that you can write untyped code in Java<p>Sure, but that already means you are jumping through hoops.<p>&gt; &gt; &gt; Java&#x27;s type system is sufficiently powerful for 99% of real-world use cases<p>&gt; &gt; Every big project that uses reflection&#x2F;introspection or annotations or some kind of code generation tooling shows that the typesystem is not sufficient.<p>&gt; Annotations and reflection are a feature of Java, they are not external to the language. Annotation and code generation are separate features from the type system - Rust&#x27;s code generation and annotations are very commonly used. Reflection is equivalent to runtime typechecking that is common in JS. How can you say Java is worse then JS in this regard when the poor parts you point out are basically what JS does?<p>Well, maybe I misunderstood you. And with &quot;sufficiently powerful&quot; you just meant &quot;someone can kinda use it to build something&quot;. Well then, yes. Saying it just doesn&#x27;t make much sense to me in a discussion about ergonomics where people complain about type system limitations.<p>&gt; Implementing an Either&lt;A,B&gt; is trivial in Java.<p>Okay, let me copy&amp;paste how this can be defined in F#:<p><pre><code>    type Result&lt;&#x27;TSuccess,&#x27;TFailure&gt; = \n        | Success of &#x27;TSuccess\n        | Failure of &#x27;TFailure\n</code></pre>\nor maybe a language closer to Java, here it is in Scala3:<p><pre><code>    enum Either[A, B] {\n      case Left[A](a: A)  extends Either[A, Nothing]\n      case Right[B](b: B) extends Either[Nothing, B]\n    }\n</code></pre>\nI&#x27;m curious to see the &quot;trivial&quot; implementation in Java that equals the ones from F# and Scala. Mind that both solutions I gave allow to add a &quot;fold(left -&gt; handleLeft(...), right -&gt; handleRight(...))&quot; function which allows to manipulate the content, depending on what it is _without using any casts or reflection_. This is possible in Java, but I don&#x27;t know any &quot;trivial&quot; solution.')