Item(by='bityard', descendants=None, kids=[25005687], score=None, time=1604631743, title=None, item_type='comment', url=None, parent=25004268, text='You&#x27;re right that from a purely security-oriented point of view there&#x27;s not much difference. All code that you didn&#x27;t write yourself can theoretically do anything it likes to your computer. (Unless sandboxed, of course.)<p>But from a practical point of view in the context of convention, expectation, and trust, curlpipes and stand-alone binaries are totally different.<p>Some of us have the battle scars of terrible shell-script installers gone wrong. At best, poorly-written shell script can deploy cruft to strange places on your disk or interfere with data and software managed by the OS package manager. At worst, such scripts have been known to destroy data and render the whole system a brick because the author was not sufficiently familiar with all of the systems that it might be run on. I don&#x27;t remember the source now but one such installer effectively `rm -rf &#x2F;` on the user&#x27;s machine when a certain variable ended up undefined due to a bug elsewhere in the script.<p>However, when I download a binary executable from a source that I trust, there&#x27;s a certain expectation that the program will keep to itself and not interfere with the rest of my system or home directory beyond its own data and config files. Because _not_ doing so departs from convention and will result in a lot of angry users. Likewise I place a great deal of trust in the folks who package software for my OS because while mistakes can happen, their whole goal is a reliable and consistent system as a whole.<p>Individual app developers care little about my system, they just want users to install their stuff. Curlpipes _look_ attractive to them (&quot;just paste this into your terminal, type in your root password and you&#x27;re ready to go!&quot;), but we&#x27;ve seen many times over that cross-platform shell script installers are rarely their core competency.')