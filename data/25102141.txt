Item(by='acemarke', descendants=None, kids=[25103091], score=None, time=1605456148, title=None, item_type='comment', url=None, parent=25098951, text='I&#x27;m afraid that if you&#x27;re focusing on the technical merits of prototypal inheritance vs classes, you&#x27;ve missed my point completely.<p>The parent comment seems to be arguing that a library or tool should be perfect in its very first release - that the designers should have anticipated every possible use case, target audience, and piece of API design.<p>My point was that _everything_ in technology evolves over time, and Redux is no exception.<p>The Redux core _is_ exceptionally well designed, especially given that Dan and Andrew really only worked on it for a two-month stretch.  During that time, they iterated on multiple ideas, particularly the transition from &quot;stores&quot; to &quot;stateless stores&quot; to &quot;reducers&quot;, and coming up with the middleware API as a way to allow pluggable side effects logic.  Similarly, the design discussion for what became `connect` [0] shows from the very first comment exactly what design constraints were relevant, and while it took some time to nail down the specifics, Dan clearly had the key criteria in mind.<p>At the same time, many of their early ideas about how Redux would be used turned out to be wrong.  Dan assumed that people would likely only connect top-level components, and it turns out that connecting many components across the tree is better for performance.  Andrew came up with the &quot;Flux Standard Actions&quot; standard, but his idea of having `{error: true, payload: new Error()}` and reusing the same action type for errors and successes has been completely ignored by the ecosystem - it&#x27;s a lot easier to have separate action types for success and failure.  They both thought that thunks were a stopgap that would quickly be replaced by something else, and neither of them could have anticipated the creation of Immer.<p>So, in the real world, no tool is ever designed perfectly from day 1.  Requirements change and usage patterns patterns change.  That&#x27;s why libraries and tools publish new versions - to respond to those changing situations.<p>That&#x27;s why we created and designed Redux Toolkit - to respond to the changes in how people want to use Redux, and the pain points they&#x27;ve experienced using it.<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&#x2F;issues&#x2F;1" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;reduxjs&#x2F;react-redux&#x2F;issues&#x2F;1</a>')