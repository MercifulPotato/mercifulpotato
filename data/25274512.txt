Item(by='fxtentacle', descendants=None, kids=[25274560, 25276312, 25274669, 25274687, 25275477, 25274747], score=None, time=1606898800, title=None, item_type='comment', url=None, parent=25263488, text='Oh, how often I wish that someone would have followed this advice.<p>Working mostly on Java these days, Carmack&#x27;s focus on efficiently doing the right thing sounds like fairy-tales of the promised land ;)<p>Just yesterday, I spent much longer than I believe is reasonable to fix a bug in a Java class whose sole purpose is to do an HTTP(S) call and determine if the URL is online (200 code) or declared offline (40x code).<p>The first thing that really slowed me down was that instead of having a clear location for the crash, a Java .war inside tomcat tends to vomit 40-50 lines of stack trace onto the console. The reported Exception was &quot;java.io.IOException: Server returned HTTP response code: 400 for URL: ...&quot; in HttpURLConnection.getResponseCode(). But debugging the issue, I noticed that getResponseCode exits just fine without any exception.<p>A bit of Googling around revealed that the root cause was this: <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;54837353&#x2F;525608" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;54837353&#x2F;525608</a>  Inside getResponseCode(), an exception is thrown, caught, and suppressed. And then later, it is retrieved out of HttpURLConnection.rememberedException and thrown around by a different HttpURLConnection function. But of course the Exception still had the old = wrong stack trace in it. So those 40+ lines of stack trace that Java garbled up? Completely useless.<p>I kid you not, Java source code with Exceptions is like your own private hell, especially because the control flow tends to be somewhere between &quot;nested inside 30 functions&quot; and &quot;completely random&quot;. The latter usually happens when libraries do bytecode patching so that what is actually executed doesn&#x27;t even match the source code anymore, and that&#x27;s also the point where stack traces become almost completely useless.<p>I&#x27;d take a 2000+ lines monolithic function every day over this unholy mess that [&quot;Enterprise Java&quot; == stacking random libraries on top of each other] has become.')