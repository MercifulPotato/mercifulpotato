Item(by='peter_d_sherman', descendants=None, kids=None, score=None, time=1611732199, title=None, item_type='comment', url=None, parent=25925161, text='&gt;&quot;It&#x27;s a lot more work to make something like Python or JS! Garbage collection is one issue; shells don&#x27;t have it because they don&#x27;t have recursive compound data structures or true functions.&quot;<p>An excellent point!<p>&gt;&quot;Yes pipelines are a big deal and the runtime is solid now so they can be enhanced.&quot;<p>Maybe synchronous (aka, guaranteed linear) and asynchronous (no guarantees) are better ways to look at it...<p>For example, a simple shell command like &#x27;echo&#x27; could be run either synchronously or asynchronously, but if we&#x27;re assigning the result of it to some variable, it makes sense to run it synchronously, to get that result into the variable before proceeding to the next line of the program...<p>But, if we&#x27;re running a disk defragmenting tool, or other process that we don&#x27;t know when it&#x27;s going to complete, then it makes sense to run it asynchronously.<p>Shell commands that are chained together via pipelines may run asynchronously, but the shell may wait for everything to complete to scoop up the output; so you&#x27;ve sort of have the entire line that was sent to the shell running synchronously (if you&#x27;re assigning the result to a variable), even though parts of it are running asynchronously (with respect to one another)...<p>And of course, via ampersand, you could have the entire line run asynchronous to your program...<p>See, I&#x27;d almost say that one of the problems is that shell scripting languages almost have no knowledge (and correct me if I am wrong, I might be!) about the pipes they create inside of commands -- an ideal shell language would be able to know about these and hook these for various purposes, and specify what would be ran synchronously and asynchronously...<p>Or, another weird corner case -- what if you have a shell script that launches other shell scripts asynchronously (in subshells) and they launch other shell scripts also asynchronously -- in deeper level subshells?<p>How would your language&#x2F;shell track&#x2F;handle that case?<p>How do you communicate&#x2F;track&#x2F;determine when&#x2F;where to assign results to things?<p>It&#x27;s sort of like the language&#x2F;shell -- must be able to :<p>A) Explicitly say what is asynchronous and what is synchronous...<p>B) For asynchronous things, be able to communicate with them, track their status, get results from them when they complete, etc., etc.<p>Now, of all of the programming languages in existence, I think Go is a good candidate for understanding synchronous vs. non-synchronous -- but you don&#x27;t exactly get an &quot;easily scriptable&quot; beginner-friendly shell-scripting language with Go...<p>Python seems to be the right balance between &quot;ease of use&quot; and &quot;gives you control&quot;.<p>So I&#x27;m agreed with all that you&#x27;ve said about Python, and your use of Python in code...')