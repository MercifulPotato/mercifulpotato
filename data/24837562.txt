Item(by='giraj', descendants=None, kids=[24838043], score=None, time=1603203557, title=None, item_type='comment', url=None, parent=24837305, text='Could you elaborate or illustrate what you mean by &quot;theorem proving systems that embrace the full spectrum of abstract and correct thought&quot;?<p>As a mathematician (and programmer on the side) who regularly works in Coq, my impression is that Rust does represent &quot;the future of programming&quot; (or rather, my ideal of it). Type systems are the only mechanism (that I know of) for formally ensuring properties of programs, and proof assistants and languages like Rust lie on two extremes of the spectrum. The former puts the type system in focus; indeed all my work in Coq is about convincing the compiler that certain functions (terms) type-check. The latter puts types in the background, trying to prove as much as possible with minimal friction.<p>What&#x27;s the alternative?')