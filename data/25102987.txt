Item(by='JohnBooty', descendants=None, kids=None, score=None, time=1605461924, title=None, item_type='comment', url=None, parent=25102827, text='Yes, this matches my experience. I&#x27;ve been doing Rails full-time for about 6 years and any &quot;slowness&quot; has been the result of some problem, not Rails itself. 99% of the time this is an uncached n+1 query situation, or some beastly slow database operation that needs to be moved to background processing, things that would be problems in any framework or even some sort of bare-metal asm solution that nonetheless relies upon an external storage layer. =)<p>In a CRUD app the Rails layer should be extremely thin and the storage layer(s) should be doing nearly all of the heavy lifting.<p>There <i>is</i> a level of traffic at which even a &quot;properly&quot; thin Rails layer becomes the bottleneck, relative to many other frameworks.<p>TechEmpower benchmarks suggest it is around 2,500 requests per second in their &quot;multiple queries&quot; benchmark. In a more real-world scenario that might be 1,000 req&#x2F;sec or less.<p><a href="https:&#x2F;&#x2F;www.techempower.com&#x2F;benchmarks&#x2F;#section=data-r19&amp;hw=ph&amp;test=query" rel="nofollow">https:&#x2F;&#x2F;www.techempower.com&#x2F;benchmarks&#x2F;#section=data-r19&amp;hw=...</a><p>If one is attempting to serve more requests than this per minute then yes, perhaps Rails is the bottleneck. Admittedly, Rails&#x27; large memory consumption relative to other frameworks means it can be tough (well, technically <i>easy</i>, but <i>expensive</i>) to scale horizontally at this point.')