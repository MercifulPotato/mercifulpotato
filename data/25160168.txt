Item(by='smoe', descendants=None, kids=[25162545, 25161673], score=None, time=1605878377, title=None, item_type='comment', url=None, parent=25158104, text='I have worked with Javascript for frontend quite extensively since 2005 and with Typescript since about half a year. In the general case, I don&#x27;t have strong opinions about strong vs dynamic typing, or getting error during compile- or runtime.<p>But my gripe with Javascript has always been, that you often don&#x27;t get any direct errors at all but instead end up with unexpected values in a different place that you then have to tediously backtrack.<p>A contrived example to illustrate what I&#x27;m referring to:<p><pre><code>  some_obj = {day: 2, ...}\n  next_day = some_obj.daz + 1 &#x2F;&#x2F; typo in attribute gives you `undefined`, adding 1 to it results in `NaN`, not a number.\n  date = Date(2020, 11, next_day) &#x2F;&#x2F; returns a`Invalid Date` object\n  console.log(&#x27;date: &#x27;+ date) &#x2F;&#x2F; outputs &quot;date: Invalid Date&quot;\n</code></pre>\nIn Python, every line after the first would raise a runtime exception and is thus in my opinion much easier to debug.<p>What I particularly like about Typescript is that I can use as much or as little of it as I deem necessary. E.g. I start off a prototype using the `any` type a lot, and only in future iterations, I start tightening the definitions as the requirements for the project become clearer. So far the overhead has been quite minimal.<p>The one downside so far is, since I learned Typescript by just starting using it, without a deep dive in documentation, books, etc. trying to grok code, well especially type definitions of libraries (which I often prefer over reading documentation) that use the more advanced features has been quite a challenge.')