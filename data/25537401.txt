Item(by='e12e', descendants=None, kids=None, score=None, time=1608914423, title=None, item_type='comment', url=None, parent=25535682, text='&gt; Rails doesn&#x27;t help you form a proper domain model. Or force you to put side-effects in the proper place; it doesn&#x27;t help with evolving a proper data model, or avoid tight coupling in unwanted places, it has hardly any tooling in place to employ design patterns.<p>I think this is only half true. Rails certainly <i>forces </i> very little on you - but has lots of documentation and helping hands pushing you towards tdd - and it has fairly powerful and simple tools to help with data modeling - as long as your data can fit reasonably in the ActiveRecord pattern.<p>More complex subsystems can be split out into rails engines or services.<p>All that said,it is indeed easy, without some discipline, to roll out complected controllers and views.<p>But I don&#x27;t think it&#x27;s fair to say that rails the framework via structure or its official guides, encourages that.<p>Quite the opposite.<p>As for &quot;try&quot; (now for a long time largely subsumed by ruby&#x27;s built in &amp;-operator) - that can be helpful where appropriate, like with handling input,and occasionally with explicitly optional relationships and nullable values. But of course NULLs should normally be avoided, and the database should be leveraged to ensure data integrity. And rails allow you to do that.')