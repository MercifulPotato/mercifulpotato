Item(by='high_density', descendants=None, kids=None, score=None, time=1611687246, title=None, item_type='comment', url=None, parent=25918593, text='woah another rustacean? hi there!<p>for rust, it counts as a &#x27;feature&#x27; because it provides safety guarantee, and they&#x27;re opt-in (can use unsafe)<p>as for haskell, that immutability also provides guarantee of &#x27;referential-transparency&#x27;, which the users&#x2F;libraries can use to their advantange.<p>But in python&#x27;s case, you have to define the multi-line function *outside* the chaining, and &#x27;forcing to name things&#x27; isn&#x27;t always good (especially for constantly-changing code)<p>def hideEmail(user):\n    return {\n      ...user,\n      email: user.hideEmail? &#x27;&#x27;: user.email,\n    }<p>users.map(hideEmail)<p>&#x2F;&#x2F; later:\ndef hideEmailAndPhone(user):\n    return {\n      ...user,\n      email: user.hideEmail? &#x27;&#x27;: user.email,\n      phoneNo: ... &#x2F;&#x2F; same stuff\n    }<p>users.map(hideEmailAndPhone)\n---<p>As for JS&#x2F;TS, you can have &#x27;named-callback-fn&#x27;:<p>users.map(function hidePrivateFields(user) {\n   ...\n})<p>and it&#x27;s not difficult to come up with &#x27;named-lambda-fn&#x27; standard<p>users.map(hidePrivateFields(user) =&gt; {\n  ...\n})')