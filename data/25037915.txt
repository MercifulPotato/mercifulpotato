Item(by='waterofclear', descendants=None, kids=[25044009], score=None, time=1604946549, title=None, item_type='comment', url=None, parent=25032956, text='I looked into Pijul in the past but in the end the model seemed worse than git to me.<p>Git is a snapshot based model and so doesn&#x27;t leak any implementation details about patches themselves. Every user can use whatever diffing algorithm they want when generating patches for use in three way merge and then only the results are stored. In fact with git you don&#x27;t even need to use three way merge, the only thing that matters is that you say &quot;I merged A and B and this is what the tree looks like as a result&quot;.<p>Pijul being based on patches encodes patch information into the repo. Each line belongs to a patch and it can depend on the diffing algorithm which patch owns a particular line. This is a big drawback and so we should hope to get some serious benefits to make up for it, but I don&#x27;t think we do.<p>One of Pijul&#x27;s main selling points is the ease of cherry-picking. They make the claim that cherry picking &quot;just works&quot; but I think this misses the big picture. Pijul&#x27;s cherry picking only &quot;just works&quot; with respect to merging lines of code. It can automatically pull in patches that the lines of code you are merging depend on for the merging algorithm, but it can not track things like &quot;This calls a function introduced in patch X&quot; which makes the cherry-picking functionality of very little value.<p>The biggest problem IMO is that Pijul is more similar to git rebase than git merge. What I mean is that it forces you to resolve conflicts that you probably wont ever care about. Let&#x27;s say I have a local git branch with 10 commits on top of master. Now if I update my master and do &quot;git rebase master&quot; I must make sure that each one of those 10 commits resolves cleanly on top of the new master. It&#x27;s common to get into situations where you would have to resolve conflicts in several of those rebase steps but a merge which did a three way merge of the tops of both branches would result in few or no conflicts. Pijul is like rebase in that it forces you to consider the full history of all the patches in a set which requires to resolve arbitrary conflicts. The benefit of resolving those conflicts is that it can help with cherry-picking, but I don&#x27;t want to be doing this work all the time for an incomplete solution to a rare operation. I even made some test repos in both Git and Pijul to verify that Pijul forces you to resolve conflicts that three-way merge doesn&#x27;t care about.<p>It&#x27;s certainly possibly I got some information wrong about Pijul. Please correct me if I have!')