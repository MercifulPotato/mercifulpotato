Item(by='WorldMaker', descendants=None, kids=None, score=None, time=1604352665, title=None, item_type='comment', url=None, parent=24967043, text='&gt; Hooks based components are trying to make modules that are “about” the problem domain they illustrate, but they do it as a feature of React. React isn’t about your problem domain, it’s about driving the DOM and rendering, and I think it makes more sense to treat React code that way.<p>This is why I think it&#x27;s going to take a bit more time with hooks code to realize the opposite to csande17&#x27;s complaint is really true: the problem with the hooks React ships with is not that they aren&#x27;t primitive enough (as the sibling comment points out, csande17 probably is also missing that some of the primitives they are looking for expressly don&#x27;t exist as React hooks because they don&#x27;t fit the algebraic effect model React is moving toward, versus the lifecycle model React is moving away from), but instead that the hooks React ships with are still (or least feel) far <i>too</i> primitive an algebra for the &quot;calculus&quot; needed for at least some problem domains (if not most problem domains).<p>I don&#x27;t specifically have any answers for what the next layers up will be, though I appreciate this article for trying to explain how algebraic effects work in other languages because that provides ideas from other places of how <i>their</i> primitives get composed.')