Item(by='CaptArmchair', descendants=None, kids=[25276980], score=None, time=1606914997, title=None, item_type='comment', url=None, parent=25274660, text='This debate is really about what people want and how they envision the Web.<p>&gt; Who&#x27;s to say digital text has to stick to a 80s concept of casual academic publishing?<p>Hypertext is a valid business case as it was back then and it still is today.<p>What changed is how the Web evolved from a small group of academics and engineers 30 years ago into the billions that it connects today. It&#x27;s not just hypertext. It&#x27;s hypertext and every other conceivable business case which is being shoehorned into the browser.<p>The Web originally wasn&#x27;t conceived to provide affordances that allow for &quot;rich media experiences&quot;. Foundational technologies - HTTP, HTML, CSS, JS,... - weren&#x27;t originally designed to build complex user interfaces and applications. Yet, as more and more and more people got connected: that&#x27;s exactly what they wanted.<p>Remember Flash? Or Java applets? Or Silverlight? Those were hailed as additional technologies that would merge complex user interfaces into the Web. Macromedia coined the term &quot;Rich Web Applications&quot; back in 2002. All of them failed for various reasons.<p>Ever since the Web Standards moving of the mid-00&#x27;s, communities of designers have taken CSS and HTML and tried to bend and use them in any way possible to bring visually stunning experiences on the Web. This is where you will find the direct  roots of many ideas and dynamics that are currently in vogue. It&#x27;s their influence, as well as other dynamics - e.g. the introduction of the smartphone, the rise of big tech - that has defined how browser technology has evolved.<p>Over the past decade, browser vendors have tacked on additional browser API&#x27;s on top of the original, decade old foundations, while communities of frontend developers have spawned ever intricate constellations of interlocking JavaScript libraries and frameworks that specifically try to break out of how the Web originally was intended to work.<p>Some things have become easier as specifications evolved a bit (e.g. CSS3). But at the end of the day, your browser still needs to download HTML, JS and CSS, parse all of that, execute and render it onto a canvas.<p>Even so, it&#x27;s safe to say that this approach is miles removed from what native applications offer in terms of performance and maintainability. Markets being what they are, web applications are in vogue because they earn big money if done well. (Slack just became the latest poster child for that, right?) I don&#x27;t see that changing anytime soon either, lest someone is willing to go back to the original drawing board and design a totally new paradigm that integrates the promise of Rich Web Applications in the browser properly.<p>And so, I think it&#x27;s hyperbole when someone states that &quot;HTML, CSS and JS are broken&quot;. One may also consider the history of Web technology over the past decade  as a great example of how the popularity of a set of technologies turned them into Maslow&#x27;s Golden Hammer. Used to solve any and all problems under the sun, but still not any closer to what native applications aspired to achieve back in the 80&#x27;s, 90&#x27;s and 00&#x27;s.')