Item(by='segfaultbuserr', descendants=None, kids=None, score=None, time=1608915041, title=None, item_type='comment', url=None, parent=25536932, text='&gt; <i>fake the `sudo` command.</i><p>I personally see that &quot;su&quot; and &quot;sudo&quot; are both fundamentally insecure. Compromising any sudoer, and root is essentially lost (e.g. keyloggers), thus the &quot;wheel&quot; group should only contain trusted accounts. It can be more secure if all root operations require a separate console, isolated from the rest of the world. For example, on historical Unix servers, it was a common practice to restrict root logins to a physical terminal. But nowadays it&#x27;s unfeasible. One solution for servers is disabling &quot;su&quot; and &quot;sudo&quot;, and to allow root logins via pubkeys. This goes against the best practices, but can be more secure when it&#x27;s used properly. Alternatively, create an &quot;admin&quot; account with sudo privilege, and guard it as carefully as your root account, because a sudoer <i>is</i> root.<p>On desktop, a solution can be using Intel ME&#x2F;SGX&#x2F;TXT and allowing it to take over your screen and keyboard to create a root shell - but it is proprietary, unauditable, and cannot be trusted. But it&#x27;s not strictly needed - pure software can do something similar, e.g. you run two X servers on two separate VTs with two users, only the second user has access to a root shell. I guess better integration at the graphics server&#x2F;system level is possible, you just need to be careful about GUI spoofing. For example, on Windows NT, pressing Control+Alt+Delete opens an unspoofable &amp; isolated secure login screen - perhaps we should implement a secure root shell like that!<p>A more practical, although much less secure alternative is requiring 2FA, e.g. pressing a physical button on a USB token to sudo, it&#x27;s something you can use today. But it cannot solve the problem of malicious command injections.<p>But on second thought, these problems are not really a priority in infosec - user applications are insecure in general, and user data is accessible without root anyway... As xkcd said, &quot;they can read my mails, take my money, and impersonate me, but at least they cannot install device drivers without my permission...&quot; So doing all of the works can be a total waste of time. Also, even with a separate root console, one must also have strong discipline not to execute anything or opening any complex binary data from another user (potentially compromised), which makes the whole idea fragile.<p>Finally QubesOS&#x27;s approach is an innovative workaround and worth mentioning - normal and sensitive applications are running in separate VMs, providing strong isolation. Since both system and user applications are already isolated, it&#x27;s not really that dangerous to be &quot;root&quot;, so by default, everyone can sudo without any authentication. But if you are concerned about someone attacking supervisor via root, you can use Dom0 to 2FA authenticate sudo in an application VM without any extra hardware.')