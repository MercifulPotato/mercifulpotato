Item(by='ddragon', descendants=None, kids=None, score=None, time=1603734957, title=None, item_type='comment', url=None, parent=24898360, text='The for loop example was just to illustrate the difference between function and macro, a complete DSL would be something like making prolog within a Lisp or other examples in racket [1], or for example a special configuration file for electric circuits within the language, or a SQL like interface for manipulating data (you can write LINQ using macros).<p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Racket_features#Language_Extensions" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Racket_features#Language_Exten...</a><p>It&#x27;s not a direct comparison of course (nor it is a Lisp), but here is an example of linear optimization in a library that uses macros to make it a DSL closer to the description (in Julia @ before a name means it&#x27;s macro, so it&#x27;s easy to see) and one that uses methods:<p><a href="https:&#x2F;&#x2F;nbviewer.jupyter.org&#x2F;github&#x2F;jump-dev&#x2F;JuMPTutorials.jl&#x2F;blob&#x2F;master&#x2F;notebook&#x2F;introduction&#x2F;getting_started_with_JuMP.ipynb" rel="nofollow">https:&#x2F;&#x2F;nbviewer.jupyter.org&#x2F;github&#x2F;jump-dev&#x2F;JuMPTutorials.j...</a><p><a href="https:&#x2F;&#x2F;www.cvxpy.org&#x2F;examples&#x2F;basic&#x2F;linear_program.html" rel="nofollow">https:&#x2F;&#x2F;www.cvxpy.org&#x2F;examples&#x2F;basic&#x2F;linear_program.html</a><p>If in the Julia example they if @variable was a function, then x &gt;= 0 would have been evaluated immediately and it would fail since x was not defined (and if it was x &gt;= 0 would return a boolean). To emulate that you&#x27;d probably have to pass a string &quot;x &gt;= 0&quot;, which the function would then have to parse (it would be a DSL as well, but one you&#x27;re writing from scratch), the difference here is that you can just use the language parser directly and compile already with the result.')