Item(by='bastawhiz', descendants=None, kids=[25876133], score=None, time=1611348129, title=None, item_type='comment', url=None, parent=25874105, text='I think some of the points are valid (.Net folks are not going to have a great time working on a React codebase). I think some of the problems are a result of the decision to use Redux. Redux was very much in vogue for a while, but in every project I&#x27;ve used it for, it really hampers DX when you start to get stuck in on a large project. To do stuff that involves async (read: everything), you need helpers (thunks, saga, etc.) which introduce their own quirks, and require their own tools. Soon, you&#x27;re up to your eyeballs in boilerplate.<p>As for the (build-time) performance concerns, I think there&#x27;s some work here. They have a _big app_. And if you&#x27;re compiling a 220 page app in a single build, it&#x27;s going to get slow. You&#x27;d have the same problem, though, with a native mobile app or a very large C++ app: at some point, you need folks focusing on the infrastructure bits part time. With a relatively small number of changes, they can probably make some big wins: adding build caching for local development, using an NPM proxy (to avoid downloading 600MB of deps over the public internet on every build), looking at alternative hot reload plugins, etc.<p>That&#x27;s not to say React is without problems, but I think it&#x27;s worth considering that _almost any_ technology of the scale of React is going to have drawbacks, especially if you don&#x27;t have someone in-house who has really significant experience making it work well. Companies like Airbnb, Facebook, Uber, etc. all have whole teams (&quot;JS Infra&quot;) dedicated to this stuff, in the same way there are teams like Ruby Infra, etc.')