Item(by='Jugurtha', descendants=None, kids=None, score=None, time=1606143687, title=None, item_type='comment', url=None, parent=25186981, text='&gt;<i>The idea of locality of change, of encapsulation, of interfaces as a way to reduce the amount of stuff you need to know in order to change the system. It is a pretty effective strategy for keeping the &quot;cost to change&quot; a software product low.</i><p>Yes, not only keeping the cost of change low, but unlocking potential in a way that seems prescient but is just common sense. I like to think about this in terms of &quot;unit of thought&quot;, &quot;protocols, interfaces, specs&quot;, &quot;impedance matching&quot; to maximize power transfer, unknown future consumers.<p>Doing that adaptation upstream prevents people writing adapters downstream. It may be adding a &quot;REST&quot; API so that consumers you may ignore can work with that. It may be using Cloudevents spec for your events to make it easier for people to work with that. It may be making sure the output of your system is a Docker image to make it easier to use that elsewhere for a user, whether that may be a human or something else.<p>Systems that produce known&#x2F;standardized&#x2F;understood building blocks unlock a lot of potential and avoid downstream work.')