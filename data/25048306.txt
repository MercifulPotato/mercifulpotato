Item(by='mattmanser', descendants=None, kids=[25049010, 25048756, 25049141, 25049018, 25049131, 25048481], score=None, time=1605028472, title=None, item_type='comment', url=None, parent=25048221, text='To me it&#x27;s just so pointless, here&#x27;s an example:<p><pre><code>    using Microsoft.Extensions.Configuration;  &#x2F;&#x2F;extra line\n    using Microsoft.Extensions.Options;    &#x2F;&#x2F;extra line\n\n    public class AdminController : Controller\n    {\n        IOptions&lt;Settings&gt; settings; &#x2F;&#x2F;extra line\n\n        public AdminController(IOptions&lt;Settings&gt; settings) &#x2F;&#x2F;extra code\n        {\n            this.settings = settings; &#x2F;&#x2F;extra line\n        }\n        \n\n        public void RandomMethod()\n        {\n            var a  = settings.Value.FinallyMySetting; &#x2F;&#x2F; 5 extra lines to access your config, genius...\n        }\n    }\n</code></pre>\nA complete and utter waste of my time to put all those lines in, it&#x27;s just pointless boilerplate trash, which C# has been getting rid of excellently, all to be undone by whoever wrote Microsoft.Extensions.Configuration. And you have to do it any where you want to get a config value.<p>On top of that, if you want to use it in a console app, you have to add like 5 packages. Yes, FIVE.<p><pre><code>    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration&quot; Version=&quot;3.1.9&quot; &#x2F;&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Binder&quot; Version=&quot;3.1.9&quot; &#x2F;&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.EnvironmentVariables&quot; Version=&quot;3.1.9&quot; &#x2F;&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.FileExtensions&quot; Version=&quot;3.1.9&quot; &#x2F;&gt;\n    &lt;PackageReference Include=&quot;Microsoft.Extensions.Configuration.Json&quot; Version=&quot;3.1.9&quot; &#x2F;&gt;\n\n</code></pre>\nThen add this delightful mess just to initialize it:<p><pre><code>    var environmentName = Environment.GetEnvironmentVariable(&quot;ENVIRONMENT&quot;);\n\n    var builder = new ConfigurationBuilder()\n                .AddJsonFile($&quot;appsettings.json&quot;, true, true)\n                .AddJsonFile($&quot;appsettings.{environmentName}.json&quot;, true, true)\n                .AddEnvironmentVariables();\n \n    var configuration = builder.Build();\n</code></pre>\nWhen you compare that to what any other framework does, it just beggars belief that they though this was a good way of handling config.<p>When I was setting this all up, I obviously hit up SO, and it&#x27;s clear from many of the (incorrect) answers on SO that people just don&#x27;t get it. It&#x27;s too complicated for something that should be super simple.<p>I get that it&#x27;s handy to be able to configure all that yourself, but all of that should be default and a single line&#x2F;package.')