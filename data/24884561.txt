Item(by='mathpadawan', descendants=62, kids=[24884813, 24884692, 24884967, 24884642, 24884726, 24888474, 24884641, 24884714, 24884750, 24884614, 24884640, 24884832, 24885414, 24884968, 24884644, 24890073, 24884636, 24885401, 24889078, 24888541, 24885548, 24884834, 24884627, 24885046, 24885448, 24884763, 24885345, 24885197, 24884648, 24884922, 24884880, 24885136, 24885091, 24884975, 24885325, 24885339, 24885009, 24885303, 24903649, 24884811, 24885335, 24895821, 24884574], score=42, time=1603612075, title='Ask HN: Which general programming language is good for learning/exploring math?', item_type='story', url=None, parent=None, text='Which general purpose programming language is good for learning and exploring math?<p>Here is what I am looking for from the programming language:<p>* Good standard library that helps in exploring math concepts. Python fits this bill. Python&#x27;s standard library has functions like math.comb(), math.gcd(), math.factorial(), etc. They make it easy to write down many closed-form expressions without reinventing the wheel.<p>* Speed. If I am exploring a new concept and I want to test a conjecture for large numbers, such iterate-and-test loops in Python run 30 times slower than equivalent loops in C++. Here C&#x2F;C++ fits the bill and Python does not.<p>* Expressibility. While I am exploring mathematics, it should not feel like I am fighting the syntax of the language. Python and Java fit the bill due to their simplicity. C++ is manageable. Rust feels like too much work for quick and dirty hacks to test conjectures.<p>* Longevity. The language should be stable and not prone to too many breaking changes. Some code I write now should run without modifications ten years later. C, C++, Go fit the bill. Python does not.<p>* Open source implementations. The language must have popular free and open source implementations. I don&#x27;t want to be paying large sums of money for something like MATLAB or Mathematica. Most languages popular here on Hacker News like Python, Go, Rust, etc. fit the bill.<p>Now if there is no language that do not meet all the requirements above, that is fine. Something that comes to close to supporting most of the features above is going to be okay.')