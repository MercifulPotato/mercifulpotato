Item(by='awwaiid', descendants=None, kids=[25786682], score=None, time=1610678026, title=None, item_type='comment', url=None, parent=25780607, text='There are a TON of experiments and language mash-ups in Raku. Let&#x27;s see here.... Types can include guard clauses that are evaluated at runtime. Typed multi-dispatch on top of that. In addition to normal &quot;sets&quot; it has &quot;junctions&quot;, like some sort of funky quantum superposition or something. In theory those can be made parallel at some point. Stuff like that.<p>One that is particularly funky is the &quot;whatever-star&quot;. This is a &quot;<i>&quot; char that can be used in a few places to mean more or less... whatever. For example:<p><pre><code>    &lt;4 5 6 7&gt;.map(-&gt; $x { $x + 7 }) # result: (11 12 13 14)\n</code></pre>\nThat stabby inline lambda there can be sugared down in a lot of ways, including with the whatever-star:<p><pre><code>    &lt;4 5 6 7&gt;.map(* + 7) # result: (11 12 13 14)\n</code></pre>\n... I&#x27;ve not seen anything quite like that in other languages, not sure if it is a new invention or if only nobody else is crazy enough to try it. And yes, you can use multiplication next to it to make it look crazier:<p><pre><code>    &lt;4 5 6 7&gt;.map(* * 7) # result: (28 35 42 49)\n</code></pre>\n(also yes, (</i> * *) will take two inputs and multiply them.)<p>I will note though that dwelling on these crazy&#x2F;fun edge cases is amusing, but programs can look quite a bit more like a basic ruby app (with sigils) if you so desire.')