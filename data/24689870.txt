Item(by='shaftway', descendants=None, kids=[24690887], score=None, time=1601918945, title=None, item_type='comment', url=None, parent=24689713, text='I think it&#x27;s because of the combinatorics of it and it&#x27;s compounded by the specificity system, the size of the vocabulary, and no built-in compiler.<p>The combinatorics are tough for our lizard brains to reason out. If you don&#x27;t have a strict set of rules for your CSS then you end up with a mixture of element rules, class rules, and id rules, and the combinations of these can get hard to hold in your head. Having compound styles doesn&#x27;t help at all because it&#x27;s easy to not realize you&#x27;re setting a style accidentally.<p>Then what happens when there&#x27;s a collision? The specificity system is supposed to sort that out, but without learning the rules there&#x27;s just no way to intuit them. When I&#x27;m struggling with getting something just right and some library CSS is overriding my local CSS it&#x27;s always the specificity rules that are at fault.<p>The vocabulary size is enormous. It&#x27;s unclear exactly how many properties there actually are, but the most authoritative answer I could find was 522. That&#x27;s a crazy number. And yes, that treats `margin` and `margin-left` as two separate properties, but they&#x27;re still in there. By comparison there are 53 reserved words in Java and only 33 in Javascript. It&#x27;s possible for a mere mortal to memorize these.<p>And finally there&#x27;s no built-in compiler. Yes, I know about Sass, but that&#x27;s not much more than a macro system; a useful macro system, but still just a macro system. A lot of us use compilers as our grammar and vocabulary checkers. If I do mis-spell a word in Java the compiler usually errors out and I&#x27;m forced to fix it. But if you mis-spell a property in CSS it&#x27;s happy to just ignore it and you spend several minutes trying to figure out why your change did nothing.')