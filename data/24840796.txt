Item(by='nendroid', descendants=None, kids=None, score=None, time=1603218690, title=None, item_type='comment', url=None, parent=24839964, text='I said it as a minor minor retort. You want the full story? The full story is I don&#x27;t care for experience. I find experience doesn&#x27;t correlate with actual skill. Many experienced developers act and seem very inexperienced which is what I said about you: You &quot;seem inexperienced&quot; because you act that way. The very act of bringing up experience is off topic and a sign of lack of maturity.<p>If you have to know I&#x27;d say I have about 15 years of experience in research, gaming, embedded and web. I will say that the pattern I described can be followed in every one of those fields but it&#x27;s a niche pattern because it is indeed promoted by people who do FP.<p>I don&#x27;t know why you focus on embedded, but embedded people tend to follow these patterns the least due mostly to C++. The overall promoted pattern in C++ is to pass references everywhere and it&#x27;s highly unlikely that someone in that world will follow this pattern because you have to go out of the way to do it and learn about it. It requires a disciplined approach.<p>The big problem is if you need to slightly modify a bunch of values in an array of 100 objects. It&#x27;s hard to figure out the right way to do it in a combinator. The common pattern used nowadays is instead of having combinators handle it, have the combinators generate logical instructions to send to the IO function similar to how in web development your stateless servers pass SQL instructions to the SQL server. The IO function processes the instructions and handles the threading, mutation and IO. Here&#x27;s a library that does this:<p><pre><code>   https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;cpp-frp &lt;---- real world example.\n</code></pre>\nNothing I said is &quot;theory&quot; in the sense that you put it. These are rare but actual patterns that are used successfully by people in the know. You are not in the &quot;know&quot; despite your experience. As a result for most of your program experience you&#x27;ve just been dealing with and fixing mess after mess after mess.')