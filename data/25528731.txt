Item(by='toinbis', descendants=None, kids=None, score=None, time=1608826450, title=None, item_type='comment', url=None, parent=25523081, text='&gt;&gt; This doesn&#x27;t make any logical sense. I was clearly referring to Facebook primarily as an implementation, not as a brand.<p>Facebook is a product of 100000 different implementations which might theoretically change daily. If we were discussing can we do thing X or Y with MySQL, and you&#x27;d say &#x27;look - there is facebook, it&#x27;s working, it means you can(&#x27;t) do thing X or Y with MySQL&#x27; - that would not not be very specific. I&#x27;ll add term &#x27;architecture&#x27; to discussion.<p>&gt;&gt; OK, so Netflix, Facebook, Instagram, AirBnB - all web app implementations - cannot decently A&#x2F;B test, but you can. Gotcha.<p>So, let&#x27;s talk architectures. &quot;Netflix, Facebook, Instagram, AirBnB&quot; - if you can, please specify what architecture and for what purpuse they have implemented. And tell about the specific example. We will have something to discuss, now we just don&#x27;t.<p>For instance, <a href="https:&#x2F;&#x2F;docs.developers.optimizely.com&#x2F;full-stack&#x2F;docs&#x2F;optimizelyexperiment" rel="nofollow">https:&#x2F;&#x2F;docs.developers.optimizely.com&#x2F;full-stack&#x2F;docs&#x2F;optim...</a> -&gt; this is architecture of optimizely experiment for React. This is other feature <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=NRLhlTopFzw" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=NRLhlTopFzw</a> being showcased, but you can get a sense of how the SDK is being used. Let&#x27;s say bussiness requirement is to run experiment where for 50% of traffic you show nothing at the top of the page, for other 50% you show country flag image and city flag(cout of arms) image. Site is built with next.js. The next day you throw next.js out and build your site from scratch on other page. How would you implement that?<p>&gt;&gt;How would you know, anyway?<p>a) You use common technical sense and realize that&#x27;s the only way it can be;<p>b) If you don&#x27;t trust your guts, you go and analyze performance tests: <a href="https:&#x2F;&#x2F;css-tricks.com&#x2F;radeventlistener-a-tale-of-client-side-framework-performance&#x2F;" rel="nofollow">https:&#x2F;&#x2F;css-tricks.com&#x2F;radeventlistener-a-tale-of-client-sid...</a> and learn that react is 40x slower that the industry standard. Not stressing 40x, just - it&#x27;s slower, was and will always be (except RenderToStaticMarkup and Server Side Components).<p>c) You go and check what world is using - <a href="https:&#x2F;&#x2F;w3techs.com&#x2F;technologies&#x2F;comparison&#x2F;js-jquery,js-react" rel="nofollow">https:&#x2F;&#x2F;w3techs.com&#x2F;technologies&#x2F;comparison&#x2F;js-jquery,js-rea...</a> , you realize that, statistically speaking, no one is actually using react, probably for a reason. (Ok ok, this argument is also a bit overstrech, and yet... :)<p>d) You can only know for sure by building stuff and comparing. You build <a href="https:&#x2F;&#x2F;turboeshop.com&#x2F;fastestpageintheworld&#x2F;" rel="nofollow">https:&#x2F;&#x2F;turboeshop.com&#x2F;fastestpageintheworld&#x2F;</a> and <a href="https:&#x2F;&#x2F;gatsbyeshop.com" rel="nofollow">https:&#x2F;&#x2F;gatsbyeshop.com</a> and compare: <a href="https:&#x2F;&#x2F;imagebin.ca&#x2F;v&#x2F;5lrH1VnQBac7" rel="nofollow">https:&#x2F;&#x2F;imagebin.ca&#x2F;v&#x2F;5lrH1VnQBac7</a> .<p>&gt;&gt; &#x27;faster than many SSR industry peers or competitors&#x27;<p>&#x27;Not worse then most competitors&#x27; is not how you win in bussiness competition, is it? :)<p>&gt;&gt; You further resort to a personal attack<p>Honest apologies if that sounded that way. If I may - I take all that back.<p>&gt;&gt; I&#x27;ve got nothing against SSR, it&#x27;s got its use cases and I&#x27;ve personally used it too, but you on the other hand seem to be an SSR jihadist<p>Ok, now we talk. For the record - I write a lot of client-facing vue code, sometimes a bit of react. Love both, great developer experience, I call them both &#x27;godsend&#x27; for frontend development.<p>Yes, I do turn radical when people start shouting &#x27;react is the answer, what was the question&#x27;. And this tread we are having discussion in began with &#x27;you should do everything in JS&#x2F;TS&#x27; statement. And believe me, there are many devs like this.<p>When faced such statements and situations I do take a stance and say that there are so many bussiness requirements that make hydration&#x2F;js-navigation&#x2F;react-vue-svelte obsolete from day one, they are just out of consideration when picking a stack.<p>Problem is devs makes usually make choices and bussiness usually does not not the costs they are incurring in letting devs to use tech stack they do love. Reactgasm(term found online) has it&#x27;s high costs for some bussinesses. It sure does. It has obvious gains as well. Which are the greater - devs only can never decide, yet it happens that they think they can.<p>My main profession, broadly speaking, is e-commerce marketing. And when dev comes and says &#x27;i&#x27;ll use react in the acquisition funnel of the project you&#x27;ll be optimising&#x27; - sometimes turning to SSR jihadism is the only way of winning an argument.  Am glad we finally came to a conclusion that &#x27;it depends on bussiness requirements&#x27;, which I honestly think is always a start and end of discussions as such.<p>My final point is &quot;react&amp;friends are not default options for tech stack for ecommerce bussiness acquisition funnel (I have quite some expertese and many years of experience in this specific domain, that&#x27;s why I allow myself strong statements), but in practice it may surely be a comlete opposite if bussiness decides so&quot;. That says nothing about that react or vue ar not great projects they do not have their use cases. In a neutral environment without react-jihadism i&#x27;m perfectly fine saying &#x27;tech stack needs to meet bussines requirements&#x27;, but that&#x27;s only with an asterisk *if bussiness requirements are actually being taken into consideration, not devs just picking what they love and pretending everything else does not actually matter.<p>Many thanks for good discussion, apologies again if any of the statements were impolite, am not a native English speaker. Feel free to challange my technical discussions above, but I think I&#x27;ll resist of pushing this further, as I&#x27;ve elaborated my point of view and then I believe it&#x27;s about sharing ideas not winning arguments why we are in HackNews :) Kindest regards and happy holidays!')