Item(by='minimaul', descendants=None, kids=[25159701, 25162174, 25159690], score=None, time=1605864055, title=None, item_type='comment', url=None, parent=25158115, text='I&#x27;ve used both, the reasons I favour zfs over btrfs:<p>- I&#x27;ve corrupted btrfs filesystems with compression just through normal use, on hardware that is <i>fine</i>. This may have been fixed, but it was on relatively recent (post 5.x) kernels<p>- zfs&#x27;s logical volume layer is rather more flexible than btrfs&#x27;s - you can make a multi-device set of mixed disks. For example, my backup pool is 9x4TB and 7x3TB. These are individual raidz sets that are combined together into one pool. In ZFS this is all in one place and it means the fs is aware of the logical disk layout and where data is stored. To do this on btrfs I&#x27;d need to use lvm and I&#x27;d in theory lose a bunch of the self-healing ability<p>- btrfs&#x27;s snapshotting seems excessively complicated - it requires you to create a non-trivial logical layout in the fs, and it&#x27;s very easy to accidentally expose these snapshots to the system&#x27;s view of the fs. It&#x27;s more flexible, but more annoying for my usecase. zfs&#x27;s on the other hand is really very simple, and much much easier to use<p>With that said, ZFS on linux is slightly awkward as it&#x27;s out of tree, and most distros build the module with DKMS. I don&#x27;t entirely trust this for using for &#x2F; (so my &#x2F; is just a md raid1) - I use zfs for bulk data instead. btrfs is in-kernel, so there&#x27;s no real disadvantage with using it for &#x2F;.')