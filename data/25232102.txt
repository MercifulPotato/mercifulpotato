Item(by='didibus', descendants=None, kids=[25232692], score=None, time=1606507258, title=None, item_type='comment', url=None, parent=25231118, text='&gt; It is iterative too, though: it iterates through an input sequence.<p>I don&#x27;t think these words have supper formal definitions to be honest. I&#x27;m using iterative to contrast it against recursive. So in that respect, Clojure&#x27;s doseq is recursive. You can also see it as iterating over a sequence and thus say it is iterative, but the way it loops over the sequence is through recursion, which is where doseq differs with Python&#x27;s for. Maybe it&#x27;s clearer if I say that doseq is recursive while Python&#x27;s for isn&#x27;t and just not mention iterative at all haha.<p>&gt; Fair enough. I take your overall point, I just don&#x27;t think that not being a classic for-loop matters so much in practice, certainly not &quot;most of the time&quot; anyway.<p>I don&#x27;t know what you mean by &quot;matter&quot;, but with regards to the article I&#x27;m discussing I&#x27;d say it does. A classic for-loop is prone to easy to make bugs that are well known, such as &quot;off by one errors&quot;, and &quot;overflows&quot;. So the fact that the language has you use this higher level abstraction for looping over collections can help prevent a certain amount of such errors and thus provide additional program safety.<p>Now I don&#x27;t know if the further differences between Clojure doseq and Python for would also result in safer code. I guess the question is: is the use of break and continue a common source of defect? And is forcing branching instead a safer alternative? Personally I don&#x27;t know, I&#x27;d say maybe not.<p>That said, Clojure also favours the use of its immutable for or reduce over doseq, and that is arguably much safer, because mutable state inside a for-each loop is also a known source of common defects, like changing the sequence as you loop over it, and especially if concurrency is involved. So that&#x27;s another relevant practical difference in my mind.')