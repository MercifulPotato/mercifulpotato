Item(by='kentonv', descendants=None, kids=[24932162, 24920216, 24920113], score=None, time=1603899001, title=None, item_type='comment', url=None, parent=24919339, text='Oh hello. Thanks for the kind words.<p>&gt; Why did Kenton do this? He can speak for himself,<p>An incomplete list of reasons:<p>1) At the time I started the project, a lot of things that KJ replaces, like std::optional, didn&#x27;t actually exist in the C++ standard yet.<p>2) A lot of the stuff in the standard library is just badly designed. Take std::optional, for instance. You&#x27;d think that the whole point of using std::optional instead of a pointer would be to force you to check for null. Unfortunately, std::optional implements operator* and operator-&gt; which are UB if the optional is null -- that&#x27;s even worse than the situation with pointers, where at least a null pointer dereference will reliably crash. KJ&#x27;s Maybe is designed to force you to use the KJ_IF_MAYBE() macro to unwrap it, which forces you to think about the null case.<p>3) A lot of <i>older</i> stuff in the C++ standard library hasn&#x27;t aged well with the introduction of C++11, or was just awful in the first place (iostream). C++11 really changed the language, and KJ was designed entirely with those changes in mind.<p>4) The KJ style guide (<a href="https:&#x2F;&#x2F;github.com&#x2F;capnproto&#x2F;capnproto&#x2F;blob&#x2F;master&#x2F;style-guide.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;capnproto&#x2F;capnproto&#x2F;blob&#x2F;master&#x2F;style-gui...</a>) adopts some particular rules around the use of const to help enforce thread safety, the specific philosophy around exceptions, and some other things, which differ from the C++ standard library&#x27;s design philosophies. KJ&#x27;s rules have worked out pretty well in my experience, but they break down when building on an underlying toolkit that doesn&#x27;t follow them.<p>5) This is a silly matter of taste, but I just can&#x27;t stand the fact that type names are indistinguishable from variable names in C++ standard style.<p>6) Because it was fun.<p>Do these reasons add up to a good argument for reinventing the wheel? I dunno. I think it has worked well for me but smart people can certainly disagree.')