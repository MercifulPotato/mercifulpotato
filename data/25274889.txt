Item(by='ratww', descendants=None, kids=[25275223], score=None, time=1606902118, title=None, item_type='comment', url=None, parent=25274596, text='This is advocated in some popular books, but IMO it&#x27;s the worst reason to break up a large function.<p>You end up with the same amount of code, but now you have to jump around. In most cases it also forces you to turn local variables into instance variables, globals, or pass state in parameters in order to carry state between the new functions, which further decreases readability.<p>You might as well add an &quot;index&quot; at the top of the large function and get the same readability benefits from doing it.<p>What should be done instead is trying to find code that can be abstracted without hurting readability. Most of the time in large functions there are mixed abstraction levels, such as business logic mixed with I&#x2F;O, generic error handling that could be somewhere else, or object transformation that exists because of different libraries working differently.<p>When you automatically refactor into smaller functions you carry those problems into the small functions and you get code that is probably harder to follow, generates worse stack traces and only looks good in a shallow inspection.')