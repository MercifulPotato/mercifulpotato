Item(by='deanCommie', descendants=None, kids=[25896772], score=None, time=1611514017, title=None, item_type='comment', url=None, parent=25890632, text='Another 20 year veteran here. (though don&#x27;t picture a greybeard, I started professionally at 15)<p>The big lesson for me over the last 5 years now that I also operate my code is design patterns. I think most Software  people start with hating design patterns, then some fall in love with them, then eventually some of us fall out of love again.<p>The advice would be:<p>&quot;Optimize code cleanliness and readability for reading at 2am in the middle of a production issue when you&#x27;re trying to understand just exactly how the system got into that state that you didn&#x27;t think was possible.&quot;<p>That means every jump to another class and every jump to an interface with multiple implementations is a distraction. You should still of course create modular separations for testability and clarity. But that line is way higher than the Uncle Bob &quot;If a function is more than 4 lines long you should refactor it&quot;.<p>For complex mission critical pieces of logic, overindex on procedural execution, with paragraphs of comments explaining why each line is doing what it&#x27;s doing.<p>Actually, another wisdom about comments:<p>I went from thinking &quot;Comments are great!&quot; to &quot;Comments are terrible, and are liars, write self-documenting code&quot; to &quot;Comments are literally an opportunity for you to speak directly to the person coming after you, and explain in clear plain english WHY you made the choices you did, what tradeoffs you considered and dismissed, what compromises you made, and what external factors led to those decisions.&quot;<p>Comments don&#x27;t need to be passive voice professional corporate speak. Nor do they need to make you sound smart or clever. Speak directly to your audience of future more junior engineers.<p>Exception messages too (sanitize all exceptions before they get to the customer, of course)')