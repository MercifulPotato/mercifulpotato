Item(by='stouset', descendants=None, kids=None, score=None, time=1605635390, title=None, item_type='comment', url=None, parent=25123022, text='How can you skip over the `if err != nil` lines!? That&#x27;s <i>where the work is being done</i> per canonical golang. Every line is<p><pre><code>    if res, err := someDifferentWork(x, y, z); err != nil {\n        return nil, err.fmt(&quot;look, ma! I&#x27;m a human exception handler&quot;)\n    }\n</code></pre>\nYes, Rust has lifetime annotations. Those are almost always only on function definitions, and consist of a <i>small</i> part of the overall definition. With golang, the above nonsense is repeated at least 2&#x2F;3ds of every function body in practice. And the actual logic is embedded inside of it, over and over and over, with minor differences between each occurrence. `if err != nil {` is practically golang&#x27;s newline separator.<p>Look, I get that as you spend more time with the language you get better at mentally ignoring this. But a) comparing noise that&#x27;s virtually 50% of most golang code in the wild to noise that&#x27;s maybe 2% of most Rust code in the wild is frankly ridiculous. And b) the fact that you eventually got used to it doesn&#x27;t make it any less of a readability disaster.')