Item(by='mhh__', descendants=None, kids=[25776421], score=None, time=1610497906, title=None, item_type='comment', url=None, parent=25755731, text='It&#x27;s possible, although it&#x27;s worth saying that compilers are still relatively dumb when it comes to actually using their arsenal of optimizations - you can have too much of a good thing, it&#x27;s quite difficult to have a usable performance&#x2F;compilation-speed tradeoff.<p>A quick example of this: <a href="https:&#x2F;&#x2F;gcc.godbolt.org&#x2F;z&#x2F;4r38xv" rel="nofollow">https:&#x2F;&#x2F;gcc.godbolt.org&#x2F;z&#x2F;4r38xv</a><p>This isn&#x27;t a particularly scientific test, but if you compare the assembly for the generated factorial function, the compilers being asked for absolutely breakneck speed correctly identify parallelism in the code, but fail to recognize that the loop overflows almost immediately - it is defined behaviour, so without human intervention it can&#x27;t guess where we want performance. So the end result is a pretty enormous SIMD-galore function which is not much faster or even slower than the very simple optimize-for-size output.<p>You may be thinking, well it&#x27;s faster sometimes, that&#x27;s good - that is often a good thing, however, code density is very important. The SIMD-gone-mad version is several times bigger than the simple loop. Modern x86 CPU&#x27;s have a roughly 1-4k Î¼op cache, that might be a whole load of it gone right there. It&#x27;s a significant dent in the instruction cache too.<p>If you look down the software stack, we use programs like compilers to invariants in our data and algorithms, act on it, and then promptly throw it away - when moore&#x27;s law ends this is where we can find a lot of performance, I reckon. In this case we can bully the compiler into assuming the code overflowing won&#x27;t happen, or highly unlikely, which lets it schedule the code more effectively for our use-case but this requires relatively intimate knowledge of a given compiler and the microarchitecture one is using - it&#x27;s not really good enough.')