Item(by='AnthonyMouse', descendants=None, kids=None, score=None, time=1602200116, title=None, item_type='comment', url=None, parent=24725031, text='&gt; &quot;Whole&quot; in the sense of &quot;the whole is more than the sum of its parts&quot; is not generally understood to imply the maximal possible scope in any given context. It&#x27;s simply meant to meant to talk about how the identify an aggregation (of no particular scale) relates to the identities of its individual components.<p>Which is how I&#x27;m using it. An API that consists of two functions and one that consists of a billion functions have completely different scales but each whole unit has an API portion and an implementation portion. And the API portion is the recipe. It&#x27;s a purely factual description of what the implementation is expected to do.<p>&gt; Similarly, the API&#x2F;not-API distinction is one that has to be made in contexts beyond just the relationship of function signatures to function implementations. Foo was declared as a public class, but was it meant for public consumption? Or is it intended for internal use, and was only declared public because, for practical reasons, it couldn&#x27;t be declared package-private?<p>That doesn&#x27;t affect whether the API parts of it are API parts, only whether the API is regarded as internal or not, which shouldn&#x27;t be relevant to copyright. Internal APIs shouldn&#x27;t be copyrightable either.<p>&gt; The issue at hand really doesn&#x27;t have anything at all to do with how programmers understand things.<p>It better, or you&#x27;re in real trouble, because then all you have are meaningless zeros and ones.')