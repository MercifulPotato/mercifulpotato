Item(by='Twisol', descendants=None, kids=[25728735], score=None, time=1610370882, title=None, item_type='comment', url=None, parent=25728261, text='In Haskell, you often build pure transformations, and then <i>lift</i> them into an effectful context. If I have a function `String -&gt; [String]`, say to parse a line of CSV into its elements, I can lift that to `IO String -&gt; IO [String]` using the IO monad&#x27;s `fmap`. And then I can compose it with something hypothetical like `readLine :: File -&gt; IO String`, which actually reads the line.<p>The core logic of a program often doesn&#x27;t need to care deeply about state or system resources. Pure functional programming is about writing as much as you can in this &quot;functional core&quot;, and then lifting the assembled pieces of pipeline into the &quot;imperative shell&quot; (such as the IO monad).')