Item(by='ryan-duve', descendants=None, kids=[25596792, 25597602], score=None, time=1609445765, title=None, item_type='comment', url=None, parent=25596311, text='The author concludes the best solution is using brew to install different Python dependencies for different packages.  I had a similar solution when I started using a Mac for work back in 2017, but around six months ago I found another way:<p>1. Install Docker CE on the Mac.<p>2. Start a container for your work, e.g.,<p><pre><code>  docker run python:3.8\n</code></pre>\n3. When you need to get back into it, use<p><pre><code>  docker exec -it &lt;first_three_container_characters&gt; ipython\n</code></pre>\n4. If the container is shut down from a reboot or something, start it with<p><pre><code>  docker start &lt;first_three_container_characters&gt;\n\n</code></pre>\nWhat&#x27;s really cool about this is `bash` can be run instead of `ipython` to get a Bash prompt and install any Linux dependency.  In theory, at some point if one project has conflicting dependencies with another project a new container can be spun up, but this is not something that&#x27;s come up in practice yet.<p>This has worked so well for me these past few months, I actually replicated it on my <i>Linux</i> computer.  I took a few extra convenience steps like mounting `&#x2F;home&#x2F;` and aliasing `ipython` to a command that starts the container before executing the command, but other than that it&#x27;s been a pretty seamless experience and I never have to worry about OS-level Python installation stuff any more.  I use a scipy image with Jupyter Lab in a similar way for my graphical notebook needs.<p>The only time I would recommend against this is when performance is an issue (like training ML models), but at work we use AWS machines with their own Docker environments for that.  For everything else, Mac, Linux or maybe even Windows, Docker is the only way I now recommend firing up Python.')