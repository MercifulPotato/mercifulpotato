Item(by='mikepurvis', descendants=None, kids=None, score=None, time=1603296037, title=None, item_type='comment', url=None, parent=24848644, text='It&#x27;s true that there are certain non-negotiable costs there, and projects like Mercurial have invested heavily in trying to figure out how to make Python start up faster, and basically hit a brick wall (see: <a href="https:&#x2F;&#x2F;www.mercurial-scm.org&#x2F;wiki&#x2F;PerformancePlan" rel="nofollow">https:&#x2F;&#x2F;www.mercurial-scm.org&#x2F;wiki&#x2F;PerformancePlan</a>).<p>That said, for a lot of other projects which haven&#x27;t yet looked, there may be some low-hanging fruit. For example, I was doing some looking at this recently on a highly pluggable workspace build tool called colcon [1], and found that of 5+ seconds of startup time, I could save about 1 second with &quot;business logic&quot; changes (adding caching to a recursive operation), another 1 second by switching some filesystem operations to use multiprocessing, and about 1.5 seconds from making some big imports (requests, httpx, sanic) happen lazily on first use.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;colcon&#x2F;colcon-core&#x2F;issues&#x2F;398" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;colcon&#x2F;colcon-core&#x2F;issues&#x2F;398</a>')