Item(by='UncleMeat', descendants=None, kids=None, score=None, time=1605712425, title=None, item_type='comment', url=None, parent=25135582, text='&gt; Who knows what bowl.stir() actually does to the internal state of bowl, and what methods should have been run up until this point to get into that state, is the bowl ready to stir?<p>A major benefit of OO is that you can actually enforce this. Encapsulation is useful for data objects where some configurations of bits are valid and some are invalid. Careful interfaces let you ensure that the object is always in a valid state and does not permit you to do a thing when it is not valid. The fact that you&#x27;d be unsure of these questions is an indication that your interface is done poorly.<p>Granted, this is <i>really hard</i> to get right. Doing it badly  leads to the nightmarish combination of easily mutable state that isn&#x27;t easily visible.<p>&quot;Copy everything&quot; can be a really compelling option for many programs and there are persistent data types that help do this in a mostly scalable fashion. But there are plenty of cases where it just won&#x27;t work. In my job our system primarily works on a data object that is too large to meaningfully copy everywhere. The solution is extremely judicious use of &quot;const&quot; and clear rules for automatically invalidating certain dependent program state when the underlying state we are working with changes. Lots of work, but in the end you get a ton of very strong invariants that make it really easy to work with the data.')