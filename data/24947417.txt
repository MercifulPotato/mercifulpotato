Item(by='didibus', descendants=None, kids=None, score=None, time=1604096397, title=None, item_type='comment', url=None, parent=24945476, text='I don&#x27;t mean the REPL is the only upside to Clojure, but it&#x27;s the trade-off for the lack of static type checker with IDE.<p>If you needed to run the TypeScript compiler as a CLI and it spiled errors on the command line, that also wouldn&#x27;t be a very pleasant experience.<p>I&#x27;ve known a few people coming from Java or C# to Clojure, never really getting into the REPL, would mostly program the same way they used too, and they went back. Which frankly doesn&#x27;t surprise me, I&#x27;d go back as well if that was the case. The dynamism of Clojure isn&#x27;t there out of lazyness to implement a static checker, but to be leveraged both at run-time and development time.<p>Clojure is still a lovely language without it, but if you don&#x27;t leverage the dynamism, then it&#x27;ll seem like the language is lacking staticness, obviously, since you&#x27;re using it statically except it has no features built around staticness.<p>That said, I don&#x27;t blame anyone for not leaning into the REPL, Clojure and especially ClojureScript doesn&#x27;t make it easy, the tooling is rough around the edges.<p>As an aside, I think everyone should explore multiple paradigms and languages, and having good experience in a statically typed language will make you a better programmer, even if you were to go back to Clojure one day. The act of thinking about the types behind your variables actually makes you a better programmer in dynamic languages, because you start to have a static checker inside your head, and over time make less and less type related mistakes or can catch them very quickly.')