Item(by='elcritch', descendants=None, kids=[25356313], score=None, time=1607482816, title=None, item_type='comment', url=None, parent=25353400, text='Ah, interesting to know that Nim&#x27;s system uses some form of affine&#x2F;linear types. I&#x27;m not sure of the extent or details as I&#x27;ve been busy making use of other parts of Nim, but I really want to read up on linear types. Nim&#x27;s type system is powerful enough to pass write effects which would be pretty handy for first class immutability [1]. Not sure how much that overlaps with linear types though or if it&#x27;s an orthogonal aspect.<p><pre><code>    On a side note, my use case of a Bacon-Arjan type collector ...\n\n</code></pre>\nInteresting story! I enjoy reading those, and I know the Nim team had a <i>lot</i> of work to get ARC &amp; ORC working well, which also required a lot of work on move&#x2F;sink as well in the stdlib. I could see it being very difficult to implement in a big C++ code base. From the article it seems M&amp;S can even be a bit faster than ARC, but with higher latency, more memory usage, and harder to target various platforms like WASM. I&#x27;m glad as it makes Nim excellent for usage on microcontrollers! No worries on shared heaps or unpredictable GC pauses.<p>1: <a href="https:&#x2F;&#x2F;nim-lang.org&#x2F;araq&#x2F;writetracking_2.html" rel="nofollow">https:&#x2F;&#x2F;nim-lang.org&#x2F;araq&#x2F;writetracking_2.html</a>')