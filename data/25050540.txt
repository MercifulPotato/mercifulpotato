Item(by='alquemist', descendants=None, kids=None, score=None, time=1605036724, title=None, item_type='comment', url=None, parent=25049826, text='Granted, explicit error handling is a good idea. At some level, it depends on the personal style. Perhaps I&#x27;m missing something, but I like to write a ton of assertions to validate code invariants. On assertion failure, which obviously never happens as I write perfect code that never violates invariants, all I want to happen is &#x27;write the error in the logs and return 50x&#x27;. I suppose panic&#x2F;recover is the way to go, but I have the impression they are shunned by the community and not recommended by Golang official docs.<p><a href="https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;faq#assertions" rel="nofollow">https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;faq#assertions</a><p>&gt;  Why does Go not have assertions?<p>&gt; Go doesn&#x27;t provide assertions. They are undeniably convenient, but our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting. Proper error handling means that servers continue to operate instead of crashing after a non-fatal error. Proper error reporting means that errors are direct and to the point, saving the programmer from interpreting a large crash trace. Precise errors are particularly important when the programmer seeing the errors is not familiar with the code.<p>&gt; We understand that this is a point of contention. There are many things in the Go language and libraries that differ from modern practices, simply because we feel it&#x27;s sometimes worth trying a different approach.')