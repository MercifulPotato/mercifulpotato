Item(by='BreakfastB0b', descendants=None, kids=None, score=None, time=1608214836, title=None, item_type='comment', url=None, parent=25454409, text='<p><pre><code>  Is there anybody that develops on the frontend professionally fulltime and makes these kinds of complaints?\n</code></pre>\nI do? These are all real problems I&#x27;ve encountered working on large apps at multiple organizations. React hooks are a constant source of difficult to write and non-deterministic tests. Class components also suffer from the same problems.<p><pre><code>  Now after learning about it I&#x27;ll never go back to class components.\n</code></pre>\nThose aren&#x27;t the only two options. What I&#x27;m advocating for is using react only for pure functional components without the use of any hooks. Hooks are completely isomorphic to class components. Instead of binding the `this` of class methods to an object as a class component would. React hooks maintain basically the same thing in the background and bind it to the values of the hooks, identifying them by call order in your component. Which is why you can&#x27;t call them conditionally. They&#x27;re way nicer than class lifecycle methods. Primarily because they organize code that&#x27;s related together, rather than by when in the lifeCycle it is triggered.<p>IMO state and side effects belong outside of the render functions. Not mixed up inside them. This is exactly what redux, cycles.js, Elm, MVC, etc do.<p><pre><code>  No idea why you&#x27;re suggesting Redux has anything to do with hooks. They&#x27;re completely different.\n</code></pre>\nIf you can&#x27;t see why Redux is related to hooks, I don&#x27;t know what to say. They&#x27;re both approaches to managing the impure parts of your UI. I suppose you could continue to insult my experience as a frontend engineer.')