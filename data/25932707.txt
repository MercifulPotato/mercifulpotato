Item(by='Garlef', descendants=None, kids=[25935065, 25933798, 25932874, 25939027], score=None, time=1611775704, title=None, item_type='comment', url=None, parent=25931768, text='I think the post is a bit unfortunate in its wording and this seems to have sent you off on a wrong track.<p>From how I read it, this the post is not specifically about JS and a discussion of the specific technologies mentioned but rather concerned with the following very general situation:<p>1. There&#x27;s a user sitting in front of a browser.<p>2. There&#x27;s a backend server providing data and points of interaction with that data.<p>I think the central point of the post now is that we don&#x27;t have a satisfying technical solution for this situation.<p>Let&#x27;s take a look at one of the points you mentioned. Maybe you might find there&#x27;s actually some valid points in the post and give it a more favourable reread.<p>&gt; UX when fetching data: What does that have to do with any of the above?<p>Here, the author of the post writes: <i>&quot;Itâ€™s a big burden for engineers to have to manually add loading spinners and error states, and engineers often forget.&quot;</i><p>I think it&#x27;s more or less clear how you could implement this using only plain vanilla js. Cumbersome but doable: A very manual, imperative process.<p>Now let&#x27;s envision a technology from a possible future:<p><pre><code>    const twitterFeed = createMagicDataSource(&quot;https:&#x2F;&#x2F;twitter.com&#x2F;...&quot;)\n\n    const feedComponent = magicRendererComponent(twitterFeed, state =&gt; &#x2F;* HTML like declarative description of the visuals *&#x2F;)\n\n</code></pre>\nImagine this was everything you had write in your code to get the following:<p>* state gets automatically loaded when the first instance of the component is created<p>* updates are automatically visualized in the client based on the internals of the declaration in the renderer<p>* you don&#x27;t have to specify if the updates are done by polling, websockets or whatever: the two magic methods figure this out by themselves.<p>* you don&#x27;t have to specify how the data is fetched in the first place. giving the a URI to the `createMagicDataSource` function is enough.<p>* additional instances of the component don&#x27;t fetch the data again<p>* updates are efficient: the sync method only exchanges exactly the data required, only the minimal visual updates are performed<p>* marking feeds as &quot;seen&quot; by the user is also done by magic and syncs across devices (same for other non-ephemeral ui state).<p>Now: And I&#x27;m sure you&#x27;d agree that we are not there yet technologically. But I hope you agree that this would be really nice.')