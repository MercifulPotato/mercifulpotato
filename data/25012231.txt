Item(by='theonemind', descendants=None, kids=None, score=None, time=1604706975, title=None, item_type='comment', url=None, parent=25007871, text='I don&#x27;t know of any formal theory, but it feels a bit like functional programming because you don&#x27;t often use variables (an advanced feature, as the manual says). I kind of got a feel for it by realizing that it wants to push a stream of objects through transformations, and that&#x27;s about it. A few operators&#x2F;functions can &quot;split&quot; the stream, or pull the stream back into place. Like, uh,<p>in.json {&quot;a&quot;:1,&quot;b&quot;:2}<p>jq -c &#x27;{a}&#x27; in.json<p>{&quot;a&quot;:1}<p>The . is the current stream, so if I just do &quot;. , .&quot;, it&#x27;s kind of pushing two streams along:<p>jq -c &#x27;.,. | {a}&#x27; in.json<p>{&quot;a&quot;:1}<p>{&quot;a&quot;:1}<p>Then, of course, say:<p>jq -c &#x27;{a, b, c: .}&#x27; in.json<p>{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:{&quot;a&quot;:1,&quot;b&quot;:2}}<p>It was going through the . stream, and I pulled the . stream right back in while doing so.<p>So it kind of helps to keep straight in my head when I&#x27;ve kind of got multiple <i>streams</i> going, vs multiple values.<p>Someone (almost anyone) can probably explain better with formal theory, but I just kind of got a feel for it and kind of describe it like this.')