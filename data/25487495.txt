Item(by='matchagaucho', descendants=None, kids=[25487627], score=None, time=1608482566, title=None, item_type='comment', url=None, parent=25482410, text='Upon seeing this article while drinking my Sunday coffee I was reminded to do my weekly AWS serverless checkin.<p>I noticed one of the Lambda functions briefly spiked to 6 concurrent instances. Within a couple clicks I confirmed a bot was scanning the API, possibly looking for vulnerabilities. The built-in API throttling hopefully dissuaded the bot from further scans.<p>Before serverless, my capacity planning for servers would have required accounting for this spike in “noise”. I would pay for a peak burst scale of 6 servers, but practically only use 1-2 for routine processing.<p>My serverless infra are just “cattle”. AWS Lambda does some magic behind the scenes and determines when to kill an instance, recycle, or create a new one. I just feed it an occasional monolithic JAR that handles all API calls and queue handlers.<p>From the OP\n_[With serverless].. You deploy individual stateless functions. But not inside a Java monolith, that is old, but on top of a distributed system._<p>This is where the Author seems to conflate the benefits of serverless with a particular architecture or code deployment model. The two are completely separate.<p>Serverless is not just a technology, but from a lifestyle perspective it is a game changer. A solo software developer can rapidly experiment and test ideas until one starts to scale. Most of the experiments can be run in a “free tier”. And the costs of scaling are comparable to provisioning your own EC2 instances or containers.')