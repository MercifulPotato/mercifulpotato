Item(by='leetcrew', descendants=None, kids=[24920610, 24921620], score=None, time=1603900803, title=None, item_type='comment', url=None, parent=24920097, text='I think about that email a lot at work (where we have some very long functions). I particularly like this excerpt, which is applicable outside of performance-critical situations:<p>&gt; Besides awareness of the actual code being executed, inlining functions also has the benefit of not making it possible to call the function from other places. That sounds ridiculous, but there is a point to it. As a codebase grows over years of use, there will be lots of opportunities to take a shortcut and just call a function that does only the work you think needs to be done. There might be a FullUpdate() function that calls PartialUpdateA(), and PartialUpdateB(), but in some particular case you may realize (or think) that you only need to do PartialUpdateB(), and you are being efficient by avoiding the other work. Lots and lots of bugs stem from this. Most bugs are a result of the execution state not being exactly what you think it is.<p>in general I don&#x27;t think it&#x27;s worthwhile to split a long function into several static helpers just to get under an arbitrary maximum function length target. I don&#x27;t think it leads to a net improvement in readability, since I now have to go back and forth between the helpers and the main function to see in what order the helpers get called (what if someone swaps the order of helperA and helperB but not the order of their definitions?). imo this is only worth doing if you&#x27;re also willing to think long and hard about what happens if someone uses your helpers in a different context.')