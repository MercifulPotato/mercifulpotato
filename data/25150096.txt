Item(by='nkkav', descendants=None, kids=None, score=None, time=1605797650, title=None, item_type='comment', url=None, parent=25136258, text='On the cheap side, books, but not all of them. My buys are &quot;hit or miss&quot;, lately mostly hits.<p>I would recommend:<p>- The Elements of Style, aka, &quot;the Little book&quot;. Made me a credible editor (and documentation writer at the time) almost at zero time.<p>- Zero to One: in-depth, honest, and non-conformist view of the tech startup landscape. &quot;How Google Works&quot; is a close second.<p>- The Embedded Systems Dictionary. Not in print but the second-hand paperback is worth it. Great refresher, written with a wit.<p>Another book I use is &quot;The Developer&#x27;s Guide to Debugging&quot;.<p>In general I like zero-bullshit or more politely, zero fat books. &quot;The Elements of Style&quot; is one. &quot;The Developer&#x27;s Guide to Debugging&quot; is also very low in fat, war stories and other nonsense.<p>There are other books that I like that are less influential.<p>Aphorism: I don&#x27;t believe in software books. Exceptions are well-researched reference volumes, e.g., &quot;C: A Reference Manual, 5th edition&quot;. I believe in undisputed truths, not in one person&#x27;s preference or experience over another&#x27;s.<p>These days I mostly consult manuals and standard documents. Technical books will only give you that much; see them as a vehicle to learn how to learn. Exceptions are again reference handbooks, that will have to be exhaustive.<p>I don&#x27;t believe in trainings, fast, slow or anything. Self-learner here, learned reading by myself around the age of 3 (shocking revelation: have you realized that you can only recall detailed memories only after you have learnt how to read?) Actually it was exactly the winter of 1980 (born 1977). I was a serviceable reader by the coming of sprint 1980 and could read subtitles as fast as the adult is assumed to by early 1981. Educated physicist but self-educated programmer.')