Item(by='a1369209993', descendants=None, kids=None, score=None, time=1602450864, title=None, item_type='comment', url=None, parent=24748531, text='&gt; You just wanted to print a warning if the directory doesn&#x27;t exist.<p>That code prints a warning if the directory <i>does</i> exist, actually (&quot;-d FILE  FILE exists and is a directory&quot;). Did you mean something like:<p><pre><code>  test -e outfile &amp;&amp; echo &quot;trying to overwrite preexisting outfile&quot;\n</code></pre>\n&gt; You didn&#x27;t want the function to fail.<p>Uh, I kind of do, actually? If I wanted to discard the exit status I&#x27;d write:<p><pre><code>  test -e outfile &amp;&amp; echo &quot;trying to overwrite preexisting outfile&quot; || true;\n</code></pre>\nThis is <i>awkward</i>, and suggests a proper if-then operator (perl-6-style `??` collides with globbing, but maybe `&amp;?`?), but it&#x27;s better then having something like:<p><pre><code>  mkfoo -o foo &amp;&amp; cp -T foo otherfoo\n  do-something foo bar\n</code></pre>\nmostly-silently mix old and new data together because mkfoo failed and the error code was swallowed.<p>&gt; So there&#x27;s no way for shell to really know what you want.<p>Yep, and if we have to pick one problem, things failing completely in a obvious <i>and also easily-fixable</i> way is usually a much less awful problem to have than silently corrupting data and state, <i>especially when you&#x27;ve opted-in to a mechanism (like errexit) specifically designed to do the former</i>.')