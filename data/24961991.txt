Item(by='someUserTonight', descendants=None, kids=None, score=None, time=1604260426, title=None, item_type='comment', url=None, parent=24961335, text='I think the parent comment was saying that you could always make that explicit.<p>&gt; By setting the value as null initially I can easily check whether the variable has been filled or not<p>I don&#x27;t think there&#x27;s anything wrong with this but it does mean your variable can be in two states~, one where &quot;it shows it should be filled&quot; and one where the value is present and can be used.<p>You can use null for this if you want and most programmers will understand these states. You can also choose to make this even more explicit by creating a type that expresses this.<p>example in Kotlin but you get the idea (applies to any variable in any language)<p><pre><code>    sealed class ThatVariableYouCareAbout {\n     object ShouldBeFilled: ThatVariableYouCareAbout()\n     data class HasBeenFilled(val x: String): ThatVariableYouCareAbout()\n    }\n</code></pre>\n&#x2F;&#x2F; usage\n    fun test(thatVar: ThatVariableYouCareAbout) {\n      if(thatVar is ShouldBeFilled) {\n         &#x2F;&#x2F;\n      } else if(thatVar is HasBeenFilled) {<p><pre><code>      }\n    }\n</code></pre>\nSeems overly verbose but that&#x27;s the reality of the variable you&#x27;re talking about. This represents those states you described. `null` is a crutch in most languages for representing this state and the cause of a lot of subtle bugs (people use it to reset&#x2F;clear out values too which in reality could represent a different state depending on what you _really_ want the variable to represent).<p>All that being said, null is generally understood to have this meaning~ and I have&#x2F;do use it but with an understanding that it&#x27;s of lazyness&#x2F;not wanting to be overly verbose (language consideration).<p>The case you are describing is very familiar to me (rendering UI with initial states through a framework like react) and having an explicit type for the initial state is the ideal, or at least the most explicit, solution.')