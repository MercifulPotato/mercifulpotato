Item(by='chubot', descendants=None, kids=None, score=None, time=1607804259, title=None, item_type='comment', url=None, parent=25400225, text='BTW I think the general idea of Oil&#x27;s syntax is working out: start in &quot;command mode&quot;, and then when you see the RHS of =, changing modes to Python-&#x2F;JS- like expressions.  There a few other cases where you switch to expression mode, like proc p(a, b) [1]<p>So far nobody has complained about any of this, I&#x27;m guessing because it looks very familiar, and that was intentional.  Oil takes some pains to literally look like shell + Python syntactically, with better semantics.<p>I noticed that a few other shells are having problems with this command&#x2F;expression distinction, and I discussed it like 3-4 years ago with Ilya Sher (of NGS) and a few other people.  They were also having the same problem.<p>For example, does &#x2F; mean a path separator or the division operator?  Does * mean a glob or a multiplication?  In Oil, this is no problem.  It&#x27;s obvious depending on the context.<p>Though I&#x27;m interested in more feedback on this, and the latest release is available to try as always :)  <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;latest&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;latest&#x2F;</a><p>---<p>The awk and make integration is still doable but not done.  Awk might require a notion of &quot;lazy expressions&quot; or &quot;lazy arg lists&quot;, which would be shared with dplyr-like functionality.  Oil&#x27;s Zulip is open for discussion on these ideas :)<p>[1] <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.5&#x2F;doc&#x2F;command-vs-expression-mode.html" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;release&#x2F;0.8.5&#x2F;doc&#x2F;command-vs-expres...</a>')