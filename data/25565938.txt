Item(by='bikeshaving', descendants=None, kids=[25566285, 25566298], score=None, time=1609208206, title=None, item_type='comment', url=None, parent=25565413, text='&gt; The fact that a function gives you the same result given the same arguments is not meant to be some kind of encouragement to redundantly call a function many times.<p>All pure functions are by definition idempotent, and this quality is often celebrated as yet another point of merit. What is the point of highlighting this quality if functional programmers do not expect to over-execute them?<p>&gt; It&#x27;s meant to give you a tool to better reason about the program logically. You don&#x27;t have to worry about _when_ a pure function is called…<p>If you say you don’t have to worry about <i>when</i> a function is called, the implication is that you don’t have to worry about <i>how many times</i> that function has been called. Functional programmers tend to belittle this sort of reasoning, and yet this sort of reasoning continues to be necessary when evaluating long-running, interactive programs for correctness.<p>This downplaying of executional reasoning is precisely why even if using pure functions on their own doesn’t encourage overexecution, the systems which functional programmers build typically do. We see this most clearly in discussions of reactivity, the fetishization of spreadsheets as programming model. Discrete events are tranformed into discrete outputs in a many-to-many relationship and yet functional programmers continue to think it’s not important to reason about the code which executed in between, the when and how much, just because it’s a composition of pure functions.')