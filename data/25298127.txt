Item(by='Jach', descendants=None, kids=None, score=None, time=1607047826, title=None, item_type='comment', url=None, parent=25296406, text='&gt; I&#x27;m explaining why Lisp is hard to learn.<p>It is not hard to learn in general, there are too many counterexamples of people of all sorts and skills learning it without these issues you are having, learning it as their first, learning it later in their careers... (CL is <i>big</i>, I&#x27;ll give you that, but each piece can be chewed one at a time and does not seem to be individually that difficult.) So I can hypothesize why it&#x27;s hard to learn <i>for you</i>. My first guess is still that you aren&#x27;t meeting Lisp in its own terms and are trying to make Lisp fit your mental model of some other language and its ecosystem. This isn&#x27;t going to work, and the failure mode (if I&#x27;m right) has nothing to do with Lisp but with biases in general heuristics of learning.<p>You don&#x27;t need to &quot;unlearn&quot; the way you&#x27;re used to doing things, but you do need to separate yourself from it for a bit until you actually grasp the Lisp (and its ecosystem&#x27;s) way(s) and can then see the connections, tenuous and non-existent as some may be. I&#x27;ll risk raising some of those connections below, but really, things need to be understood on their own terms first or you wind up with misconceptions. (I&#x27;ve seen it multiple times with Java&#x2F;Python programmers getting confused at the other&#x27;s &quot;import&quot; statement.)<p>&gt; strange terminology<p>It&#x27;s not Lisp&#x27;s fault that it&#x27;s old. Being old means it will have terminology that may be alien to what we have today with nothing today being a perfect fit, or alternatively sometimes it expresses mostly what we say today in a different way. (And when you talk about concepts, not just pure language features, you run into incommensurability. See <a href="https:&#x2F;&#x2F;dreamsongs.com&#x2F;Files&#x2F;Incommensurability.pdf" rel="nofollow">https:&#x2F;&#x2F;dreamsongs.com&#x2F;Files&#x2F;Incommensurability.pdf</a> for an example with Mixins.)<p>CLOS for example has these things called &quot;slots&quot; which are more or less &quot;fields&quot; or &quot;class&#x2F;instance variables&quot; in later OOP languages. But it&#x27;s best to think of them as CLOS slots, so that you don&#x27;t bring along any (mis)conceptions from other languages. It&#x27;s sometimes amusing how different other OOP systems are given CLOS was the first to be part of an ANSI standard.<p>&gt; that took place in 2008<p>I rather like that I can often find things decades old about Lisp and they are still relevant. Systems are at least as early as the Lisp Machine (1979). Perhaps it&#x27;s worth going to the original description there? I also sort of like this history diving, even if modern sources obsolete the history in every way that matters. But here is the Lisp Machine manual on the topic: <a href="https:&#x2F;&#x2F;hanshuebner.github.io&#x2F;lmman&#x2F;maksys.xml" rel="nofollow">https:&#x2F;&#x2F;hanshuebner.github.io&#x2F;lmman&#x2F;maksys.xml</a> &quot;The way it works is that you define a set of files to be a <i>system</i>, using the defsystem special form, described below.&quot;<p>Is that unclear? Systems are first and foremost sets of files. Systems also let you define relations between files, primarily which files depend on which other files, as further sentences reveal.<p>If you&#x27;re talking about this page as the first result: <a href="https:&#x2F;&#x2F;common-lisp.net&#x2F;~mmommer&#x2F;asdf-howto.shtml" rel="nofollow">https:&#x2F;&#x2F;common-lisp.net&#x2F;~mmommer&#x2F;asdf-howto.shtml</a> I agree it&#x27;s an awful guide. I&#x27;ve never seen it before, it&#x27;s a shame it&#x27;s the #1 result. You&#x27;d be best served by ignoring it. Systems have nothing to do with CLOS, I assume that guide started trying to use animal parts as a way to elucidate dependencies. (A tail doesn&#x27;t actually depend on legs though?)<p>I don&#x27;t recall how I learned systems, probably because a mix of ASDF&#x27;s manual (<a href="https:&#x2F;&#x2F;common-lisp.net&#x2F;project&#x2F;asdf&#x2F;" rel="nofollow">https:&#x2F;&#x2F;common-lisp.net&#x2F;project&#x2F;asdf&#x2F;</a>), this best practices guide linked from ASDF&#x27;s home page (<a href="https:&#x2F;&#x2F;gitlab.common-lisp.net&#x2F;asdf&#x2F;asdf&#x2F;blob&#x2F;master&#x2F;doc&#x2F;best_practices.md" rel="nofollow">https:&#x2F;&#x2F;gitlab.common-lisp.net&#x2F;asdf&#x2F;asdf&#x2F;blob&#x2F;master&#x2F;doc&#x2F;bes...</a>), just looking at example asd files of popular libraries and applications (<a href="https:&#x2F;&#x2F;github.com&#x2F;CodyReichert&#x2F;awesome-cl" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;CodyReichert&#x2F;awesome-cl</a>), a short ebook I occasionally shill (<a href="https:&#x2F;&#x2F;www.darkchestnut.com&#x2F;book-common-lisp-application-deployment&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.darkchestnut.com&#x2F;book-common-lisp-application-de...</a>), and just actually writing enough lisp and making my own library, were in part or all together enough. When you&#x27;re actually writing software, you can just incrementally compile and load your files (or just eval chunks you&#x27;ve selected with the editor), or if you made a bunch of changes across the whole project then you can just reload your system (if you&#x27;ve defined it) and have everything recompiled and reloaded for you.<p>It&#x27;s worth noting that systems are not part of the ANSI Lisp standard, though. Just as Maven is not part of Java. If you jump straight to Maven without first understanding how to create a Java program with multiple files using javac and jars, you might have a hard time later. Lord knows plenty of people get by relatively fine skipping around though (and might not even touch Maven directly, just do everything from an IDE); you can do this with Lisp too, but you seem to want to understand things more fundamentally.<p>Probably what you need to understand most is the core function &quot;load&quot; (<a href="http:&#x2F;&#x2F;www.lispworks.com&#x2F;documentation&#x2F;HyperSpec&#x2F;Body&#x2F;f_load.htm" rel="nofollow">http:&#x2F;&#x2F;www.lispworks.com&#x2F;documentation&#x2F;HyperSpec&#x2F;Body&#x2F;f_load...</a>). After that you probably want to know about packages (which are akin to namespaces -- bags of symbols, if you already know what &#x27;symbol&#x27; means in the CL context). You may wish to know about the &quot;modules&quot; mini-feature enough to know it&#x27;s deprecated and doesn&#x27;t really provide anything like what you think a module system should, so no one uses it, and that this mini-feature is independent from something else you might find rarely mentioned in ASDF that is unhelpfully called a &#x27;module&#x27;.<p>&gt; packaging in lisp?<p>Lisp itself doesn&#x27;t have a notion of &quot;packaging&quot; in the meaning I&#x27;m inferring from you, so your question is wrong on its outset. It just has things like compile-file and load. If you like, you can loosely refer to a directory of files you load one by one as a &quot;package&quot; or a &quot;library&quot;. You can define a system for those files with ASDF, and treat &quot;loading the system&quot; as something like &quot;loading the library&quot;. When you want to get other &quot;libraries&quot; (directories of files -- just like python eggs or java jars, but lisp libs aren&#x27;t compressed into zips) from the internet, or publish your own, the community standard is <a href="https:&#x2F;&#x2F;www.quicklisp.org&#x2F;beta&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.quicklisp.org&#x2F;beta&#x2F;</a><p>Sorry if this is just more unhelpful text, I can feel your frustration even if I don&#x27;t fully understand it. I do agree that being <i>alien</i> is a detriment to Lisp&#x27;s popularity, but that&#x27;s not going to change. You might find some leverage by working at CL from the less alien Clojure as a starting point. I always thought this two part talk on Clojure for Java Programmers was really good, but the last person I sent it to dozed off watching it, so your results may vary: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=P76Vbsk_3J0" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=P76Vbsk_3J0</a>')