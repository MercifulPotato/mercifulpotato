Item(by='rendx', descendants=None, kids=None, score=None, time=1608840838, title=None, item_type='comment', url=None, parent=25530201, text='From the paper ( <a href="https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;conference&#x2F;osdi16&#x2F;osdi16-angel.pdf" rel="nofollow">https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;conference&#x2F;osdi16&#x2F;osdi16...</a> ) :<p>&quot;Users exchange messages via a Pung client application\nthat deposits the messages into mailboxes in the Pung\ncluster. These mailboxes are addressed by a label that is\nknown to both the sender and the recipient.<p>The Pung cluster acts as a point of synchronization for clients and dictates when a new round starts. During each round, client applications issue exactly one send and one retrieve. [...] This ensures that clients issue requests at a constant rate. In Section 4 we relax this model and let clients issue multiple send and retrieve requests per round, enabling several applications and achieving lower (amortized) costs.<p>The Pung cluster is effectively a key-value store that treats mailbox labels as keys, and (encrypted) messages as values. This means that users’ communication depends on their ability to agree on a label under which to store and retrieve messages. This label should be unique (to avoid multiple pairs of users overwriting each other’s messages), and it must also be independent of the users communicating (otherwise an adversary could link a label to a conversation).<p>[...]<p>Mailbox systems: Finally, there are a number of systems that employ an architecture and techniques similar to Pung’s (clients retrieve messages from per-round mailboxes kept at third-party servers). The key differences between these works and Pung is their reliance on at least one correct server, and the mechanisms that follow from that assumption.&quot;')