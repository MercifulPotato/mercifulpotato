Item(by='rvense', descendants=None, kids=None, score=None, time=1605797514, title=None, item_type='comment', url=None, parent=25149335, text='&gt; You know that you can create themes in GTK (a Desktop GUI) using CSS nowadays, right?<p>Does GTK offer CSS layouts? Do I describe the elements of the UI using HTML? As far as I know they just use a subset of CSS - aren&#x27;t the selectors predefined by the framework? I don&#x27;t recall, exactly. But GTK provides an entirely different set of primitives, I don&#x27;t think it&#x27;s the same problem at all if you&#x27;re just providing fonts and colours. Again, I&#x27;m talking about something rather specific, creating complex, desktop-like user interfaces using HTML and SPA frameworks.<p>&gt; behavior (how it works) and presentation (how it looks) are still separate concerns.<p>Yeah, but I wouldn&#x27;t say that that distinction maps to the distinction between CSS and HTML at all, not in my context. HTML, especially document structure, is also presentational. That&#x27;s really what I mean when I say it&#x27;s not a &quot;document&quot;.<p>And any way, no matter which approach (and platform, I&#x27;d wager) you use, if you want to completely restyle a complex GUI application like what I&#x27;m writing in the way you could restyle HTML documents like the Zen garden, you&#x27;re looking at some serious engineering effort in keeping the so-called behavioural HTML and Javascript in check and documented. It won&#x27;t just be about how you handle the CSS, it&#x27;ll be about how you handle everything.<p>&gt; Yeah, others have though - both as consumers and as integrators. If you are okay with the idea of re-inventing wheels every time you want to have a different color, plenty of people are not.<p>I actually feel like I have better control of my colours with Tailwind than I ever did. Currently I&#x27;m using a limited selection specified in the Tailwind theme. They have names like $adjective-$colour, so it&#x27;d be weird to change them, but if that&#x27;s important to you that things are themable, as I stated, you can put in the effort to set it up with semantic names and make them customizable at build time or at run time. I still think you&#x27;d have a better experience than making separate classes for every tag and reimplementing that for each theme.<p>&gt; It&#x27;s not a matter of being afraid to touch HTML. It&#x27;s a matter of not being able to! ...<p>And all of these things you list are not what I do. The examples that you list have a different set of trade-offs. I&#x27;m not embedding other people&#x27;s code in my GUI, and I don&#x27;t expect them to take a random chunk of my application and put them into theirs. OpenDoc was a fun idea, but it didn&#x27;t take off.<p>&gt; What made the web as interesting as an application platform was the idea that the user agent could be extended.<p>I don&#x27;t really know about that in the general case, I think there are more reasons than that, but in the specific case I&#x27;m certain it&#x27;s wrong. The reason my company is doing what it&#x27;s doing on the web is 100% about distribution. Arguably, the web stack isn&#x27;t even that good for making the kind of UIs I do - but if we did what we&#x27;re doing in Java, we wouldn&#x27;t get any users (or investors).<p>I totally agree with you about openness, but openness in my space means providing good APIs and integrations with other services, not allowing user stylesheets. A user stylesheet for my app would mean a twenty page list of weirdly interdependent CSS selectors, and the end result for someone who implemented it would be something like a colour theme that only works for app. Explain to me who would want that.')