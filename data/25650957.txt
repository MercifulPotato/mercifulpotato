Item(by='blablabla123', descendants=None, kids=None, score=None, time=1609880377, title=None, item_type='comment', url=None, parent=25648281, text='It probably doesn&#x27;t work to convince you, still I see that differently ;)<p>About generics, it depends on the problem at hand. When writing a generic Matrix multiplication type that for instance should work both on real and complex numbers (or more obscure types) generics are a thing. On the other hand, when working for instance with golang.org&#x2F;x&#x2F;net&#x2F;html, I really appreciate the interface definitions and the possibility to do type switches on those.<p>The error handling problem can also be dealt with. I also prefer to not shadow variables, IMHO the ideal function has all its variables defined already in the signature.<p>I mean there are stack traces when a panic is called, or something that wraps it like a log.Fatalf. I guess the idea is the author is giving much more thought to how errors are dealt with and how they are printed in a both useful (=greppable) and beautiful way. As an end user that doesn&#x27;t want to dive into the code I probably always prefer to see a nicely formatted error message (or even a gracefully handled error) instead of a 100 line stack trace. Probably Go is not just the language spec but also how to use it. Therefore saying &quot;Learning Go in 5 minutes&quot; is probably a bit far-fetched ;-) (Probably for any language that would be true...)')