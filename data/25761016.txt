Item(by='ggerganov', descendants=None, kids=[25762702], score=None, time=1610539522, title=None, item_type='comment', url=None, parent=25761010, text='Hello HN,<p>This is a hobby project that I have been working on and off for the past few years. It started with a simple PoC [0] for sharing files through WebRTC using sound signaling to exchange the SDP between peers and I recently decided to extract the data-over-sound part into a standalone library [1] so I can use it in different projects. The current post is one such project: &quot;Waver&quot; - a simple application with the primary purpose to showcase the capabilities of my data-over-sound library. The main functionality of the app is to exchange short text messages through sound with nearby devices. All you need to use it is to enable the device&#x27;s speakers and microphone. The app also includes an early prototype for sharing files with sound signaling. The app runs on iOS, Android, Linux, Mac OS and Web - I put quite some effort to make it easy to try out :)<p>The implemented data-over-sound protocol is quite simple. It is essentially a 6-tone FSK modulation scheme with special markers to mark the start and end of the transmission. The bandwidth is quite low (8-16 B&#x2F;s), but I think the transmission is reliable. I&#x27;ve been testing it with a few devices across the room and it seems robust enough. The ultrasound protocols especially are very robust to surrounding noise.<p>An additional challenge I had to solve while working on the data-over-sound protocol was to make the encoded data sound good to the human ear.\nAlthough the current sound is not the most pleasant thing to hear (especially the markers), I think it turned out relatively OK :-)<p>There are a few reasons about why I decided to implement this FSK approach instead of using an existing and well-known modulation scheme used by modems:<p>- My DSP knowledge is fairly limited<p>- Most modulations typically sound like noise (not very pleasant to the ear)<p>- Reliable air-gapped transmission seems to be much more difficult to achieve compared to over-the-wire<p>- But mainly because I find it more fun to implement something from scratch<p>There are similar solutions available on the market, but I feel they are difficult to try out. I wanted to make something free and very easy to test and see how it works.\nThe data-over-sound library [1] still needs some work, but it&#x27;s getting there. I am hoping to find some fun and potentially useful applications of this, so I am looking for ideas.\nAlso, any feedback about the performance is very much appreciated.<p>If you decide to try out the Waver app, make sure to watch the 2 min video in the link [2] for a quick tutorial. Also, there is a small easter egg at the end of the video :-)<p>[0] - <a href="https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;wave-share" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;wave-share</a><p>[1] - <a href="https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;ggwave" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ggerganov&#x2F;ggwave</a><p>[2] - <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Zcgf77T71QM" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Zcgf77T71QM</a>')