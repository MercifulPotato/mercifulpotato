Item(by='kd5bjo', descendants=None, kids=None, score=None, time=1606410984, title=None, item_type='comment', url=None, parent=25221385, text='&gt; Is there even a single benefit to using PEG?<p>In a formal sense, there are some non-context-free languages that PEG can recognize ( A^n B^n C^n is the classic example ).  It’s an open question whether there are any context-free languages PEG isn’t capable of recognizing.<p>Fundamentally, PEG is a formalization of the common practice of writing a recursive-descent parser: It defines languages based on an exemplar algorithm that parses them instead of the generative approach taken by BNF, which defines how you can enumerate the legal strings of the language.  They’re both as mathematically rigorous as each other, but approach the problem space from opposite sides.<p>For BNF, ambiguity is a question of whether the generation process is reversible: An ambiguous grammar has multiple paths that produce the same string which means that there’s no way to recover the path used to generate that string.<p>PEG is “unambiguous” because it’s not based on a generative model <i>at all</i>, so this definition is nonsensical.  With PEG, we know, by definition, how any given string will parse but it can be hard to enumerate the strings that will parse in a given way.  If PEG has an interesting notion of ambiguity (which it probably does), that’s the place to look for it.')