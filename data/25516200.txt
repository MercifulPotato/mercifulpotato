Item(by='siraben', descendants=None, kids=None, score=None, time=1608718601, title=None, item_type='comment', url=None, parent=25505701, text='wrt. defunctionalization, another resource that requires only basic understanding of functional programming (lambdas and ADTs) and equational reasoning to understand it is lecture 4 of [0]. The procedure is quite straightforward if approached from a program derivation standpoint; first convert the program into CPS (see end of lecture 1). That is, solve the equation `progCont e k = k (prog e)` given prog. Then convert the closures into first-order structures by identifying the free variables they capture and deriving the closure-free version.<p>I really like Bartosz&#x27;s blog post on defunctionalization and Freyd&#x27;s theorem[1].  It&#x27;s probably better to understand Freyd&#x27;s theorem in the usual categorical presentation as Bartosz dualizes many things (because instead of a huge product of all environments we have a huge coproduct of possible environments, then select the &quot;best&quot;&#x2F;&quot;minimal&quot; one using some universal cone as opposed to a maximal product).<p>Truly, defunctionalization is one of those things that can satisfy curiosity on many levels of abstraction from assembly to categories.<p>[0] <a href="http:&#x2F;&#x2F;www.cs.nott.ac.uk&#x2F;~pszjlh&#x2F;pcalc.html" rel="nofollow">http:&#x2F;&#x2F;www.cs.nott.ac.uk&#x2F;~pszjlh&#x2F;pcalc.html</a><p>[1] <a href="https:&#x2F;&#x2F;bartoszmilewski.com&#x2F;2020&#x2F;08&#x2F;03&#x2F;defunctionalization-and-freyds-theorem&#x2F;" rel="nofollow">https:&#x2F;&#x2F;bartoszmilewski.com&#x2F;2020&#x2F;08&#x2F;03&#x2F;defunctionalization-a...</a>')