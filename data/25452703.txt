Item(by='jjk166', descendants=None, kids=[25452857], score=None, time=1608181560, title=None, item_type='comment', url=None, parent=25447903, text='&gt; The difference is in natural languages you can make tons of errors and be extremely fuzzy and it won&#x27;t harm the interpretation.<p>&gt; Natural languages are so full of ambiguity that even native speakers from similar regions often confuse one another.<p>These two statements are contradictory. There&#x27;s a difference between not caring that an error is present and being robust to error. Natural language represents the former. Yes I might not shout &quot;Error: finger shoes not recognized&quot; but that error nevertheless occurred, I don&#x27;t actually know what they meant. I&#x27;m going to assume gloves, but if their life depended on me getting them mittens they&#x27;ed probably wish I had said I don&#x27;t understand. Luckily, we live in a world where getting things wrong is typically harmless, but history is full of disastrous misunderstandings. If you are doing something important like drawing up a legal contract, your lawyer should have no problem telling you &quot;that wording is unacceptable.&quot; which is conceptually no different from a compiler&#x27;s syntax error.<p>Natural language and programming languages are different in many ways in terms of degree. Natural languages need to be used in vastly more circumstances, they have been in use for vastly longer, and they generally represent an ad hoc development cycle involving millions of independent contributors. They thus have much more deprecated functionality and conflicting user conventions. But while different in degree, the two aren&#x27;t really different in kind - every fundamental trait of one is shared by the other, which is why the fuzzy compiler for natural language will accept the terms for a programming language as a substitute without raising any error.')