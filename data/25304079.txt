Item(by='pron', descendants=None, kids=None, score=None, time=1607098963, title=None, item_type='comment', url=None, parent=25303818, text='&gt; What about Java records are different than Kotlin&#x27;s data classes<p>Java records, like enums (another feature that is philosophically very similar to records) aim not to reduce the boilerplate of certain operations, but to designate a subset of classes with particular semantic properties (and make those easy to express). In the case of enums, that subset is classes with a well-known, fixed set of instances; for records that is nominal tuples, i.e. immutable, unencapsulated data aggregates, similar to ML&#x27;s product types. So users, the compilers, and libraries can make certain assumptions about records. For example, their semantic properties (that they are no more than a product of their component types) allow a much better serialization story for them and, indeed, record classes are serialized differently from non-record classes: Instead of invoking a no-arg constructor, their canonical constructor is invoked on deserialization. Their immutability also makes automatic implementations of equality, deconstruction and pattern matching clear and correct.<p>Just like Kotlin couldn&#x27;t do user-mode threads efficiently because they have no control over the platform, there was also little point in doing records, because that language&#x27;s goal was to make it easier, syntactically, to work with the existing Java ecosystem, and, prior to records, Java programmers worked with JavaBean-like classes, so Kotlin tried to make those operations more syntactically pleasant. Java&#x27;s designers, however, can have an impact on what that ecosystem does and can change its direction.<p>&gt; As an aside, I understand you are an Oracle employee.<p>Yes. I work on OpenJDK.<p>&gt; When you post under this username are you acting in any kind of official capacity for Oracle?<p>Absolutely not. I speak only for myself. I&#x27;m the technical lead for Project Loom, and I want to see what kind of reactions people have to it on social media (as well as conferences, customer meetings, surveys etc.). I guess I see it indirectly as part of my job, at least as far as Loom goes, as these interactions help inform how we explain the capabilities, what features people want etc.. It&#x27;s nothing official, though. It&#x27;s also a harmful personal addiction.')