Item(by='jerf', descendants=None, kids=None, score=None, time=1609865944, title=None, item_type='comment', url=None, parent=25647362, text='It depends on your definition of &quot;C&#x27;s philosophy&quot;, no sarcasm, and no implied preference by me for any particular definition, as I believe many have merit. Language philosophies evolve, and C, being so many decades old, has evolved a lot. The original philosophy is probably little more than a seed crystal at this point for the several philosophies that have been loaded on to it over the years.<p>It is probably reasonable to say that Zig is closer to C&#x27;s current philosophy in practice, which encompasses many additional developments over the decades to deal with various aspects of C and programming real machines that have arisen as both have changes, and Go closer to C&#x27;s original philosophy of simplicity and relative ease of use. (In modern times, C is not one of the easier languages to use any more, due to significant advancements in the field of making easy-to-use languages. But it was originally intended to be an advancement there itself.)<p>By similar logic, I can say with a straight face that all of Go, C++, Zig, Rust, and Swift (and more) are &quot;evolutions in general-purpose programming languages like C&quot;, despite their wild differences, because the world has gotten larger, and there is room for a lot of variations like that, each addressing different aspects of the newer, larger world.')