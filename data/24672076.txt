Item(by='notacoward', descendants=None, kids=[24673140, 24673008, 24675149, 24675027], score=None, time=1601732863, title=None, item_type='comment', url=None, parent=24661653, text='There&#x27;s no simple slam-dunk on either side of this issue, but I was a bit surprised that some of the more common arguments that I&#x27;ve heard in favor of kernel networking didn&#x27;t get mentioned.<p>The #1 reason I&#x27;ve heard is features. When you use the kernel stack you have a dizzying array of protocols, congestion-control algorithms, and other features available to you. You have all sorts filtering and rerouting and rate-control features, from old iptables to netfilter and eBPF. There&#x27;s all sorts of familiar monitoring. User-space stacks <i>never</i> duplicate all of this, nor should they. They should support their own use cases, no more, but that means there will still be <i>a lot</i> of people who are better off with the kernel stack.<p>The #2 reason I&#x27;ve heard is that the kernel stack is <i>known </i> to work in a broad variety of environments. User-space stacks are often used in constrained environments where the device only has to communicate in certain ways with certain peers across a certain network topology. The kernel stack is known to work in a <i>vast</i> array of combinations <i>simultaneously</i> with less need for local debugging. There are also security aspects here. For example, a good TCP&#x2F;IP stack will have features to mitigate DoS attacks both inbound and outbound, whereas some user-space stacks do things like &quot;forget to implement&quot; proper congestion control so they can DoS others. Whatever vulnerabilities do exist in the kernel stack tend to become known and fixed rather quickly. In your user-space stack? Good luck.<p>I&#x27;m not actually arguing that more people should use the kernel stack. There are plenty of good reasons to go the other route when appropriate. I&#x27;m just trying to present arguments I&#x27;ve seen and which should be considered when making that choice. The OP seems to look at things from a bit of a &quot;single machine, single purpose&quot; POV, which naturally skews the outcome toward user-space stacks, but in an era of virtualization and containers we need to consider multi-purpose machines as well.')