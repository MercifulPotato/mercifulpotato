Item(by='hinkley', descendants=None, kids=[24984985], score=None, time=1604427444, title=None, item_type='comment', url=None, parent=24982302, text='This got so long I decided to split it in two:<p>It is important to note you can&#x27;t pull <i>all</i> of the tests down. I tend to use a plumbing analogy that I probably have stolen from the literature or a mentor - It&#x27;s likely that QA already tested all of the pipes at the factory before they were installed in your house. But every plumber will turn on the taps and flush the toilet at once before they leave, to make sure the stuff going in one end actually comes out the other (and <i>only</i> the other). Test all the bits in isolation, but always leave at least one happy and one unhappy path test going through the whole stack to make sure good and bad answers end up in the right place. I think here the pyramid analogy is a bit wrong, because in the pyramid there&#x27;s a geometric reduction at each level, but I have a suspicion that in a best case scenario, you can achieve a log scale reduction (because your E2E tests can potentially reflect the height of the decision tree, rather than the surface area of a module)<p>Tests higher up the pyramid rarely if ever suggest, let alone demand API improvements. If the first person writes elaborate mocks instead of simplifying the design to not need them, they&#x27;ve locked in the implementation in a way that unit tests don&#x27;t (Sunk Cost). This can turn a masochistic programmer into a sadist.<p>And that is the trap most of us fall into the first few times, and some never outgrow. It&#x27;s easier to write greenfield E2E tests, but they&#x27;re hell to maintain, and the create a codependent testing relationship, where the existence of the tests dissuades you from engaging in healthier activities. I almost think that you should ban E2E testing frameworks until the team has gotten comfortable with Unit Tests because of this. With E2E, you can get really far down the wrong road and find yourself in a blind alley that you now lack the imagination or conviction to escape, because everything else feels remedial. That is the main problem with unit tests - they feel like some sort of grade school activity. Doing something so simple feels like doing multiplication tables, which is kids work. I am a smart and functional adult, I shouldn&#x27;t be doing something so boring. This is making me feel dumb.<p>It takes a special disposition to enjoy a simple task for what it is, and many software developers - myself included - were lured into software by the idea of automating any task that is so simple. Rarely do I let production code be so dominated by idioms with so little meat, so why do I enjoy that in tests? Honestly, I don&#x27;t have an answer, except &quot;better in the tests than in the production code,&quot; which is hardly an answer at all.<p>And importantly, all of these uneasy feelings are used as evidence by anti-testing people that it&#x27;s too painful and too little gain and we should stop doing it. A form of learned helplessness.')