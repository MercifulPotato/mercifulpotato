Item(by='josephg', descendants=None, kids=None, score=None, time=1610789806, title=None, item_type='comment', url=None, parent=25800000, text='Sure ... My question is, what do you think the upper bound on performance is for a performance-oriented rust compiler? Like, if the whole compiler were written to optimize the edit-build-run cycle, how many times faster could it go?<p>Exhibit A, in our recent history of compilers we&#x27;ve had lots of examples of compilers &#x2F; runtimes which <i>seemed</i> like they were pretty close to the threshold, only for another compiler to come out of nowhere and compile <i>many times</i> faster. Examples: (everything before V8) -&gt; V8, Lua -&gt; LuaJIT, Gcc -&gt; clang (when it was new). And this is cheating but I&#x27;m doing it - every C compiler -&gt; Go&#x27;s compiler.<p>So the question is, how surprised would you be if some serious, experienced compiler people were capable of making a rust compiler that was 3x faster than rustc? Personally I would be not surprised at all. I suspect a lot of rustc&#x27;s slowness comes from a combination of unavoidable time spent in llvm plus all the work rustc needs to do to convert rust to llvm IR. Its a bit of a smoking gun that most compilers built on top of llvm are pretty slow - swift, c++, rustc, pony, etc. And all the fast compilers have their own backend (go, v8, luajit, jai, etc). So yeah, I&#x27;m hopeful for MIRI and cheering from the sidelines.')