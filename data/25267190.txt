Item(by='TheAsprngHacker', descendants=None, kids=[25267621, 25268238, 25267358], score=None, time=1606842941, title=None, item_type='comment', url=None, parent=25249471, text='The approach of incrementally introducing language features is what Matthias Felleisen advocates: <a href="https:&#x2F;&#x2F;felleisen.org&#x2F;matthias&#x2F;Thoughts&#x2F;Developing_Developers.html" rel="nofollow">https:&#x2F;&#x2F;felleisen.org&#x2F;matthias&#x2F;Thoughts&#x2F;Developing_Developer...</a> Felleisen&#x27;s argument is that all general-purpose languages are too big to be appropriate for teaching, and you should use specialized teaching languages. In Northeastern University&#x27;s introductory programming class, students start with a minimal Scheme called Beginning Student Language (which has primitives, function application, if, cond, and top-level define), then move up to Intermediate Student Language (which adds local), then Intermediate Student Language with Lambda (which adds function literals). Each addition is given a motivation (locals let you avoid repeat computations, local functions let you capture the environment, lambdas let you use local functions without giving them a name).<p>But Hedy seems to make the mistake that many curriculums do of focusing on the minutiae of syntax. Don&#x27;t do that! Northeastern&#x27;s course emphasizes broad concepts such as abstraction, accumulators, and generative recursion. Meanwhile, it uses simple s-expr syntax.')