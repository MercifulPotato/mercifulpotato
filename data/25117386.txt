Item(by='adamkl', descendants=None, kids=[25120907], score=None, time=1605563305, title=None, item_type='comment', url=None, parent=25116959, text='&gt; The domain model is just a data structure that reflects functional requirements, and the application is just a bunch of code that directly or indirectly operates over that data structure.<p>You are right! I learn something new every day.<p>&quot;Although a model-driven design does not have to be object oriented, it <i>does</i> depend on having an expressive implementation of the model constructs, be they objects, rules or workflows. If the available tool does not facilitate that expressiveness, reconsider the choice of tools&quot; - Eric Evans, Domain Driven Design, Ch 5<p>Now although Eric specifically states that a model-based design doesn&#x27;t have to follow an OO approach (he gives Prolog&#x2F;Rule Engines as an alternative), the bulk of the rest of his book does demonstrate how to model a domain using OO techniques. I guess that is why I (and maybe most people) associate DDD so strongly with object oriented design.<p>I wonder if he had written his book in 2020 he would have included functional modeling approaches along side the OO examples.')