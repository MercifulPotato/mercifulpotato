Item(by='striking', descendants=None, kids=None, score=None, time=1601916294, title=None, item_type='comment', url=None, parent=24687470, text='In my opinion, I would really prefer that GraphQL stay as simple as it is. It&#x27;s already very easy to cause performance issues on servers and be forced to work around said performance issues.<p>In your translate example, why not just apply @translate to every field? It&#x27;s simpler than having to modify the spec to enable it to do something truly magical when the current ability to just fetch data and maybe tag it with some operation or annotation is enough most of the time. Or perhaps it could be contextual, where the user settings &#x2F; context set the language.<p>Sometimes I wish Facebook hadn&#x27;t called it GraphQL. Because the &quot;QL&quot; reminds people of SQL, which this very much isn&#x27;t and shouldn&#x27;t be.<p>EDIT: I&#x27;ve gone and clicked your link for your proposal for embeddable fields, and found this snippet.<p><pre><code>  mutation {\n    comment(id: 1) {\n      replyToComment(data: data) {\n        id @sendEmail(\n          to: &quot;{{ parentComment.author.email }}&quot;,\n          subject: &quot;{{ author.name }} has replied to your comment&quot;,\n          content: &quot;\n            &lt;p&gt;On {{ comment.date(format: \\&quot;d&#x2F;m&#x2F;Y\\&quot;) }}, {{ author.name }} says:&lt;&#x2F;p&gt;\n            &lt;blockquote&gt;{{ comment.content }}&lt;&#x2F;blockquote&gt;\n            &lt;p&gt;Read online: {{ comment.url }}&lt;&#x2F;p&gt;\n          &quot;\n        )\n      }\n    }\n  }\n</code></pre>\nThis is a situation wherein I would really, <i>really</i>, prefer that the client not be doing this work. The server should be doing as much work as possible, so the clients can avoid duplicating logic and requiring workarounds when clients get stuck on old versions that can&#x27;t be upgraded.')