Item(by='rvense', descendants=None, kids=None, score=None, time=1605768561, title=None, item_type='comment', url=None, parent=25146612, text='&gt; It&#x27;s not like Tailwind is SAP or something. It&#x27;s just CSS. You shouldn&#x27;t need to re-work your entire process around it.<p>No, your designers should already be working to scales for size, colour etc. which you can implement in Tailwind. If they don&#x27;t, now&#x27;s a good time to start.<p>&gt; How the hell does that help with consistency? You have to copy paste that mess every time you create a new button<p>You&#x27;re extremely not supposed to copy-paste that. You&#x27;re supposed to extract it somehow, either with your Javascript component framework, or by making a semantic class with the @apply directive.<p><a href="https:&#x2F;&#x2F;tailwindcss.com&#x2F;docs&#x2F;extracting-components" rel="nofollow">https:&#x2F;&#x2F;tailwindcss.com&#x2F;docs&#x2F;extracting-components</a><p>The difference is that Tailwind allows you do some quick work without coming up with abstractions. So you work bottom up instead of top down.<p>&gt; then guess what happens if the button you copied from needed special margin?<p>That&#x27;s the beauty of it! You have a button class, and then if your button needs &quot;a little extra&quot; you add the button class and the margin utility.<p>At my previous job, when this situation came up, the normal way was to make a BEM class specific to the location, import the button in that (with a SCSS mix-in) and add the margin. So the HTML would have a class name that was specific to this one button, but you didn&#x27;t know what it added: class=&quot;info-page__navigation__button&quot;. With Tailwind, you get &#x27;class=&quot;btn mx-2&quot;&#x27; and you can basically see what it&#x27;s going to look like.')