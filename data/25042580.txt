Item(by='dragontamer', descendants=None, kids=[25044415], score=None, time=1604979039, title=None, item_type='comment', url=None, parent=25024901, text='I&#x27;ve written about it elsewhere, but I think that concurrency is easier if you really stick to a methodology.<p>Fork-join is the simplest methodology, and supported in a very wide number of languages. In fact, its so stupidly easy, you probably are going to over-think it the first time you use it.<p>1. Fork when you need concurrency (aka: speed)<p>2. Join when you need consistency<p>That&#x27;s it. Don&#x27;t write mutexes, don&#x27;t write barriers. Just join. That&#x27;s all you need: if you ever need &quot;synchronized&quot; access, do it in the &quot;single&quot; or &quot;master&quot; thread, when all other threads are joined.<p>You _cannot_ have a race-condition if you only have one thread. Joins ensure that only one thread is running. What else do you want?<p>Fork-join parallelism has relatively low utilization. Its not the fastest approach, but its the &quot;easiest&quot; approach in my eyes.<p>------------<p>The #1 issue with parallelism books, in my eyes, is that we start with mutexes and threads, which are a very hard way to do parallelism.<p>I argue instead: beginners should start with easy (but inefficient) forms of parallelism, and then work their way towards complicated tools as performance becomes more-and-more of a consideration.')