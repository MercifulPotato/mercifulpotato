Item(by='blindseer', descendants=None, kids=[24683986, 24682958, 24683824], score=None, time=1601851728, title=None, item_type='comment', url=None, parent=24681729, text='I (mostly) like when programming languages allow you to express ideas with dedicated syntax. It (usually) is more clear and concise. Even if I don&#x27;t use all the syntactic sugar in a language, I often find myself wanting to use a significant number of these features.<p>However, this brings me to my biggest gripe with the Python ecosystem. For better or for worse, Python is used EVERYWHERE. And, to make matters worse, standard tooling that manages dependencies and versions of Python is a complete mess.<p>Just in the last couple of months I&#x27;ve written Python packages for applications embed a Python 3.3 interpreter. And I still work with code that runs only in Python 2.6 (working with hardware). In these projects, I can&#x27;t use these new &quot;features&quot; even if I wanted to.<p>The tenet of my comment is this:<p>I really wish there was a standard source to source transpiler that helped in converting Python 3.x code to Python (2|3).(y).<p>Almost all the features I&#x27;m envious of either have a way to be represented in older languages more verbosely (f-strings, :=) or don&#x27;t need to be in the source on the user end (type hinting, dataclasses, keyword only arguments). I know there&#x27;s not a one to one mapping here, but even a best effort would go a long way to helping adoption of these new features. I don&#x27;t see the Python folks slowing down when adding new features to the language.<p>I really wish I could use these features today but I know I can&#x27;t. I also hesitate sometimes when I&#x27;m making a package open source because I&#x27;m worried someone else might want to use my code in an older version of Python and won&#x27;t be able to because I wanted some syntactic sugar (I&#x27;ve even received PRs on project to revert some changes), and I now actively choose not to use these features against my desires. Larry Hastings may have said farewell to Python 3.5 but lord knows when I will be able to do the same.<p>Is this just me? How many people use `:=` or `@dataclass` or `|` for dict merges in their code today?')