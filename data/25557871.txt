Item(by='souprock', descendants=None, kids=[25558055], score=None, time=1609147545, title=None, item_type='comment', url=None, parent=25557578, text='It is common to have a bit which causes an instruction to update flag bits. PowerPC arithmetic instructions have an &quot;Rc&quot; field, usually the LSB, indicated by a trailing &quot;.&quot; in the assembly syntax. ARM arithmetic instructions have an &quot;S&quot; field, usually bit 20, indicated by a trailing &quot;S&quot; in the assembly syntax.<p>Bundle + offset is fine. The offsets don&#x27;t need to be real. In the example given with 25-bit and 50-bit instructions, allowable low nibbles of instruction addresses might be: 0 1 2 3 4 (so it goes 0x77777773, 0x77777774, 0x77777780, 0x77777781, etc.)<p>I disassemble binary executables as my full-time job. I&#x27;ve dealt with over a dozen different architectures. I commonly deal with PowerPC, ARM, MIPS, x86-64, and ColdFire. The extra registers of PowerPC and MIPS are always wasted. Even with ARM and x86-64, unused registers are the norm. It simply isn&#x27;t normal for a compiler to be able to make effective use of lots of registers. Surely there is an example somewhere that I haven&#x27;t yet seen, but that would be highly abnormal code.<p>If more registers could be used by compilers, the Itanium would have been a success.')