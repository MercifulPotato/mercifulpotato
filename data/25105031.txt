Item(by='bastawhiz', descendants=None, kids=[25107148, 25105217, 25105963], score=None, time=1605475590, title=None, item_type='comment', url=None, parent=25101820, text='This article doesn&#x27;t use the word &quot;permission&quot; or &quot;validation&quot;, which is concerning.<p>The only mention of security hand waves away the idea of access control to a &quot;thin back end&quot;. That&#x27;s the whole point of this post! The details of this are critical!<p>&gt; you can define an API that takes an SQL query from the client, runs it, and returns the results. This query can be run under a database user account that has only read access, that too only to the friends table. This can accommodate unforeseen uses, like getting the number of friends rather than the actual list. Or if thereâ€™s a search box where the user can filter his friends, you can do a LIKE query. Or you can limit the number of friends returned to how many will be displayed in the UI.<p>Without mentioning how this has been solved elsewhere, this is an incredibly reckless piece of advice. For one, it&#x27;s nearly impossible to parse and check an arbitrary SQL query for malicious intent. Besides ensuring that queries that should read <i>only</i> read, you also need to make sure that queries aren&#x27;t designed to intentionally DoS your DB.<p>And moreover, it now passes the responsibility of query performance to the FE engineer. Are appropriate indexes in place? Does the query make inappropriate JOINs?<p>And on top of all of that, schema changes now mean that you need to update your front end code. This means guaranteed hard downtime, because you can&#x27;t control what JS folks are running in the browser.<p>There&#x27;s a lot wrong with the ideas presented here.')