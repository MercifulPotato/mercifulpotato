Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1604701128, title=None, item_type='comment', url=None, parent=25011469, text='Your understanding is correct. Waterfall (may it die a fiery death) is at an extreme that assumes it&#x27;s possible to know everything upfront. What most people fail to understand (who like it) is that Waterfall fails to scale. Agile is (almost) at the other extreme.<p>Waterfall cannot scale beyond either well-understood domains (a web shop that uses RoR could probably apply Waterfall to a new project at this point, with over a decade of experience for each member of the team) or smaller systems (I&#x27;d say no bigger than around 100k SLOC of C code, beyond that your system usually becomes too complex) or short time lines (less than 3-6 months, which implies smaller systems). The assumption of complete and proper understanding will bite you on either a larger project or novel domain (novel to you or the world) or a longer timeline.<p>Agile (I&#x27;ll take Scrum&#x27;s 1-2 week cycle + extreme programming) aims to shorten the feedback loop so you know that not only have you built what you thought you built (verification) but also what your customer wanted you to build (validation) on a regular basis.<p>If you&#x27;re wrong with Waterfall, you&#x27;ve wasted years. If you&#x27;re wrong with Agile, you&#x27;ve wasted weeks.<p>And boy can you be wrong with Waterfall. I joined at the tail end of a 5-year Waterfall project, and they had fucked it up. Over 300 people had worked on it, and it was the wrong damn thing (had half the features needed by the time it shipped, and those half barely worked, and if they worked they were too slow to actually be useful). 1500 years, let&#x27;s say an average of 75 years per lifetime. That was 20 human lifetimes wasted. And let&#x27;s not talk about the billions of dollars that went into it. (300 is probably a low estimate, once you get into the subs of the subs of the subcontractors it&#x27;s hard to get a good tally.)')