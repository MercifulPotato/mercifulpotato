Item(by='jiggawatts', descendants=None, kids=None, score=None, time=1610246977, title=None, item_type='comment', url=None, parent=25703467, text='Even old operating systems like Windows NT4 could easily memory map a window into a file as large as 256 MB at a time, and could map multiple segments concurrently. It could do this even if there was much less physical memory available, because this is a virtual memory mapping only.<p>Well-written code would start with a sliding window of some reasonable size such as 64 MB, and if that failed would try halving it repeatedly down to some lower threshold.<p>Unfortunately, the 64-bit era has lead to a &quot;pit of failure&quot; where many programmers incorrectly assume that this means that 2⁶⁴ bytes can be mapped reliably in a single call. This is never true, because of all sorts of operating system and hardware limitations.<p>I&#x27;ve seen &quot;modern&quot; code written with this assumption, such as a Rust library and a couple of C# libraries. They fail on older Xeons, some hypervisors, and 32-bit platforms.<p>Even in 2021 server applications run as 32-bit surprisingly often. For example, Azure&#x27;s App Service defaults to 32-bit on the low-end tiers to save memory.')