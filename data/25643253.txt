Item(by='vanderZwan', descendants=None, kids=[25645171], score=None, time=1609833505, title=None, item_type='comment', url=None, parent=25633483, text='If you don&#x27;t mind, I&#x27;ll plug a little innovation of my own: mixing ordered and error diffusion dithering. The idea behind it is actually pretty simple: <i>technically</i> all forms of dithering use a threshold map, we just don&#x27;t tend to think of it when it&#x27;s one flat threshold for the entire image. So there is nothing stopping us from decoupling the threshold map from the rest of the dithering algorithm, meaning it&#x27;s trivial to combine error diffusion with more complex threshold maps:<p><a href="https:&#x2F;&#x2F;observablehq.com&#x2F;@jobleonard&#x2F;ordered-error-diffusion-dithering" rel="nofollow">https:&#x2F;&#x2F;observablehq.com&#x2F;@jobleonard&#x2F;ordered-error-diffusion...</a><p>(For the record, I picked a default example that highlighted a &quot;hybrid&quot; dither with a very dramatic difference from its &quot;parents&quot; instead of the <i>prettiest</i> result)<p>Interestingly, and perhaps not surprisingly, a variable threshold map interacts with the error diffusion itself, making it amplify local contrast and recover some fine detail in shadows and highlights (although also possibly overdoing it and crushing the image again).<p>What&#x27;s also somewhat interesting (to me at least) that this is really simple to implement: take any error diffusion dithering kernel and make it use the threshold map from ordered dithering. In principle it should have been possible to use them on any old hardware that can handle error diffusion dithering.')