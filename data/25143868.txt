Item(by='rglullis', descendants=None, kids=[25144339, 25146872, 25144410], score=None, time=1605740869, title=None, item_type='comment', url=None, parent=25143770, text='&gt; But now you still have the issue of coming up with CSS class names.<p>Not entirely true. I&#x27;d be totally fine with class names that identify what type of widget it is. <i>&lt;div class=&quot;card&quot;&gt;</i>, <i>&lt;div class=&quot;modal&quot;&gt;</i> <i>&lt;button class=&quot;secondary-action&quot;&gt;</i>, or <i>&lt;span class=&quot;clipboard-copy&quot;&gt;</i> are &quot;made up CSS class names&quot; that identify a type of widget and used without making no assumption about presentation concern. <i>&lt;button class=&quot;btn btn-small&quot;&gt;</i> and <i>&lt;div class=&quot;w-12 rounded-small&quot;&gt;</i> are not.<p>And yes, I understand that tailwind allows you to create types and @apply them. What I am saying is that (1) I&#x27;d like to see this separation to be <i>enforced</i> and not just possible and (2) plain SASS also lets you do that already. so I don&#x27;t understand what I would gain from adding tailwind.<p>&gt; Components are a better way for separating concerns<p>Except when they aren&#x27;t. Downthread I gave the example of a library project that I want to define the functionality&#x2F;behavior but leave the looks&#x2F;styling to the consumer.<p>Desktop GUIs have theme engines for ages, yet frontend web developers want to get excited about frameworks that allow for &quot;night mode&quot;? &quot;Night mode&quot; is just a way to say &quot;you can separate presentation and content however you want, as long you only present in two different styles&quot;.')