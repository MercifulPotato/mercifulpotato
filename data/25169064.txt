Item(by='smarx007', descendants=None, kids=None, score=None, time=1605957512, title=None, item_type='comment', url=None, parent=25168706, text='So what you are saying is that because Fugaku supercomputer has 158,976 nodes, it&#x27;s &quot;horizontally distributed&quot; and Amdahl&#x27;s law does not apply to it but only to the 48 cores on each node?<p>A task that we have (if we want to formalize it for analysis via Amdahl&#x27;s law) is to process 1MM requests on 1000 web servers and a single SQL server behind them. What we are after is how much faster can this setup process 1MM requests compared to a setup with 1 web server and 1 SQL server (1 SQL server is used here to exemplify the sequential part of the request handling). Indirectly from this calculation you can derive the increase in overall system RPS after you run a benchmark actually pushing 1MM requests through 1000 servers vs 1 server.<p>If you have a line of code `sqlUpdateTransaction.commitBlockingWait()`, and it takes 1% of your request handler execution time, then even if you add 1000 web servers but have only 1 SQL server machine behind them (a little bit oversimplifying here as contention is likely to degrade performance further, assume we are able to scale the SQL vertically just so that the call above always takes 1% of the request handler time for the sake of simplicity), your system will not process 1MM requests more than 91x faster than a setup with a single web server and a single SQL server. See <a href="https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input&#x2F;?i=1%2F%28%281-0.99%29%2B0.99%2F1000%29" rel="nofollow">https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input&#x2F;?i=1%2F%28%281-0.99%29%2B...</a>. And no amount of green threads will allow you to outsmart the Amdahl&#x27;s law. The only thing you can do is to return 200 OK before the transaction is committed, which would bring sequential part of the handler code from 1% to (nearly) 0% (and arguably be an unacceptable method of performance optimisation).')