Item(by='Galanwe', descendants=None, kids=None, score=None, time=1609908397, title=None, item_type='comment', url=None, parent=25653068, text='&gt; In principle generating dependencies from a notebook should be as easy as parsing the ast, finding all the import statements, and then using sys to lookup what package provided that module.<p>Well not really.<p>First, there is no link between a distribution package name (what you install with pip) and python package name (what you import).<p>e.g. The distribution package &quot;foobar&quot; can install the python package &quot;baz&quot;. Well, it&#x27;s even worst than that. There could be name space packages so multiple distribution package actually install parts of a python package. And there could be monkey patching.<p>Second, Python is not a static language. The import system is part of the interpretation of python code, and as such, is dynamic.<p>You have absolutely 0 guarantee that &quot;import foo&quot; on two different environments, even if they have the same version of package foo, will produce the same results. There could be an infinite amount of magic done in foo&#x27;s __init__ that depend on other libraries being installed, etc.<p>Third, don&#x27;t get me started on the actual version of these libraries.')