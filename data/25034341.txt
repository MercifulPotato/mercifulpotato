Item(by='secondcoming', descendants=None, kids=None, score=None, time=1604927122, title=None, item_type='comment', url=None, parent=25032133, text='Do coroutines help with the need for sharing state with timers?<p>When you make a async operation there are two things: the operation itself, e.g. read&#x2F;write and the timer associated with that operation (you really don&#x27;t want infinite timeouts in production code).<p>Both need information about the async operation in their respective handlers. You can&#x27;t do composed operations (std::move(<i></i>this)) since one of the read&#x2F;write or timer handlers will be given a moved-from object.<p>The only wasy I can see to solve this is through the use of a ringbuffer and using indexes into this ringbuffer as a &#x27;handle&#x27; to the async op (see LMAX&#x27;s Disruptor). It saves from needing shared_ptr &#x2F; enable_shared_from_this. You&#x27;re going to need a bounded queue <i>anyway</i> to prevent a fast producer from causing OOM.')