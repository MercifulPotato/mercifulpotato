Item(by='thomastjeffery', descendants=None, kids=None, score=None, time=1604846781, title=None, item_type='comment', url=None, parent=25021180, text='&gt; Oh yeah; we have&#x2F;had this<p>Not quite.<p>They are still stuck in a browser. The DOM is still largely impossible for users to parse and interact with. Web pages are still separate from each other.<p>&gt; none of us got the idea behind it (I certainly didn&#x27;t); so, instead we re-created the prisons we were, and are, trying to escape.<p>That&#x27;s true for two reasons.<p>1. The reason you gave: we made it this way.<p>2. HTML isn&#x27;t naturally leading us in a different direction than that.<p>I would say Emacs is a better implementation, though it still has faults.<p>Really, there is nothing that truly encapsulates this ideal. It&#x27;s something that I still have difficulty articulating.<p>I think the most significant walls we have made are in user interface. We make programs that expect users to interact in a predetermined fashion instead of allowing users to make that decision themselves. In designing these programs, we wall the user away from engineering their own interfaces.<p>I think the second most significant wall is the floor. Take Emacs for example: Sure, you can alter every variable. You can change the keymap. You can change the fonts. But fundamentally, every variable has a default that the user must confront. There is no Emacs-from-scratch configuration option. This gets especially messy because default variables are organized in a carefully designed structure. They are codependent. It&#x27;s trivial to make small changes, but significant refactoring requires planned cohesion with what is already there.<p>This topic is something that is vitally important to software design, and yet we don&#x27;t even talk about it. We just keep rolling with the status quo until someone breaks down a wall and becomes a hero.')