Item(by='spr93', descendants=None, kids=[24714241], score=None, time=1602114100, title=None, item_type='comment', url=None, parent=24713374, text='That&#x27;s excellent, and Rust makes perfect sense here.  But consider that OP has an important point (though not said very diplomatically):  Ada&#x2F;SPARK has decades of experience and research in safety, especially type safety, which has not received the same level of focus in Rust as memory safety has.  In addition, Ada was the vehicle for many years (and still is in some places) for teaching systems safety and mission-critical programming.<p>You should consider familiarizing yourself with some of that Ada&#x2F;SPARK research, experience, and pedagogy.  The issues you&#x27;re teaching aren&#x27;t new, and there&#x27;s a huge body of knowledge, experience, and anecdotes you may find useful or inspiration.<p>A couple ideas to get you started--\n- &quot;Safe and Secure Software&quot; - <a href="https:&#x2F;&#x2F;www.adacore.com&#x2F;uploads_gems&#x2F;Ada_Safe_and_Secure_Booklet.pdf" rel="nofollow">https:&#x2F;&#x2F;www.adacore.com&#x2F;uploads_gems&#x2F;Ada_Safe_and_Secure_Boo...</a><p>- &quot;Safe Dynamic Memory Management in Ada and SPARK.&quot; Quote from its first page: &quot;As our main contribution, we show how to adapt the ideas underlying the safe pointers from permission-based languages like Rust or ParaSail, to safely restrict the use of pointers in more traditional imperative languages like Ada.&quot; - <a href="https:&#x2F;&#x2F;www.adacore.com&#x2F;uploads&#x2F;techPapers&#x2F;Safe-Dynamic-Memory-Management-in-Ada-and-SPARK.pdf" rel="nofollow">https:&#x2F;&#x2F;www.adacore.com&#x2F;uploads&#x2F;techPapers&#x2F;Safe-Dynamic-Memo...</a><p>- The Ada Information Clearinghouse - <a href="https:&#x2F;&#x2F;www.adaic.org&#x2F;advantages&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.adaic.org&#x2F;advantages&#x2F;</a><p>Rust is new and important and it&#x27;s great that it&#x27;s the focus of your course. But I also think you would do your students a service to show them that they can stand on the shoulders of giants in comp sci just as much as any other discipline.  Much as the industry has moved back to what was fundamentally the IBM mainframe remote-system-and-virtual-machines service and licensing model [now we call them clouds, containers, and SaaS subscriptions], Rust is a relatively recent response to the same problems Ada&#x2F;SPARK have decades of experience in handling.  The lessons the industry and comp sci researchers learned 30 or 40 years ago do matter, and they can show us what kinds of solutions work and what may have have unforeseen effects.<p>The Ada Reference Manual and SPARK are under-appreciated tomes of the world&#x27;s experience in these issues.')