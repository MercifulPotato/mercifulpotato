Item(by='profquail', descendants=None, kids=[25496784], score=None, time=1608563432, title=None, item_type='comment', url=None, parent=25493411, text='The optimizations get you the following:<p>* Normalization: this is where &quot;smart constructors&quot; come in handy; having a normal form for the terms allows the caching to work better. This also impacts the compactness of the generated DFA.\n* Hash-consing: this turns structural equality (in this case) to a simple pointer equality; applied recursively, this makes it much faster to compare two terms for equality, and overall speeds up the DFA generation by a non-trivial amount (I forget the exact numbers, but it was significant).\n* Dense set implementation: The AVL tree-based data structure in the facio&#x2F;Reggie code is an implementation of the Discrete Interval Encoding Tree (DIET) data structure from &quot;Diets for fat sets&quot; and &quot;More on Balanced Diets&quot; papers.<p>Note the optimizations I&#x27;ve mentioned here impact the performance of <i>generating</i> the DFA. Once you have the DFA, it&#x27;ll run at the same speed as one generated in any other way. Part of the motiviation for my writing this library was to learn about regex&#x2F;DFAs&#x2F;grammars, but also to try to improve on the performance of fslex&#x2F;fsyacc at the time. Using this library, the FSharpLex tool can generate the DFA for the full F# language grammar in well under 1 sec; the code generation takes a bit longer, largely due to having to convert the DFA into a different form for backwards-compatibility with fslex.<p>Overall, I feel like the derivatives technique is generally better and simpler, and I&#x27;m not aware of any real downsides. The only one that comes to mind is if you&#x27;re wanting to implement things like backreferences and capture groups -- those obviously make the implementation (of the DFA) more complicated, and there&#x27;s a lot less literature on it (last I saw, maybe only one or two papers on implementing those features on top of a derivatives-based regex engine).')