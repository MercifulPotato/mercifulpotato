Item(by='rdw', descendants=None, kids=None, score=None, time=1603235880, title=None, item_type='comment', url=None, parent=24840760, text='I&#x27;ve used C++ since the 90s and it&#x27;s only ever been presented as a Serious Language for Real Applications.  I feel that until recently, C++ stood alone and there were almost no serious threats to its position, except maybe Java.  If you were planning on writing commercial programs (or even more so a collection of programs) that have good performance and huge featuresets, like an operating system or a browser, what else could you have possibly used?<p>I agree that in practice maintenance has been pretty bad for C++ programs, but I think I understand the kind of reasoning that led so many organizations to pick C++, even if I don&#x27;t agree with it.  It was not about ergonomics or productivity, but about control.  The language grants an unprecedented level of power to a small group of elite programmers inside every organization, who author the standard library and headers that all the other programmers use.  They&#x27;re building the smart pointers, the memory allocators, the IO libraries, and the build systems.  It&#x27;s imperative (to them) that their good decisions don&#x27;t get snowed under the mountain of application code that the more mediocre programmers are going to be producing by the truckload.  So it&#x27;s important to have powerful encapsulation, compile-time checks, and metaprogramming capabilities.  Doesn&#x27;t matter how safe by default or how slow it all is, because the elite add guarantees themselves through the abstractions they write, and don&#x27;t have to compile a full application very much, if ever.')