Item(by='arc619', descendants=None, kids=[25315811, 25321002, 25315804], score=None, time=1607184015, title=None, item_type='comment', url=None, parent=25315121, text='Another option is to gradually replace parts of the C++ with Nim code set to output to C++. As such you get the advantages of a high level, low friction language with fast compile times and move semantics, ABI compatibility with C++, and a really nice FFI. You can import or export functions and so on between the languages, use any C++ libraries in Nim (or visa versa), and even directly emit C++ from Nim if required.<p>Gradually porting like this lets you keep using your code base whilst introducing new or overly complex stuff in a language that&#x27;s faster and easier to write (usually ends up with less than half the LoC of the equivalent C++ but often way, way less than that). Metaprogramming is also very nice, easier to reason about and perhaps most importantly, even with lots of macros doesn&#x27;t noticeably affect the fast compiles.<p>Another advantage is once you have some Nim code you can choose to change the target to C or ObjC (or even JS or LLVM) so you&#x27;re actually increasing portability.<p>This all depends on how you rank &#x27;maturity&#x27; of course. Nim&#x27;s been around for longer than Rust and Go IIRC, and it&#x27;s been rock solid for me but you may have different parameters. It certainly helps being able to directly use libraries for C and C++ if you can&#x27;t find an appropriate Nim implementation.<p>Edit: For contrast, consider the challenges in the article for variants in C++, then the equivilent object variants in Nim:<p><pre><code>    type\n      MyVarKind = enum mvkNumber, mvkString\n      MyVariant = object\n        case kind: MyVarKind\n        of mvkNumber:\n          num: int\n        of mvkString:\n          str: string\n\n    var myVariant = MyVariant(kind: mvkNumber)\n    myVariant.num = 1\n    myVariant.str = &quot;Oops&quot;  # Error: &#x27;str&#x27; is not accessible using discriminant &#x27;kind&#x27; of type &#x27;MyVariant&#x27;</code></pre>')