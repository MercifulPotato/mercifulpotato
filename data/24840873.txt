Item(by='stabbles', descendants=None, kids=[24840970], score=None, time=1603219173, title=None, item_type='comment', url=None, parent=24840698, text='&quot;SIMD not reliable&quot; is an overstatement itself for a couple reasons:<p>1. It&#x27;s very easy to inspect generated code of your kernels where you really need SIMD. For instance:<p><pre><code>    julia&gt; function my_kernel(xs)\n             total = zero(eltype(xs))\n             for x in xs\n               @fastmath total += x\n             end\n             total\n           end\n    julia&gt; @code_native debuginfo=:none my_kernel(rand(10))\n    ...\n    L96:\n     vaddpd 8(%rcx,%rax,8), %ymm0, %ymm0\n     vaddpd 40(%rcx,%rax,8), %ymm1, %ymm1\n     vaddpd 72(%rcx,%rax,8), %ymm2, %ymm2\n     vaddpd 104(%rcx,%rax,8), %ymm3, %ymm3\n     addq $16, %rax\n     cmpq %rax, %rdi\n     jne L96\n    ...\n    </code></pre>\n2. There&#x27;s a Julia package that does the code gen for vectorization exactly because LLVM does not always get it right: <a href="https:&#x2F;&#x2F;chriselrod.github.io&#x2F;LoopVectorization.jl&#x2F;stable&#x2F;examples&#x2F;matrix_multiplication&#x2F;" rel="nofollow">https:&#x2F;&#x2F;chriselrod.github.io&#x2F;LoopVectorization.jl&#x2F;stable&#x2F;exa...</a><p>3. You can make LLVM explain why it did not vectorize certain loops just like in clang.')