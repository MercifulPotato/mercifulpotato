Item(by='KMag', descendants=None, kids=[25288289], score=None, time=1606994521, title=None, item_type='comment', url=None, parent=25287262, text='Very interesting!  I wasn&#x27;t aware Midori had been widely deployed in production!  My understanding is that Midori ran the kernel and all programs in ring 0 and relied on the classloader enforcing type safety and the managed runtime enforcing the other security and stability constraints normally enforced by hardware, so syscalls were just normal method calls and there were no context switches.<p>Burroughs MCP was written in essentially an extended Algol 60 dialect.  Algol 60 only had very limited heap allocation for dynamic arrays, no GC, and I haven&#x27;t read any indications that Burroughs added GC to their extended dialects.<p>Multics was written in a PL&#x2F;I dialect, without tracing GC.  Likewise, IBM OS&#x2F;360 and descendants are written in the PL&#x2F;S dialect of PL&#x2F;I, and I haven&#x27;t seen any indication it has tracing GC.<p>With tracing GC, you have a trade-off between the peak amount of unclaimed garbage and the GC overhead.  ARC should have lower variance in both latency and heap usage, which I presume is the reason Apple moved the whole Objective-C and Swift ecosystem to ARC and deprecated the Objective-C tracing GC.<p>I used to be a True Believer(tm) in the JVM and other managed runtimes.  I was one of 5 developers of the most popular Java desktop application in the mid 2000s.  Then I moved to Google and started developing web search infrastructure.  I was at Google when V8 was created, and I put a lot of effort into running all of the JavaScript that the indexing system found, across the entire visible web. For things at massive scale, spending millions of dollars per year just in electricity bills, it&#x27;s extremely tough to beat highly tuned C++.  Yes, it&#x27;s a lot of effort.  Yes, I hope safer languages like Rust replace C++ and static analysis tools continue to improve.<p>I still kind of want to be a managed runtime true believer again, but it&#x27;s tough to go back after believing for so many years that managed runtimes were going to match expertly hand-optimized C++ in latency- and throughput-critical applications &quot;any day now&quot;.')