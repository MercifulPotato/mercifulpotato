Item(by='MaxBarraclough', descendants=None, kids=[25477003], score=None, time=1608377689, title=None, item_type='comment', url=None, parent=25469708, text='&gt; before long your helper method is extremely difficult to reason about, because itâ€™s actually handling a dozen cases that are superficially similar but full of important differences<p>This reminds me of Mike Acton&#x27;s <i>Three Big Lies of C++</i>, specifically Lie 2: <i>Code should model the world</i>. [0]<p>&gt; <i>A chair is a chair, in real life. But in terms of data-transformations, in terms of what we do, these classes are really only superficially similar. In the context of a game, we have a Chair, a PhysicsChair, a StaticChair, a BreakableChair. These things are not at all similar. There&#x27;s almost nothing that&#x27;s the same between these contexts. How they&#x27;re handled, how the data is managed, how the data is transformed, there&#x27;s virtually nothing that&#x27;s the same here, and yet the tendency would be because they share some world-modelling similarities, their similarities in the real world, they ought to be connected somehow in the code hierarchy, which is non-nonsensical. World-modelling leads to monolithic, unrelated data-structures and transforms. [...] You can&#x27;t make a problem simpler than it is.</i><p>[0] <a href="https:&#x2F;&#x2F;youtu.be&#x2F;rX0ItVEVjHc?t=1153" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;rX0ItVEVjHc?t=1153</a>')