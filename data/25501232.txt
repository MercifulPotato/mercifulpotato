Item(by='bob1029', descendants=None, kids=[25503179, 25501296, 25502452, 25506420, 25501765, 25501514, 25505901, 25501334, 25501312, 25501745, 25502549], score=None, time=1608594839, title=None, item_type='comment', url=None, parent=25500671, text='I would say functions are important, but absolutely pale in comparison to modeling[1].<p>If you are unable to describe, on paper, what your problem domain actually <i>is</i>, then you have no business opening up an IDE and typing out a single line of code.<p>I will take that further. If, with your domain model, you are unable to craft a query that projects a needed fact from an instance of the model, the you should probably start over. Dimensionality and normalization are a big deal with your model. You have to be really careful about nesting collections of things within other things if you want to allow for higher-order logic to project required views. This is something we struggled with for a really long time. Every rewrite conversation began something like &quot;well customer and account need each other in equal measure...&quot;. And it took us god knows how many iterations to figure out the relationship should not be an explicit property either way.<p>Put shortly, Modeling is the core of it all. Start with simple top-level collections of things. E.g. instead of modeling Customer.Transactions[], model Customers, Transactions and CustomerTransactions. This fundamental principle of keeping your model dimensions separated by way of relational types can help to un-fuck the most problematic of domains. These will start to look a lot like EF POCOs for managing SQL tables...<p>At the end of the data, data dominates, and SQL is the king of managing data. If you embrace these realities, you might be encouraged to embed SQL a lot deeper into your applications. I spent a long time writing a conditional expression parser by hand. Feels like a really bad use of time in retrospect, but I did learn some things. Now I am looking at using SQLite to do all of this heavy-lifting for me. All I have to do is define a schema matching my domain model, insert data per instance of the model, and run SQL against it to evaluate conditionals and produce complex string output as desired.<p>[1] <a href="https:&#x2F;&#x2F;users.ece.utexas.edu&#x2F;~adnan&#x2F;pike.html" rel="nofollow">https:&#x2F;&#x2F;users.ece.utexas.edu&#x2F;~adnan&#x2F;pike.html</a>')