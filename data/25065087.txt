Item(by='aseipp', descendants=None, kids=None, score=None, time=1605143159, title=None, item_type='comment', url=None, parent=25063389, text='Thinking about a theoretical SQLite database running on an SSD like this as a HA database for server-based systems is a poor design and a mistake. It would be a poor design even without the FPGA; SQLite simply isn&#x27;t a HA replicated database.<p>Something <i>like</i> SQLite might make a decent alternative API to the flash storage layer of the SSD, though. Imagine if the storage controller of your SSD exposed a built &quot;filesystem&quot; that featured robust indexes, transactions, sorting, column families, etc. You could skip talking to the Linux block layer or any POSIX filesystem at all, and your optimized userspace software could directly talk to the storage controller in the SSD instead with a high level software API. This isn&#x27;t far-fetched; Samsung <i>also</i> has a &quot;Key-Value SSD&quot; on the way that exposes the underlying flash storage using a (surprise!) high-level get&#x2F;set KV API, for similar reasons.<p>A design where the controller is this powerful would also allow features like predicate pushdown in the query planner to be implemented. i.e., a `WHERE x &gt; 7` can get pushed into the storage controller, and bad tuples that don&#x27;t fit the predicate can get excluded&#x2F;filtered out <i>before</i> getting pushed onto the memory bus. That will save significant processing time and memory bus traffic in aggregate, and it scales with the number of drives (such each drive has its own controller.) Not to mention tricks like inline hardware for sorting, compression, etc.<p>Outside of fancy SQLite-as-a-filesystem tricks, I suspect the allure of optimizations like predicate pushdown and inline sorting will be very attractive for OLAP systems. Time will tell if these things will stick around, but Xilinx at least seems sure as hell determined to make their way into the datacenter.')