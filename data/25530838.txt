Item(by='eesmith', descendants=None, kids=[25530892], score=None, time=1608839609, title=None, item_type='comment', url=None, parent=25530633, text='I was working on writing the same thing, though less clearly. :)<p>As a minor note, in Python 2, types.ClassType was a &quot;thing&quot;:<p><pre><code>  &gt;&gt;&gt; import types\n  &gt;&gt;&gt; types.ClassType is type\n  False\n  &gt;&gt;&gt; isinstance(types.ClassType, type)\n  True\n  &gt;&gt;&gt; my_class = types.ClassType(&quot;spam&quot;, bases=(), dict={})\n  &gt;&gt;&gt; my_class\n  &lt;class __main__.spam at 0x106732670&gt;\n</code></pre>\nI don&#x27;t remember the details any more, but it looks like it was the base for class for old-style classes. Using your class definitions:<p><pre><code>  &gt;&gt;&gt; isinstance(OldStyleClass, types.ClassType)\n  True\n  &gt;&gt;&gt; isinstance(NewStyleClass, types.ClassType)\n  False\n\n</code></pre>\nPython 3 replaced that functionality with types.new_class(), which returns an instance of type &#x27;type&#x27;:<p><pre><code>  &gt;&gt;&gt; my_class = types.new_class(&quot;spam&quot;)\n  &gt;&gt;&gt; isinstance(my_class, type)\n  True \n  &gt;&gt;&gt; my_class\n  &lt;class &#x27;types.spam&#x27;&gt;\n  &gt;&gt;&gt; type(my_class)\n  &lt;class &#x27;type&#x27;&gt;\n</code></pre>\nAs I recall, in the early 1.x days it wasn&#x27;t apparent that the class&#x2F;type dichotomy was a problem. It took a lot of work during the 2.x era to bring them together.')