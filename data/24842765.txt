Item(by='munificent', descendants=None, kids=[24842898, 24844150], score=None, time=1603231162, title=None, item_type='comment', url=None, parent=24841811, text='<i>&gt; This would allow a `plot` function in Python, originally written for the float data type, to also work for float-like (quacks like a duck) data types, like `Decimal`.</i><p>So let&#x27;s say you do that. You define your own new number-like type, say Complex. You pass that in to plot(n).<p>Somewhere in the body of plot(), though, it turns out there&#x27;s some code like:<p><pre><code>    # Flip to put origin at bottom left.\n    window_height = 400\n    y = window_height - n\n</code></pre>\nSo now plot() tries to invoke &quot;-&quot; with an int on the left and your complex number on the right. It passes your complex number to the int class&#x27;s minus operator, which has no idea about your type and barfs.<p>Python has a hacky workaround for this specific case where the <i>right</i> operand can implement __rsub__(), but that hacky workaround exists <i>specifically because Python doesn&#x27;t have multiple dispatch</i>.<p>If it supported multiple dispatch natively, you&#x27;d just define an operator - that took a number on the left and a complex on the right, plot() would call it, and you&#x27;d be good.')