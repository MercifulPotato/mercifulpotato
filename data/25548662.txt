Item(by='md224', descendants=None, kids=None, score=None, time=1609041031, title=None, item_type='comment', url=None, parent=25517532, text='&gt; A pattern that has come up a few times in my code is the following: an object has a property which defaults to an expression based on its other properties unless itâ€™s explicitly set, in which case it functions like a normal property. Essentially, the expression functions as a default value.<p>Having a dynamic default value makes sense, but instead of having the object reconfigure itself on the fly, why not design a single virtual field that intelligently chooses between two distinct sources of data? For example, you could write a class like this:<p><pre><code>    class MyObject {\n      #customFoo;\n\n      get foo () {\n        return this.#customFoo ?? this.#getDefaultFoo();\n      }\n\n      set foo (val) {\n        this.#customFoo = val;\n      }\n\n      #getDefaultFoo () {\n        &#x2F;&#x2F; dynamically generate and return foo value\n      }\n    }\n</code></pre>\nThat way you could get a dynamically created value up until a custom value is set, with the option to switch back to the dynamic default simply by setting the field to null or undefined.<p>Also, I&#x27;m not sure if you were implying that it&#x27;s a good thing, but the concept of &quot;properties which execute code to produce side effects when they are get or set&quot; seems a bit risky to me, especially the &quot;get&quot; part... it can make it very difficult to reason about the state of a system when simply accessing a property on an object has side effects. Obviously side effects don&#x27;t need to be avoided at all costs, but IMHO it&#x27;s best if they only occur during explicit function calls.')