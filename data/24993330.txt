Item(by='zozbot234', descendants=None, kids=[24993356], score=None, time=1604526045, title=None, item_type='comment', url=None, parent=24992223, text='&gt; Rc&#x2F;Arc&#x2F;RefCell are a band-aid for when that fails.<p>I would not describe Rc&#x2F;Arc&#x2F;RefCell as &quot;band-aids&quot;, let alone as &quot;admissions of failure&quot;.  Rc&lt;&gt; is precisely the right approach for objects that might need to have their lifecycle extended by multiple &#x27;owning&#x27; references;  Arc&lt;&gt; applies when the &#x27;owning&#x27; references might span separate threads.  Cell&lt;&gt; and RefCell&lt;&gt; are for shared mutable state within a single thread, whereas Mutex&lt;&gt; and Rwlock&lt;&gt; serialize concurrent access from multiple threads.  To reiterate, these are not clumsy &quot;band-aids&quot; or &quot;hacks&quot;; they&#x27;re elegant, self-contained solutions to rather well-defined resource management problems.<p>It&#x27;s true that some &quot;core domains&quot; are inherently unsuitable to Rust-as-it-currently-exists, due yo the need of general GC. But these domains are not very common, and future versions of Rust might well add some support for optional, self-contained GC&#x27;s.')