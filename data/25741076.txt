Item(by='segfaultbuserr', descendants=None, kids=[25741201], score=None, time=1610414849, title=None, item_type='comment', url=None, parent=25740803, text='&gt; <i>As a kernel developer, your code must be robust against all failure modes.</i><p>Systemd implemented RDRAND precisely because the kernel was previously not robust against all failure modes regarding to &#x2F;dev&#x2F;urandom - early boot may block indefinitely if there&#x27;s a lack of adequate inputs (the fallback in-kernel jitter entropy collector was introduced many years later, in 2019). Also, the failure of RDRAND was virtually unheard of [0] at that time when that decision was made. It&#x27;s why I said the decision was reasonable back then [1].<p>I agree that the context has changed after AMD&#x27;s first RDRAND incident and that decision has became less reasonable.<p>[0] At least for non-crypto purposes, like systemd&#x27;s uses. Compromised RDRAND is always a concern among cryptographers, but totally broken RDRAND was not.<p>[1] BTW, I bet implementing an entropy gathering code and a randomness algorithm in systemd would probably cause greater amount of criticism.')