Item(by='mimixco', descendants=None, kids=[25016235], score=None, time=1604760304, title=None, item_type='comment', url=None, parent=25014307, text='Taking away the political terms like contribute and community (which are not in the GPL license text), the actual license requires the 2nd developer to do two things that are contentious. Release the source to his own mods to the first person&#x27;s code... AND release the build instructions. If you read the license, this is explicitly specified.<p>Even if the second developer isn&#x27;t evil, he may be willing to release his mods to the first person&#x27;s code, but there can be several technical and business reasons that he cannot release his build process to his customers.<p>BTW, nothing in GPL requires that the second guy communicate with the first one in any way. There is no &quot;community contribution.&quot; It only says he has to make a copy of his source available to <i>his</i> customers <i>on request.</i> That&#x27;s a pretty huge delta from the idea of folks sitting around in a community and improving software.<p>To actually use the second guy&#x27;s code, you&#x27;d have to diff it from the first! There is no requirement that the code have any comments or documentation. It cannot be intentionally obfuscated, but it can be obtuse by design. Again, none of this implies any community of people working to improve some theoretical software.<p>And that&#x27;s because the second person is likely building very different software from the first! The first person and his community probably don&#x27;t need or want most of the second guy&#x27;s code. And if there&#x27;s a community of devs for the second guy&#x27;s product, well that&#x27;s kind of his problem.<p>The real burdens that GPL places on the second dev are pretty bad problems. Releasing the build process and the surrounding code which is not related to the first guy&#x27;s product is a huge problem. You don&#x27;t have to be evil to see that.<p>There are also many, many cases where the second person is making something that improves the first product but doesn&#x27;t compete with it. It&#x27;s in a different technical niche or customer application and in that way, they&#x27;re not related. (Same software in a TV and a fridge, for example.) Does the TV company care about the fridge people&#x27;s mods? No, not really. Unless there are some bugs or real improvements in the TV software that the fridge people could make. Since this does happen if the TV code base gets big enough, eventually you see paid software companies like Google and Red Hat who go ahead and fix errors and make improvements in the free software they use. But this only happens when there is a certain critical mass of users or an overlap between the use cases of the base code.<p>Nothing in the fridge people&#x27;s proprietary software would be of any help to the TV users! There is no great &quot;GitHub in the sky&quot; where all the mods to the TV code for a fridge or some other thing come together to make the &quot;great, perfect TV software!&quot; That just isn&#x27;t how software development works.')