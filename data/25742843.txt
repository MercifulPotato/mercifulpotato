Item(by='chubot', descendants=None, kids=[25750607], score=None, time=1610430649, title=None, item_type='comment', url=None, parent=25739097, text='I think your example is better evidence for my view.  I remember this issue being mentioned in a CppCon talk: C++ 11   broke the ABI for STL (for efficiency as far as I remember), and the binary interface to libstdc++ changed as a result:<p><a href="https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;using_dual_abi.html" rel="nofollow">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;using_dual_a...</a><p>So the ABI can leak implementation details in nontrivial ways that library authors usually don&#x27;t consider.  It&#x27;s better to have something explicit in the code, e.g. under extern &quot;C&quot;.<p>The point is not that making a stable API for every language feature is impossible; just that it&#x27;s hard, fragile, and maybe not be worth the effort.  If you really want stability, then use fewer features more like C.  There is probably some middle ground that&#x27;s richer, but templates are known to cause problems.<p>Also see the release history here:<p><a href="https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;abi.html" rel="nofollow">https:&#x2F;&#x2F;gcc.gnu.org&#x2F;onlinedocs&#x2F;libstdc++&#x2F;manual&#x2F;abi.html</a>')