Item(by='AnthonBerg', descendants=None, kids=[24716477], score=None, time=1602137131, title=None, item_type='comment', url=None, parent=24714808, text='I think fortunately those are orthogonal matters :)<p>First, I don&#x27;t know that dependent types have huge decidability issues that are an inherent obstacle in general; Idris for one has a very practical and elegant model of computation – things like totality checking, linearity rules and elimination of &quot;scaffolding&quot; types do a lot for us.<p>Dependent types do allow telling the compiler about more dimensions to consider – in a way that allows for a computational explosion at compile time – but those were always an available to consider as part of the computation; Dependent types dont <i>add</i> that complexity, rather they allow us to <i>address it in the type system</i>. I see it such that we&#x27;re in a stronger position to manage and navigate that complexity by allowing us to express it to the compiler in a succinct and clear way near the core context of desired action. Dependent types allow us to do less by allowing us to do more.<p>And integrating purely functional mechanisms with side effects is a fun and interesting avenue of research, and I don&#x27;t know that adding dependent types makes that more difficult; I&#x27;d think it makes it easier?')