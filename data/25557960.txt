Item(by='rswail', descendants=None, kids=[25558351], score=None, time=1609148810, title=None, item_type='comment', url=None, parent=25555355, text='&gt; The &quot;problem domain&quot; defined within a computer is NO different.<p>yes, you are correct, a specified problem domain within an implementation can be formalized, proved correct etc.<p>But that literally has nothing to do with the actual problem, which as Twisol said is about mapping the problem domain and the software domain so that both are supported.<p>Both hardware and software have moved in well known cycles. Processing has moved from CPUs to external processors (IO, then GPUs etc) and back again as hardware capabilities change. When comms are slow, its better to have two smart ends so that you minimize the information that needs to flow. When comms are fast, you can make one end &quot;dumber&quot;.<p>Your entire premise is at a different level of abstraction than &quot;software architecture&quot; or &quot;systems design&quot;. You haven&#x27;t proposed a mechanism by which messy human problems can be formalized.<p>Software architecture and design is about dealing with non-deterministic, non-linear, fractal environments and the computer and systems science hasn&#x27;t provided the theoretical frameworks that would allow the environments to be formalized so that they can be &quot;engineered&quot;.<p>It&#x27;s definitely not &quot;science&quot;, either is it &quot;engineering&quot;, but it is definitely a discipline. You are judging one field by the axioms of another and then declaring it invalid because it doesn&#x27;t comply.')