Item(by='adkadskhj', descendants=None, kids=None, score=None, time=1607186899, title=None, item_type='comment', url=None, parent=25315713, text='I think that works - but what GP mentioned is where it fails:<p>&gt; Frankly I would be perfectly fine with the current situation where you have a bunch of effectively centralized code hosting solutions (github, gitlab, bitbucket etc...) if you could trivially move your project from one to an other. For the code it&#x27;s easy, git is built that way. For issues, PRs and the like it&#x27;s trickier.<p>Maybe there&#x27;s a nice way to Gitea distribute this information among Gitea instances, though it doesn&#x27;t seem advertised as such - as this would basically make Gitea some neat Federated tool i think.<p>Ultimately i&#x27;d like Git[ea|whatever] to be just a frontend for a database that behaves like Git. In the way same way that Github&#x27;s Source Viewing is just a frontend for Git. You don&#x27;t worry about moving your Source data between Github and Gitlab, so why are we worrying about universal data like Bug tickets, Feature tracking, etc.<p>I&#x27;m a massive fan of systems that behave like Git and Scuttlebutt. Which is to say, they&#x27;re dumb - simple. Git can be pushed and pulled from basically everything. There&#x27;s no complex suite of nodes around the world that are expected or assumed to operate for any Git functionality. In the same way Scuttlebutt - which offers P2P layers, is similarly dumb <i>(though less so, unfortunately)</i> when compared to more complex P2P offerings like IPFS.<p>In my ideal world we&#x27;d have a database to pair with Git that would have some very basic schemas to complement Git. Possibly even baked into Git. Such that when you move from Github to Gitlab to Gitea - everything truly essential comes with. Some things might change, like your CI if it was bound to Github - but still. Losing some things vs losing everything.<p>I personally am less concerned about using Github&#x2F;etc. Ie i&#x27;m not dying for someone to give me a new Github. I&#x27;m seeking a way to reduce lockin.<p>NOTE: I&#x27;m working on a distributed database that fits my needs on my above design goals. Really it&#x27;s just Git + some additional data structures which allow for more data types being stored, such as binary and structured data to build foundations for SQL layers and etc. It&#x27;s not intended for general use, but i&#x27;d love to see someone pick up the idea and run with it. &quot;Git for Data&quot; has been done a couple times, NomsDB and DoltDB namely, but they still felt like they weren&#x27;t Git-like in that they wanted to centralize - probably for SaaS reasons.')