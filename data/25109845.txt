Item(by='lmm', descendants=None, kids=None, score=None, time=1605519417, title=None, item_type='comment', url=None, parent=25081244, text='&gt; Do you use a single program on all of your devices for all possible computer-related tasks? Do you see a fault in such logic?<p>No. But if I talked about how I used 9 different word-processing programs, you&#x27;d see that as a problem, or at least an indictment of those programs. Deployment isn&#x27;t that complicated.<p>&gt; I dare you. Do mention any tool&#x2F;any language that handles all the above use cases without sacrificing the requirements for each use-case.<p>I use Maven&#x2F;Scala and as far as I can see it covers all of them other than &quot;give a link to a web app&quot; which isn&#x27;t actually deploying at all (and I&#x27;d still have used maven to deploy the webapp wherever I was deploying it).<p>I don&#x27;t think there&#x27;s any legitimate case for curl|sh, and I don&#x27;t think there&#x27;s any real reason for separate pip&#x2F;pipenv&#x2F;pipx (did you make that one up? Have I fallen for an elaborate troll?) - rather pipenv exists to work around only being able to install one version of a library at a time. Nothing&#x27;s gained by having &quot;just copy a module&#x2F;archive&quot; be different from what the tool does. Running in browser, notebook, or REPL can and should still use the same dependency management tooling as anything else.<p>If I want to deploy my code, I use maven. You <i>can</i> use curl (since maven repositories use standard HTTP(S)) or copy files around by hand, if you have a use case where you need to, but I can&#x27;t think what that would be. If you want to bundle up your app as a single file, you can configure things to do that when publishing, but the dependency resolution, repository infrastructure, and deployment still look the same. Even if you want to build a platform-level executable, it&#x27;s the same story, all the tooling just works the same. If I want a REPL or worksheet, I can start one from maven (and use the same dependency management etc. as always), or my IDE (where it&#x27;s still hooked up to my maven configuration). If I want to use a Zeppelin notebook then there&#x27;s maven integration there too.<p>Ever wonder why you don&#x27;t hear endlessly about different ways of doing dependency management in non-Python ecosystems? Because we have tools that actually work, and get on with actually writing programs. It baffles me that Python keeps making new tools and keeps repeating the same mistakes over and over: non-reproducible dependency resolution, excessively tight integration between the language and the build tools, and tools and infrastructure that can&#x27;t be reused locally.')