Item(by='epage', descendants=None, kids=[25162114], score=None, time=1605887079, title=None, item_type='comment', url=None, parent=25160650, text='So everyone else is focusing on the memory allocation side of ownership.  The other side to this is aliasing &#x2F; borrowing &#x2F; handling references and mutability.<p>In Python, you might have a `list` that you built up and them pass its data to multiple functions.  You assume these functions are do not mutate their arguments and you keep passing the same `list` over again.  In this case, the caller is controlling the invariants of the `list` and therefore &quot;Owns&quot; it.<p>Deep down, one of those functions needs to mutate a `list` to do its calculations.  Where the mutation is happening, it assumes it is the &quot;Owner&quot; and can modify the `list` without violating any invariants.  Unfortunately, a &quot;Borrowed&quot; list was passed in and now the caller&#x27;s invariants are violated.<p>Rust&#x27;s ownership model helps to catch this kind of problem at compile time.  By default, everything is single-owner though you can change that with a `Mutex`.')