Item(by='whakim', descendants=None, kids=[24976784], score=None, time=1604376622, title=None, item_type='comment', url=None, parent=24975516, text='In my experience, it&#x27;s easy enough to have services which have a large blast radius themselves and can become points of failure for your entire ecosystem. I don&#x27;t find this to be a huge point of difference from a monolith, although of course it depends a lot on what you&#x27;re working on. To pick on the OP a bit here (sorry!), they said that their entire legacy system &quot;could go down because of issues to do with completely unrelated, non critical things like eg internal staff vacation hours.&quot; To me that sounds like poorly written software regardless of architecture. I can&#x27;t imagine a scenario in any of the recent codebases I&#x27;ve worked on (microservices and monoliths both) where errors in what sounds like an internal CRUD tool would cause an entire production application to crash. I find it even harder to imagine if the application has a halfway decent test suite.<p>To add to that, when you have hundreds of services running around and something goes wrong, it ends up being a lot harder to track down exactly what&#x27;s happening. So when you <i>do</i> get that critical error, oftentimes the downtime is worsened.<p>As for dev velocity, I find the claims of the microservice gospel a little bit exaggerated. Your layers of nested services all talk to each other, and any of them could be a point of failure. This isn&#x27;t really all that different from calling another function in your monolithic app - you&#x27;ve just distributed that function call across a network boundary. You still need to know the callee&#x27;s API, and you&#x27;ll still spend a decent amount of time trying to understand the ways that the callee might fail. But you&#x27;ve also created a huge amount of <i>additional</i> developer work whenever you need to do something that spans the boundaries of existing services.<p>I think microservices certainly have their advantages but a lot of the simplistic claims made by their biggest proponents only hold up prima facie.')