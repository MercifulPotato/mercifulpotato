Item(by='geofft', descendants=None, kids=None, score=None, time=1603577425, title=None, item_type='comment', url=None, parent=24881140, text='A Bitcoin-style blockchain is a combination of two things:<p>1) A public ledger where each new entry includes the hash of the previous one, so you can efficiently attest to history and items cannot be silently removed from history, even if they&#x27;re signed by the same participant. This is an old idea - Merkle trees are a slightly <i>more</i> advanced take on this idea. Present-day use cases, which are not blockchains in the conventional sense, include Git and Certificate Transparency.<p>2) A mechanism whereby the ability to add something to the blockchain requires the expenditure of computational power, as a way to solve the &quot;double-spend&quot; problem - namely, if you&#x27;re storing financial accounts in your ledger, how do you make sure one person doesn&#x27;t claim to transfer the same dollar to two different people? Bitcoin&#x27;s innovation is to require some &quot;proof of work&quot; to record the operation and to make &quot;miners&quot; record operations (instead of participants adding things themselves), such that maintaining two branches of the ledger requires you to turn into the most powerful miner, which is computationally prohibitive.<p>You only have the double-spend problem if you have an object that cannot be used twice. Git does not have the double-spend problem because there&#x27;s nothing wrong with having two commits branching off the same commit (in fact, it&#x27;s quite common&#x2F;encouraged). Certificate Transparency does not have the double-spend problem because CAs can sign an unlimited number of certificates, so if you see two different signed claims on two branches they&#x27;re <i>both</i> valid. The two ledgers can be trivially merged together (unlike two branches of where money went).<p>Timestamping has the double-spend problem in its own way: either something happened or didn&#x27;t happen on a day, and you don&#x27;t want multiple, different records of what happened on that day. If I want to attest that something happened on June 1st, you need to be confident that I didn&#x27;t make a second history that diverged at July 30 and merge it back in.<p>Most people do not have the double-spend problem. Fundamentally, you need a finite resource (like time or money) and you need to track the resource <i>itself</i> on the blockchain for the double-spend problem to exist.<p>A lot of people think a blockchain is useful for provenance tracking. But private records of provenance do not have the double-spend problem - you&#x27;re not tracking the thing itself, you&#x27;re tracking claims about where the thing was. If you see signed claims from me saying both &quot;Lot X consists of high-grade steel that&#x27;s been inspected&quot; and &quot;Lot X consists of faulty steel that needs to be discarded as scrap,&quot; you know I&#x27;m lying somehow. You don&#x27;t need to arbitrarily pick one of those statements. (You actually don&#x27;t want to arbitrarily pick one, because, again, the ledger here is just a record and not the thing itself: you want to get on my case for lying and find the truth. For the currency-itself use case of Bitcoin, it&#x27;s fine to arbitrarily pick one.)<p>A lot of people are interested in so-called &quot;permissioned blockchains&quot; &#x2F; &quot;private blockchains.&quot; For the financial use cases, these usually don&#x27;t have the double-spend problem because they&#x27;re just a reconciliation layer on top of a slower payments system, and given a public record, you can just hold someone responsible for their double-spending, because again the ledger is just a record and not the thing itself. (This is largely similar to how &quot;sidechains&quot; like Lightning Network don&#x27;t need to use the full complexity of the blockchain - because what they really are are records of promises to perform transactions on the primary blockchain. If someone makes two promises, hold them accountable for both.) For the non-financial use cases, you probably don&#x27;t have anything resembling the double-spend problem in the first place: what you want is, at most, something like signed commits in Git.')