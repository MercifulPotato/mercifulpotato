Item(by='hyperman1', descendants=None, kids=None, score=None, time=1603443406, title=None, item_type='comment', url=None, parent=24867106, text='Update: Plenty of good responses and you&#x27;re all more correct than my post, thanks everybody.  I&#x27;ll try to comment on all of you.<p>XML indeed works for both document and data-centric applications.  In practice, I mostly see data dumps from tables, and config files.  Marked up documents are rare for me, and mostly in html or recently markdown.  Maybe this is one of the thing that differs between jobs<p>All of XML, JSON, TOML,YAML only solve the first part of the job.  You will need a way to put the parsed data in the data structures of your application.   I will respectfully disagree about the triviality however: XML was one of the first to make this trivial.  Before XML, it wasn&#x27;t.<p>Choosing a format is forcing that preference on other ITers.  If I choose, say YAML, then everybody who uses my application will be forced to learn YAML.  Every format is basically easy, but has a few edge cases.  Hence, it is a good practice to limit the number of formats, even if this requires compromising on a lesser format.  That&#x27;s why I&#x27;d like to see TOML and YAML disappear in a world that already has XML and JSON.  Now clearly a world where you only have to learn XML+JSON+TOML+YAML is a lot better than the 90&#x27;s world where you&#x27;d see a  bigger variety of less well thought out formats every day.<p>There are good reasons for leaving advanced possibilities out of JSON.  Part of XMLs demise was the over-complication.   There is a lifecycle here:   You learn X because it is easy.  It isn&#x27;t perfect, so you fix it up a bit to X2, X3, etc...    Each fix makes the learning curve harder for beginners.  One day, someone looks at X99, rightfully declares it a mess and starts a new easy Y.  Now you as an X-er try to tell the Y-ers why they are wrong, and indeed they slowly grow Y2,Y3....  While the X99 and Y99 camp have a loud discussion, Z appears.  One of the harder parts of an ITer&#x27;s responsibility is recognizing when to invest in Y and Z even if they are still clearly inferior to X.')