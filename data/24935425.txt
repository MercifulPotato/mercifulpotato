Item(by='thelazydogsback', descendants=None, kids=[24935708], score=None, time=1604003646, title=None, item_type='comment', url=None, parent=24932701, text='I wrote a Lisp in F# last year, and I started with Fexprs and used them as the basis to write quasiquote and defmacro, which are then used to write things like defun and let:<p><pre><code>  &quot;backtick char ` is expanded to quasiquote by the reader&quot;\n  (defmacro! quasiquote\n   (flambda (form)\n    (_qq-expand form)))\n\n  (defmacro! define-macro\n   (flambda (sig :rest body) \n      `(defmacro! ~(car sig)\n        (flambda ~(cdr sig) ~@body)) ))\n\n  (define-macro (defun name vars :rest forms)\n     `(def! ~name\n       (lambda ~vars ~@forms))\n\n  (define-macro (lisp&#x2F;let bindings :rest forms)\n   `( (lambda \n      ~(map first bindings) ~@forms) \n        ~@(map second bindings)  ))\n\n  (define-macro (let :rest forms)\n    (if (contains? forms :in)\n      `(~&#x27;clj&#x2F;let ~@forms)\n      `(~&#x27;lisp&#x2F;let ~(car forms) ~@(cdr forms)) ))\n</code></pre>\nThere is a certain amount of brain-warping required understanding it all, and getting the nested quasi- and regular- quotes right takes some getting used to, even for me going back and trying to grok it -- but it&#x27;s bootstrapping code, so once your primitives are defined, you can move on.')