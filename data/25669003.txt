Item(by='Tainnor', descendants=None, kids=None, score=None, time=1610011284, title=None, item_type='comment', url=None, parent=25663848, text='&gt; Stacks don&#x27;t matter. Languages don&#x27;t matter.<p>I only half agree with this. I agree that there is no one perfect language or stack and that there is a reason for there being so many alternatives. I also have worked with a fair share of languages and stacks by now and am not afraid of picking up any new technology when necessary.<p>But languages and stacks do have trade-offs. Sometimes the trade-offs can even be almost prohibitive (e.g. there are stacks I&#x27;ve worked on that were so immature they were a legitimate liability to the product and business, even if of course we would find some ways to mitigate them (but you can&#x27;t mitigate something you&#x27;re not even aware of)). In other situations, it depends a lot on the context: what languages&#x2F;stacks does the team&#x2F;company already know? What sorts of libraries are you going to use (there is no point in trying to use Ruby for an NLP project, for example)? Do you have special requirements in terms of performance, parallelism, etc. (that might exclude some languages)? And so on.<p>Agreed with the rest of your comment, and I want to add that &quot;the ability to reason about a program in your head&quot; is also why I tend to prefer functional programming with immutable values (even though, of course, that has its own set of trade-offs).')