Item(by='tsimionescu', descendants=None, kids=[25007962, 25005745], score=None, time=1604646099, title=None, item_type='comment', url=None, parent=25003243, text='&gt; But on the other hand, please consider the Zen of dumb tools: I code all day in Vim and I don&#x27;t use YouCompleteMe, NERDTree or anything like that. I use dumb, language-agnostic completion and dumb, language-agnostic FZF and Rg for searching and navigating the source code. If I&#x27;m feeling fancy I use universal-ctags, but if it&#x27;s not here FZF and Rg do a good enough job.<p>I understand this preference, but it&#x27;s also important to recognize that you are essentially programming with one hand tied behind your back when you are choosing to use such tools instead of an IDE when one is available.<p>For example, free IntelliJ can do &quot;Data flow from&#x2F;to here&quot; analysis on your code for Java (probably others as well), which analyzes your whole project and finds all the code paths that use&#x2F;provide a value for a variable, at any depth of calls. For a medium-sized product, finding the same information with Rg is easily 30m of work; if you need to navigate between the levels to find a bug, you&#x27;ll lose even more time.<p>Also, refactoring tools that an IDE can give you make certain programming tasks trivial at 3-5 key presses which would easily be a 2 day change in a medium project using basic text processing tools.<p>Especially now that most IDEs also support VIM or emacs key bindings, it is very rarely a good idea for medium-to-large codebases to rely on text processing tools instead of a full IDE. Note that I&#x27;m also considering vim&#x2F;emacs+language server or similar extensions as an IDE (though LSP has quite a way to go, especially on the refactoring side).<p>For small projects, or for languages with poor code analysis support, I do agree that these advantages don&#x27;t amount to much and personal preference and familiarity amounts to much more than any tools an IDE can give.')