Item(by='rektide', descendants=None, kids=None, score=None, time=1609825266, title=None, item_type='comment', url=None, parent=25642100, text='the thing is, it doesn&#x27;t really matter. someone has to figure out how to provision &amp; configure a bunch of resources for the app, &amp; too often that toolchain bloats &amp; becomes inaccessible to more &amp; more of the company&#x27;s developers, which wrecks the dev-ops feng-shui we all want. but it kind of doesn&#x27;t matter. these are a kind of minor cost of doing software, truthfully.<p>the interesting bits in-development these days are not the toolkits to assemble cloud. the interesting bits are the cloud-ification of the application. rather than configuration &amp; state being managed by the app, externalizing more &amp; more of the inner-pieces of the app into external services really reduces the app foot-print, &amp; gives all apps in the environment a common basis for operation. at the moment, it&#x27;s pretty much only kubernetes doing anything here, &amp; frankly, it&#x27;s under-hyped, radically under-hyped, that this is the true-er goal of kubernetes. it&#x27;s not just another platform. desired state management is a whole philosophy for computing, about writing what you want to do in to a central archive, then allowing autonomic systems to break down &amp; accomplish the state you have told the system to set out for.<p>this hinges upon simple steps like externalizing your apps state into central&#x2F;cloud systems along-side other app&#x27;s state. it&#x27;s practiced by writing separate controllers, a kind of inten-based CQRS 2.0. writing code to build state, as cdk does, is convenient &amp; ops friendly. but still very procedural&#x2F;computing 1.0. i very much look forward to a far better, far more expansive future, one that is far less isolated &quot;me and my app&quot; &amp; much more bigger picture &amp; all encompassing. kubernetes is bringing that. nothing else is, that i have seen.')