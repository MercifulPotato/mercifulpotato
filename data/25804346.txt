Item(by='sideeffffect', descendants=None, kids=None, score=None, time=1610822992, title=None, item_type='comment', url=None, parent=25804036, text='AFAIUI _monomorphisation_ and reification are interchangable.<p>That means, that if I have a polymorphic (generic) class `MyClassA&lt;T&gt;`, the compiler (regardless if it is JIT in the runtime as in C#, or AOT as in Rust) monomorphises (reifies) `MyClassA` for each instantiation of `T`. So `MyClassA&lt;MyClassB&gt;` and `MyClassA&lt;MyClassC&gt;` are distinct classes.<p>For this reason, co-&#x2F;contra-variance in C# works only for interfaces. Type parameters in classes are invariant. `MyClassA&lt;MyClassB&gt;` and `MyClassA&lt;MyClassC&gt;` are distinct classes, neither sub-&#x2F;super-class of the other, even if `MyClassB` were a subclass of `MyClassC`.')