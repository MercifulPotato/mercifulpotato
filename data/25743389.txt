Item(by='codexon', descendants=None, kids=[25743531], score=None, time=1610435301, title=None, item_type='comment', url=None, parent=25742765, text='&gt; You&#x27;ve already started to add new things, like a TOTP-ish element, to stymie replays. Then the server has to check what it&#x27;s been fed, having stored neither the original password nor the hash of the password it&#x27;s been passed.<p>I don&#x27;t see how this is any different from Valve &quot;reinventing&quot; SSL by using RSA. This isn&#x27;t a new concept or roll your own crypto. I just don&#x27;t want my password to be in plain-text. The only thing the server should get is the hash. If you are using RSA on the password, that means your password is going to be in plaintext on their servers eventually.<p>&gt; It cannot be allowed to have the hash because the has is now the password. Now you have all the problems of server-side hashing and comparison coupled with extra client-side hoops.<p>The original password? Ok go ahead and encrypt it (and also hash it). But only do it once and not every login.<p>&gt; Do you think that perhaps there might be other reasons to consider here? Such as debugging, logging systems, and so on? Perhaps there are design goals beyond blocking direct attacks. On an average day, most of these systems will be more likely to be accessed and used by authorized administrators than by external adversaries<p>It just seems strange to me that you would have trouble trusting your administrators to accidentally leak logs. What happens if they need to debug or log the app server behind the SSL layer? How likely is it that the dumb SSL termination layer is causing a problem and not the app layer?')