Item(by='Measter', descendants=None, kids=None, score=None, time=1609254710, title=None, item_type='comment', url=None, parent=25536961, text='This is what I ended up with:<p><pre><code>    fn search&lt;T: Ord&gt;(haystack: &amp;[T], needle: &amp;T) -&gt; Result&lt;usize, usize&gt; {\n        let mut range = 0..haystack.len();\n        while !range.is_empty() {\n            if range.len() == 1 {\n                if &amp;haystack[range.start] == needle {\n                    return Ok(range.start);\n                } else {\n                    return Err(range.start + 1);\n                }\n            }\n        \n            let search_range = &amp;haystack[range.clone()];\n            let (left, right) = search_range.split_at(search_range.len() &#x2F; 2);\n            \n            if needle &lt; &amp;right[0] {\n                range.end -= right.len();\n            } else {\n                range.start += left.len();\n            }\n        }\n        \n        Err(range.start)\n    }\n</code></pre>\nI&#x27;m not overly happy with the break conditions inside the loop. They feel messy.')