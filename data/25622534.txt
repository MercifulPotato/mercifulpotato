Item(by='pfalcon', descendants=None, kids=[25623267], score=None, time=1609690007, title=None, item_type='comment', url=None, parent=25622157, text='&gt; I think it&#x27;s quite the opposite. Don&#x27;t forget that C also has macros and a lot of arcane undefined behaviour.<p>C lexic-based &quot;macros&quot; are implemented by a separate component, &quot;C preprocessor&quot;. C clearly needs a AST-based macros, not a whole new language to replace it. Undefined behavior comes from the fact that C is machine-independent assembler (with structured syntax), so to be exactly that (&quot;machine-independent&quot; and &quot;assembler&quot;), it has to underspecify machine-specific matters, like what happens if you shift 32-bit number by 33 bits.<p>&gt; I don&#x27;t know if Zig is as simple as C -- it doesn&#x27;t have macros but does have, say, slices and comptime -- but it&#x27;s also much safer and much more expressive. Overall, it&#x27;s a very simple language, that&#x27;s very expressive and also quite safe.<p>Those are points which I doubt - it&#x27;s clearly not expressive enough, and there&#x27;re safer languages either. Is there niche for it? I&#x27;m on a fence with popcorn. But as I look to it, I see things which I consider &quot;mistakes&quot;. And I love to talk about mistakes!<p>&gt; And I&#x27;m sorry, too, but I would say it&#x27;s an example of Zig&#x27;s exceptionally great design at this stage.<p>Expectedly, I don&#x27;t buy this &quot;worse is better&quot; argument either. It&#x27;s not good when you annotate a simple call and it turns from a simple call into an ugly mess. It&#x27;s not rocket science to come with a syntax which would avoid that. If Zig language creators didn&#x27;t do that so far, that&#x27;s exactly what I call &quot;not enough good faith went into Zig design&quot;.<p>Your appendix of &quot;so far&quot; is accepted - keep up the great work!')