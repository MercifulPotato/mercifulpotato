Item(by='pjmlp', descendants=None, kids=None, score=None, time=1609849227, title=None, item_type='comment', url=None, parent=25640359, text='The Windows team have themselves to blame for the way this has been handled since Windows 8.<p>Here are some bullet points, that even I as WinRT believer have to acknowledge, please hold with me starting rant mode:<p>- Windows 8 broke compatibility with XNA&#x2F;Silverlight model<p>- WinRT even though it is definilty a better COM, required 3 implementations on Windows 8.0 (phone, tablet and desktop)<p>- Windows 8.1 reduced that to 2 (phone&#x2F;table and desktop) with UAP, and naturally a rewrite was required<p>- Windows 10, merged all models, renamed UAP into UWP, and naturally a rewrite was required<p>- Windows team not happy with .NET taking up of the Windows eco-system, botched Longhorn, doubled down on COM eventually leading up to WinRT&#x2F;UAP&#x2F;UWP, whatever you want to call it.<p>- Naturally they couldn&#x27;t just reuse .NET runtime with added support for AOT, so Windows 8.x adopted AOT compilatio model from Singularity, followed up by .NET Native on Windows 10. In both cases, also incompatible with regular .NET.<p>- Similarly, C++&#x2F;CX which was introduced for WinRT, the first time that Microsoft finally had a C++ RAD experience somehow comparable to C++ Builder, was killed by the Windows team pushing C++&#x2F;WinRT with complete and total disregard for developer tooling, making those of us that depend on mixed code bases (.NET&#x2F;C++) to feel we are back into the Visual C++ 6.0 days, manually editing IDL files in notepad and doing ATL like template magic. From their point of view, screw us, and we should wait until ISO C++23 for the Visual Studio team to be able to replicate in C++&#x2F;WinRT the kind of tooling we were able to join in C++&#x2F;CX.<p>- Project Reunion just got their 0.1 milestone one (yep not a typo)<p>- WinUI 3.0, although deeemed as the future native UI, won&#x27;t be feature parity with UWP, only later the year<p>- .NET 5 isn&#x27;t supported in .NET Native, and the roadmap between CoreRT, .NET 6 and .NET Native isn&#x27;t fully clear<p>&#x2F;rant mode off<p>While this kind of reboots might be daily stuff on Apple and Google&#x27;s platforms, it didn&#x27;t land that well among the typical enterprise customers from Microsoft, and most likely not other Microsoft teams that are upper of the SDK food chain.<p>However, why stay on Microsoft stack then? Because I could write equally long rants for the other eco-systems I develop for, and Microsoft while being this schizophrenic still provides the best developer experience and smallest rant list from my point of view.')