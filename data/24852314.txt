Item(by='jacques_chester', descendants=None, kids=None, score=None, time=1603315193, title=None, item_type='comment', url=None, parent=24846890, text='It&#x27;s an example of what economists call &quot;The Hold-up Problem&quot;, as part of &quot;Incomplete Contracts&quot;.<p>Basically, it&#x27;s impossible to write a contract to cover all situations, so eventually any two parties will need to renegotiate. If one has leverage over the other, they can do stuff like raise prices or simply refuse service. One factor affecting that leverage is &quot;asset specificity&quot;: given an asset that&#x27;s covered by the contract, is it reusable in different contexts or is it too closely adapted to one purpose?<p>The literal textbook example is a steel foundry and a railroad. The steel company needs a spur line to its foundry to receive raw materials and send out finished steel. The railroad company can run a spur from its main line to the foundry.<p>In this case the asset (the spur line) is extremely specific. Without the spur line, the foundry is worthless. Without the foundry, the spur line is worthless. The balance of leverage then comes down to relative costs and gains. The railroad will hold the upper hand, because closing a spur line isn&#x27;t existential, but it is for the steel foundry.<p>In the software context it shows up as a &quot;contract&quot; between your software and a database. You can use an ORM to try to insulate yourself, reducing asset specificity, but that decision has costs (eg, specific DB features you must forego). You can choose to increase asset specificity by adapting to only one DB and fully utilising its strengths, but you may face a future hold-up.<p>Note from the train example that hold-ups needn&#x27;t be &quot;pay me more&quot;. They can also be &quot;I&#x27;m walking away&quot;. So a hold-up from Oracle will be &quot;pay me more&quot;, whereas a hold-up from an obscure database with one developer could be that they simply quit, die or otherwise become incapable of working.')