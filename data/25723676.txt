Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1610332834, title=None, item_type='comment', url=None, parent=25723351, text='I actually had that in my first draft of my comment. But I hadn&#x27;t read it in a while and just did.<p>While he endorses 0-based in one of the remarks, he&#x27;s actually endorsing the notational format of:<p><pre><code>  a &lt;= x &lt; b or [a,b)\n</code></pre>\nWhere if b is renamed N, the length of a vector&#x2F;array&#x2F;list, in a 0-based notation, then you&#x27;d describe a 0-based vector&#x27;s range as [0,N). The reasons he gives for preferring this notation for ranges (not, strictly, for 0-based ranges, but for all ranges):<p>1. Experience at Xerox where this notation (versus the other 3 he describes) leads to fewer errors. An informal study but a study none the less.<p>2. Using either [a,b) or (a,b], the size of the range is the difference between the provided bounds.<p>3. Using [a,b), adjacent ranges can be detected where b_1 = a_2. Given ranges [2,13) and [13,20) you can see that they&#x27;re adjacent by just comparing two values. This certainly makes it quick to visually inspect as a code reader&#x2F;writer. (the same argument can be made for (a,b])<p>4. An argument for either [a,b) or [a,b] is that the lower bound should be described by the minimum number in the range because it&#x27;s more aesthetically pleasing.<p>So by process of elimination, he&#x27;s left us with [a,b) as the better notation of the 4 options.<p>Based on an aesthetic argument, if you accept the above, then 0-based makes more sense because [0,N) is more aesthetically pleasing than [1,N+1). But if you use notation (c) from his report:<p><pre><code>  a &lt;= x &lt;= b or [a,b]\n</code></pre>\nThen 1-based can be described as the interval [1,N] where N is both the last element <i>and</i> the length of the vector&#x2F;array&#x2F;list. Which seems rather pleasant&#x2F;natural to my eyes and fingers as well.<p>----------<p>If we accept the experience at Xerox, then his argument for 0-based indices is reasonable based on the assumption that ranges should be described as [a,b). If we <i>don&#x27;t</i> accept it, then his argument is mostly based on aesthetics. That is, it&#x27;s <i>more</i> pleasant to do a computation like:<p><pre><code>  range size = b - a\n</code></pre>\nthan (for ranges described with [a,b]):<p><pre><code>  range size = b - a + 1\n</code></pre>\nAnd it&#x27;s <i>more</i> pleasant to do a comparison like:<p><pre><code>  adjacent? b_1 = a_2\n</code></pre>\nthan (for ranges described with [a,b]):<p><pre><code>  adjacent? b_1 = a_2 - 1\n</code></pre>\nBut that first case doesn&#x27;t matter in a 1-based array because the range size is <i>just</i> `b`, it&#x27;s already stated in the range and there&#x27;s no need for computation (just as it&#x27;s present in 0-based ranges). Now, if your language permits arbitrary ranges then I think a case could be made for his suggested [a,b) notation. But if you&#x27;re only choosing between 0-based or 1-based, I don&#x27;t find it persuasive. It&#x27;s still a tossup for me, neither is better than the other unless you <i>also</i> choose his notation for describing ranges, where [1,N+1) would be awkward but [1,N] is easier to use and understand.')