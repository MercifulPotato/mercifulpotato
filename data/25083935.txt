Item(by='miki123211', descendants=None, kids=[25084865, 25084047], score=None, time=1605284997, title=None, item_type='comment', url=None, parent=25081853, text='Zig&#x27;s compile time execution lets you do similar things I believe.<p>In Zig, structs and modules are equivalent, and type declarations can be manipulated at compile time just like any other value. That, among other things[1], lets you write:<p><pre><code>  fn LinkedList(comptime T: type) type {\n      return struct {\n          pub const Node = struct {\n              prev: ?*Node,\n              next: ?*Node,\n              data: T,\n          };\n  \n          first: ?*Node,\n          last:  ?*Node,\n          len:   usize,\n      };\n  }\n\n</code></pre>\nI wonder if there&#x27;s anything that OCaml functors can do but this can&#x27;t.<p>[1] for example, you can implement a very efficient printf that gives an error at compile time when the format string is invalid. See <a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#comptime" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;master&#x2F;#comptime</a> for more details.')