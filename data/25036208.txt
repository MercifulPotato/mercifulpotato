Item(by='PragmaticPulp', descendants=None, kids=[25036341], score=None, time=1604938159, title=None, item_type='comment', url=None, parent=25036001, text='&gt; Everywhere I worked, I have always enjoyed developing internal tools.<p>This is both a blessing and a curse.<p>Internal tools are great when managed properly, but they can turn into significant drains on developer energy if the team isn&#x27;t careful.<p>The reality is that if a 3rd-party product accomplishes 90% of what the company needs, it&#x27;s almost always worth it to just pay the company and move on.<p>I&#x27;ve seen far too many internal projects that were pitched as 1-month or even weekend efforts turn into multi-year burdens on entire departments. When engineers get excited about building tools, they often forget the overhead of maintaining and supporting the tool indefinitely.<p>The other challenge is that internal tools often escape the management oversight that goes along with customer-facing products. This leads to scope creep, poor resource tracking, and other problems that can drown an engineering team if left unchecked.<p>Internal tools are great when the business case exists, but if engineers are working on internal tools for the sake of writing the code or having fun, watch out.')