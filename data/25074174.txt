Item(by='aard', descendants=None, kids=[25074398, 25075159, 25074934, 25074446, 25078791, 25074366, 25075081], score=None, time=1605211250, title=None, item_type='comment', url=None, parent=25073218, text='&gt; &quot;In a competitive market for development work and staff, paying people to learn from mistakes that have already been made by many others is an unaffordable luxury; an engineering approach, derived from evidence, is a lot more cost-effective than craft development.&quot;<p>I disagree with this characterization. Yet again, we developers are being told to just follow the program. That programming is not an artistic or craft endeavor that benefits from experience and intuition. It is like working in a factory where coders just bang out widgets on an assembly line. And the self-appointed thinkers will optimize the process for us.<p>What is at risk by not allowing developers to &quot;learn from mistakes&quot; is autonomy. Striping developers of their autonomy is the primary cause of poor performance, not an inability to execute so-called &quot;best practices&quot;<p>Attempts to codify the process of software development always fail, because coding is a design process not a manufacturing one. Developers do their jobs in many different ways, many of which are equally effective. There is more than one way to skin a cat -- especially in creative work.<p>&gt; &quot;The labour of the cognitariate is the means of production of software systems&quot;<p>This false assumption is at the base of the problem. The work of the compiler (or scp) are the means of software production. Coding is design. Once the design is complete, the results are compiled and copied to their target environments. In software, production is negligible. Which promotes the misconception that developers are producing software. In actuality they are designing software. The difference may seem subtle, but it is crucial.')