Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1609001986, title=None, item_type='comment', url=None, parent=25541582, text='&gt; superiority &amp; certainty<p>I apologize if my certainty came across as superiority. It wasn’t meant that way. I’m certain because of what I’ve learned, and sharing that to hopefully help others shorten that learning process.<p>&gt; this conviction that these language features are never the right answer?<p>I wouldn’t say never. I can think of use cases for it, but they’re all generally around interop with external interfaces that expect this behavior. Even then the example is better served by plain value types, but there are more complex cases where I would use something like this (or a Proxy, or other dynamic dispatch techniques).<p>&gt; In my experience, teams &amp; individuals can have a lot of bad sad mad anecdotes they make for themselves. But other people can find &amp; use the same tools &amp; techniques very stably, successfully, &amp; to good effect.<p>Maybe so. But if I had to guess, I would say that if those teams have a reaction to constructive critique like yours, it’s unlikely they know whether their work is effective or not.<p>&gt; I don&#x27;t fully believe you, that you have this experience.<p>Okay? Then don’t hire me I guess. I’m not here to prove anything, I was trying to offer a simpler solution and explain its benefits.<p>&gt; That you&#x27;ve earned this ability to trash &amp; insult a rather-wide piece of JavaScript &amp; it&#x27;s use. In a complete &amp; total way, you&#x27;ve said no, that you alone are the only important voice &amp; that you have total knowledge. This isn&#x27;t only harsh... it&#x27;s other unfavorable things too.<p>You’re wildly misinterpreting my comments. I’m not trashing anything. I’m certainly not saying I am alone in expressing anything like this. I stand on the shoulders of giants. The person who first brought the benefit of basic value types instead of dynamic behavior to my attention was a former coworker, who led me to check out Clojure, which improved my work (at least) tenfold. I’ve learned more from paying attention to ML family languages like Elm and Haskell.<p>&gt; Meddling with descriptors is absolutely something that can go wrong, and it&#x27;s very hard to know it really for sure is a good case- often you&#x27;d be better without. But there are also many good cases where these techniques &amp; knowledge of them is absolutely divine, enables really nice solutions. If you need to instrument some existing 3rd party objects? Fantastic, absolutely fantastic.<p>It seems like we might not be as far off in our thinking as you assume. But I think there’s a risk in presenting something like this as a general technique rather than a special case. And I think there’s a benefit in presenting a simpler alternative that would be better for 99% of cases.')