Item(by='jariel', descendants=None, kids=[25122738, 25123578, 25122969], score=None, time=1605612968, title=None, item_type='comment', url=None, parent=25122436, text='So this, to me, is not a &#x27;benefit of git&#x27; it articulates in some ways how bad it is (although very powerful).<p>Most people can get going with those 99% commands quite quickly, the problem with git is any move from the known path creates some pretty amazingly complicated scenarios.<p>And those &#x27;1% of the time&#x27; commands blow up into time-consuming rabbit holes of complexity. Often, Stack Exchange has several answers for the same question, highlighting just how much inherent complexity there is in the product.<p>Managing software versions across repo can be a very, very complicated problem. Git provides you with a pile of tools to do &#x27;almost anything&#x27;.<p>A &#x27;well designed product&#x27; would make the toolsets and concepts focus heavily on the &#x27;main operations&#x27; and then have clear, clean rational idioms, practices and tools for the odd cases, and &#x27;dangerous cases&#x27; wouldn&#x27;t be allowed without some kind of special command.<p>They have the &#x27;Golden Rule of Git&#x27; which is to not rebase on a public branch - this is an excellent example of poor product design. There should be no &#x27;golden rule&#x27; that developers have to understand - it shouldn&#x27;t be possible (without special admin commands). If branches are named&#x2F;tagged and managed properly, the system would be smart enough to let you know you can&#x27;t do that, and why.<p>Administrators exist for a reason, &#x27;sudo&#x27; exists for a reason etc.<p>People who love powerful things, and have an inclination towards complexity seem to love git, people who have a product orientation see it differently.')