Item(by='Robin_Message', descendants=None, kids=None, score=None, time=1610723197, title=None, item_type='comment', url=None, parent=25791580, text='That may be fair :)<p>Personally, I enjoy React on the front-end but don&#x27;t currently like any back-end framework, so Reflux may well be better in aggregate.<p>(FWIW, I have a PhD in computer science and big part of that was on web applications and frameworks for them, combined with ~15 years commercial experience mastering web development, so this wasn&#x27;t meant to be a middle-brow dismissal. As I said, it is exciting, I&#x27;m just not convinced.<p>I think there is some merit in the argument that too much cleverness can be dangerous. Battle-hardened is tricky; I agree TodoMVC is meant to be a minimalist demo, but if a minimal demo can have subtle bugs caused by the cleverness of the data binding, how much more so a real app with a much more complex data model?<p>But I guess it does eliminate whole other classes of bug, so I can believe it works less buggy and more productive better than React+some back end.<p>I certainly find the current front&#x2F;back split endlessly painful. I am also excited by the new React Server Components which might be another good solution to that.)<p>EDIT TO ADD: I guess what I was trying to say is: I found this interesting, and I looked at it, and then I found this bug in the example, and I wonder if this framework might make a bug like that more likely because the power of making some things easier is obscuring what is happening in some cases, and I don&#x27;t know if that trade-off is worth it.')