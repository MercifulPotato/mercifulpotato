Item(by='okl', descendants=None, kids=[25182202], score=None, time=1606051800, title=None, item_type='comment', url=None, parent=25176531, text='Here is an <i>assert</i> that is static if possible:<p><pre><code>  #ifndef __clang__\n  #define assume(expr) \\\n      __extension__ ({ \\\n          static_assert(__builtin_choose_expr( \\\n              __builtin_constant_p(expr), expr, true), #expr); \\\n          assert(__builtin_choose_expr( \\\n              __builtin_constant_p(expr), true, expr)); \\\n      })\n  #else\n  #define assume(expr) \\\n      __extension__ ({ \\\n          static_assert(__builtin_constant_p(expr) ? (expr) : true, #expr); \\\n          assert(__builtin_choose_expr( \\\n              __builtin_constant_p(expr), true, expr)); \\\n      })\n  #endif\n</code></pre>\nNote that the clang semantics of language extensions sometimes differ from GCC.<p>I also like to use <i>__auto_type</i> very much:<p><pre><code>  #define var __auto_type\n  #define let __auto_type const\n</code></pre>\nAs in:<p><pre><code>  #define m_max(a, b) \\\n      __extension__ ({ \\\n          let _a = (a); \\\n          let _b = (b); \\\n          _a &gt; _b ? _a : _b; \\\n      })</code></pre>')