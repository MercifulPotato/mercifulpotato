Item(by='alquemist', descendants=None, kids=[24733494, 24733922, 24733640], score=None, time=1602271166, title=None, item_type='comment', url=None, parent=24730713, text='&gt; â€¦ The language (SQL) is not very composable. This is a fact that most SQL users are not aware of. The relational algebra that SQL is based on is absolutely composable but SQL is not due to the inherent limitation of the language (as it was designed to be natural language-like). When you write &quot;select x from a where z&quot;, you are actually building something along the lines of &quot;from a&quot; =&gt; &quot;where z&quot; =&gt; &quot;select x&quot; in the algebra and you can actually compose each portion separately. If you are familiar with dplyr, Spark or pandas you would get this instantly.<p>Hmmm. Not a big lover of SQL, but this is a bit imprecise. While the unit of composability is slightly smaller for from=&gt;where=&gt;select (expression) vs select+from+where (subquery), in practice they both encode the same fundamental compositional principles, based on relational algebra. Any from=&gt;where=&gt;select query can be translated into a select+where+from query almost 1:1, if only via:<p><pre><code>    from t ::= select * from t\n    q =&gt; where p ::= select * from q where p\n    q =&gt; select xs ::= select xs from q \n</code></pre>\nSometimes the select+where+from ends up more verbose, sometimes there is more brain twisting to grok a given select+where+from query, but that&#x27;s not a composition limiting factor. Granted, the readability of SQL is sometimes lacking, but it is fully capable to compose  recursive relational algebra queries.')