Item(by='marcan_42', descendants=None, kids=[24847845], score=None, time=1603282654, title=None, item_type='comment', url=None, parent=24845300, text='Everyone here is arguing for their favorite side. As often is the case, the best solution is often somewhere in the middle, using the best tools for the job.<p>I authored a complete rewrite of an ancient and rotting PHP+MySQL web ticket reservation app in Python+SQLAlchemy+PostgreSQL. I use an ORM - except where it doesn&#x27;t make sense because a SQL query expresses what I need to do more concisely and effectively. I don&#x27;t use stored procedures - except where I do because I need one specific atomic DB operation to be performant and not bottlenecked on the app. I use relational storage - except almost every table in the database has a big JSON column for everything I don&#x27;t need to ever join, filter on, or index in production codepaths (though I can still do that with PG&#x27;s native json support, which is great for the rare case I have to move something to a real column). And I use triggers, stored procedures, and notifies to implement live change notifications for a table, that eventually get fed via WebSockets server to users.<p>This hybrid approach has served me extremely well, resulting in very readable and maintainable code, minimal DB schema migration pain (most upgrades only touch JSON fields and thus require no migration), and much better performance than the old app, especially in that hot path using the SP, while keeping table column bloat down, and avoiding the join spam that results from keeping everything religiously normalized even in cases where that doesn&#x27;t buy you anything.<p>Of course, that does mean you need to know all the relevant technologies involved, SQL, ORMs, etc.<p>YMMV, but consider that if you think a single solution is the right solution in all cases, you&#x27;re most likely wrong.')