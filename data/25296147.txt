Item(by='kazinator', descendants=None, kids=[25305984], score=None, time=1607034564, title=None, item_type='comment', url=None, parent=25294891, text='The commentary on adding OO to Lisp is garbage.<p>&gt; &quot;Making Scheme object-oriented is a sophomore homework assignment.&quot;<p>Demonstrating basic OOP in C is likewise a suitable homework assignment.<p><a href="http:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Inheritance&#x2F;Single&#x2F;C" rel="nofollow">http:&#x2F;&#x2F;rosettacode.org&#x2F;wiki&#x2F;Inheritance&#x2F;Single&#x2F;C</a><p>Making a viable object-oriented programming system for others to use is not a trivial task in any language.<p>No object system for Scheme that people actually use had been written by a sophomore as homework and gone into production in that state. (Linux started by a school kid tinkering with kernel programming too; but it would be a strawman to say that a bright undergrad can make a serious Unix clone in a few weeks that Amazon can put into the cloud and sell services on.)<p>The Common Lisp object system took many people years of work, and integrates deeply into the language, such that every object type has a class and can participate meaningfully in the object system without being wrapped in a class.<p>&gt; <i>Due to the difficulty of making C object oriented, only two serious attempts at the problem have made any traction: C++ and Objective-C.</i><p>Those are examples of having enough traction to actually get people to switch from C to a new language.<p><i>Ad hoc</i> object systems have been implemented in C programs umpteen times, and a number of such things are available, or have been historically available, as formal libraries for use in C programs.<p>These all have &quot;traction&quot; in their &quot;respective&quot; projects and ecosystems; there is a lot of OOP action within C.')