Item(by='eyelidlessness', descendants=None, kids=[24702462, 24700757], score=None, time=1602007500, title=None, item_type='comment', url=None, parent=24699659, text='I am also a big fan of Postgres, and tend to have a bit of fun picking on MySQL having been scarred by it in a past life. But since we&#x27;re picking at Postgres warts...<p>One which bit me recently, and is still utterly baffling to me, is that a column defined as an array type will accept values of that array&#x27;s type in any number of dimensions greater than that specified for the column. In other words,  `{{{{{{text}}}}}}` can be inserted into columns of the following types:<p>- `TEXT[]`<p>- `TEXT[][]`<p>- `TEXT[][][]`<p>- `TEXT[][][][]`<p>- `TEXT[][][][][]`<p>- `TEXT[][][][][][]`<p>The inverse is true as well! A column specified `TEXT[][]` (and so on) will accept `{text}`. Of course, none of this (as far as I&#x27;ve been able to find) is documented.<p>But wait, there&#x27;s more!<p>`UNNEST` does not allow you to specify depth, it always unnests to the deepest dimension. This, too, is undocumented. In fact, it&#x27;s anti-documented. The documents provide an example function to unnest a two-dimensional array that is wholly unnecessary (and likely performs worse than the built-in `UNNEST`, but I&#x27;m just guessing). Said documentation would <i>seem</i> to imply that the depth of `UNNEST` is 1, but of course that&#x27;s not the case.<p>But wait, there&#x27;s more still!<p>What if you want to get at a nested array? Idk, I&#x27;m sure it&#x27;s possible, but if you thought `SELECT that_array[1]` is the way to do it, look under your seat because you&#x27;re getting a `NULL`!<p>- - -<p>Postscript: I discovered the first part of this <i>in a production system</i> where a migration had incorrectly nested some data, and where that data was in turn causing certain requests to unexpectedly fail. Of course, given that this was in production, I didn&#x27;t have a lot of time to research the issue. Found the problem, fixed it, moved on with my day. In the course of fixing it, I discovered the `UNNEST` issue, which... okay fun, fix it a slightly different way than I expected.<p>So in the course of verifying the particulars to write this comment, I played around with some things, and discovered the `NULL` issue.<p>At least when Postgres has wildly unexpected behavior, it&#x27;s <i>exceptionally</i> unexpected behavior.')