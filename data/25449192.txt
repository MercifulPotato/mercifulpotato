Item(by='dfabulich', descendants=None, kids=[25449533, 25449843, 25449353, 25449772], score=None, time=1608155124, title=None, item_type='comment', url=None, parent=25448533, text='The GnuPG implementation was just one of the problems with PGP; Sequoia can&#x27;t fix any of PGP&#x27;s real problems while still being a &quot;PGP&quot; implementation. <a href="https:&#x2F;&#x2F;latacora.micro.blog&#x2F;2019&#x2F;07&#x2F;16&#x2F;the-pgp-problem.html" rel="nofollow">https:&#x2F;&#x2F;latacora.micro.blog&#x2F;2019&#x2F;07&#x2F;16&#x2F;the-pgp-problem.html</a><p>tl;dr: PGP is absurdly complex, mired in backwards compatibility with broken crypto algorithms, and relies on long-term secrets with no forward secrecy.<p>In this very blog post, Sequoia PGP explains that they continue to support SHA-1, which was broken in 2005, for backwards compatibility reasons. They&#x27;ve added some code to mitigate the damage (introducing more complexity); they hope to turn off SHA-1 in 2023.<p>Cool. In the meantime, don&#x27;t use PGP, not even Sequoia PGP. Use Signal to transfer messages and files. Use full-disk encryption for encrypting backups. Use Minisign to sign packages. Use libsodium for encrypting app data.<p>EDIT: This post is currently at -3 downvotes without comment, presumably from folks who think SHA-1 is just fine and that I&#x27;m overstating the case. I ask you to just read the link I posted and explain why you think PGP is good, actually, despite its terrible reputation among professional cryptographers and security professionals.<p>&quot;We can’t say this more clearly or often enough: you can have backwards compatibility with the 1990s or you can have sound cryptography; you can’t have both.&quot;')