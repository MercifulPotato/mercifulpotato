Item(by='horsawlarway', descendants=None, kids=None, score=None, time=1610037059, title=None, item_type='comment', url=None, parent=25671245, text='Depends on what I&#x27;m trying to do.<p>If I&#x27;m building an API for clients - I&#x27;ve really been enjoying Typescript and plain old Express.  Setup takes an extra 30 minutes or so compared to Rails - probably longer if you aren&#x27;t familiar with Typescript and Node already - but it works nicely, has a great minimal default, and mostly gets out of the way.  Big plus is that type information can be shared across the client and the server, so you avoid a lot of duplicate effort redefining types, and you don&#x27;t accidentally change a type on the client and forget the server, or vice versa.<p>If I&#x27;m doing something experimental or hacky (last time I was creating a MITM proxy) definitely GoLang.  The language is slim and powerful, they let you peel back most of the abstractions as needed, and the code is fast.  The downside is it will absolutely take you longer to get running.  The upside is a lack of hurdles once you&#x27;re actually moving.<p>If I&#x27;m just spinning up a simple static&#x2F;mostly static site - I actually think DotNet Core is a decent framework.  Honestly, so is Rails in this case.  I&#x27;d pick C# over ruby in a heartbeat, though, explicitly because the older I get, the more I want a type system.<p>Honestly, I think Rails (and really Ruby) is moving in a direction I support.  Particularly adding types.  But it&#x27;s not a language&#x2F;framework I would pick at the moment, unless I was just doing one-time contract work for a product I know won&#x27;t be updated.')