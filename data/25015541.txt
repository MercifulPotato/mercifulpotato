Item(by='sradman', descendants=None, kids=[25018438, 25026786], score=None, time=1604762454, title=None, item_type='comment', url=None, parent=25014909, text='Aside: why is there not an RSS feed for the WunderGraph blog?<p>I think Jens Neuse is making two important observations about GraphQL:<p>1. GraphQL&#x27;s single URL&#x2F;endpoint [1] is possibly an anti-pattern<p>2. ETags are important for Cache-Control and Concurrency-Control on REST endpoints<p>The concept of prepared statements is useful for my SQL-centric brain. WunderGraph effectively creates a REST endpoint for each prepared statement (GraphQL DML). Like prepared statements in SQL, WunderGraph uses query metadata to determine the types of input parameters and the shape of the JSON response.<p>Kyle Schrade makes an important point about canonical GraphQL queries: response payloads can be reduced by filtering JSON fields, similar to SQL projection (i.e. the columns specified in the SELECT clause). It seems that WunderGraph can potentially support both approaches by allowing optional GraphQL queries on each REST endpoint that can be used to filter the endpoint specific JSON response.<p>[1] <a href="https:&#x2F;&#x2F;graphql.org&#x2F;learn&#x2F;serving-over-http&#x2F;#uris-routes" rel="nofollow">https:&#x2F;&#x2F;graphql.org&#x2F;learn&#x2F;serving-over-http&#x2F;#uris-routes</a>')