Item(by='dmurray', descendants=None, kids=None, score=None, time=1603838074, title=None, item_type='comment', url=None, parent=24912343, text='One way to look at it is that your ability to contribute is one part familiarity with the stack, the problem domain, and the company&#x27;s development process: one part &quot;generic ability&#x2F;competence&quot;.<p>You&#x27;re going to learn the first part on the job. It&#x27;s rare - especially in Google&#x27;s hiring - that you want to hire someone for their deep familiarity with the tech stack or problem domain. So you select for the second part.<p>But your test for the second part still involves specialising in some process. Take home tests or pair programming exercises aren&#x27;t &quot;culture-blind&quot; any more than whiteboard tests. So a large important part of the industry standardised on a &quot;development process&quot; of writing code on a whiteboard, a &quot;business domain&quot; of advanced-undergrad-level data structures, and a &quot;tech stack&quot; of &quot;pick any language you want, or a reasonably rigorous pseudocode&quot;. If everyone learns that to the same degree, the remaining differences between the candidates are mostly in part 2.<p>There are some downsides that get trotted out on HN every time: you may reject someone who&#x27;s really good but didn&#x27;t take the time to focus on undergrad data structures, you may reject someone who is particularly bad at whiteboard stuff (typically due to nerves), your process is easier to train for recent CS grads from good universities. But every system has downsides. This one is reasonable for Google and not-terrible for you, but you may be able to do much better by focusing on one of the sets of people Google&#x27;s process underrates.')