Item(by='kazinator', descendants=None, kids=None, score=None, time=1611162596, title=None, item_type='comment', url=None, parent=25848616, text='TXR Lisp doesn&#x27;t mention static types:<p><pre><code>  $ grep &#x27;static type&#x27; txr-web&#x2F;*.html txr&#x2F;txr.1\n  $\n</code></pre>\nNo hit for &quot;static type&quot; in the web pages or reference manual. Dynamic type ditto:<p><pre><code>  $ grep &#x27;dynamic type&#x27; txr-web&#x2F;*.html txr&#x2F;txr.1\n  $\n</code></pre>\nI don&#x27;t think Common Lisp has a &quot;prominent headline&quot; about static types anywhere, either. There are no hits for any of those terms in the draft ANSI standard:<p><a href="https:&#x2F;&#x2F;franz.com&#x2F;support&#x2F;documentation&#x2F;cl-ansi-standard-draft-w-sidebar.pdf" rel="nofollow">https:&#x2F;&#x2F;franz.com&#x2F;support&#x2F;documentation&#x2F;cl-ansi-standard-dra...</a><p>Scheme&#x27;s R7RS explicitly talks about dynamic typing in two places:<p>Introduction:<p><i>Scheme was one of the first programming languages to incorporate first-class procedures as in the lambda calculus, thereby proving the usefulness of static scope rules and block structure in a dynamically typed language.</i><p>1.1 Semantics:<p><i>Scheme is a dynamically typed language. Types are associated with values (also called objects) rather than with\nvariables. Statically typed languages, by contrast, associate types with variables and expressions as well as with\nvalues.</i><p>That&#x27;s also the only mention of &quot;static type&quot; or &quot;statically typed&quot;.<p>&gt; <i>It’s so much a general expectation that a lisp will have a dynamic type system that it’s safe to assume and could go without saying.</i><p>A language reference manual has to document the type system so that someone knowing nothing about language type systems can understand it. This can be done without using dynamic type terminology or mentioning static type checking, but it has to be done.<p>There is a lot of detail there; no two dynamic type systems are exactly alike.')