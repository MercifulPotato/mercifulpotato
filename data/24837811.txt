Item(by='lifthrasiir', descendants=None, kids=[24838805], score=None, time=1603204659, title=None, item_type='comment', url=None, parent=24836461, text='&gt;&gt; Zig manages to provide many of the same features with a single mechanism - compile-time execution of regular zig code.<p>&gt; This is a huge one for me, and I really don&#x27;t understand why Rust didn&#x27;t jump on this earlier.<p>I believe this outcome was mostly defined by the history. Here is my reasoning:<p>Rust, at least since 0.5, was undoubtly designed as a replacement for C++ (of course that doesn&#x27;t necessarily mean that it only appeals to C++ programmers), and C++ was notable for its unexpected sophiscation and problems with its primary compile-time mechanism, templates in the other words.<p>Rust replaced templates with two other features: traits and reimagined syntactic macros. The former formalizes C++&#x27;s long-waited concepts feature and avoids issues with C++&#x27;s &quot;ad hoc&quot; polymorphism, while the latter deals with code generation, the remaining use of templates.<p>Traits (and lifetimes) required a complex type system, which takes time to compute and ideally the result for some file should be intact when other files have been changed. This constraint makes most additional compile-time mechanisms undesirable for addition because they can create unexpected dependencies between files, so recompiling one can trigger others. Note that the compile-time code is still a code, with states and everything attached, so this is far from trivial. (What if your compile-time code needs an external input?)<p>Zig and Nim show what the different starting point might result in: they didn&#x27;t have to solve problems with C++ templates (among others), and could retain ad hoc polymorphism. This limits an ability to incrementally compile, and what&#x27;s common with those languages? Much simpler type system, which compiles fast and makes the incremental compilation less concern for them. Rust needed a complex type system for its goals, which unfortunately limited its options for compile-time mechanisms.')