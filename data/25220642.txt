Item(by='derefr', descendants=None, kids=[25221770], score=None, time=1606403541, title=None, item_type='comment', url=None, parent=25219708, text='I think it’s not that software engineers aren’t engineers; but more that they’re most equivalent to <i>combat engineers</i> — engineers operating under time-pressure and shipping-pressure, where the systems they build need to “work” (in the sense of a bridge getting people across a ravine) but may only need to work <i>once</i>; and where it may be perfectly fine&#x2F;expected&#x2F;required to need to “baby” the resulting engineered system along (i.e. letting a batch of people over the bridge, then closing it to traffic, examining the piles for faults, and shoring up the ones that are slipping; then reopening the bridge, in a cycle.)<p>It’s not that this type of engineering is “not engineering”; it’s that it’s engineering where the engineer themselves (and their ability to actively re-stabilize the system) is considered a load-bearing element in the design, such that the system will very likely fall apart once that element is removed.<p>Combat engineering is still engineering, in the sense that there are still tolerances to be achieved, and it’s still a disaster if the bridge falls over while it’s in active use for the mission it was built for. It’s just not considered a problem if it falls over <i>later</i>, once that mission is accomplished.')