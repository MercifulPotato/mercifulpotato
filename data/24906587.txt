Item(by='jvns', descendants=None, kids=[24908940, 24906694, 24910762, 24906631, 24907470], score=None, time=1603800271, title=None, item_type='comment', url=None, parent=24906237, text='Two other profilers that also let you spy on a running Python program:<p>- py-spy: <a href="https:&#x2F;&#x2F;github.com&#x2F;benfred&#x2F;py-spy" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;benfred&#x2F;py-spy</a> (written in Rust)<p>- pyflame: <a href="https:&#x2F;&#x2F;github.com&#x2F;uber-archive&#x2F;pyflame" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;uber-archive&#x2F;pyflame</a> (C++, seems to be not maintained anymore)<p>The &quot;no performance cost&quot; thing is interesting: my experience writing a similar profiler is that there are a couple of things that can affect performance a little bit:<p>1. You have to make a lot of system calls to read the memory of the target process, and if you want to sample at a high rate then that does use some CPU. This can be an issue if you only have 1 CPU.<p>2. you have two choices when reading memory from a process: you can either race with the program and hope that you read its memory to get the function stack before it changes what function it&#x27;s running (and you&#x27;re likely to win the race, because C is faster than Python), or you can pause the program briefly while taking a sample. py-spy has an option to choose which one you want to do: <a href="https:&#x2F;&#x2F;github.com&#x2F;benfred&#x2F;py-spy#how-can-i-avoid-pausing-the-python-program" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;benfred&#x2F;py-spy#how-can-i-avoid-pausing-th...</a><p>Definitely this method is a lot lower overhead than a tracing profiler that instruments every single function call, and in practice it works well.<p>One thing I think is nice about this kind of profiler is that reading memory from the target process sounds like a complicated thing, but it&#x27;s not: you can see austin&#x27;s code for reading memory here, and it&#x27;s implemented for 3 platforms in just 130 lines of C: <a href="https:&#x2F;&#x2F;github.com&#x2F;P403n1x87&#x2F;austin&#x2F;blob&#x2F;877e2ff946ea5313e4773b4ee1d01da853b5b31d&#x2F;src&#x2F;mem.h#L98" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;P403n1x87&#x2F;austin&#x2F;blob&#x2F;877e2ff946ea5313e47...</a>')