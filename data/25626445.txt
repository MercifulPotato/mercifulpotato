Item(by='josephg', descendants=None, kids=[25641425, 25627121, 25627618], score=None, time=1609717848, title=None, item_type='comment', url=None, parent=25625707, text='&gt; I have no idea whether that matters or even easy to measure...<p>It is reasonably easy to measure, and the GP is about right. I&#x27;ve measured a crossover point of around a few hundred items too. (Though I&#x27;m sure it&#x27;ll vary depending on use case and whatnot.)<p>I made a rope data structure a few years ago in C. Its a fancy string data structure which supports inserts and deletes of characters at arbitrary offsets. (Designed for text editors). The implementation uses a skip list (which performs similarly to a b-tree). At every node we store an array of characters. To insert or delete, we traverse the structure to find the node at the requested offset, then (usually) memmove a bunch of characters at that node.<p>Q: How large should that per-node array be? A small number would put more burden on the skip list structure and the allocator, and incur more cache misses. A large number will be linearly slower because of all the time spent in memmove.<p>Benchmarking shows the ideal number is in the ballpark of 100-200, depending on CPU and some specifics of the benchmark itself. Cache misses are <i>extremely</i> expensive. Storing only a single character at each node (like the SGI C++ rope structure does) makes it run <i>several times</i> slower. (!!)<p>Code: <a href="https:&#x2F;&#x2F;github.com&#x2F;josephg&#x2F;librope" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;josephg&#x2F;librope</a><p>This is the constant to change if you want to experiment yourself:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;josephg&#x2F;librope&#x2F;blob&#x2F;81e1938e45561b0856d40b2946c0e8aaa7eadbe6&#x2F;rope.h#L37" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;josephg&#x2F;librope&#x2F;blob&#x2F;81e1938e45561b0856d4...</a><p>In my opinion, hash tables, btrees and the like in the standard library should probably swap to flat lists internally when the number of items in the collection is small. I&#x27;m surprised more libraries don&#x27;t do that.')