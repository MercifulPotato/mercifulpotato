Item(by='Silhouette', descendants=None, kids=[25925568], score=None, time=1611734546, title=None, item_type='comment', url=None, parent=25924566, text='<i>We are asking more and more of our software.</i><p>Are we, though? This assumption merits deeper scrutiny. It&#x27;s obviously true sometimes, but does it really generalise?<p>In terms of <i>functional</i> requirements, we use lots of online software today that is far simpler than its traditional desktop equivalents in feature set. Many successful SaaS businesses are providing tools to help businesses organise that are often barely more complicated in terms of features than the freeware&#x2F;shareware applications that used to be everywhere, often written by a single person or a small team, running natively on your desktop! It turned out that a lot of the extra complexity in the huge programs we used to run on desktops and corporate servers wasn&#x27;t offering a good return on investment and the trend has been to simplify over time. That might be an improvement for both developers and users, but it certainly doesn&#x27;t mean we&#x27;re asking more of that software.<p>In terms of <i>non-functional</i> requirements, connectivity is obviously a big change compared to 20 years ago. Today, a simple CRUD app might be running online and the data can be reached from anywhere by anyone, or by multiple anyones at the same time. That could be much more convenient even if the data itself is little different or even simpler than it used to be. And there are very significant overheads in implementing real-time, distributed, concurrently accessible systems compared to old school desktop and database applications, so in this area we certainly are asking a lot more of much modern software.<p>But beyond that, what else are we asking more of in terms of non-functional requirements? We&#x27;re setting the bar low on performance for most of the software that gets written today, relying on ever faster and larger hardware to make up for running less efficient code. As anyone who actually wrote serious software on the systems of 20 or 30 years ago can testify, that makes life <i>far</i> easier for programmers and requires much less knowledge and skill. Today, the skill set that resulted in heavily optimised code a few decades ago is mostly found among developers working in fields like embedded systems where resource constraints are still often tight, but otherwise it&#x27;s another area where we&#x27;re asking far less of our software than we used to.<p>I think the article was more on target with its highlighting of essential and accidental complexity. The extra processes and tools and infrastructure add a great deal of extra complexity today, and I am far from convinced that much of that complexity is really justified, particularly when it&#x27;s attached to such a transient, throwaway culture where little is built to last and developers jump ship every five minutes. It might be very un-PC and&#x2F;or career-limiting to suggest building software any other way today, though.')