Item(by='hedgehog', descendants=None, kids=None, score=None, time=1606678519, title=None, item_type='comment', url=None, parent=25243376, text='I&#x27;ve implemented interval tree clocks, they&#x27;re not the most accessible idea. Condensed rationale:<p>Logical clocks are used to keep track of the ordering of events in distributed systems, for example updates in a multi-master database. With a single node you can just stamp each update with a sequence number from a counter. With multiple nodes a single counter doesn&#x27;t work, for starters because of the race condition. You can instead use an array of sequence numbers, with one slot updated by each node and one counter per node. These vectors then are perfectly ordered locally and globally mostly ordered. That&#x27;s the idea behind &quot;vector clocks&quot;.<p>Vector clocks don&#x27;t by themselves handle the case of adding and removing nodes. Interval Tree Clocks do the same job as vector clocks but allow adding + removing nodes without relying on some out of band process. The price is complexity.<p>There&#x27;s a whole lot of published work but you can get most of the idea from Wikipedia:<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logical_clock" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logical_clock</a>\n<a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vector_clock" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vector_clock</a>')