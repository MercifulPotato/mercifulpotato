Item(by='joatmon-snoo', descendants=None, kids=[25722045], score=None, time=1610316307, title=None, item_type='comment', url=None, parent=25719940, text='Forget about inherent complexity, just having good error messages is hard!<p>I spent hours this week debugging a test that kept failing in<p><pre><code>  EXPECT_EQ(result.status(), SUCCESS)\n</code></pre>\nSince this was a codebase I hadn&#x27;t ever worked in before, I spent quite a while flailing around trying to figure out where I needed to add logging and eventually realized that `result` had more error details that the assertion was hiding from me.<p>I have a similar gripe with Python&#x27;s unittest: because some of the assertions allow `expected` and `actual` to be interchangeable, there&#x27;s always some extra mental overhead to remembering which is which. For example, compare this:<p><pre><code>  &gt;&gt;&gt; unittest.TestCase().assertEqual(1, 2)\n  Traceback (most recent call last):\n    File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n    File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;unittest&#x2F;case.py&quot;, line 831, in assertEqual\n      assertion_func(first, second, msg=msg)\n    File &quot;&#x2F;usr&#x2F;lib&#x2F;python3.9&#x2F;unittest&#x2F;case.py&quot;, line 824, in _baseAssertEqual\n      raise self.failureException(msg)\n  AssertionError: 1 != 2\n</code></pre>\nwith Java&#x27;s Truth (<a href="https:&#x2F;&#x2F;truth.dev" rel="nofollow">https:&#x2F;&#x2F;truth.dev</a>):<p><pre><code>  assertThat(actual).isEqualTo(expected)\n</code></pre>\nwhich results in errors like this:<p><pre><code>  java.lang.AssertionError: expected:&lt;[guava, dagger, truth, auto, caliper]&gt; but was:&lt;[dagger, auto, caliper, guava]&gt;\n    at org.junit.Assert.failNotEquals(Assert.java:835) &lt;2 internal calls&gt;\n    at com.google.common.truth.example.DemoTest.testBuiltin(DemoTest.java:64) &lt;19 internal calls&gt;</code></pre>')