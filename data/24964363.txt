Item(by='nendroid', descendants=None, kids=None, score=None, time=1604284238, title=None, item_type='comment', url=None, parent=24964067, text='&gt;I think you’re getting downvoted (I can’t) because of your first statement.<p>nobody is reading this stuff anymore. It&#x27;s just you and me. You have over 800 karma. You CAN downvote and you ARE. There is no theatrics, you&#x27;re just voting me down, stop.<p>&gt;I do not consider sqlString to be impure.<p>It&#x27;s not &quot;impure.&quot; But it doesn&#x27;t change the fact the way you you write your SQL has imperative side effects within the database. You can trigger a deadlock in the database from within your pure haskell code if you wanted to.<p>It&#x27;s not a philosophical thing. You absolutely have to consider imperative side effects even in your pure program.<p>That is reality. The philosophical part is whether you can call it &quot;pure&quot; or &quot;impure.&quot;<p>&gt;If you want to think that sqlString is “impure” outside of the context of execution (i.o.w. a Monad...) then sure, that’s valid, but so is my assertion that it is pure since it is referentially transparent. It exists in the void as just another string until the programmer decides to make it into an IO value that’s executed for its impure side effects (the only reason we do anything in computing, right?)<p>Yeah so? I never said your assertion was wrong. I never said that it was &quot;impure.&quot; But I did say that you have to account for side effects in your program. Example:<p><pre><code>   sqlString = &quot;SELECT * FROM ASKDLSADSA DFLDSJFL DLSKFJSDLKFD SDLFKSDJF DSLKFJSDF SDFKLSDFJ &quot;\n</code></pre>\nIs a valid &quot;pure&quot; string, but will trigger a syntax error in your database. You have to account for all of this within your &quot;pure&quot; program. Haskell eliminates side effects in the category Hask but does not actually eliminate the need for YOU to deal with those side effects. This part is an objective fact.<p>Here&#x27;s a better way to put it. For this specific example, the impurity of the real world leaks into your pure haskell program by affecting the contents of the string. The type itself can be seperate from the real world but the contents of the string reflects knowledge and impurity from the real world.')