Item(by='giovannibajo1', descendants=None, kids=None, score=None, time=1605612685, title=None, item_type='comment', url=None, parent=25121416, text='&gt; and there’s really good man page documentation now<p>Well, my pet peeve has always been git-tag. When I discuss about technical documentation, I actually use man git-tag as a reference of what NOT to do.<p>The summary (called NAME in manpages):<p><pre><code>       git-tag - Create, list, delete or verify a tag object signed with GPG\n</code></pre>\n... which might make sense but is already confusing to a beginner because of its reference to GPG (are all tags signed with GPG?).<p>But DESCRIPTION is actually the best:<p><pre><code>       Add a tag reference in refs&#x2F;tags&#x2F;, unless -d&#x2F;-l&#x2F;-v is given to delete, list or verify tags.\n\n       Unless -f is given, the named tag must not yet exist.\n\n       If one of -a, -s, or -u &lt;keyid&gt; is passed, the command creates a tag object, and requires a tag message.\n       Unless -m &lt;msg&gt; or -F &lt;file&gt; is given, an editor is started for the user to type in the tag message.\n\n       If -m &lt;msg&gt; or -F &lt;file&gt; is given and -a, -s, and -u &lt;keyid&gt; are absent, -a is implied.\n\n       Otherwise, a tag reference that points directly at the given object (i.e., a lightweight tag) is created.\n\n       A GnuPG signed tag object will be created when -s or -u &lt;keyid&gt; is used. When -u &lt;keyid&gt; is not used, the\n       committer identity for the current user is used to find the GnuPG key for signing. The configuration\n       variable gpg.program is used to specify custom GnuPG binary.\n\n       [... spoiler: it doesn&#x27;t get any better]\n</code></pre>\nSo this should be a description that makes beginners understand git-tag.<p>Instead, it is a sequence of unrelated sentences that merely describes functionalities in response to command line arguments, in a very convoluted way (I think &quot;If -m &lt;msg&gt; or -F &lt;file&gt; is given and -a, -s, and -u &lt;keyid&gt; are absent, -a is implied&quot; is a little gem).<p>This is how I would write it:<p><pre><code>       Create, view, and delete tags.\n\n       By default, it creates a new “lightweight” tag, which is simple a reference to the current commit (eg: “git tag v1.2”). If you specify “-a”, a “annotated” tag is created instead; an annotated tag is still a reference to the current commit, but also remembers the date in which it was created, who created it, and optionally saves a message associated to the tag (like a “commit” message for the tag).\n\n       Annotated tags can also be cryptographically signed with GnuPG, using “-s” instead of “-a”.\n\n       You can also tag a commit which is not the current head by simply specifying it on the command line (eg: “git tag v1.2 abcde1234”).\n\n       Use “git tag -l” to view the list of all tags.\n\n       Use “git tag -d” to delete a tag.\n</code></pre>\nSo I think git still has a long way to go with documentation.')