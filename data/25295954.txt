Item(by='JackC', descendants=None, kids=None, score=None, time=1607033738, title=None, item_type='comment', url=None, parent=25295369, text='Right, for packages distributed as source (vs. having prebuild &quot;binary wheels&quot;) the dependencies are specified in python code. Example from one comment on the bug:<p><pre><code>  setup(\n    install_requires=[random.choice([&quot;urllib3&quot;, &quot;requests&quot;])]\n  )\n</code></pre>\nThis example wouldn&#x27;t make any sense, but you could imagine installing different dependencies for x86 CPUs or something via a runtime check, and there are lots of packages that use this for checking python versions even though there&#x27;s now a static way to do that.<p>So that leads to this situation, from another comment:<p>&quot;And as an example, [the botocore package, which has releases nearly daily] depends on python-dateutil&gt;=2.1,&lt;3.0.0. So if [your dependency constraints are] to install python-dateutil 3.0.0 and botocore, pip will have to backtrack through every release of botocore before it can be sure that there isn&#x27;t one that works with dateutil 3.0.0. ... And worse still, if an ancient version of botocore does have an unconstrained dependency on python-dateutil, we could end up installing it with dateutil 3.0.0, and have a system that, while technically consistent, doesn&#x27;t actually work.&quot;<p>Sounds like there&#x27;s a long term plan that could fix this situation. Binary wheels already have the needed metadata in a way that <i>could</i> be exposed by PyPI via a fast &quot;fetch dependency constraints for all versions&quot; API, but isn&#x27;t yet. And for source dists there&#x27;s a very new plan ( <a href="https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0643&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0643&#x2F;</a> ) to let them indicate that they don&#x27;t modify install_requires at runtime, so their deps could also be exposed via API, but the ecosystem will have to catch up with that.<p>I dunno what pip does in the meantime, though!<p>(I&#x27;m a python dev but haven&#x27;t followed this beyond skimming the bug, so I hope I&#x27;m getting this right.)')