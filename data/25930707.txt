Item(by='olooney', descendants=None, kids=None, score=None, time=1611767373, title=None, item_type='comment', url=None, parent=25924086, text='I wrote a toy digital circuit simulator[1] as part of a personal &quot;NAND to Tetris&quot; style project. It has <i>none</i> of the bells and whistles of a full simulator but does illustrate how you could write you own in only a few dozen lines of Python. It also has a kind of neat &quot;declarative&quot; syntax inspired by VHDL&#x2F;Verilog where components (i.e., Verilog modules, VHDL entities) are defined as regular Python classes and describe their contents. For example, here&#x27;s a half-adder component, which is comprised of a XOR gate and an AND gate:<p><pre><code>    class HalfAdder(Component):\n        def __init__(self, a, b, out=None, c=None):\n            super().__init__()\n            self.a = self.input(a)\n            self.b = self.input(b)\n            self.out = self.output(out)\n            self.c = self.output(c)\n\n            XOR(a=self.a, b=self.b, out=self.out)\n            AND(a=self.a, b=self.b, out=self.c)\n</code></pre>\nhaving to declare each pin as input or output adds a lot of boilerplate; I was hoping to add a feature where input&#x2F;output information could be declared using type annotations in the function signature itself. That would look something like:<p><pre><code>    class HalfAdder(Component):\n        def __init__(self, \n                     a: input, \n                     b: input,\n                     out:output = None, \n                     c:output = None):\n            super().__init__()\n\n            XOR(a=self.a, b=self.b, out=self.out)\n            AND(a=self.a, b=self.b, out=self.c)\n</code></pre>\nwhich I think is starting to look pretty Verilog-ish, while still staying Pythonic.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;olooney&#x2F;circuit" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;olooney&#x2F;circuit</a>')