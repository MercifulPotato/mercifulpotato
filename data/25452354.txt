Item(by='josephg', descendants=None, kids=[25452548], score=None, time=1608178188, title=None, item_type='comment', url=None, parent=25451940, text='All approaches aren&#x27;t equal. Yes, big-O notation hides constant factors like cache coherence but the solution isn&#x27;t to analyse things less. Its to analyse things more. And thats what a proper CS education should teach.<p>And at least once a year I draw on my CS education to:<p>- Model something using state machine semantics<p>- Use heap-based priority queues, binary search, b-trees or skip lists. And of course I use hash tables and hash sets weekly.<p>- Read and implement something that CS researchers invented (PAXOS, interval tree clocks, CRDT work like RGA &amp; YATA, etc).<p>A lot of self taught programmers also don&#x27;t seem to have fluency with all the degrees of freedom you have as a software engineer. Off the top of my head: Do you know where the bottlenecks are in this program? Are there better algorithms you could use? Are there different dataflow architectures which would help? Can you trade off CPU for memory with caching or memoization? What are the memory allocation patterns? What do you expect the upper bound on performance to be for this process? What are the fundamental invariants your program &#x2F; data model should always maintain? Can we use a fuzzer to ensure those variants are always maintained? If those invariants aren&#x27;t being maintained, would we know about it? What are the single points of failure? (And how could we add redundancy?) How would reliability and performance change if we use a different database, or added or removed indexes or caches? If you wanted to steal our user data, what are all the ways you could you do it?<p>A junior engineer (or an engineer at a feature factory) might never need to ask these questions. But becoming a good senior requires a deeper expertise in <i>seeing</i> a program. And that requires an integrated knowledge of fundamentals, program analysis, tooling, experience and creativity. People learn all that without a degree, but personally? There&#x27;s no way I would have learned all that stuff as well on my own.')