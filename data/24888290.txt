Item(by='jack_h', descendants=None, kids=[24889305], score=None, time=1603648320, title=None, item_type='comment', url=None, parent=24886192, text='So the embedded industry basically has three types of toolchains&#x2F;dev environments. Open source, vendor supplied, or paid commercial stuff.<p>The commercial stuff costs a lot of money. Depending on what the project is and the size of the company, there&#x27;s a good chance an embedded developer will have to suffer with this stuff. Compiler error messages are straight out of the 90s in terms of how bad they are, basically what it was before Clang showed that C&#x2F;C++ compilers could be helpful. The IDE is more like a glorified text editor with some hook-ups to their own toolchain&#x2F;build system. Oh, and things like code completion or just finding the definition of a function can be completely broken with no indication as to why (thanks for the system beep to indicate a generic error IAR).<p>Next up come vendor supplied stuff. As you said, lots of outdated stuff. They come with wizards to generate low level code which tends to be pretty dire (thanks for using malloc in an ISR, ST). I could understand a hobbyist using this stuff to get their feet wet, but I&#x27;ve seen way too many companies use this stuff for actual products and it hurts to think about.<p>Lastly is the open source stuff. This really is my preferred method, but it&#x27;s hard to get both companies and embedded developers on board with this. Most embedded developers I speak with ended up using the vendor supplied or paid IDE because they wanted the debugger &quot;to just work&quot;, similarly for the build system. This is kind of a fair point, it sucks having a ton of work to do just to set-up and maintain the project outside of actually developing code. Of course from my perspective open source offers you flexibility, the previous two categories lock you into a specific way of doing things and you will be stuck doing it their way even if it sucks, which it often does.')