Item(by='simias', descendants=None, kids=[25913173], score=None, time=1611627967, title=None, item_type='comment', url=None, parent=25911117, text='I side with the parent here, if you don&#x27;t care about portability why even bother with the autotools? And if you bother to use the autotools, what would you get by purposefully breaking compatibility?<p>I&#x27;m still to this day paid to write embedded code for various DSPs, I&#x27;m very happy that autotools are portable. I know that on HN if you&#x27;re not writing NodeJS or Rust in x86-64 docker containers you&#x27;re niche and don&#x27;t count, but it&#x27;s a bit short sighted.<p>Autotools doesn&#x27;t need disrupting.<p>I even think that the mail in TFA is somewhat mislead. Autotools drop in popularity because the type of software development that requires using the autotools is slowly but surely declining, or maybe it&#x27;s not even declining but simply growing at a fraction of other ecosystems. Actually many modern languages and environments (IMO rightfully) ship their own well-integrated build systems, so attempting to bring the autotools there is probably a waste of time.<p>For me asking about &quot;future plans for Autotools&quot; is like asking for &quot;future plans for Make&quot; or &quot;future plans for ls&quot;. I don&#x27;t expect any substantial changes in these projects, but I also don&#x27;t think they&#x27;re obsolete. They just fit a specific use case and they do it (mostly) well.')