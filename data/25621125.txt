Item(by='mkl', descendants=None, kids=[25625250, 25621289, 25623023], score=None, time=1609672626, title=None, item_type='comment', url=None, parent=25620796, text='I&#x27;ll say one option is bad :-)<p>I don&#x27;t use Octave, but I have a little in the past, and I have to teach students to use Matlab (2021 should be the last year of that before we switch to Python though), and I&#x27;ve done a lot of numerical and other programming in Python and Matlab, in each for ~20 years.<p>In my opinion Matlab is a terribly designed language that has haphazardly grown features by accretion.  Anything other than matrices and vectors is far more difficult than it needs to be.  Therefore I consider Octave a bit of a lost cause; I think aiming for compatibility with terrible won&#x27;t lead anywhere good.<p>Actually Octave has one useful feature Matlab is missing, operators +=, -=, etc., so perfect compatibility is not exactly the goal.<p>It seems to me the only reason to use Octave is if you happen to have a large legacy Matlab code base that doesn&#x27;t depend on any of Matlab&#x27;s proprietary toolboxes (unlikely, as those toolboxes are one of the main reasons people use Matlab).<p>I believe Python is superior to Matlab&#x2F;Octave in almost every way.  I think Matlab&#x2F;Octave has two or three very small advantages over Python, and one larger but very niche one:<p>1) Matlab&#x2F;Octave&#x27;s matrix literal syntax is nicer and less verbose ([1 2; 3 4] vs. np.array([[1, 2], [3, 4]])).  Irrelevant in most cases, as most substantive programs will have few literals in them.  Note that those missing commas are a frequent source of bugs, too, e.g. [1 -2; 1 - 2] is an error, so really the Matlab&#x2F;Octave is better written as [1, 2; 3, 4].<p>2) Because Matlab&#x2F;Octave is primarily for numerical calculations, you don&#x27;t need to import libraries to get started.  Not a big deal as I always have a Jupyter QtConsole running with Python, Numpy and Sympy ready to use.<p>3) Basic 3D plotting in Matlab is still a little easier (Python is better for complex 3D plotting though).  Not sure what Octave&#x27;s story is for 3D plots.<p>4) The aforementioned proprietary Matlab toolboxes, if you happen to be working in one of the narrow niches they&#x27;re good for.  Python has similar large library advantages in other (and more) areas.  Octave has some equivalent open source library bindings, but that&#x27;s the biggest incompatibility with Matlab.<p>20 years ago Matlab was pretty good, but it&#x27;s barely changed since then, and Python has long overtaken it in most areas.  Octave seems to have caught up with Matlab on the GUI front (but Jupyter Notebooks are much nicer for many things (Octave can do Jupyter too), and Python has a selection of mostly equivalent IDEs, e.g. Spyder).  Python, being a general purpose programming language, can do all the non-maths things surrounding the maths much easier.  Data input&#x2F;output, data processing, string processing, network access, etc., as well as UI things like Jupyter Notebooks.  In my opinion Python&#x27;s also better at quite a lot of maths stuff, like large integers, arbitrary precision, symbolic algebra, higher dimensional arrays, or dataframes with Pandas.  I also much prefer 0-based indexing and half-open ranges.<p>Matlab&#x27;s licensing is quite problematic.  Licenses for business&#x2F;research use are incredibly expensive, and licenses for student use are relatively cheap.  I consider it unethical to teach students to use a proprietary language that will cost their future employers thousands, but that&#x27;s been Matlab&#x27;s sales strategy for decades.  Switching to Octave is an option for teaching and some business&#x2F;research use, but switching to Python, with its much bigger ecosystem, seems more sensible to me (unless you have a big existing Matlab code base).')