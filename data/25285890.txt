Item(by='sixdimensional', descendants=None, kids=None, score=None, time=1606975098, title=None, item_type='comment', url=None, parent=25277511, text='Donâ€™t forget to keep your eyes on the architectural concept of Command Query Record Separation (CQRS).<p>When combined with event sourcing [1], there is a new unified architecture possible that solves the problem that microservices create by fragmenting data [2], and performant querying on data updating in real time.<p>This architecture represents more complexity but increased flexibility.<p>I recently saw this article about federated GraphQL [3], and while a cool idea and probably the ultimate solution (API composition), I expect that with network and physical boundaries between services still adding latency, we need materialized views as part of the architecture to compensate for the overhead of bringing together aggregate root objects from multiple systems.<p>[1] <a href="https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;event-sourcing-cqrs-stream-processing-apache-kafka-whats-connection&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;event-sourcing-cqrs-stream-pro...</a><p>[2] <a href="https:&#x2F;&#x2F;microservices.io&#x2F;patterns&#x2F;data&#x2F;cqrs.html" rel="nofollow">https:&#x2F;&#x2F;microservices.io&#x2F;patterns&#x2F;data&#x2F;cqrs.html</a><p>[3] <a href="https:&#x2F;&#x2F;netflixtechblog.com&#x2F;how-netflix-scales-its-api-with-graphql-federation-part-1-ae3557c187e2" rel="nofollow">https:&#x2F;&#x2F;netflixtechblog.com&#x2F;how-netflix-scales-its-api-with-...</a>')