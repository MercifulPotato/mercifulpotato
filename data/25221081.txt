Item(by='jcranmer', descendants=None, kids=None, score=None, time=1606406319, title=None, item_type='comment', url=None, parent=25220203, text='That&#x27;s... not how JVMs work.<p>All modern VMs (not just limited to Java here!) apply two key optimizations. The first is escape analysis, which checks if references to objects will escape the current function boundary. If not, the objects will be stored on the stack instead of the heap. The second is generational GC, where memory allocation looks like this:<p><pre><code>   void *new_ptr = heap_mem;\n   heap_mem += alloc_size;\n   if (heap_mem &gt;= max_size)\n     outlined_function_to_get_larger_blocks_of_memory();\n</code></pre>\nIt&#x27;s actually likely to be a tighter allocator than C&#x2F;C++&#x27;s <i>malloc</i>, since there&#x27;s no mucking about with freelists.')