Item(by='rakoo', descendants=None, kids=[25005265, 25002850], score=None, time=1604612478, title=None, item_type='comment', url=None, parent=25001784, text='My complaints with git are a bit different, having never felt the burden of giant monorepos (but it&#x27;s definitely related)<p>git was built as a tool for completely distributed source versioning, but most of us are using it in a centralized way. It&#x27;s nice to be able to work offline, but when we need to synhcronize there&#x27;s always a huge dance of fetching first, see if it has moved, merge&#x2F;rebase, etc... git is good at storing what we did, but it doesn&#x27;t help at all at saving what we are _doing_: all changes to the working directory are ephemeral, like files stored in ramfs. When working on public repositories, you can&#x27;t push a branch prefixed with your name; you have to fork the whole project _and_ push a branch before you can start interacting. Instead of having one server and a client, you now have 1 central server, 1 other server that only _you_ can access and will in practice contain 1 branch, and will be abandoned as soon as you&#x27;re tired of it, and a client. Rights can&#x27;t be managed at the branch level, so I&#x27;m just going to copy-paste the whole thing from the beginning of history and give it to you.<p>What I would like to see in a VCS:<p>- There is one central place where people coordinate\n- There is exactly one commit associated to a branch, and that association is the same on all machines at the same time (I don&#x27;t want to git fetch)\n- If you want to do changes to a branch, you do a sub-branch\n- That sub-branch, along with your local changes in or out of the staging area, is synchronized to the server. If authorized, other clients can have a view of those as well<p>It seems it already exists with fossil (<a href="https:&#x2F;&#x2F;fossil-scm.org&#x2F;home&#x2F;doc&#x2F;trunk&#x2F;www&#x2F;concepts.wiki#workflow" rel="nofollow">https:&#x2F;&#x2F;fossil-scm.org&#x2F;home&#x2F;doc&#x2F;trunk&#x2F;www&#x2F;concepts.wiki#work...</a>) and with older SCMs, although older SCMs are plagued with the locking problem.<p>In a way the work that is done to handle giant monorepos is helping git move in this direction: all branches are automatically synchronized, and the vision with this kind of repo is that it&#x27;s ok to commit often, even in small batches. But it&#x27;s not quite there yet. I&#x27;ve read an account of how things are done in Google (<a href="https:&#x2F;&#x2F;cacm.acm.org&#x2F;magazines&#x2F;2016&#x2F;7&#x2F;204032-why-google-stores-billions-of-lines-of-code-in-a-single-repository&#x2F;fulltext" rel="nofollow">https:&#x2F;&#x2F;cacm.acm.org&#x2F;magazines&#x2F;2016&#x2F;7&#x2F;204032-why-google-stor...</a>) and it&#x27;s closer to my dream system.')