Item(by='orbifold', descendants=None, kids=[24749869], score=None, time=1602456715, title=None, item_type='comment', url=None, parent=24749591, text='So I want to plot the data I just loaded. Since I wrote the comment I had closed the Julia window (not to make a point, btw.)<p>julia&gt; import CSV (takes ~1-2 seconds)<p>julia&gt; data = CSV.File(&quot;&#x2F;User&#x2F;orbifold&#x2F;Downloads&#x2F;FL_insurance_sample.csv) (takes seconds again...)<p>I want to explore the data. I vaguely remember there is Gadfly to do that. For some reason it depends on FFTW and a whole bunch of other packages, but the dependency story in Python is equally insane, so whatever. As I&#x27;m typing this, I&#x27;m waiting for Gadfly to precompile.<p>julia&gt; @time import Gadfly (104.460307 seconds)<p>python&gt; import matplotlib.pyplot as plt (~10s if you are unlucky and it has to generate the font cache)<p>Maybe it&#x27;s a good idea to do a scatter plot of two of the fields? Let&#x27;s find out<p>julia&gt; @time Gadfly.plot(x=data.eq_site_limit, y=data.hu_site_limit) 0.320751 seconds<p>but that number is not accurate, in fact it took so long for the browser to open the result, that I had time to check the documentation on backends and see whether I&#x27;m missing something.<p>python&gt; %time plt.scatter(data[&#x27;eq_site_limit&#x27;], data[&#x27;hu_site_limit&#x27;]) 41.9 ms, a bit more for the window to open<p>Turns out that is not a useful plot... maybe a histogram?<p>julia&gt; @time plot(x=data.eq_site_limit, Geom.histogram(bincount=10))\n  0.042802 seconds<p>It in fact again takes several seconds until the browser shows a plot.<p>python&gt; %time plt.hist(data[&quot;eq_site_limit&quot;]) ~100ms<p>and the window with the plot opens instantly.')