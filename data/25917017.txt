Item(by='MaxBarraclough', descendants=None, kids=None, score=None, time=1611675534, title=None, item_type='comment', url=None, parent=25915738, text='With the disclaimer that I&#x27;m not an expert on formal methods, or on endianness: endianness is something that could be formally modelled, but it seems to me the better approach is to write code that&#x27;s insensitive to platform endianness. Another approach might be to ensure such platform-specific assumptions hold true by using static assertions, so that the build will fail if the assumptions are not met. A third approach might be to write (and verify) separate code for different endiannesses. Any one of these approaches should make it possible to write formally verifiable C code that behaves identically regardless of endianness.<p>Of course, by using a formal verification framework, you aren&#x27;t worrying about being blindsided by something like endianness, you&#x27;re worrying about getting the thing to verify. If it verifies, that means you haven&#x27;t made any fiddly mistakes with concerns like endianness.<p>The SPARK language (designed for formal verification) doesn&#x27;t let you write endian-sensitive code in the first place, if I understand correctly. (SPARK is technically not a fully deterministic language but it&#x27;s very close. [0][1])<p>I don&#x27;t know if there are circumstances where you <i>must</i> write endian-sensitive code, but don&#x27;t think there are. I can imagine an endian-sensitive solution might perform better (e.g. simply reinterpreting an array of bytes as an array of 32-bit unsigned integers).<p>[0] <a href="https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;appendix&#x2F;portability_issues.html#parenthesized-arithmetic-operations" rel="nofollow">https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;appendix&#x2F;...</a><p>[1] <a href="https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;usage_scenarios.html#benefits-of-using-spark-for-portability" rel="nofollow">https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;usage_sce...</a>')