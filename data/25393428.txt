Item(by='ebruchez', descendants=None, kids=None, score=None, time=1607731061, title=None, item_type='comment', url=None, parent=25390260, text='I am not sure how much of that is worth responding to. You obviously have a strong opinion and have been burned and appear to have pent up anger. I don&#x27;t share your opinion.<p>I use Scala, I love it, I am looking forward very much to Scala 3, and I find help in the community when I need it. And I am not a pure FP programmer, although I like lots of the ideas of FP.<p>&gt; everyone but the fanatical FP-ers have long-since moved on to other more professional&#x2F;productive circles<p>I for one haven&#x27;t and I am not a &quot;fanatical FP-er&quot;. I bet I am not the only one.<p>&gt; Scala 3 is a joke [â€¦] it&#x27;s a grown into a monstrosity of complicated features that your average dev will never use<p>I don&#x27;t think that&#x27;s true at all.<p>&gt; New type-system features are being added without even knowing if there&#x27;s a possible use-case.<p>I don&#x27;t know what you are referring to. From the doc, I note:<p>- intersection types, which are essentially a better way (commutative) of doing `A with B`<p>- union types, which several languages now have, including TypeScript, and which are definitely a very useful feature (in particular for Java and JavaScript interop, but there are other use cases)<p>- dependent and polymorphic function types, which are just an extension of what was possible before with methods<p>- match types and type lambdas, which I cannot comment on<p>&gt; The whole thing is a mess<p>I obviously don&#x27;t see things with the same eyes you do. I am really excited about Scala 3 and I do think it improves the language significantly, as it should.<p>Scala 3 also aims at solving a very real issue with previous releases of Scala, namely that there is a solid binary compatibility story, within Scala 3.x, but also between Scala 2 and Scala 3.<p>&gt; the only people still around are FP&#x27;ers who don&#x27;t want people using loops in the first place<p>I can&#x27;t remember the last time I used `do-while`. But you can rewrite this trivially to a `while`, which is not going away (in fact, I think that Scalafix will do that for you automatically). In any case, community questions about things like mutability, loops, or more imperative features, typically receive answers to the effect that it&#x27;s all right to use such constructs, especially in the small (like a the level of a single function). These features are part of Scala and generally accepted. They are used by the Scala standard library, and regularly acknowledged by Martin Odersky. A quick code search finds such uses in libraries such as Circe and Cats.<p>Regarding non-local `return`, you are also overlooking the fact that this is a frequent cause of confusion and errors. Removing this feature has little or nothing to do with FP fanaticism.<p>Personally, I can only encourage programmers to look into Scala. It is a fantastic language with great features. It also has an incredible JavaScript story with Scala.js, which is rock-solid. The transition to Scala 3 will be a good time for newcomers to look at the language and its community with a fresh look.')