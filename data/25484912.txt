Item(by='gchadwick', descendants=None, kids=[25494365, 25484994], score=None, time=1608454380, title=None, item_type='comment', url=None, parent=25483010, text='I don&#x27;t really see the advantage of using RISC-V as the ISA for a specialised processor. Yes you can have some tooling advantages because the basic stuff is done for you but such ISAs are often hyper specialised. You may not want everything in the RV32I&#x2F;RV64I (the basic RISCV instruction set) and you&#x27;ll certainly want a whole bunch of stuff that isn&#x27;t in an existing extension and you may want to do things in a way that&#x27;s fundamentally incompatible with the existing ISA (maybe you want flags or condition codes, maybe you want a giant register file with indirect addressing, auto increments and weird memory addressing modes, maybe you want variable length instructions or fixed width that&#x27;s greater than 32 bit etc).<p>The complexity is in the specialised stuff anyway so having a RISC-V base is unlikely to save you a huge amount of effort.<p>The author attempts to point to Nvidia as an example<p>&gt; Because RISC-V has such a small and simple instruction-set it beat all the competition, including ARM. Nvidia found they could make smaller chips by going for RISC-V than for anybody else. They also reduced watt usage to a minimum.<p>As I understand it Nvidia&#x27;s use of RISC-V was for controller cores, its not the main ISA doing the important work (i.e. Whatever they use for the shader cores in a GPU). I suspect they chose RISC-V primarily because there were no arm cores that precisely fit their requirements, so RISC-V gives the opportunity for a custom design that does.<p>So yes RISC-V is great when you have a need for a CPU that doesn&#x27;t fit nicely with what arm already provides. In a coprocessors these are likely to provide control and coordination. You&#x27;ll still want to build a custom ISA for the custom accelerator side of it.')