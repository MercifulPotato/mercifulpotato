Item(by='Ericson2314', descendants=None, kids=None, score=None, time=1609390951, title=None, item_type='comment', url=None, parent=25585042, text='This has been expressed, but I do not think it is true. Yes, the original linear logic doesn&#x27;t have anything like a &quot;linear kind&quot;, but that&#x27;s mainly because it&#x27;s a logic not a type theory. The classic A → B = !A ⊸ B could be interpreted as something like A → B = GC A ⊸ B, i.e. making the ! an in-language type constructor not some sort erased modality.<p>I&#x27;m not expert at this stuff, but when I was interrogating this before, I found the thesis behind <a href="https:&#x2F;&#x2F;ncatlab.org&#x2F;nlab&#x2F;show&#x2F;linear-non-linear+logic" rel="nofollow">https:&#x2F;&#x2F;ncatlab.org&#x2F;nlab&#x2F;show&#x2F;linear-non-linear+logic</a> as a quite old example (1994, only a few years after the first LL paper from Girard in 1987) of separating the linear and non-linear worlds as two categories with an adjudication between them. This is very compatible with linearity in the types.<p>That all said, I will admit that the &quot;quantitative type theory&quot; line of research gives the current LinearHaskell a big leg up on integrating with dependent types. See <a href="https:&#x2F;&#x2F;ncatlab.org&#x2F;nlab&#x2F;show&#x2F;linear-non-linear+logic" rel="nofollow">https:&#x2F;&#x2F;ncatlab.org&#x2F;nlab&#x2F;show&#x2F;linear-non-linear+logic</a> for the latest plans on that.<p>I certainly have no retort. My big complaint about the status quo is we can&#x27;t even have things like Rust&#x27;s `Box`, but I have no idea what the operational semantics of `f : pi (b : Box&lt;T&gt;) ...` might be, let alone the static semantics!')