Item(by='tmsh', descendants=None, kids=None, score=None, time=1601925259, title=None, item_type='comment', url=None, parent=24690848, text='Just doesn&#x27;t seem like it makes sense for any type of long-term messaging&#x2F;posts&#x2F;comments store.<p>I think you&#x27;re mistaken about Twitter:<p>&quot;Manhattan(the backend for Tweets, Direct Messages, Twitter accounts, and more)&quot;<p><a href="https:&#x2F;&#x2F;blog.twitter.com&#x2F;engineering&#x2F;en_us&#x2F;topics&#x2F;infrastructure&#x2F;2017&#x2F;the-infrastructure-behind-twitter-scale.html" rel="nofollow">https:&#x2F;&#x2F;blog.twitter.com&#x2F;engineering&#x2F;en_us&#x2F;topics&#x2F;infrastruc...</a><p>I&#x27;m not sure about the others (e.g., there&#x27;s nothing recent for YouTube I could find.. likely they&#x27;d use Spanner though for things like comments?).<p>I think you need a really talented database infra team if you&#x27;re trying to use RDBMS for something like a real-time messaging store. I can&#x27;t say more about Amazon. But I just don&#x27;t think it makes sense for these use cases to use RDBMS where real-time messaging (pull requests, comments, etc. for Github - messages, posts for Slack) is the 90% use case.<p>UPDATE. Maybe I&#x27;m wrong can you can use: <a href="https:&#x2F;&#x2F;vitess.io&#x2F;" rel="nofollow">https:&#x2F;&#x2F;vitess.io&#x2F;</a> for horizontally scaling MySQL. I don&#x27;t know enough about the details of it. But getting the data store right is so important to the overall backend&#x27;s stability (I think it&#x27;s no coincidence that Twitter stability became &quot;solved&quot; when they moved to something like Manhattan). And I just don&#x27;t see why you wouldn&#x27;t rewrite things using something that logically makes a lot of more sense instead of trying to push connection pooling, query rewriting, etc. to the limit. They don&#x27;t fundamentally solve what consistent hashing solves.<p>EDIT. Also, wrong about LinkedIn re: messaging:<p><a href="https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;blog&#x2F;2020&#x2F;bootstrapping-our-new-messaging-platform" rel="nofollow">https:&#x2F;&#x2F;engineering.linkedin.com&#x2F;blog&#x2F;2020&#x2F;bootstrapping-our...</a><p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Voldemort_(distributed_data_store)" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Voldemort_(distributed_data_st...</a><p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Consistent_hashing" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Consistent_hashing</a><p>Even Discord understands to use that. [1] Not to say you can&#x27;t have your user database in SQL like Facebook, etc. But for messaging? And really for anything with high throughput &#x2F; low latency, where you know the access patterns, just doesn&#x27;t make sense to not use something with consistent hashing.<p>But as mentioned in Rick&#x27;s AWS videos about <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Technology_adoption_life_cycle" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Technology_adoption_life_cycle</a> - there&#x27;s a lot of late majority, laggards, etc.<p>My original point - why I raised this to begin with - is I briefly browsed that Slack CTO&#x27;s video. At one point he mentioned using RDBMS &quot;because that&#x27;s what we&#x27;re experienced with.&quot; That&#x27;s never a logical reason. It may be a practical one. But with time... it just doesn&#x27;t stand up to ideas that are better and prove themselves (i.e., consistent hashing). But again, using MongoDB the wrong way or assuming the &quot;document store&quot; is the main reason for using NoSQL can confuse people (it&#x27;s one nice benefit for ad-hoc data models! but the big innovation in NoSQL is consistent hashing for the low-latency &#x2F; high throughput use cases). And SQL has its benefits for certain use cases. But there&#x27;s a better solve for the messaging storage at scale. I post this because: (a) I&#x27;m interested in others&#x27; opinions and feedback about how they&#x27;ve made RDBMS work (thanks) (b) tired of Github and Slack being down periodically, and for each mature SaaS to go through this learning curve (like with Twitter). Yo just use DynamoDB or Cassandra and save yourself the time&#x2F;effort.<p>[1] <a href="https:&#x2F;&#x2F;blog.discord.com&#x2F;how-discord-stores-billions-of-messages-7fa6ec7ee4c7" rel="nofollow">https:&#x2F;&#x2F;blog.discord.com&#x2F;how-discord-stores-billions-of-mess...</a>')