Item(by='OskarS', descendants=None, kids=[25357455], score=None, time=1607511609, title=None, item_type='comment', url=None, parent=25357295, text='&gt; There is no reason in principle why a shell could not implement digital signatures.<p>They currently don&#x27;t, though, which is the point :)<p>The reason in principle this might not work is that different distros and os&#x27;s trust different keys. Fedora trusts different keys than Ubuntu, than Arch, than macOS, etc.<p>&gt; Ideally, the code signing is done offline, so an attacker that compromises the HTTPS server gets the HTTPS private key but not the code signing private key.<p>I don&#x27;t think this is necessarily the case. Even if you gain access to the server, HTTPS keys are usually stored in such a way that only root can read them, right? So if you only compromised a non-root account, you wouldn&#x27;t necessarily be able to read them (I might be wrong about this, I don&#x27;t do this kind of thing professionally).<p>Also, you could imagine that the script is not stored as a file, but in a database or something, and then you could compromise it with SQL injection or a similar technique. That would allow you to change the script without any access to HTTPS keys.<p>&gt; However, I suspect that ideal often isn&#x27;t actually obtained; offline code signing can be a pain for CI.<p>You&#x27;re probably right about this, but this is a great example of why you shouldn&#x27;t use the same key for both code signing and HTTPS.')