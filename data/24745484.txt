Item(by='qsort', descendants=None, kids=None, score=None, time=1602421312, title=None, item_type='comment', url=None, parent=24745428, text='No offense but you are absolutely misunderstanding.<p>The Ackermann function (or rather, the family of functions with similar behavior globally known as &#x27;ackermann&#x27;) is an example of a general recursive (i.e. computable) function that is not primitive recursive. The proof that this is the case is a classical result that&#x27;s part of the usual computer science curriculum, the idea being that the asymptotic growth of Ackermann is greater than the asymptotic growth of any primitive recursive function.<p>However, it&#x27;s easy to see that you can write any recursive function iteratively; it&#x27;s sufficient to allocate memory for a stack-like structure, and wrap the function body in a while loop. Recursive calls are pushes onto the stack, and returns are pops from the stack. This is exactly how compilers are able to turn recursive calls into ASM.\nNotice that there is no guarantee that, in general, the function will ever exit the while loop. This is inherent; it is in fact the recursive variant of the halting problem.')