Item(by='a1369209993', descendants=None, kids=None, score=None, time=1604185850, title=None, item_type='comment', url=None, parent=24954889, text='&gt; I think you meant to write `type Id a = a`<p>Indeed I did, sorry, unfortunately too late to edit. The following reproduces the error:<p><pre><code>  {-# LANGUAGE TypeSynonymInstances #-}\n  type Id a = a\n  instance Monad Id where\n    x &gt;&gt;= f = f x\n    return = id\n</code></pre>\n(The last two lines can be ommitted, since GHC aborts before checking the instance body. Edit: which is why I didn&#x27;t notice I had the arguments to &gt;&gt;= backward; fixed?)<p>&gt; It may be difficult to unify them via the type system. This is even more difficult for higher-order functions that take other functions.<p>IMO, the main difficulty in unifying `a ~ Monad m =&gt; m a` is inferring `m ~ \\a1-&gt; a1` in a way that allows `\\a1-&gt; a1` to inherit `Id`&#x27;s instances. It&#x27;s a understandable deficiency, but it is a deficiency.')