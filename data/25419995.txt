Item(by='rseacord', descendants=None, kids=[25420209, 25420166, 25420476], score=None, time=1607965871, title=None, item_type='comment', url=None, parent=25418182, text='Based on committee discussion, I think it is unlikely we will attempt to capture the values. The capture will most likely be done by reference.<p>This case of the defer in the loop is frequently cited, probably because it is a problematic case.  However, I looked at a lot of real code and the only case I found of resources being allocated in a loop they were allocated at the beginning of the loop and deallocated at the end. Another option we are considering is to use the scope for the guarded block.  In this case, deferred statements would be executed at the end of each iteration of the for loop which would be ideal for this sort of code.  For example, you could rewrite this function using defer:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;blob&#x2F;a829b735b645516041b55746e013692babd8cd31&#x2F;crypto&#x2F;pem&#x2F;pem_info.c#L52-L265" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;openssl&#x2F;openssl&#x2F;blob&#x2F;a829b735b645516041b5...</a><p>like this:<p><pre><code>    for (;;) {\n        raw = 0;\n        ptype = 0;\n        i = PEM_read_bio(bp, &amp;name, &amp;header, &amp;data, &amp;len);\n        defer {\n          OPENSSL_free(name);\n          name = NULL;\n          OPENSSL_free(header);\n          header = NULL;\n          OPENSSL_free(data);\n          data = NULL;\n        }\n ...\n        } else {\n            &#x2F;* unknown *&#x2F;\n        }\n    } &#x2F;&#x2F; end for loop, run deferred statements</code></pre>')