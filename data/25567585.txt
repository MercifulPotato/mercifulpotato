Item(by='Twisol', descendants=None, kids=[25567856], score=None, time=1609226749, title=None, item_type='comment', url=None, parent=25567321, text='Ah, yeah, I reminisce on that thread every now and then. No, I don&#x27;t have it muted. I was one of the more moderate voices, as I recall. (See my sole subsequent post, where I expressed interest in seeing the approach come to fruition, to help us understand what place it should have within the promises ecosystem. The thread was raging quite loudly by then, and as a much-junior developer, I stayed quiet after that.)<p>At the time, I had only just started learning Haskell, and while I really liked what monads brought to the table, JavaScript wasn&#x27;t in a place at the time where it was especially common. With hindsight, monadic promises was perhaps the earliest step toward taking FP seriously in JavaScript.<p>&gt;&gt; You recall, perhaps, how electromagnetism and the weak force are actually part of the same mechanism, but only at very high temperatures? Well, we simply can&#x27;t turn up the furnace that high in Javascript. Certain formalisms work beautifully in Haskell but fall flat in Javascript without support from the language. Haskell&#x27;s static typing lets you offload a ton of work onto the compiler, but Javascript doesn&#x27;t help much at all!<p>Leaving aside how embarrassing my demeanor was, I still believe in the core idea here. You want to use a language that doesn&#x27;t fight what you&#x27;re trying to do with it.<p>&gt;&gt; The fmap&#x2F;bind divide is one of those places; it&#x27;s just much easier to use the library if you combine the two together.<p>I strongly disagree with myself here now. This was, as I recall, the crux of the entire debate, and I pretty strongly fall on the side of <i>not</i> auto-flattening since maybe only a year afterward. Yeah, it&#x27;s &quot;easier&quot;, but it&#x27;s less predictable.<p>(Even at the time, I was a proponent of making sure `.andThen()` wouldn&#x27;t run the next step synchronously if the promise was always resolved, because that would make for an edge-case that you&#x27;d always have to keep in mind. &quot;Is it resolved yet?&quot;. So I clearly had some sense of consistency, but I hadn&#x27;t had the same realization about map vs. flatMap on promises.)<p>But back to the present:<p>&gt; A decision to ignore formal theory in the past now results in a fundamental mistake that all JavaScript developers must live with.<p>This is why I more or less recused myself from yesterday&#x27;s thread. I don&#x27;t appreciate having to tear down a strawman of myself -- I am, and have been for many years now, a proponent of strongly typed, well-structured, indeed <i>formal</i> approaches to software systems. I also see value in an informal, phenomenological stance, because there&#x27;s no getting around the fleshy humans that have to work with and maintain these systems. I try not to take either to exclusionary extremes.<p>&gt; The irony is that you, Jonathan, [...]<p>Everything else aside, it&#x27;s a bit of a taboo to address someone by a name they are not presently identifying themselves by. It&#x27;s unearned familiarity.<p>&gt; [...] the previous (minor) verbal scuffle [...]<p>For what it&#x27;s worth, the remark involving &quot;illusion&quot; was intended to be a rhetorical device connecting the example of design patterns to the present topic. It was not meant to be a personal dig. I&#x27;ll be more careful in the future.')