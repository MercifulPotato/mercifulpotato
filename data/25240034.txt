Item(by='tatskaari', descendants=None, kids=[25242187], score=None, time=1606593561, title=None, item_type='comment', url=None, parent=25238453, text='Hey guys! Thanks for checking Please out! I see a lot of recurring themes in the comments so I thought I would clear some things up.<p>What is Please?<p>Please is a multi-language build system designed for huge mono-repos. It was created by a couple frustrated ex-googlers who were familiar with Blaze (which was later open sourced as Bazel). We found the &quot;real world&quot; alternatives to be somewhat lacking and so Please was born!<p>Please draws inspiration on the Blaze paradigm. If you&#x27;re familiar with Bazel, the biggest difference is Please aims to be simpler and have far less magic in the binary. We push the implementation of the build rules into the build language, dog feeding them to ensure Please is flexible enough for any task. Also Please is written in Go so doesn&#x27;t require a JVM ;)<p>If you&#x27;re not familiar with Blaze&#x2F;Bazel, here&#x27;s what all the fuss is about:<p>1) Hermetic builds: builds are run in their own tightly controlled environment. Each step of the build runs in their own temp directory isolating them from other steps and only having access to the files and environment variables they&#x27;ve declared as their inputs. Please also has sandboxing built in taking advantage of the linux kernel to further isolate tests.<p>2) Scalability through incrementallity: if you&#x27;ve used Make, you&#x27;re probably familiar with caching problems. Make uses last modified timestamps on files to determine if they need to rebuild each step, which turns out is fallible. Please uses a hash based approach which is far more robust. Most of our developers don&#x27;t even know how to clean the cache. As a result, we can incrementality build our entire repository locally and on our CI workers no matter how big our repo gets.<p>3) Flexibility: the build language is a dialect of python. This can be used to write &quot;build definitions&quot; which define a unit of work i.e. compiling a Go package. There&#x27;s nothing special about the built in definitions; it&#x27;s totally possible to write your own to automate nearly any part of your development process. You could generate code, template kubernetes .yamls and beyond!<p>4) Unified developer experience: The please command line provides a unified experience across your codebase. Want to test all the tests under a branch of your repo? `plz test &#x2F;&#x2F;some&#x2F;part&#x2F;of&#x2F;the&#x2F;repo&#x2F;...`. It doesn&#x27;t matter what language you&#x27;re using, what those tests depend on etc. etc. Please can always run them for you.<p>PS: Apologies for the website. We&#x27;re a small team of build system engineers, not front end types. If you want to offer your skills, I&#x27;d be happy to point you in the right direction: <a href="https:&#x2F;&#x2F;github.com&#x2F;thought-machine&#x2F;please" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;thought-machine&#x2F;please</a>.')