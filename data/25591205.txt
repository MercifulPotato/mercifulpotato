Item(by='cxr', descendants=None, kids=[25597842, 25594291], score=None, time=1609408191, title=None, item_type='comment', url=None, parent=25590207, text='I&#x27;ve been deeply fascinated by the idea of literate programming, but every time I dive into the programs themselves, they leave something to be desired.<p>First, though, I glossed over the PBRT shoutout and thought the Academy Award mention was about lkesteloot&#x27;s team&#x27;s award, until I scanned back and saw that it was about PBRT.  To qualify that, here&#x27;s one of lkesteloot&#x27;s comments from his Oscars page on his personal site:<p>&gt; Our renderer and lighting tool were individually good, but lots of renderers and lighting tools are good. What made ours unusual (and it’s unusual in this respect to this day) is that they were designed and built at the same time, with each other in mind. &lt;<a href="https:&#x2F;&#x2F;www.teamten.com&#x2F;lawrence&#x2F;oscar&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.teamten.com&#x2F;lawrence&#x2F;oscar&#x2F;</a>&gt;<p>It might not be obvious, but this really touches on a part of the philosophy underpinning literate programming.  If you look at any of the recent discussions about Knuth being &quot;framed&quot; in relation to the seminal Programming Pearls guest column, one of the recurring themes is programs as monoliths.  In a really spectacular post &quot;An app can be a home-cooked meal&quot; &lt;<a href="https:&#x2F;&#x2F;www.robinsloan.com&#x2F;notes&#x2F;home-cooked-app&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.robinsloan.com&#x2F;notes&#x2F;home-cooked-app&#x2F;</a>&gt;, the author explains his own work and likens it to Shirky&#x27;s description of &quot;situated software&quot;.  Shirky writes, &quot;Situated software isn&#x27;t a technological strategy so much as an attitude about closeness of fit between software and its group of users&quot; &lt;<a href="https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20040411202042&#x2F;http:&#x2F;&#x2F;www.shirky.com&#x2F;writings&#x2F;situated_software.html" rel="nofollow">https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20040411202042&#x2F;http:&#x2F;&#x2F;www.shirky...</a>&gt;.  This obviously sounds a lot like PDI&#x27;s renderer and very much characterizes Knuth&#x27;s monoliths.  I always liked this quote from literateprogramming.com:<p>&gt; The fundamental logic of the WEB system encourages &quot;top-down&quot; programming and &quot;structured&quot; design. Quoting from Kernighan and Plauger, &#x27;Top-down design and successive refinement attack a programming task by specifying it in the most general terms, then expanding these into more and more specific and detailed actions, until the whole program is complete. [...] The WEB system encourages you to work top-down by giving you the ability to break up your code into independent segments (called &quot;sections&quot;).<p>Coincidentally, in addition to lkesteloot&#x27;s Oscar comments, he&#x27;s got a pretty great essay called &quot;Write code top-down&quot; which really delves into the matter &lt;<a href="https:&#x2F;&#x2F;www.teamten.com&#x2F;lawrence&#x2F;programming&#x2F;write-code-top-down.html" rel="nofollow">https:&#x2F;&#x2F;www.teamten.com&#x2F;lawrence&#x2F;programming&#x2F;write-code-top-...</a>&gt;.  Opinionated and well worth the read.<p>As for this interview, PBRT, and Knuth&#x27;s flavor of literate programming: the PBRT book is available for free online &lt;<a href="http:&#x2F;&#x2F;www.pbr-book.org&#x2F;3ed-2018&#x2F;Introduction&#x2F;Literate_Programming.html" rel="nofollow">http:&#x2F;&#x2F;www.pbr-book.org&#x2F;3ed-2018&#x2F;Introduction&#x2F;Literate_Progr...</a>&gt;, and the intro starts out with a section on literate programming and the WEB&#x2F;noweb family in particular &lt;<a href="http:&#x2F;&#x2F;www.pbr-book.org&#x2F;3ed-2018&#x2F;Introduction&#x2F;Literate_Programming.html" rel="nofollow">http:&#x2F;&#x2F;www.pbr-book.org&#x2F;3ed-2018&#x2F;Introduction&#x2F;Literate_Progr...</a>&gt;.  This, I think, is already adequate to highlight some of the issues with the WEB&#x2F;noweb implementation of literate programming.  It&#x27;s still too mired by constraints of C (or maybe since the language isn&#x27;t technically C, and Knuth is also known for literate programming with Pascal, we should chalk it up to something akin to Sapir–Whorf?).  akkartik has a good essay on the matter of Knuth&#x27;s programs &lt;<a href="http:&#x2F;&#x2F;akkartik.name&#x2F;post&#x2F;literate-programming" rel="nofollow">http:&#x2F;&#x2F;akkartik.name&#x2F;post&#x2F;literate-programming</a>&gt;.  akkartik:<p>&gt; just about every literate program out there begins with cruft like this: `&#x2F;&#x2F; Some #includes` or: `-- Don&#x27;t mind these imports.` I used to think people just didn&#x27;t understand Knuth&#x27;s vision. But then I went and looked at his literate programs.<p>Indeed, I&#x27;ve also looked at Knuth&#x27;s programs and felt a similar twinge.  There&#x27;s the seminal column, available from literateprogramming.com and linked from akkartik&#x27;s post.  Having tried to read it, a big issue there is that the problem just isn&#x27;t very interesting in my opinion, at least on practical grounds.  I&#x27;ve mentioned before that I think a literate programming advocate and true believer would do well to do something like publish a piece that focuses on implementing support for DEFLATE and the ZIP file format, which strikes me as a much stronger hook than a program to &quot;print the k most common words in the file in decreasing frequency&quot; or &quot;Dijkstra&#x27;s program [that] prints a table of the first thou-sand prime numbers&quot;.  No matter, though.  There are &quot;real&quot; programs published by practitioners of the style, right?  How about Knuth&#x27;s rendition of Colossal Cave Adventure? &lt;<a href="http:&#x2F;&#x2F;literateprogramming.com&#x2F;adventure.pdf" rel="nofollow">http:&#x2F;&#x2F;literateprogramming.com&#x2F;adventure.pdf</a>&gt;  Once again, we&#x27;re really running into sharp edges of C that WEB—or at least this particular text—doesn&#x27;t do a good job of softening up, for the reasons akkartik rightly points out.  Just look at the second page and right away with `main` we&#x27;ve got unexplained a priori structure, including stuff like local variables j, k, and p.<p>Other programs I&#x27;ve looked into are lcc, and the glimpses I&#x27;ve gotten of Inform 7.  On my first encounter with the former, I was motivated to jot down in my notes a proposed law that said, roughly, a poor&#x2F;failed attempt to write a literate program will produce a piece of text that&#x27;s harder to understand than if it had just been written &quot;straight&quot;.<p>Still, I&#x27;m hopeful that there&#x27;s something there to be found in literate programming.  In fact, I&#x27;m pretty sure there <i>is</i> something there.  I wrote a recent comment soliciting info and critiques&#x2F;criticism about literate programming for pedagogy &lt;<a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25498685" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25498685</a>&gt;.<p>And it&#x27;s funny that you mention TypeScript.  As I said, I think part of the inadequancy of CWEB comes down to C.  C is fundamentally opposed to one&#x27;s attempts to practice top-down programming—one of the first things that &quot;every&quot; programmer learned, back when &quot;every programmer&quot; meant programmers who learn C, is that when you read a C program, you&#x27;re supposed to start at the bottom and kind-of-sort-of read it backwards.  Although I suppose there&#x27;s an argument to be made that were it not the case for C (or Pascal) inflicting this upon you, then Knuth may never have been sufficiently motivated to undertake his literate programming crusade in the first place.<p>I&#x27;ve had niggling thoughts that a language like JS with support for forward declarations in the form of function hoisting and its dynamism at runtime, including allowance for function redefinition (or at least if not JS, then something with similar properties) would be a more perfect match for the top-down style associated with literate programming.  TypeScript, though, might be a little too strict that causes it to suffer for similar reasons as C.  Also the fact that JS&#x27;s roots lie in a (much maligned) system for conveying documents (as opposed to an application platform) makes the fit even better.  It&#x27;s just that nobody seems to be noticing this feature-not-a-bug, because they&#x27;ve been focused on trying to recreate mobile app conventions in the browser.  And I&#x27;ve actually sat down to experiment and play around with the affordances that could prove TBL&#x27;s Web (as opposed to Knuth&#x27;s WEB) a more attractive substrate for a literate programming system.  More recently, I&#x27;ve gotten more serious about actually testing the limits of the medium while thinking of things to put together that are meant to be consumed by other people as pieces of written works to be read from top to bottom in Knuthian style, but it comes down to a matter of having enough time.<p>A final note is that in Bob Nystrom&#x27;s post on &#x27;Crafting &quot;Crafting Interpreters&quot;&#x27; &lt;<a href="http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2020&#x2F;04&#x2F;05&#x2F;crafting-crafting-interpreters&#x2F;" rel="nofollow">http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2020&#x2F;04&#x2F;05&#x2F;crafting-crafti...</a>&gt;, he more or less lays out the case for a literate programming system to help with actual book authoring.<p>I hope that if you or anyone else decides to take an interest and try hashing something out that you&#x27;re successful.')