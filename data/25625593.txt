Item(by='mhh__', descendants=None, kids=None, score=None, time=1609710780, title=None, item_type='comment', url=None, parent=25625541, text='Andrei Alexanrescu has a talk on doing this - he calls them metaparameters e.g. where a hybrid sort chooses to change algorithm.<p>One library I have exploits the fact that D templates are embarrassingly better than C++&#x27;s, so you can actually benchmark a template against it&#x27;s parameters in a clean manner without overhead - that could be anything from a size_t parameter for a sort or a datastructure for example.<p><pre><code>        enum cpuidRange = iota(1, 10).map!(ctfeRepeater).array;\n        @TemplateBenchmark!(0, cpuidRange) \n        @FunctionBenchmark!(&quot;Measure&quot;, iota(1, 10), (_) =&gt; [1, 2, 3, 4])(meas) \n        static int sum(string asmLine)(inout int[] input)\n        {\n            int tmp;\n            foreach (i; input)\n            {\n                tmp += i;\n                mixin(&quot;asm { &quot;, asmLine, &quot;;}&quot;);\n            }\n            return tmp;\n        }\n</code></pre>\nThis made-up (pointless) benchmark measures how insert a number of cpuid instructions into the loop of a summing function affects it&#x27;s runtime. My library writes the code from your specification as above to generate the instantiations and loop to measure the performance. As you might guess, the answer is a lot (CPUID is slow and serializing).<p>edit: <a href="https:&#x2F;&#x2F;github.com&#x2F;maxhaton&#x2F;chimpfella" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;maxhaton&#x2F;chimpfella</a> - I haven&#x27;t bothered to add pmc support yet')