Item(by='ChuckMcM', descendants=None, kids=[25886614], score=None, time=1611437254, title=None, item_type='comment', url=None, parent=25883440, text='FWIW, I had updated Java to use a capabilities model (before the &quot;SecurityManager&quot; cruft was so rudely shoved into the libraries) that was patterned after Joule (one of the few (if not the only) language that had passed &#x27;red book&#x27; security certification). And part of the challenge of building it had been understanding method and class &quot;signatures&quot; which would inform the model. In particular, the challenge was trying to figure out what &quot;side effects&quot; were relevant and which were not[1]. The requirement was to throw IncompatibleClassChangeException when the class had changed and thus the capability was possibly incorrect.<p>We got pretty draconian and went for a &quot;class changes can be &quot;additive&quot; only, so that the capabilities could be forward compatible with new classes.<p>Sadly, politics got in the way of shipping it so I ended up with only a couple of patents and a later Javaworld column out of it and most of work never saw the light of day.<p>[1] For example you might have a File class with a write() method that you wanted to be part of a write capability, but there might also be a update_metadata() method that effectively wrote something to the file so you needed that to be part of the capability, and <i>that</i> method might be looking at static member data of meta data flags, which were also part of the read() capability.')