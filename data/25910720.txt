Item(by='0xbadcafebee', descendants=None, kids=[25913347, 25916975, 25911234, 25911020, 25911401, 25912431, 25911502, 25912155, 25912444, 25912414], score=None, time=1611619790, title=None, item_type='comment', url=None, parent=25910277, text='Am I the only one who thinks it&#x27;s bizarre that a structured query language defines so much of how we choose to architect and operate our systems?<p>Think about it for a sec: SQL is literally just a language to query and manipulate data. There&#x27;s no reason that schema changes and data changes have to happen only through the one language, and only through one interface on one piece of software.<p>For whatever reason, this has just been how the most popular products have done it, and they largely just never changed their designs in 40 years. I like the language, and the general organization of the data is handy. But everything else about it is archaic.<p>Why fumble around with synchronization? 99% of the data in big datasets doesn&#x27;t change. This doesn&#x27;t even have to be &quot;log-based&quot;, we just need to be able to ship the old, stable data and treat it almost like &quot;cold storage&quot;.<p>Why is there a single point of entry into the data? You have to use the one database cluster to access the one database and the one set of tables. Why can&#x27;t we expose that same data in multiple ways, using multiple pieces of software, on multiple endpoints?<p>Other protocols and languages have ways of dealing with these kinds of things. LDAP can refer you to a different endpoint to process what you need. Web servers can store, process, and retrieve the same content across many different endpoints in a variety of ways. Lots of technology exists that can easily replicate, snapshot, version-control, etc arbitrary pieces of data and expose them to any application using standard interfaces.<p>Why haven&#x27;t we created a database yet which works more like the Unix operating system?')