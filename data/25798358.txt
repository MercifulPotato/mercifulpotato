Item(by='flohofwoe', descendants=None, kids=[25798577, 25798606, 25798921, 25798578], score=None, time=1610755492, title=None, item_type='comment', url=None, parent=25797025, text='IMHO those &quot;language designer trivia&quot; are interesting to read and think about but in the end irrelevant for popularity (and I think Zig will be popular). My personal favourites so far are:<p>- The language is really simple and &quot;enjoyable&quot;. Writing C++ often feels like puzzle solving to me even after 25 years. From the little Rust I&#x27;ve written so far, I got the same impression. Writing Zig is like writing C or Go but even more straight-forward. The language completely &quot;disappears&quot; while coding.<p>- The simple integration with C, Objective-C and C++ doesn&#x27;t get enough credit (disclaimer: I haven&#x27;t tried C++ yet). Even if Zig aims to replace C, I think the reality will be that most cross-platform &#x2F; &quot;cross-language&quot; libraries will continue to be written in C, and most &quot;serious&quot; Zig projects will actually be mixed-language projects. Most other languages are too much trapped in their own ecosystem and aim to &quot;rewrite the world&quot; (which won&#x27;t happen of course).<p>- Integrating the build system into the compiler and standard library is the right way to do it (not a feature unique to Zig, but if the C&#x2F;C++ world is looking for the right way to solve the &quot;build system problem&quot;, this is it).<p>...lots of other cool stuff in Zig to write about such as the incredibly simple module system, the comptime-, reflection- and generics-features, but IMHO the only feature that really counts in the end is: ergonomics.<p>This is the one thing that matters and where Zig beats the more &quot;powerful&quot; alternatives.')