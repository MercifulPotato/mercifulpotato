Item(by='Munksgaard', descendants=None, kids=None, score=None, time=1603694880, title=None, item_type='comment', url=None, parent=24891082, text=' &gt; 1. Both Vim and Emacs are horribly annoying with their automatic indentation for SML. There is a lot of fighting against the editor in this department. In Emacs e.g. you have to delete whitespace all the time, because otherwise you&#x27;d have top-level function definitions shifted 80 characters to the right.<p>I&#x27;ve used sml-mode in Emacs for years, and I&#x27;ve never had the problem you&#x27;re describing. On the contrary, I find sml-mode to be quite adequate for my needs. Can you elaborate a bit on what&#x27;s causing you problems?<p>Edit: Ah, I see what you&#x27;re saying. After finishing a function definition and starting a new, the cursor is wildly indented, that&#x27;s true. But if you just type `fun` and press tab, sml-mode automatically indents the definition correctly.<p>&gt; 2. I&#x27;ve used Poly&#x2F;ML and SML&#x2F;NJ so far. Both of them are purely interactive, meaning I can&#x27;t just compile a program into ELF and ship it somewhere else without the compiler. That makes it a no-go for me for real-world use.<p>I can recommend MoSML for interactive development. It can also produce compiled binaries. When I want to produce efficient compiled code, I usually use MLton.<p>&gt; 3. The interactive modes of Poly&#x2F;ML and SML&#x2F;NJ don&#x27;t support readline shortcuts. They are the most cumbersome REPLs I&#x27;ve ever used.<p>Use the REPL in emacs, it&#x27;s excellent.<p>&gt; 4. Inline type declarations (as opposed to Haskell-style type declarations on a separate line) are very noisy - they make reading the code harder. Omitting them (which is the rule in SML in practice) leads to hard-to-decipher compilation errors when you write a new piece of code and you made an error somewhere which confused the type-inference about your intentions. Suddenly forgetting about a word or a set of parentheses in one function results in errors in another perfectly-good function. It&#x27;s the horror of C++ templates all over again.<p>I agree, this is a pain point. I usually leave type declarations in comments before the definitions, but that of course has obvious drawbacks.')