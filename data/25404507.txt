Item(by='kbenson', descendants=None, kids=[25407348, 25406082], score=None, time=1607837046, title=None, item_type='comment', url=None, parent=25401684, text='&gt; Who is asking for a rewrite of systemd?<p>Me?<p>&gt; Either you believe systemd is fine<p>I don&#x27;t think anyone really believes that.  They just believe the benefits it provides over sysvinit are real and generally worthwhile in most cases.  Systemd has many warts.  I&#x27;m not sure anyone refuses to believe that.<p>&gt; or you believe sysvinit never should have been replaced<p>Yep, there&#x27;s plenty of people that believe that.  I&#x27;ve had discussions with them here.<p>&gt; or should have been replaced with something totally different than systemd with a much smaller scope.<p>I&#x27;m sure there are people that believe this.  Personally I think it&#x27;s mostly due to being unaware of some facets of the situation.  Systemd itself was much smaller in scope originally.  The scope increased as they ran into things that it really made more sense to combine than leave separate.  A different project may have chosen to leave those things out when encountered, but then it would have all the problems systemd tried to avoid.<p>That actually aligns quite a bit with my argument.  With time and foresight (which wasn&#x27;t necessarily possible the first time, since this is the first time an init system has tried to accomplish these goals that wasn&#x27;t already intended for a tightly coupled system like Windows or MacOS), they could plan:<p>1) A more sane unit file syntax that wasn&#x27;t ambiguous and confusing because of accreted features (After vs Wants, etc).<p>2) A sane API for subsumed services so if someone doesn&#x27;t want to use the reference version provided by systemd, it&#x27;s straightforward to drop in something else as long as you an make it talk systemd (or provide an interop layer).  E.g. DHCP client, login managers, etc.  This may or may not be done to some acceptable level currently, I&#x27;m not sure (but I suspect it depends on the service).<p>3) Take advantage of even more new kernel features for additional benefits (it&#x27;s eBPF all the way down).<p>But here&#x27;s the thing, while I think everyone would agree that something like systemd that&#x27;s more modular in a well defined way and more sanely configured and documented would be preferable to systemd (I mean why not, it&#x27;s basically &quot;systemd but better&quot; which is preferably even if you don&#x27;t like systemd), I don&#x27;t think <i>anyone</i> really wants to go through the process of either developing, integrating, or learning a new system at this point.  We&#x27;re all too exhausted.<p>And that&#x27;s a shame, because what we all have now is the mad scientist&#x27;s awesome flying car.  Sure, it does amazing things, and you can do things that would be near impossible in the past, but you control part of it with your thighs and elbows and there are two steering wheels, and the one on the ceiling is the one that steers it like a car.')