Item(by='LeifCarrotson', descendants=None, kids=None, score=None, time=1604954098, title=None, item_type='comment', url=None, parent=25038793, text='I&#x27;ve developed a lot of stuff for Fanucs with a similar setup, minus the cameras. A relatively small amount of the work is actually getting in the cell with the pendant and teaching the position registers. A large amount is structuring your programs, writing interprocess communication, setting up inter-machine communication, fault handling, zone exclusions, process monitoring, manual overrides, dry cycle controls, etc. etc. etc.<p>First, write the programs that set flags, work with IO, branch and jump, fault and recover, and so on. Stick in comments as appropriate that read eg. &quot;Now move from PR1:Home to PR17:Infeed Magazine 2, approaching with the offsets from PR101&quot;.<p>We typically implement some sort of &#x27;dry cycle&#x27; mode, where we don&#x27;t actually check for part presence&#x2F;energize vacuum generators&#x2F;spool out wire&#x2F;spray paint, so you can check for intermittent mechanical problems, loose wires or fasteners, etc.  When starting development in this way, it&#x27;s a sort of anhydrous or dessicated cycle, without any motion whatsoever!<p>When the robots finally arrive or when you actually go into the shop, only then should you need to move stuff. A benefit is also that you should have a much better idea of precisely where and in what sequence you need to move it, not just the RFQ&#x27;s description of &quot;the robot does some stuff and assembles the part&quot;.')