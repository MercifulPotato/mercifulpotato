Item(by='alkonaut', descendants=None, kids=None, score=None, time=1610363905, title=None, item_type='comment', url=None, parent=25726842, text='&gt; Some parts of Windows are UWP. Some are Win32. Some are WPF. None of them can be expected to behave identically. Many of them don’t behave the same way as basic system apps. Explorer behaves nothing like Settings.<p>As far as I know there is only one one system for drag &amp; drop so while it&#x27;s certainly true that apps look like a mix of of every framework on earth, I don&#x27;t think this makes drag &amp; drop any less a core OS feature on Windows. Dragging from UWP to WPF to WinUI to Win32 works just as well as between two apps of the same kind (As far as I&#x27;m aware). Of course since there ARE no &quot;standard drag &amp; drop&quot; thing - e.g. because text snippets aren&#x27;t draggable so it&#x27;s only app-specific objects that can be dragged.<p>&gt; These are not rare edge cases — these are buttons, text fields, text areas, image wells, and all the other basic components that make up the majority of apps.<p>Maybe there are interaction modes I&#x27;m not aware of but apart from dropping text into text fields which basic components actually give meaningful default interactions? Dropping text or images into a document needs a per-app implementation just like the mp3 in Audacity. Can you give an example that isn&#x27;t just a text field? For example what&#x27;s the typical use case for dropping something on a button?<p>&gt;  just believe user interfaces whose purposes only cover two of four letters in CRUD (specifically [C]reate for saving a file and [R]ead for opening one) should avoid being destructive.<p>The topic of this post is &quot;why are there no thumbnails in the gtk filepicker&quot;? The anwer is that there is a thumbnail system in the explorer (nautilus) but the developers chose NOT to use the explorer component in the file picker. So the capabilities for browsing files diverged and would require duplicated effort to do what people expect from Nautilus, inside the filepicker. This had also happened in Windows - and this I assume is why explorer is now part of the FileDialogs in Windows. I don&#x27;t mind it being a full file browser experience (I like it) and I also think it&#x27;s pretty easy to rationalize the decision to make use of the system wide file browsing experience here. No windows user ever expected anything else. I&#x27;d always want my file open dialog to accept a dragged file to mean &quot;move&#x2F;copy file there&quot;. But I&#x27;d also gladly take a drop on the path part to mean &quot;change location&quot;.<p>&gt; Why are there non-destructive and destructive file dialogs? Why are destructive ones the most common?<p>There are older and newer APIs, even within the same frameworks since Win32 2020 is different from Win32 1990. A new app showing a file dialog would typically get the &quot;new&quot; one. An old app making a call to show a file dialog will always get the old one - even on a new version of windows. The reason they can&#x27;t just redirect those calls to show the new one, is because these are objects that the app can also modify&#x2F;customize the dialog with code that doesn&#x27;t make sense for the next gen dialog. So all generations of the APIs and all the appearances of the dialogs must remain available otherwise those apps would risk breaking.  E.g. a 90&#x27;s AutoCad would hijack the window area and render a preview of the drawing to the right of the file list. In the modern dialog such previews are handled by explorer plugins instead of a hack to draw a picture in the dialog surface itself. But obviously that 90&#x27;s AutoCad program isn&#x27;t changing, and must continue to run forever. So it gets the old dialog. And obviously between different toolkits the dialogs could change just like between Cocoa and something else.<p>Of course, ALL file dialogs allow selecting any file and deleting&#x2F;renaming it - so they are all 100% &quot;destructive&quot; and all have both &quot;U&quot; and &quot;D&quot; in CRUD if you want, apart from handling the job of selecting a file name. \nI&#x27;m not sure whether the older ones handle drag-drop or not (good question). If they do, I&#x27;m pretty sure they do exactly what the new one does, i.e. actually move&#x2F;copy a file into the filesystem at the shown location.')