Item(by='ztjio', descendants=None, kids=None, score=None, time=1610798214, title=None, item_type='comment', url=None, parent=25801281, text='Disk is often slower than the network now. You <i>do</i> need to keep an eye on this. However, using tools like gRPC instead of wasteful JSON REST calls makes a huge difference and brings other benefits too.<p>Typically speaking you&#x27;re adding submillisecond latency per external call, or you&#x27;ve done something wrong.<p>Something wrong can include incorrectly organizing your system. Two separate services that constantly chat with one another should probably be considered as candidates to merge into one, for example.<p>Deployment matters a lot. I see people mocking systems like Kubernetes and tools like service meshes, probably because they don&#x27;t understand this critical and hugely beneficial capability they bring which is to organize communication on the bases of (amongst other things) locality and system topology automatically.<p>In the end, most people seem to totally miss the real reason that &quot;micro&quot; services (the &quot;micro&quot; part should really be ignored today) are beneficial. Hint: it&#x27;s not a <i>technical</i> problem being solved. It&#x27;s a people problem. Service oriented architectures give very clear boundaries around which a development organization can structure in a way that allows parallel delivery.<p>The biggest problem any growing organization will face is: they don&#x27;t pay attention is contention (yes like as in concurrency&#x2F;locks&#x2F;etc.) across the development team(s).<p>I have personally witnessed and worked with a 400+ person monolithic development organization. This was essentially a &quot;unicorn&quot; and an exception that proves the rule. The one and only reason this organization was successful was because they had top to bottom extreme coordination managed by a very small group that worked effectively together. Without that tight central orchestration it would&#x27;ve been a nightmare.<p>Most organizations can&#x27;t orchestrate a 7 person team effectively, good luck getting 200 to share a monolith well. So you break up the org and the architecture follows, see: Conway&#x27;s Law. It goes both ways, too. You break up the architecture and the org can follow.<p>With that in mind, it&#x27;s extremely important to get your boundaries right and for the love of all that is sane in a daily job, don&#x27;t break it up too much. So many organizations would triple or quadruple their productivity breaking a monolith into literally 2 parts. If you can do 3-5 that&#x27;s cool, amazing! Just because you can see the dotted lines between 25 different potential services doesn&#x27;t mean your organization will tolerate that.<p>Anyway that was a diatribe.<p>TL;DR: &quot;micro&quot; services solve PEOPLE problems, moreso than technical ones, and the price you pay is additional architectural and delivery challenges which you must balance well and plan for')