Item(by='tomcat27', descendants=None, kids=[25299279], score=None, time=1607055079, title=None, item_type='comment', url=None, parent=25298574, text='30 years ago software engineering was probably a few bunch of technical skills. Now it&#x27;s a very big spectrum, no individual knows everything.<p>Someone applying to search quality team at Google that works on  search algorithm really wants someone who knows algorithms..<p>but that may not be the case for a web of app developer.<p>but the same app developer needs to know have algorithmic sense to do some performance tuning.<p>The current interviews ignore all these nuances and simply ask a weird, sometimes boring, competitive coding question. That&#x27;s fine too.. most engineers enjoy a puzzle once in a while.<p>But what really irritates me is sensitivity of assessment in these coding interviews.<p>Someone the other day was saying Cracking the Coding Interview book is no longer relevant. The problems are apparently simpler to what people ask in real interviews.<p>We don&#x27;t just have to provide pseudocode. Write working, beautiful code, solve the edge cases and speak to the interviewer while doing all of this.  I don&#x27;t know since when engineers actually talk and code at the same time during working hours.<p>The phone interviews are a joke. In a 45mins meeting, where 10mins spent on introduction from both people has zero weight. In those days it was supposed to weed out non-serious candidates with fizz-buzz question. Well&#x27; agreed fizz buzz isn&#x27;t really a good question, but neither a LeetCode Hard DP question to be solved in 30mins.')