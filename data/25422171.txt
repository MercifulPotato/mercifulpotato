Item(by='jerf', descendants=None, kids=[25422482], score=None, time=1607974807, title=None, item_type='comment', url=None, parent=25422049, text='They release something not called &quot;encoding&#x2F;xml&quot;. They could do what they did to the syscall package. The syscall package, by its nature, can&#x27;t conform to the 1.0 compatibility promise Go itself maintains, because it changes outside of the scope of the Go project. So they froze the syscall package at some point, and then offered one in the golang.org&#x2F;x&#x2F; namespace at <a href="https:&#x2F;&#x2F;pkg.go.dev&#x2F;golang.org&#x2F;x&#x2F;sys" rel="nofollow">https:&#x2F;&#x2F;pkg.go.dev&#x2F;golang.org&#x2F;x&#x2F;sys</a> .<p>I would again emphasize that encoding&#x2F;xml, to my knowledge, only has problems with this particular roundtripping use case. It can consume non-namespaced XML correctly, and handle namespaced XML as long as you don&#x27;t plan on re-emitting XML.<p>What would probably end up happening is a new package appearing on github.com for this use case, forked off of encoding&#x2F;xml, for this use case. (If you&#x27;re looking for a project that might attain some use, this is a likely candidate.) Unlike something like Python where the core packages are often C-based and thus you can expect better performance from the built-in &quot;set&quot; than somebody&#x27;s pure-Python &quot;set&quot; implementation from before the built-in, encoding&#x2F;xml is just a pile of pure Go code whose only advantage is that it ships with the compiler. Anyone can replace it without incurring any other disadvantage whenever they like.<p>(I looked a few versions ago, FWIW; encoding&#x2F;xml has deviated so much from what I forked that my fork is essentially dead and no longer releasable without basically starting over from scratch. Plus I built it with the idea that it should be a minimal modification (so I could port it forward, which turned out to not work, but it&#x27;s still how it was built)... if I was truly <i>forking</i> I&#x27;d have done some more extensive changes to it to support namespaces in general, rather than for my particular case.)<p>Anyhow, upshot, the Go project as a whole is not stuck... it is specifically encoding&#x2F;xml as the standard, built-in library that is stuck. It&#x27;s not like Go is completely incapable of handling XML correctly from first principles for some reason or anything.')