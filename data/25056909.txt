Item(by='tgraf', descendants=None, kids=None, score=None, time=1605087097, title=None, item_type='comment', url=None, parent=25054113, text='Extending a bit on what Alexei is talking about (Full eBPF summit talk: <a href="https:&#x2F;&#x2F;youtu.be&#x2F;jw8tEPP6jwQ?t=639" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;jw8tEPP6jwQ?t=639</a>)<p>Many people seem to make an assumption that kernel code is perfect and that when code is merged into the Linux kernel, it is automatically secure. That is definitely not the case. Kernel developers make mistakes as well and they have devastating consequences.<p>Right now, the security of the Linux kernel code depends on a combination of code review, fuzzing, controlling the pace of code changes, and running LTS releases to increase the chance others found the bugs already.<p>eBPF further increases the security model of kernel development by <i>adding</i> a verification step to the model. It means that there is an additional layer of protection in case of code imperfections.<p>The focus on eBPF safety is awesome. eBPF is software, software will have bugs, eBPF is no exception. The best way to improve the security of software is to question it. Given the wide spread use of eBPF in highly critical and exposed scenarios, the pressure on making it as bug-free as possible is very high so it&#x27;s probably fair to assume that the scrutiny put in place, will lead to a high quality implementation of the verifier.')