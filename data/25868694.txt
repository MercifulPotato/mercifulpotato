Item(by='t-writescode', descendants=None, kids=[25868929], score=None, time=1611293819, title=None, item_type='comment', url=None, parent=25867342, text='You can definitely have heterogeneous lists in typed languages. They&#x27;re almost always an anti-pattern, but you can do it in a few ways.<p>In Java, you could have a LinkedList&lt;Object&gt;. You&#x27;ll need to cast to do any operations on the objects; but, it&#x27;s a heterogeneous list anyway, so why would you?<p>There could be a reason, though.<p>Let&#x27;s say they all have the same function, then, but they&#x27;re different objects. Well, for that, you could write a wrapper object that all inherit from the same class, say:<p><pre><code>  interface Clicker { public void click(); }\n  public class ClickerWidget implements Clicker {\n     Widget w;\n     public void click() { w.click(with_parameters); }\n  }\n</code></pre>\nAlternatively, Go supports &quot;use the same function&quot; in a different way by having an interface just define a set of functions, no matter their parent class, and as long as the type has that function, it works.')