Item(by='bayindirh', descendants=None, kids=[25594902], score=None, time=1609428483, title=None, item_type='comment', url=None, parent=25592271, text='&gt; If the user has a super secure password shared with a different, compromised service, libcrack will not detect that.<p>There&#x27;s a module[0] for that (TM).<p>&gt; Expiry results in passwords like: (prefix)Dec2020, (prefix)5<p>libcrack can enforce similarity and rotation checks too [1].<p>&gt; or cycling the last 2&#x2F;3 entries.<p>There&#x27;s also another module[2] just for that.<p>&gt; Keys can be relatively easily revoked and are guaranteed not guessable.<p>You&#x27;re right but, a good password policy and infrastructure is not a simple straw man which can be set alight with a simple match. PAM can be a bit hard to understand but, once understood, it&#x27;s pretty easy to create complex rules and flows.<p>If you get your workstation compromised somehow, you can always lose your keys. Then you need another password on top of your key to keep it encrypted.<p>At the end of the day, a good security policy is required. Keys, passwords, fingerprints and other identifiers are just tools. If you can design your defenses and moats well, you can secure your system with any method you want.<p>[0]: <a href="https:&#x2F;&#x2F;github.com&#x2F;skx&#x2F;pam_pwnd" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;skx&#x2F;pam_pwnd</a><p>[1]: <a href="http:&#x2F;&#x2F;www.linux-pam.org&#x2F;Linux-PAM-html&#x2F;sag-pam_cracklib.html" rel="nofollow">http:&#x2F;&#x2F;www.linux-pam.org&#x2F;Linux-PAM-html&#x2F;sag-pam_cracklib.htm...</a><p>[2]: <a href="https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;8&#x2F;pam_pwhistory" rel="nofollow">https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;8&#x2F;pam_pwhistory</a>')