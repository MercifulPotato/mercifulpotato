Item(by='blueflow', descendants=None, kids=[24698571, 24698376, 24696523, 24695557], score=None, time=1601969258, title=None, item_type='comment', url=None, parent=24683630, text='When protected mode was introduced with the 286, it only virtual memory management method was via segmentation. Things like W^X were implicit in the system design. There were no pages to be mprotect&#x27;ed to enforce W^X, no, you could set the selectors for the code segment and for the data&#x2F;stack segments to non-overlapping memory regions. Which segment a address was meant for was implicit - a return address on the stack implicitly referred to the code segment. This makes code injection exploits really difficult, if not impossible, since the code segment is protected against writes and the data segment causes an protection error when being jumped in. This wasn&#x27;t some extra feature - this is inherent to protected mode.<p>But C assumes a plain memory layout, so Linux somewhen started to overlay the code and data segments 1:1, extending them to the full size of the virtual address range and use paging (introduced with 386) to implement virtual memory instead. This 1:1 mapping defeats the protections from the first paragraph. And now we got to implement a lot of security features the hard way.<p>In the AMD64 extensions, support for segmented protected mode got removed at all, and the 1:1 mapping is forcibly assumed.<p>Don&#x27;t get me wrong - this isn&#x27;t some &quot;back on the old times stuff was better&quot; - but i really feel this path in computing should have been pursued more.')