Item(by='ratww', descendants=None, kids=[25933638, 25935525, 25934732], score=None, time=1611779055, title=None, item_type='comment', url=None, parent=25933195, text='I disagree.<p>Rails was <i>already</i> faster for CRUD apps back in the mid-2000s. Batteries included, maybe a gem or two for an admin panel or for auth. Not that it matters, but <i>rails new</i> is probably faster than 60 seconds too. Django is pretty good too.<p>ASP.NET Webforms was made for CRUD, and it even provided a WYSIWG designer back in the early 2000s. And it was just a matter of launching Visual Studio and creating a new project. Again, doesn&#x27;t matter, but it was&#x2F;is way less than 60 seconds, and a lot less fiddling. Webforms got an MVC version a few years later if you prefer that. And they haven&#x27;t stopped: Blazor is new-ish and very productive, and runs both in the backend and in the frontend (using WASM).<p>Both Rails and Microsoft tech also give you a backend, which you&#x27;re not putting into your equation. Sure you can have a Backend in JS but the experience it&#x27;s nowhere near as ergonomic or as fast as using Rails or ASP.NET.<p>Sure, if you&#x27;re comparing with building an app in Xcode or Android Studio then JS tooling is faster to use. But if you compare to what people were using to build <i>CRUD</i> for the last 20 years then JS is not really special. For interactive frontend apps? Then it&#x27;s a different discussion. But for CRUD, modern JS is not that special.')