Item(by='dan00', descendants=None, kids=[24997022], score=None, time=1604570703, title=None, item_type='comment', url=None, parent=24996074, text='&gt; I.e. Rust right now is excellent at certain things (&quot;linear things&quot;), and okay at non-linear things. But could it be made to be really good for the latter too?<p>Having written programs in Rust and Haskell, which are in this regard\nquite similar, I think that you can express most of your application in a\n&quot;linear&quot; fashion and only have a bit of &quot;non-linear&quot; things at the top.<p>For example if you have to handle some &quot;non-linear&quot; things like events\nfrom the system or a gui library, then you might have - in Rust\nterminology - a &#x27;RefCell&lt;Rc&lt;AppState&gt;&gt;&#x27; to be able to have shared mutable\naccess to the application state.<p>At the top of the event handler you would transform the\n&#x27;RefCell&lt;Rc&lt;AppState&gt;&gt;&#x27; into a &#x27;&amp;mut AppState&#x27;, which is the switch\nfrom the &quot;non-linear world&quot; to the &quot;linear world&quot; and involves a runtime\ncheck that there&#x27;s only one mutable reference. All the following code\nof the handler can then be verified at compile time.<p>This also makes the reasoning about the application easier, because\nyou might even reduce the mutation of your application state to the\nswitching area. So most of the event handling could be a pure\ntransformation of the application state.')