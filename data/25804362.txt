Item(by='kazinator', descendants=None, kids=None, score=None, time=1610823091, title=None, item_type='comment', url=None, parent=25798929, text='Please don&#x27;t spread this flamewar-provoking way of speaking about type-systems.<p>Firstly, dynamic languages are typed. The word &quot;untyped&quot; has a very specific meaning in a narrow branch of computer science, as in &quot;untyped calculus&quot;, which refers to a situation in which the types of the syntax tree nodes of the program are not being taken into consideration. (Which doesn&#x27;t mean they don&#x27;t exist, by the way!)<p>In sofware engineering, an untyped language is something utterly unsafe, like assembly language or BCPL, where every value is just a machine word, and the meaning&#x2F;type of a machine word is just that of whatever operation is being applied to it at a given spot in the program.<p>Dynamic languages are typed, and even to the extent that some of them do assign type to the nodes of program (type inference).<p>Secondly, a &quot;tag&quot; is an implementation concept. A tag typically does not give all of the type information about an object, or not about every object kind. There may be more than one kind of tag used. For instance, a value might have a two-bit tag indicating a crude classification of a value into four categories. For an unboxed fixnum integer, that indicates the exact type (fixnum), but most heap objects might be lumped into the same category accordint to that tag, distinguished by a more comprehensive type tag that might take on, say, one of twenty values.  That tag is also not complete information for all objects. For instance for an OOP object, the tag might indicate &quot;this is an OOP object&quot;, without regard for its class: all OOP objects might share the same tag. Yet, at the language level, their type is their class. Another example is functions. All functions might have a tag indicating &quot;this is a function&quot;.  There might be a separate tag for things like compiled function, interpreted function, foreign function or whatever. But the type of a function takes into account not just that it&#x27;s a function, but other properties like number of arguments.  In many dynamic languages, you cannot call a two arguments function with three arguments. That check doesn&#x27;t come from the tag, which doesn&#x27;t have that information.<p>The type of an object in a dynamic setting goes beyond the tag. For some objects, the word tag tells everything, and the heap tag does for others; but not for all object kinds.<p>When the dynamic language implements a type inference system, the truths which that inference system works with cannot simply be reasoning about tags. The representation of type has to include concepts like the class of an object, or the number of arguments and types of a function and its return type.')