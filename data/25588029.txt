Item(by='mlthoughts2018', descendants=None, kids=[25588139, 25588699], score=None, time=1609374100, title=None, item_type='comment', url=None, parent=25587899, text='I think you have it very backwards. Coding leadership usually involves nearly zero coding itself. Rather it involves getting the other person to write down RFCs, tech specs, requirements, design diagrams, etc., and guiding them through how to think about macro structure of solutions and outcomes <i>for specific product deliverables and business cases</i>.<p><i>Training</i> involves teaching specific tactics of coding, like a new technique of multi-processing, or an approach to refactor a legacy class implementation. Helping someone learn tactics is <i>teaching</i> or <i>training</i>, which is a different thing than leading.<p>A young person could <i>lead</i> an older, more experienced person. For example, they could drive them to outline a solution in architecture documents that better align with product management. That can be true even if there are no <i>tactics</i> of software design that the younger person can <i>teach</i> the more experienced person. So that doesn’t reduce credibility or anything in the leadership sense.<p>In general it’s important to separate these: mentorship, coaching, teaching &#x2F; training, and leading. They are all very different things.')