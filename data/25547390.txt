Item(by='atombender', descendants=None, kids=None, score=None, time=1609025884, title=None, item_type='comment', url=None, parent=25542457, text='Rebasing rewrites history, and Git&#x27;s strict linear histories mean you can no longer push or easily resolve conflicting histories (see: &quot;git rerere&quot;) that have diverged.<p>With Darcs, you can. You can merge&#x2F;cherry-pick any history without incurring other conflicts than &quot;real&quot; conflicts where people have worked on the same lines of text. This eliminates a large group of commands Git has to provide (&quot;rebase&quot;, &quot;cherry-pick&quot;, &quot;rerere&quot;, &quot;reset&quot;, etc.) because the entire problem space doesn&#x27;t even exist. Darcs is utterly magical that way.<p>&gt; No, there isn&#x27;t.<p>I have to disagree there. There&#x27;s a huge corpus of material showing that people struggle with Git.<p>For example, a cursory search of HN shows many, many threads that devolve into discussions about how unnecessarily complicated and complex Git is. You can also go on Stack Overflow or other forums and look at all the users whose repositories are stuck in a state they don&#x27;t understand. I suspect no other VCS has forced so many users to give up and wipe their local repo to start over again. Git&#x27;s UI has gotten better over the years since I started using it around 2007, but it&#x27;s not great at explaining repository state.<p>Many less-than-technical people — such as designers — have been forced into using Git as part of their work. Subversion was extremely popular in this group, and the transition to Git was slow precisely because Subversion offered simplicity where Git didn&#x27;t.<p>Anecdotally, I work with a bunch of highly competent, highly technical colleagues — some of whom I consider to be better developers than myself — who still sometimes struggle working with Git. Most developers don&#x27;t want, I think, to be &quot;Git experts&quot;; they just want to get stuff done. Most users, myself included, arguably use just a tiny subset of Git commands that deal with the daily pull&#x2F;push&#x2F;commit workflow. When I joined my current company, people weren&#x27;t even practicing clean histories, but using &quot;git merge&quot;. But once you get into rebasing (which many people <i>do not do</i>) and diverging histories across multiple levels of branches, you open a whole can of worms that Git is not good at dealing with. Rerere, while a huge time-saver, doesn&#x27;t solve everything in such complicated scenarios.<p>Perhaps you&#x27;re perfectly fine with all of this, but in that case you are not representative of the average user, in my opinion.<p>&gt; git is the simplest and most straight-forward version control system I ever used<p>Since I started out, I&#x27;ve used RCS, Visual SourceSafe, CVS, Subversion, Perforce, GNU Arch, Darcs, and Mercurial. The only tool more complex than Git was GNU Arch (though, admittedly, required jumping through some ridiculous hoops to work around its lack of native branching support), but Git is without question the most complicated and complex that has been in mainstream use.')