Item(by='mpweiher', descendants=None, kids=None, score=None, time=1603026008, title=None, item_type='comment', url=None, parent=24816852, text='You&#x27;ve nailed one of the few issues with keyword message syntax in Smalltalk-80.<p>While binary and unary messages chain w&#x2F;o problems, it&#x27;s not possible to disentangle two keyword messages:<p><pre><code>     receiver msg1:arg1 msg2:arg1\n</code></pre>\nis indistinguishable from<p><pre><code>     receiver msg1:arg1 msg1:arg2\n</code></pre>\nSo ST-80 chooses the latter.  If you mean the former, you have to parenthesize.<p>But not always, it turns out.  If you actually chain messages to the same receiver, you can use the semicolon to chain those messages:<p><pre><code>   myRect x:20;\n          y:10;\n          width:100;\n          height:100.\n</code></pre>\nThis looks like the single message  x:y:width:height: but is actually four separate messages, all sent to myRect.  It makes additional compound messages, particularly setters, less necessary.<p>In Objective-S[1], you can use the pipe (&quot;|&quot;) to chain message-sends that go to the result of the previous message, rather than its receiver.  For example:<p><pre><code>   self dictionariesForQuery: &quot;select {column} from {table}&quot; | collect | at:column.\n</code></pre>\nSince Objective-S also supports dataflow, the similarity to Unix pipes is intentional, and it pretty much works semantically as well: the result of the previous expression gets piped into the next expression.  Very intention-revealing.  In fact, I&#x27;ve found it to be so useful in communicating the structure of expressions that I use it even when it&#x27;s not strictly necessary, for example the second instance in the example above.<p>&gt; delineating the argument set for a single function is the main job parens fulfill.<p>Right.  Which is one of the many reasons why the case of Swift is so mind-boggling:  there some of the parameters go inside the parens, some outside.  I think you can make a good case for either all in or all out (better for all-out, IMHO, but whatever).  But partly in and partly out?<p>[1] <a href="http:&#x2F;&#x2F;objective.st&#x2F;" rel="nofollow">http:&#x2F;&#x2F;objective.st&#x2F;</a>')