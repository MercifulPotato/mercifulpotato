Item(by='racingmars', descendants=None, kids=[25911613, 25913334, 25911033, 25911021, 25914611, 25913891, 25913128, 25911242, 25914322, 25915827, 25911121], score=None, time=1611620752, title=None, item_type='comment', url=None, parent=25910496, text='I&#x27;ve developed negative feelings toward autotools over time, but I&#x27;m not sure how much I should be blaming autotools versus the projects that use autotools.<p>One annoyance is that it often feels like &quot;.&#x2F;configure ...&quot; takes longer to run than the actual &quot;make&quot;.<p>But my main annoyance derives from that fact that most projects I build from source which use autotools <i>don&#x27;t build cleanly on anything but Linux x86&#x2F;amd64</i>. I spend a lot of time playing with non-Linux and&#x2F;or non-x86 Unix systems, or using vendor compilers instead of gcc -- primarily Solaris (both x86 and SPARC), Linux on POWER, and AIX on POWER. Current versions of IBM&#x27;s compilers, Sun (err...Oracle&#x27;s) compilers, etc. Run the configure script, let it slowly probe all the little corners of whatever it&#x27;s probing, and sometimes I&#x27;m lucky enough that it completes successfully and claims to understand the environment it&#x27;s in. Then run make (or, as is often required, GNU make), and hit build errors very quickly.<p>Which makes me think... why did I just sit through that long &quot;configure&quot; script run, and why did the developer bother messing with autotools, if this project isn&#x27;t even going to bother targeting anything but Linux with the GNU toolchain to build it? If you&#x27;re not concerned about portability, it seems a relatively simple Makefile would be an easier and faster approach. Why foist the [insert your favorite colorful descriptor here, depending on your personal feelings] autoconf system on builders of your project?')