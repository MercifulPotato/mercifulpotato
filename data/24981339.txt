Item(by='dmitriid', descendants=None, kids=[24981455], score=None, time=1604422318, title=None, item_type='comment', url=None, parent=24980781, text='&gt; JSX was also one of the main reasons why people opposed it at first.<p>However, significantly more accepted it, and used it.<p>&gt; React works perfectly fine without JSX. I mean the syntactic sugar is nice, but the VDOM implementation was the breakthrough innovation that made React popular.<p>There were several breakthrough innovations. The other one was unidirectional data flow. For some reason, you oppose it.<p>&gt; &gt; its original API of `React.createClass` was really no different from hundreds of similar APIs.<p>&gt; Yes, this is the API that I am talking about.<p>1. This API is nowhere even close to &quot;provide classes, the whole bells and whistles.&quot;<p>2. This API was very similar to nearly every other API that existed at the time<p>&gt; There was never a need to combine state handling into the first virtual DOM engine.<p>Why? Why wasn&#x27;t the need there? What value its absence would bring?<p>You are complaining <i>now</i> that &quot;Some people even throw Redux at the junior programmer at the same time&quot;. And Redux exists precisely because React doesn&#x27;t provide a solution in this space.<p>Now imagine if React only released the DOM diffing library. How many Reduxes there would be trying to fix the actual rendering of data? You would complain now that &quot;Some people even throw &lt;rendering&gt; and Redux and novice programmers&quot;.<p>The beauty and simplicity of React was that it very neatly solved the rendering and re-rendering of data in <i>very few concepts</i> that you could learn in <i>under an hour</i>.<p>&gt; If there are hundreds of similar APIs, why create another one?<p>Because those different APIs work in the context of a different framework with completely different semantics<p>&gt; Why not let the developer choose their own favourite Class implementation?<p>There were no classes. React was released <i>before classes where even standardised in the language</i>. There were non &quot;favorite class implementations&quot;. All these APIs where doing an equivalent of `Object.extend`. But since they needed to do different things, they provided different APIs.<p>Why is it so hard to understand?<p>- Backbone has Backbone.Collection.extend({...})<p>- Knockout has ko.components.register(&#x27;...&#x27;, {...})<p>- Ember had DS.Model.extend({...})<p>- React had React.createClass({...})<p>They are all similar APIs in the sense that they extend some objects with custom definitions for specific parts of the API. APIs that are specific to the frameworks that define them.<p>What &quot;favorite class implementation&quot; are you even talking about?<p>&gt; Some people (such as myself) try to distance themselves from OOP as much as possible, so the class API was quite worthless.<p>You clearly have no idea what you&#x27;re talking about.')