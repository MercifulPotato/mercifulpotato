Item(by='doonesbury', descendants=None, kids=[24962443], score=None, time=1604263588, title=None, item_type='comment', url=None, parent=24959581, text='While tla+ supports pluscal so the the spec is closer to imperative programming one ultimately would do it&#x27;s true there is an insuperable gap between the spec and implementation. It should be noted dafny and Verdi are better here. Both systems allow refinement by constantly reproving safety properties over code thats closer and closer to the real implementation including making runnable code. (Verdi does coq to ocaml and dafny does dafny to .net executable generation). Frama C and spark are similar. However there appears to be a philosophical difference: tla+ finds counter examples to the spec. Absence up to the number of states checked shows the code is bug free. Dafny, Verdi seem to proceed by showing the spec is proved through various proof checking (semi) automation. As such they don&#x27;t explore state.<p>While unit testing and what not has it&#x27;s place there clear advantage of FM is the developer comes up with the spec first then show&#x2F;prove it rather than coming up with the spec bug by bug by bug which can be slower and more labor intensive and customer facing.<p>Look if you tell a Dev team we&#x27;ll need to do four quarters of work over 15 jira epics implemented in two week sprints nobody complains that the plan is dumb because all the requirements aren&#x27;t really nailed down, the scope could change, or the team might not come up with the algos ..  So why even try?<p>But if you tell the same team we&#x27;ll be using formal methods there&#x27;s a lot of complaining because FM can&#x27;t check everything ... Not down to the real final code ... So why bother? I find this dichotomy disingenuous by programmers.')