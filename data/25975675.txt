Item(by='aseipp', descendants=None, kids=None, score=None, time=1612064597, title=None, item_type='comment', url=None, parent=25974526, text='It sounds nice for optimization in theory but in practice production compilers already have well oiled optimization pipelines that have mostly &quot;flat&quot; performance characteristics (i.e. all the low hanging fruit is gone), and the algorithms are all very well understood because most of the fundamentals really haven&#x27;t changed in ~20 years or more. The 80&#x2F;20 rule mostly still applies.<p>TBF this isn&#x27;t always true. Unison[1] characterizes register allocation as geometric packing, a solution which is very robust on irregular architectures like Hexagon. GPUs have problems like extremely large register files that the literature doesn&#x27;t treat very well which some solvers might help with, etc. And fully automated solvers are useful as complementary tools for any compiler, like Souper or Alive2. They&#x27;re certainly good for specialized tools, especially validators.<p>Personally, I think to prototype and construct a general program analysis quickly, you&#x27;re better off with a tool like a Datalog variant. Souffle is pretty good. If you want to make generalized optimizers cheaper and more quickly, especially ones that can explore emergent optimizations that heuristics may not discover, solutions like equality saturation might be a better starting point[2] (it&#x27;s kind of like a generalized version of a global cost-based SQL optimizer -- so the engine implicitly combines small rules together into more powerful rules.) Specialized solvers for particular logics or domains are still going to be valuable beyond that, of course. If you&#x27;re writing a production compiler, your job is still cut out for you no matter what.<p>If someone smart out there could &quot;just&quot; write an SMT solver and a robust Datalog that are efficient and easy to integrate as Lua (&quot;drop in C files and go&quot;), I&#x27;d fund that work.<p>[1] <a href="https:&#x2F;&#x2F;unison-code.github.io&#x2F;" rel="nofollow">https:&#x2F;&#x2F;unison-code.github.io&#x2F;</a>\n[2] <a href="https:&#x2F;&#x2F;egraphs-good.github.io&#x2F;" rel="nofollow">https:&#x2F;&#x2F;egraphs-good.github.io&#x2F;</a>')