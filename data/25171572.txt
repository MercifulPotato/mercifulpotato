Item(by='jlokier', descendants=None, kids=[25174237, 25171756], score=None, time=1605982999, title=None, item_type='comment', url=None, parent=25167423, text='I&#x27;m very surprised that SQLite trusts fdatasync() when appending to a file, rather than fsync(), given SQLite is written to be so portable and cautious and has been around a long time.<p>I&#x27;ve always been suspicious that fdatasync() does not promise to durably commit the size metadata (and perhaps indirection blocks) on some OSes&#x2F;versions, just the data blocks itself.  Such that it&#x27;s only safe to use fdatasync() on already allocated regions of the file.  That was my understanding of fdatasync() when I first read about it, and I vaguely recall some DB handled this by rarely appending to files, instead doing it occasionally by pausing writes (to that file), appending a large block of zeros to the file then fsync() to commit, then resuming writes.<p>It&#x27;s not just me thinking this.  From a quick Google:<p>&gt; <a href="https:&#x2F;&#x2F;www.percona.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;08&#x2F;fsync-performance-storage-devices&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.percona.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;08&#x2F;fsync-performance-st...</a><p>&gt; &quot;The fsync system is not the only system call that persists data to disk. There is also the fdatasync call. fdatasync persists the data to disk but <i>does not update the metadata information like the file size</i> and last update time. Said otherwise, it performs one write operation instead of two.&quot;')