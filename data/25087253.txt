Item(by='webmaven', descendants=None, kids=None, score=None, time=1605300282, title=None, item_type='comment', url=None, parent=25084654, text='<i>&gt; Your being a Neo-Darwinian and your confusion at the possibility of regression or a halt in progress are the same. Once the mollusc has &quot;conceived&quot; of his shell as an &quot;adaptation&quot; to a change in condition, he has &quot;responded&quot; so harshly to environmental dangers that he has closed them off almost entirely, bringing the process of speciation and adaptation to a near halt. In fact, there are countless examples of &quot;tools&quot; &quot;conceived&quot; by organisms that have been so immaculate that development has grinded to halt.</i><p>To expand on your point a bit, this brings us around to hill-climbing optimization and being trapped in a local maxima.<p>Biological evolution is  marked by episodes of relatively generalist organisms spreading to new niches, speciating, and sometimes re-invading the environment they came from by outcompeting the original specialized denizens (I&#x27;m not necessarily just talking about large scale punctuated equilibrium, but smaller scale species ebb and flow).<p>So too with software: the cycle of specialization, optimization, ossification, and displacement by a generalist competitor from elsewhere happens over and over (&quot;worse is better&quot; is probably the pithiest expression of this, but &quot;premature optimization is the root of all evil&quot; is pretty nice too).<p>Evolution itself has evolved to increase generativity, in order to not only speed adaptation to change in general, but to unprecedented change (especially when the changes are themselves driven or exemplified by other organisms).<p>So too with software, where the change that software must adapt to is often driven by other software.<p>So software keeps getting invented and changed to  optimize for and colonize changing environments (social, economic, hardware, network, and software envs), and languages keep getting invented to improve the processes of optimization &amp; adaptation to change, as well as generativity, for both new and old niches. And of course, the boundary between software and programming language is just as fuzzy as similar boundaries in biology, frameworks and DSLs are just two obvious examples that straddle the division.<p>Not often appreciated is that all of the above applies just as much to the human social&#x2F;cultural practices of developing software as it does to the tools those practices co-evolve with (eg. writing&#x2F;editing, testing, change control, distribution, building, ticketing&#x2F;issues, deployment, etc.). And we can flip our view around and see how parallel mechanisms have always been operating on human culture from even before we were human.')