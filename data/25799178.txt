Item(by='legerdemain', descendants=None, kids=[25800350, 25799209, 25799226, 25809299, 25799260, 25799289], score=None, time=1610762280, title=None, item_type='comment', url=None, parent=25798925, text='This blog post is calling at least two different things SQL, and it&#x27;s kind of infuriating.<p>SQL as a query language is never going away. Virtually every database has found it necessary to offer a SQL-like query language: Cassandra&#x27;s CQL, HiveQL, Couchbase query language, and so on. SQL is a human-readable, composable formalism for describing data.<p>What&#x27;s gone away is the practice of writing complex, highly linked, normalized database schemas with layers of constraints and foreign key references. That was banished to the land of stagnant enterprise 10 years ago and is not coming back.<p>The last 10-15 years have been an evolution from mostly static, deeply linked, highly structured data to shallow schemas, append-only updates, denormalized data, and stream processing. If you data is a stream of updates, there&#x27;s not as much pressure to roll back. If your data is mostly defined by a series of processing pipelines that live entirely outside your data warehouse, there&#x27;s not a lot of upside on enforcing constraints in the DB. If anything, we have learned that it&#x27;s very useful to offer different denormalized views of the data in the DB to different consumers.<p>MS SQL Server is not roaring back. Businesses have just learned to unbundle data processing from data warehouses. Data warehouses now have fewer tasks to focus on, such as scalability. And if your DB is just a dumb replica with a flat schema, whether it&#x27;s an RDBMS or not is pretty unimportant.')