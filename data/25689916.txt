Item(by='mehrdadn', descendants=None, kids=None, score=None, time=1610137349, title=None, item_type='comment', url=None, parent=25689570, text='Not at all. I&#x27;ve worked on numerical stuff myself; unlike the symbolic bugs, I have little sympathy for these particular numerical errors. It would be far more reasonable if it was convoluted composition of functions, or some kind of bizarre numerical edge case. However:<p>(a) Univariate quadratics are <i>extremely</i> well-understood and <i>extremely</i> important. For example, the convergences of optimization algorithms (this is root-finding, and there are some differences, but they&#x27;re not unrelated, and this is beside my point) are often proven on quadratics first, and <i>then</i> they&#x27;re applied to other algorithms.<p>(b) (x - 1)^2 - 1 is just about the simplest quadratic you can possibly imagine that isn&#x27;t outright lacking in other terms (like x^2), and quadratics are pretty much the simplest nonlinear functions.<p>(c) No matter how good or bad your algorithm is, it is absolutely trivial to do a few quick tests afterward to sanity-check the result, and to return some kind of error if it looks wrong.<p>This isn&#x27;t some kind of quibbling over a solver that has an error of 0.0001 or something. We&#x27;re feeding in the most basic quadratic you can imagine, and the solver is telling you with <i>confidence</i> that the solution is 1.01 when in fact it&#x27;s supposed to be 2. It&#x27;s just inexcusable. At the <i>very</i> least (and even this would honestly still be woefully lacking), it should be able to do the dumbest thing possible, which is to plug that back in, and maybe plug in a couple close numbers (maybe +&#x2F;- some epsilon) and see if results change sign or land anywhere <i>near</i> zero. In reality there are all kinds of tests they could and should be doing to check things like concavity and switch to better algorithms, but that&#x27;s kind of moot when they&#x27;re not doing the most basic check.<p>Edit: Actually I could probably say something similar about one of the SymPy bugs too (they really shouldn&#x27;t have trouble telling if 0.66 + 0.56I is a real number), but one key difference is at least their problem is in filtering out <i>correct</i> solutions, not in returning completely <i>wrong</i> solutions with full confidence.')