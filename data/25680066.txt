Item(by='Shoop', descendants=None, kids=None, score=None, time=1610068167, title=None, item_type='comment', url=None, parent=25679820, text='Part of this has to do with the fact that it is not possible (without tricks) to have multiple different typeclass implementations for one type in Haskell (I believe Rust also has this restriction). This language restriction has the tendency to seep into people&#x27;s way of thinking about monads (and other typeclasses). However, it is not fundamental that a typeclass (or other ad-hoc polymorphism) system has this restriction.<p>That being said, the language design problem of how to support multiple different typeclass implementations for one type is actually trickier than you&#x27;d think. For example, it&#x27;s easy to fall into the diamond problem if you don&#x27;t have instance canonicity. If you&#x27;re interested in how this problem can be solved in practice, check out this lovely paper about Modular Implicits in OCaml [1]. The paper is quite accessible if you have some FP background.<p>[1] <a href="https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1512.01895.pdf" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1512.01895.pdf</a>')