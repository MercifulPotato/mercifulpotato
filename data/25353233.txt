Item(by='nextos', descendants=None, kids=None, score=None, time=1607471112, title=None, item_type='comment', url=None, parent=25351943, text='Unless you already know this really well, I&#x27;d start even at a more fundamental level than what is suggested by LinkedIn. I&#x27;d try learning Unix and a little bit of C by using The Unix Programming Environment by Kerninghan &amp; Pike plus Kerninghan &amp; Ritchie. It&#x27;s quite timeless. Files, pipes, pointers, etc. That&#x27;s the plumbing of software engineering.<p>Then also learn the calculus of software engineering: Logic. A good short intro is Huth &amp; Ryan. The book covers some advanced topics in later chapters, but you don&#x27;t need that if you don&#x27;t want to. Logic is also timeless, and very practical. You can gain the ability to model check things, which is really really cool and used pretty often for e.g. distributed systems. This can unlock many cool positions for you.<p>Logic can also take you to logic and declarative programming. Something also worth investing into, and pretty addictive. For that, there&#x27;s nothing better than The Art of Prolog.')