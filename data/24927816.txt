Item(by='yjbanov', descendants=None, kids=None, score=None, time=1603952417, title=None, item_type='comment', url=None, parent=24925200, text='(disclaimer: I work on Flutter Web)<p>Vimium is an interesting use-case. I&#x27;ve never heard of this extension. We have in the past enabled accessibility DOM all the time, but due to performance concerns changed it to be opt-in. If you use the standard screen reader (e.g. VoiceOver on iOS&#x2F;macOS, TalkBack on Android, etc) you will get a way to enable accessibility DOM with ARIA tags, etc. Perhaps we should reconsider it (may need to optimize it a little though). I&#x27;d be curious whether Vimium works when accessibility is enabled.<p>Some features you list we either should support or already do: backswipe (good feature request), text selection (use the SelectableText widget), links (in the works), image URLs (good feature request). Not sure what navigating by landmarks is, but perhaps something we could support too.<p>Stylesheets are a non-goal. We do allow embedding plain HTML&#x2F;CSS (called &quot;platform view&quot;), where you can use CSS, but Flutter&#x27;s own widget system uses its own styling&#x2F;theming.<p>Reader mode makes sense for &quot;documents&quot; (think news sites, wiki, documentation, etc), but it&#x27;s unlikely to work out of the box in dynamic apps (think email, calendar, maps, graphics editor, etc) which is the kind of apps Flutter is going for. There&#x27;s a similar issue with Ctrl + F (Cmd + F) to find text on page, which is not helpful in dynamic apps. Dynamic apps are better off implementing their own app-specific &quot;reader mode&quot; and &quot;search bar&quot;, one that takes the nuances of the app into account. But never say never, maybe that&#x27;s doable too, perhaps using our accessibility tree, at least for static document use-cases.')