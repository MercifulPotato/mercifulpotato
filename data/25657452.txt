Item(by='twic', descendants=None, kids=[25657666], score=None, time=1609939172, title=None, item_type='comment', url=None, parent=25656583, text='What i like most about window functions is that they give me a way to do a sort of &#x27;extended group by&#x27; which i have always wanted.<p>If you want to know the highest salary in each department, that&#x27;s easy:<p><pre><code>  select department, max(gross_salary)\n  from salary\n  group by department\n</code></pre>\nIf you want to know who it is who earns that salary, you might try to do this:<p><pre><code>  select department, first_name, max(gross_salary)\n  from salary\n  group by department\n</code></pre>\nBut this doesn&#x27;t work, because it&#x27;s meaningless to ask for first_name in a situation where you&#x27;re grouping by department. You could ask for an aggregation of all names, but there&#x27;s no straightforward way to ask for the name of the person who earned that salary. You end up having to write a join against the group by, as in the article, which is pretty grim, and falls apart if you want to order by multiple columns to break ties.<p>Window functions let you re-frame this kind of group by like this:<p><pre><code>  select department, gross_salary\n  from (\n    select *, row_number() over (partition by department order by gross_salary desc) as n\n    from salary\n  ) _\n  where n = 1\n</code></pre>\nBecause the outer query is no longer a group by, you can select any columns you like. The natural query works fine:<p><pre><code>  select department, first_name, gross_salary\n  from (\n    select *, row_number() over (partition by department order by gross_salary desc) as n\n    from salary\n  ) _\n  where n = 1\n</code></pre>\nThis only works where the group by is based on an aggregate function that picks one value, like min or max. I somewhat think it was a mistake to model that kind of thing as an aggregation in the first place. If SQL had a way of picking one row from a group, rather than aggregating over it, that would be immensely useful.')