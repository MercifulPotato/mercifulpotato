Item(by='kentonv', descendants=None, kids=[25088537], score=None, time=1605304559, title=None, item_type='comment', url=None, parent=25087582, text='Workers KV is still better in many use cases. Durable Objects are the right choice when you need strong consistency. KV is the right choice when you want world-wide low latency access to the same data. Note that these two advantages are fundamentally opposed; it is physically impossible to simultaneously have strong consistency and worldwide low-latency access to a single piece of data. So, this will always be a trade-off.<p>Note that you could build KV on top of Durable Objects, by implementing your own caching and replication in application logic running in Durable Objects. On the other hand, you <i>can&#x27;t</i> implement Durable Objects on top of KV; once you&#x27;ve lost strong consistency, it&#x27;s hard (impossible?) to get it back. So in that sense, Durable Objects are &quot;strictly superior&quot;. But in a practical sense, you probably don&#x27;t really want to do the work to implement your own KV store on top of Durable Objects; it&#x27;s probably better to just use KV.')