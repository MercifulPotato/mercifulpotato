Item(by='choppaface', descendants=None, kids=[25934425], score=None, time=1611783493, title=None, item_type='comment', url=None, parent=25933121, text='I feel the major reason OO doesn&#x27;t fit well in Python is because Python was designed to harness &quot;duck typing,&quot; which enables polymorphism with less code.  Furthermore, attrs &#x2F; dataclass does away with a lot of the Object boilerplate that most developers would prefer not to write when moving quickly.<p>To top it all off, context of use matters.  For scripts without tests or limited extensibility, the value of OO is mostly in clarity to the reader, and here attrs &#x2F; dataclass can be very concise and effective.<p>That said, when the object jungle gets very large, Python gets a lot more tricky.  Look at matplotlib or try to write a billing system with a variety of account and transaction types.<p>Nevertheless it&#x27;s nice for a post like this to call out the existence of the bijection between OO and &#x27;non-OO&#x27; Python programming styles.  The issue is worthy of contemplation for any early Python programmer once one gets the feet wet.')