Item(by='StillBored', descendants=None, kids=None, score=None, time=1603078297, title=None, item_type='comment', url=None, parent=24814532, text='MFC was a mess, In the 90&#x27;s. I dabbled with MFC multiple times, mostly to support other peoples applications and it was overwhelmingly bad. For C++ I mostly just used the native win16&#x2F;32 APIs because it turned out to be less kludgy for small GUI&#x27;s associated with various services I was writting. OTOH, I did a _LOT_ of development with vb, and later delphi for the frontend of those services. Both of which were significantly better GUI development tools than visual studio at that point.<p>I&#x27;ve since moved on to other development areas, but have done a bit of both JS (on and off from about 2005-&gt;2015), and a bit of QT here and there too. The latter seems to have gotten better in the past few releases AFAIK. C# is at least ok too.<p>So in the case of MFC and early QT its not surprising that you prefer react+JS as neither of those were exactly the pinnacle of UI development in the late 1990&#x27;s early 2000s.<p>What you describe in a later posting about MFC was never really a problem with the VCL, pretty much no one dealt with repaint messages unless you were writing a custom component. I remember showing a number of MFC programmers BC++ builder (which is also still a thing) when they were singing the MFC tune. They tended to get really quite after that.<p>PS&#x2F;edit: Crazy, I just went and looked at the latest visual studio documentation and MFC is still an option, and at first glance seems basically the same as it was 25 years ago. Although the section on creating win32 applications is in front in the manual. I guess i&#x27;m not surprised that MFC is still a thing, but I am surprised that it doesn&#x27;t have a giant depreciation warning. I frankly can&#x27;t imagine creating a new MFC application in 2020.')