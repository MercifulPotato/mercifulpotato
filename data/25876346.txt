Item(by='bastawhiz', descendants=None, kids=None, score=None, time=1611349531, title=None, item_type='comment', url=None, parent=25876133, text='For most products, you didn&#x27;t need anything besides React in the first place. It&#x27;s really only useful when you have a single blob of state which is displayed&#x2F;sliced&#x2F;etc. in different ways across a large number of views. But for the most part, many apps are largely read-only (you can use `Context`s to push data down your render tree), where mutations happen close to where the data is loaded, meaning the benefits of redux are lost.<p>The big pain point of Redux (IMO) is that you do you data fetching separately from managing the data in your data store. It means that you need to add this glue layer between the data that comes back from your API and the redux storeâ€”you need to re-model everything. Every time you get new data, you need to go out of your way to remember to update everything that could be affected by that data.<p>GraphQL (I&#x27;m fond of Apollo) gets this more right. You can still use REST APIs with GQL (usually not by default, but it&#x27;s possible). What this means is that you model your data in the way that the API expresses it. Your back-end folks aren&#x27;t going to be lost when they read your code, because it matches the shape of the data they&#x27;re already familiar with. The client-side cache means you don&#x27;t need to manually fiddle with your store to invalidate stale data (I&#x27;ve yet to need to manually reach into the cache to perform updates).<p>That&#x27;s not to say GQL is without its own issues. It is yet-another-thing, but it&#x27;s one example of a solution which doesn&#x27;t get quite as hairy when you&#x27;ve got 200+ pages in your app.')