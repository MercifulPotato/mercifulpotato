Item(by='DanielBMarkham', descendants=None, kids=[24976129], score=None, time=1604365299, title=None, item_type='comment', url=None, parent=24963742, text='Overstated. Makes the usual &quot;I hate blah blah&quot; essay mistake of confusing the way something is understood and implemented in the general dev community with what it actually <i>is</i>.<p>Most of the time, things start off for good reason and represent good practices. We just butcher the hell out of them when we start selling them to one another. (Same thing happens in reverse; once enough people destroy any goodness left in a buzzword, people oversell how bad the idea is when they start pitching their plan to get rid of it)<p>To be clear, I don&#x27;t disagree with the premise that lots of microservices implementations are a clusterfuck of monumental proportions. It&#x27;s just ranting and raving about devs and dev shops screw up stuff isn&#x27;t exactly news to anybody. That&#x27;s the natural state of affairs no matter what your flavor-of-the-week.<p>We get close to something useful near the end, &quot;...focus on the right criteria for splitting a service instead of on its size, and apply those criteria more thoughtfully...&quot;<p>The rest of this looks like a rehash of generally-accepted architectural principles, most of which were misapplied and resulted in us getting here in the first place. I&#x27;m not going to line-by-line critique this. There are far too many points to counter and I can&#x27;t imagine the discussion keeping any sort of reasonable cohesion (hardy har har) if it spreads out that wide. Oddly enough, I find this discussion of why monoliths might be a preferable default state too monolithic to split up into reasonable chunks to analyze. Much irony there.<p>We got to microservices (or I might rather say we _returned_ to microservices) by following good code organization principles. Instead of starting with the resulting implementation (such as the DAGs and various models in this essay) and trying to argue first principles, it&#x27;s better to start with first principles and then come up with criteria for evaluating various results.<p>I feel I would be neglectful if I didn&#x27;t add this: if your code is right, whether you&#x27;re deploying as a microservice or a monolith shouldn&#x27;t matter. That&#x27;s a deployment decision. If it&#x27;s not an easy deployment decision, if you can&#x27;t change by flipping a bit somewhere, then either your first principles are off somewhere or you made a mistake in implementing them. The way you code should all be about solving a real problem for your users. How you chunk your code and where those chunks go are hardly ever one of those problems.')