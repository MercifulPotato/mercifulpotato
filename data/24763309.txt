Item(by='jlokier', descendants=None, kids=[24764010], score=None, time=1602575989, title=None, item_type='comment', url=None, parent=24760035, text='&gt; It&#x27;s been 20 years since I had to think closely about reversible computing, and I&#x27;ve forgotten lots of the details. When I said &quot;implement a hash function&quot;, I actually meant &quot;implement exclusive-or with the result of the hash function&quot; or something similar.<p>Well that gets a bit more interesting.  If the hash is of a key K, and the hash output is exclusive-or&#x27;d with input M, then of course it&#x27;s reversible with respect to M but not K.<p>You can think of the above as an easily reversible program with M as its only input.  (If K is treated as a constant, then it&#x27;s just part of the program.).<p>In that case, yes you can make an efficiently reversible version in Nilang.jl, and it will have all the differentiability properties etc.<p>But it will only have those properties under the assumption of holding K constant.  The new program won&#x27;t resemble the stated problem of inverting a cryptographic hash :-)<p>In general there will be some parts of a program which are reversible without needing to record any state, and other parts where you have to retain some state (or generally a function of the state, which might be less overhead) in order to make the whole thing reversible.<p>Quantum computers face this problem too.  Every quantum program is fully reversible, but you can&#x27;t copy qubits, so you can&#x27;t translate a classical non-reversible program to quantum by retaining copies of state as described above.  You have to do stranger things to translate the program.<p>The fact you can actually do that shows that recording internal states isn&#x27;t the only way to make a program reversible.  But the fact it takes exponential time to simulate the resulting program on a classical computer shows that the alternative doesn&#x27;t let you invert a cryptographic hash that easily either :-)<p>&gt; But aren&#x27;t there one-to-one equivalents, called one-way functions, ...<p>In general one-way functions map multiple inputs to the same output, so they aren&#x27;t reversible.<p>You&#x27;re thinking of a rarer kind called <i>one-way permutations</i>.<p>There aren&#x27;t many of these around, and they aren&#x27;t what is generally intended when talking about a cryptographic hash.  It would be convenient if hashes were permutations, but they generally aren&#x27;t.')