Item(by='lmm', descendants=None, kids=None, score=None, time=1605249276, title=None, item_type='comment', url=None, parent=25072630, text='&gt; The biggest need for a package manager and its ecosystem is continuity: the stance that new features and paradigms will be gradually shifted toward â€” without package-ecosystem incompatibilities, without CLI commands just disappearing (but instead, with long deprecation timelines), etc.<p>I disagree. I used to think that that&#x27;s the problem, but having seen a few more cycles of it, the problem isn&#x27;t that kind of commitment - after all, the whole python ecosystem enthusiastically jumps into the new thing, and Python people are used to relatively short deprecation cycles. The problems are the actual problems; every Python package manager is just embarrassingly awfully bad as soon as you try to use it for 5 minutes, presumably because they&#x27;re developed by Python people who&#x27;ve never used a decent package manager and so think that no-one could ever need deterministic dependency resolution, once you&#x27;ve pinned a transitive dependency there surely wouldn&#x27;t be any reason to ever want to unpin it, having the package manager coupled to the language version is absolutely fine, no-one could ever want a standard way to run tests ...')