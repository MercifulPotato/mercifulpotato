Item(by='mamcx', descendants=None, kids=[24993358], score=None, time=1604523283, title=None, item_type='comment', url=None, parent=24991848, text='&gt; I&#x27;m implementing a language that&#x27;s basically F#&#x2F;OCaml. So it makes sense that it&#x27;s easier to implement in F#&#x2F;OCaml.<p>This is the key point. When your target and host language match in semantics is easier to be done in the host. You se how much gymnastics is necessary to implement near all langs on C.<p>---<p>I done a lot of F# before move to Rust, and frankly, F# is great and Rust take a time to &quot;click&quot;. I&#x27;m doing a lang on it (<a href="https:&#x2F;&#x2F;tablam.org" rel="nofollow">https:&#x2F;&#x2F;tablam.org</a>) and the truth is that Rust make things harder.<p>Some of the points of the author are not that &quot;bad&quot; and with some time it will see that are non the real issues, but the fact is that anyone, specially (IMHO) if have done a lot of other langs (not named C or pascal) will have a miserable time the first try.<p>Eventually, you Jump the wall of complexity and a lot of stuff click.. but then hit the REAL showstoppers (that are different depending according to what you do), and lets by real: Are truly hard. (maybe: But doing a lang, you hit this stuff more easily than &quot;regular&quot; coding. Doing a erp backend Rust is super productive to me)<p>---<p>2 things that make harder this stuff: Rc&#x2F;Arc make complicated how mutate things. You need to wrap again with RefCell. I wish exist a super-charged RcRefCell that is &quot;blessed&quot; by the rust team as is with Rc, so the correct idioms to deal with this become widespread.<p>Also, the trait system and the restrictions of object safety somehow make harder to mimic a OO system, that in part could make a lot easier to deal with lang implementation.<p>Plus, I wish I can take alias everywhere, so i can cut the noise in syntax...')