Item(by='lilyball', descendants=None, kids=None, score=None, time=1609980775, title=None, item_type='comment', url=None, parent=25661308, text='I was actually misremembering a bit.<p>Sufficiently old versions of mach_absolute_time used a function called clock_get_time() on i386 (if the COMM_PAGE_VERSION was not 1). This changed in macOS 10.5 to a tiny bit of assembly that just read from _COMM_PAGE_NANOTIME on i386&#x2F;x86_64&#x2F;ppc (the arm implementation(!!) triggers a software interrupt). The i386&#x2F;x86_64&#x2F;ppc definitions were also copied into xnu.<p>For the next few years it kind of bounced back and forth between libc and xnu, and the routine was complicated by adding timebase conversion as needed. And at some point arm support was added back (it vanished when it first went to xnu), but this time using the commpage if possible.<p>As for M1, I assume it&#x27;s using the arm64 routine in xnu, which can be found at <a href="https:&#x2F;&#x2F;opensource.apple.com&#x2F;source&#x2F;xnu&#x2F;xnu-7195.50.7.100.1&#x2F;libsyscall&#x2F;wrappers&#x2F;mach_absolute_time.s" rel="nofollow">https:&#x2F;&#x2F;opensource.apple.com&#x2F;source&#x2F;xnu&#x2F;xnu-7195.50.7.100.1&#x2F;...</a>.<p>As for clock_gettime_nsec_np(), at least as of Big Sur, it&#x27;s in libc¹ instead of xnu and defers to mach_continuous_time()&#x2F;mach_continuous_approximate_time()&#x2F;mach_absolute_time()&#x2F;mach_approximate_time() for the CLOCK_<i>_RAW[_</i>] clocks. And clock_gettime() for those clocks is implemented in terms of clock_gettime_nsec_np().<p>¹<a href="https:&#x2F;&#x2F;opensource.apple.com&#x2F;source&#x2F;Libc&#x2F;Libc-1439.40.11&#x2F;gen&#x2F;clock_gettime.c.auto.html" rel="nofollow">https:&#x2F;&#x2F;opensource.apple.com&#x2F;source&#x2F;Libc&#x2F;Libc-1439.40.11&#x2F;gen...</a>')