Item(by='mbil', descendants=None, kids=[25381057, 25392657, 25381866], score=None, time=1607644516, title=None, item_type='comment', url=None, parent=25379891, text='Compared to other languages, I&#x27;ve found Clojure makes it much easier to iteratively turn an idea into code.<p>Say you&#x27;re writing a pure function...<p>You start with just data and a sense of how the output might look. Let&#x27;s say I have APIs providing me with a user record and a list of transactions, and I want to get that person&#x27;s balance...<p>Maybe you start with some canned data<p><pre><code>        (let [person {:name            &quot;Matt&quot;\n                      :id              12345\n                      :current_balance 100.10}\n              txns   [{:person_id 12345 :amt 10}\n                      {:person_id 44444 :amt 0.5}\n                      {:person_id 55555 :amt 10}\n                      {:person_id 12345 :amt 11}\n                      {:person_id 12345 :amt -5}\n                      {:person_id 66666 :amt 3}]]\n          (-&gt;&gt; txns\n              count)\n          )\n        =&gt; 6\n</code></pre>\nand maybe you want to filter the transactions to just that user<p><pre><code>        (let [person {:name            &quot;Matt&quot;\n                      :id              12345\n                      :current_balance 100.10}\n              txns   [{:person_id 12345 :amt 10}\n                      {:person_id 44444 :amt 0.5}\n                      {:person_id 55555 :amt 10}\n                      {:person_id 12345 :amt 11}\n                      {:person_id 12345 :amt -5}\n                      {:person_id 66666 :amt 3}]]\n\n          (-&gt;&gt; txns\n              (filter #(= (:id person)\n                          (:person_id %)))\n              count)\n          )\n        =&gt; 3\n</code></pre>\nthen you want to extract the amount for each of those<p><pre><code>        (let [person {:name            &quot;Matt&quot;\n                      :id              12345\n                      :current_balance 100.10}\n              txns   [{:person_id 12345 :amt 10}\n                      {:person_id 44444 :amt 0.5}\n                      {:person_id 55555 :amt 10}\n                      {:person_id 12345 :amt 11}\n                      {:person_id 12345 :amt -5}\n                      {:person_id 66666 :amt 3}]]\n\n          (-&gt;&gt; txns\n              (filter #(= (:id person)\n                          (:person_id %)))\n              (map :amt))\n          )\n        =&gt; (10 11 -5)\n</code></pre>\nand sum those amounts<p><pre><code>        (let [person {:name            &quot;Matt&quot;\n                      :id              12345\n                      :current_balance 100.10}\n              txns   [{:person_id 12345 :amt 10}\n                      {:person_id 44444 :amt 0.5}\n                      {:person_id 55555 :amt 10}\n                      {:person_id 12345 :amt 11}\n                      {:person_id 12345 :amt -5}\n                      {:person_id 66666 :amt 3}]]\n          (-&gt;&gt; txns\n              (filter #(= (:id person)\n                          (:person_id %)))\n              (map :amt)\n              (apply +))\n          )\n        =&gt; 16\n</code></pre>\nand add that to the existing balance<p><pre><code>        (let [person     {:name            &quot;Matt&quot;\n                          :id              12345\n                          :current_balance 100.10}\n              txns       [{:person_id 12345 :amt 10}\n                          {:person_id 44444 :amt 0.5}\n                          {:person_id 55555 :amt 10}\n                          {:person_id 12345 :amt 11}\n                          {:person_id 12345 :amt -5}\n                          {:person_id 66666 :amt 3}]\n              bal-change (-&gt;&gt; txns\n                              (filter #(= (:id person)\n                                          (:person_id %)))\n                              (map :amt)\n                              (apply +))]\n          (+ bal-change (:current_balance person))\n          )\n        =&gt; 116.1\n</code></pre>\nthe function is done!<p><pre><code>        (defn update-person-balance [{:keys [id current_balance]} txns]\n          (let [bal-change (-&gt;&gt; txns\n                                (filter #(= id\n                                            (:person_id %)))\n                                (map :amt)\n                                (apply +))]\n            (+ bal-change current_balance)))\n</code></pre>\nI posted here as a series of snippets, but this would have been a single block of code, refined and evaluated and refined and evaluated, over and over, in a REPL-integrated editor. It feels like sketching a portrait or sculpting clay.<p>&quot;But I can do that in any ol&#x27; REPL!&quot; you might say. Try Clojure -- really try it, with an nREPL connected to your running application and to your editor, capturing inputs, playing them back, writing evaluation output as comments -- and then tell me you want to go back to your old REPL. A notebook environment is similar, though clumsier IMO.<p>Come for the REPL-driven-development, stay for the immutability, the Java library ecosystem, the lisp syntax, the concurrency support, etc. I know going on and on about how great Clojure development is is basically a meme at this point, but that&#x27;s because it&#x27;s really great!')