Item(by='skissane', descendants=None, kids=None, score=None, time=1606477892, title=None, item_type='comment', url=None, parent=25225740, text='&gt; I worry that detailed knowledge that results from everyday use of an OS for things like VMS, mainframe OSes, OS&#x2F;2, Beos, NeXT, Plan9, etc will begin to die off, and UNIX monoculture will consign all other OS ideas to the scrap heap of history.<p>One idea I suggest people look at is CMS Pipelines (aka Hartmann pipelines). John Hartmann of IBM ported the concept of pipelines from Unix to VM&#x2F;CMS, but in the process made a couple of major changes: (1) made the pipes record-oriented (they aren&#x27;t just an unstructured stream of bytes, they have message&#x2F;record boundaries); (2) made it arguably easier (compared to Unix shells) to build complex pipeline structures with multiple inputs and multiple outputs.<p>&gt; More simply, I&#x27;d like a JSON output option for every unix command. The fact you STILL can&#x27;t parse ls -la is a crime.<p>I think Unix pipes could be enhanced to have an out-of-band channel for transferring metadata, content negotiation, etc.<p>If I do command1 | command2, command1 should be able to send an out-of-band message &quot;here is the MIME type of my output&quot;. If command2 knows how to receive these messages (an ioctl? ancillary data&#x2F;cmsg on recvmsg?) then it can respond appropriately; if it doesn&#x27;t know, well that&#x27;s the same situation as at present.<p>A more advanced idea would be that command1 would send a message saying &quot;I can provide output in these formats&quot;. If command2 is enhanced to support this, it can send back a message to command1 over the control channel saying e.g. &quot;send me application&#x2F;json please&quot;. There would have to be some way for the OS kernel to notify command1 if command2 doesn&#x27;t understand. (e.g. if command2 doesn&#x27;t call IOCTL_RECEIVE_PIPE_METADATA on the input fd before the first time it reads from it, the OS kernel synthesises an &quot;I don&#x27;t understand pipe metadata&quot; control message back to command1)')