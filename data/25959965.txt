Item(by='Nullabillity', descendants=None, kids=None, score=None, time=1611941793, title=None, item_type='comment', url=None, parent=25959554, text='In safe Rust, all mutation must be either:<p>- Statically verified to be unique (&amp;mut)<p>- Dynamically verified to be unique (RefCell)<p>- Behind a lock (Mutex, RwLock)<p>- Explicitly opt into weaker (but still consistent) guarantees (atomics)<p>- Some other abstraction built on those primitives (like channels)<p>Unsafe does exist, but it&#x27;s something that the code must explicitly opt into, and they rules that must be followed are generally &quot;the same&quot; across the whole Rust ecosystem (rather than just accidentally stumbling into something that is OK in &quot;normal&quot; Scala but breaks some weird Akka rule).<p>In any case, the language enforces that you are self-consistent: if you use locks as your escape hatch for something then the code won&#x27;t compile if you try to access it without an active lock.')