Item(by='Blikkentrekker', descendants=None, kids=[25987451, 25975045], score=None, time=1612057449, title=None, item_type='comment', url=None, parent=25974836, text='&gt; <i>Your responses make it seem like you have never used a sandboxed app on the Mac, as every single thing you have mentioned has significantly better solutions than you are suggesting as an alternative. Even if you haven&#x27;t, the things that it doesn&#x27;t aren&#x27;t a stretch to come up with and I might as well just list them here:</i><p>There&#x27;s a reason that only a small minority of software can even run in such sandboxes without failing to work as intended or indeed pestering the user with dialogs for permission every second, and of many that can run in them, it&#x27;s a security theatre that doesn&#x27;t help if the software truly were malicious.<p>Are you running your text editor, terminal, <i>IRC</i> bouncer, or audio server in such a sandbox?<p>&gt; <i>This makes zero sense. If an app wants access to keylogging APIs, then it better be an app where it makes sense to be able to keylog other apps. 99% of apps have no reason to do this and have no need for full access.</i><p>There are, as said, far more things they need access to that can escalate to full privileges quickly:<p>- access to write arbitrary files owned by the user<p>- access to read from arbitrary ports that the user owns<p>- access to ptrace arbitrary processes the user runs<p>- access to edit the `PATH` of the user<p>&gt; <i>No, the alternative is that you give the application access to a file and now it owns that file.</i><p>Do you frequently use your text editor to edit one file, and one file only?<p>Give it access once to edit a script you wrote, now it owns the file; say it be malicious, it now changes the script so that next time it is executed, it allows for arbitrary code to run.<p>Not to mention having used it once to edit the initialization or environment variable files and user profiles.<p>&gt; <i>You can deny the browser the ability to read or write to the directory in general, but it may create new files and have permission to those.</i><p>In which case, it can exploit a race condition to replace a file that was created by something else immediately after the other software unlinks it to recreate it under the same name to trick the user.<p>It can also then create a symbolic link to trick other applications and gain write permissions of files it shouldn&#x27;t have since almost no software is secured against such symbolic link attacks.<p>&gt; <i>Overall, it is eminently possible to make useful software, perhaps even most useful software, that operates under a reasonable sandbox.</i><p>It is, so long one be willing to forgo having basic control of one&#x27;s system.<p><i>Android</i> does it, as said, but in <i>Android</i>, the user does not enjoy such control, by design.')