Item(by='wsc981', descendants=None, kids=None, score=None, time=1611759544, title=None, item_type='comment', url=None, parent=25927765, text='<i>&gt; What are the trade offs&#x2F;Adventages to use cross platform tools for app development in 2021?</i><p>I use Xamarin for some projects and it&#x27;s serviceable. Xamarin Forms is a decent toolkit for cross platform internal business apps. Personally I enjoy native iOS dev quite a bit more than cross-platform Xamarin dev, but depending on your use-case, Xamarin might be a better idea than writing separate native iOS and Android apps. Again, I believe for internal business apps that needs to be multi-platform and don&#x27;t have to look very beautiful, in those cases Xamarin is an excellent choice.<p>So with that out of the way I want to compare each of your points with the Xamarin situation, from my point of view.<p><i>&gt; 1) Swift is very pleasant to use and it is fast.</i><p>C# is very pleasant to use as well. It&#x27;s quite modern and feature wise is pretty close with Swift. On iOS it&#x27;s probably a little bit slower, but still good enough for most use-cases. I prefer Swift over C#, but C# is almost as nice to use in my opinion.<p><i>&gt;2) The UI libraries that I need to learn: UIKit and SwiftUI. SwiftUI is also very pleasant to use and it is getting there.</i><p>UIKit and SwiftUI are available for Xamarin, however when developing with Xamarin Forms you will likely try to avoid using these libraries, since Xamarin Forms is meant to cover both iOS and Android UIs.<p><i>&gt;3) No hoops to jump for integrating API that makes an App do things that WebApp cannot do.</i><p>Again, pretty much all native APIs are available from C# in Xamarin.<p><i>&gt;4) Work environment setup is very easy, no scripts to run no tooling that breaks down. It&#x27;s as simple as creating an new Word document and start doing actual work, not janitorial tasks.</i><p>Generally the same for Xamarin, though I guess there&#x27;s some extra layer of tooling (from what I understand Xamarin translates the C# code to native code, probably Objective-C, maybe Swift).<p><i>&gt;5) Despite its bugs, Xcode is a good IDE that natively understand all the tooling I use. Autocomplete might break down sometimes but it can handle project creation, asset management, project configurations and the distribution.</i><p>Xcode is leagues above Xamarin Studio. My main issue with Xamarin Studio is that the app just becomes dog-slow after some time. Interaction between Xamarin Studio and iOS Simulator is sometimes also a bit finicky.<p><i>&gt;6) The only vendor that I rely on is Apple, as soon as they make something interesting it is available to me. The latest API is there right away.</i><p>In Xamarin usually new APIs are available pretty much as soon as Apple releases a new SDK. From what I understand Xamarin uses some automated tooling to generate the C# SDK based on Apple&#x27;s header. Same stuff you can use to wrap third party libraries in a C# project (Objective Sharpie [0]). Objective Sharpie isn&#x27;t trivial to use, but quite powerful.<p><i>&gt;7) The apps look in place by default, you actually have to work to make UI unconventional and weird.</i><p>Xamarin uses the native UI components, regardless if you use Xamarin iOS, Xamarin Android or Xamarin Forms. However, Xamarin Forms is meant to encompass both iOS and Android and therefore is a bit less flexible.<p>---<p>[0]: <a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;xamarin&#x2F;cross-platform&#x2F;macios&#x2F;binding&#x2F;objective-sharpie&#x2F;" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;xamarin&#x2F;cross-platform&#x2F;maci...</a>')