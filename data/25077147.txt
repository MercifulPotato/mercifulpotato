Item(by='PeterisP', descendants=None, kids=[25081131], score=None, time=1605226581, title=None, item_type='comment', url=None, parent=25074398, text='One aspect of the problem is that whenever I need to build a particular system, the parts of that future system that are well understood system, with well understood tooling take almost no work - those either are available as part of a well-known framework or can be trivially included from a well-known library.<p>All the work that remains, all the work that consumes most of the time of programmers is the work where either that parts of the system is not yet well understood, or where well understood tooling is not available.<p>I&#x27;m not seeing the &quot;factory&quot; or &quot;bricklaying&quot; work anywhere, it has been automated or converted to reusable components or frameworks. Whenever I see people spending a lot of time on systems that <i>could</i> be &quot;factory&quot; work, the situation is that it could be &quot;factory&quot; work if and only if the system requirements and details were properly understood, and these people were mostly working and re-working on understanding and misunderstanding what&#x27;s actually needed - and there&#x27;s no way around that. Once they&#x27;ve understood it, any &quot;factory&quot; work part is quick and trivial to the point of being irrelevant in metrics.<p>So my point is everything that we need from software engineering practices is tools and practices to manage the part that <i>isn&#x27;t</i> &quot;factory&quot; work, the process of understanding the details of the systems that we haven&#x27;t built yet.')