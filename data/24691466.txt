Item(by='louthy', descendants=None, kids=None, score=None, time=1601928534, title=None, item_type='comment', url=None, parent=24689440, text='&gt; Assume f: X -&gt; Y. We can now map x_1 to y_1 f(x_1)=y_1. And then change this same function by mapping x_1 to y_2: f(x_1)=y_2<p>They would be different functions, the first being the identity function: x =&gt; x, the second being: x =&gt; x + 1<p>&gt; Thus we can easily modify functions. Moreover, we do it constantly when we modify object fields in OOP<p>This isn&#x27;t the case.  A field with a different value in it just means the object is a different value.  If the object is passed to a static function, then the domain is the full set of possible values that the object can hold (this is known as a product-type, you multiply the total possible values of each of its component parts to find out the size of the domain).<p>If it&#x27;s passed to a method then there&#x27;s an additional implicit argument: `this`, which is the same as a static function with an additional argument that takes the object.  The function is the same.<p>Global (or even free variables) should also be considered part of the domain: i.e. it&#x27;s akin to implicit arguments that are being passed to the function.<p>&gt; No. Domains, codomains and any set can well be modified by adding or removing tuples.<p>This also isn&#x27;t the case.  If a function is defined that takes an integer and returns a boolean value: Int â†’ Bool then the domain is the set of integers, the co-domain is True and False.  You can&#x27;t pass a tuple to a function that takes an Int and therefore dynamically increase the size of the domain.  Even in dynamic languages the codomain is effectively `top`, the type that holds all values, and therefore the domain is all values and the codomain is all values, which makes them immutable still.<p>Now maybe I am misunderstanding you, but this is how all of the mainstream statically and dynamically typed languages work.  Perhaps there&#x27;s some edge-case language that I&#x27;m missing here that allows types to be extended, which would be interesting in its own right.')