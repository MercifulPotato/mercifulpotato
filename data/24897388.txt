Item(by='apta', descendants=None, kids=[24898493], score=None, time=1603726992, title=None, item_type='comment', url=None, parent=24897022, text='&gt; You seem to be writing that a simple language is somehow harder to scale for large teams<p>I&#x27;ve worked on a large Scala program before, and because the team generally agreed not to let things get too crazy, it was very manageable. However, I&#x27;ve seen other programs in complex languages get out of hand.<p>There is a sweet spot in terms of language simplicity&#x2F;complexity and usability. Make it too simplistic (like golang) and the low modeling ability and inexpressiveness of the language will result in shifting the complexity into the code and onto the programmer, there&#x27;s no running away from it, it&#x27;s just reality. IMO, languages like Java, C#, and Kotlin do a much better job at balancing features with modeling power and expressiveness, without sacrificing simplicity.<p>&gt; Verbose (and consistent) is exactly what you want for large teams. What&#x27;s error prone about it?<p>I&#x27;ve seen many instances where errors are ignored by mistake, e.g.:<p><pre><code>    a, err := foo()\n    if err != nil { ... }\n\n    b, err := bar()\n    &#x2F;&#x2F; oops, error not handled and compiler doesn&#x27;t complain\n    \n    c, err := baz()\n    if err != nil { ... }\n</code></pre>\nnot to mention things like<p><pre><code>   defer file.Close() &#x2F;&#x2F; Error not handled\n</code></pre>\nand more insidious occurrences (e.g. when was the last time you handled the error for fmt.Println()?)<p>Consistent is good, verbose just for the sake of being verbose isn&#x27;t. And honestly golang is not that consistent (e.g. the entire nil interface is not nil issue is just bizzare)<p>&gt; Do you have an example project that has problematic build times in Go?<p>At my employer, we use a monorepo and build with bazel. Builds routinely take several minutes, and even more on &quot;less powerful&quot; machines (e.g. 4 cores). Linking time is abysmal, and we routinely end up with 50+MB binaries. It&#x27;s closed source so I can&#x27;t share them.')