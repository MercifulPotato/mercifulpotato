Item(by='specialist', descendants=None, kids=None, score=None, time=1603825192, title=None, item_type='comment', url=None, parent=24908272, text='<i>&quot;The end result is always back to code.&quot;</i><p>Yes, and: you understate the downside.<p>While No Code (nee Visual Programming, CASE Tools, whatever) may handle 90% of the use cases, the remaining 10% become dramatically harder. Because now you&#x27;re fighting the framework. Which is an angry 800lb gorilla sitting between you and your work.<p>Faced with the same challenge, I went in the opposite direction.<p>Typical strategy of BizTalk, Talend, SeeBeyond, many many others is some kind of patch cord flow chart style programming, with Access VBA style event hooks for script extensions.<p>I created a stupid simple framework and API optimized for our domain (medical records). Think serverless computing and awesome DOMs for HL7 and adjacent data formats.<p>Onboarding for our SeeBeyond-based projects was 3 to 6 months. Using my stack was 1 to 2 weeks. (One of the weeks was teaching healthcare domain experts some Java, Eclipse IDE, and version control.)<p>Further, in my experience, none of these No Code solutions have useful exception handling, logging, fault&#x2F;error recovery, and other misc devops type stuff. So are an absolute nightmare to support in production.')