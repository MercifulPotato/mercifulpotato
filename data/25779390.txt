Item(by='darksaints', descendants=None, kids=None, score=None, time=1610646019, title=None, item_type='comment', url=None, parent=25778595, text='&gt; As application engineers build increasingly &quot;stateless&quot; code (e.g. pure functions, serverless deployments, etc), that state gets pushed elsewhere.<p>Exactly. You can&#x27;t magically make a stateful problem stateless, you can merely move that state around. Sometimes moving state around means moving it somewhere that is appropriate and capable of expertly handling that data. But if you make those choices wrong, it makes every aspect of your application more complex.<p>UI programming tried going down this idea of stateless programming, and for a while it was trendy to do so stuff like redux. The problem is that UIs are state machines. That&#x27;s not an analogy, that is a literal statement. And it is true of all UI&#x27;s...it&#x27;s just as true of the transmission lever in your car as it is for your saas dashboard. You can&#x27;t program stateless UIs...they would cease to be a UI. So at best, you can move that state around. And with most of these solutions (eg. redux), you end up pushing that state into a massive global singleton, where even simple things like the state of a single radio button needs to be fed through dozens of tightly coupled components in order to &quot;statelessly&quot; render. And even worse, you lose the extremely helpful distinction between UI state and domain state, mixing them both together into a gigantic shit stew.')