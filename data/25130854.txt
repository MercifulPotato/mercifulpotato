Item(by='loup-vaillant', descendants=None, kids=[25131662, 25132880], score=None, time=1605652601, title=None, item_type='comment', url=None, parent=25125900, text='You probably don&#x27;t realise it, but you&#x27;re cheating.<p>Operating systems are currently written in C, and therefore have a C interface. Which language is best at interfacing with C? (No trick here, just a rhetorical question.) C of course. Other languages would need some sort of FFI, which is generally unwieldy enough that the designers hid it behind a comprehensive standard library.<p>C doesn&#x27;t need an huge library to be available, you say? Oh but it does. It&#x27;s called the <i>kernel</i>. Comes with a freaking huge runtime too.<p>&gt; <i>Imagine if you need to write a new OS, a compiler, a linker, or a shell interpreter... you get the idea.</i><p>I think I do, but I&#x27;m afraid you don&#x27;t. Writing an OS (and the rest) in Pascal (I&#x27;m thinking of Oberon specifically) is no harder than to write it in C. If you write your whole OS in Blub, interfacing with Blub will be easiest in Blub, you won&#x27;t need an extensive Blub standard library because you already have the kernel, all the tools (debuggers, editors…) will be Blub friendly…<p>Lisp machines used to be a thing, you know.<p>&gt; <i>My conclusion is that language designers still didn&#x27;t get what made C so successful […]</i><p>Language designers can&#x27;t even <i>address</i> what makes C so successful: network effects.')