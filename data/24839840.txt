Item(by='stchacademy', descendants=None, kids=None, score=None, time=1603213660, title=None, item_type='comment', url=None, parent=24839715, text='Basically, the idea behind &quot;?&quot; is &quot;functions that return a boolean&quot;. But done in a consistent way. So, practically EVERY function that returns a boolean is - by convention - terminated with a &quot;?&quot;.<p>Now, why the two &quot;if&quot;s:<p>Obviously, as you yourself mentioned, &#x27;if? returns a boolean (the result of the condition) and &#x27;if doesn&#x27;t.<p>So that&#x27;s one use.<p>The next use - which I will obviously have to make crystal clear in the Language Reference - is that if? (with the ?) is a <i>must</i> if you want to pair with an &quot;else&quot;.<p>Think of it this way. If?-else may appear as a language construct, but in fact they are two separate commands. The if? is an if - that pushes the result of the condition of the stack. And &quot;else&quot; is actually a reversed-if: it checks what is at the top of the stack (see: returned by the if? above) and if that is false - that is: the above if-condition was not true - it executes its block.<p>So, in that case, you <i>have</i> to use an &quot;if?&quot; (and not a simple &quot;if&quot;)<p>The same thing happens with a case&#x2F;when? construct (only, in that case, the condition blocks are actually concatenated),e .g.<p>case [x]\n    when? [&lt;3] [print &quot;it was less than 3&quot;]\n    when? [=3] [print &quot;it was equal to 3&quot;]\n    else [ print &quot;it was greater than 3&quot;]<p>:)<p>:)')