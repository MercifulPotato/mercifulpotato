Item(by='gpderetta', descendants=None, kids=[24779343, 24778070], score=None, time=1602670981, title=None, item_type='comment', url=None, parent=24772337, text='so, what I have in mind is this. Let&#x27;s assume in both cases the allocator is static. In the list case you have:<p><pre><code>    struct node { node* next; };\n    static node * root;\n\n    void * alloc() {\n         node * result = root; &#x2F;&#x2F; 1 load\n         if (result) { &#x2F;&#x2F; fast path\n           root = result-&gt;next; &#x2F;&#x2F; 1 load + 1 store\n           return result;\n         } else {\n           &#x2F;&#x2F;slow path\n         }\n    }\n</code></pre>\nThere is a single load in the critical path (loading the content of result); the additional load of result next and the store are not in the critical path as the result does not depend on them. Also loading the content of result-&gt;next will touch a cacheline that will be accessed very soon by the caller of alloc anyway.<p>In the queue case you have:<p><pre><code>    struct queue  { void ** data; int size; }\n    static queue q;\n    void * alloc() {\n         int sz = q.size -1; &#x2F;&#x2F; 1 ld [a] + 1 sub \n         if (sz &gt;= 0) { &#x2F;&#x2F; fast path\n              size = sz; &#x2F;&#x2F; 1 store\n              void ** data = q.data; &#x2F;&#x2F; 1 ld [b]\n              return data[sz]; &#x2F;&#x2F; 1 ld [c]\n         } else { &#x2F;* slow path *&#x2F; }\n    }\n</code></pre>\nIn this case the chain b-&gt;c is in the critical path (a can be in parallel with b, and the sub has minimal latency); the store is not in the critical path. So as you can see there is an additional dereference. Also it will touch the additional cacheline pointed by data+sz.<p>If you are doing many allocations in a very tight loop, then the store in the linked list example suddenly becomes part of the critical path and can become a problem, while the compiler can extract some parallelism from the size computation in the queue example. If that scenario is important for you then the queue can be preferable.')