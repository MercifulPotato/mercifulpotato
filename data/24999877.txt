Item(by='dan00', descendants=None, kids=None, score=None, time=1604596124, title=None, item_type='comment', url=None, parent=24996062, text='&gt; I’d be interested to see experimentation with ownership semantics in languages with higher-level memory models (which broadly means GC languages).<p>Haskell might give a few hints how well this works. [1]<p>&gt; Here’s the thing, though: it’s not just about finding a way to cope with the constraints it imposes; it’s also about thriving within the constraints it imposes, because it stops you from doing problematic things and guides you in the path of better designs much of the time (though non-linearity can definitely be a problem; it’s not all buttercups and daisies).<p>Oh yes, and how nice it is to have these constraints verified by the compiler. Perhaps it&#x27;s this kind of assumption, that less constraints give you more power, without realizing that also the responsibility increases, and at a certain point the complexity overburdens the human mind.<p>Different software domains need different constraints, so the question\nmight be where the sweet spot between languages with different constraints\nand a language with programmable constraints (aka dependent types) lies.<p>[1] <a href="https:&#x2F;&#x2F;www.tweag.io&#x2F;blog&#x2F;2020-06-19-linear-types-merged&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.tweag.io&#x2F;blog&#x2F;2020-06-19-linear-types-merged&#x2F;</a>')