Item(by='kmeisthax', descendants=None, kids=None, score=None, time=1602995979, title=None, item_type='comment', url=None, parent=24814676, text='Ironically this instruction only exists because JavaScript accidentally inherited an Intel quirk in it&#x27;s double-to-int conversion. This instruction should be &quot;Floating Point Intel Convert&quot; not &quot;Floating Point Javascript Convert&quot;, but w&#x2F;e, trademark laws and all that.<p>In practice the instruction made code a few percent faster, primarily because it allowed dropping a few branches at the end of every JavaScript int conversion on ARM. IMO, ARM has always been at the &quot;edge&quot; of RISC (at least until AArch64 threw out all of it&#x27;s quirks) and the exception proves the rule here. Instructions like this exist specifically because they accelerate execution time, rather than for assembler programmer convenience. That&#x27;s the same underlying reason why RISC had such an advantage over CISC before micro-op decoders and register renaming became a thing. It&#x27;s not so much that &quot;having less instructions is better&quot;, but that things like memory operands or repeat prefixes or what have you primarily act as programmer convenience at the expense of code efficiency. Stuff like FJCVTZS is used by compiled code to gain a measurable speed benefit, ergo it stays in.')