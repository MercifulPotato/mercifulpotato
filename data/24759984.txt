Item(by='sgtnoodle', descendants=None, kids=None, score=None, time=1602540354, title=None, item_type='comment', url=None, parent=24754562, text='It really comes down to how well a GPU&#x27;s capabilities align with the problem you&#x27;re trying to solve. A modern GPU is basically thousands of really simple CPUs that all\nrun the exact same program but on different input data. Communication between those CPUs while the program is running is incredibly bad for performance. If your problem is solvable within those limitations, then a GPU is a good choice.<p>An FPGA gives you more flexibility because you can dedicate hardware exactly where you need it. You don&#x27;t even need to stick with common data widths. If you only need 11 bits, then there&#x27;s no need to do 32 bit math, for example.<p>An ASIC with custom circuitry will generally be the fastest, lowest power way to solve a problem, with the lowest per-unit cost, but it has absurdly high development and initial tooling cost. An FPGA gives you the benefits of custom circuitry with significantly lower development cost (than an ASIC), but it&#x27;s less power efficient and the unit cost is relatively high for what you&#x27;re getting. A GPU gives you good power efficiency, good development cost, and good unit cost if your problem maps well to what GPUs can do. A CPU gives you the lowest development cost, but sets a mediocre baseline for power efficiency and unit cost.')