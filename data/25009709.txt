Item(by='NoOneNew', descendants=None, kids=[25012954], score=None, time=1604686011, title=None, item_type='comment', url=None, parent=25009513, text='I think you just fell into the trap op was referring to. Tech debt is used too broadly and has become a keyword without any real understanding.<p>No matter what you do, there will be tech debt of some sort. There&#x27;s no perfect solution when you unpack a problem.<p>My metaphor for this is a stocked product warehouse. Organizing the shelves of product and keeping it that way is obviously the right solution so people dont have to hunt when pulling. That requires someone to maintain (typically the floor manager). That&#x27;s not a random schmuck you can hire for min wage to do (oddly enough). You now have a form of debt requiring you to vet a proper individual to do that job if its opened up (time spent finding someone in a smaller pool that typical temp unskilled labor). Next you have pulling with forklifts. You&#x27;re supposed to hire certed folks for the job, thus a skilled worker. They cost a bit more than people who can only toss crates. But the trade off is moving pulled pallets faster. Thus you have a higher per worker cost, but higher efficiency.<p>Tech debt is what you&#x27;re willing to trade off. Highly abstracted code in an esoteric language while super efficient and well maintained requires vetting the right devs from a very small labor pool. You lose too many of those, your business can suffer greatly if you can&#x27;t fill those spots quickly. Does the project require that? Can you get away with common, off the self libraries in a mass market language and structure the code where you can take low skilled devs and ramp them up quickly or ideally need no ramp up to continue working? Over engineering, no matter how well done and beautiful is not always the answer. Like, you dont want an Formula 1 designer making everyday sedans.<p>Beating that dead horse, tech debt is what you&#x27;re willing to put up with depending on your circumstances. Can it roadblock you? Sure. But that&#x27;s just piss poor planning or forgetting the original purpose. A lot of times when tech debt is brought up, it&#x27;s like the person is leaving the possibility open to place a Falcon 9 rocket on their car. It may not be that the software architecture is wrong, sometimes the idea is just stupid.')