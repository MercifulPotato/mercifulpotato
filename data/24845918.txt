Item(by='pm215', descendants=None, kids=[24847443], score=None, time=1603269530, title=None, item_type='comment', url=None, parent=24845370, text='My experience with working on a project that&#x27;s converted to Meson is that its main flaw is its philosophical commitment to inflexibility. You do things the Meson way or not at all. Want to have file foo&#x2F;bar&#x2F;baz.c compile to foo&#x2F;bar&#x2F;baz.o in the build tree? Nope, must be foo_bar_baz.c.o. Want to have source files with a .inc.c extension which aren&#x27;t compiled like plain .c files? Nope, you need to rename them to .c.inc. Want to write a wrapper function around a Meson builtin like &#x27;dependency&#x27; that adds extra functionality to it? Nope, Meson doesn&#x27;t provide functions in its build scripting language. Want to have a build rule be &quot;run this perl one-liner&quot;? Tough, Meson will mangle it by turning all the backslashes into forward slashes so you need to put it into an external script file. And on and on. And we needed to <i>upstream new functionality into Meson</i> before we could even convert to it in the first place!<p>My view of build tools is that they must provide flexibility and escape hatches, because on a sufficiently complicated project eventually you&#x27;re going to need it. The Meson designers have a strongly opposed philosophy. If you agree with them on that design philosophy you&#x27;ll probably be happy using Meson, but if not then you&#x27;re likely to get frustrated with it every time you do anything non-trivial with it, I think.')