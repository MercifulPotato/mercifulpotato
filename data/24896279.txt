Item(by='mnemonicsloth', descendants=None, kids=None, score=None, time=1603721195, title=None, item_type='comment', url=None, parent=24893821, text='If you want to learn a little bit <i>about</i> lisp, you might try some of Paul Graham&#x27;s writing on the subject.  <a href="http:&#x2F;&#x2F;www.paulgraham.com&#x2F;lisp.html" rel="nofollow">http:&#x2F;&#x2F;www.paulgraham.com&#x2F;lisp.html</a>  One thing you&#x27;ll learn there is that it&#x27;s possible to define a lisp interpreter, in lisp, in about a page of code.<p>But if you want to really appreciate macros, you&#x27;ll need to read some books.  There&#x27;s a lot to learn.<p>My introduction to lisp was <i>ANSI Common Lisp</i> and <i>On Lisp</i> by Graham.  <i>On Lisp</i> is all about macros.  You need ACL to understand <i>On Lisp</i>.  What you learn is pretty impressive -- I seem to recall one of the later chapters of <i>On Lisp</i> features a compiler for Prolog in two and a half pages of code -- but it requires a certain amount of supporting material.  Still, if you want the most direct route to understanding (some of) lisp&#x27;s greatness, these two would be it.<p>Another possibility is <i>Paradigms of Artificial Intelligence Programming</i> by Norvig.  This one teaches you Common Lisp in the introduction, but I&#x27;m not sure it&#x27;s enough by itself for you to really understand some of the later chapters.  If you&#x27;re prepared though (read <i>ANSI Common Lisp</i> first), this book is a gem.  It&#x27;s less about AI than about transforming and optimizing programs.  So, code as data.<p>You might also look at <i>Practical Common Lisp</i> by Siebel. I haven&#x27;t read this, but a lot of people liked it, and the code is very real-world (a little dated now, though).  It&#x27;s available online here: <a href="http:&#x2F;&#x2F;www.gigamonkeys.com&#x2F;book&#x2F;" rel="nofollow">http:&#x2F;&#x2F;www.gigamonkeys.com&#x2F;book&#x2F;</a><p>In general, you wind up learning a couple of different lisps.  Common Lisp and Scheme have the best literature, but the lisp that&#x27;s most in use today is Clojure.  Clojure&#x27;s macro system is a refinement of Common Lisp&#x27;s.  For learning clojure there are a lot of teach-yourself-X-in-21-days type books.  The best of them is the O&#x27;Reilly book: <a href="https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;clojure-programming&#x2F;9781449310387&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.oreilly.com&#x2F;library&#x2F;view&#x2F;clojure-programming&#x2F;978...</a><p>Scheme doesn&#x27;t (always) have macros, but I&#x27;d be remiss if I didn&#x27;t suggest something.  The Schemer books are some of the most effective pedagogy I have seen on any subject: <i>The Little Schemer</i>, <i>The Seasoned Schemer</i> and <i>The Reasoned Schemer</i>.  They are very cute, but don&#x27;t let that fool you.  They get hard (in TLS&#x27;s case maybe too hard) at the end.<p>Finally, there is one of the most important CS books of all time: <i>The Structure and Interpretation of Computer Programs</i> (SICP).  It will change the way you think about programming forever.  It also explains some important details about how lisp works, and it&#x27;s so definitive that a lot of them aren&#x27;t covered elsewhere.  (&quot;SICP already did that...&quot;)  I reread my copy every five years or so, and I always come away knowing something new.<p>You don&#x27;t need to read all this stuff to be a good lisp programmer.  One or two of these would probably be enough.  But I think it&#x27;s important to have choices.  If you want to talk in more depth, my email&#x27;s in my profile.')