Item(by='jasode', descendants=None, kids=[25570340], score=None, time=1609254034, title=None, item_type='comment', url=None, parent=25569764, text='<i>&gt;, Brooks wasn&#x27;t talking about that. He was talking about productivity boosts due to programming language design and programming methodology.</i><p>Brooks was <i>also</i> talking about <i>non-</i>programming language advancements as a possible &quot;silver bullets&quot;.  See the pdf and look for the following sections that are not about programming syntax:<p><pre><code>  Hopes for the Silver\n    Artificial Intelligence\n    Environments and Tools\n  Promising Attacks on the Conceptual Essence\n    Buy versus Build\n</code></pre>\nHe underestimated AI machine learning.  With hindsight, we see that the deep-layer neural net combined with GPU beat human rule-based programming for automatic language translations, DeepMind AlphaZero beats expert programmers hand-tweaking IBM DeepBlue, etc.<p>EDIT reply to :  <i>&quot;, nor have they reduced the overall cost of programming by 10x even after more than three decades.&quot;</i><p>I&#x27;m not convinced of that.  The issue with your conclusion is that it omits the <i>increasing expectations of more complex</i> systems.  I&#x27;d argue we <i>did</i> get 10x improvement -- <i>if</i> -- we hold the size &amp; complexity of the system constant.  E.g. write 1970s style text-based code to summarize sales revenue by region and output it to green bar dot matrix printers.  This was tedious work in old COBOL but much easier today with Python Pandas or even no code tools like MS Excel.<p>The invisible factor we often overlook is that our <i>demand for software to do more complex things</i> will always outpace the smaller productivity increases of the tools.  This makes it look like our newer programming tools never gave us 10x improvement when it actually did.')