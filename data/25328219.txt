Item(by='defaultcompany', descendants=None, kids=[25328364], score=None, time=1607302196, title=None, item_type='comment', url=None, parent=25326552, text='Semi-relevant side note: Within some constraints its possible to remove an element in a singly linked list without walking the list. The purpose of walking the list is not to find the element (which you already have) but to find it&#x27;s previous element so you can fix the &quot;next&quot; pointer on the previous element.  What you can do instead is to copy the data from the next element onto the one to delete, making it a &quot;copy&quot; of the next one. And then delete the next one after fixing the pointers. Hard to say in english but here&#x27;s the idea:<p><pre><code>    remove_list_entry(entry)\n    {\n        next = entry-&gt;next;\n        entry-&gt;data = next-&gt;data;\n        entry-&gt;next = next-&gt;next;\n        free(next);\n    }\n</code></pre>\nYou do need to handle the case of deleting the last element in the list. That can be done by keeping an EOL element at the end just for this purpose. The real caveat is that it breaks external references to list elements. If you are managing the list yourself however and can deal with these issues you can avoid list traversal (or save a pointer on every list element vs a doubly linked list). Just something to keep in your bag of tricks.')