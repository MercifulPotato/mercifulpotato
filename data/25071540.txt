Item(by='brundolf', descendants=None, kids=[25071698], score=None, time=1605198696, title=None, item_type='comment', url=None, parent=25070528, text='In my experience there are two different ways to go about creating an abstraction layer for others to use: a) you respect the language&#x2F;standards&#x2F;idioms and just add new building-blocks to the pile, or b) you use the language as a mere &quot;target environment&quot; and build your own, self-contained walled-garden on top of that environment. This is a conscious choice, and each of these approaches has tradeoffs and costs. I wrote a blog post about it, actually: <a href="https:&#x2F;&#x2F;www.brandonsmith.ninja&#x2F;blog&#x2F;libraries-not-frameworks" rel="nofollow">https:&#x2F;&#x2F;www.brandonsmith.ninja&#x2F;blog&#x2F;libraries-not-frameworks</a><p>I personally tend to agree with you, but I think there are use-cases where the Angular philosophy can be the right decision. The key differentiators for me are a) does this walled garden provide <i>real</i> benefits over the more open model? b) does the organization backing this project have the resources to re-implement and maintain standard library functionality, build&#x2F;editing tooling, debuggers, documentation, etc? There is a very high cost to going this route, because so many things move in-house. In Angular&#x27;s case, backed by Google, the answer to question b is probably yes. The answer to question a is less clear. It sounds like there are performance advantages, and certainly there&#x27;s a cohesive dev experience. For some companies, this tradeoff may be worth it. Personally I wouldn&#x27;t want to use Angular, but I respect their decisions for what they are.<p>Aside: I wrote that blog post after being faced with a framework that&#x27;s very similar to Angular, except it&#x27;s backed by a very small team unaffiliated with a major tech company and is barely being maintained at this point. That&#x27;s pretty much the worst-case scenario; with a more open &quot;library&quot; you&#x27;d have a much easier time coping with a loss of official support. But Angular is unlikely to ever find itself in that kind of situation.')