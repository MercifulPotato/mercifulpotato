Item(by='contingencies', descendants=None, kids=[24810916, 24806639], score=None, time=1602883235, title=None, item_type='comment', url=None, parent=24800037, text='The article really seems to be more about &quot;so you want to design a custom PCB for a given embedded Linux capable application processor&quot;. While it is full of useful information and candid findings, there is usually negative business value in this approach as Jay admits lower down the article: <i>I don’t think most people design PCBs around these raw parts anyway — the off-the-shelf SOMs are so ridiculously cheap (even ones that plausibly are FCC certified) that even relatively high-volume products I&#x27;ve seen in the wild use the solder-down modules</i>. It is, however, necessary sometimes.<p>Zooming out to a broader management context, non-trivial systems usually comprise multiple processors. In these circumstances production volumes are generally lower and subsystem iteration more likely, therefore it makes more sense for managers to worry about overall architecture (eg. bus selection, microntroller vs application processor, application processor <i>architecture</i>) and consider factors such as speed of prototyping, availability of talent, longevity&#x2F;market-stability of vendor&#x27;s platform, feature-set and nature of software toolchain(s), etc. rather than worry about optimizing specific processor part selection.<p>The management priority generally only flips closer to the article&#x27;s fine-grained approach in the event that you are designing a consumer electronics widget or otherwise very high production run product with a low change expectation, where individual processor selection and BOM optimization become greater concerns.<p>Conclusion: For most people, for most products, most of the time, you don&#x27;t want to start by worrying about specific processor part selection. Further, prototyping should be done on third party dev boards&#x2F;SOMs and when production volumes justify it, final PCB design can be handed to an outside EE. This is not always a viable strategy (eg. due to form factor or other application constraints), but it&#x27;s fast, cheap and hard to go too far wrong.')