Item(by='The-Compiler', descendants=None, kids=None, score=None, time=1611856967, title=None, item_type='comment', url=None, parent=25942287, text='I agree, all approaches to this have some kind of major drawback. The main pain point with the approach chosen by qutebrowser is probably missing support for WebExtensions (i.e. Chrome&#x2F;Firefox extensions), though I still hope that&#x27;ll change with QtWebEngine some day: <a href="https:&#x2F;&#x2F;bugreports.qt.io&#x2F;browse&#x2F;QTBUG-61676" rel="nofollow">https:&#x2F;&#x2F;bugreports.qt.io&#x2F;browse&#x2F;QTBUG-61676</a><p>Other similar projects are using WebKitGTK, or indeed Electron: <a href="https:&#x2F;&#x2F;vieb.dev&#x2F;" rel="nofollow">https:&#x2F;&#x2F;vieb.dev&#x2F;</a> - again, probably not better&#x2F;worse than QtWebEngine, just a different set of problems.<p>qutebrowser actually has an abstraction layer over the backend (which is why it can support QtWebEngine and the older&#x2F;outdated QtWebKit, with little effort needed to keep support for the latter). If there is some new kind of library appearing some day which can draw to a Qt window and used from Python, it&#x27;d totally be possible to add support for it to qutebrowser without too much effort.<p>I had hoped for Servo to fill that gap at some point, but so far that hasn&#x27;t happened yet: <a href="https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;servo&#x2F;issues&#x2F;27579" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;servo&#x2F;servo&#x2F;issues&#x2F;27579</a><p>Another possibility is for Geckoview to be ported to Desktop platforms some day: <a href="https:&#x2F;&#x2F;mozilla.github.io&#x2F;geckoview&#x2F;" rel="nofollow">https:&#x2F;&#x2F;mozilla.github.io&#x2F;geckoview&#x2F;</a> - something the people behind Tridactyl would like to happen: <a href="https:&#x2F;&#x2F;tridactyl.xyz&#x2F;ideas&#x2F;#port-geckoview-to-x86_64" rel="nofollow">https:&#x2F;&#x2F;tridactyl.xyz&#x2F;ideas&#x2F;#port-geckoview-to-x86_64</a><p>As for extensions - other replies to your comment already mention this, but the main problem is that the WebExtension API is very constrained. On top of that, there&#x27;s no API for handling keyboard input, so those extensions work by injecting JavaScript code handling keyboard inputs into every page you visit. That works, but only barely - lots of hacks are required for those kind of WebExtension limitations, and they won&#x27;t work on pages where Mozilla decides extensions can&#x27;t inject JS (such as internal pages or the Mozilla addons page). Again the folks behind Tridactyl have some ideas on how to improve the situation, but so far this hasn&#x27;t happened yet: <a href="https:&#x2F;&#x2F;tridactyl.xyz&#x2F;ideas&#x2F;#write-a-keyboard-api-for-firefox" rel="nofollow">https:&#x2F;&#x2F;tridactyl.xyz&#x2F;ideas&#x2F;#write-a-keyboard-api-for-firefo...</a>')