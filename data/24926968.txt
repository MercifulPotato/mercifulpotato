Item(by='m0ther', descendants=None, kids=None, score=None, time=1603943052, title=None, item_type='comment', url=None, parent=24926603, text='In my specific case, TDD; and unit testing as religion in general. I am sure others can make similar arguments against the other two in the types of work they do. My point here is that every project is different, and that projects that do not use one or any of these techniques are not inherently buggy.<p>I believe strongly in manual testing and automated integration testing for the type of work I do (when executed by an experienced QA); but I have not seen unit testing save anywhere near the time or effort it requires. I am sure there are types of projects for which unit testing solves more problems than it creates, but I have not worked on that sort of project. In my experience, unit testing stops the type of bugs you wouldn&#x27;t have had anyway, and doesn&#x27;t do much to mitigate integration bugs (which are the vast majority of bugs I&#x27;ve seen). I&#x27;ve also seen TDD make developers overly myopic. Passing tests do however make for a conveniently reassuring metric to give to business leaders who don&#x27;t care to understand what they mean or how software is built.<p>He&#x2F;she is not narrowing to a specific type of programmer, or a specific type of programming. I am explaining why I &quot;don&#x27;t care about correctness&quot;.<p>Forgive me if this article is meant to be read in an academic context; I am not an academic.')