Item(by='veidr', descendants=None, kids=None, score=None, time=1607702685, title=None, item_type='comment', url=None, parent=25385590, text='I love Cypress overall, but wouldn&#x27;t advocate using Cypress commands unless you are doing something weird.<p>Their examples show using Cypress commands for pedestrian things like &quot;log in to app&quot; but there is no need to get all Cypress-specific for things like that.<p>Instead, we typically write &quot;test helper&quot; objects for that, which are conceptually similar to the Page Objects pattern from the Selenium era. So like:<p><pre><code>    class GroupUiTester {\n        get groupChooser() {\n            return cy.get(&#x27;#group-chooser-button&#x27;);\n        }\n    }\n</code></pre>\nThen, in your test, you can just be like:<p><pre><code>    tester.groupChooser.click();\n</code></pre>\nThat is kind of simplified, but even that would be useful if you had dozens of tests interacting with that group chooser element. (Especially since, unlike string-based &quot;cy.get(&#x27;.some-class.whatever&#x27;)&quot; it will all auto-complete in any decent editor.)<p>An example of &quot;doing something weird&quot; where we do use Cypress.Commands is like:<p><pre><code>    Cypress.Commands.add(&#x27;disableDefaultLocalStorageClearing&#x27;, () =&gt; {\n        Cypress[&#x27;LocalStorage&#x27;].clear =\n            SUBSTITUTE_CYPRESS_CLEAR_LOCAL_STORAGE_FUNCTION;\n    });\n</code></pre>\nWe do that because the local storage clearing breaks a third party lib we use for a few tests. But that is something you can&#x27;t just do with the regular Cypress&#x2F;DOM API, so it is a good candidate for using Cypress &quot;commands&quot;.')