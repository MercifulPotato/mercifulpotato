Item(by='messe', descendants=None, kids=[25410291, 25410031, 25410032], score=None, time=1607891469, title=None, item_type='comment', url=None, parent=25409535, text='Yep, looks like simdjson is defaulting to a generic fallback implementation. I added the following to the start of main:<p><pre><code>    const simdjson::implementation *impl = simdjson::active_implementation;\n    std::cout &lt;&lt; &quot;simdjson is optimized for &quot; &lt;&lt; impl-&gt;name() &lt;&lt; &quot;(&quot; &lt;&lt; impl-&gt;description() &lt;&lt; &quot;)&quot; &lt;&lt; std::endl;\n</code></pre>\nWhen built for Intel&#x2F;Rosetta, it prints:<p><pre><code>    x86_64% .&#x2F;benchmark \n    simdjson is optimized for westmere(Intel&#x2F;AMD SSE4.2)\n    minify : 4.44883 GB&#x2F;s\n    validate: 5.39216 GB&#x2F;s\n</code></pre>\nOn arm64:<p><pre><code>    arm64% .&#x2F;benchmark\n    simdjson is optimized for fallback(Generic fallback implementation)\n    minify : 1.02521 GB&#x2F;s\n    validate: inf GB&#x2F;s\n</code></pre>\nsimdjson&#x27;s mess of CPP macros isn&#x27;t properly detected ARM64. By manually setting -DSIMDJSON_IMPLEMENTATION_ARM64=1 on the command line, I got the following results:<p><pre><code>    arm64% c++ -O3 -DSIMDJSON_IMPLEMENTATION_ARM64=1 -o benchmark benchmark.cpp simdjson.cpp -std=c++11\n    arm64% .&#x2F;benchmark \n    simdjson is optimized for arm64(ARM NEON)\n    minify : 6.64657 GB&#x2F;s\n    validate: 16.3949 GB&#x2F;s\n</code></pre>\nEDIT: Interestingly, compiling with -Os nets a slight improvement to the validate benchmark:<p><pre><code>    arm64% c++ -Os -DSIMDJSON_IMPLEMENTATION_ARM64=1 -o benchmark benchmark.cpp simdjson.cpp -std=c++11\n    arm64% .&#x2F;benchmark\n    simdjson is optimized for arm64(ARM NEON)\n    minify : 6.649 GB&#x2F;s\n    validate: 17.1456 GB&#x2F;s</code></pre>')