Item(by='zesterer', descendants=None, kids=[25557712], score=None, time=1608977530, title=None, item_type='comment', url=None, parent=25542127, text='There is no one definition of &#x27;formal verification&#x27;. Sel4&#x27;s verification required developers to specifically demarcate the behaviour they desire and generally requires the use of abstractions with very predictable safe semantics. In addition, Sel4 is less than 9k lines of code.<p>That is a very, very long way from developing a general-purpose compiler for a general-purpose system language that can perform arbitrary formal verification for arbitrary code. That&#x27;s not the goal of Rust and I doubt that it would be a particularly useful one for 99% of developers anyway. The goal of Rust&#x27;s safety promise is that the verification and review of an entire codebase (as would be the case in C) shrinks down to just a very small corner of that codebase (that which is demarcated as &#x27;unsafe&#x27;).<p>In practice, I think that unsafe uses are substantially rarer than that even. Veloren (<a href="https:&#x2F;&#x2F;gitlab.com&#x2F;veloren&#x2F;veloren&#x2F;" rel="nofollow">https:&#x2F;&#x2F;gitlab.com&#x2F;veloren&#x2F;veloren&#x2F;</a>) has almost 120,000 lines of code nowadays and yet has fewer usages of unsafe code than you can count with a single hand.')