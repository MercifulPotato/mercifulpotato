Item(by='Smaug123', descendants=None, kids=[25971154], score=None, time=1612025301, title=None, item_type='comment', url=None, parent=25969976, text='EDIT: In fact I appear to have paraphrased the next post in the series, <a href="https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;posts&#x2F;removing-cyclic-dependencies&#x2F;" rel="nofollow">https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;posts&#x2F;removing-cyclic-depe...</a> . Probably go and read that instead.<p>One pattern this nudges you towards is having a Domain.fs at the top of each project. Since everything in your project wants to talk in terms of the data types you&#x27;ve modelled, it makes sense to put them all in the same place at the top. Moreover, once you&#x27;ve done that, you&#x27;re guided towards having your data types really being &quot;dumb&quot; - algebraic data types only - because to put actual behaviour into them is harder when all you have is definitions of data types (and no associated modules). You certainly <i>can</i> write OOsagne using the Domain.fs pattern, but it&#x27;s much harder and the code really smells when you do (because the domain file gets super long).<p>The upshot is that your domain model appears explicitly at the start of the project, which is a big win for anyone who comes into the project and needs to learn quickly what&#x27;s going on. By contrast, nearly all the C# I&#x27;ve ever come across has the domain spread across many files and all mixed up with implementation details.<p>This is certainly not the only way to write F# - I&#x27;ve written projects which have the domain spread across multiple files - but it&#x27;s one nice way to handle a small-to-medium-sized project.')