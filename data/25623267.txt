Item(by='pron', descendants=None, kids=None, score=None, time=1609695287, title=None, item_type='comment', url=None, parent=25622534, text='&gt; C clearly needs a AST-based macros, not a whole new language to replace it.<p>But that &quot;whole new language&quot; is probably smaller than just AST macros for C. And C&#x27;s problems aren&#x27;t solved just by fixing macros (I think AST macros are a <i>horrible</i> feature in almost any language that isn&#x27;t a Lisp; I see them as a sign that the language designers just gave up).<p>&gt; Undefined behavior comes from the fact that C is machine-independent assembler<p>True, but that&#x27;s almost never a valuable thing these days; you lose portability and get little in return other than a somewhat smaller compiler.<p>&gt; it&#x27;s clearly not expressive enough<p>It&#x27;s at least as expressive as any other low-level language. Any C++&#x2F;Rust program -- with generics, concepts, destructors, async, traits, macros -- could be translated to an equivalent Zig program that&#x27;s at worst no longer than some (small) constant multiple of the original. That&#x27;s <i>not</i> true for C (at least not without hurting performance).<p>&gt; and there&#x27;re safer languages either<p>Low-level? Not so sure. The goal is a language that makes it easy to write correct programs, not &quot;a safe language&quot;. I&#x27;m not sure there are languages that do that better.<p>&gt; I don&#x27;t buy this &quot;worse is better&quot; argument either<p>It&#x27;s an &quot;it&#x27;s just better&quot; argument. Good design is not about picking arbitrary things and making them more convenient, but about spending a certain budget in a way that yields a good gestalt.<p>&gt; It&#x27;s not rocket science to come with a syntax which would avoid that.<p>Sure, but you can add that syntax at any time. It&#x27;s not urgent. It&#x27;s best to see if you could perhaps generalise it in some way and get a better return, or maybe invest your complexity budget more wisely elsewhere. I doubt compiler directives make up more than 0.1% of a program.<p>&gt; If Zig language creators didn&#x27;t do that so far, that&#x27;s exactly what I call &quot;not enough good faith went into Zig design&quot;.<p>I&#x27;ve been programming for ~30 years, and aside from Scheme -- maybe -- I don&#x27;t think I&#x27;ve ever encountered a better-designed language than Zig. Of course, this perception is subjective.')