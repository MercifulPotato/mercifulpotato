Item(by='BatteryMountain', descendants=None, kids=None, score=None, time=1611816099, title=None, item_type='comment', url=None, parent=25936153, text='I&#x27;ve described an ECS to my friend as a combination Strategy pattern and Composition, so you can have a huge list of &quot;traits&#x2F;components&#x2F;behaviours&quot; and then build your object hierarchies (and their behaviours) from that, instead of from Inheritance. The way most game editors are made, when you configure things using the ECS, it visually looks like inheritance, but under the hood it is more like Composition. Once you go down the rabbit hole, you would see that and ECS&#x2F;Strategy pattern &amp; Composition makes more sense (and way easier to cater to exceptions) than plain old inheritance.<p>I want dare say that the enterprisey-version of an ECS would be the Onion Architecture that&#x27;s been floating around in Java&#x2F;C# camps. Not 100% match but they feel the same to me.<p>Obviously for normal GUI programming (at the outer layer that we see at least), inheritance is still king.')