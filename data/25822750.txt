Item(by='phonebucket', descendants=None, kids=[25824234], score=None, time=1610984317, title=None, item_type='comment', url=None, parent=25820457, text='Julia offers a wonderful modular ecosystem.<p>This is in no small part due to a clever design decision of language design of combining type genericism with multiple dispatch.<p>For example, Turing.jl for Bayesian Inference plays well with Flux.jl for Neural Networks which plays well with DifferentialEquations.jl for ODEs. Basically, everything in pure Julia plays nicely with everything else.<p>An example of how this useful: when neural ODES became more popular a couple of years ago, Julia users had to do almost nothing to implement them and extend them. DifferentialEquations.jl and Flux.jl already played nicely with each other, and you could just run wild. Meanwhile, in Python-land, there are devs building out ODE solvers built in Tensorflow and Pytorch, doing a load of duplicate work because the frameworks don&#x27;t allow the same level of genericism.<p>The whole ecosystem is like this.<p>So I&#x27;ve decided to stay with Julia. I&#x27;m staying with Python too. It&#x27;s no big deal.')