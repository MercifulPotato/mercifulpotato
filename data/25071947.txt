Item(by='holtalanm', descendants=None, kids=None, score=None, time=1605201138, title=None, item_type='comment', url=None, parent=25071213, text='&gt; Exceptions and stack traces I agree with you can be a bit ridiculous, probably because I&#x27;m not used to Java at all.<p>Even if you are used to java, the exceptions and stack traces in Clojure still don&#x27;t make sense.  This is coming from someone who was writing Java in their day job while learning Clojure at home.<p>&gt; Seems to be a common misconception that still hasn&#x27;t died.<p>Probably because it is not a misconception?<p>Right on the Clojure main site, it states it is a functional language, and that Object Oriented programming is overrated.  With the language being built on top of the JVM you _cannot_ avoid objects (the bytecode generated by Clojure is riddled  with objects).  Clojure is a language that claims to be functional while building its foundations upon one of the most well-known object-oriented systems out there.<p>This is like building a house on top of a concrete foundation, laying some boards over the top to cover it up, and claiming the house is 100% wood.  It just....isn&#x27;t.<p>It also makes the claim that Clojure data structures are immutable.  That is 100% not true, as ANY object or data structure can be mutated on the JVM at runtime with reflection.<p>If Clojure truly doesn&#x27;t aim to be a functional programming language, then maybe they need to update their website.<p>&gt; Just for the record, in reality and practical terms, I&#x27;ve never had this happen to me.<p>If you use any java libraries in your Clojure projects, there is a very high chance you will run into this.  One of the &#x27;strengths&#x27; that Clojure lays claim to is being able to leverage the Java ecosystem, while at the same time apparently also claiming that you shouldn&#x27;t use libraries from Java (or if you do, write a wrapper for it).')