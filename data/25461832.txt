Item(by='jordanlewis', descendants=None, kids=[25463817], score=None, time=1608247361, title=None, item_type='comment', url=None, parent=25461536, text='Hi Taylor!<p>What are the salient differences in your mind? Under the hood, CockroachDB executes writes to and reads from such a table in the same way that you would against a key-value store. You can explore this for yourself with the &quot;kv trace&quot; functionality of CockroachDB&#x27;s SQL shell, which logs of all of the KV API calls that a SQL query emits:<p><pre><code>  $ .&#x2F;cockroach demo\n  # Welcome to the CockroachDB demo database!\n  #\n  # You are connected to a temporary, in-memory CockroachDB cluster of 1 node.\n  # ...\n  #\n  demo@127.0.0.1:26257&#x2F;test&gt; CREATE TABLE kv (k STRING PRIMARY KEY, v STRING);\n  CREATE TABLE\n  \n  Time: 5ms total (execution 5ms &#x2F; network 0ms)\n  \n  demo@127.0.0.1:26257&#x2F;test&gt; \\set auto_trace=on,kv\n  demo@127.0.0.1:26257&#x2F;test&gt; INSERT INTO kv VALUES(&#x27;a&#x27;, &#x27;b&#x27;);\n  INSERT 1\n  \n  Time: 2ms total (execution 2ms &#x2F; network 0ms)\n  \n                 timestamp              |       age       |                     message                      |                            tag                             |                location                 |    operation     | span\n  --------------------------------------+-----------------+--------------------------------------------------+------------------------------------------------------------+-----------------------------------------+------------------+-------\n    2020-12-17 23:17:46.626696+00:00:00 | 00:00:00.001123 | CPut &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot;&#x2F;0 -&gt; &#x2F;TUPLE&#x2F;2:2:Bytes&#x2F;b     | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;row&#x2F;writer.go:207                   | flow             |    6\n    2020-12-17 23:17:46.626754+00:00:00 | 00:00:00.001181 | querying next range at &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot;&#x2F;0         | [n1,client=127.0.0.1:49216,hostssl,user=demo,txn=dcce3954] | kv&#x2F;kvclient&#x2F;kvcoord&#x2F;range_iter.go:159   | dist sender send |    8\n    2020-12-17 23:17:46.626792+00:00:00 | 00:00:00.001219 | r36: sending batch 1 CPut, 1 EndTxn to (n1,s1):1 | [n1,client=127.0.0.1:49216,hostssl,user=demo,txn=dcce3954] | kv&#x2F;kvclient&#x2F;kvcoord&#x2F;dist_sender.go:1851 | dist sender send |    8\n    2020-12-17 23:17:46.627281+00:00:00 | 00:00:00.001708 | fast path completed                              | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;plan_node_to_row_source.go:145      | flow             |    6\n    2020-12-17 23:17:46.627322+00:00:00 | 00:00:00.001749 | rows affected: 1                                 | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;conn_executor_exec.go:622           | exec stmt        |    4\n  (5 rows)\n  \n  Time: 1ms total (execution 1ms &#x2F; network 0ms)\n  \n  demo@127.0.0.1:26257&#x2F;test&gt; SELECT * FROM kv WHERE k = &#x27;a&#x27;;\n    k | v\n  ----+----\n    a | b\n  (1 row)\n  \n  Time: 6ms total (execution 6ms &#x2F; network 0ms)\n  \n                 timestamp              |       age       |                message                 |                            tag                             |                location                 |    operation     | span\n  --------------------------------------+-----------------+----------------------------------------+------------------------------------------------------------+-----------------------------------------+------------------+-------\n    2020-12-17 23:17:54.402735+00:00:00 | 00:00:00.003116 | Scan &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot;{-&#x2F;#}              | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;row&#x2F;kv_batch_fetcher.go:337         | materializer     |    7\n    2020-12-17 23:17:54.402763+00:00:00 | 00:00:00.003144 | querying next range at &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot; | [n1,client=127.0.0.1:49216,hostssl,user=demo,txn=d30bcbc9] | kv&#x2F;kvclient&#x2F;kvcoord&#x2F;range_iter.go:159   | dist sender send |    9\n    2020-12-17 23:17:54.404565+00:00:00 | 00:00:00.004946 | r36: sending batch 1 Scan to (n1,s1):1 | [n1,client=127.0.0.1:49216,hostssl,user=demo,txn=d30bcbc9] | kv&#x2F;kvclient&#x2F;kvcoord&#x2F;dist_sender.go:1851 | dist sender send |    9\n    2020-12-17 23:17:54.405091+00:00:00 | 00:00:00.005472 | fetched: &#x2F;kv&#x2F;primary&#x2F;&#x27;a&#x27;&#x2F;v -&gt; &#x2F;&#x27;b&#x27;     | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;colfetcher&#x2F;cfetcher.go:888          | materializer     |    7\n    2020-12-17 23:17:54.405895+00:00:00 | 00:00:00.006276 | rows affected: 1                       | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;conn_executor_exec.go:622           | exec stmt        |    4\n  (5 rows)\n  \n  Time: 1ms total (execution 1ms &#x2F; network 0ms)\n  \n  demo@127.0.0.1:26257&#x2F;test&gt;\n</code></pre>\nI&#x27;ll draw your attention to two lines in particular. Here&#x27;s the put:<p><pre><code>  2020-12-17 23:17:46.626696+00:00:00 | 00:00:00.001123 | CPut &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot;&#x2F;0 -&gt; &#x2F;TUPLE&#x2F;2:2:Bytes&#x2F;b     | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;row&#x2F;writer.go:207                   | flow             |    6\n</code></pre>\nAnd here&#x27;s the get:<p><pre><code>  2020-12-17 23:17:54.402735+00:00:00 | 00:00:00.003116 | Scan &#x2F;Table&#x2F;53&#x2F;1&#x2F;&quot;a&quot;{-&#x2F;#}              | [n1,client=127.0.0.1:49216,hostssl,user=demo]              | sql&#x2F;row&#x2F;kv_batch_fetcher.go:337         | materializer     |    7\n</code></pre>\nThese operations (`CPut` and `Scan`) are KV operations that you&#x27;d be able to run yourself against any key-value store. CockroachDB doesn&#x27;t give you access to those operations directly, but crafting your queries in this way is really not significantly different.')