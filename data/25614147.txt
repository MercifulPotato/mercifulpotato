Item(by='GuB-42', descendants=None, kids=[25618509, 25623786], score=None, time=1609606691, title=None, item_type='comment', url=None, parent=25610690, text='About Euclidâ€™s Algorithm: I actually implemented several times at work, it is useful when you are dealing with periodic events, which is common in real time systems. The typical question is: a task has to do something every 20, 30 and 40ms, at which period should you schedule your task (minor cycle)? The answer is gcd(20,30,40)=10ms and it can be computed using the Euclid&#x27;s Algorithm.<p>But in most languages, Euclid&#x27;s Algorithm is actually better implemented with a loop, and it brings me to one thing I realized about recursion that isn&#x27;t commonly taught.<p>At a low level, recursion is implemented with a stack, so if you have a stack, you don&#x27;t actually need to call functions to implement a recursive algorithm, in fact, many recursive algorithms don&#x27;t need a stack at all (tail recursion). A recursive function call just means &quot;remember my position and all local variables&quot; and a return means &quot;go back to where I was&quot;.<p>One advantage of this &quot;machine first&quot; thinking that it can help with optimization. By thinking about the stack, you may realize that you don&#x27;t need to remember all local variables, that the call is always made from the same place so you don&#x27;t need to remember your position. You may even realize that a stack, which is the natural data structure of recursion is not actually the best, for example, an array might be better, which, by the way, is one of the basis of dynamic programming.<p>And if you get to functional programming later, understanding what the machine does behind the scenes can give you a better grasp of the idea.')