Item(by='robotmay', descendants=None, kids=[25148971, 25154528], score=None, time=1605786099, title=None, item_type='comment', url=None, parent=25147990, text='We use rubocop heavily at GitLab. I&#x27;m generally happy with it, and we have a largely sane set of linters. I think when your codebase gets to a certain size and you have a lot of engineers working on it, having some sane defaults is very beneficial and helps standardise the codebase a bit.<p>Where I think rubocop really shines is in picking up _problem_ code, like potential bugs, performance issues, or errors, in advance. We also use it heavily when deprecating older modules&#x2F;classes, like replacing JSON calls with our own wrapper.<p>It does, however, sometimes suggest something totally bonkers: <a href="https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-org&#x2F;gitlab&#x2F;-&#x2F;issues&#x2F;271570" rel="nofollow">https:&#x2F;&#x2F;gitlab.com&#x2F;gitlab-org&#x2F;gitlab&#x2F;-&#x2F;issues&#x2F;271570</a>, but it&#x27;s fairly trivial to skip it. After all, humans should be allowed to say that the linter is wrong and either ignore it or suggest an improvement, and that&#x27;s a process issue rather than a rubocop issue :)<p>Not everyone is going to agree with every cop you enable, but the goal is standardisation rather than appeasing everybody. If something is particularly contentious then I would suggest removing&#x2F;disabling that cop.<p>Every few years at GitLab we do seem to get a singlequotes vs doublequotes cop argument crop up, which is why we (thankfully) still don&#x27;t have any requirement around those. Team doublequotes represent!<p>Edit: Oh and unrelated to the content of the article, but I really like the design and colour palette of the blog.')