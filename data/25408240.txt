Item(by='triska', descendants=None, kids=None, score=None, time=1607880640, title=None, item_type='comment', url=None, parent=25407234, text='The various OWL dialects are intended for reasoning, in combination with RDF etc.<p>In my opinion, all these languages fall short for the reasons I mentioned: In particular, even though one can express knowledge and rules in these languages, they do not allow convenient reasoning about the rules themselves, for example in order to dynamically interpret them with custom execution strategies.<p>Jena suffers from the same shortcoming. The documentation you link to shows an example that illustrates the issue:<p><pre><code>    Model rdfsExample = ModelFactory.createDefaultModel();\n    Property p = rdfsExample.createProperty(NS, &quot;p&quot;);\n    Property q = rdfsExample.createProperty(NS, &quot;q&quot;);\n    rdfsExample.add(p, RDFS.subPropertyOf, q);\n    rdfsExample.createResource(NS+&quot;a&quot;).addProperty(p, &quot;foo&quot;);\n</code></pre>\nI can now create an inference model that takes this knowledge into account:<p><pre><code>    InfModel inf = ModelFactory.createRDFSModel(rdfsExample);\n</code></pre>\nOK, but how do I actually process these relations themselves if I want to reason about them? For example, suppose I want to write a program that tries to minimize the relations, or rewrite them for more efficient processing. How do I represent and access the rules themselves within this framework, when I want to reason about the rules instead of only using them with fixed reasoning engines?<p>Datalog makes this easy, because every Datalog knowledge base is also a valid Prolog program, and every Prolog program is a sequence of Prolog terms. Hence, we can use Prolog to easily reason about knowledge and rules that are stated in Datalog or Prolog syntax. This ability is what I miss most severely in the current semantic web stack.')