Item(by='Nition', descendants=None, kids=[24748482, 24748271], score=None, time=1602443824, title=None, item_type='comment', url=None, parent=24746836, text='I work in videogames and I don&#x27;t know much about stock trading, but in games we often deal with networking problems like who shot first.<p>It sounds like the central stock exchange is handling trades in a naive way like this:<p><pre><code>  T = 0: Client A sends a trade from 200ms away\n  T = 0.1s: Client B sends a trade from 50ms away\n  T = 0.2s: Client C sends a trade from 100ms away\n\n  T = 0.15s: Client B&#x27;s trade arrives, process it\n  T = 0.2s: Client A&#x27;s trade arrives, process it\n  T = 0.3s: Client C&#x27;s trade arrives, process it\n</code></pre>\nWhat we usually do on a server (lag compensation by rolling back the enemy player&#x27;s hitbox) won&#x27;t work here, but I wonder if a version of what&#x27;s usually called client-side prediction would work. In this case it would be server-side instead:<p><pre><code>  At T=0.15s, Client B&#x27;s trade arrives.\n  It&#x27;s timestamped as T = 0.1.\n  We look at all trades since T = 0.1.\n  There aren&#x27;t any so we just process it.\n\n  At T = 0.2s, Client A&#x27;s trade arrives.\n  It&#x27;s timestamped as T = 0.\n  We look at all trades since T = 0.\n  Client B&#x27;s trade was timestamped T = 0.1.\n  *Roll back and resimulate all trades since T = 0.*\n  Trade order is now A, B.\n\n  At T = 0.3s, Client C&#x27;s trade arrives.\n  It&#x27;s timestamped as T = 0.2.\n  No trades since 0.2 so we process it normally.\n  Trade order is now A, B, C.\n</code></pre>\nMost likely too complex and not actually feasible, just thought I&#x27;d mention it. The clocks on the remote clients would need to be synchronised with the central atomic clock so that their timestamps align correctly which might be tricky&#x2F;impossible due to the extreme accuracy required. You also have to trust the client to not just fake their timestamp down a few ms.')