Item(by='ivanbakel', descendants=None, kids=None, score=None, time=1607684398, title=None, item_type='comment', url=None, parent=25384201, text='Because they don&#x27;t. Your link even has an answer that highlights one way which they differ in expressivity - namely, that associated types don&#x27;t appear in the instance head, so they can produce orphan instances where generics would not.<p>Consider the example of Rust&#x27;s Iterator trait[0]. It has an associated type for the iteration item. It could have a generic type argument instead, but the two implementations would be different:<p><pre><code>  1. The associated type is a direct consequence of the instance head. That means that, for the type that Iterator is being implemented on, the associated type is known entirely from that type. If you have an iterable value, you know it only produces one kind of iterator item.\n  2. As a result, the associated-type version can only be implemented at most once. The generic version would be implementable any number of times, for any number of choices of type argument - and as a result, you would have to specify that you are iterating over an iterator with a particular choice of iterator item type, every time you iterate.\n\n [0]: https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html</code></pre>')