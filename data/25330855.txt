Item(by='flohofwoe', descendants=None, kids=None, score=None, time=1607336592, title=None, item_type='comment', url=None, parent=25328173, text='IMHO most problems (apart from the missing C APIs) of the Android NDK could be fixed if they&#x27;d steal a few ideas from the emscripten SDK.<p>In emscripten I can do:<p><pre><code>    emcc hello.c -o hello.html\n</code></pre>\n...and this gives me a complete &#x27;web application&#x27; ready to run in the browser.<p>With the Android NDK I should be able to do this:<p><pre><code>    ndkcc hello.c -o hello.apk\n</code></pre>\n...and this <i>should</i> give me a complete APK ready to run on the device. Emscripten&#x27;s emcc is just a &quot;simple&quot; python wrapper script which looks like a gcc-compatible compiler&#x2F;linker from the outside, but does additional things besides calling the C&#x2F;C++ compiler and linker (such as creating a .js and .html file next to the .wasm compiler output).<p>If the NDK would have such a compiler wrapper script it would be absolutely trivial to integrate with any existing C&#x2F;C++ build system.<p>Another idea the Android NDK should steal from Emscripten is how to integrate the C&#x2F;C++ side with the &quot;other&quot; side (in Emscripten&#x27;s case Javascript, and in the NDK&#x27;s case Java). In Emscripten I can simply embed Javascript code into the C source files with some macro-magic, and call back and forth directly between C and JS. This is how the Java integration should work in the NDK. I shouldn&#x27;t have to deal with the JNI or with the Java toolchain or with .java files at all.')