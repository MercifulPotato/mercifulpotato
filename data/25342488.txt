Item(by='adrusi', descendants=None, kids=[25348075], score=None, time=1607408791, title=None, item_type='comment', url=None, parent=25341680, text='They&#x27;re not the same. The difference is that what the article calls &quot;nullable types&quot; are based on commutative unions, while option types are based on non-commutative unions.<p>In haskell, Either a (Either b c) is distinct from Either (Either a b) c. In typescript, a | (b | c) is identical to (a | b) | c. And further, x | x is identical to x in typescript.<p>The upshot is that Haskell (using Either instead of Maybe for clarity) lets you have Either (Either a ()) () as distinct from Either a (), but the equivalent typescript is (a | null) | null, which is equivalent to a | (null | null) which is further equivalent to a | null.<p>So nullable types are less powerful than option types. I&#x27;m not certain that they&#x27;re worse, because dealing with nested option types can get confusing, and maybe making them impossible to express would encourage API design that requires less thinking, but unfortunately I think it&#x27;s more likely that it would lead to API design with more footguns.')