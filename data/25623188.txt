Item(by='37ef_ced3', descendants=None, kids=[25626326], score=None, time=1609694756, title=None, item_type='comment', url=None, parent=25622876, text='Thanks for your comment<p>Picking up on one of your snags, Go&#x27;s slices will &quot;click&quot; for you once you start thinking of it as a pointer and a length (and a capacity), but nothing more.<p>Realize it&#x27;s just a C struct like this, passed by value:<p><pre><code>  struct intSlice {\n      int* addr;\n      int len;\n      int cap;\n  };\n</code></pre>\nThe memory at addr is not owned by the slice. All the slice operations are simply notation for manipulating the struct. Go&#x27;s garbage collection makes the whole thing work brilliantly<p>This can be confusing if you&#x27;re used to std::vector (which owns the memory) or python&#x27;s slices. Go&#x27;s slices are a shallow pointer&#x2F;length system exactly like is used in C all the time. For example:<p><pre><code>  void sort(int* addr, int len);\n</code></pre>\nbecomes<p><pre><code>  func sort(a []int)\n</code></pre>\nA Go slice is just a pointer&#x2F;length, with terse notation')