Item(by='ghc', descendants=None, kids=None, score=None, time=1610278587, title=None, item_type='comment', url=None, parent=25712605, text='Closest I can think of is Purely Functional Data Structure (Chris Okasaki) or Category Theory for Programmers (Bartosz Milewski), but they&#x27;re not exactly what you&#x27;re after.<p>I would submit that this paper from FB is more in the vein of what you&#x27;re looking for: <a href="https:&#x2F;&#x2F;research.fb.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;08&#x2F;Eliminating-Bugs-with-Dependent-Haskell-Experience-Report.pdf" rel="nofollow">https:&#x2F;&#x2F;research.fb.com&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;08&#x2F;Eliminati...</a> .<p>This interview might also be insightful: <a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;podcast&#x2F;functional-programming-languages-pursuit-laziness-dr-simon-peyton-jones&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;podcast&#x2F;functional-...</a><p>The truth is that Haskell is still very academically focused, so you&#x27;re likely to see papers of substance much more often than books or blog posts.<p>When you hire people to write Haskell there&#x27;s two groups that always show up: young enthusiasts who are frustrated with imperative programming in their (usually first or second) day job, and academics who got transplanted into industry to work on hard problems. I&#x27;ve interviewed people doing formal verification of CPU circuits at Intel, people who work on compilers, people who work on verifying termination of programs (for missile guidance), and people who work on financial institution backends.<p>What I haven&#x27;t seen is too many experienced, pragmatic engineers (rather than computer scientists) who have spent their career writing Haskell.')