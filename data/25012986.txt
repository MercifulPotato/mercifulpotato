Item(by='lelandbatey', descendants=None, kids=[25014285], score=None, time=1604718784, title=None, item_type='comment', url=None, parent=25012115, text='I wouldn&#x27;t describe this as good lessons for using Go in production, I would describe this as &quot;opinions I came to after building my first real Go web project.&quot;<p>1. You probably do NOT need a framework<p>Use the default Go HTTP libraries. For the other functionality that you&#x27;ll need, use libraries. If you throw in with frameworks like Labstack Echo, you&#x27;re forever coupled to the incredibly specific and one-note behavior of the framework you choose. The dependencies you choose should be light, with their most attractive aspect being the interfaces they provide. I point most strongly to go-kit as an EXCELLENT set of libraries for writing HTTP services. Their Log package is a small example of what I look for in quality libraries.<p>2. You NEED a good code structure<p>You need to be structuring your code, yes. But you should NOT be leaning on the conventional directory structure to give meaning. You will need to read more of other peoples code than you will need to write your own code, and other people will not be following your code structure. Much more useful is to get good tools and practices reading code. Go, unlike other languages (e.g. C#), is meant to be readable and understandable without a heavy IDE there to help resolve elaborate indirection and overloaded imports. If you have the code on your disk and can use Grep, you&#x27;ll do fine. If you&#x27;re using an editor which supports language servers like Gopls, you&#x27;ll be able to fly through the codebases.<p>3. Pick a DB driver wisely, and the wisest choice for SQL driver is database&#x2F;sql<p>SQLx is not database&#x2F;sql, which is a real problem when most all the ecosystem is built around database&#x2F;sql. The only real pain point people have with database&#x2F;sql is the scanning, which is why other people have built libraries to help with this: <a href="https:&#x2F;&#x2F;github.com&#x2F;kisielk&#x2F;sqlstruct" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;kisielk&#x2F;sqlstruct</a><p>Probably just use database&#x2F;sql.<p>4. Docker<p>Most all of this advice is fine.<p>Basically, I recommend sticking to the more lightweight and more standard implementations, as they have the abstractions you&#x27;ll need to the long haul. Though if you&#x27;re just trying to get a thing going ASAP and it has to be Go, do what you gotta do with the code that catches you&#x27;re fancy.')