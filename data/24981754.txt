Item(by='gravitas', descendants=None, kids=None, score=None, time=1604424554, title=None, item_type='comment', url=None, parent=24980718, text='Distributions who have built GPG keychecks into the process use the keyparts distributed by themselves; meaning that on RHEL systems (and the clones - CentOS, OracleLinux, etc.) use the GPG keyparts delivered via the vendor &quot;release&quot; packages sitting in &#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;, an Arch system uses &quot;archlinux-keyring&quot; which populates &#x2F;use&#x2F;share&#x2F;pacman&#x2F;keyrings&#x2F; and so forth. A 3rd party vendor source (think Nginx, Percona MySQL, Zabbix, etc.) who runs their own yum repo provides their own trusted GPG key and signs their packages with their key, so you install the &quot;foobarvendor-release&quot; package which contains their keys.<p>System package installs then do a GPG check against those known good keyparts from trusted vendors which you&#x27;ve allowed and stop you when you have an unsigned package (being a bit light on detail here, each distribution handles it their own way). So the NPM (or Artifactory, etc.) ecosystem could invent an installable package of their GPG keys, and require all packages sourced from their server to be signed with this key -- this is how the EPEL 3rd party community repo works for example. These are all based on trusted humans having access to the signing keys and process, so there are layers of vetted&#x2F;known folks required (not just anyone can walk into Mordor here).<p>This does not work though for some Linux distributions such as Ubuntu due to their original design. Debian&#x2F;Ubuntu systems for example are at somewhat of a disadvantage here; from the beginning the DEB system design has eschewed GPG signing individual packages and instead sign repositories (which tends to also get disable&#x2F;ignored if even used), they&#x27;re at least now recommending HTTPS around apt which is nice.')