Item(by='acqq', descendants=None, kids=[25269885, 25266114, 25265493], score=None, time=1606831508, title=None, item_type='comment', url=None, parent=25264857, text='It&#x27;s very easy and fast to try: using 0.7.0+51d7c14ce from <a href="https:&#x2F;&#x2F;ziglang.org&#x2F;download&#x2F;" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;download&#x2F;</a> and:<p><pre><code>   const std = @import(&quot;std&quot;);\n\n   pub fn main() void {\n      std.debug.print(&quot;Hello, world!\\n&quot;, .{});\n   }\n</code></pre>\n----------<p>zig build-exe hello.zig -O ReleaseSmall --strip --single-threaded -target x86_64-windows<p>Resulting hello.exe is 3072 bytes. From these 2560 are <i>zero bytes</i>. The only system calls from the resulting binary are to ExitProcess, GetLastError   and WriteFile from KERNEL32.dll Additionally, changing the release optimizations:<p>zig build-exe hello.zig -O ReleaseFast  --single-threaded --strip -target x86_64-windows<p>produces hello.exe of 2560 bytes, 1849 from which are zeroes.<p>Note all: winter_blue has right to mention Zig. It&#x27;s about what&#x27;s provided out of the box in that new language and the provided optimizations are really effective.<p>Edit: asking    \nmcountryman to explain: &quot;the compiled rust exe has 480 non-zero bytes&quot; -- I think you mean not just &quot;compiled&quot; but &quot;hand-optimized writing hundreds of lines of the rust source code and not using standard library&quot;? <a href="https:&#x2F;&#x2F;github.com&#x2F;mcountryman&#x2F;min-sized-rust-windows&#x2F;blob&#x2F;master&#x2F;src&#x2F;main.rs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mcountryman&#x2F;min-sized-rust-windows&#x2F;blob&#x2F;m...</a> <a href="https:&#x2F;&#x2F;github.com&#x2F;mcountryman&#x2F;min-sized-rust-windows&#x2F;blob&#x2F;master&#x2F;src&#x2F;types.rs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mcountryman&#x2F;min-sized-rust-windows&#x2F;blob&#x2F;m...</a><p>Edit2: Please note that zig doesn&#x27;t eventually link to printf and libc there, but links and resolves the std calls from the source to the calls to KERNEL32.dll.')