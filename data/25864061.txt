Item(by='zackmorris', descendants=None, kids=None, score=None, time=1611262249, title=None, item_type='comment', url=None, parent=25855864, text='Oh man, that&#x27;s cool and everything, but IMHO the concept of &quot;final&quot; or &quot;sealed&quot; (popularized by Java I think and cargo-culted by C#) is an anti-pattern.<p>A simple proof of how this makes certain use cases impossible is: imagine you want to do reactive programming by watching for when a class variable changes and then running a function to handle that event. The simplest way to do this in something like C# is to create a child class and override the getter&#x2F;setter for the variable. Then pass that child class to any method that accepts the base class. But if it&#x27;s sealed you can&#x27;t do that.<p>To make matters worse, many developers don&#x27;t understand that if you want to use final&#x2F;sealed, then you need to provide an interface for your class. That allows users to write their own classes that implement that interface, but still be drop-in replacements for the original classes. If your class is sealed, and you don&#x27;t write an interface, then there is simply no way to do reactive programming with your class.<p>A workaround is to manually write an interface for the class (in situations that allow that). But even if you get that working, your code is no longer future-proof, because the burden of updating the interface falls on you instead of the original author.<p>A better solution would be to provide an automatically-generated interface for all classes at the language level (something like MyClass::interface). Then additional methods to extend that interface, if desired. Sadly&#x2F;shockingly, I&#x27;m not aware of any language that does that.<p>Now this wouldn&#x27;t seem to be all that important, but it hit me when I was trying to write a Unity library. I want to be notified when classes like GameObject and Mesh change, so that I can perform additional functionality (like updating metadata associated with the class instance). But since those classes are sealed, there is simply no way to do that:<p><a href="https:&#x2F;&#x2F;forum.unity.com&#x2F;threads&#x2F;detect-changes-to-sealed-class-like-mesh-reactively.759248&#x2F;" rel="nofollow">https:&#x2F;&#x2F;forum.unity.com&#x2F;threads&#x2F;detect-changes-to-sealed-cla...</a><p>When a language makes an opinionated decision blocking the user from implementing a common use case like this, it becomes a toy language. I lost weeks trying to find a workaround in Unity before being forced to give up. So I&#x27;m saddened to see Scala make the mistake of adopting a conceptual flaw in the name of an implementation detail like performance.<p>If someone has a workaround for the Unity example I gave, maybe using components or MeshFilter or something, I&#x27;d love to hear it. Please don&#x27;t respond with explanations of inheritance vs composition, because I&#x27;ve already heard them.')