Item(by='Decabytes', descendants=None, kids=None, score=None, time=1611529063, title=None, item_type='comment', url=None, parent=25895807, text='I think the first question is scheme, or Common Lisp? The answer depends on what your style is. After trying both I like scheme better but I agonized over this decision for awhile, though I enjoy sbcl and CLISP is dear to my heart.<p>In terms of schemes you have a wide variety to pick from. Gerbil, Racket, Gambit, Chez, Chicken and many more. Racket is a great all around choice. There are schemes that do various things better than it, but it can do most things well. It has two great edX courses to learn from (How to design simple data, and how to design complex data) and is how I initially learned.<p>Chicken is one of my favorite schemes and is probably the one I would use if I wasn&#x27;t using Racket. It&#x27;s so portable since it compiles to C. I love the egg system, and I like the logo. Gerbil is a performant systems level scheme. I remember there being an article about someone in the Common Lisp community considering jumping to Racket, but ending up on Gerbil Scheme for what it&#x27;s worth. I haven&#x27;t used it<p>Chez is another super performant scheme, and is actually the backend for the Racket programming language as seen in the article above. It was only open sourced a few years ago so it might be difficult to find solutions or get answers. I&#x27;ve used Guile, I appreciate the mission, but I found it wanting. I&#x27;ve heard people ship Gambit scheme apps onto IOS so if you are looking at mobile apps that might be the way to go, I&#x27;m sure Chicken could do that to. I have also heard that Gambits Cffi is one of the best in the business, so if you need to interface with a lot of C code that might be the way to go.')