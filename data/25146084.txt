Item(by='yesenadam', descendants=None, kids=[25146854], score=None, time=1605758453, title=None, item_type='comment', url=None, parent=25145629, text='There are some SNOBOL books on archive.org I had a look at not long ago, including a detailed manual&#x2F;tutorial - fascinating, takes you back to &lt;1970. It seems to have been widely used from the mid 60s on, predating the &quot;Unix Epoch&quot;. It&#x27;s pretty cool and Awk resembles it in many ways. The manual starts with many pages telling you how to load all the tapes for the program in correct order!<p>&quot;It was one of a number of text-string-oriented languages developed during the 1950s and 1960s; others included COMIT and TRAC.<p>SNOBOL4 stands apart from most programming languages of its era by having patterns as a first-class data type (i.e. a data type whose values can be manipulated in all ways permitted to any other data type in the programming language) and by providing operators for pattern concatenation and alternation. SNOBOL4 patterns are a type of object and admit various manipulations, much like later object-oriented languages such as JavaScript whose patterns are known as regular expressions. In addition SNOBOL4 strings generated during execution can be treated as programs and either interpreted or compiled and executed (as in the eval function of other languages).<p>SNOBOL4 was quite widely taught in larger US universities in the late 1960s and early 1970s and was widely used in the 1970s and 1980s as a text manipulation language in the humanities. ...<p>SNOBOL4 supports a number of built-in data types, such as integers and limited precision real numbers, strings, patterns, arrays, and tables (associative arrays), and also allows the programmer to define additional data types and new functions. SNOBOL4&#x27;s programmer-defined data type facility was advanced at the time—it is similar to the records of the earlier COBOL and the later Pascal programming languages.<p>All SNOBOL command lines are of the form<p><pre><code>    label subject pattern = object : transfer\n</code></pre>\nEach of the five elements is optional. In general, the subject is matched against the pattern. If the object is present, any matched portion is replaced by the object via rules for replacement. The transfer can be an absolute branch or a conditional branch dependent upon the success or failure of the subject evaluation, the pattern evaluation, the pattern match, the object evaluation or the final assignment. It can also be a transfer to code created and compiled by the program itself during a run.<p>A SNOBOL pattern can be very simple or extremely complex. A simple pattern is just a text string (e.g. &quot;ABCD&quot;), but a complex pattern may be a large structure describing, for example, the complete grammar of a computer language. It is possible to implement a language interpreter in SNOBOL almost directly from a Backus–Naur form expression of it, with few changes. Creating a macro assembler and an interpreter for a completely theoretical piece of hardware could take as little as a few hundred lines, with a new instruction being added with a single line.&quot;<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SNOBOL" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SNOBOL</a>')