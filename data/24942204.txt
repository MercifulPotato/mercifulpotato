Item(by='tptacek', descendants=None, kids=[24942546], score=None, time=1604066172, title=None, item_type='comment', url=None, parent=24942127, text='I think the idea of somehow using types to express safe vs. unsafe URLs is much less compelling as an SSRF mitigation than using client certificates or proxies to rule them out, which is what shops that are serious about SSRF already do. Meanwhile: I think if you go looking at Rust web applications, you&#x27;re going to find that they in fact do nothing like this at all --- they&#x27;re not using magic types as an SSRF mitigation.<p>Similarly: it&#x27;s not at all my claim that Rust is somehow more susceptible <i>as a language</i> to SQLI attacks!  The opposite thing is true: Rust, <i>as a language</i>, is far better situated to deal with them, because of expressive typing. But that&#x27;s what could be, not what is. In practice, ironic or not, if you implement the same CRUD application in circa-2020 Rust and in Django, the Rust application is more likely to have SQLI.<p>The point is that unlike kernel code or browser components, where memory safety is most of the ballgame and Rust is a real game-changer, web application security is domain-specific. The language and its runtime are much less important to web security than what gets built on top of the language. And right now, even though Python is an objectively inferior language, more of the domain of web security is built more carefully on Django than what&#x27;s available on Rust.')