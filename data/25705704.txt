Item(by='csense', descendants=None, kids=[25707006], score=None, time=1610231812, title=None, item_type='comment', url=None, parent=25704955, text='&gt; The challenge isn&#x27;t technical<p>This problem might have a technical solution though.  First, each voter generates a private key and publishes the corresponding public key.  Then implement a homomorphic vector addition, everybody submits their vote as an encrypted vector, and then you somehow add the vectors together homomorphically, i.e. the addition can be done without decrypting them first.<p>You need some kind of way to prove that each vector corresponds to a legal vote (i.e. increases the vote total of at most one candidate by at most one vote.)  Then you need some way to decrypt the encrypted vector sum using some amalgamation of everybody&#x27;s public keys, but without allowing to decrypt subtotals for particular subsets.<p>You can publish all the encrypted votes received and the decrypting amalgamation, so anyone with the capability to download and process a large data set.  Anyone can check that every vote was cryptographically approved by a distinct pre-registered voter and the votes were totaled honestly.<p>If we assume an upper bound of 1 billion voters, each 1 kb of encrypted vector size adds 1 TB to the raw vote data.  Based on existing &quot;clever&quot; cryptosystems that do similar things (e.g. ZK-snarks), it&#x27;s reasonable to guess we won&#x27;t need more than 100 kb per encrypted vector.  So an entire 1-billion-voter election could be processed by a small storage cluster with 100 TB, you can&#x27;t verify it on your laptop, but the technically inclined could verify the vote themselves for probably somewhere around $1,000 - $20,000 of hardware and sysadmin time.<p>I don&#x27;t know if there&#x27;s existing crypto math to do this, but I&#x27;m pretty sure it at least hasn&#x27;t been proven impossible.<p>The kind of crypto primitives needed for this kind of system <i>might</i> be found someday.')