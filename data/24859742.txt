Item(by='q3k', descendants=None, kids=[24860029], score=None, time=1603383766, title=None, item_type='comment', url=None, parent=24859451, text='Three things to address:<p>1) This doesn&#x27;t have to be a two-step process. Specialized tools like kubecfg for Jsonnet will directly take a Jsonnet top-level config and instantiate it, traverse the tree, and apply the configuration intelligently to your Kubernetes Cluster.<p>2) General purpose languages are at a disadvantage, because most of them are impure. Languages that limit all filesystem imports to be local to a repository and disallow any I&#x2F;O ensure that you can safely instantiate configuration on CI hosts, in production programs, etc. The fact that languages like Jsonnet also ship as a single binary (or simple library) that requires no environment setup, etc. also make them super easy to integrate to any stack.<p>3) Configuration languages tend to be functional, lazily evaluated and declarative, vastly simplifying building abstractions that feel more in-line with your data. This allows for progressive building of abstraction, from just a raw data representation, through removal of repeated fields, to anything you could imagine makes sense for your application.<p>Related reading: <a href="https:&#x2F;&#x2F;landing.google.com&#x2F;sre&#x2F;workbook&#x2F;chapters&#x2F;configuration-specifics&#x2F;" rel="nofollow">https:&#x2F;&#x2F;landing.google.com&#x2F;sre&#x2F;workbook&#x2F;chapters&#x2F;configurati...</a>')