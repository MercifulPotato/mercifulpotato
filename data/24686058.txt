Item(by='choeger', descendants=None, kids=[24692733, 24687657], score=None, time=1601891007, title=None, item_type='comment', url=None, parent=24685882, text='&gt; I think a large contributor to the problem is story-oriented development, where all that matters in the sprint is &quot;getting it done&quot; and not looking at the broader context.<p>I think you have a point here. This design offers much better safety, comparable to &quot;parsing instead of validating&quot;. But it requires up-front design. And that is indeed &quot;verboten&quot; in modern software development management style.<p>Why is it &quot;verboten&quot;? I think it has to do with two fundamental concepts of scrum et. al.:<p>1. Stories that are &quot;ready&quot; just need to be &quot;implemented&quot;. The implication is that the developer does not design and everything is orthogonal. There are no interdependencies, maintenance effort or non-functional requirements.<p>2. A story that is &quot;ready&quot; focuses solely on the desired outcome for some selected examples. There is no generalization of the examples and consequently little to no abstraction.<p>I think these issues stem from the fact that Scrum et. al. are intrinsically tools for managers to isolate them from the complexities of software engineering. Every metric of scrum, for instance, like &quot;progress&quot; or &quot;definition of ready&quot; is essentially empty of meaning for software engineering.')