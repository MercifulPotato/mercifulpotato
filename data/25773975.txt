Item(by='staticassertion', descendants=None, kids=[25776110], score=None, time=1610615462, title=None, item_type='comment', url=None, parent=25773101, text='You can do this with any language with a type system by wrapping reads with a &#x27;Tainted&#x27; type.<p>ie:<p>fn safe_read(path: str) -&gt; Tainted&lt;IO&gt; {\n  Tainted(unsafe_read(path))\n}<p>And then you can apply functions to Tainted&lt;IO&gt; or whatever type that convert it into something structured &#x2F; validated.<p>So long as your functions only take in those validated types (ie: you do not write functions that take str) you can ensure that new reads will fail to typcheck without first parsing.<p>To be honest this is how most programs I see work anyways, at least in typed languages. Few work directly on strings. But they do it naturally, without enforcement - so like, a function might take a &#x27;str&#x27;, but the &#x27;str&#x27; passed in was parsed into a wrapping structure already.')