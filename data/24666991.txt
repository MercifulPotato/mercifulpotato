Item(by='bdowling', descendants=None, kids=[24668563], score=None, time=1601672561, title=None, item_type='comment', url=None, parent=24660967, text='&gt; If you do a worst-case analysis, hash tables just degenerate to a single linked list ... That&#x27;s where you have 0(n) performance.<p>Even under a best-case analysis, hash table lookups are O(N) when using a single hash function. Assume you have a perfect hash function such that the N inputs are equally distributed among K output values (each of K gets (1&#x2F;K)<i>N values). Lookup will be O((1&#x2F;K)</i>N). O(C<i>N) = O(N) for any constant C. (1&#x2F;K) is constant, therefore lookups are O((1&#x2F;K)</i>N) = O(N).<p>&gt; Out of that, we can compute that hash table operations are on average constant.<p>The only way you get constant time is if the number of collisions is bounded by some constant. That&#x27;s not possible for arbitrary N when using a single hash function and constant K, as shown above.<p>Actual implementations try to improve performance by rebuilding the hash table as more items are inserted, using a new hash function with larger K. This can keep the linked list sizes bounded by some constant, which means O(1) lookups but at the cost of rebuild operations which are at least O(N). (Note: The optimal hash table is one in which K&gt;=N with no collisions.)')