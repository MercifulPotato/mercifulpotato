Item(by='ChuckMcM', descendants=None, kids=[25804972, 25804880, 25804955, 25804938], score=None, time=1610825157, title=None, item_type='comment', url=None, parent=25803748, text='In my opinion I think everyone who considers themselves a &quot;software engineer&quot; should be required to build a computer out of discrete logic. Of course these days doing that with an FPGA would count too, assuming you don&#x27;t use too many pre-canned IP blocks[1]. My reasoning here is that understanding a computer at this level really helps understand programming, and perhaps more importantly the translation between what you want a program to do and how the computer would actually do it.<p>That said, some nits on the author&#x27;s description, what he calls &quot;micro code&quot; are simply instructions. When you look at computer architecture texts you will see that architectures that implement instructions with logic are &quot;non-microcoded&quot; and architectures that implement instructions of one width as a sequence of instructions of a different width, are &quot;microcoded&quot;. The trade-off is that that former executes operation codes faster, the latter can be more efficiently implemented. A great real world example to study here are the PDP-8 (straight opcodes) and the PDP-11 (microcoded).<p>The most amazing thing to me is that today you can buy something like the ULX3S[2] and with a fully open source tool chain for the FPGA build a processor (RISCV) that boots Linux multi-user.<p>[1] Using a pre-made ALU is fine, starting from a previous CPU, less good :-).<p>[2] <a href="https:&#x2F;&#x2F;www.crowdsupply.com&#x2F;radiona&#x2F;ulx3s" rel="nofollow">https:&#x2F;&#x2F;www.crowdsupply.com&#x2F;radiona&#x2F;ulx3s</a>')