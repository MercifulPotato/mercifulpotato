Item(by='simias', descendants=None, kids=None, score=None, time=1601923182, title=None, item_type='comment', url=None, parent=24688320, text='Aren&#x27;t most modern CPUs tickless[1]? They effectively work the way you describe, the scheduler will sleep as long as possible instead of just &quot;ticking&quot; a NOP if nothing is scheduled.<p>The problem is that what you describe is very hard to guarantee in a non-realtime OS. Modern CPUs are pretty damn fast, that&#x27;s true, but they can&#x27;t task switch on a dime. The delay between an IRQ being triggered and task being scheduled can vary pretty wildly, especially if the CPU is already under a heavy load.<p>You can still try your luck with nanosleep() and see how that treats you. It might work. It probably won&#x27;t <i>always</i> work.<p>In general if you need to react so fast on some event you probably want to avoid polling at all costs. That&#x27;s why most OSs are fine relaxing timer constraints for better overall performance. If you can&#x27;t react on an external interrupt and you really need to be reactive busy-polling is still probably your best bet.<p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tickless_kernel" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tickless_kernel</a>')