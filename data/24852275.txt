Item(by='dfabulich', descendants=None, kids=[24852830, 24854892], score=None, time=1603314949, title=None, item_type='comment', url=None, parent=24852116, text='Right below the line you quote, the author makes three arguments:<p>&gt; • It’s highly instructive, in a way that using a parser generator is not. To quote Feynman: “What I cannot create, I do not understand”<p>&gt; • It’s an important skill: most real-world compilers use hand-written parsers because they provide more control over error handling, significant whitespace, etc.<p>&gt; • It’s not actually difficult!<p>The exercises themselves are meant to justify these arguments.<p>I think the exercises conclusively demonstrate that #1 and #3 are true. If you can easily follow these exercises, and if, by the end, you feel like you&#x27;ve learned something useful, then it follows that hand-rolling a parser is instructive and not too difficult.<p>I strongly agree with the author that if you&#x27;re developing a language for the first time, you shouldn&#x27;t use a parser generator at first. You should hand-roll a parser first, and then, when you see the limitations of your hand-rolled parser, adopt a parser generator, now with full understanding of what the generator is doing for you (and not doing for you).<p>As for #2, the article demonstrates how to do error handling in a manner that would be a head-scratcher in Yacc.<p>You claim here that it was easier to develop a &quot;human friendly&quot; syntax with megaparsec than it was to do that in a hand-rolled recursive-descent parser. That could be true, but that&#x27;s not my experience. To be convincing, you&#x27;d need to do what the author did, (even though you say the author didn&#x27;t): you&#x27;d need to justify your argument with specific examples.')