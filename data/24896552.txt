Item(by='quietbritishjim', descendants=None, kids=None, score=None, time=1603722829, title=None, item_type='comment', url=None, parent=24895900, text='&gt; The owner of the repo writes many single-file libraries in C. Apparently you are not familiar with his coding style; otherwise you wouldn&#x27;t have these complaints on linking.<p>I never claimed to be writing only about his libraries, but instead about single-file libraries in general. Sorry if I wasn&#x27;t clear about that.<p>&gt; For his (and many others&#x27;) libraries, you &quot;instantiate&quot; the implementation in a .c file and declare functions in other source files. This way you only compile the library implementation once.<p>I tried to make clear which of the bullet points only applied to header-only libraries (again, apologies if it wasn&#x27;t clear). For example, my objection to compiling the same library multiple times specifically applied only header only libraries. As you say, with two-file (or single .c file, if you like) libraries you only have to compile the library once per build of your program - but as I made clear in a separate point, that is still potentially a pain if you do a clean build (but it could be mitigated by having a separate CMake target, or whatever, that contains all your library files).<p>&gt; In addition, although the name of the repo is &quot;single_file_libs&quot;, it links to many double-file libraries consisting of a pair of .c and .h files. These libraries won&#x27;t have the issues you are talking about. Developers are well aware of the potential linking problems.<p>As I just said, I had tried to distinguish those cases. They&#x27;re less problematic, but still somewhat problematic.<p>&gt; That said, you are right that single&#x2F;double-file libraries tend to be small. It is hard to work with a file with &gt;10,000 LOCs anyway.<p>Yes, and if you only need a small number of small libraries then all my objections are a lot less severe. To spin the conclusion on its head - you can avoid going down the package manager route if you avoid having any large dependencies. For some projects that&#x27;s acceptable. Personally, I find the pain of working without basic largish libraries like protobuf to be enormous compared to the relatively simple process of using a package manager.')