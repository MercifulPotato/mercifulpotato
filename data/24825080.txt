Item(by='lifthrasiir', descendants=None, kids=[24825203], score=None, time=1603104727, title=None, item_type='comment', url=None, parent=24824852, text='I&#x27;m not the author but I&#x27;ve done this before [1], so here&#x27;s what I can quickly make up (EDIT: updated using informations gathered from p01&#x27;s comment below):<p><pre><code>    &#x2F;&#x2F; c is a canvas created outside\n    d = [ &#x2F;&#x2F; 2 times audio frequencies used, I think\n      2280,\n      1280,\n      1520,\n      c.width = 1920,\n      &#x2F;&#x2F; d[4] is not used, not sure why this stmt was stuffed into d\n      &#x2F;&#x2F; required to hide the PNG bootstrap; the bare minimum would be `0&#x27;`, probably this compresses better though?\n      document.body.style.font = &quot;0px MONOSPACE&quot;\n    ],\n    g = new AudioContext,\n    o = g.createScriptProcessor(4096,\n                                &#x2F;&#x2F; clears the margin and initializes vars\n                                &#x2F;&#x2F; (t: time in seconds, n: last t when speak occurred)\n                                document.body.style.margin = t = n = 0,\n                                1),\n    o.connect(g.destination),\n    o.onaudioprocess = o =&gt; { &#x2F;&#x2F; periodically called to fill the audio buffer, used in place of setInterval\n      o = o.outputBuffer.getChannelData(\n        e = Math.sin(\n          t &#x2F; 16 % 1, &#x2F;&#x2F; this is the only arg to sin, others are for shoving exprs into a single stmt\n          m = Math.sin(Math.min(1, y = t &#x2F; 128) * Math.PI) ** .5 + .1,\n          c.height = 1080, &#x2F;&#x2F; setting canvas.width&#x2F;height clears the canvas\n          b.shadowOffsetY = 32420,\n          &#x2F;&#x2F; results in `radial-gradient(#222,black` or so, reinterpreting decimal number as hex, the last `)` is not required\n          c.style.background = &quot;radial-gradient(#&quot; + [222, 222, 222, 222, 155, 155, 102, 102][t &#x2F; 16 &amp; 7] + &quot;,black&quot;,\n          b.font = &quot;920 32px MONOSPACE&quot;,\n          &#x2F;&#x2F; each function determines the dot size for 16 seconds, also sometimes used as a display text\n          f = [\n            (x, y, t) =&gt; x &#x2F; y * 2 - t,\n            (x, y, t) =&gt; (x ** 2 + y ** 2) ** .5 - t,\n            (x, y, t) =&gt; x &#x2F; 4 ^ y &#x2F; 4 - t,\n            (x, y, t) =&gt; y % x - t\n          ][t &#x2F; 16 &amp; 3],\n          &#x2F;&#x2F; determines a string to print and speaks it every 16 second\n          &#x2F;&#x2F; the inner [...][t&#x2F;16|0] can return undefined, which gets coerced to an empty string by `&quot;&quot;+[...]`\n          u = &quot;&quot; + [[, f, f, &quot; CAN YOU HEAR ME&quot;, f, f, , &quot;MONOSPACE&quot;, &quot;THE END&quot;][t &#x2F; 16 | 0]],\n          t &gt; n &amp;&amp; speechSynthesis.speak(new SpeechSynthesisUtterance(u, n += 16)))\n      );\n      for (i = 0; 4096 &gt; 4 * i; i++) &#x2F;&#x2F; for each dot; `4096&gt;4*i` probably compresses better than `1024&gt;i`\n        &#x2F;&#x2F; calculate the dot size and mix with the radius in the previous frame for easing\n        &#x2F;&#x2F; f and g are objects (function and AudioContext), so can be abused as a generic store\n        g[i] = r = (f(x = 16 - i % 32, a = 16 - (i &#x2F; 32 | 0), t) &#x2F; 2 &amp; 1) + (g[i] || 0) &#x2F; 2,\n        x += o[0] &#x2F; 4 + 4 * (1 - m ** .3) * Math.sin(i + t + 8),\n        a += o[64] &#x2F; 4 + 4 * (1 - m ** .3) * Math.sin(i + t),\n        h = x * Math.sin(y * 2 + 8) + a * Math.sin(y * 2),\n        p = 4096 &#x2F; (m * 32 + 4 * h * Math.sin(e) + t % 16),\n        b.beginPath(f[i] = r &#x2F; p),\n        b.arc(h * Math.sin(e + 8) * p + 1280,\n              x * Math.sin(y * 2) * p - a * Math.sin(y * 2 + 8) * p - 31920,\n              p &gt; 0 &amp;&amp; p &#x2F; (2 + 32 - r * 16),\n              0,\n              8), &#x2F;&#x2F; anything larger than `2*Math.PI` will draw a full circle\n        b.shadowBlur = o[0] ** 2 * 32 + 32 - m * 32 + 4 + h * h &#x2F; 2,\n        &#x2F;&#x2F; `[a,b,c]` coerces into a string `a,b,c`\n        b.shadowColor = &quot;hsl(&quot; + [f(x, y, t) &amp; 2 ? t - a * 8 : 180, (t &amp; 64) * m + &quot;%&quot;, (t &amp; 64) * m + &quot;%&quot;],\n        b.fill();\n      b.shadowBlur = o[0] ** 2 * 32,\n      b.shadowColor = &quot;#fee&quot;;\n      for (i = 0; 4096 &gt; i; i++) &#x2F;&#x2F; generate each sample, also prints the glitched text\n        o[i] = o[i] &#x2F; 2 + (\n          (\n            Math.sin(t * d[t &#x2F; [4, 4, 4, 4, 1&#x2F;4, 1&#x2F;4, 16, 4][t &#x2F; 16 &amp; 7] &amp; 3] * Math.PI) * 8 +\n            (t * d[t &#x2F; 8 &amp; 3] &#x2F; 2 &amp; 6) + t * d[t &#x2F; 16 &amp; 3] &#x2F; 4 % 6\n          ) &#x2F; 64 + f[i &#x2F; 4 | 0] &#x2F;&#x2F; f[0..1023] is the visual data, reused as a noise\n        ) * m,\n        &#x2F;&#x2F; prints at most 64 characters of u;\n        &#x2F;&#x2F; 0th and 64th samples (o[0] &amp; o[64]) of the prev&#x2F;current buffer act as x&#x2F;y jitter,\n        &#x2F;&#x2F; first 64 samples also displaces the char offset for the glitched text effect\n        64 &gt; i &amp; t % 16 * 6 &gt; i &amp;&amp;\n          b.fillText([u[i + (o[i] * 2 &amp; 1)]], &#x2F;&#x2F; again, [undefined] coerces into an empty string\n                     i % 9 * 32 + o[0] * 16 + 180,\n                     (i &#x2F; 9 | 0) * 64 + o[64] * 16 - t - 31920),\n        t += 1 &#x2F; g.sampleRate &#x2F;&#x2F; so t increments by 1 per second\n    }\n</code></pre>\nWhile the obfuscation itself is fairly standard, I think the real magic here is the carefully selected motion and jitters---which I can&#x27;t easily figure out from a glance.<p>&gt; Do you work directly in the minified code, or do you create the demo in normal code first then look for ways to minimize it?<p>Also, in my experience you end up structuring everything so that it can be easily minifiable (by hand or using something like terser-online [2]). This doesn&#x27;t necessarily mean that the code is unreadable (variables can be renamed, statements can be converted to comma expressions and so on), but the resulting code would be very unorthodox. See the source code of my JS1024 entry for example.<p>[1] <a href="https:&#x2F;&#x2F;www.js1024.fun&#x2F;demos&#x2F;2020#46" rel="nofollow">https:&#x2F;&#x2F;www.js1024.fun&#x2F;demos&#x2F;2020#46</a><p>[2] <a href="https:&#x2F;&#x2F;xem.github.io&#x2F;terser-online&#x2F;" rel="nofollow">https:&#x2F;&#x2F;xem.github.io&#x2F;terser-online&#x2F;</a>')