Item(by='rleigh', descendants=None, kids=None, score=None, time=1603559030, title=None, item_type='comment', url=None, parent=24872881, text='There are likely to be some, but they will be a minority.  And just like open source projects, their number will be dwindling.  In both arenas, I&#x27;ve encountered CMake more than anything else over the course of the last decade.<p>You&#x27;re absolutely correct that Autotools is no longer synonymous with portability.  If it ever was.  Not catering for Windows or iOS means it&#x27;s missing out on the lion&#x27;s share of the market.  There&#x27;s a massive misplaced priority in catering for 90s Unix platforms which have marginal use by hobbyists and zero commercial use, above current open source and proprietary platforms.  And this doesn&#x27;t just extend to operating systems, it also extends to language support.  C++17, C++20, Rust, Go, Swift, you name it.  It&#x27;s not kept up.  Likewise build systems.  It&#x27;s make-only.  And what about language and platform feature tests and support for stuff like threading, locking etc.  It&#x27;s non existent other than some third-party support which is quite limited.<p>It&#x27;s for all these reasons, as well as other well documented problems, that I moved all my personal projects over to CMake, as well as work projects, and other open source projects.  I needed to support Windows.  I needed to support building libraries on multiple platforms.  I needed threading support.  I needed C++14, and C++17 support.<p>For some open source projects I maintain both Autotools and CMake support.  I&#x27;ve had several instances of people trying to build on e.g. Solaris and having problems.  I always ask &quot;Were you using the Autotools build, or CMake?&quot;  They tell me they used the Autotools and I suggest retrying with CMake.  It always works.  In short: portability to other Unix systems is inferior today compared with CMake.  That&#x27;s supposed to be its main advantage...<p>Agreed about the shell.  There is no point to M4 and it could be removed compatibly by replacement with shell functions.  This was true a decade ago.  It was even true two decades ago.<p>With regards to migration.  The time, money and effort required to upgrade the Autotools would be better spent on converting the affected project(s) to use CMake or some other more modern build tool.  The functionality gap is simply too big to overcome at this point, and the contributor base for CMake is large.  The FSF have only themselves to blame for their contribution and development practices hindering forward progress, as well as a lack of concern for the real-world needs for software development.  The turnaround time for submitting a CMake change is a few days to get it change reviewed and integrated, and a few weeks to be in a release.<p>I&#x27;ve converted some large and complex projects to use CMake over the years, including Xerces-C, Xalan-C, libtiff and others.  All in all, that time was well spent, and I&#x27;d rather have done this than waste time updating Autoconf&#x2F;make&#x2F;libtool.<p>Regarding Debian.  Current unstable Build-Depends is 1999 (CMake), 1544 (Autotools), 395 (Meson).  So I think we&#x27;re a good way past the tipping point now.<p>Full disclosure: I&#x27;ve done the FSF copyright assignment for Autoconf and Automake and submitted some major features like C99 support.  I&#x27;m also a CMake maintainer and I&#x27;ve submitted many different changes there.  Primarily lots of Find module support including the Boost support, but also some lower-level bits and pieces as well.  The community surrounding CMake is very active and also very friendly to submissions from new people.  Kitware really deserve appreciation and thanks for their fostering and growing the community and committing resources to it including timely and friendly code review.')