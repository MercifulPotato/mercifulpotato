Item(by='ants_a', descendants=None, kids=[25315094, 25289028], score=None, time=1607004209, title=None, item_type='comment', url=None, parent=25288393, text='I did some time series data benchmarking recently. Most large data is &quot;time series&quot; data, but I will not digress on terminology right now. For the usecase I was looking at my results for InfluxDB did not qualitatively disagree the above blogpost. Timescale got better compression efficiency, faster query results, more constrained memory usage, but lower ingest speed at high concurrencies blocked by WAL insert locking and single threaded compression. If InfluxDBs measurement oriented data model and query interface is a good fit for your use case, and you don&#x27;t have high cardinality data, then it might be convenient to use it, but it&#x27;s a terrible choice for anything outside its niche.<p>However none of the databases tested above is anywhere close to the efficiency of a column store database that can do vectorized execution over batches of rows. ClickHouse is a good example of one such database. For queries that have to shift through large amounts of data, either filtering or aggregating it, the performance difference is easily &gt;10x. I was seeing aggregation performance above 2B rows&#x2F;s and that was I&#x2F;O throughput bound.')