Item(by='solidasparagus', descendants=None, kids=[25297720], score=None, time=1607026367, title=None, item_type='comment', url=None, parent=25289079, text='&gt; I think the team at AWS that built it should be reassigned and contractors or an A team brought in to try and salvage it<p>That&#x27;s a knee-jerk assessment. You don&#x27;t know the first thing about Timestream&#x27;s development and we are only a few years into the development process of what I believe is a novel architecture for a timeseries database. Give it another couple of years and then we can take a look at how Timestream is doing.<p>One of Amazon&#x27;s advantages is the ability to plan and execute on a longer time scale than their competitors. They can take approaches that take longer to bear fruit but are better in the long term.<p>Timestream is a scalable timeseries database with separated compute and storage built for extremely high volumes (or that&#x27;s my guess given the architecture offloads cold data to magnetic storage). Whereas Timescale seems to be timeseries functionality added to Postgres - which means they are probably going to hit scaling (perf&#x2F;cost) issues once they need to work at petabyte scale. And my guess would be that their coupling to Postgres is going to make it painful to build for that scale. They also claim to offer separated compute and storage, but based on the pricing model it seems to be that you can change your CPU+Storage configuration, not an ephemeral design where you only pay for compute when it&#x27;s needed - very different from Timestream&#x27;s ephemeral pricing model. This is a pure guess, but I would imagine that Timescale being built on top of Postgres is going to make a truly serverless SaaS (i.e. pay for only what you use) very difficult to build.<p>Time will tell, but this is sort of if MySQL benchmarked writes against Snowflake 5 years ago and then thinking that everyone at Snowflake should be fired.')