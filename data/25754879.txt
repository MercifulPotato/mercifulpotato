Item(by='Jtsummers', descendants=None, kids=[25754942], score=None, time=1610490657, title=None, item_type='comment', url=None, parent=25754430, text='&gt; Every wrapper is a thing itself which must also be understood when trying to understand how things work.<p>I&#x27;d offer a different view. Wrapping&#x2F;abstracting like this should reduce the amount of things a user of the abstraction needs to know. I don&#x27;t care how Java&#x27;s BigInteger class works under the hood, only that it does what I need it to do. If I did have to know how it worked to use it, this suggests a failure on the part of whoever created it.<p>It <i>does</i> increase what the maintainer of the underlying system (including the abstraction) needs to know, but if done in a sane manner this should not be a burden. So we&#x27;re making a tradeoff. The user gets something simpler, the underlying system maintainer gets something a bit more complex. Or the user gets something more complex and with more boilerplate but the underlying system maintainer gets something simpler (though will be pestered with, &quot;Why don&#x27;t you offer a generic set yet?&quot; asked for years to come).<p>&gt; meaning if you have changes which impact multiple layers of wrap, its harder to determine what to change, and to maintain the understandability of each layer.<p>When this happens, in my experience, it has meant one or more of:<p>1. The choice of how to wrap&#x2F;abstract was poorly chosen<p>2. The choice was made too early (before the problem was properly understood)<p>3. A major change was made that would&#x27;ve been hard to identify&#x2F;plan for earlier<p>I ignore (3) when writing code beyond what&#x27;s reasonable to plan for. (1) and (2) though mean I mostly agree with this:<p>&gt; Create an abstraction at the last moment<p>But rephrased, borrowing the phrase I first saw in some Lean Software book, &quot;last responsible moment.&quot; It&#x27;s not sensible, for instance, to use a map to booleans as a set throughout the project&#x27;s life and only wrap it at the last moment. If you know it&#x27;s going to be a set, wrap it early because this offers clarity to your code and reduces boilerplate&#x2F;noise. If you know you need a stack, and have a vector available, wrap it and hide the random access option. <i>If</i> it later turns out that you <i>also</i> want random access, you can offer it, but if it&#x27;s been available from the start then users will have abused that and you won&#x27;t be able to rein it in later (without a lot of effort and heartache).')