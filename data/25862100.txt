Item(by='WorldMaker', descendants=None, kids=None, score=None, time=1611253134, title=None, item_type='comment', url=None, parent=25855379, text='A key feature to the recent JS and C# implementations of string interpretation (&quot;template strings&quot;) was that both provide a way to pass a template string to a function in a deconstructed form (an array of string parts, and an array of the strings expected to fill their holes). In C# it&#x27;s a static type expectation (if you cast to a string you get the final formatted string, if you request the FormattableString you get the full deconstructed meta-object) and in JS it&#x27;s a special function call signature (`` is the template string delimiter and a function that takes the deconstructed parts of a template string is prefixed functionname`example string`).<p>This bit of additional functionality in both JS and C# makes their interpolated strings&#x2F;template literals extremely useful for i18n (and other uses such as query parameterization and injection attack avoidance).<p>I&#x27;m surprised that in comparing the efforts of other languages Python didn&#x27;t include such functionality in the f-strings PEP. I wonder if such a feature could be added in a non-disruptive way. Maybe a meta-property like a __format_parts__ or something?')