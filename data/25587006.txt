Item(by='Alupis', descendants=None, kids=[25587095], score=None, time=1609367491, title=None, item_type='comment', url=None, parent=25586242, text='&gt; I&#x27;m curious: what&#x27;s wrong with myFunc(List&lt;BaseClass * &gt;) ??<p>Well, nothing I suppose, except BaseClass cannot then be a template, and you cannot have derived class-specific return types like a template would allow.<p>So, having BaseClassInt type return int from some function but BaseClassLong return a long gets more challenging than it should be. (I recognize all my examples so far had a void return type, that was just for simplicity).<p>&gt; But both BaseClass * and DerivedClass * are compatible with each other, and may convert into each other, as long as you know the pointer goes to the right kind of class)<p>Which loses type safety, unfortunately.<p>&gt; In this case, we&#x27;ve created a static_assert (aka: a compile-time error will pop up) if T does not convert into BaseClass<p>I&#x27;ll look into the static_assert() option, could prove useful in some cases.<p>At the end of the day, there are two things at play here - my lack of C++ familiarity, and in some cases it&#x27;s just how C++ is.<p>It is a strange feeling though, having a language limit your expressiveness for the first time...')