Item(by='pmeunier', descendants=None, kids=[25248305], score=None, time=1606678263, title=None, item_type='comment', url=None, parent=25246830, text='&gt; As far as I understand, the main change with respect to Git is that commit hashes don&#x27;t change depending on previous history, so if you rebase the same change IDs are retained.<p>That is not the main change, merely a by-product. There are many changes:<p>- Perhaps one of the most crucial differences is that Pijul uses a rigorous merge algorithm, and doesn&#x27;t run into the bad merge examples described in [1]. Note that the situation described there happens without any conflict, and doesn&#x27;t tell anything to the user.<p>- Changes that could be written independently commute, meaning that they can be pushed independently. You don&#x27;t have to worry about isolating them on feature branches, which can save time if you (like me) work on many features at the same time.<p>- Rebase and Merge are the same operation in Pijul, and happens automatically. Conflicts happen between changes, and conflict resolutions are recorded as changes, so you don&#x27;t need any `git rerere` (which essentially guesses what to do), since conflict resolutions work even in a different context.<p>- Everything is invertible! You can even remove an old change from a channel if you like, as long as other changes don&#x27;t depend on it.<p>&gt; I don&#x27;t like that two repositories in different states could have the same commit ID.<p>That never happens in Pijul. Changes are not commits, they&#x27;re diffs between commits. And states have identifiers too, they&#x27;re just more subtle: if you have two changes A and B, Pijul can apply them in any order without changing the result (so why change the commit id?). In Pijul, if you run `pijul log --state`, on &quot;A, then B&quot; and &quot;B, then A&quot;, you will get the same state id.<p>[1] <a href="https:&#x2F;&#x2F;pijul.org&#x2F;manual&#x2F;why_pijul.html" rel="nofollow">https:&#x2F;&#x2F;pijul.org&#x2F;manual&#x2F;why_pijul.html</a>')