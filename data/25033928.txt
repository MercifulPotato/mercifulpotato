Item(by='k32', descendants=None, kids=None, score=None, time=1604924049, title=None, item_type='comment', url=None, parent=25031531, text='&gt; Except that your anecdote is completely misleading given that the patched version was intended for creating Nix packages. You could&#x27;ve just used the unmodified version instead.<p>The package was called rebar3, not rebar3-nix or something. If the fork was called differently then no one would complain. Also this fork was based on hacks, like patching rebar3&#x27;s internal files and messing with caches. If you don&#x27;t see anything wrong about this, then this way of thinking just proves what I said in the parent.<p>But forking rebar3 wasn&#x27;t needed at all, because rebar3 _already_ had all the features needed for Nix. Namely, it has get-deps command producing fixed output derivation, and it supports _checkouts directory, needed for hermetic build.<p>&gt; Then use the unmodified rebar3 for your project instead. But anyways, if your threat model involves not trusting SHA256, you likely have a problem with your said cryptographic chain of custody too.<p>There&#x27;s no reason to use SHA256, if you just replace it with a different SHA256 whenever it doesn&#x27;t match with the upstream.<p>&gt; Nix even alleviates some of the problems because you can use different versions of the same software, meaning that different packages don&#x27;t have to share dependencies as aggressively as other distros do.<p>Docker exists. Although it&#x27;s not perfect by any means, it doesn&#x27;t require reinventing the entire world. I extrapolated my experience with Erlang to the rest of NixOS reinventions, which in theory could be wrong, but it was convincing enough for me.<p>&gt; That&#x27;s an outright lie. NixOS doesn&#x27;t prevent you from storing secrets in a file and applying your usual UNIX permissions. FHS has absolutely nothing to do with it.<p>I was not talking about &quot;storing secrets in a file&quot;, but rather about the whole live cycle of the secrets, including transferring them between parties, storing, provisioning, rotation, etc (imagine you have to solve a problem of changing some secret on 100 machines securely and reproducibly via blue&#x2F;green deployment). As far as I know, Nix doesn&#x27;t provide facilities for solving this problem at scale. I would be happy to be proven wrong.<p>&gt; FHS has absolutely nothing to do with it.<p>It absolutely does. Some pieces of software look for secrets in &#x2F;etc&#x2F; (Kafka, for example). When etc (or its analogue in &#x2F;nix) is world-readable hilarity ensues.')