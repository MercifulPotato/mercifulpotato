Item(by='amw-zero', descendants=None, kids=[25604915, 25605561], score=None, time=1609516142, title=None, item_type='comment', url=None, parent=25601821, text='These are some pretty cool examples, though a little too nitty gritty to communicate the practical importance of state machines. The truth is, state machines are so fundamental that programmers are not even aware that they are using them. Many, if not most, computer programs can be seen as state machines. In fact, programming can quite literally be seen as state machine creation and management. Programming languages are tools for creating complex state machines without having to manually wire them together.<p>For example, take the following factorial function in Python:<p><pre><code>    def factorial(n):\n      result = 1\n      while n &gt; 1:\n        result *= n\n        n -= 1\n\n      return result\n</code></pre>\nHere is a TLA+ spec for the same algorithm, along with the corresponding state diagram for calculating factorial(5): <a href="https:&#x2F;&#x2F;gist.github.com&#x2F;amw-zero&#x2F;c604f4dfd2d98e0d77fffe602c632147" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;amw-zero&#x2F;c604f4dfd2d98e0d77fffe602c6...</a>. This is a simple example, but the state diagram illustrates an important point that the while loop doesn&#x27;t: the algorithm is completely linear, meaning it simply builds upon previous states. Even though there is branching in the code, there is no branching in the state diagram.<p>Of course, we&#x27;re not so lucky and most state spaces are not linear. Here&#x27;s the spec and diagram for a user interface that I was building a while back: <a href="https:&#x2F;&#x2F;gist.github.com&#x2F;amw-zero&#x2F;4dc16cbf8e578d9be9e68b0a85cb93bd" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;amw-zero&#x2F;4dc16cbf8e578d9be9e68b0a85c...</a>. There was a subtle state-based bug where a user had to perform a special sequence of events to experience it. The code seemed simple, but looking at the state diagram directly showed what the bug was immediately.<p>This was in a React app, and doing this exercise made me realize that React apps trivially translate to state machines as well. Whenever you call `setState` or the corresponding `setHookValue` function when using hooks, you are defining a state transition. The set of all state variables determines the full state space of the application, and bugs arise when we forget to consider that fact within some of our transition functions.<p>Long story short, you don&#x27;t need to use a state machine design pattern such as Xstate to actually have a state machine. In fact, unless you are doing some very weird things, your application most likely already is a state machine under it all, but that&#x27;s only because a state machine is a very simple, general concept that has tons of applications.')