Item(by='l0b0', descendants=None, kids=[25484697, 25483582, 25483562, 25483521], score=None, time=1608429219, title=None, item_type='comment', url=None, parent=25482410, text='&gt; XML, however, was universally rejected in favour of things like JSON, Yaml, HCL, Toml - all free of structure, with zero indication whether a computer would find your prose gibberish or the next Shakespeare play until you actually pushed your code to some test cluster.<p>There are a few fundamental differences between these languages, but it&#x27;s just plain wrong to say that any of them are not &quot;structured.&quot; Did OP mean &quot;schema-less&quot; instead? Because the only fundamental difference at that level is that XML has a built-in mechanism for metadata referring to a file&#x27;s own schema, while in JSON (and I believe the others, even though I&#x27;ve used them less) the schema is not linked from within the file itself. You can still <i>verify</i> the schema of these languages, though, just as you could with XML. And once you&#x27;ve verified the schema, local code can do stricter validation to make sure things hang together properly, that values are within limits, and so on. After that, I expect modern tools like Terraform and CDK to check with the target platform that the scheduled change can be applied before trying to change anything.<p>That said, OP has several valid points:<p>- Many projects try to make a microservices architecture long before it&#x27;s needed, even in projects where it might <i>never</i> be needed. I suspect some people think microservices are actually easier to maintain, since they are smaller pieces, but only extremely trivial or shoddy microservices will be easier to maintain than a corresponding monolith, because many things which are well-understood in a local setting are much harder to do in a highly distributed setting, simply because the infrastructure is now a bazillion separately managed pieces.<p>- The feedback loop can be abysmal. Without any easy alternatives to do &quot;local cloud&quot; deployments, having to wait for several minutes for feedback about a tiny change is frustrating in the extreme.')