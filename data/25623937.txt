Item(by='mac01021', descendants=None, kids=None, score=None, time=1609699541, title=None, item_type='comment', url=None, parent=25623787, text='Suppose I provide you with a black-box function foo that takes an int.<p>You can write the program<p><pre><code>   x = read_int_from_terminal();\n   y = foo(x);\n   println(x + &quot;:  &quot; + y);\n</code></pre>\nAnd you can be confident that invoking foo has no effect on the value of x that will print out on subsequent lines.  x is a local variable that refers to a stateless, immutable, mathematical object.  If x refers to the number 3, it will continue to do so until you personally tell it to refer to something else.<p>In clojure, as in other functional programming environments, a vector is also a stateless, immutable, mathematical entity.  Which is nice because nobody can change its state out from under you and that makes programs easier to reason about.<p>There are also specific use cases where this feature may shine in a specific way, for example making it easy to maintain an &quot;undo history&quot; when implementing a text editor.  If the state of a buffer in your editor is an immutable value then it&#x27;s easy to maintain a stack or list (or whatever) of all the states of the buffer - the top of the stack being the current state - and operations on the buffer simply create a new version but do not destroy any information about prior versions.<p>Outside of such specific use cases, though, it&#x27;s just about referential transparency and enhanced ability to reason about the interactions between different pieces of code.')