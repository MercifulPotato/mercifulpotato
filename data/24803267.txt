Item(by='rcconf', descendants=None, kids=[24803578, 24803535, 24803639], score=None, time=1602870949, title=None, item_type='comment', url=None, parent=24802824, text='I&#x27;ll try to answer these, just for fun, even though I am not doing an interview. I have not Googled anything, so if things are horribly wrong, let me know.<p>- I have no idea, but I could try answering this through thinking through the problem. Generally a linked list has a pointer to from one item to the other. An array list I assume uses arrays for holding the items using indexes.<p>What are the available operations generally for a data structure?<p>Search - Search would be O(1) in array list and O(N) in linked list, can&#x27;t be this.<p>Insert - Insert in a linked list is actually quite quick if you have the node since you could just move the pointers. For an array list, you would have to shift everything over. I think this is the answer.<p>Remove - Same deal as Insert.<p>Did I get this right?<p>- Because processes cannot access each others memory, the OS prevents from happening. A pointer is a pointer to an address in memory so you generally cannot do this. In terms of where would this work, umm, maybe in an old OS that didn&#x27;t have the protection, or perhaps dynamically linking libs?<p>- Neither, it&#x27;s pass by copy from what I recall. Or something of the sorts. Maybe call by sharing? I would just explain how it works since that&#x27;s easier, generally everything in Java is copied, so it&#x27;s pass by value in the traditional sense. But when you think pass by value, are objects copied? The answer is no, objects copy their pointer instead in Java. So when you modify a passed object, it does modify the underlying data in that object, but you can never re-assign the object.<p>- Nope, I don&#x27;t think so. From what I recall, I&#x27;ve always had programs fail to run if I use the same IP + Port + Interface. You can do virtual hosts in Apache&#x2F;Nginx tho where you can handle multiple different domains on the same port.<p>- Volatile is generally used when working with threading. I cannot fully recall what it is, but it&#x27;s required in thread safety. I would generally use thread safety operations and data structures instead here, but I do recall having to use volatile a few times.<p>- I don&#x27;t know how a breakpoint works exactly, but it&#x27;s a marker placed in code and when a debugger runs into it, it stops the process. I assume since the Java code gets converted to byte code for the JVM to process, it would be a byte code added between the lines where the breakpoint lives.<p><i>Note</i>: haven&#x27;t used Java in 4 years.')