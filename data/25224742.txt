Item(by='WalterBright', descendants=None, kids=[25227495, 25239385], score=None, time=1606439238, title=None, item_type='comment', url=None, parent=25220139, text='&gt; The essential message is to make illegal states unrepresentable.<p>That&#x27;s why, in C we have:<p><pre><code>    if (a = b)\n</code></pre>\nand:<p><pre><code>    if (a &lt; b &lt; c)\n</code></pre>\nthat cause (in some compilers) warnings. I wanted to make this an error in D. One option is to check for and disallow them after the parse, but that left:<p><pre><code>    if ((a &lt; b) &lt; c)\n</code></pre>\nas still an error. I wanted to allow these constructs to remain if they were parenthesized, as that would imply they were deliberate. (Yes, parenthesized expressions could be a separate grammar, but I thought that was an awful idea.)<p>The solution is to fix the grammar, so they wouldn&#x27;t even parse. The beauty of this is one doesn&#x27;t have to enable warnings, or have a separate check for them, it just won&#x27;t compile. Even better, D&#x27;s expression grammar is the same as C&#x27;s, and it did not upset anything else in the grammar as a side effect.<p>Based on my experience at Boeing designing hardware, defining the problem out of existence is a great way to design robust systems.')