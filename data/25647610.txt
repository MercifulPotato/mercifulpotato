Item(by='37ef_ced3', descendants=None, kids=[25647861, 25648028, 25648235], score=None, time=1609866100, title=None, item_type='comment', url=None, parent=25647352, text='Take Go&#x27;s slices, for example<p>Realize a Go []int (&quot;slice of int&quot;) is just a C struct like this, passed by value:<p><pre><code>  struct intSlice {\n      int* addr;\n      int len;\n      int cap;\n  };\n</code></pre>\nThe memory at addr is not owned by the slice. All the slice operations are simply notation for manipulating the struct. Go&#x27;s garbage collection makes the whole thing work well<p>This can be confusing if you&#x27;re used to C++&#x27;s std::vector (which owns the memory) or Python&#x27;s slices. Go&#x27;s slices are a shallow pointer&#x2F;length system exactly like is used in C all the time. For example:<p><pre><code>  void sort(int* addr, int len);\n</code></pre>\nbecomes<p><pre><code>  func sort(a []int)\n</code></pre>\nA Go slice is just a formalization of C&#x27;s pointer&#x2F;length idiom, with terse notation for manipulation')