Item(by='teorema', descendants=None, kids=[24840925, 24842842, 24840998, 24840698], score=None, time=1603217784, title=None, item_type='comment', url=None, parent=24840397, text='Not to sound dismissive but I remember when that was true of Python (vis-a-vis Perl and some other things). My recollection of discussions on forums when it was starting to gain mindshare were arguments largely about the aesthetics of the syntax.<p>Numerical computing is something where there&#x27;s always been something that works. Before Python it was C and Fortran.<p>The problem people ran into is that when everything is wrapped around low-level libraries for speed, you eventually run into the catch 22 of using the slower language that you prefer for clarity, or the faster one that makes it acceptable performance-wise.<p>In other words, with Python, to get the performance you would have got in C or Fortran, you have to code in C or Fortran. Then you&#x27;re not using Python anymore. The idea (in theory, and a lot in practice) with Julia (or Nim, or other LLVM-targeting languages) is that you don&#x27;t have this penalty.<p>So in that sense Julia is providing something that isn&#x27;t working in Python or Matlab.<p>I think Julia&#x27;s not quite what it&#x27;s cracked up to be, but mostly it is, and I&#x27;d probably prefer working with it over Python or Matlab for numerical stuff.')