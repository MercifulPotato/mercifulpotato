Item(by='3np', descendants=None, kids=None, score=None, time=1604769318, title=None, item_type='comment', url=None, parent=25014582, text='Everything around GraphQL seems to be assuming the client is user-operated such as a web or smartphone app, with the rare scenario of a node.js service being such a rarity that it takes some research to figure out if there&#x27;s even a solution for it. Try to do anything beyond the basics with, for example, golang.<p>This is completely fine and understandable given the use-cases that motivated it, and the community that&#x27;s been driving it.<p>But it&#x27;s not a hammer for all nails. Reading the OP post, it&#x27;s obvious they have a very narrow perspective when the one thing they compare it to is &quot;REST&quot;.<p>The nice thing with HTTP&#x2F;JSON, and IMO a major factor in it&#x27;s ubiquity, is that it&#x27;s an OK (while not always ideal) solution to implement towards for pretty much any use-case. Performant and stable HTTP clients and JSON parsers&#x2F;formatters are even part of a lot of standard libraries, and straight-forward to implement should you need to. The benefits of GraphQL compromise this.<p>protobufs in general and grpc specifically are a much better solution for many scenarios, due to some trade-offs being different. A lot of the issues and concerns brought up by other commenters here is &quot;leaky abstractions are gonna leak&quot;. I&#x27;m sorry, but there&#x27;s no free lunch.<p>IMO it&#x27;s a bit delusional to claim with certainty that &quot;There will be a future where you can query any system in the world using GraphQL&quot;. I&#x27;m not even sure I want o live in that future if it means 1) I have to support it and 2) it comes at cost of other protocols.')