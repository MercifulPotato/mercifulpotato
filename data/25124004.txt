Item(by='zrm', descendants=None, kids=[25124106], score=None, time=1605622980, title=None, item_type='comment', url=None, parent=25123588, text='&gt; At its most basic, they could hardcode lists of IPs into their malicious code.<p>Which makes the malware more fragile, because the hosts are often compromised machines themselves, or are the targets of takedowns. If they include only one IP at a time (as they can do with DNS) then when that machine gets cleaned by the owners, they have no way to switch to another one. If they list several machines then anyone analyzing the malware has a list of multiple compromised machines to go have them all cleaned at once. Also, then you can add the IP address to a block list and they can&#x27;t update it like they can with DNS.<p>&gt; At its most complex, the same building blocks that DoH&#x2F;DoT use were available to them: they could build similar tools that tunnel over HTTPS&#x2F;SSH&#x2F;etc, whichever protocol they felt was least conspicuous on their target system.<p>Malicious javascript in a browser doesn&#x27;t have access to SSH or similar. And that&#x27;s assuming their code can even reach your machine if your Pi-hole is blocking the DNS name of the server hosting it.<p>&gt; DoH in Firefox simply makes the above issue harder to ignore.<p>It makes it harder to <i>prevent</i>. Someone sends the user an email link to a URL containing an unpatched browser exploit or a link to a malicious binary. If the Pi-hole blocks the domain and&#x2F;or the IP address in the email, the attack is prevented. If the browser bypasses the Pi-hole, you have malicious code actually running on the user&#x27;s machine, and that&#x27;s a much bigger problem.')