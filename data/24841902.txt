Item(by='6gvONxR4sf7o', descendants=None, kids=None, score=None, time=1603224824, title=None, item_type='comment', url=None, parent=24840013, text='Everybody talks about how hard it is to tell a good engineer from about one. I&#x27;ve been thinking about what exactly that means in terms of our day-to-day.<p>If 10% of the work you&#x27;re doing this quarter is work that you are going to be doing next quarter, you&#x27;ll need to be interviewed differently than if 90% of the work you&#x27;re doing this quarter is work that you&#x27;re going to be doing next quarter.<p>If the job is narrow and predictable enough, you can just assess somebody&#x27;s ability to do the tasks you will ultimately need them to do. if the job is broad and unpredictable enough, you have to assess it by proxy. Like how due to the long tail of word usage [0], it&#x27;s easier to just talk to somebody to see if they are fluent, rather than quizzing them on words.<p>I wonder if software engineering is in some weird anti-sweet spot, where our breadth of work isn&#x27;t so broad that we really need many year degrees and licenses and boards, but isn&#x27;t narrow enough that you can just assess somebody on the actual duties you want them to be performing.<p>Not to mention that different jobs in the field really do have different degrees of unpredictability&#x2F;variety, so the breadth experienced in a few years at one shop would be completely different from the narrowness experienced in a few years at another, so a resume doesn&#x27;t you tell as much as you&#x27;d hope.<p>[0] A full 50% of the words in <i>Tom Sawyer</i> only occur once, for example. It&#x27;s why teaching languages can only go so far, and you really just get lots of experience using a language to become proficient.')