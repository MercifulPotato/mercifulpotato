Item(by='firethief', descendants=None, kids=None, score=None, time=1604858923, title=None, item_type='comment', url=None, parent=25025977, text='Another way you can use nix-shell: with Nix, shell scripts can declare their dependencies. For a random example, I have a script that extracts chapter information from a DVD. Its shebang looks like this:<p><pre><code>    #!&#x2F;usr&#x2F;bin&#x2F;env nix-shell\n    #!nix-shell -i &#x2F;bin&#x2F;sh -p ffmpeg_4 lsdvd python3\n</code></pre>\nThis is the equivalent of &quot;#!&#x2F;bin&#x2F;sh&quot;, but with some package dependencies. Without nix, this script would implicitly require lsdvd to be available, increasing the complexity and fragility of system administration: if you scp the script to a different machine, the script is broken there until you install lsdvd. Even on one machine, you have to keep lsdvd installed (and remember what you have it for). Nix takes care of all that: when you run the nix-empowered script, it will make sure lsdvd is available in the script&#x27;s environment. I keep an extremely minimal set of packages install system-wide (and nothing installed to my user environment), and declare dependencies in the places they&#x27;re actually needed. I no longer think in terms of installed-or-not; everything is <i>available</i>.')