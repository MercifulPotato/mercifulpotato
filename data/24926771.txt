Item(by='ChicagoDave', descendants=None, kids=[24929646], score=None, time=1603941218, title=None, item_type='comment', url=None, parent=24925669, text='I&#x27;m definitely not a mindless CTO. ;)<p>Micro front-ends is the concept of breaking apart a front-end monolith. SPA&#x27;s are usually built in one framework like Angular or React. Over time, this can get very convoluted and turn into a bad monolith (there are good ones).<p>The second part is that instead of building screens, you design features (like invoices or customers or catalog) and develop the set of views that encapsulate the targeted domain. This is all built in a separate project with a well-defined set of meta data. You deploy the feature-set into your integrated environment and the managing app is constantly on the lookout for new features-sets.<p>Then in some admin portion of your umbrella app, you provide access to API&#x27;s to other feature-sets, and to users.<p>One of the key elements is to keep front-end dependencies separate. So the manager app might be Angular 9, the customer feature-set might be in Angular 10 with its own dependencies. Nothing is shared between the manager app and each feature-set and nothing is shared between feature-sets.<p>This provides a front-end that is malleable and reduces dependency creep.<p>This can also benefit from Domain-Driven Design, where you&#x27;ve segregated your domains and their API&#x27;s, Events, and Data Storage.<p>So you should be able to &quot;publish&quot; a feature-set without any dependency on a central database, API mesh, or Event manager.<p>The key is to define your boundaries well and that is no small thing.')