Item(by='KMag', descendants=None, kids=None, score=None, time=1609998472, title=None, item_type='comment', url=None, parent=25655644, text='&gt; DAO hack) because the developers were not able to easily reason about the implicit behavior or concurrency model.<p>I believe the DAO bug was a reentrancy bug, not a concurrency bug.  The code was not written to be reentrant because the developer didn&#x27;t realize recursion could be triggered via implicit behavior.  Many reentrancy bugs are concurrency bugs, but I really think that&#x27;s not the case with the DAO bug.  I saw one proposed fix (not sure if it&#x27;s the one that got finally accepted) that used a reentrancy flag to prevent the problem and called the flag a &quot;mutex&quot;, but it wasn&#x27;t actually a mutex, adding to the confusion about the root cause.<p>I really don&#x27;t think execution of a single contract transaction is concurrent, and due to (eventual) serializability of blockchain transactions, the blockchain acts as if concurrent execution within a contract across miners doesn&#x27;t exist.  If you have concurrent calls to a single contract, at most one of them will succeed, and those that fail will not affect the blockchain state.<p>In general, the Ethereum community seems to refer to serialized execution of contract methods in an order unexpected by the contract author as &quot;concurrency&quot;, but I have seen no evidence that the effects on the contract state as reflected in the blockchain are not always serializable.  In other words, it acts much like concurrent SQL queries under a serializable isolation level: if two concurrent executions modify the same data, one of them will fail instead of you getting an interleaving of the two write sequences.<p>It&#x27;s possible that I misunderstand the EVM, but it seems insane to design a system to allow multiple threads to execute within a single contract at a time in the presence of shared mutable state, at least without an RDBMS-like isolation system in place.<p>Edit: <a href="https:&#x2F;&#x2F;forum.ethereum.org&#x2F;discussion&#x2F;1317&#x2F;reentrant-contracts" rel="nofollow">https:&#x2F;&#x2F;forum.ethereum.org&#x2F;discussion&#x2F;1317&#x2F;reentrant-contrac...</a> supports my understanding.')