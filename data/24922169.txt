Item(by='koonsolo', descendants=None, kids=None, score=None, time=1603908765, title=None, item_type='comment', url=None, parent=24919689, text='The original code is 9 lines, and it&#x27;s very clear what it does.<p>Now you have a &#x27;build_url&#x27; method, which is a bad name to start with. It&#x27;s actually a &#x27;build_def_request_url&#x27; or something like that.<p>Imagine you add another method find_synonyms(word). My quick brain would think I can use that same build_url() method. Wrong, because one needs a build_def_request_url() and the other a build_synonyms_request_url().<p>Let&#x27;s say I need to debug and need to see what url it&#x27;s calling. In the original code it&#x27;s right there, here I have to on a goose chase to find my answer. One thing that wasn&#x27;t refactored is putting the hardcoded url into a constant. That one I would do.<p>Another complexity is adapting one of the helper functions. If I adapt it, which callers could I break? Who is using this function?<p>Another part is that I would rewrite the pluck_definition(data) to a more generic get_value(data, u&#x27;Definition&#x27;). That way my other potential find_synonyms() could also use it, and it basically adds no extra lines of code except for an extra parameter.<p>I know this is an easy example to explain things, but the original code needs to be way more complex to justify it splitting up into multiple functions, that in this case can serve nothing else but that original function.<p>Just my feeling towards this code.')