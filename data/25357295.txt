Item(by='skissane', descendants=None, kids=[25357368], score=None, time=1607510780, title=None, item_type='comment', url=None, parent=25356983, text='&gt; Binaries we download and run (as well as packages from package managers) are generally cryptographically signed by people you trust. Shell scripts you curl into bash are not.<p>There is no reason in principle why a shell could not implement digital signatures. bash could have a &quot;--require-signature&quot; option where it looks for a GPG signature appended to the end of the script, and refuses to run the script if the signature is missing or the signer is untrusted.<p>(No idea if the Bash maintainers would be willing to accept a patch adding such a feature if someone were to write one; but, signed scripts is something supported by PowerShell, although most people&#x27;s experience with it is limited to turning off the default setting which requires all scripts to be signed.)<p>A related question â€“ what&#x27;s the difference between downloading an unsigned script over HTTPS versus downloading a signed script (whether over HTTPS or just plain HTTP)? Ideally, the code signing is done offline, so an attacker that compromises the HTTPS server gets the HTTPS private key but not the code signing private key. However, I suspect that ideal often isn&#x27;t actually obtained; offline code signing can be a pain for CI. If someone has a CI pipeline which signs the code and then deploys it to the HTTPS server, then all an attacker has to do is compromise access to that CI pipeline and neither HTTPS nor code signing will stop them.')