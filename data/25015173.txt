Item(by='initplus', descendants=None, kids=[25017841], score=None, time=1604758516, title=None, item_type='comment', url=None, parent=25014815, text='Sure, but the design of GraphQL, and the majority of the GraphQL backend tooling, lends itself to performance issues much more strongly than a boring REST API. I don&#x27;t know if there are alternative backend tools, but my experience has been quite painful.<p>The &quot;graph&quot; part - GraphQL seems to want you to build these big interconnected webs of types. But there isn&#x27;t good tooling on the backend to deal with resolving relationships between types efficiently. Someone decides they need user.friends.pets.names, and now my backend code is doing 3 DB round trips because my GraphQL server lib doesn&#x27;t understand it can turn the relationship between the types into a JOIN. I decide that&#x27;s no good and the query needs to be faster, the alternative is I have to do the JOIN every time even if the client didn&#x27;t actually request friends. And if I&#x27;m going to overfetch from the DB, might as well send that data to the client anyway?<p>My experience was that because of how backend GraphQL servers are written, it becomes very challenging to reason about performance. It&#x27;s hard to think about how your nice type resolvers are going to interact, and fan out into some nightmare n+1 query problem performance pit.<p>I know there are some better tools than this, which I sadly haven&#x27;t tried...')