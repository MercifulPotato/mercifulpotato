Item(by='TheRealKing', descendants=None, kids=None, score=None, time=1603650997, title=None, item_type='comment', url=None, parent=24885322, text='Yes, it is still heavily used in the world of numerical computing. Many of the world&#x27;s largest numerical software have been written in Fortran and are still developed in Fortran, although Fortran is not alone anymore in the field and every language wants to claim the crown.<p>If you intend to do heavy numerical or scientific computations, then Fortran is definitely worth learning. It is a high-level language comparable to Python&#x2F;MATLAB, yet with speed that can be 500 times faster than MATLAB&#x2F;Python. Its math-oriented syntax is absolutely nice and has inspired many other languages, such as MATLAB, R, Julia, and packages such as Numpy and Scipy in Python and Eigen and ... in C++.<p>Whatever you pick up to start reading, keep in mind that you should only learn modern Fortran 2008 standard, 2018, and beyond. You should not waste your time on learning any standard older than Fortran 2003, in particular, F77 (which is more than 4 decades old now). Keep in mind that Fortran has the easiest learning curve of all compiled languages, in particular when compared to C&#x2F;C++. If you already know MATLAB, then Fortran syntax and rules will look quite familiar to you. That&#x27;s because MATLAB inherited a lot of vectorization and array syntax from its ancestor, Fortran. With regards to where to start learning Fortran:<p>Here is a good start to learn Fortran 90:<p><a href="https:&#x2F;&#x2F;www.uv.es&#x2F;dogarcar&#x2F;man&#x2F;IntrFortran90.pdf" rel="nofollow">https:&#x2F;&#x2F;www.uv.es&#x2F;dogarcar&#x2F;man&#x2F;IntrFortran90.pdf</a><p>This notebook contains almost 70%-80% of what you need to start productive programming in Fortran. For more advanced features such as Object-Oriented and Parallel programming with Fortran, the following is an excellent guide:<p><a href="https:&#x2F;&#x2F;books.google.com&#x2F;books&#x2F;about&#x2F;Modern_Fortran_Explained.html?id=V7UVDAAAQBAJ&amp;printsec=frontcover&amp;source=kp_read_button#v=onepage&amp;q&amp;f=false" rel="nofollow">https:&#x2F;&#x2F;books.google.com&#x2F;books&#x2F;about&#x2F;Modern_Fortran_Explaine...</a><p>If you are in grad school, you could likely get access to a free pdf copy of the book, just as I did myself in grad school. There is also a new 2018 edition of this book covering Modern Fortran 2018 standard: <a href="https:&#x2F;&#x2F;books.google.com&#x2F;books&#x2F;about&#x2F;Modern_Fortran_Explained.html?id=sB1rDwAAQBAJ" rel="nofollow">https:&#x2F;&#x2F;books.google.com&#x2F;books&#x2F;about&#x2F;Modern_Fortran_Explaine...</a><p>There is also an amazing online Fortran-Jupyter binder by which you could test your serial as well as Coarray &quot;parallel&quot; Fortran codes on shared&#x2F;distributed memory architectures in real-time: <a href="https:&#x2F;&#x2F;github.com&#x2F;sourceryinstitute&#x2F;jupyter-CAF-kernel" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;sourceryinstitute&#x2F;jupyter-CAF-kernel</a><p>You can test it here: <a href="https:&#x2F;&#x2F;mybinder.org&#x2F;v2&#x2F;gh&#x2F;sourceryinstitute&#x2F;jupyter-CAF-kernel&#x2F;master" rel="nofollow">https:&#x2F;&#x2F;mybinder.org&#x2F;v2&#x2F;gh&#x2F;sourceryinstitute&#x2F;jupyter-CAF-ker...</a><p>There are also lots of other online Fortran compilers for education and testing on the fly. Just search the terms on the web. Here is a good one I often use:<p><a href="https:&#x2F;&#x2F;www.tutorialspoint.com&#x2F;compile_fortran_online.php" rel="nofollow">https:&#x2F;&#x2F;www.tutorialspoint.com&#x2F;compile_fortran_online.php</a><p>The book &quot;Modern Fortran Explained: Incorporating Fortran 2018&quot; by Metcalf et al (or the older Fortran 2008 version of it published in 2011) is an excellent resource (although it is too comprehensive for an absolute beginner). Whatever book you pick up, make sure you learn the new features of Fortran, most importantly, 2008, and 2003 Fortran standards. These new standards as well as the newest Fortran 2018, contain extremely powerful and useful concepts (Coarray Fortran parallelization syntax, advanced (sub)modular programming, OOP) that are essential for modern scientific computing.')