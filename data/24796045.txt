Item(by='krimeo', descendants=None, kids=[24796432], score=None, time=1602808081, title=None, item_type='comment', url=None, parent=24795056, text='&gt; How is that related?<p>I thought we were talking about running applications reliably. Why is complete linux userspace bundled separately in each container?<p>&gt; Environments and languages change.\nYes.<p>&gt; That&#x27;s entirely different to running programs with zero-downtime deployments, load-balancing and traffic management, health monitoring, logging and observability, secret and config management, storage volumes, security roles, and much more.<p>That&#x27;s a lot of new requirements in addition to &quot;running applications reliably&quot;. Most applications simply do not need that. And I believe this is the point of the original comment you replied to.<p>- zero-downtime deployments -&gt; not needed for most applications (for example, twitter outages are not a big deal either). Btw how do you do zero-downtime of (websocket) streams with kubernetes? ;)<p>- load-balancing and traffic management -&gt; in standard k8s you are pushing all traffic through one active LB (nginx) anyway =&gt; strip most of the extra layers and you dont even need that LB<p>- health monitoring, logging etc. -&gt; you can use an existing solution that provides only the functionality you need, most of the work will be in your app anyway (every application needs different metrics ..)<p>The argument is that most applications do not need to scale at this level (until you need anycast DNS returning per-node IPs or at least geodns, you are not scaling that much anyway) and can be implemented in simpler manner hence easier and cheaper to maintain, audit and secure.<p>I do not want security roles, storage volumes and config management or observability I want my application to reliably and quickly serve my customers and be easy to maintain and debug.<p>If you want to discuss how to design architecture for scalable applications which keep all state in distributed databases but based on a platform with stable ABI that would surely be an interesting debate as well.')