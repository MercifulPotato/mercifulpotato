Item(by='davidkell', descendants=None, kids=[25018985, 25016858], score=None, time=1604767694, title=None, item_type='comment', url=None, parent=25014582, text='We’ve trialled combinations of REST, GraphQL and gRPC-web across a bunch of different products. GraphQL has reliably won for us in trading off DX, UX and feature speed. Reasons -<p>- Auto-generated, type safe entities from source to client, including relationships = fewer bugs<p>- Ability to unify different backends (eg a database, warehouse, external APIs, cloud storage)<p>- The “application data graph” concept always brings huge clarity to the architecture design - you get to build your mental model in code<p>- GraphiQL is excellent<p>Having said this, most of the benefits come from the incredible tooling, eg for our stack Graphene, Graphene-X bridges, Typescript, Apollo. I would never consider writing a GraphQL server from scratch, and we’ve had bad experiences with instant database -&gt; GraphQL solutions (not really\nkeen on writing my application logic in SQL). It’s also not an either or - our current app uses REST for file uploads and stream large datasets to the client. And ofc, you can achieve many of these benefits with other solutions.<p>Wundergraph looks like a great addition to the ecosystem, it would already remove boilerplate from our app.')