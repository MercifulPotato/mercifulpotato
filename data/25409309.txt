Item(by='beaconstudios', descendants=None, kids=None, score=None, time=1607887554, title=None, item_type='comment', url=None, parent=25406798, text='Here&#x27;s my approach. I think many feature requests fall under the X&#x2F;Y problem.<p>- view a new feature request as a new user capability<p>- extend the model that the software implements, to encompass that capability - regardless of how the feature was implemented in the requester&#x27;s head.<p>- extend the software to match the new model. This may require refactoring as the model may have had to undergo shifts to encompass the new capability<p>For example:<p>I have a car. I model the car as four wheels, an engine, a chassis, and a lever. The engine drives the wheels, the wheels support the chassis, the chassis contains the engine. A lever in the chassis sets the engine in motion. It&#x27;s a simple model and is capable of 1. sitting still and 2. moving forwards and backwards. This is all the capabilities we&#x27;ve needed so far.<p>A user requests a new feature where the wheels are instead mecanum wheels (<a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mecanum_wheel" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mecanum_wheel</a>).<p>The default industry response is to either implement the change as-requested, or reject it. I propose that the correct move instead is to ask the user WHY they want mecanum wheels. They reveal that they want the car to move in 2 dimensions, rather than one. From that understanding you can extend the model of the car to encompass the feature - you may add the mecanum wheels and a mechanism to control them, you may add a steering wheel and rack-and-pinion, you may do something completely different - totally depending on how and why the user wants 2d movement (depending on further questioning, ie &quot;5 whys&quot;). But you are working to the capability, not the feature. By extending the model, you can then change the software to match this new model.<p>I think as software engineers we have a tendency to forget the model and focus only on the code. A request for mecanum wheels becomes a question of how to change the software to encompass that feature. But we must always remember the existence of the model, and the user&#x27;s relationship to it.')