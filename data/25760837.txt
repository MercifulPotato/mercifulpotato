Item(by='Jugurtha', descendants=None, kids=None, score=None, time=1610537966, title=None, item_type='comment', url=None, parent=25757314, text='&gt;<i>- Source control (git in some form? where is it hosted? github? mono repo?)</i><p>GitLab for repository management. Our platform (<a href="https:&#x2F;&#x2F;iko.ai" rel="nofollow">https:&#x2F;&#x2F;iko.ai</a>) has a plugin architecture with a tiny core that practically does nothing except load the plugins. All features are plugins. Each plugin is a repository. This simplifies things for us as we can experiment, add features, and <i>kill</i> features, without messing a giant codebase.<p>&gt;<i>- CI &#x2F; CD</i><p>GitLab.<p>&gt;<i>- Kubernetes? Or plain old VMs?</i><p>Both. We use VMs, but have things that use Kubernetes for specific tasks.<p>&gt;<i>- DB - Full relational DBs? Midway like Spanner? Or full key-value like DynamoDB?</i><p>PostgreSQL.<p>&gt;<i>- GraphQL or no?</i><p>No.<p>&gt;<i>- Caching solutions?</i><p>No, but we tweak caching for some of the tools.<p>&gt;<i>- Service metrics + dashboards?</i><p>Prometheus and Grafana.<p>&gt;<i>Do service frameworks emit metrics out of the box? (requests, errors, latencies etc.) or do you have to DIY?</i><p>Both. Some emit metrics out of the box, but some parts are custom.<p>&gt;<i>- Messenger? (Slack vs Teams vs Chime vs Google Chat)</i><p>Slack for messaging. Jitsi for video. The platform itself (iko.ai) for pair programming or troubleshooting the platform itself (it has real-time collaborative notebooks we use to troubleshoot sometimes, or share reproducible example of bugs involving compute environments). I love using tools to improve the tools themselves.<p>&gt;<i>- Bug management + Sprint management?</i><p>GitLab<p>&gt;<i>- Anything else I&#x27;m missing?</i><p>Sentry, PostHog<p>A bunch of other stuff given that the platform relieves data scientists and machine learning practitioners from the complexity of many tools and stacks, therefore we inherit that complexity so they don&#x27;t have to deal with it.')