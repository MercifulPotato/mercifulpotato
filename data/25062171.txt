Item(by='dsies', descendants=None, kids=[25066412], score=None, time=1605124225, title=None, item_type='comment', url=None, parent=25060252, text='Full disclosure: I co-founded a startup (<a href="https:&#x2F;&#x2F;batch.sh" rel="nofollow">https:&#x2F;&#x2F;batch.sh</a>) which focuses specifically on solving problems in the event driven space - we do event archive, search and replay. So this space is <i>super</i> interesting to me :)<p>You are totally right - the CQRS pattern alone is not enough.   In my experience, most shops that go down the CQRS path, also tend to make use of other event driven patterns like event sourcing.<p>As with most things, there&#x27;s pro&#x27;s and con&#x27;s and the most obvious con here is increased complexity in exchange for higher reliability and scale.<p>Your advice is great, especially deciding on a structured message format such as protobuf. I would 100% avoid JSON schema as it&#x27;s possible folks will forget to fill out fields. Protobuf has <i>excellent</i> support by now and there is a ton of support tooling for it. I&#x27;d be hard pressed to choose Avro at this point (unless you&#x27;re a Java or Kafka shop that has it already in their ecosystem).<p>In addition, if you are already on CQRS, I would advise looking into fully embracing event driven - by utilizing an event bus of some sort (rabbit, kafka, eventbridge), you could make message passing completely async (and avoid having to use gRPC, which is another layer of complexity, as you mentioned).<p>A good friend of mine once said that in order to successfully do event driven arch, you must be OK with eventual consistency and I think that lies at the heart of this. If you are OK with eventual consistency, you understand the burden of complexity you&#x27;re bringing on.')