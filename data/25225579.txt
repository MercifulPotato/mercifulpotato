Item(by='u801e', descendants=None, kids=None, score=None, time=1606451845, title=None, item_type='comment', url=None, parent=25223885, text='&gt; The important point is that CLs are atomic (and are reviewed atomically) even if they depend upon each other (i.e. are a part of a stack).<p>What prevents a situation like CL2 getting approved and merged prior to the resolution of CL1?  Or more generally, what ensures that the ordering of commits in a set of CLs in a given stack is preserved prior to merging?<p>&gt;  I can&#x27;t express just how badly they deal at handling reviews of stacked PRs - either you create your stacked PR targeting master (and it gets all of the changes from the underlying PRs merged into its changes list, which makes reviewing it harder) or you target it at the branch of the underlying PR (which is non-obvious and painful and you have to manually remember to shift it across when the PR beneath it gets merged)<p>Rather than stacked PRs (which essentially doubles the number of commits since Github (and possibly Gitlab) introduces a merge commit for each PR even if it&#x27;s a fast-forward merge), would it not be better to just combine CL1 through CL4 into a single feature branch where each commit corresponds to a CL?  It would make for a large PR, but it can be reviewed on a per commit basis.')