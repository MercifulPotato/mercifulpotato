Item(by='e12e', descendants=None, kids=[25545362], score=None, time=1608913661, title=None, item_type='comment', url=None, parent=25535222, text='Having worked and working with rails projects spanning ruby 1.9 through 2.4 and rails 3.2, 4.1, 4.2 and 5.2 - the major issue I&#x27;ve seen with legacy rails is how difficult it is to keep views refactored and seperateted into widgets. Some teams seem to blame erb for this and run towards various different template dsls like haml (equivalent to writing a template language for php, which already is a template language, because the team can&#x27;t keep views&#x2F;templates simple).<p>Fat&#x2F;smart models help - but the old&#x2F;standard tools in rails (helpers and partials) INMHO is poor tooling for the &quot;view&quot; layer - and this just gets worse with Javascript in the mix.<p>That is finally being addressed - I&#x27;ve yet to experiment with it, but I like the idea:\n<a href="https:&#x2F;&#x2F;github.blog&#x2F;2020-12-15-encapsulating-ruby-on-rails-views&#x2F;" rel="nofollow">https:&#x2F;&#x2F;github.blog&#x2F;2020-12-15-encapsulating-ruby-on-rails-v...</a><p>Another option is of course to just use rails as an api server, and do the front end in react&#x2F;vue etc. Although, at that point, you might be better off just using postgraphile or hasura.<p>The other real problem I see in some of our projects, is developers simply not trying to learn minimal best practices (just reading a few paragraphs on rails guides...). And that leads to many awkward choices, a lot of re-inventing subsystems that already exist in rails (because developers didn&#x27;t have a look before coding up a quick fix) - and few tests and poor testability. But those strike me as much more cases of people &quot;holding it wrong&quot; than rails being the problem.<p>Finally, I think there&#x27;s still some issues in rails 6 with asset handling - but overall rails 6 seems like a comprehensive, solid and easy to use framework.')