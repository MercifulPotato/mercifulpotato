Item(by='fuzzfactor', descendants=None, kids=None, score=None, time=1605377455, title=None, item_type='comment', url=None, parent=25088837, text='I would want to make sure your working version of Excel &amp; its settings open the file exactly as your clients&#x27; do.<p>This could be high-touch but it could also build more client trust and pay off more than other non-automatable efforts.<p>Then first actually open each file in Excel.<p>I would imagine many clients would expect you to be more advanced at Excel than they are anyway, so do not fall behind.<p>That way you and the client always start on the same page, and you have the full power of Excel at your disposal at least like they do.<p>Matching the columns is no longer on your plate, fait accompli.<p>And a bad XLSx can be caught by Excel without being subject to further incorrect processing.<p>Maybe the data will be cleaner or more well-confirmed to begin with, and there might be fewer errors to return already.<p>The spreadsheet itself is the database for that one file, in your client&#x27;s familiar format, an opened XLSx.<p>Rather than parsing, you could then consider reading the data directly from the cells using a straightforward macro which creates a binary or text file directly converting to your desired database format, or also an intermediate CSV if desired.<p>Excel&#x27;s built-in macro language should still be capable of accomplishing this, or I would expect you could still call any proper x86 code in other languages as an Excel macro or subroutine if desired too.<p>It should then be possible for a powershell script to accomplish this structured file conversion with a single click from a menu, on any target XLSx or folder of XLSx&#x27;s that conform to the clients&#x27; layout, which you have encoded into the custom macro that converts to your proprietary file structure.<p>If this is considered efficient while accommodating the overhead of Windows and Excel together only you can decide.<p>I used a common office PC for this process so I could encode modern data for use by antique scientific instruments, then sent the files to the equipment in their own obsolete format using the COM port.<p>Only decoding the incoming proprietary data stream from the antique gear required a parser.')