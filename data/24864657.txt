Item(by='j-krieger', descendants=None, kids=[24865767, 24865090], score=None, time=1603410994, title=None, item_type='comment', url=None, parent=24863629, text='I like eleventy. However, consider the following.<p>Your static site gen is slow. Well, it does a lot of stuff you don‘t need, so you switch to a lighter one. You choose eleventy. You build assets yourself. This is tedious and boring. You include asset building into eleventy. You then (after some time) decouple asset building from your SSG entirely, because it‘s a bit complicated. To do this, you install node packages which do these jobs outside of your SSG to replace bash scripts. \nNow you need a live server to work with your output in production. No problem, you can do this via node. 11ty includes a dev server. \nYou want hot reloading, because manually restarting the server sucks. You also need cash busting because your stupid browser gets in the way  with its nice ideas about caching. \nMan your output is large. You want to minify it. No problem, there‘s a node package for this after all! \nYou begin to work with images and svgs a lot. Damn, importing via strings sucks. Isn‘t there a better solution for this? Sure enough, get another package or switch templating systems. \nYou need JavaScript for interactivity. No problem, you can just write vanilla JS. Damn, this only works in Chrome? Better get Babel or something. Uh oh, my JS is getting large and unwieldy. TypeScript it is! \nNow embedding your JS file for file kind of sucks... Can‘t we just combine these into one?<p>Man, all these steps to take for your application to build. Configuration files are everywhere. Assets are large and begin to be unmanageable. You begin to pull your system together. It can do all these things at once.<p>This feels nice! Maybe you should open source it!<p>Need a name... Let‘s see... Your application-slash-buildsystem prepares assets, scripts and bundles them and <i>packs them for the web</i>.<p>„Packweb“ it is.<p>—-<p>Remember, new and shiny buildsystems&#x2F;SSG‘s&#x2F;software in general can be <i>fast</i> because they can afford to be. They do one thing, or a very limited range of things. Then users come along, and with them feature requests and the like. Suddenly, &lt;new thing&gt; can do a whole lot, but it‘s not fast anymore! Well gee, of course not, blog posts and influencers say alike. Have you heard about &lt;newest thing&gt; however? It may only have a small numbers of features, but it‘s <i>fast</i>.')