Item(by='vetinari', descendants=None, kids=[25088299], score=None, time=1605298569, title=None, item_type='comment', url=None, parent=25086307, text='&gt; What are you talking about. Mojave is 2 years old. That isn’t a particularly small window. Even with the 2 year window on MacOS, an alternative was delivered.<p>2 years&#x2F;2 releases <i>is</i> small window. Alternative was delivered, but it also is no <i>drop-in</i> one. Just lika Skia vs Cairo, requires porting&#x2F;reachitecting and might not have 100% coverage for what the old solution did. You might have noticed, that in Big Sur there is a list of system apps that ignore VPNs and filtering. That&#x27;s a problem.<p>&gt; But you are confirming the point - nobody even knows what is deprecated or what the alternatives are.<p>Because it works differently. There is no dictator (vendor controlling access) telling you what you are going to use whether you like it or not, and present it as a done thing. Instead, it works by forming a consensus (not 100%, mind you), whether something is needed or not. The community around a piece of a stack might arrive at a conclusion that given piece is no longer maintainable, and make something new (i.e. Xorg-server vs Wayland compositors, or systemd vs sysv-init) and then it will bubble through as distributions adopt it - either because the new solution is maintained and the old one is not, or because the new one solves their problems better than the old one.<p>&gt; You still haven’t answered the question of how someone is supposed to tell whether Cairo is supported or not.<p>Supported by whom? In this case, the original maintainer is no longer around. But that&#x27;s not a problem, distributions will support whatever they ship, so if you have an application that uses it, it will continue to work.<p>Should you use it for a new project? No. But that was true for years. Cairo is 2000-era software library. Consider it equivalent to QuickDraw, you would not use it for a new software either. Gtk (which was issue here on HN recently) uses it for software fallback (and they&#x27;ve made part of their API, so they&#x27;ve locked themselves in; changing it would mean they would have break their ABI. On the upside, that means that there always be some support). Firefox abandoned Cairo years ago, in favor of Skia, and so did LibreOffice in the last release.<p>So it shows, that a library or piece of a stack might be deprecated for years, but there might be someone somewhere who really needs it and is willing to keep it on life support (exactly just like Gtk needs Cairo). So the question for you, as someone who requires support, is: what level of support you require and what are you willing to pay (not means in purely monetary sense; though when users are expected to pay for continual support, what&#x27;s wrong with expecting that on different layer of the stack?) for getting that? Because you can always get it supported; or support it yourself, if you really needed. No one is going to kick it from underneath.The source will still be available, and it is always possible to fix it when needed. You will be never completely denied access as is the case in proprietary stacks.<p>&gt; It sounds like it does since people say it’s very slow compared to skia.<p>It is going to stay slow (unless someone invests heavily into it; which is not probable). It is a software library, deliberately; if you want hardware acceleration, switch to Skia, and accept the tradeoffs that come with hw accel.<p>&gt; It seems like you think you know what the status of things are, but other people don’t. How can that be?<p>Simple. I asked.<p>There are many venues, where you can ask. These people will tell you. However, due to having no dictator mentioned above, their answer on roadmap-like questions might be: &quot;depends on the community adoption&quot;.')