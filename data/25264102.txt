Item(by='MaxBarraclough', descendants=None, kids=[25265005], score=None, time=1606819339, title=None, item_type='comment', url=None, parent=25262744, text='I agree the article might have been more explicit there.<p>If I&#x27;m understanding correctly, it&#x27;s all about possibility of this statement throwing an exception, as for example the <i>cool.ico</i> file might not be found or might be corrupt:<p><pre><code>   icon.Icon = new Icon(GetType(), &quot;cool.ico&quot;);\n</code></pre>\nI think the point is that the &#x27;bad&#x27; version can make the icon visible in the UI <i>and then</i> throw an exception. The &#x27;not bad&#x27; version has a more transactional flavour: if the aforementioned statement throws, then, because of the better ordering, the &#x27;not bad&#x27; version doesn&#x27;t make the unfinished icon object visible, it just bails out with the exception having made no change to the UI, and the unfinished <i>NotifyIcon</i> instance gets garbage-collected.<p>I presume that the real-world code included some extra machinery to hook it up to the existing UI objects, omitted for brevity in the example. It&#x27;s a bit confusing as it looks rather like it&#x27;s just building up and returning a <i>NotifyIcon</i> instance for the caller to make use of, but I think the <i>icon.Visible = true;</i> is meant to represent truly making the icon visible in the UI.')