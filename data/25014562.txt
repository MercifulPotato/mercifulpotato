Item(by='morelisp', descendants=None, kids=None, score=None, time=1604749976, title=None, item_type='comment', url=None, parent=25014139, text='&gt; Frameworks like Echo and Gin eschew the universal middleware signature `func (http.Handler) http.Handler` for their custom built ones, and as a result cannot tap into the ecosystem of middlewares that target Go&#x27;s net&#x2F;http. Between a stdlib package and a third party package, which do you think is more stable?<p>I think you&#x27;re overstating the cost of using &quot;proprietary&quot; middlewares. I&#x27;m most familiar with Gin; it is trivial to wrap a &quot;universal&quot; middleware in a Gin middleware (gin.WrapH). It is <i>not</i> trivial to make a universal middleware that does the equivalent of gin.Context#AbortWithError.<p>I don&#x27;t fully disagree either - obviously `gin.WrapH` everywhere is noise, but so is e.g. `chi.URLParam(req, &quot;abc&quot;)` compared to `c.Param(&quot;abc&quot;)` in Gin, and Gin&#x27;s parameters are much cheaper for a middleware to tweak. (I choose chi here because it&#x27;s one I&#x27;m familiar with that tries hard to keep the standard Handler signature at the expense of interfaces to its own features.)<p>A lot of problems would go away if the standard signature was `func (Context, ResponseWriter, Request) error`. Sometimes a minimal universal option is nice because minimalism is also a virtue; but also sometimes it&#x27;s just missing necessary features.')