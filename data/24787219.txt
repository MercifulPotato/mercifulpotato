Item(by='anentropic', descendants=None, kids=None, score=None, time=1602760142, title=None, item_type='comment', url=None, parent=24781358, text='I think one of the best things about Python currently is that it prevents people with this mindset from running amok :)<p>&gt; Pandas, Tensorflow, numpy, etc. are all such complex APIs that they are indistinguishable from DSLs.<p>The advantage of their current APIs, what distinguishes them from the DSLs we&#x27;re talking about, is exactly that they&#x27;re &quot;just Python&quot;. You may need to consult the docs or the src to understand what a method does... but at least it&#x27;s just a method, you know how to call it, how to pass args in etc. It has the same level of abstraction as the rest of your code, it is composable on that level.<p>IMHO Racket is an example of what to avoid. Sure it has great tools for literally building your own #lang. But even in &#x27;vanilla&#x27; Racket code... I did a bit of Racket recently and it was constantly frustrating to find in many libraries things that look like, and could have been, just regular functions instead are syntax macros.<p>Suddenly you don&#x27;t know how anything works. Where you think you are passing a string arg to a function... you find you can&#x27;t substitute a func call returning a string, because it&#x27;s not actually a &quot;string arg to a function&quot;, it&#x27;s a syntax macro that only recognises a string token in that position.  Now you have to dig through the source code to understand what whimsical constructs the library author has inflicted upon you, maybe have to write your own macros to work around it at that level.<p>It&#x27;s exactly this kind of gratuitous DSL nonsense I would not want to see in Python. It certainly turned me off Racket (and I wanted to like it - there&#x27;s a lot to like!).  Maybe it&#x27;s part of the reason why Racket and LISPs generally are still niche languages, while Python is hugely popular.<p>&gt; the nonsense YAML&#x2F;JSON DSLs that everyone despises<p>Hey, at least it&#x27;s not XML :)<p>There&#x27;s also TOML and ProtoBufs...<p>I think these are all good choices, if all you need are data-structures.<p>If you need actual programming language features in your config that is when these become unsuitable. So rather than inventing your own half-baked DSL why not use one of the thoughtfully-designed &quot;config languages&quot; out there now like Dhall, Cue, Starlark. You won&#x27;t have to document it or maintain it, and it probably has other useful features and just works better than what you would have made yourself.')