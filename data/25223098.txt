Item(by='dusted', descendants=None, kids=None, score=None, time=1606420794, title=None, item_type='comment', url=None, parent=25222488, text='yah, here&#x27;s the code, I&#x27;m not going to excuse it being terrible, it&#x27;s mostly copy-pasta from the ssh2 readme :)<p>&#x2F;&#x2F; Main.js<p>var fs = require(&#x27;fs&#x27;);\nvar crypto = require(&#x27;crypto&#x27;);\nvar inspect = require(&#x27;util&#x27;).inspect;<p>var ssh2 = require(&#x27;ssh2&#x27;);\nvar utils = ssh2.utils;<p>var allowedUser = Buffer.from(&#x27;foo&#x27;);\nvar allowedPassword = Buffer.from(&#x27;bar&#x27;);\nvar allowedPubKey = utils.parseKey(fs.readFileSync(&#x27;foo.pub&#x27;));<p>const EventEmitter = require(&#x27;events&#x27;);<p>let watchers=0;\nclass Framer extends EventEmitter {\n    constructor() {<p><pre><code>        super(); \n\n        const borderline = &#x27;*----------------------------------------------------------------------*\\r\\n&#x27;;\n        const fd = fs.openSync(&#x27;.&#x2F;cam&#x27;, &#x27;r+&#x27;);\n        const stream = fs.createReadStream(null, {fd});\n\n        let frame = &#x27;&#x27;;\n        const len = 160*60+60;\n\n        stream.on(&#x27;data&#x27;, (d)=&gt; {\n            if (d.toString().trim() === &#x27;[stdin end]&#x27;) {\n                console.log(&#x27;stdin end?&#x27;);\n            } else {\n                const bytes = d.toString();\n                frame = frame+bytes;\n\n                if(frame.length &gt; len) {\n                    const out = frame.substr(0,len);\n                    frame = frame.substr(len);\n                    \n                    let lines = out.split(&#x27;\\n&#x27;);\n                    lines.pop();\n                    lines = lines.map ( (l)=&gt; &#x27;|&#x27;+l.substr(40, 70) +&#x27;|&#x27;);\n                    const fin = borderline + lines.join(&#x27;\\r\\n&#x27;) + &#x27;\\r\\n&#x27; + borderline + &#x27;\\u001b[&#x27;+(lines.length+2)+&#x27;A\\u001b[32D&#x27;;\n                    this.emit(&#x27;frame&#x27;, fin);\n                }\n            }\n        });\n    }</code></pre>\n}<p>const grabber = new Framer();<p>new ssh2.Server({\n  hostKeys: [fs.readFileSync(&#x27;foo.key&#x27;)]\n}, function(client) {<p><pre><code>  client.on(&#x27;authentication&#x27;, function(ctx) {\n    var user = Buffer.from(ctx.username);\n    console.log(new Date().toISOString()+ &#x27; username:&#x27;,ctx.username,&#x27; watching:&#x27;, watchers);\n    ctx.accept();\n  }).on(&#x27;ready&#x27;, function() {\n\n    client.on(&#x27;session&#x27;, function(accept, reject) {\n      var session = accept();\n\n        session.on(&#x27;pty&#x27;, (accept)=&gt;{\n                accept();\n        });\n\n        session.on(&#x27;shell&#x27;, (accept)=&gt;{\n            const stream = accept();\n            const listener = (frame)=&gt;{stream.write(frame);};\n            grabber.on(&#x27;frame&#x27;, listener);\n            watchers++;\n\n\n            stream.on(&#x27;data&#x27;, (d)=&gt;{\n                    console.log(&#x27;data:&#x27;,d);\n                if(d[0] === 0x03 || d[0] === 0x1b || d[0] == 0x71) {\n                    console.log(&#x27;client left peacefully&#x27;);\n                    stream.write(&#x27;\\r\\n Thanks for watching, have a nice day, there were &#x27;+watchers+&#x27; watching when you logged off. \\r\\n&#x27;);\n                    grabber.removeListener(&#x27;data&#x27;, listener);\n                    stream.exit(0);\n                    stream.end();\n                    watchers--;\n                }\n            });\n        });\n    });\n  }).on(&#x27;end&#x27;, function(test) {\n    console.log(new Date().toISOString()+&#x27; Client disconnected&#x27;, test);\n\n  });</code></pre>\n}).listen(2222, &#x27;0.0.0.0&#x27;, function() {\n  console.log(&#x27;Listening on port &#x27; + this.address().port);\n});<p>&#x2F;&#x2F; running it takes two terminals, one for node, one for the hasciicam:<p>mkdir lava &amp;&amp; cd java\nnpm install --save\nwhile true\ndo\nnode main.js\ndone<p>&#x2F;&#x2F; camera:\ncd lava\nmkfifo cam\nhasciicam -m text -o cam')