Item(by='Arkdy', descendants=None, kids=None, score=None, time=1604531361, title=None, item_type='comment', url=None, parent=24978356, text='# Model of Small Decisions\n## Re: Try to avoid multitasking\nAs a fullstack developer I find this particularly apt. I&#x27;m most productive when I deliberately focus on one part of the stack at a time (think days, not hours) and I rely heavily on the notes that I take to provide context.<p>## Re: Remembering effective rules\nWhen I&#x27;m documenting, often I&#x27;m in the mindset of, &quot;I solved this problem today, and writing it down ensures that I won&#x27;t have to re-solve it next month&quot;<p>## Re: Minimizing decisions\nMy most productive days revolve around making decisions up-front, ie planning out the steps of a project in a Kanban or bullet journal at a granularity of 30 min chunks (~15 min expected time, 15 min slack)<p># Possibly Related Work\n## Readme Driven Development\n<a href="https:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2010&#x2F;08&#x2F;23&#x2F;readme-driven-development.html" rel="nofollow">https:&#x2F;&#x2F;tom.preston-werner.com&#x2F;2010&#x2F;08&#x2F;23&#x2F;readme-driven-deve...</a>\nThe idea is to write your readme before you start coding. Just enough upfront planning to imagine what the system will be, discuss with team, and make changes, while delaying making all the small decisions that are needed to actually bring it to life.<p>I think that RDD is an admission that small decisions exist, so we should try to make the best big decisions that we can up-front while the cost of change is lowest. Each of the small decisions that you make in coding adds friction to change.<p>## Basecamp Hill metaphor\n<a href="https:&#x2F;&#x2F;basecamp.com&#x2F;features&#x2F;hill-charts" rel="nofollow">https:&#x2F;&#x2F;basecamp.com&#x2F;features&#x2F;hill-charts</a>\n&quot;The idea: work is like a hill\nEvery piece of work has two phases. First there’s an uphill phase where you figure out your approach. You have a basic idea about the task, but you haven’t figured out what the solution is going to look like or how to solve all the unknowns.<p>Eventually you reach a point where there aren’t any more unsolved problems. That’s like standing at the top of the hill. You can see clearly all the way down the other side. Then the downhill phase is just about execution.&quot;<p>This too I feel is an admission that small decisions exist. It&#x27;s an understanding that even when you have a plan, projects go through a phase in the beginning where there&#x27;s a concentration of decisions that need to be made, and each of those decisions introduce some measure of uncertainty.')