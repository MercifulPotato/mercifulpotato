Item(by='Geminidog', descendants=None, kids=[25557413], score=None, time=1609139760, title=None, item_type='comment', url=None, parent=25557088, text='&gt; It is true in a theoretical sense that you could describe a computer as a simulator which can be modeled with formal rules.<p>&quot;Could be described this way&quot;? The entire theory of computer science is built off of this premise. The theory of computing was derived in a logical game of axioms and theorems before a physical computer was actually invented. I don&#x27;t think you&#x27;re very familiar with this topic.<p>&gt;But it tells me nothing about why the computer as a mass-market electronic device which runs mass-market software occupies the societal role it does, nor where it will go, nor why it was an innovation which transformationally altered society in the same way as the flame, the wheel, the chariot, the bow, the written word, the loom, the printing press.<p>So what does this have to do with anything? We&#x27;re talking about the formalization of software module organization everything you&#x27;re talking about is going off topic.<p>Society, the wheel the chariot have nothing to do with the main point.<p>&gt;Now, if you&#x27;re not going to try and engage with any of that because &quot;It probably can be done, I just can&#x27;t spare the effort&quot; what do you think is more likely:<p>I&#x27;m not playing games with you. I honestly think that my point on how the software industry loves to repeat history with their design philosophies is pretty obvious and well known. Your asking for a proof which I&#x27;m simply going to say I have none, look it up yourself, I don&#x27;t want to create a bibliography for a point I find obvious. The length of my responses should tell you that I&#x27;m giving you a lot of my attention and I&#x27;m not just opening an escape hatch here.<p>&gt;1) your complaint most loudly voices new and fresh insight to the industry which it had previously missed.<p>Missed by industry. Not missed by academia. There are much is 100x more research in this area in academia that is largely ignored by industry. I don&#x27;t blame the industry. No real miracles coming out of academia yet, but the approach is correct. There research does indeed come closer and closer to our intuitive notions of what is good design and what is a correct program.<p>&gt;2) your complaint most loudly voices your own gaps in curiosity and understanding<p>So? Then tell me how my gap in understanding is reflected in my POINT rather then in my character.<p>consider a third possibility.<p>3) My complaint is neutral and simply stating a minor point but the other party wants to turn it into an exploration of the my personality. Possibly because he desires to win in the argument and sees no avenue to win through logic and thus turns to more crude methodologies like declaring the other party as having &quot;gaps in knowledge&quot; and declaring him as &quot;sad&quot; If there is a gap in knowledge point it out exactly, don&#x27;t speculate at the probability of it&#x27;s existence.<p>Look man, argue your point and my point. My character is irrelevant. If you deviate and start talking about my personal character it&#x27;s just a sign that you&#x27;ve run out of any logical merits to stand your ground. I&#x27;m helping you right now. Lay off the insults and discuss my points only. Don&#x27;t go meta and talk about how I could be wrong or lack knowledge. Talk about how the point is wrong and that helps your argument.<p>&gt;If it&#x27;s 2, then I just think that&#x27;s sad.<p>Look dude. That right there is grounds for a flag. That&#x27;s my last warning. Argue my point and don&#x27;t get personal.<p>&gt;get stuck in a phase where they dogmatically devour formalism as a vehicle to elevate the level and quality of their engineering to the level of rigor seen in the sciences.<p>I&#x27;ve never seen this phase ever. Nobody does it in industry because such formalism on software module design aren&#x27;t fully fleshed out to my knowledge. The closest you&#x27;d get in industry is Haskell and even then much of it is still design.<p>&gt;But the appropriation of surface level aesthetics masks a methodological inability to arrive at the reality via &quot;less sexy&quot; paths (as reality often requires), to differentiate and harden critical sections when necessary.<p>You mean arrive at solutions without formalism which is done all the time and easily by anyone? Formalism is 100x harder then the status quo and it&#x27;s incomplete. It&#x27;s not done in industry at all because it basically can&#x27;t be done as the tooling isn&#x27;t available. Have you ever seen Idris in production? I haven&#x27;t. What is your point.<p>&gt;It&#x27;s sad because it generally only speaks to their own lack of exposure with just how robustly software can be built,<p>Like 99.9999% of all software is built informally. That&#x27;s all the exposure you can get. It&#x27;s 100x more rare to get formal verification outside of academia. I literally don&#x27;t know what you&#x27;re talking about here. The only automated &quot;formalism&quot; in the industry is type checking and that&#x27;s as far as it goes.<p>Plenty of software that&#x27;s pretty stable is built this way. See windows and linux. Obviously the methodology to make these pieces of software relatively bug free and well designed is done through artificial selection. Endless iterations of refactoring code and fixing bugs until the software gets closer to perfection to a software engineers intuitive sense of perfection. This method can be done and is done all the time... Again, what is your point?<p>&gt;That could be you. It doesn&#x27;t have to be.<p>So what? Who cares if it&#x27;s me? How does this matter to you and what does this have to do with the topic?<p>I want you re-visualize the situation here. Pretend I don&#x27;t exist and the only thing that exists is the topic and your task is to prove it wrong. Literally that&#x27;s the only reason why I&#x27;m here. If you got something to say that&#x27;s on topic, say it and I can learn from it or I can make you learn from your error. That&#x27;s it. Talking about some vague probabilities on how I&#x27;m more likely to be wrong when compared to the industry isn&#x27;t going to go anywhere.<p>Additionally the industry isn&#x27;t exactly the smartest thing in the world. The industry invented JavaScript and now they use typescript to hide their mistake.')