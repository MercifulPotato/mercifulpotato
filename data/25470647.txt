Item(by='lapinot', descendants=None, kids=None, score=None, time=1608318384, title=None, item_type='comment', url=None, parent=25455082, text='&gt; It&#x27;s possible though that not all aspects of security can be addressed by formal methods.<p>Well, one can always devise some well-defined model in which you can prove stuff. So nothing is ever unreachable.<p>&gt; There&#x27;s the issue of side-channel attacks (like SPECTRE), which are not easy to model using formal methods.<p>SPECTRE is not an error in programs, it&#x27;s a breach of contract of the CPU (what shouldn&#x27;t be observable actually is). I&#x27;m pretty sure formal methods would be of great help to design clean interactions between a speculative engine and the cache hierarchy. See eg <a href="https:&#x2F;&#x2F;plv.csail.mit.edu&#x2F;kami&#x2F;" rel="nofollow">https:&#x2F;&#x2F;plv.csail.mit.edu&#x2F;kami&#x2F;</a> from umbrella project deepspec.<p>One very common side-channel at program level (and probably one of the most important) is timing side-channel (and all derived: power draw, noise level etc). This one is &quot;easily&quot; solved (in the sense it&#x27;s not an open research question): have constant-time function types. It&#x27;s not hard discriminating between what&#x27;s constant time and what&#x27;s not: don&#x27;t branch on input and execute only constant time primitives.')