Item(by='bitwize', descendants=None, kids=None, score=None, time=1603654268, title=None, item_type='comment', url=None, parent=24887521, text='Insert standard whinge about the lack of generics and the presence of garbage collection. Generally, a type system at least as strong as Hindley-Milner is table stakes for a new language in the 21st century; its omission from Go is a glaring fault that cannot be ignored. And the RAII pattern beats GC in 90% of cases; for the rest, reference counting may be employed. GC is obsolete, and better technologies to supersede it have been around since the 90s.<p>That said, Go <i>is</i> fun to work in, and is great for constructing microservices that are truly &quot;micro&quot; in terms of small footprint of code and dependencies. Today, enterprise development shops that embrace the microservice pattern hew stickler-like to the &quot;do one thing&quot; bit of Unix philosophy, but slack off on the  &quot;do it well&quot; bit, bringing in dozens of dependencies to serve, say, a list of employee names and IDs out of a table. Go&#x27;s opinionated minimalism helps to mitigate this trend, but Go has also proven itself up to large-ish development tasks like Kubernetes as well.<p>So that&#x27;s Go -- capable, but not ideal. A worthy choice if you want to get something out there without fighting the borrow checker -- though you may wish to consider that time spent satisfying rustc <i>now</i> is more than paid for by maintenance time saved <i>later</i>.')