Item(by='thu2111', descendants=None, kids=None, score=None, time=1605781444, title=None, item_type='comment', url=None, parent=25125835, text='Eh, maybe. Familiarity breeds contempt. I think they feel like they&#x27;re sort of out on their own with Swing and the cool kids are moving on to new things. They like the DSL aspect of Compose. Could the advantages of Compose be brought to Swing - probably. My guess is yes. But if Google are planning to spend the next decade heavily investing in a Kotlin-first toolkit and millions of Android devs will learn it, you can see how they arrived at the decision to go the whole way.<p>AWT actually uses native widgets, so if your needs are simple it&#x27;s one of the fastest ways to go as the code is all loaded in memory already and written in C&#x2F;C++, it&#x27;s a part of the OS after all. Modern Swing isn&#x27;t slow. IntelliJ&#x27;s performance isn&#x27;t limited by Swing I think, it&#x27;s much more limited by RAM in general.<p>JavaFX never reached the maturity of Swing in terms of raw stability, but it&#x27;s got a drastically better API and TornadoFX shows you can layer a Kotlin DSL on top very easily. Frankly I wish they were investing in JavaFX instead because it&#x27;s actually a desktop toolkit, and is already &quot;there&quot;, whereas Compose is going to be beta-ware for a long time. JavaFX has been stabilising over time because for the last 7 years or so it&#x27;s not been adding many features, the work has all been bug fixing and performance improvements. It&#x27;s a mature toolkit that just didn&#x27;t quite get critical mass.')