Item(by='chubot', descendants=None, kids=None, score=None, time=1603245131, title=None, item_type='comment', url=None, parent=24842689, text='Yeah, &quot;path dependence&quot; pretty much sums up the comment.  I should probably write something about that, because a huge factor in the design of <a href="https:&#x2F;&#x2F;oilshell.org" rel="nofollow">https:&#x2F;&#x2F;oilshell.org</a>.  But I still get questions about it (like &quot;Why can&#x27;t we just get rid of shell and start over from scratch?&quot;)<p>A few points I would like to add on:<p>- I don&#x27;t view the existence of TypeScript, MyPy, and Sorbet as evidence in favor of static typing.  It&#x27;s evidence in favor of gradual typing!<p>- The Oil project gave me a lot of experience with the relation between metaprogramming&#x2F;reflection, dynamic types vs. static types, performance, and code length.<p>In particular the code moved from dynamic to static typing, and got a lot faster.  But dynamic typing wasn&#x27;t a mistake.<p>Short recap: Oil&#x27;s code is 5-7x shorter than bash [1], and a lot of that is due to starting out as dynamically typed, with a lot of metaprogramming.  (I still believe &quot;size is code&#x27;s worst enemy&quot; -- big code is understood more poorly, which makes it harder to modify, regardless of static types.)<p>It is also something like 30x-50x slower than bash in Python!  So, unusably slow.  However the surprise is that I statically typed this code, and semi-automatically translated it to C++, and the result is now faster than bash. [2]<p>-----<p>So the high level, short code has enough semantic information to be fast (after you add explicit types).<p>The static typing process mainly evolved expanding metaprogramming to textual code generation!  I estimate that this was at least 9 months of rewriting.<p>That&#x27;s what your arguments are missing IMO.  If you&#x27;re writing Java in Python, then sure Python is going to seem like it offers no advantages, and it might as well be statically typed.<p>But that&#x27;s not how people write programs in dynamic languages (and honestly I thought you would appreciate that more, having written so much about dynamic languages!)  The porting process taught me exactly how much dynamism I was using, and it was a lot!  It was pulling a lot of weight.<p>I should show all the code generators and generated code in an essay... it&#x27;s a very concrete demonstration.<p>So there is the fallacy of &quot;type inference&quot; solves the problem -- it&#x27;s not that we&#x27;re too lazy to write down types; it&#x27;s that we&#x27;re using techniques that static type systems can&#x27;t handle.  Good thread about that: <a href="https:&#x2F;&#x2F;twitter.com&#x2F;sliminality&#x2F;status&#x2F;1317331149354463232" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;sliminality&#x2F;status&#x2F;1317331149354463232</a><p>I&#x27;m not saying the Oil experience generalizes, since it&#x27;s an unusual project, but it&#x27;s definitely not as simple with &quot;go with static types so you don&#x27;t get trapped&quot;.  That said, the conundrum you&#x27;re talking about is very real.<p>-----<p>But despite writing all that, I&#x27;m actually leaning in your direction, and I started a statically typed language :)<p><a href="https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;ProgrammingLanguages&#x2F;comments&#x2F;jb5i5m&#x2F;help_i_keep_stealing_features_from_elixir_because&#x2F;g8urxou&#x2F;" rel="nofollow">https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;ProgrammingLanguages&#x2F;comments&#x2F;jb5i5...</a><p>I would start with an interpreter so it can have metaprogramming (e.g. like a constexpr interpreter, or what Zig does).  I would like to add a gradual type system, but I don&#x27;t really know how to write one, so the first cut will be a traditional static type system.  (In this world, getting the 30-50x speedup relies on the program being 100% statically typed, yet gradual typing is still important IMO.  It&#x27;s very simple, no infinite treadmill of JIT work as you see in the &quot;professional&quot; projects.)<p>-----<p>This is probably something for an essay, but I would say dynamic types are demonstrably better than static types for at least 3 domains: UI, data science, and reverse engineering (and I have a bunch of experience to back this up).   Basically anything that involves &quot;learning about the world&quot;, or &quot;schema discovery&quot;.<p>[1] <a href="http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2019&#x2F;06&#x2F;17.html#why-is-it-written-in-python" rel="nofollow">http:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2019&#x2F;06&#x2F;17.html#why-is-it-writt...</a><p>[2] <a href="https:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2020&#x2F;01&#x2F;parser-benchmarks.html" rel="nofollow">https:&#x2F;&#x2F;www.oilshell.org&#x2F;blog&#x2F;2020&#x2F;01&#x2F;parser-benchmarks.html</a><p>Good thread about how successful Ruby and Python have been in YC companies: <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24279611" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24279611</a>')