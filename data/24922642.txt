Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1603911078, title=None, item_type='comment', url=None, parent=24922459, text='&gt; C++ gives you enough access control so you can expose things just for testing if you want (make the test a friend, encapsulate the functions into another class). You can do this without breaking encapsulation.<p>If tests can do this, then so can anyone else. Consequently encapsulation is broken and your invariants aren&#x27;t invariant anymore.<p>&gt; I don&#x27;t exactly follow your last paragraph, but tests aren&#x27;t just something you throw away when they pass. So if I were to write tests for the helper functions, I wouldn&#x27;t delete those tests on a refactoring pass in order to use nested functions.<p>I didn&#x27;t write clearly because I didn&#x27;t re-present the context of that paragraph.<p>I&#x27;m not talking about throwing away tests after they&#x27;re run. Keep in mind my original post&#x27;s context: manually inlined functions for access control to that functionality. You already can&#x27;t test those separately because they aren&#x27;t exposed. By moving to nested functions you regain some semblance of reasonability (versus 1k+ line functions with who knows how many levels of nested blocks) and the compiler can do the inlining (for performance). But it has zero net effect on testing, it&#x27;s a wash. Because the public interface is the same (only the primary function interface is accessible to a tester).<p>If nested functions are available (and with C++ they are with lambdas) the refactoring would (or could) be something like: 1k line function =&gt; 500 line function with several lambdas =&gt; 3-8 functions totaling ~500 with some lambdas remaining.<p>Only those that make sense to move out for separate testing would be, and only if you also wanted to expose them for others to call.')