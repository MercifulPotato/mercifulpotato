Item(by='rleigh', descendants=None, kids=None, score=None, time=1602607023, title=None, item_type='comment', url=None, parent=24766684, text='There is also the matter of implementation quality and robustness, and the future of XML as a supported technology.<p>XML technology is over 20 years old, and mainstream support for it has been slowly declining.  If you&#x27;re writing in any language other than Java, you don&#x27;t have any good choices if you want to use more than the basic SAX&#x2F;DOM APIs, and all of the available libraries have significant drawbacks if you want to do anything more than the bare essentials.  I can fully understand why projects want to drop their existing XML dependencies where possible, and shy away from picking up new ones.<p>If you&#x27;re writing a product using C or C++, then you&#x27;ve got few choices: Apache Xerces-C and Xalan-C for XML and XSLT&#x2F;XPATH, respectively.  Or libxml&#x2F;libxslt.  Neither of these is a good choice (for the record, I&#x27;m involved with both Apache projects on an ad-hoc basis).  Or QtXml&#x2F;QtXmlPatterns.  There are others but they aren&#x27;t worth writing about.  The Apache projects had pretty comprehensive support for the earlier XML and XSLT&#x2F;XPATH standards, and matched the Java implementations pretty closely.  But with the waning interest in XML, and the huge amounts of technical debt involved, both projects have been in maintenance mode for the last decade.  No one wants to break compatibility with significant rework.<p>Then there&#x27;s the GNOME-derived libxml&#x2F;libxslt.  A little more modern but C-only, and lacking most of the features provided by the Apache implementation.  OK if a simple subset is sufficient, but otherwise not viable.<p>The Qt libraries are good, but it&#x27;s a very heavy dependency and is again a subset of the Apache functionality, and is XSLT2 only.<p>When it comes to adding in XPATH 2.0, there just isn&#x27;t the maintainer interest available, primarily because there&#x27;s no corporate interest in taking any of these projects forward in any meaningful way.  XML is no longer cool or interesting, and as such projects are not willing to spend time and money on maintaining these codebases.  They are all, to varying degrees, in maintenance mode.<p>I previously worked on a large project that for various reasons, including jumping on the bandwagon of the moment, heavily opted into using XML, XSLT and using as many obscure features as possible.  Being Java based, it had access to jars for doing pretty much any XML processing it liked.  If the core functionality provided by the JDK isn&#x27;t enough, you&#x27;ve got Saxon and other implementations readily to hand.  I had to port a subset of the functionality to C++, and the only possibilities were Xerces+Xalan.  libxml&#x2F;libxslt simply didn&#x27;t have the featureset for all of the obscure XML processing features needed, or all the EXSLT functions.  Needing to depend upon a pair of obsolete, essentially unmaintained and difficult to use libraries is why I ended up involved in their maintenance.  I later added Qt support as an alternative, but at the expense of having to disable a huge amount of core functionality.  I&#x27;d like nothing more than to dump the lot of them.<p>It&#x27;s also worth pointing out that the root of the problem here is the absurd complexity of all of the (many) XML standards and APIs.  A fairly simple concept which has so much complex stuff layered upon and grafted onto it that it&#x27;s not really much of a wonder that it&#x27;s in such of a poor state.  It should have been kept simple.')