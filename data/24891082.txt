Item(by='yakubin', descendants=None, kids=[24891143, 24893422, 24905561], score=None, time=1603668342, title=None, item_type='comment', url=None, parent=24890463, text='I&#x27;ve recently picked it up, reading &quot;ML for the working programmer&quot;. The language is fairly simple, everything just fits. However:<p>1. Both Vim and Emacs are horribly annoying with their automatic indentation for SML. There is a lot of fighting against the editor in this department. In Emacs e.g. you have to delete whitespace all the time, because otherwise you&#x27;d have top-level function definitions shifted 80 characters to the right.<p>2. I&#x27;ve used Poly&#x2F;ML and SML&#x2F;NJ so far. Both of them are purely interactive, meaning I can&#x27;t just compile a program into ELF and ship it somewhere else without the compiler. That makes it a no-go for me for real-world use.<p>3. The interactive modes of Poly&#x2F;ML and SML&#x2F;NJ don&#x27;t support readline shortcuts. They are the most cumbersome REPLs I&#x27;ve ever used.<p>4. Inline type declarations (as opposed to Haskell-style type declarations on a separate line) are very noisy - they make reading the code harder. Omitting them (which is the rule in SML in practice) leads to hard-to-decipher compilation errors when you write a new piece of code and you made an error somewhere which confused the type-inference about your intentions. Suddenly forgetting about a word or a set of parentheses in one function results in errors in another perfectly-good function. It&#x27;s the horror of C++ templates all over again.')