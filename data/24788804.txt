Item(by='dragontamer', descendants=None, kids=[24789670], score=None, time=1602770898, title=None, item_type='comment', url=None, parent=24788175, text='You might be surprised.<p>Cryptographic RNGs achieve their strength through large round-counts. ChaCha runs 20x quarter rounds of its algorithm, which means you&#x27;re basically doing:<p>randomNumber = hash(hash(hash(hash...hash(seed)))))))))))<p>After 80-iterations of your hash function, you&#x27;d HOPE it was random looking!! In effect, cryptographic RNGs are built for safety, and have huge safety margins.<p>---------<p>The &quot;natural&quot; approach to making a non-secure (but faster) RNG is to reduce the hash rounds to a single cycle. IE: instead of running 80-quarter rounds of ChaCha, why not just run 1x quarter-round of ChaCha?<p>Well, it turns out that 1-round of ChaCha20 is utter crap. Completely crap, worse than a LCGRNG.<p>------<p>AES is similarly designed for 8+ rounds. In my experiments, it took 4 or 5 rounds before AES would achieve a decent distribution of bits!!<p>It took a fair bit of effort for me to turn AES into a random number generator. I analyzed AES&#x27;s bit-flow, and designed a &quot;counter function&quot; that worked well with AES&#x27;s single-round weakness. Even then, I never accomplished a 1-round of AES RNG, I had to use 2-rounds of AES to make a decent bit distribution.<p>In particular: 1-round of AES is only designed to shuffle bits across a 32-bit DWORD. You need the 2nd round (or more) to shuffle the bits to the whole 128-bit group. (That is: the &quot;MixColumns&quot; and &quot;ShiftRows&quot; step of AES, which only really take effect on the 2nd round or later).<p>-----<p>If anyone could figure out a special &quot;seed&quot; function that can work with AES&#x27;s single-round weakness, they probably can make a much faster RNG than what I accomplished. Or maybe, people can just be &quot;happy&quot; with 32-bits of well-shuffled bits? A 32-bit RNG (with 128-bit seed) is probably still useful to somebody.')