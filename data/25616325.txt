Item(by='mikepurvis', descendants=None, kids=[25617138, 25624350], score=None, time=1609620217, title=None, item_type='comment', url=None, parent=25615098, text='I&#x27;m a recent Rust fan (via AoC), but for &quot;easy things hard&quot;, I would offer input&#x2F;string processing as an exampleâ€” regexes, string operations, grammar, etc. I <i>know</i> that Rust is forcing me to be correct and handle (or explicitly acknowledge that I&#x27;m not handling) my error cases, but from the point of view of just wanting to get the happy path working, it&#x27;s a lot more noise to deal with compared with what it would look like in Python, eg:<p><pre><code>        let re = Regex::new(&quot;(?P&lt;min&gt;[0-9]+)-(?P&lt;max&gt;[0-9]+) (?P&lt;letter&gt;[a-z]): (?P&lt;password&gt;[a-z]*)&quot;).unwrap();\n        re.captures_iter(&amp;contents).map(|caps|\n            Input {\n                password: caps.name(&quot;password&quot;).unwrap().as_str().to_string(),\n                letter: caps.name(&quot;letter&quot;).unwrap().as_str().chars().next().unwrap(),\n                min: caps.name(&quot;min&quot;).unwrap().as_str().parse().unwrap(),\n                max: caps.name(&quot;max&quot;).unwrap().as_str().parse().unwrap()\n            }\n        ).collect()</code></pre>')