Item(by='Matthias247', descendants=None, kids=[24715652], score=None, time=1602125754, title=None, item_type='comment', url=None, parent=24713477, text='&gt; But QUIC Datagrams do have ACKs, and don&#x27;t have retries. Maybe we don&#x27;t want them to have ACKs, but as long as it&#x27;s opt-in, is that not enough for the upper layers?<p>Imagine the following: The users writes a few bytes on a stream, those get immediately transmitted and lost. Before the retransmission, the user enqueues more data.<p>The Quic implementation has now the opportunity to merge everything into a single Quic &quot;packet&quot;, and even a single Quic &quot;frame&quot;, and send everything together. If those things were on top of datagrams, it might need to send the whole datagram again?<p>There are also other scenarios: E.g. the stream getting reset while transmission is in progress. If that happens none of those data chunks will ever have to be retransmitted. I feel like having an additional layer here will make this harder and less efficient.<p>&gt; And I don&#x27;t think connection establishment uses any sort of stream abstraction either since people speak of n-packet handshakes?<p>It does! All the TLS&#x2F;handshake data is transferred in CRYPTO frames (<a href="https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;draft-ietf-quic-transport-30#section-19.6" rel="nofollow">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;draft-ietf-quic-transport-30#sec...</a>). CRYPTO frames are more or less the same as STREAM frames (<a href="https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;draft-ietf-quic-transport-30#section-19.8" rel="nofollow">https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;draft-ietf-quic-transport-30#sec...</a>). They both represent an ordered reliable byte stream - just in different namespaces.<p>This is important for the handshake, since the TLS implementation will act on this ordered stream data and kind of treat it as a TLS data over TCP stream.')