Item(by='gpderetta', descendants=None, kids=[24692065, 24691349], score=None, time=1601906374, title=None, item_type='comment', url=None, parent=24679740, text='I love coroutines and have written a few implementations myself. A few comments:<p>Don&#x27;t have separate get and set_context. They are hard to understand and use (see the volatile x) and are suboptimal, a swap_context is better.<p>With this change, you do not need to store the callee save registers in the context, you can save them on the top of the stack directly, including ip. The pointer to context is just a pointer to the top of stack of the suspended context (there is no actual Context object).<p>The perfect primitives are:<p><pre><code>  &#x2F;&#x2F; switch to &#x27;to&#x27;. Returns another context on return, possibly, \n  &#x2F;&#x2F; but not necessarily &#x27;from&#x27;, also possibly null.\n  &#x2F;&#x2F; This is an optimization as the next funciton is enough\n  ctx* swap_context(ctx * to);\n\n  &#x2F;&#x2F; same as swap_context, but execute fn in the &#x27;to&#x27; context, before \n  &#x2F;&#x2F; returning from swap_context. &#x27;fn&#x27; takes a pointer to the newly suspended \n  &#x2F;&#x2F; calling context and closure is passed through. \n  &#x2F;&#x2F; The function should return a context (possible &#x27;from&#x27;) or nullptr.\n  ctx* swap_context_ex(ctx* to, ctx* (*fn)(ctx*, void*), void* closure);\n\n  &#x2F;&#x2F; create an empty context with an allocated stack. swapping to it will deallocate \n  &#x2F;&#x2F; the stack and terminate the context. use swap_context_ex to actually assign a \n  &#x2F;&#x2F; function to run on the the context\n  ctx* make_empty_context();\n</code></pre>\nedit:  the bits in the article about improving the gdb and *san experience are great and it something I wasn&#x27;t aware!')