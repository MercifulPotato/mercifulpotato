Item(by='gen220', descendants=None, kids=None, score=None, time=1608387404, title=None, item_type='comment', url=None, parent=25477087, text='It’s “Domain Driven Design”: <a href="https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design" rel="nofollow">https:&#x2F;&#x2F;en.m.wikipedia.org&#x2F;wiki&#x2F;Domain-driven_design</a>.<p>Bounded Contexts is an idea that helps you draw the boundaries between domains. It asks you to be disciplined in your abstractions, and in return it allows you to feel comfortable changing implementations within a domain without fear of cascading second order effects to other domains.<p>For example, your service&#x2F;library for managing customers shouldn’t return data about the books they’ve purchased. That comes from the order context, which composes the customer and book contexts.<p>If your boundaries are well defined, you can change the order process without fear of the book and customer models, and vice versa.<p>It marries well with service oriented architecture, because you can use the network to help enforce a boundary. You still need some skill to enforce the <i>correct</i> boundary, of course.')