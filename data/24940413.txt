Item(by='kleendr12', descendants=None, kids=[24940471], score=None, time=1604048609, title=None, item_type='comment', url=None, parent=24940301, text='I&#x27;m not quite sure I follow your comment. If the program never terminates then it will loop forever and potentially freeze the machine depending from where it is invoked in the kernel. Example of loops that can be detected to terminate:<p><pre><code>  int nested_loops(volatile struct pt_regs* ctx)\n  {\n    int i, j, sum = 0, m;\n\n    for (j = 0; j &lt; 300; j++)\n      for (i = 0; i &lt; j; i++) {\n        if (j &amp; 1)\n          m = ctx-&gt;rax;\n        else\n          m = j;\n        sum += i * m;\n      }\n\n    return sum;\n  }\n</code></pre>\nOr for example another one that is also part of selftests with induction variable i:<p><pre><code>  int while_true(volatile struct pt_regs* ctx)\n  {\n    int i = 0;\n\n    while (true) {\n      if (ctx-&gt;rax &amp; 1)\n        i += 3;\n      else\n        i += 7;\n      if (i &gt; 40)\n        break;\n    }\n\n    return i;\n  }\n</code></pre>\nOverall this is very useful to avoid unrolling loops &amp; keeping the code dense and icache friendly, and to parse (e.g.) IPv6 extension headers and such.')