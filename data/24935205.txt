Item(by='wesleyy', descendants=None, kids=None, score=None, time=1604002542, title=None, item_type='comment', url=None, parent=24925910, text='&gt; That would work if, like golang, bazel was the &quot;default&quot; package manager for everyone. Right now it&#x27;s not easy to get, for example, vulkan or muslc or qt as a bazel package.<p>I agree, but I don&#x27;t think a &quot;Bazel management system&quot; would solve this issue, because the problem is people buying into bazel in the first place<p>&gt; It&#x27;s also not easy to publish a version of your package (A) that depends on another package (B). This would create a diamond-problem like situation where your package (C) depends on both packages (A-&gt;B, C-&gt;A, C-&gt;B). So, some code needs to resolve these issues and reproducible identify the exact hashs of everything to pull in to make it a not-manual process.<p>This is a good point. However, I think realistically, effort would be better spent currently on making it easy to bazelize existing code. I have (unfortunately) never been able to pull an external library without manually bazelizing it, and this only actually ends up becoming a problem when bazel picks up enough momentum in OSS that you are likely to find a external library that is already bazelised.')