Item(by='AnimalMuppet', descendants=None, kids=[24839706], score=None, time=1603211129, title=None, item_type='comment', url=None, parent=24832594, text='&gt; I find that you&#x27;re the one who seems inexperienced.<p>35 years professional software engineering, 30 years in embedded.  I&#x27;m going to guess that you have less.<p>Your way of organizing code works great, on paper.  Maybe on a small project.  For a real embedded system, with multiple threads, with state data being used <i>everywhere</i>... your approach doesn&#x27;t make much sense.  It makes a much <i>worse</i> design than shared mutable state.  (Yes, shared mutable state is in fact as evil as you have think it is.  It&#x27;s still better than trying to make your alternative work in that environment.)<p>Why is state data used everywhere?  Because embedded systems often respond in different ways depending on the state of external inputs, and don&#x27;t go read the state at the time they make the decision on how to respond.  If those decisions are spread through the bulk of the code, there&#x27;s really not much left to put in your combinator.  And there&#x27;s no point in trying to add that paradigm to a system that&#x27;s going to have tons of shared mutable state <i>anyway</i>.')