Item(by='MaxBarraclough', descendants=None, kids=[25837379, 25837291, 25838486, 25838082, 25838274, 25837543], score=None, time=1611082310, title=None, item_type='comment', url=None, parent=25836398, text='Good analyses, but I was expecting more discussion of how best to work with (conceptual) state machines when writing code.<p>I&#x27;m no expert on the matter, but there are code-generative tools out there that help make state machines very explicit: you describe the state machine, and the system generates the code. This should help to avoid issues with transitions that you failed to consider, which may be of real value as such unexpected transitions may pose a serious security issue when implementing the state machine &#x27;by hand&#x27; in code. More so than many design patterns, it seems to make good sense to use a code-generative approach for state-machines.<p>This is of course related to how regex works, as regex is implemented with state machines, but state-machine code-generator systems might not make use of the usual regex syntax.<p>Related reading: <i>Turning vaguely reassuring finite-state machines into regular expressions</i>, <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25496045" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25496045</a>')