Item(by='peter_d_sherman', descendants=None, kids=None, score=None, time=1610602235, title=None, item_type='comment', url=None, parent=25772483, text='&gt;&quot;Some of zForth&#x27;s highlights:<p>o <i>Small dictionary:</i> instead of relying on a fixed cell size, the dictionary is written in variable length cells: small and common numbers take less space then larger, resulting in 30% to 50% space saving<p>o <i>Portable:</i> zForth is written in 100% ANSI C, and runs on virtually all operating systems and all architectures. Tested on x86 Linux&#x2F;Win32&#x2F;MS-DOS (Turbo-C 1.0!), x86_64, ARM, ARM thumb, MIPS, Atmel AVR and the 8051.<p>o <i>Small footprint:</i> the kernel C code compiles to about 3 or 4 kB of machine code, depending on the architecture and chosen cell data types.<p>o <i>Tracing:</i> zForth is able to show a nice trace of what it is doing under the hood, see below for an example.<p>o <i>VM:</i> Implemented as a small virtual machine: not the fastest, but safe and flexible. Instead of having direct access to host memory, the forth VM memory is abstracted, allowing proper boundary checking on memory accesses and stack operations.<p>o <i>Flexible data types:</i> at compile time the user is free to choose what C data type should be used for the dictionary and the stacks. zForth supports signed integer sizes from 16 to 128 bit, but also works seamlessly with floating point types like float and double (or even the C99 &#x27;complex&#x27; type!)<p>o <i>Ease interfacing:</i> calling C code from forth is easy through a host system call primitive, and code has access to the stack for exchanging data between Forth and C. Calling forth from C is easy, just one function to evaluate forth code.&quot;')