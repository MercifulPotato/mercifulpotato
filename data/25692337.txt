Item(by='cxr', descendants=None, kids=[25695456], score=None, time=1610149138, title=None, item_type='comment', url=None, parent=25680960, text='&gt; when I hear &quot;document on how to update something&quot; I hear &quot;untested set of manual steps&quot;<p>Why &quot;untested&quot; and why &quot;manual&quot;?  I mentioned &quot;detail&quot; and &quot;rigor&quot; more than once and that it&#x27;s possible to take it and feed it into a machine that will &quot;perform those steps automatically&quot;.<p>I don&#x27;t think kernel+shell are all that timeless of an interface to write to.  They only barely pass for being portable in the here and now.  (Oilshell&#x27;s existence as a project is a testament to that.  Its breadth and the depth of the pitfalls it has to avoid is another one.)  Most of the time portability is an illusion that comes from most people around a given project being part of the same technological subculture, so they happen to use a common implementation.  When you stray outside of that is when you run into breakage that no one is otherwise aware of.  See also &lt;<a href="https:&#x2F;&#x2F;pointersgonewild.com&#x2F;2019&#x2F;11&#x2F;02&#x2F;they-might-never-tell-you-its-broken&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pointersgonewild.com&#x2F;2019&#x2F;11&#x2F;02&#x2F;they-might-never-tel...</a>&gt;.<p>&gt; I don&#x27;t quite understand what you are getting at so I think you must have a much different use case [...] It seems like you might be talking more about a blog that lots of people are editing?<p>Nope, the use cases we&#x27;re talking about are the same.  I don&#x27;t know where the lots of people editing parts comes in.<p>What I&#x27;m talking about is conceptually very simple (maybe <i>too</i> simple, leading to an assumption that there&#x27;s a lot more to it).  It&#x27;s a document that describes in detail, just like any other tech spec, precisely how to process a given input and turn it into a directory of static resources that you are used to dealing with, i.e., the output of a static site generator.  The only difference between it and other specs is that in this document you specify things with enough rigor that you can effectively &quot;execute&quot; the specification itself.  I&#x27;ve heard Rob Pike say in a few talks that some of the Golang backends come from a tool Ken wrote where they can feed in PDF manuals from microprocessor vendors and get a working Go assembler out of them, but I&#x27;m not intimately familiar with that tool.  See also &lt;<a href="http:&#x2F;&#x2F;www.moserware.com&#x2F;2008&#x2F;04&#x2F;towards-moores-law-software-part-3-of-3.html" rel="nofollow">http:&#x2F;&#x2F;www.moserware.com&#x2F;2008&#x2F;04&#x2F;towards-moores-law-software...</a>&gt; where some RFC-style diagrams constitute a part of the implementation of a working TCP&#x2F;IP stack.<p>&gt; If you have an example then that would help.<p>I might do a short (? I&#x27;d hope) screencast next weekend if you&#x27;re interested in providing some feedback.  Asynchronously and pre-recorded, not live.  My first assumption is that when you see what this is all about, then you&#x27;re going to be pissed off.  Based on your description of your current setup, though, that impression may not be accurate.<p>&gt; Apps are the things that rot.<p>This is where my comments about &quot;predilection for certain systems and ways of working&quot; and how &quot;we&#x27;ve missed the obvious and have been doing it all wrong&quot; come from.  In trying to solve these problems, there&#x27;s <i>way</i> too much emphasis on apps, CI configurations, or whatever mindtrap is ensnaring people at the moment.  The &quot;obvious&quot; approach I refer to is first adopting a mindset where it&#x27;s an imperative to include a functional specification as described.  I.e., add it to the set of things that you intend to publish on your site.  Once you do this, it&#x27;s hard not to notice that there&#x27;s now an overlap between your data and the &quot;app&quot; you&#x27;re using to publish it.  So the second thing to do is to eliminate the part that&#x27;s most susceptible to rot.')