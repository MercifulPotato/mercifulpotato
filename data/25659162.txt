Item(by='woofie11', descendants=None, kids=None, score=None, time=1609950517, title=None, item_type='comment', url=None, parent=25657351, text='I think we&#x27;re in agreement.<p>I do a lot of my work in Python these days. One of the really nice things Python did is take the major design patterns in Lisp&#x2F;Scheme, which were super-powerful but quite unreadable, and gave visually-distinct ways of expressing those.<p>For example, major design patterns like maps and filters are done as list comprehensions, which are nice.<p>Ditto for decorators.<p>The key thing is that I still have general-purpose functional programming (except for tail recursion, which I dearly miss), but I use constructs which don&#x27;t have explicit Python semantic quite rarely. Still, there are times when I can do something which will e.g. cut architectural complexity in half, and that&#x27;s well worth a little bit of magic code. I&#x27;ll usually try to do that in an isolated, well-documented file which has the magic. That&#x27;s enabled by having a language which relies on programmers having discipline rather than handcuffs.<p>It&#x27;s a lot cleaner than the architectural contortions I see for any use of Java beyond its target (Java has a nearly ideal set of expressiveness for making an inventory management system, CRM, store web site, or similar types of database-backed applications).<p>As a footnote, the place for the type of C code you gave is low-level programming. That&#x27;s a disappearing market, as even microwaves can now afford RISC chips in the tens of megahertz with modern memory managements, but for hardware, you really care not just what happens, but how it happens. I know what machine code while(*a++) will translate to, and for those sorts of systems, that&#x27;s nice.')