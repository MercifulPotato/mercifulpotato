Item(by='rektide', descendants=None, kids=None, score=None, time=1603752031, title=None, item_type='comment', url=None, parent=24901453, text='Great question.<p>Capabilities are a more generic, core idea.<p>In this particular example, the capability to see a directory &amp; it&#x27;s children is what&#x27;s getting passed around &amp; refined (starting with the top level directory the app has, then perhaps winnowing down the capability to pass to the upload middleware).<p>But capabilities can represent other things too. The program might get capabilities to open a socket, to listen on a socket, to send or receive data on a socket. Those capabilities might similarly be refined &amp; passed around to libraries.<p>The broader model of capabilities is that you can only do whatever you are passed, only exercise whatever capabilities you get. You have no other way to talk to the platform, no platform api, other than the set of capabilities you get from your caller. So capabilities keep getting winnowed down, shrunk, to the right size, where we expect, for the file-upload middleware, that it can read some bytes off some sockets it gets passed, and where it can write files, into a certain directory, but having no other capabilities, it can not do any more than that.<p>While filesystem sandboxing was core to my example, it&#x27;s just one demonstration of what a capability might be. The underlying model for how that sandboxing is implemented is &quot;capability based&quot;. There&#x27;s a pretty long history for capability based systems. Not a simple example, but the &quot;E language&quot; is a pretty well known example from 1997 that tried to push capabilities into an interesting distributed frontier: <a href="http:&#x2F;&#x2F;www.erights.org&#x2F;" rel="nofollow">http:&#x2F;&#x2F;www.erights.org&#x2F;</a>')