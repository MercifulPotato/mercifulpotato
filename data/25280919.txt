Item(by='knorker', descendants=None, kids=None, score=None, time=1606939782, title=None, item_type='comment', url=None, parent=25280317, text='&gt; Well, your handlers should not generally panic!<p>Uhm… no… no they should not.<p>I feel like you&#x27;re missing the whole point, here. An interface that is extremely hard to use correctly without turning small bugs into major outages is not a good tool.<p>And one way to make sure this doesn&#x27;t happen is to write exception-safe code, because Go has exceptions.<p>You could also argue that your C++ code shouldn&#x27;t throw, and I agree. It should very rarely throw. But when it does it should be safe.<p>If Go had simply not had exceptions then this would have been easier.<p>&gt; It&#x27;s called panic in Go so panicking should be hopefully rare for the peace of mind<p>If you write a web service that hits a bug that panics about once per million requests, and you run 1000 qps, that means your Lock();dothing;Unlock() will deadlock the whole webserver once every 15 minutes.<p>If you write exception safe code, then it does not.')