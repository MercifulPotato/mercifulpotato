Item(by='xg15', descendants=None, kids=[25612732], score=None, time=1609580014, title=None, item_type='comment', url=None, parent=25611072, text='I don&#x27;t think the example had any practical use, really. I understood it more as an illustration of how weird Chrome&#x27;s scripting support is: On the one hand, it lets you put programs as complex as a working C compiler in there - but on the other hand, interaction with the outside world is limited to putting stuff into text fields...<p>&gt; <i>also, is the &quot;input&quot; and &quot;output&quot; of this compiler just code and executables?</i><p>Mostly yes. I&#x27;m not sure how much of a typical build chain he was trying to convert to JS here, but the compiler itself typically takes a bunch of files with C code and outputs a number of &quot;object files&quot;, which are really chunks of machine code. In an actual build process, you&#x27;d then use a linker to glue those object files together in the right way and make an executable.<p>I guess, what you could do if you wanted was to include the whole build chain (including linker) into the PDF, encode the executable as Base64 and fill some form field of the PDF with it. Then your workflow would be as follows:<p>1) Write some C code<p>2) Copy the C code into form field #1 if the PDF.<p>3) Hit a &quot;compile&quot; button or something. Form field #2 fills with what looks like an enormous amount of random gibberish (really the Base64-encoded binary)<p>5) Copy all the text from form field #2, use a program of your choice to decode the Base64 and save the decoded binary on your hard drive.<p>6) Run the binary on your hard drive and watch your C code execute. Hooray!')