Item(by='cb321', descendants=None, kids=None, score=None, time=1608044896, title=None, item_type='comment', url=None, parent=25408256, text='Compiling an echo &quot;hello world&quot; module in Nim from scratch to a fully linked executable can be under 200 milliseconds on modern hardware with the TinyC&#x2F;tcc backend.  tcc has its own assembler and ELF linker built in to get that speed.  I don&#x27;t know much about fpc&#x2F;free Pascal, but maybe it also does very little optimization of generated code and has its own assembler&#x2F;linker.  It think these are the Big Three things for a fast compile.<p>To get a fast edit&#x2F;compile&#x2F;test workflow I just set up my default backend to be tcc and automatically switch to gcc if &quot;-d:release&quot; or &quot;-d:danger&quot; is given on the compile line { really I abbreviate that to &quot;-d:r&quot; :-) }  This makes it easy to develop quickly and then switch right over to quick timing tests.<p>Nim also has an interpreter whose startup is more like 100 ms, but which is limited to only what its virtual machine target (also used for compile-time computation) supports.')