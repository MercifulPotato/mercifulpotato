Item(by='belorn', descendants=None, kids=None, score=None, time=1602081615, title=None, item_type='comment', url=None, parent=24708145, text='&gt; The question the judge would have to answer, is the non GPLd portion a &quot;derivative work&quot; of the GPLd portion and is that derivative work being distributed.<p>Technically the derivative work is the combination of the two, not just the non-GPLd portion. Part of the argument that a lawyer would have to do is to define what &quot;the work&quot; is, and arguing distinction in linking technology might not be that great strategy to an non-technical judge or jury. If you present a video player what people likely will see as the work is the video player, not some independent code, independent glue and 20-30 independent library dependencies. As programmers however we might see things a bit different in the same way a painter will look at paint on a canvas.<p>However I would agree that if there exist multiple interchangeable libraries the argument for two independent work seems to be much stronger. There are for example multiple libc implementations, and for those one could make a case that a program and its libc dependency does not create a derivative work. In practice however I doubt such argument would be much of a benefit in real GPL infringement cases.<p>The wine project has a rather strong fair use clause regardless of the outcome of this court case, since it would be a rather difficult argument for Microsoft to argue that wine has caused considerable commercial damage. Basically every point of fair use is applicable here, from &quot;Purpose and character of the use&quot;, &quot;Amount and substantiality&quot;, &quot;Effect upon work&#x27;s value&quot; and additional values like acknowledgement of the copyrighted source (if the API is copyrightable). Wine is a compatibility layer, not an re-implementation. Courts would naturally have to consider if that distinction is relevant but I suspect they would have a much easier time than java on android.')