Item(by='zoomix', descendants=None, kids=None, score=None, time=1606745469, title=None, item_type='comment', url=None, parent=25252993, text='&gt; &gt;Yes, for prose. And no one actually said easier, they said faster. Code is typically full of parenthesis special notations and characters. Nobody&#x27;s speed-reading code. That doesn&#x27;t make sense.<p>&gt; Because code is harder to read that prose I think that favoring short lines is better. It forces you into breaking your code in more digestible bits rather than a 500 char single-line monster statement. Honestly it&#x27;s very similar to the argument against very deep indentation (forcing you to break your code in subfunctions) so I wonder why you feel differently about this.<p>That&#x27;s the thing. It forces a limitation on me that&#x27;s not designed for making code more legible. \nLook at this example from the curl project: <a href="https:&#x2F;&#x2F;imgur.com&#x2F;gallery&#x2F;yialLe7" rel="nofollow">https:&#x2F;&#x2F;imgur.com&#x2F;gallery&#x2F;yialLe7</a><p>Making the code legible has nothing to do with the number of chars. It&#x27;s about the effort. The 80 chars limit is not helping.<p>&gt; &gt;Marginally. Most code is pretty succinct anyway and you can easily compare it side to side. In real life, this is almost never a problem.<p>&gt; I don&#x27;t understand what you mean. Succinct how? If you have only ever encountered succinctly written code I envy you.<p>I do end up re-writing a lot of code =).\nBut I&#x27;m not shy about fixing it where I see it. Legibility and skimability are the two major driving forces.<p>But comparing once method to another in code and implementing algorithms is almost never a problem on a big screen. I find that it&#x27;s very seldom something interesting happens on the far end of 150 characters. That&#x27;s usually debug output or some line I&#x27;m not gonna be interested in any way. I&#x27;d much rather fit an entire class in one view than having 2&#x2F;3 of my screen empty as I scroll up and down.<p>Particularly with something like rust_fmt. <i>shivers</i><p>&gt;&gt;&gt; Enforced by a tool<p>&gt;&gt; The root of all evil. A tool for stripping away context and making hackily written code under pressue and time limitations and carefully planned out code look the same to the naked eye.<p>&gt; Now that I 100% disagree with. If your code is supposed to be a quick hack and a placeholder then add a comment saying that, relying on subtle formatting cues to judge the quality of some code seems very fragile.<p>See the image above and find me a formatter that will let me keep that thing legible.<p>I&#x27;m not against formatters or formatting. I&#x27;m against the rust_fmt way. You&#x27;re cover up the signal with a bunch of whitespace vertical noise.<p>Code comments are also an anti-pattern in my mind. If you need to put comments in your code, you aren&#x27;t done yet. Use a method and make it describe what it&#x27;s doing. Comments are an absolute last resort.<p>&gt; Tool-enforced coding style is good. It saves puppies. It makes waterfalls taller. It makes the air taste sweet. And more importantly it means no more bickering and bikeshedding about coding style.<p>Huh. I&#x27;ve been wondering what all these puppies were about.<p>&gt; Uniform code will always be more readable than a codebase where everyone has their own idiolect.<p>I find it wont. Not really. It&#x27;ll just disguise all code to look the same and force you to actually read code to figure out what&#x27;s going on rather than just skimming it.<p>Besides, healthy discussion within a team are a good thing. We might come around to each other opinion. Something extraordinary maybe makes sense for us. The conformist view of one size fits all is .. just wrong. imho.')