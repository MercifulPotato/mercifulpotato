Item(by='spaceribs', descendants=None, kids=None, score=None, time=1606397539, title=None, item_type='comment', url=None, parent=25216655, text='Nothing wrong with Async&#x2F;Await and zustand, the thing is that it doesn&#x27;t maintain complexity as more sources are added, let me try to give you an example of the problem that Async&#x2F;await solves versus what RxJS solves.<p>Say I&#x27;m installing a toilet, I need to go out and buy one from the hardware store, remove the old toilet, install the new one, and finally test that it works. It&#x27;s a linear process that could easily be constructed via a series of async&#x2F;awaits, and I wouldn&#x27;t use RxJS to model the behavior.<p>Now, say I&#x27;m building a bathroom. You have a shower head, a sink, a toilet, light fixtures, power outlets, tiling, a door, and a window. You have a bunch of contractors. Now you&#x27;re dealing with N number of sources, N number of tasks that can possibly done in parallel, and N number of possible things you could do in that bathroom depending on how much the bathroom is finished (for instance, if just the plumbing, floor and sink are complete, I can wash my hands)<p>This was always a hard problem, and not one that is especially appreciated, but I can tell you from experience that attempting to just use promises or async&#x2F;await is not a scalable pattern.')