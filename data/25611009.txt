Item(by='brundolf', descendants=None, kids=None, score=None, time=1609571392, title=None, item_type='comment', url=None, parent=25609316, text='I&#x27;ve come to the opinion that &quot;graphical&quot; vs &quot;non-graphical&quot; is a red herring. I don&#x27;t think it actually matters much when it comes to mainstream adoption. Is Excel graphical? I mean, partly, and partly not, but it&#x27;s the closest we&#x27;ve gotten to a &quot;programming language for the masses&quot;. Next up would probably be Visual Basic, which isn&#x27;t graphical at all. Bash is arguably in the vicinity too, and again, not graphical.<p>Here&#x27;s my theory (train of thought here); the key traits of a successful mainstream programming solution are:<p>1) A simple <i>conceptual model</i>. Syntax errors are a barrier but a small one, and one that fades with just a little bit of practice. You can also overlay a graphical environment on a text-based language fairly easily. The <i>real</i> barrier, IMO, is concepts. Even today&#x27;s &quot;more accessible&quot; languages require you to learn not only variables and statements and procedures, but functions with arguments and return values, call stacks, objects and classes and arrays (oh my!). And that&#x27;s just to get in the door. To be productive you then have to learn APIs, and tooling, and frameworks, and patterns, etc. Excel has variables and functions (sort of), but that&#x27;s all you really need to get going. Bash builds on the basic concepts of files, and text piping from one thing to another.<p>2) Ease of interfacing with <i>things people care about</i>: making GUIs, making HTTP requests, working with files, etc. Regular people&#x27;s programs aren&#x27;t about domain modeling or doing complex computations. They&#x27;re mostly about hooking up IO between different things, sending commands to a person&#x27;s digital life. Bash and Visual Basic were fantastic at this. It&#x27;s trickier today because most of what people care about exists in the form of services that have (or lack) web APIs, but it&#x27;s not insurmountable.<p>I think iOS Shortcuts is actually an extremely compelling low-key exploration of this space. They&#x27;re off to a slow start for a number of reasons, but I think they&#x27;re on exactly the right track.')