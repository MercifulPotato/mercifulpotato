Item(by='eternalban', descendants=None, kids=None, score=None, time=1609254107, title=None, item_type='comment', url=None, parent=25569148, text='&gt; <i>In this example, let&#x27;s say that we somehow had enough storage to keep the data we want to query in 1986. The next part would be to marshall on the order of 1 CPU-year worth of resources and have the query complete in minutes. As with &gt; </i> the storage problem, this would have also been absurd in [1986], so we&#x27;ve run into a second piece of non-essential complexity so large that it would stop a person from 1986 from thinking of this problem at all.*<p>If you are given a bucket to drain a lake, the enormity of task at hand is not &quot;accidental complexity&quot;.<p>OP is asserting that doing x one time or a billion times is still x, with an inherent complexity of using a bucket to (dip, draw, transfer, drain). This is true -<i>only</i>- if we willfully insist on ignoring that our &#x27;conceptual model&#x27; (a reservoire, a bucket, and a worker) is intimately bound with available technology and is a leaky abstraction. The actual conceptual [model] (move liquid from one reservoire to another) says very little about &quot;inherent complexity&quot;. (Can you point it out?)<p>It seems it is more accurate to note that <i>the complexity of materializing abstractions tends to increase with scale of operations</i>.<p>Our goal then, as a discipline, should be to insure this relationship approaches linear [or better] to the extent possible. Continuing the example, the actual task (drain a lake) could materialize as an army of workers, each with a bucket, all converging on a sink to drain their bucket. Is managing the workers really an &quot;accidental&quot; complexity?<p>What above then implies is that <i>the notion of &quot;essential complexity&quot; is a faulty paradigm if considered to be a static measure indepdendent of du jour technology</i>. The essential complexity of a task is held to be inherently related to the <i>magnitude</i> of task, and thus inherently addressable by, and related to, advancements in technology.<p>And finally, since nearly <i>all</i> of the modern software systems are merely a scaled up (&quot;web scale&quot;) version of earlier, &quot;less complex&quot;, systems, it seems reasonable to question the industry&#x27;s singular obsession with <i>languages</i> as the remedy to what is inherently a problem of scaling well understood tasks.')