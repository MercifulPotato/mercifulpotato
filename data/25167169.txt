Item(by='acemarke', descendants=None, kids=[25170321], score=None, time=1605922434, title=None, item_type='comment', url=None, parent=25161544, text='Wow. I&#x27;m sorry, but you&#x27;ve completely misinterpreted both what I was trying to say, and what those Redux-related APIs do.<p>A lot of people seem to assume that &quot;using TS&quot; means &quot;must use the `class` keyword and deep inheritance chains&quot;, ala Java and C#.  Redux, on the other hand, is FP-inspired.  Nothing about the Redux core involves classes in any way - everything is just functions, including the middleware API, with an emphasis on immutability.<p>You brought up Redux&#x27;s use of immutable state updates, but then said &quot;that doesn&#x27;t translate well to TS&quot;.  I was attempting to show that it _does_ translate just fine to TS, because TS lets you write functions and make immutable updates.  `return {...state, field: value}` works as fine in TS as it does in JS.  I wasn&#x27;t trying to touch anything about &quot;what a message is&quot;.<p>Having said that, the rest of your observations about the Redux core and React-Redux APIs in this comment show a general misunderstanding of what Redux is and how it gets used.  After all, Dan and Andrew came up with the actual React-Redux API, the concept of `mapDispatch` for passing action creators as props to React components, and the thunk middleware.  The Redux Toolkit `builder.addMatcher` API is a recent addition, but all it is is syntax sugar for &quot;if the dispatched action is any one of these types, we want to update to it&quot;, same as if I wrote a multi-condition `if` statement by hand.<p>None those have anything to do with TS, and they did not become more complex because we&#x27;re now using TypeScript.  In fact, it&#x27;s the other way around - the complexity of the dynamic JavaScript behavior actually requires us to write much more complex TS types to capture how the code actually works.  (There&#x27;s a good reason why the React-Redux TS types are insanely complex, and I&#x27;m so glad they&#x27;re maintained in DefinitelyTyped instead of by us!  `connect` has so many overloads and different options that affect downstream props values, it&#x27;s almost impossible to capture that with static types.)')