Item(by='kdkeyser', descendants=None, kids=None, score=None, time=1605299173, title=None, item_type='comment', url=None, parent=25083870, text='In your example, there is no relation between anything in Module1Interface and Module2Interface.<p>Probably closer would be (not sure if this is possible in Typescript):<p><pre><code>    class CustomModule&lt;S, T1 extends Module1Interface&lt;S&gt;, T2 extends Module2Interface&lt;S&gt; &gt; {\n      constructor(t1: T1, t2: T2) { ... }\n    }\n</code></pre>\nMeaning that, for example, within Module1Inteface, there is some function f1 that returns an S, and within Module2Interface, there is some function f2 that takes an S as argument.<p>This does become a bit tedious notation-wise, if possible at all. In Ocaml, this would look like:<p><pre><code>  module CustomModule(M1: Module1)(M2: Module2 with type s = M1.s)</code></pre>')