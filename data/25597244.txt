Item(by='danShumway', descendants=None, kids=[25600345], score=None, time=1609449488, title=None, item_type='comment', url=None, parent=25596677, text='&gt; I literally add it as a line-item to the bill and let customers take it off if they want to save cost, and when it&#x27;s for professional work the only industry that has actual regulation around it is education&#x2F;government.<p>Take note, the takeaway from this comment is that if you&#x27;re building a platform for applications and you want to make it accessible, it has to be required. You can&#x27;t give engineers the choice or they won&#x27;t do it. They will not prioritize equal access unless either the law or the technology literally forces them to. This kind of stuff is how you get regulated.<p>This is also why I don&#x27;t have a ton of sympathy for the people who want to get rid of HTML and use exclusively lower level APIs. They&#x27;ll tell you they can replicate accessibility features, but they&#x27;re not going to. They&#x27;re going to open up the floodgate for interfaces that can&#x27;t be used with a keyboard. Like, I&#x27;m not <i>seriously</i> suggesting this, but maybe divs in HTML shouldn&#x27;t be clickable at all. Maybe you should be forced to use a button. Maybe the escape hatches that allow people to ignore semantic markup should go away.<p>I want to live in a world where I can trust developers when they say that the web is for everyone and that equal access is important, and I want to trust them to make educated decisions about what is and isn&#x27;t possible to make accessible for each project. But if we can&#x27;t even get people to use buttons instead of divs, if even that turns into some kind of controversy... I don&#x27;t know, maybe developers shouldn&#x27;t get to make that choice, maybe the web should force you to use buttons.<p>The whole point of the web is that it&#x27;s a universal platform, as much as possible we should be striving to make it universally accessible.<p>&gt; The other problem is I do accessibility right<p>We&#x27;re not talking about something like adding professional captions to every single video you produce or making sure that there are shortcuts to quick-navigate through menus, we&#x27;re talking about building buttons using the element named &quot;button&quot;.<p>Accessibility isn&#x27;t binary, we don&#x27;t have to decide to either do professional testing or to render everything to canvas. It really doesn&#x27;t take firing up a screenreader to know that a clickable div with no aria roles is not accessible, you don&#x27;t have to do advanced testing for that.<p>I&#x27;m not going to jump on the shame train for the original author, not everyone knows this stuff and I don&#x27;t blame the author for making a mistake. I don&#x27;t expect every web developer to know everything, and shaming people over accidentally breaking accessibility isn&#x27;t helpful for the cause. Instead we should focus on education and positive reinforcement. We don&#x27;t want new developers to be scared of accessibility, we want them to feel like we&#x27;re here to help.<p>But outside of the original developer, I am absolutely going to jump on the shame train for everyone who&#x27;s talking about very basic web accessibility features like they&#x27;re some kind of complicated tradeoff. They&#x27;re not. Using a button <i>is not hard</i>.')