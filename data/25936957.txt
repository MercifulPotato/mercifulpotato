Item(by='fookyong', descendants=None, kids=None, score=None, time=1611797707, title=None, item_type='comment', url=None, parent=25930126, text='Founder here - thanks for giving that a try!<p>It&#x27;s a good question.<p>There&#x27;s still a lot to be optimized on the video side of things. But the reason it took 2 minutes is because of things like:<p>- Checking the video length before rendering\n- Converting to a standardized format so that the renderer doesn&#x27;t trip up\n- Handing off to AWS Lambda, which involves some network I&#x2F;O\n- Handing back to my Rails app<p>So there&#x27;s a lot of back-and-forth right now that could be optimized.<p>It will scale nicely under high workloads because my main Rails app isn&#x27;t really doing much except handing off to AWS Lambda, but this means there is a speed hit both in terms of the I&#x2F;O and also the Lambda being underpowered.<p>You can actually see the two main processes happening if you watch the progress bar on the video demo.<p>You&#x27;ll notice that the first 50% is a bit slow - that&#x27;s my Rails app doing some validations, conversions, and packaging things up nicely for the Lambda.<p>The last 50% seems to move faster - that&#x27;s the Lambda rendering the final video and then passing it back to Rails.<p>There&#x27;s definitely a lot of scope for speeding things up in the first 50%.<p>As for disrupting long-running processes, I can safely deploy my Rails app any time as it&#x27;s not performing any of the rendering jobs (on images or video) it&#x27;s just acting as the job expeditor and receiver of webhooks.')