Item(by='badsectoracula', descendants=None, kids=None, score=None, time=1610798331, title=None, item_type='comment', url=None, parent=25800241, text='Code quality is highly subjective though and often what some might consider as &quot;high quality&quot; also comes with a cost to performance.<p>Fortunately the linked book provides a simple way to decide when something needs to be optimized under &quot;Understanding High Performance&quot; [0]<p>--<p>Before we can create high-performance code, we must understand what high performance is. The objective (not always attained) in creating high-performance software is to make the software able to carry out its appointed tasks so rapidly that it responds instantaneously, as far as the user is concerned. In other words, high-performance code should ideally run so fast that any further improvement in the code would be pointless.<p><i>Notice that the above definition most emphatically does not say anything about making the software as fast as possible.</i> It also does not say anything about using assembly language, or an optimizing compiler, or, for that matter, a compiler at all. It also doesn’t say anything about how the code was designed and written. What it does say is that <i>high-performance code shouldn’t get in the user’s way—and that’s all</i>.<p>--<p>(emphasis mine)<p>[0] <a href="https:&#x2F;&#x2F;www.jagregory.com&#x2F;abrash-black-book&#x2F;#understanding-high-performance" rel="nofollow">https:&#x2F;&#x2F;www.jagregory.com&#x2F;abrash-black-book&#x2F;#understanding-h...</a>')