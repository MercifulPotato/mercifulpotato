Item(by='cxr', descendants=None, kids=[25459711, 25458855, 25459247, 25459350, 25458804, 25459536], score=None, time=1608227514, title=None, item_type='comment', url=None, parent=25456002, text='Even GNU&#x27;s philosophy has a few puzzle pieces missing from the box.<p>- JordiGH&#x27;s &quot;Exercising software freedom on Firefox&quot; &lt;<a href="http:&#x2F;&#x2F;jordi.inversethought.com&#x2F;blog&#x2F;exercising-software-freedom-on-firefox&#x2F;" rel="nofollow">http:&#x2F;&#x2F;jordi.inversethought.com&#x2F;blog&#x2F;exercising-software-fre...</a>&gt;.  Jordi spends a lot of time dealing with the infuriating reality of what it takes to build Firefox.  The punchline (not stated in the post) is that Firefox uses an Emacs-like architecture, so basically none of these frustrations or the time wasted on them were actually necessary; the code Jordi wanted to twiddle require no&#x2F;little actual building.  The Firefox team (particularily given how well-funded they are) could enable a contribution path where making an improvement to Firefox is about as easy as opening up an elisp file and making the requisite tweaks, but they don&#x27;t.  Related, and I&#x27;ve mentioned this before—the Zotero app is built on XULRunner&#x2F;Gecko, but XULRunner was killed by the big brained folks who had the power to do so in an attempt to free up resources for their totally successful designs for the future.  Rather than throwing Zotero contributors under the bus and into a potential quagmire of dealing with C++ and Rust compiler output that they don&#x27;t care about on failed builds, and costing them hours for successful builds (if a successful build is even possible for that contributor&#x27;s hardware), the Zotero build scripts instead download Firefox and then repack it, <i>et voilà</i>—when you open it you&#x27;re running Zotero.  (Side note: former Mozillian here, and there&#x27;s no real excuse for why the Firefox contribution process itself hasn&#x27;t worked like this for the last 10 years except for Mozilla&#x27;s infamously poor competence at almost all things re project management.)<p>- In &quot;Open Source is not enough&quot; &lt;<a href="http:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20150828195814&#x2F;http:&#x2F;&#x2F;adamspitz.com&#x2F;avocado&#x2F;2011&#x2F;05&#x2F;05&#x2F;open-source-is-not-enough&#x2F;" rel="nofollow">http:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20150828195814&#x2F;http:&#x2F;&#x2F;adamspitz.c...</a>&gt;, Spitz succinctly lays out the problem.  Open source may remove legal barriers and some of the practical ones, but not enough of the practical ones to actually enable the sort of mastery and control that is often talked about when people describe FOSS.  (Spitz uses the term &quot;open source&quot; throughout, which is unfortunate, because Spitz&#x27;s overall motivation has a lot in common with the GNU philosophy and serves as an incidental critique of the GNU project&#x27;s actions which perpetuate a world with less of the &quot;software freedom&quot; that it advocates.  A casual reader might mike the mistake of thinking that Spitz&#x27;s essay either treads the same ground as Stallman&#x27;s <i>Why &quot;Open Source&quot; misses the point of Free Software</i>, or that it is endemic of the problem that Stallman&#x27;s essay exhorts people to acknowledge [and where the prescription is prioritizing GNU-style &quot;software freedom&quot; over &quot;open source&quot; ideals], although it&#x27;s neither.)<p>- The ind.ie folks (now the Small Technology Foundation) attempted(?) to build some mindshare around their Ethical Design Manifesto &lt;<a href="https:&#x2F;&#x2F;2017.ind.ie&#x2F;ethical-design&#x2F;" rel="nofollow">https:&#x2F;&#x2F;2017.ind.ie&#x2F;ethical-design&#x2F;</a>&gt;.  I think this, too, makes an unfortunate choice of words, but despite the name, I see it as aligned with what Spitz and others are trying to shed light on.  Funnily enough, I recently contacted one of the Small Tech folks about a simple error on one of their pages, where the fix for it was straightforward—fixing a typo, or fixing a broken link or removing it or something like that.  The response was essentially an acknowledgement of the problem and an admission that it wouldn&#x27;t be fixed immediately, as a nod to how mildly cumbersome it would be go in and make the change.  Deep lessons about malleability and habitability (see below) lie here, waiting to be absorbed.<p>- In &quot;Free software is not enough&quot; &lt;<a href="https:&#x2F;&#x2F;jfred.dreamwidth.org&#x2F;479.html" rel="nofollow">https:&#x2F;&#x2F;jfred.dreamwidth.org&#x2F;479.html</a>&gt;, jfred relies unknowingly on an eerily similar hook as the one from Spitz&#x27;s take.  The problem described is the same, but jfred goes on in more detail, with references to Smalltalk and OLPC, and to its further benefit does so by referring throughout to &quot;free software&quot;, thus avoiding the pitfall in Spitz&#x27;s piece.  jfred also introduces something that will probably prove useful in the long run if we are to actually address this problem: the notion of what he calls <i>practical user freedom</i>, nudging us to discuss it in the same terms.  (I know at least one other person, Mike Gerwitz, who&#x27;s claimed to at least have used or thought about using the same term privately.)  Also of interest is that jfred uses modifying one&#x27;s web browser as an example as well.<p>- Independently, on the mailing lists for IceCat—the official project to maintain a FSF-approved fork of Firefox—there are occasional mentions of folks&#x27; inability to get the thing to build.  I suspect there are many more private failures than public mentions, maybe even 10 to 1.  In fact, in the past, I&#x27;ve explicitly referenced the problem here on HN and elsewhere of what is probably tens of thousands of potential contributors who quietly drop out after a private bout of trying to do basic things that any given project&#x27;s own maintainers and existing contributors take for granted, like just achieving a successful build from source.  I&#x27;m fond of referencing Soledad Penadés&#x27;s post &quot;How to keep contributors when they are not even contributors yet&quot; &lt;<a href="https:&#x2F;&#x2F;soledadpenades.com&#x2F;posts&#x2F;2015&#x2F;how-to-keep-contributors-when-they-are-not-even-contributors-yet&#x2F;" rel="nofollow">https:&#x2F;&#x2F;soledadpenades.com&#x2F;posts&#x2F;2015&#x2F;how-to-keep-contributo...</a>&gt;, although granted I do so much for the title than the content, really.  In that vein, more recently I&#x27;ve taken to pointing people towards Maxime Chevalier-Boisvert&#x27;s &quot;They Might Never Tell You It&#x27;s Broken&quot; &lt;<a href="https:&#x2F;&#x2F;pointersgonewild.com&#x2F;2019&#x2F;11&#x2F;02&#x2F;they-might-never-tell-you-its-broken&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pointersgonewild.com&#x2F;2019&#x2F;11&#x2F;02&#x2F;they-might-never-tel...</a>&gt;.  Considering GNU&#x27;s advocacy and messaging about what the IceCat project means for software freedom, in contrast to the reality of the situation, this is a problem.  When I take this in at the same time as contemplating what has to be mountains of unactualized talent and aborted attempts to expand software freedom in light of so many people quietly scuttling their work after a failure reach the most basic milestone of being able to reproduce the conditions for a successful build and then to achieve one, I can&#x27;t help but think about Feynman&#x27;s comments wrt the oil drop experiment and his exhortations about what not to &quot;fool ourselves&quot; about.  It doesn&#x27;t <i>quite</i> fit, but the connection is there in my mind.<p>- More recently, I&#x27;ve re-visited Kartik Agaram&#x27;s essay on &quot;habitability&quot; &lt;<a href="http:&#x2F;&#x2F;akkartik.name&#x2F;post&#x2F;habitability" rel="nofollow">http:&#x2F;&#x2F;akkartik.name&#x2F;post&#x2F;habitability</a>&gt;.  Most people have failed to achieve systems that exhibit habitability.  Not just ordinary non-programmers of the sort that would first come to mind when you read an essay like &quot;An app can be a home-cooked meal&quot; &lt;<a href="https:&#x2F;&#x2F;www.robinsloan.com&#x2F;notes&#x2F;home-cooked-app&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.robinsloan.com&#x2F;notes&#x2F;home-cooked-app&#x2F;</a>&gt;, but as shown in the Small Tech and IceCat examples, the principled FOSS types fail to achieve it for themselves, too.  So how can they hope to achieve it in systems that other computer operators are supposed to be able to inhabit?<p>- The Malleable Systems Collective &lt;<a href="https:&#x2F;&#x2F;malleable.systems&#x2F;" rel="nofollow">https:&#x2F;&#x2F;malleable.systems&#x2F;</a>&gt; was introduced this past spring, but seems to have fizzled since then, possibly due to COVID-related dampening effects.  I think the term is a useful one, although I&#x27;m still seeking something that fits in between &quot;habitability&quot; and &quot;malleable&quot; but manages to be something like 5–10x more useful because of its &quot;obvious&quot; meaning.  I suspect that in the meantime I will get a lot of mileage by relying for now on terms like &quot;practical software freedom&quot; and others&#x27; being adequately initiated to be able to understand what that means.<p>- Stanislav at Loper OS lays lays down his Seven Laws of Sane Personal Computing &lt;<a href="http:&#x2F;&#x2F;www.loper-os.org&#x2F;?p=284" rel="nofollow">http:&#x2F;&#x2F;www.loper-os.org&#x2F;?p=284</a>&gt;.  Each one is interesting and worthy of consideration, but what I see as the most pressing matter is <i>Law IV - Preserves meaning</i>.  What I see as a major problem is the continued use of 1980s-era infrastructure and practices.  Compilers conceived originally as a tool to enable &quot;autocoding&quot; to a given machine&#x27;s instruction set gave way to the now-familiar division between source code and the &quot;binary&quot; executables that are produced by mangling the source code.  By now, doing away with traditional compilation entirely should be feasible by JITting everything—or caching the products but in such a way that the average programmer cares about them and <i>deals</i> with them no more than the typical programmer cares about and deals with the actual machine instructions that the compiler&#x27;s code generator stuffs into the binary.  That&#x27;s one way to go, and probably what we <i>should</i> ultimately aim for.  Another way to would be to adopt &quot;non-destructive compilation&quot; techniques to bring about a world where &quot;package distribution is source distribution&quot; at least in the interim &lt;<a href="https:&#x2F;&#x2F;wiki.triplescripts.org&#x2F;wiki&#x2F;SDIPD" rel="nofollow">https:&#x2F;&#x2F;wiki.triplescripts.org&#x2F;wiki&#x2F;SDIPD</a>&gt;.<p>To summarize, part of a reason why the enemy that GNU seeks to take down manages to persist is due to a failure to acknowledge the circumstances that allow it to, and a failure to look back, see where and how the current strategy has failed, is continuing to fail, and indeed sometimes exacerbates the problem, and adjust accordingly.<p>I think it should be clear by this point, but none of the above is meant to say anything like, &quot;The GNU philosophy is bad; choose BSD&#x2F;MIT&#x2F;ISC instead&quot;, a conflict which the GNU Project unfortunately directs too much attention to.  You can just look at history and even the comments on this post to get a feel for how much human attention and energy has been wasted in that vein.  So I add this only as a pre-emptive attempt to ward off low-effort and ill-considered potshots, because what I&#x27;m saying is very much the opposite—GNU doesn&#x27;t go far enough.')