Item(by='brudgers', descendants=None, kids=None, score=None, time=1604348560, title=None, item_type='comment', url=None, parent=24955976, text='What are you going to be reading alongside it?<p>Common Lisp goes well with Peter Norvig&#x27;s <i>Paradigms of Artificial Intelligence: case studies in Common Lisp</i>. And Norvig&#x27;s book is a good way to learn what makes Common Lisp a big deal from an engineering perspective while still being entirely accessible to a below average programmer with some experience (at least that&#x27;s my experience).<p>Racket goes well with the many Racket tutorials online and Felleisen&#x27;s <i>How to Design Programs</i>. <i>HtDP</i> is a good beginner resource for software engineering and the many online Racket tutorials are suitable for many other levels of experience.<p>Racket will work with <i>Structure and Interpretation of Computer Programs</i> with a bit of configuration. But MIT Scheme is simpler to use with <i>SICP</i> right out of the box.<p>There are reasons Clojure is popular and I think it&#x27;s a great language, but learning Clojure is more about learning Clojure than about learning what people usually mean by &quot;Lisp.&quot;<p>Emacs Lisp (elisp) is great if what you are going to be reading is it&#x27;s documentation and it maps up reasonably well with a lot of Common Lisp. It&#x27;s a very good language that becomes a great language if you like Lisp and EMACS because it hooks into &quot;Emacs as an operating system&quot; natively. It&#x27;s a practical approximation of the mythical LispMachines at your finger tips.')