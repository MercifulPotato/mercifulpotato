Item(by='staticassertion', descendants=None, kids=None, score=None, time=1607706936, title=None, item_type='comment', url=None, parent=25383829, text='As someone who uses Rust, &quot;more features&quot; is not a win. Most of the time it rarely impacts me - especially in Rust it seems that a &quot;Box&quot; here or there can fix code at the potential cost of performance.<p>But there are cases, often for libraries, where features can be quite helpful and make me faster. If a feature is basically &quot;make code that should have already worked actually work&quot;, that&#x27;s a huge win.<p>A lot of Rust features tend to be that. It&#x27;s like &quot;OK, we have &#x27;impl trait&#x27;, but it only works in some places. Let&#x27;s let it work in more places.&quot; So,yeah, sure, that&#x27;s a new feature - impl trait in new positions - but it&#x27;s really just supporting code that many people would have expected to work.<p>I see this GAT feature similarly. It wouldn&#x27;t be hard to &quot;accidentally&quot; try to have a generic associated type - in fact, I have probably run into this myself. And so GAT isn&#x27;t really adding more complexity to me, it&#x27;s just unlocking code that I would have already written.<p>Similarly, with GAT, we can unlock &#x27;async&#x27; in traits. I already know &#x27;async&#x27;, I know it on functions and methods. So this is, again, just making an existing feature more consistent.')