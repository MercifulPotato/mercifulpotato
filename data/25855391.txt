Item(by='KMag', descendants=None, kids=None, score=None, time=1611203276, title=None, item_type='comment', url=None, parent=25854386, text='I haven&#x27;t read the code, and have only read a few-sentence description of embedded indexing.  Presuming the writer knows about B-trees and B+trees and isn&#x27;t just clarifying that they&#x27;re not using B+trees, embedded indexing sounds similar to Fractal Tree Indexes[0].<p>For a tree built on an immutable log, it makes sense to basically cache some writes at each level of the tree.  When you write a new record, you make a copy of the root node with your data appended to the cache.  If this fills up the cache space in the root node, then you flush half of the cached records down one level in the tree, recursively until none of the &quot;cached&quot; values are over-full.  This means that repeated writes of the same values result in a small number of nodes being written, instead of having to write lots of updated intermediate nodes, like you&#x27;d need with a normal B-tree.  Also, frequently written keys remain near the root, so if your read pattern resembles your write pattern, frequently read keys will remain near the root node.  I say &quot;cached&quot;, but these cache slots are the only places data is stored in trees.  For TokuDB, my understanding is that these records can also represent schema changes, so that schema changes can be incrementally and lazily applied.<p>Of course, if one cached write being flushed down the tree catches up to an older cached write for the same key, the older value is just discarded.  Presumably, there&#x27;s also a periodic incremental operation to save space by removing older cached values.  Even for something like a blockchain where you want to keep infinite history, you&#x27;d probably still want incremental compaction so that clients wanting to download the entire current state don&#x27;t need to download the entire history.<p>[0] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fractal_tree_index" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fractal_tree_index</a>')