Item(by='stormbrew', descendants=None, kids=None, score=None, time=1607362503, title=None, item_type='comment', url=None, parent=25329513, text='&quot;Please don&#x27;t keep using RTMP.&quot;<p>So, this has been talked about a bunch already, but I&#x27;m involved in a small streaming group that occasionally puts on (online, not in person) marathons and we&#x27;ve been looking for something to use that&#x27;s better than rtmp for a while for ingest from participants and we really haven&#x27;t found anything good. At least nothing that&#x27;s viable to set up with open source software of your own.<p>We just piloted SRT (having about 35 different streamers stream to us with it from OBS into srt-live-server, then into OBS with a media source), which has been mentioned a bunch here, and it&#x27;s been a mixed bag and I don&#x27;t know if we&#x27;ll stick with it.<p>The big pro is that it doesn&#x27;t fall behind like the usual RTMP chain (OBS-&gt;nginx-rtmp-flv-&gt;OBS media source or web source with flvjs) tends to when connection quality degrades.<p>I don&#x27;t think this is necessarily an inherent characteristic of rtmp really, but the open software in this chain tends to just grow bigger and bigger buffers when the connection hitches, leading to progressively worse latency you have to &#x27;fix&#x27; by resetting the stream. Twitch and other big ingesters seem to avoid this somehow, and I suspect ingesting directly into HLS or similar avoids it, but low latency HLS is still essentially unavailable in open source packaging so is not viable for our use.<p>On the downside, though, SRT requires somewhat manual tweaking of latency and buffering parameters to work properly and our experience has been that, while the stream never falls behind, hitches outside the configured parameters produce a particularly ghastly kind of artifacting we&#x27;ve called &quot;streakies&quot; where entire segments of the feed will just turn weird bands of colours. It&#x27;s possible this is actually a problem in the software, as the bits needed to put this together (particular srt-live-server) seem pretty immature yet.<p>It seems like the future for this kind of use case is likely to wind up being webrtc, but as of now getting webrtc to play nice with OBS is kind of painful, usually just involving using external software that captures a popped out preview display from OBS. It&#x27;s a little less than ideal. I think it&#x27;ll be our next thing to try though, and obs.ninja looks kind of promising as a platform to help with doing it.')