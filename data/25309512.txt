Item(by='brundolf', descendants=None, kids=[25309604, 25310572], score=None, time=1607123091, title=None, item_type='comment', url=None, parent=25309144, text='I use JS every day; I would say I like it. I would even say that in 2020, if you know what you&#x27;re doing, it&#x27;s a pretty good language on the whole.<p>But I don&#x27;t think it&#x27;s controversial to say that the following were objectively bad decisions (in hindsight, of course, but still):<p>- Automatic casting behavior between the core types (you&#x27;re the only person I&#x27;ve ever heard suggest that this might be a good thing)<p>- Automatic semicolon insertion<p>- A core Date object that lacks basic control over time-zones and reasoning about time-zones<p>- Assigning to an undeclared variable silently creates a global<p>- Allowing duplicate function parameter names where later ones just hide the earlier ones<p>- Distinction between undefined and null (this one might have a few defenders)<p>Some of these are now prevented by &quot;strict mode&quot;. Others have been patched-over, for example by the addition of === which prevents casting behavior for comparisons at least. Others can be bridged by libraries (Moment.js) or by best-practices (use foo == null to smooth over the null&#x2F;undefined distinction, never use a value&#x27;s implicit falsiness in a conditional, etc).<p>But the point is that JavaScript has this giant asterisk that will never go away, of things you need to do&#x2F;avoid&#x2F;utilize in order to get the most basic behaviors right.')