Item(by='mpweiher', descendants=None, kids=[25218897], score=None, time=1606302516, title=None, item_type='comment', url=None, parent=25203924, text='&gt; &quot;M1 and memory efficiency&quot;<p>Hi folks!<p>It looks like my blog post[1] was the primary source for this (it&#x27;s referenced both by this post and by the Gruber post), and to be clear, I did <i>not</i> claim that this helps ARM Macs use less RAM than Intel Macs.  I think John misunderstood that part and now it has blown up a bit...<p>I <i>did</i> claim that this <i>helps</i> Macs and iPhones use less RAM than most non-Apple systems, as <i>part</i> of Apple&#x27;s general obsessiveness about memory consumption (really, really obsessive!).  This part of the puzzle is how to get greater convenience for heap allocation.<p>Most of the industry has settled on tracing GCs, and they do really well in microbenchmarks.  However, they need a lot of extra RAM to be competitive on a system level (see references in the blog post).  OTOH, RC trends to be more frugal and predictable, but its Achilles heel, in addition to cyclic references, has always been the high cost of, well, managing all those counts all the time, particularly in a multithreaded environment where you have to do this atomically.  Turns out, Apple has made uncontented atomic access about as fast as a non-atomic memory access on M1.<p>This doesn&#x27;t use less RAM, it decreases the performance cost of using the more frugal RC.  As far as I can tell, the &quot;magic&quot; of the whole package comes down to a lot of these little interconnecting pieces, your classic engineering tradeoffs, which have non-obvious consequences over there and then let you do this other thing over here, that compensates for the problem you caused in this other place, but got a lot out etc.  Overall, I&#x27;d say a focus on memory and power.<p>So they didn&#x27;t add special hardware for NSObject, but they did add special hardware that also tremendously helps NSObjet reference counting.  And apparently they also added a special branch predictor for objc_msgSend().  8-).   Hey, 16 <i>billion</i> transistors, what&#x27;s a branch predictor or two among friends.. ¯\\_(ツ)_&#x2F;¯<p>[1] <a href="https:&#x2F;&#x2F;blog.metaobject.com&#x2F;2020&#x2F;11&#x2F;m1-memory-and-performance.html" rel="nofollow">https:&#x2F;&#x2F;blog.metaobject.com&#x2F;2020&#x2F;11&#x2F;m1-memory-and-performanc...</a>')