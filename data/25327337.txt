Item(by='btilly', descendants=None, kids=[25327636], score=None, time=1607294392, title=None, item_type='comment', url=None, parent=25326552, text='Most people prefer the first over the second.  But I think that Linus really should prefer the second over the first.  Let me try to explain why.<p>There is a well-known saying attributed to David Wheeler, &quot;All problems in computer science can be solved by another level of indirection.&quot;  Except the problem of having too many layers of indirection.  Also both quotes are often seeing with &quot;abstraction&quot; instead of &quot;indirection&quot;.<p>There is a not well-known saying that you can attribute to me, &quot;Any method of abstraction that you have internalized becomes conceptually free to you.&quot;  (So for the sake of others, choose wisely which you will expect maintenance programmers to have internalized!)<p>The key to the elegant solution is understanding how to manipulate data through pointers.<p>That makes the elegant solution inappropriate to use in CS 101.  It involves a method of indirection&#x2F;abstraction that is emphatically NOT free to beginning programmers.<p>It also makes the elegant solution inappropriate for most people on HN.  We do not directly deal with manipulating things through pointers very much.  Therefore most of us have not internalized how to do that, and the technique is very much not free to us.<p>However Linus is a kernel developer.  Anyone maintaining his code will also be a kernel developer.  Kernel developers have to internalize how to handle manipulating data through pointers because their APIs require it.  For example look at <a href="https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;v4.14&#x2F;filesystems&#x2F;index.html" rel="nofollow">https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;v4.14&#x2F;filesystems&#x2F;index.html</a> and see that pretty much every function gets a pointer to a data structure, and then manipulates that data structure through the pointer.<p>Therefore every kernel developer should internalize how to manipulate data through pointers.  And the elegant solution therefore becomes not just less code, it <i>becomes conceptually simpler!</i> And yes, any time you can replace a block of code with less code that is conceptually simpler, this shows good taste.<p>BUT, and this is very important, it is only conceptually simpler if you&#x27;ve already internalized concepts around manipulating data through the indirection of a pointer.  Which makes it conceptually simpler for kernel developers like Linus, but not for most programmers in other languages.')