Item(by='lokedhs', descendants=None, kids=[24802902], score=None, time=1602824978, title=None, item_type='comment', url=None, parent=24792181, text='Kotlin made this explicit by calling the void type Unit, where it is a class that has a single instance with the same name.<p>So when you define a function:<p><pre><code>    fun foo(a: Int): Unit {\n        ...\n    }\n</code></pre>\nYou can actually assign a value to the result:<p><pre><code>    val x = foo()  &#x2F;&#x2F; x now contains the value Unit\n</code></pre>\nThere is another type which does not have any instances, called Nothing. Declaring a function to return Nothing indicates that the function will never return. Other than that, Nothing is a regular type, but code that uses it will be unreachable (and flagged as such by the IDE) because you can never create an instance of it.<p><pre><code>    fun foo(): Nothing {\n        throw SomeException()\n    }\n</code></pre>\nThis leads me to the question. Unit is obviously the mathematical Unit type, but is there a way to model the Nothing type in mathematically?')