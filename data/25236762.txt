Item(by='gradschool', descendants=None, kids=None, score=None, time=1606559262, title=None, item_type='comment', url=None, parent=25231718, text='&gt; How do you work with this?<p>My setup depends only on crappy home made bash scripts and standard\nutilities, and never leaks encryption keys or filesystem metadata off\nthe local machine. I rsync my home directory with a luks encrypted\nfilesystem image, split the image file into fixed sized chunks using\nthe standard GNU split utility, and then rsync the encrypted split up\nchunks with a directory on a remote server. The remote server\nperiodically syncs the encrypted image chunks with S3 using the usual\naws cli tools, and runs a script to &quot;cat&quot; the chunks back into a\nremote copy of the whole image and display the overall md5\nsum. Another machine off site keeps amazon honest by syncing the s3\nbucket with a local copy, reassembling the encrypted filesystem image,\nand computing the md5 sum. An extra benefit is that I can use the\nfilesystem image on the remote server over sshfs as the backing device\nfor a locally loopback mounted luks partition to access or modify\nindividual files without downloading the whole image or corrupting it,\nprovided no more than one session is open at a time. Back when I was\nmore paranoid, I used only a raw dmcrypt image rather than a luks\nencrypted image in this setup so that there would be no luks header to\ngive it away and I could plausibly claim that it was one-time-pad\nencrypted data, for which I could construct a key to yield any\nplaintext of my choice. (Yes, I know I won&#x27;t be such a smartass when\nit comes to a rubber hose attack.)')