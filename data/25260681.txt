Item(by='karatinversion', descendants=None, kids=None, score=None, time=1606781123, title=None, item_type='comment', url=None, parent=25254515, text='My hot take on this is that java checked exceptions are bad because their design predates java generics. Because of the lack of generics, authors of packages such as java.io had to create god-types of exceptions for their general interfaces to throw. A good example is<p><pre><code>  public int java.io.Reader.read() throws IOException\n</code></pre>\nAs I see it, the purpose of checked exceptions was to allow declaring expected failure modes in the function signature, so that the programmer (and the compiler!) could check against them - but when my StringReader declares itself capable of throwing an SSLException (subclass of IOException), this benefit is lost. Instead, I must rely on other sources to determine which errors may actually occur, and which I can&#x27;t do anything about - and the latter I must swallow or pollute all of my package&#x27;s function signatures with. If the Reader interface had instead been generic<p><pre><code>  java.io.Reader&lt;T extends Throwable&gt;\n</code></pre>\nread() could be declared as<p><pre><code>  public int read() throws T\n</code></pre>\nThis would rescue much, and is something that could be done in modern java; but by the time generics were introduced, all the core packages like java.io were written, and the patterns for how to deal with checked exceptions were set.')