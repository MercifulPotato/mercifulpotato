Item(by='aforwardslash', descendants=None, kids=None, score=None, time=1607024780, title=None, item_type='comment', url=None, parent=25290171, text='&gt; Does anyone have any quick checklist or metrics to make decisions like this?<p>I&#x27;m not a database expert in any way, but I&#x27;ve had to evaluate database options for both existing and new applications, and my &quot;methodology&quot; is as follows:<p>- Understand the workload<p>Is the database workload read-intensive, write-intensive, or both? Does the application require strong consistency? Does it require replication? What kind of replication? Can writes be batched, or are processed ad-hoc? What kind of read operations will you do, and what is the desired response times for those operations (ex. is 2s tolerable? 500ms? 20ms?)<p>- Scouting<p>Select a set of available options to benchmark using whatever criteria you may see fit, but following the previous step constraints.<p>- Benchmark<p>Create a somewhat simple model that fits your workload and models your real case, using the language you&#x27;ll be using to build your application; Create benchmark code for the most critical&#x2F;complex operations; Run it at least 5 times on similar hardware of what you expect production to be (this is important; eg. storage (both memory and disk) latency varies wildly between &quot;my laptop&quot; and a cloud provider) and record the results; Be sure to keep an eye on memory consumption, cpu and disk usage when running the benchmarks;<p>- Decide :)<p>Usual criteria:<p>* Price;<p>* Features (of course);<p>* Easiness of deploy or cloud provider availablity;<p>* Documentation quality;<p>* Driver quality for your application language (it may happen you already excluded a candidate on the previous step due to this);<p>* Query language familiarity;<p>* Performance;<p>* Adoption (translated to: can I expect a new developer to have the basic skills on this tech?);')