Item(by='rurban', descendants=None, kids=[24685878], score=None, time=1601874968, title=None, item_type='comment', url=None, parent=24676557, text='So the kernel replaced a bad RC scheme with a proper GC:<p>&gt; When a process requires a new page it simply takes a free one from the global page pool as soon as one is available. Pages are made available when processes terminate, but also by the intervention of a system process, the `pageout daemon&#x27;. There is a big array, the `core map&#x27;, with one entry for each usable page of memory. The pageout daemon cycles through the array at a rate determined by some scheduling parameters. Free pages are skipped. Any other page is examined to see if it can be discarded.<p>&gt; The daemon checks the page table entry for the page to see if the `page used&#x27; bit is set. If not, the page can be made available. If it has been modified, it must first be written out (asynchronously). If the page has been referenced, the daemon resets the `used&#x27; bit and proceeds to the next core map entry. If the page has not been touched the next time round, it will be freed. On systems with large memories, a complete cycle can take some time, and so recent versions have the daemon cycling two pointers through the map: one clears `used&#x27; bits; the other reclaims pages.<p>&gt; In principle, this is a simple and elegant technique. It has been applied quite effectively in a controlled environment in a new implementation of file cacheing in UNIX using virtual memory.<p>Wonder if then people also cried wolf or just silently accepted the better memory management system.')