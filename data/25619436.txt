Item(by='ianamartin', descendants=None, kids=None, score=None, time=1609648003, title=None, item_type='comment', url=None, parent=25619241, text='The time consuming aspects of new product dev are normally not around the time it takes to write the code. It&#x27;s translating product requirements into solvable problems, logic flows that solve those problems, bumping into unseen edge cases in the product concept, and coming to consensus about what compromises are acceptable in the prototype, bumping into sharp edges while you flesh solutions out because you didn&#x27;t anticipate a thing when you started your base design or didn&#x27;t understand the relationships between objects and functionality when you kicked the project off.<p>These problems that take the most time in any project are mostly human, conceptual, product, and communication problems. Not code problems.<p>Once you have sorted out all of these problems and solved them, a rewrite in a different language with a better design moves very quickly. You don&#x27;t have to double the runway or the time to MVP. Time estimations are always wrong anyway. But in my experience when I&#x27;ve gotten buy-in for this approach I would guess it adds 25-30% of actual time overhead to a roadmap. Prototypes always take longer than expected, and an immediate redesign&#x2F;rewrite takes less time than expected.<p>Selling this approach to leadership really boils down to clearly identifying the value of developer time. It&#x27;s not code; it&#x27;s solving business problems. Once those are conceptually identified and solved, the design and code tend to fall into place without a ton of trouble. The problem is that no one really knows what the business problems are until you try to solve them and really dig into the details.<p>Prototypes should be understood as the process of defining the problem space and uncovering all the hidden issues that people haven&#x27;t really thought through just yet. MVPs should be an actual product based on that exploration and problem definition and solving. What I&#x27;m suggesting here is really just a process boundary that reflects the difference between the two things.<p>&quot;Can runway handle that?&quot; is really a lot like asking if you can afford to build a product at all.')