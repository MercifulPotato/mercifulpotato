Item(by='MaxBarraclough', descendants=None, kids=[25684788], score=None, time=1610111746, title=None, item_type='comment', url=None, parent=25684090, text='The C++ standards documents are famously paywalled (and I have to admit to having never read them), but here are some summaries. [0][1][2] The kicker is that according to the spec, the compiler is permitted, but not obligated, to elide object-copy operations, even when doing so results in the elision of a call to a copy-constructor function with side-effects.<p>Of course, the optimizer is still constrained by the spec in the obvious ways: copy operations can only be elided when the compiler can show that they are redundant (in some precise sense that the spec presumably lays out).<p>It follows of course that this &#x27;optimisation&#x27; may impact observable behaviour. This makes some sense as C++ code shouldn&#x27;t be doing &#x27;real work&#x27; in copy-constructors, but it&#x27;s still a rather ugly concession to pragmatism. <i>edit</i> Which, come to think it, describes the whole C++ language ;-P<p>[0] <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;12953129&#x2F;" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;12953129&#x2F;</a><p>[1] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Copy_elision#Return_value_optimization" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Copy_elision#Return_value_opti...</a><p>[2] <a href="https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;language&#x2F;copy_elision" rel="nofollow">https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;language&#x2F;copy_elision</a>')