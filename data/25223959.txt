Item(by='mumblemumble', descendants=None, kids=None, score=None, time=1606429373, title=None, item_type='comment', url=None, parent=25221993, text='I don&#x27;t see this as challenging anything that the article is ultimately proposing. See, for example, the last paragraph:<p>&gt; <i>I thank the flying spaghetti monster almost every day for the type system in my day job (and that is only Javaâ€™s tepid concoction)...</i><p>Isn&#x27;t exactly a statement you&#x27;d expect to find in the concluding remarks an essay whose goal is to question the value of type systems or static types. \nIt&#x27;s presumably something more nuanced like that. Maybe something more like<p>&gt; <i>we are in danger of thinking that type systems are the only way of achieving correctness in software construction.</i><p>Which seems reasonable to me. Type systems are excellent for eliminating certain classes of errors. But we shouldn&#x27;t let them become a golden hammer. Even if they <i>can</i> be used to eliminate other classes of errors, that doesn&#x27;t necessarily mean they&#x27;re the best tool for the job. Lately, for example, I&#x27;ve been seeing some disillusionment with dependent typing, and people saying, in effect, &quot;Yeah, it&#x27;s a really impressive technique, but try to find a simpler solution first.&quot;<p>And some of those simpler solutions do come from the dynamic programming world. For example, &quot;You can then go further and remove the more primitive operations, only allowing access to the higher level abstractions,&quot; is another excellent way to make illegal states unrepresentable. And you don&#x27;t need shiny new programming languages or rocket powered type systems to do it. I was really rather disappointed that that section of the article gave a nod to Dijkstra, but completely failed to mention Alan Kay&#x27;s <i>The Early History of Smalltalk</i>, which was, to an approximation, several thousand words&#x27; worth of grinding away on that point.')