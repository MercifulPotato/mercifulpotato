Item(by='kilotaras', descendants=None, kids=None, score=None, time=1605083593, title=None, item_type='comment', url=None, parent=25053553, text='Articles SortedSet[0] is basically a pseudo-BTree with fixed depth = 2 and fixed max_size of leafs. This gives O(log n) search and O(sqrt n) inserts [1].<p>It would mean that insertion at beginning is worst case scenario (split + need to move all buckets), but timing of insert is actually dominated by adding size of the buckets to calculate final index.<p>Spending a little bit of time on research, finding <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Order_statistic_tree" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Order_statistic_tree</a> and just using G++ implementation would probably yield better result and less code to support.<p>G++ has __gnu_pbds which add O(log n) &quot;find_by_order&quot; and &quot;order_of_key&quot; to trees, e.g. [2].<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;discord&#x2F;sorted_set_nif&#x2F;blob&#x2F;master&#x2F;native&#x2F;sorted_set_nif" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;discord&#x2F;sorted_set_nif&#x2F;blob&#x2F;master&#x2F;native...</a><p>[1] Technically O(n&#x2F;max_size + max_size) but we can assume that max_size is selected to be ~sqrt n<p>[2] <a href="https:&#x2F;&#x2F;www.ideone.com&#x2F;8mzxGR" rel="nofollow">https:&#x2F;&#x2F;www.ideone.com&#x2F;8mzxGR</a>')