Item(by='dcolkitt', descendants=None, kids=[25686819], score=None, time=1610118966, title=None, item_type='comment', url=None, parent=25681198, text='&gt; For most code, you don&#x27;t know how fast it &quot;ought to&quot; be, so you don&#x27;t even know there is a problem<p>One way to build up intuition about this is to start predicting in advance how many clock cycles your newly written functions will take to run. It helps when you keep your functions small and focused on a single task.<p>Before benchmarking some code, try to estimate in advance. &quot;How many arithmetic operations, how many memory fetches, how many cache misses, how many branches, etc.&quot; Then add those up, multiply by their respective clock cycle cost, divide by the chips frequency and voila. An estimate. Probably not that accurate, but at least you&#x27;re building a mental model.<p>Now run the code section through Valgrind, and compare what you got right and wrong. If you keep repeating this exercise, you&#x27;ll get substantially better at predicting code performance ahead of time. The major benefit of that is that you&#x27;ll tend to write high performance code, even before you optimize or profile it.<p>Like any skill, the key to improvement is fast and accurate feedback cycles combined with repeated practice.')