Item(by='tialaramex', descendants=None, kids=None, score=None, time=1609014922, title=None, item_type='comment', url=None, parent=25544089, text='WebAuthn is the mechanism that cares about DNS names. The Security Key - as a separate piece of hardware implementing CTAP2 (Client To Authenticator Protocol 2) - is not able to itself verify which web site you&#x27;re visiting.<p>So, that verification step takes places inside your web browser. In this specific context this means a vulnerability is that your employees might install software which is also able to perform the same steps but unlike say, Chrome, does not do DNS name checks, perhaps it even intentionally always tries to generate authentications for google.com.<p>On a very locked down platform, such as an iPhone, or some employee laptops in corporations where employees aren&#x27;t trusted to install software, there should be no way for that software to run. On Android, Google get to bless binaries with the privilege to do this, they bless the built-in Android browser, Chrome, production builds of Firefox, and I suppose it&#x27;s likely there are similarly popular browsers I haven&#x27;t heard of, but there is no way for a normal out-of-box Android device to just install some garbage adware that does WebAuthn even with a manual APK install. If you lack that privilege, when you ask Android to talk to a Security Key it fills out the parameter where a DNS name would go with a per-app ID. So you can use Security Keys to do cool stuff from an app, but you can&#x27;t fake WebAuthn.<p>e.g. you can work out the ID assigned to your app, get the backend code your server people wrote for WebAuthn, and spin up another copy that checks that ID instead of your DNS name, now you&#x27;ve got a one touch in-app sign-in that works with fingerprint sensors on popular phones the same way WebAuthn does for your web site.<p>The user presence detection means that even if the DNS name matching mechanism is defeated (e.g. you have software install privileges because you work in the IT division, you install software from a phishing mail) the user needs to actually touch the sensor&#x2F; press the button&#x2F; whatever to signify presence, which requires further social engineering each time. In a spear phishing attack this is definitely <i>conceivable</i> but it&#x27;s one last opportunity for your victim to say, hang on, what&#x27;s going on here?<p>User Presence is a signed bitflag (it&#x27;s also mandatory on most of the cheap devices anyway) which means it can&#x27;t be faked even on the cheapest possible CTAP2 implementation, and a WebAuthn server implementation can have confidence in the value of that bitflag when received, the WebAuthn spec. says the implementations should reject authentications where that bitflag is not set.')