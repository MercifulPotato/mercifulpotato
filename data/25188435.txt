Item(by='segfaultbuserr', descendants=None, kids=None, score=None, time=1606148865, title=None, item_type='comment', url=None, parent=25181704, text='Sometimes, it&#x27;s just valuable to have a local environment so you can use develop and test conveniently &quot;at home&quot; while using the same computer. It&#x27;s why there are ARM workstations.<p>For example, Linus Torvalds said [0],<p>&gt; Some people think that &quot;the cloud&quot; means that the instruction set doesn&#x27;t matter. Develop at home, deploy in the cloud.<p>&gt; That&#x27;s bullshit. If you develop on x86, then you&#x27;re going to want to deploy on x86, because you&#x27;ll be able to run what you test &quot;at home&quot; (and by &quot;at home&quot; I don&#x27;t mean literally in your home, but in your work environment).<p>&gt; Which means that you&#x27;ll happily pay a bit more for x86 cloud hosting, simply because it matches what you can test on your own local setup, and the errors you get will translate better.<p>&gt; This is true even if what you mostly do is something ostensibly cross-platform like just run perl scripts or whatever. Simply because you&#x27;ll want to have as similar an environment as possible,<p>&gt; Which in turn means that cloud providers will end up making more money from their x86 side, which means that they&#x27;ll prioritize it, and any ARM offerings will be secondary and probably relegated to the mindless dregs (maybe front-end, maybe just static html, that kind of stuff).<p>&gt; Guys, do you really not understand why x86 took over the server market?<p>&gt; It wasn&#x27;t just all price. It was literally this &quot;develop at home&quot; issue. Thousands of small companies ended up having random small internal workloads where it was easy to just get a random whitebox PC and run some silly small thing on it yourself. Then as the workload expanded, it became a &quot;real server&quot;. And then once that thing expanded, suddenly it made a whole lot of sense to let somebody else manage the hardware and hosting, and the cloud took over.<p>&gt; Do you really not understand? This isn&#x27;t rocket science. This isn&#x27;t some made up story. This is literally what happened, and what killed all the RISC vendors, and made x86 be the undisputed king of the hill of servers, to the point where everybody else is just a rounding error. Something that sounded entirely fictional a couple of decades ago.<p>&gt; Without a development platform, ARM in the server space is never going to make it.<p>And,<p>&gt; And the only way that changes is if you end up saying &quot;look, you can deploy more cheaply on an ARM box, and here&#x27;s the development box you can do your work on&quot;.<p>&gt; Actual hardware for developers is hugely important. I seriously claim that this is why the PC took over, and why everything else died.<p>&gt; So you can pooh-pooh it all you want, and say &quot;just cross-build&quot;, but as long as you do that, you&#x27;re going to be a tiny minority, and you don&#x27;t see the big picture, and you&#x27;re ignoring actual real history.<p>&gt; And btw, calling this an &quot;unixoid&quot; mindset is just showing what a total disconnect to reality you have, and how stupid your argument is. Unix lost. Yes, it lives on in the shape of Linux, but Unix lost not just to Linux, but to Windows. In fact, arguably it lost to windows first.<p>&gt; Why? Same exact reason, just on the software side. In both cases. Where did you find developers? You found them on Windows and on Linux, because that&#x27;s what developers had access to. When those workloads grew up to be &quot;real&quot; workloads, they continued to be run on Windows and Linux, they weren&#x27;t moved over to Unix platforms even if that would have been fairly easy in the Linux case. No, that was just unnecessary and pointless work. Just continue to deploy on the same platform.<p>&gt; Exact same issue on the software side as with the hardware. Cross-development is pointless and stupid when the alternative is to just develop and deploy on the same platform. Yes, you can do it, but you generally would like to avoid it if at all possible.<p>&gt; End result: cross-development is mainly done for platforms that are so weak as to make it pointless to develop on them. Nobody does native development in the embedded space. But whenever the target is powerful enough to support native development, there&#x27;s a huge pressure to do it that way, because the cross-development model is so relatively painful.<p>[0] <a href="https:&#x2F;&#x2F;www.realworldtech.com&#x2F;forum&#x2F;?threadid=183440&amp;curpostid=183486" rel="nofollow">https:&#x2F;&#x2F;www.realworldtech.com&#x2F;forum&#x2F;?threadid=183440&amp;curpost...</a>')