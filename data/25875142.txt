Item(by='peter_d_sherman', descendants=None, kids=None, score=None, time=1611343217, title=None, item_type='comment', url=None, parent=25871605, text='First of all, great idea, and a brilliant and highly laudable effort!<p>Favorited!<p>One minor caveat (&quot;Here be Dragons&quot;) I have (with respect to my own future adoption&#x2F;production use), however:<p><a href="https:&#x2F;&#x2F;github.com&#x2F;rqlite&#x2F;rqlite&#x2F;blob&#x2F;master&#x2F;DOC&#x2F;FAQ.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;rqlite&#x2F;rqlite&#x2F;blob&#x2F;master&#x2F;DOC&#x2F;FAQ.md</a><p>&gt;<i>&quot;Does rqlite support transactions?<p>It supports a form of transactions. You can wrap a bulk update in a transaction such that all the statements in the bulk request will succeed, or none of them will. However the behaviour or rqlite is undefined if you send explicit BEGIN, COMMIT, or ROLLBACK statements. This is not because they won&#x27;t work -- they will -- but if your node (or cluster) fails while a transaction is in progress, the system may be left in a hard-to-use state. So until rqlite can offer strict guarantees about its behaviour if it fails during a transaction, using BEGIN, COMMIT, and ROLLBACK is officially unsupported. Unfortunately this does mean that rqlite may not be suitable for some applications.&quot;</i><p>PDS: Distributed transactions are extremely difficult to get exactly right -- so I&#x27;m not trying to criticize all of the hard work and effort that everyone has put into this (again, it&#x27;s a great idea, and I think it has a terrific future).<p>But Distributed Transactions -- are what differentiate something like rsqlite from say, something like CockroachDB (<a href="https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;docs&#x2F;stable&#x2F;architecture&#x2F;life-of-a-distributed-transaction.html" rel="nofollow">https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;docs&#x2F;stable&#x2F;architecture&#x2F;life-...</a>).<p>Of course, CockroachDB is a pay-for product with an actual company with many years of experience backing it, whereas rqlite, as far as I can intuit, at this point in time (someone correct me if I am wrong), appears to be a volunteer effort...<p>Still, I think that rqlite despite this -- has a glorious and wonderful future!<p>Again, a brilliant and laudable effort, suitable for many use cases presently, and I can&#x27;t wait to see what the future holds for this Open Source project!<p>Maybe in the future some code-ninja will step up to the plate and add fully guaranteed, safe, distributed transactions!<p>Until then, it looks like a great idea coupled with a great software engineering effort!<p>As I said, &quot;Favorited!&quot;.')