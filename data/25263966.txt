Item(by='disgruntledphd2', descendants=None, kids=None, score=None, time=1606817648, title=None, item_type='comment', url=None, parent=25258280, text='So, my major comparator for ease of installation is a statistical programming language called R.<p>Both Python and R have equal numbers of C&#x2F;C++ dependencies, but the only breakage I experience is with Python.<p>This is for a number of reasons:<p>1) R has CRAN (like CPAN, but for R). If your package does not build on the latest version of R, it becomes unavailable.<p>2) if your package has C++ dependencies, the installation will error out and say which headers its missing. This means that I can search for the header and install it.<p>3) Because of the removal of obsolete packages, dependencies just work and you can be assured that a package will build with a given version of R. Updates can be a problem, but they are opt-in at the package level.<p>The core issue with Python is the acceptance that different projects can have entirely different dependencies, which means that this breakage is relatively common.<p>Like, I build C&#x2F;C++ on a semi-regular basis, and it can be super-painful, but Python is the only higher-level language that gives me this heartache.<p>Not to mention that if you install pip from the Linux repositories, you&#x27;re setting yourself up for a world of pain (this actually stopped me from learning Python for a number of years).<p>To be fair, I mostly use conda for C&#x2F;C++ dependencies as it works much better, but lots of packages are still only available through pip, which means I can&#x27;t avoid the problem.<p>To reiterate, I am super happy with this release of pip, as it will make my life much better. It doesn&#x27;t go far enough, but it is much, much better than what existed before.<p>Finally, Python packaging is a horrible wart on an otherwise good language, and I&#x27;m probably going to argue against using it in the future because of this.')