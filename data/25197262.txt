Item(by='segfaultbuserr', descendants=None, kids=[25197393], score=None, time=1606214931, title=None, item_type='comment', url=None, parent=25196359, text='&gt; <i>For the ignorant software only folks like me</i><p>TL;DR: Software is eating the world.<p>First, it doesn&#x27;t, but it can be easier or cheaper if you use one. You <i>can</i> build a closed-loop controller using only analog electronics, but it doesn&#x27;t mean you <i>should</i>. Because silicon is so cheap, sometimes it&#x27;s reasonable to use a $1 microcontroller and 20 lines of code, instead of 3 opamps, 5 resistors and 3 capacitors. I don&#x27;t mean that software is always a good idea, but you get my point.<p>Next, if you want an LCD-based user interface (it doesn&#x27;t mean you should, you can use an analog potentiometer, but having a display is the norm these days), you need a microcontroller anyway. You need a microcontroller to control the pixels on a screen or the numbers on a seven-segment display, and you also need software to implement functionality such as &quot;press this button to change the temperature&quot;, or &quot;save the current settings&quot;.<p>Also, these &quot;novelty&quot; soldering irons can power themselves via USB Type-C by using the USB Power Delivery protocol (it doesn&#x27;t mean you should, but people are having fun doing it), which is a digital protocol, you definitely need a controller and software to do the handshake in order to get DC power. A single microcontroller can perform this task as well.<p>Now, does it really need a RISC-V microcontroller, instead of, say, a 8-bit 8051 chip? No. But the target audiences of this soldering iron are hardware tinkers, and previously they already ported things like <i>Tetris</i> and <i>Game of Life</i> to the soldering iron, so... Why not?')