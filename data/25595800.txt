Item(by='haberman', descendants=None, kids=None, score=None, time=1609441016, title=None, item_type='comment', url=None, parent=25593637, text='Yes, protobufs are a very interesting and fulfilling technology to work on, but also frustrating because there is so much API exposure that changing any existing API is like trying to run through molasses.  A clean break a la proto1-&gt;proto2 opens up lots of possibilities on a much shorter time scale, but also creates a heavy migration burden.<p>There are lot of improvements we can make without touching API, but whenever the API itself is a barrier to further improvements, there are just few good options for managing that.<p>Your point about incremental changes reminds me of the Linus rant about &quot;bundling&quot;, where he argues that incremental changes lead to a better result than a big bang rewrite: <a href="https:&#x2F;&#x2F;yarchive.net&#x2F;comp&#x2F;linux&#x2F;bundling.html" rel="nofollow">https:&#x2F;&#x2F;yarchive.net&#x2F;comp&#x2F;linux&#x2F;bundling.html</a>  I very much agree with that approach when possible, but Linux has the benefit of a much narrower API offered to its users.  The protobuf API is not only the API of the core library, but of every generated class.  The massive surface area just makes any kind of change to generated APIs an enormous challenge (for example, returning string_view from accessors instead of std::string).')