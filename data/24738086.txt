Item(by='rzwitserloot', descendants=None, kids=[24738287, 24741722, 24738119, 24738115, 24739204], score=None, time=1602327565, title=None, item_type='comment', url=None, parent=24737789, text='I lost the line of reasoning (or perhaps the author did) at the second example.<p>If I have 2 InputStream objects, nevermind equality. It just doesn&#x27;t apply here. I don&#x27;t even want `a.Equals(b)` to be considered valid code in the first place. Having __any__ default behaviour here is a lot like the permissiveness that is bashed in example 1 (a trifecta of unexpected variable scoping rules, the ability to re-type variables merely by assigning an object of a different type to them, and the idea that a boolean will silently convert itself to a numeric value): There are a billion situations where you&#x27;d want to e.g. treat a boolean as a number, and in the vast majority of them, &#x27;0&#x27; is a fine value, but nevertheless, it leads to unpredictable code so let&#x27;s not default. Let&#x27;s require an explicit interaction from the code author to indicate they really want to do that, and, hopefully, we can make that &#x27;explicit interaction&#x27; simple.<p>Apply the same logic to example 2 and the author draws the wrong conclusion.')