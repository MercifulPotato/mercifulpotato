Item(by='pwdisswordfish4', descendants=None, kids=None, score=None, time=1605974113, title=None, item_type='comment', url=None, parent=25166942, text='It&#x27;s clear what your point is.  There was no need to explain.  You want to put your thumb on the scale and confirm your biases.<p>&gt; The actual file is 42 lines there<p>Okay?  If you encounter an argument &quot;There exists an X&quot;, proving it wrong is not as trivial as pointing out &quot;I can show there (also) exists a Y&quot;.<p>I wrote what I wrote for a reason.  Write such a hello world program in a mainstream idiomatic style that most closely resembles the way a JS programmer would write, and a GTK hello world app is (<i>shocker!</i>)... 12 SLOC, as mentioned:<p><pre><code>  $ ls -l .&#x2F;scratch&#x2F;hello.js # written yesterday\n  -rwxrwxr-x 1 asmithee asmithee 402 Nov 20 13:54 .&#x2F;scratch&#x2F;hello.js\n\n  $ cloc .&#x2F;scratch&#x2F;hello.js | \\\n  &gt;   grep -ie javascript | \\\n  &gt;   sed &quot;s&#x2F; \\( \\+[0-9]\\+\\)\\{3,3\\}&#x2F; &#x2F;g&quot;\n  Javascript              12\n\n  $ cat .&#x2F;scratch&#x2F;hello.js\n  const Gtk = imports.gi.Gtk;\n\n  let mainWindow = null;\n  let app = new Gtk.Application();\n\n  app.connect(&quot;startup&quot;, function buildUI() {\n    const text = &quot;Hello, World&quot;;\n    mainWindow = new Gtk.ApplicationWindow({\n      application: app, title: text\n    });\n    mainWindow.add(new Gtk.Label({ label: text }));\n  });\n\n  app.connect(&quot;activate&quot;, () =&gt; { mainWindow.show_all() });\n  app.run(ARGV);\n</code></pre>\n&gt; includes a shebang<p>Your thumb is on the scale.  No shebang is necessary, and as you pointed out yourself, the equivalent in the Electron world is to &#x27;simply declare an arbitrary webpage or js file filled with arbitrary modern HTML5 to be my &quot;main&quot; page&#x2F;script&#x27;.  And speaking of package.json...<p>&gt; a bunch of calls to GTK stuff<p>Your thumb is on the scale.  Electron developers learn how to deal with &quot;Electron stuff&quot;.  And, hello?  JSX?  React?  These are things that are used extensively in this space and come with their own complexities and have to be learned.  (And neither are even inherently Web things.  They&#x27;re inventions of &quot;framework&quot; people and live entirely in that layer.)<p>&gt; And that is my point-- it&#x27;s 42 lines too long<p>Your thumb is on the scale.  There is no equivalent Electron app that is 0 lines long.  And let&#x27;s talk about the untold number of projects whose package.json require many more lines, even for small, trivial, or incomplete programs.  That&#x27;s package.json alone, i.e., before we even get to writing code that actually does anything.  Besides that, the community around NodeJS is renowned for bloat and esoteric tooling.  As a concrete exercise, take a look at any random repo on GitHub, and you&#x27;re likely to find the root of the source tree filled a dozen or more auxiliary files.  Simplicity is a strength, but it&#x27;s not one valued very highly by the people who&#x27;ve ended up writing Electron apps and participating in the larger NodeJS community.<p>In any case, regardless of this stupid (stupid!) attempt at a takedown, you can&#x27;t ignore that (a) you&#x27;re responding, as mentioned before, to an argument you&#x27;re imagining rather than the one anyone is actually making, (b) even if your response were on-target, the argument in it is anachronistic.  To be able to &quot;continue&quot; the tendencies they&#x27;ve settled into now in 2020 is an impossible constraint when the <i>entire</i> context of this subthread is how Gnome folks&#x27; actions in 2011 could have led to a drastically outcome for how mainstream, cross-platform apps written in JS are developed.  To insist that Electron is the best fit for a bunch of developers who are used to and comfortable with writing Electron apps is not insightful, it&#x27;s just begging the question.')