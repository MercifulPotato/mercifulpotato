Item(by='kristopolous', descendants=None, kids=[25892720, 25891021, 25890959], score=None, time=1611481489, title=None, item_type='comment', url=None, parent=25890383, text='full-text searching is contentious, it&#x27;s a rabbit-hole of holy-wars.<p>I don&#x27;t believe I&#x27;m going to summon cranks with the following:<p>There&#x27;s more specialized tools for your usecase than postgres and you should be looking into &quot;n-gram indexing&quot;.<p>Lucene based systems such as elasticsearch are quite popular there&#x27;s also sphinx and xapian, also fairly widespread.<p>You need to read the documentation and configure them, they are flexible and need to be tuned to this usecase.<p>In the end, there is no &quot;correct&quot; way to do things. For instance, sometimes stemming words is the right way to go, but if you are say doing a medical system where two very different medicines could be spelled similar and stem to the same word, a mistake could lead to death, so no, stemming is very bad here.<p>Sometimes stop words is the way to go, but if people are looking for quotes, such as &quot;to be or not to be&quot; well now you have the empty string, splendid.<p>So yeah, configure configure configure.<p>This may bring out the cranks:<p>If you want to roll-your-own nosql systems like redis and mongo or couch seem to work really well (I&#x27;ve rolled my own in all 3 on separate occasions).<p>I guarantee there&#x27;s advanced features of maria and postgres that aren&#x27;t widely used and some people reading this will confidently claim they are superior but I assure you, that is a minority opinion. Most people go with the other options.<p>If you ever doubt it, ask the actual developers of postgres or maria on chat. They are extremely nice and way more honest about the limitations then their hardcore fans are. The databases are under constant development with advanced features and you&#x27;ll learn a lot (really, they are both super chill dev communities, impressively so).<p>Perhaps your solution (as mine has been) is a hybrid. You can store the existence for instance, in one system and the offsets and chunks in another so you get a parallelizable asynchronous worker pipeline, it&#x27;s impressively fast when you horizontally scale it. &lt;0.5 sec for multiple terabytes of text (and yes, I&#x27;m talking nvme&#x2F;hundreds of gb of RAM per node&#x2F;&gt;=10gb network). I&#x27;ve legitimately just done random queries to marvel at the speed<p>I really hope I save myself from the rock throwing.')