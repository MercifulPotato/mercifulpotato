Item(by='Silhouette', descendants=None, kids=None, score=None, time=1604231997, title=None, item_type='comment', url=None, parent=24957706, text='<i>responsive&#x2F;low-latency (responds to input quickly), fast (completes tasks quickly), uses resources proportional to the functionality it provides, and doesn&#x27;t often hang or spend noticeable amounts of time waiting for a network request before responding to an action</i><p>That seems like a fairly low bar to clear. Aside from the network request issue, I think every web application I&#x27;ve worked on for a decade or more would tick all of those boxes, from intranet tools to browser-based interfaces embedded in device firmware. I&#x27;m sure there are many others in the industry who could say the same. A lot of the things I&#x27;m thinking of are for internal use, but in terms of public examples, you can just look at most of the successful big-name business SAAS applications, and they tend to be strong on these requirements as well. Ease of use is a huge selling point for attracting customers, and no-one is winning points by being clunky in their web GUI in 2020.<p>Network speed and reliability is a different issue, and obviously many web applications are particularly vulnerable to problems there because they have such a strong communication element. But then the same is true of native applications that are for communication or a front-end to a client-server system like a central database.<p><i>Applications that meet these criteria include: Thunderbird, KiCAD, VLC, Vim, tmux, Blender, evince, Handbrake, and Pidgin.</i><p>That&#x27;s an interesting set of examples. The other point under discussion was about whether web applications cause usability problems by deviating from native platform UI conventions. I can&#x27;t help noticing that several of the native applications you mentioned there do exactly that.<p>For example, Blender&#x27;s UI was infamous for being so unusual that anyone coming from other 3D modelling software found it hard to use, and for looking and behaving nothing like a conventional native application on a platform like Windows. Eventually, that became so much of a problem that they basically rewrote the whole UI layer to work in more conventional ways.<p>Handbrake has its good points, but its interface looks like a GUI from the early 2000s where the designer just threw as many different types of control onto a form layout as they could manage.<p>Thunderbird also has its good points, but its UI is incredibly glitchy in some areas (dragging and dropping comes to mind) and it definitely fails to meet your fast and responsive criteria at times.')