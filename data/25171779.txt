Item(by='jlokier', descendants=None, kids=None, score=None, time=1605984607, title=None, item_type='comment', url=None, parent=25170940, text='Filesystem writes don&#x27;t always correspond directly to storage sector writes.<p>Sometimes it&#x27;s possible for the filesystem API to guarantee that &quot;sector&quot;-size writes are atomic, even though the underlying storage doesn&#x27;t do that.<p>For example a filesystem which uses copy-on-write when overwriting data, by appending each written block to a journal and checksumming or checkpointing the journal, is likely to offer that property.<p>Sometimes a block device knows that sector writes are atomic too.  For example some battery-backed RAID controllers can reasonably guarantee this.  Of course it fails if the battery runs out, but the abstraction is intended to assume you never allow that to happen.<p>It can go the other way as well.  When underlying storage provides guaranteed atomic sector writes, the overlaid storage might not.  RAID-5 does not provide atomic sector writes even when the underlying storage units do.<p>It would be useful for them to report when they have that property, because it would allow SQLite to use fewer writes.  In effect, if the filesystem already uses a mechanism to ensure atomicity at some performance cost, there&#x27;s no need for SQLite to use a second mechanism on top at a second performance cost.<p>It&#x27;s actually worse than non-atomic.  Writing to a sector on RAID-5 (without battery backup) corrupts <i>other</i> sectors too, during the time window until they are all made consistent.  I call this the &quot;radius of destruction&quot;, and I&#x27;m pretty sure SQLite and other software ignores this problem because there&#x27;s no API for finding out about it.<p>So filesystems could report:<p>- &quot;Don&#x27;t know&quot; for when writes go direct to the underlying block device.  Or better, report whatever the block device reports for this query, which should be &quot;don&#x27;t know&quot; in most cases.<p>- &quot;Yes it&#x27;s atomic&quot; for when the filesystem layer (or block translation layer, flash translation layer or whatever there is) knows that it provides a reliable atomic-block-write abstraction on top of storage which doesn&#x27;t provide that.<p>- &quot;Watch out, we don&#x27;t even guarantee your sector write won&#x27;t corrupt related sectors in a geometry group...&quot;')