Item(by='pierrebai', descendants=None, kids=[24922822, 24922542], score=None, time=1603910204, title=None, item_type='comment', url=None, parent=24921390, text='Both problem could have been solve looooooong ago by introducing a type modifier akin to const that carries if a value is verified (or safe or non-null or other. Pick your synonym).<p><pre><code>   int * p; &#x2F;&#x2F; maybe null!\n   int * verified p; &#x2F;&#x2F; guaranteed non-null!\n</code></pre>\nA looooong time ago (circa... 1994-1995) I designed a hierarchy of smart pointers and had a variety for non-null so that you could declare a function like:<p><pre><code>   void foo(non_null_ptr&lt;T&gt;&amp; p);\n</code></pre>\nAnd <i>know</i> that you don&#x27;t have to verify for null. All enforced at compile-time. (via the a function on ptr&lt;T&gt; returning a non_null_ptr&lt;T&gt;).<p>With language support around if() and others, C++ could have mde it even more convenient. Even C could have introduced such a tyupe modifier. Whenever I read about pointers being unsafe and how optionals and maybes are the solution, I roll my eyes, because non-null-ptr do the exact same thing.<p>The funny thing is C++ has a non-null ptr (with no language support guarantee though): references. Unfortunately, the language made them not resettable, which makes them unusable in many scenario when you&#x27;d want them to change value over time, like in most classes members.')