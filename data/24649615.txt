Item(by='quietbritishjim', descendants=None, kids=None, score=None, time=1601551099, title=None, item_type='comment', url=None, parent=24648830, text='The one example I gave in the parent comment already addresses everything you talked about.<p>Yes you can use a Python context manager (that&#x27;s what you&#x27;re referring to) to lock a mutex, but you can&#x27;t pass that context manager as a return result of a function and be sure its __exit__ method will be called appropriately in the three situations I mentioned (immediately if result thrown away, at the end of the function if stored in a local variable, later still if returned from that outer function).<p>In fact I don&#x27;t think you can return a context manager from within a &quot;with&quot; block <i>at all</i>, even accepting that the parent function will have to manually reuse it in another with block, because its __exit__ method will already be called in the inner function. Technically this is true in C++ too of course because the object in the inner function will have its destructor called, but its move constructor will be called first giving you an opportunity to clear out its internal state (this is why my example used a unique_lock rather than a lock_guard). Things are even better in Rust: the bytes of the object are directly copied to the new object&#x27;s footprint and the original destructor isn&#x27;t called, so you don&#x27;t even need to set up a dummy &quot;empty&quot; state.<p>&gt; The only thing that the c++ method does really well is memory management (e.g. unique_ptr), because free() can&#x27;t fail.<p>Mutex unlocking usually can&#x27;t fail (and if they do, there&#x27;s usually not much you can do about it). Same with closing network connections. Closing files can fail, and for some programs it&#x27;s very important to know when that happens, but for many others it&#x27;s not important at all. Python&#x27;s chained exceptions are very nice, but not so important that their absence from C++&#x27;s exceptions (or Rust&#x27;s panics) makes those languages useless.')