Item(by='azemetre', descendants=None, kids=None, score=None, time=1604587158, title=None, item_type='comment', url=None, parent=24998368, text='I can easily see how people fall into these traps.<p>At my company we use styled-components for our styling library with react. Someone on the team made a few reusable components that styled the text correctly to what design wants (correct font, size, color, and all the typography goodies), you could even specify what element you wanted (p, span, h1-h6, etc) and it would base the styles of that for you.<p>It was basically this:<p>&lt;Text type=&#x27;paragraph&#x27; fontWeight=&#x27;bold&#x27;&gt;Some nicely styled letters&lt;&#x2F;Text&gt;<p>After a few months of using these components are product got noticeably slower, and on certain pages it completely broke accessibility.<p>After doing some digging, one (out of many) issues that hurt our performance was the needless HTML. Our link elements had nested span or p tags. Headings has span tags, buttons had span tags. Basically every interactive element had potentially 3-4 redundant tags.<p>Our navigation bar, which has 4 links (no sub-navigation), was 100+ DOM nodes. Wildly inefficient. And this was a small section of the overall page, imagine something like a table displaying data with tabular elements. That alone can easily be 600-1500 elements.<p>We didn&#x27;t need to use a span tag to style text in a button element. We didn&#x27;t need a paragraph tag to style text inside an anchor. But that&#x27;s what we did.<p>Our code basically looked like this:<p>&lt;CustomButton onClick={props.buttonChange}&gt;&lt;Text type=&#x27;span&#x27;&gt;{props.text}&lt;&#x2F;Text&gt;&lt;&#x2F;Button&gt;<p>The above would be abstracted as another component and it would look innocuous as:<p>&lt;RefreshButton onClick={customEvent} text={refreshCopy} &#x2F;&gt;<p>But this button would be comprised of so much DOM elements, you wouldn&#x27;t have any idea unless you are constantly inspecting what everyone is doing (which is full time work itself, that some people don&#x27;t want to do).<p>How it hurt accessibility was that some screen readers (and potentially other assistive tech) can&#x27;t parse large DOM trees, and the use case for these people simply wouldn&#x27;t work (they couldn&#x27;t traverse the page at all). This may be a limitation of how the device interacted with the accessibility tree and the DOM tree, but the failures are significant.<p>Choosing certain tools can force you to go down a certain path and I&#x27;m still floored why we couldn&#x27;t just use CSS and not rely on making multiple divs to customize certain components and just using css appropriately to style the text (rather than relying on text components). I&#x27;d estimate that we could probably get rid of 30-60% of some of our frontend code (styling and jsx) if we just used appropriate classes for our styles.')