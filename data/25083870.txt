Item(by='neurotrace', descendants=None, kids=[25087043, 25084155, 25086548], score=None, time=1605284648, title=None, item_type='comment', url=None, parent=25083353, text='I&#x27;m trying to wrap my head around this<p>&gt; Even better, you can define relations between the types and do type substitutions, e.g.: to construct this module, you need to give me 2 other modules, each with a specific set of functions, and for which type t1 of the first module, matches type t2 of the second module, while the actual type of t1&#x2F;t2 does not matter.<p>Isn&#x27;t this essentially the same as generic type arguments in other languages? Like in this pseudo TypeScript:<p><pre><code>    class CustomModule&lt;T1 extends Module1Interface, T2 extends Module2Interface&gt; {\n      constructor(t1: T1, t2: T2) { ... }\n    }</code></pre>')