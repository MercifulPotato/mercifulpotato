Item(by='alwillis', descendants=None, kids=[25083716], score=None, time=1605245011, title=None, item_type='comment', url=None, parent=25076469, text='<i>why would a mac with an intel processor need OS binary code for an arm processor?</i><p>Remember that all of the resources—images, text, icons, etc.—are shared between the Intel and ARM binaries.<p>There are a few use cases:<p>• For troubleshooting, you can have one external hard drive&#x2F;SSD that can boot both Intel and M1 Macs. This is very handy; this was pretty common back in the PowerPC to Intel days.<p>• Same thing with running certain apps. You&#x27;re doing some video rendering on an Intel Mac. Your buddy has an M1 Mac. You can boot his Mac with your external drive containing your Big Sur and your apps and you&#x27;ll get the 3x speed up on your renders by using their M1 Mac mini or whatever. Back in the day, you could put an Intel Mac into Target Disk Mode where it would act as an external hard drive and boot a PowerPC from it.<p>• When Intel Mac users running Big Sur buy M1 Macs, they can use Apple&#x27;s Migration Assistant which will transfer all of their settings, apps, etc. from the Intel Mac to the M1 Mac. No need to re-install the apps—they&#x27;ll just work on the M1 Mac. The Universal apps will run natively and the Intel-only apps will run using Rosetta 2.<p>These Universal apps (or <i>fat binaries</i> as they were known back in the day, going back to NeXTStep in 1989 or 1990) aren&#x27;t just a Mac-thing. When Apple transitioned iOS from 32-bit ARM to 64-bit ARM, apps contained the binaries for both. They later updated the OS to only download the version for your particular device, which made sense, since iOS devices then had far less storage than today&#x27;s devices have.')