Item(by='mook', descendants=None, kids=[24894842], score=None, time=1603648897, title=None, item_type='comment', url=None, parent=24887796, text='Related complaint, the standard library taking structs as input is kind of annoying. I&#x27;m specifically thinking of net.Dialer having a net.Resolver, where that&#x27;s a struct and not an interface, so it&#x27;s difficult to sub in custom logic there (but still possible, at least, with some contortions).<p>Single-binary deployment and (these days) good dependency tracking (downloading multiple versions of a library) is great; I don&#x27;t worry about trying to get somebody else&#x27;s source code built I do the way when I get python packages. The python side is largely because setting up a venv is error-prone (at least, for me, somehow) and leaky. I still think having the version baked into the import path is kind of dumb, but I suspect that&#x27;s really just because the documentation failed to explain the reasoning and good workflows (I understand just changing the path in go.mod may be enough).<p>I wish they had things like generics, but I fear that an incompatible version break would cause too much strife, much in the same way of python 3 &#x2F; perl 6. Given how the vendoring tools story went, I&#x27;m not yet confident the core team can manage the community very well.<p>On the positive side, the error handling has been decent for me so far; an error interface is easy to understand, compared to rust (where I think you can use Box&lt;dyn Error&gt; but they don&#x27;t actually say that in the basic documentation). I also like the decently sized standard library, again in comparison to rust where things are too minimal. I think ruby has a decent compromise, where the standard library is (mostly) also available as downloadable packages if you need a newer version. Somehow I&#x27;ve had worse experience with ruby gems compared to go modules, though; I think that&#x27;s because the bundler documentation is rather bad â€” it feels more like an essay rather than a reference.<p>Not having a central repository of packages is a definite plus in my book for go; it leads to less of a problem with people taking the good package names (since most names are bad anyway). Less worries about cutely named libraries like devise (ruby, for auth) or hyper (rust, HTTP). IMHO, libraries should be plainly named, apps can have weird names if they want.')