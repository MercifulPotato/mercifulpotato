Item(by='sgtnoodle', descendants=None, kids=None, score=None, time=1607371784, title=None, item_type='comment', url=None, parent=25332530, text='I consider any code that&#x27;s written to be &quot;speculative&quot; until its design has been vetted by another engineer. By speculative, I mean that there&#x27;s no expectation that the code will be approved and merged in its present form. An architecture document is simply a good way to get that buy-in. If I write down what I plan on doing in a document, and then solicit feedback on it from a coworker, there&#x27;s a very good chance that the same coworker will approve the resulting code without anything but bug and style fixes. If you&#x27;re exploring the problem space, yeah of course go ahead and hack away at some code. If the experiments go exceedingly well and you end up with production quality code, go ahead and throw it in a PR for review. You have to be receptive to &quot;bike shedding&quot; feedback, though, since the PR is the first opportunity you gave for folk to give that type of feedback.<p>It&#x27;s also perfectly reasonable to write and distribute a document that effectively says, &quot;I have no idea what the requirements are, but I have an arbitrary idea for how we should proceed anyway.&quot; More often than not, your coworkers will help flesh out the requirements, or agree with your arbitrary design decisions. Either way, it&#x27;s a lot easier to have that type of discussion on a free-form wiki page rather than in a github PR that you already spent 4 hours getting to compile and pass test suites.<p>Re: soliciting feedback, even verbose architecture documents tend to be relatively easy for your coworkers to digest. It is communication written for human consumption rather than machine consumption, after all. For one thing, you can have a lot of fun with them. One of my recent arch documents had at least a dozen MC Hammer puns in it. I had no trouble getting anyone to read through that. Also, if you give your coworkers the opportunity and they don&#x27;t follow up on it, it does give you the high road in any eventual PR contention. &quot;I mentioned this a week ago and asked you for feedback on it, why are you making a fuss about it now?&quot; Not that you should be setting up your coworkers like that. You should make a good faith effort to solicit feedback, and keep politely pestering folk until they get to it. Until you get buy-in, any code written is still speculative, even if you tried your best and your coworkers let you down.<p>It helps to lead by example. If you prioritize giving feedback to coworkers over your own implementation work (reading their documents, doing their code reviews in a timely way, etc.), then your coworkers will tend to notice and reciprocate.')