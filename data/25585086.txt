Item(by='dragontamer', descendants=None, kids=[25585509], score=None, time=1609356724, title=None, item_type='comment', url=None, parent=25585035, text='Even in the use of &quot;containers&quot;, generics are the complete opposite of how to use templates.<p>Java &#x2F; C#&#x27;s concept of &quot;Everything derives from Object&quot; is outright rejected in C++. Templates are part of this culture: how can we provide extendibility when nothing is an Object?<p>Well, look at iterators in C++. All C++ iterators extend from all collections WITHOUT the use of OOP-derivations. That&#x27;s thanks to the magic of Templates.<p>------<p>What&#x27;s going on? C++ templates allow the creation of new iterator classes. It invokes the compile-time language to create a new class at compile time.<p>In Java &#x2F; C#: vector&lt;MyClass&gt; is the same old vector as all other vectors.<p>In C++: vector&lt;MyClass&gt; is a custom-made, completely separate class from all other vectors. vector&lt;MyClass&gt;::iterator is a 2nd, custom-made completely separate class from all other iterators.<p>And yet, all of these different classes can be used the same, thanks to the use of auto, or other compile-time structures in C++.')