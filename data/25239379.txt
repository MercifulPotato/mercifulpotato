Item(by='geofft', descendants=None, kids=None, score=None, time=1606588054, title=None, item_type='comment', url=None, parent=25239318, text='There&#x27;s an interplay between them. Communication always has a cost; there are certainly things you can do to the constant factors, but in a 100-person engineering organization with 20 teams, it&#x27;s fundamentally going to be much easier for an engineer on one team to write a build system (or pre-merge CI flow, or whatever) that meets the needs of their four teammates working on the same code than one that meets the needs of all 20 teams.<p>The advantage of a running, pre-existing system (and the theoretical advantage of an off-the-shelf system like this that you can supposedly turn <i>into</i> a running system) is that it&#x27;s been built to satisfy most of the needs of a wide variety of developers working on all sorts of things, and so each engineer on each of those teams that says &quot;All right, I&#x27;ll spend some time thinking about how we build and release code&quot; is incentivized to start from the common starting point, even if they have to customize it. That means that if two or three teams end up working on similar-enough projects down the line, the shared tooling can actually support communication between the teams. Without the shared tooling, they can communicate all they want, but it won&#x27;t be rational for any team to abandon its existing tooling. (And of course you need the communication <i>too</i> - both are required.)')