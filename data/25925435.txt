Item(by='godot', descendants=None, kids=[25925567], score=None, time=1611733669, title=None, item_type='comment', url=None, parent=25924566, text='On a somewhat separate topic and line of thinking than the post (Great article btw, I agree with it completely) -- I&#x27;ve often thought that, as a software engineer, whenever giving estimates, any number of management folks must be thinking &quot;why does it take so long?&quot;. And I think part of the reasons is this. If you simply _ignore_ most of the accidental complexity, you often can build 80% of the functionality of a requested product&#x2F;feature in 20% of the time or less. What&#x27;s more, for any upper management who&#x27;s worked in the industry long enough, over the past two decades, they&#x27;ve most likely worked with some whiz kid who had done it (I was one myself in my early 20s a decade+ ago) -- so they know it can be done and have witnessed it.<p>Let&#x27;s say the requested product is some CRUD web app. At one point in their career, this executive worked in a growing tech startup and on the team was a talented fresh grad. That engineer built a product very similar to that entirely, front and back ends, in two days. 15 years later you&#x27;re working in a different company as an executive and you&#x27;re talking about building some CRUD web app just like that. Why is the estimates being given by the dev team 4 weeks with 4 developers?<p>What wasn&#x27;t seen and remembered was that the one built in two days by the smart kid had no unit tests (or any kind of tests), didn&#x27;t cover many edge cases (at least in its first version), a UI with barebones CSS, no responsive layout, no component-based frontend (e.g. React), no scalability concerns, etc. But all the requested functionality is there, it&#x27;s demo-able, and usable even. A similar product is being requested now, but it needs to be built to withstand  today&#x27;s quality standards, robustness, maintainability, etc. So unit tests are part of the requirements, a component-based frontend is needed for maintainability, you have to handle mobile, etc.<p>It&#x27;s pretty much all the same points the author is pointing out about accidental complexity; just kind of showing why someone would ask that question.')