Item(by='karlding', descendants=None, kids=None, score=None, time=1608751264, title=None, item_type='comment', url=None, parent=25520144, text='<i>&gt; make sure you know what your assert does, and when it does that, if you have a debug and release build</i><p>Absolutely. Probably the most common difference I&#x27;ve seen in &quot;Debug&quot; and &quot;Release&quot; builds relying on the standard library headers is when NDEBUG is defined as a macro when &lt;assert.h&gt; is included, which causes assert to become a no-op [0].<p>This has interesting implications when developers accidentally rely on the side effects of functions and assert on the return value of that helper. On &quot;Release&quot; builds that side effect would be compiled out. For that case, clang-tidy has the bugprone-assert-side-effect [1] checker if you want to enforce this in your CI.<p>[0] <a href="https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;c&#x2F;error&#x2F;assert" rel="nofollow">https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;c&#x2F;error&#x2F;assert</a><p>[1] <a href="https:&#x2F;&#x2F;clang.llvm.org&#x2F;extra&#x2F;clang-tidy&#x2F;checks&#x2F;bugprone-assert-side-effect.html" rel="nofollow">https:&#x2F;&#x2F;clang.llvm.org&#x2F;extra&#x2F;clang-tidy&#x2F;checks&#x2F;bugprone-asse...</a>')