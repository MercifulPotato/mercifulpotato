Item(by='dgb23', descendants=None, kids=None, score=None, time=1604670194, title=None, item_type='comment', url=None, parent=25007371, text='Yes Go is more mature, both by design and because it is also slightly older. In the other hand the two languages also solve different kinds of problems in very different ways.<p>Substantial things are being written in the Rust language for different fitting use-cases. Rust has quite a lot of reach as you can sneak it into large ecosystems to optimize parts of your application: Browsers, Nodejs and PHP (soon more) via WASM, JVM via JNI.<p>It is also a language that attracts big shops like Amazon and Microsoft, which typically is a good sign for a young language.<p>The reason you typically don&#x27;t see Rust as a _primary_ (rather than supporting) language for (Web-)application code is that it is better suited to solve hard problems (mainly performance but also internal correctness) than it is to do generic data manipulation and plumbing, which is typical for applications.<p>That said I personally don&#x27;t subscribe to the idea of the author that the two languages are like a match made in heaven. I&#x27;m very attracted to Go and I think it is a fantastic language. But as a freelancer who works alone or in small teams I never find a reason to choose it over the other ones in my tool-belt.<p>For example Clojure plus Rust is a much more fitting duo. They can both target browsers, Nodejs and the JVM and their use-cases are more diverged&#x2F;distinct.<p>Comming back to your point. It would be rather unpragmatic however to invest in any of the mentioned languages without already being proficient in some of the mainstream languages I think.')