Item(by='DonaldFisk', descendants=None, kids=[25854493], score=None, time=1611192840, title=None, item_type='comment', url=None, parent=25853837, text='If a is a constant, you can repeat it as inputs to when and unless.   If a is a value output by a vertex further back, e.g. output of filter0, then yes you do need edges to when and unless.   But the output could be labelled, automatically causing identical labelling at the destinations of the edges, and the lines corresponding to the edges could be hidden until the mouse pointer hovers over the either the output of filter0, the input at when, or the input at unless.   It&#x27;s better demonstrated than described in text, but I hope you follow it.<p>I&#x27;m aware that text is more compact, and understand the various user interface issues (e.g. crossing lines), but there are advantages in representing programs as graphs as opposed to text.   One of these is the possibility of very strong type checking while a function is being defined, and I&#x27;m currently working on that.   Another is that it should be possible to take advantage of homoiconicity: programs are graphs, and graphs are the most general data structures.   Also, graphs (i.e. data) can double as programs.<p>Tutorials for my language can be found here: <a href="http:&#x2F;&#x2F;www.fmjlang.co.uk&#x2F;fmj&#x2F;tutorials&#x2F;TOC.html" rel="nofollow">http:&#x2F;&#x2F;www.fmjlang.co.uk&#x2F;fmj&#x2F;tutorials&#x2F;TOC.html</a>\nThese are out of date, so suffer from the problem you hinted at above, and they also don&#x27;t explain my aims.   I&#x27;ll write updates to them when the new type system is properly working.')