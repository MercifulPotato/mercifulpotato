Item(by='elcritch', descendants=None, kids=[25597881], score=None, time=1609444657, title=None, item_type='comment', url=None, parent=25594944, text='&gt; How are your esp32 Nim deployments holding up?<p>They&#x27;re doing great! Nim has proven surprisingly stable, which was a fear I had at first. The core team has improved compiler support and I&#x27;ve not run into any issues updating so far. It bolster&#x27;s my confidence in Nim.<p>Even if Nim development were to suddenly &quot;stop&quot; tomorrow, it&#x27;d easily be useable for embedded for a decade or more. There&#x27;s improvement to be made in Nim, but it&#x27;s a resilient system design. If the same were to happen to Rust or Crystal, for example, you&#x27;d have issues keeping the compiler up to date with LLVM, etc. Compiling to C gives a lot of stability for embedded work. Sort of similar to how Delphi Pascal is still useable today.<p>One surprise came when I had to do some optimizations and went from `-d:debug` to `-d:release`. The debug code added enough overhead it fixed some timing issues with the high end ADC we&#x27;re using. Moving to release mode made it too fast and required adding the required delay (it was in the ADC datasheet but forgot it). Easy to solve, but it&#x27;s worth noting.<p>&gt; Do you have futur plans for the new esp32 riscv processors?<p>If a risc-v processor supports C, then it already supports Nim! The real question is libraries and&#x2F;or build support for the target. An afternoon of work can get the Nim build setup to work with almost any C&#x2F;C++ build system. Really, Nim on risc-v just requires a target board and someone to sit down for a few hours. It&#x27;s a fun &quot;hacking exercise&quot; :-)<p>As a side tangent, I&#x27;d like to make a first class &quot;pure&quot; FreeRTOS library as it&#x27;s the most widely used RTOS. That&#x27;s after dealing with a lot of annoying race conditions in the `esp-idf` and seeing the incredible amount of hacky C code in embedded systems.<p>Building on FreeRTOS but introducing esp32-like libraries for vfat&#x2F;files&#x2F;networking&#x2F;etc that&#x27;d work across microcontrollers would make for an incredibly productive environment (for embedded work).<p>There&#x27;s also the possibility of using DrNim [1] to add formal verification for certain algorithms! Nim&#x27;s effect system is very flexible. Really useful would be using the &quot;guards and locks&quot; [2] to write and prevent deadlocks (and maybe avoid locks?) when writing resource management and device drivers. A lot of the esp-idf issue I&#x27;ve run into are race conditions or slow speed since even `echo`&#x2F;`printf` must have a lock to protect the system UART. Those are open questions&#x2F;problems, and I&#x27;m starting a new job next month so it depends on what the needs there end up being.<p>1: <a href="https:&#x2F;&#x2F;nim-lang.org&#x2F;docs&#x2F;drnim.html" rel="nofollow">https:&#x2F;&#x2F;nim-lang.org&#x2F;docs&#x2F;drnim.html</a> \n2: <a href="https:&#x2F;&#x2F;nim-lang.org&#x2F;docs&#x2F;manual_experimental.html#guards-and-locks" rel="nofollow">https:&#x2F;&#x2F;nim-lang.org&#x2F;docs&#x2F;manual_experimental.html#guards-an...</a>')