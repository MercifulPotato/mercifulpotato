Item(by='dgb23', descendants=None, kids=None, score=None, time=1608651951, title=None, item_type='comment', url=None, parent=25505353, text='First of all I think there is merit in trying to do &quot;Netlify for the backend&quot;. Or a more flexible and backend focused variation of Vercel (I think they only let you do FaaS, correct me if I&#x27;m wrong). Services like these provide a constrained, &quot;just works&quot; user (dev) experience.<p>However, I don&#x27;t like the name &quot;Micro Services&quot;. It seems like the authors are trying to hijack a well established term for their brand. This might be incredibly confusing for new developers and at the same time turn off experienced ones.<p>Also there seems to be little explanation of the storage system. From the docs:<p>&gt; State is a fundamental requirement of any system. We provide a key-value store to provide simple storage of state which can be shared between services or offload long term to keep microservices stateless and horizontally scalable.<p>Is key-value standard practice for the target audience? This is a little bit of a point of confusion. Especially if we&#x27;re dealing with a language like Go, which has many benefits and advantages, but expressiveness is not one of them. So building up ad-hoc relational logic with it seems scary!<p>I&#x27;m not too familiar with Go. But from reading some of the example code[0] I get the feeling that there must be some very good reason for avoiding relational.<p>And what confuses me further is the name collision with go-micro[1].<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;micro&#x2F;services&#x2F;blob&#x2F;master&#x2F;messages&#x2F;handler&#x2F;handler.go" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;micro&#x2F;services&#x2F;blob&#x2F;master&#x2F;messages&#x2F;handl...</a><p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;asim&#x2F;go-micro" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;asim&#x2F;go-micro</a>')