Item(by='wegs', descendants=None, kids=None, score=None, time=1611579900, title=None, item_type='comment', url=None, parent=25892035, text='On a more serious note, most uses of Docker that I&#x27;ve seen push problems back, and have accumulating technical debt (with interest).<p>* Robust systems shouldn&#x27;t be tied to pinned versions. If your code works with PostgreSQL 9.6.19, and doesn&#x27;t work with 9.6.20 or 9.6.18, that&#x27;s usually the sign of something going very, very wrong.<p>* In particular, robust systems should always work with the latest versions of libraries. In most cases, they should work with stock versions of libraries too (whatever comes with Ubuntu LTS, Fedora, or similar). It&#x27;s okay if you have one or two dependencies in a system beyond that, but if it&#x27;s a messy web, that&#x27;s a sign of something going very, very wrong.<p>* Even if that&#x27;s not happening, as much as I appreciate having decoupled, independent teams, your whole system should work with the same versions of tools and libraries. If one microservice only works with PostgreSQL 11.10, and another with 12.07, that&#x27;s a sign of something having gone way off the rails.<p>These aren&#x27;t hard-and-fast rules -- exceptional circumstances come up (e.g. if you&#x27;re porting Python 2-&gt;Python 3, everything might not land at the same time) -- but these should be rare enough to be individually approved (and usually NOT approved) by your chief architect&#x2F;architecture council&#x2F;CTO&#x2F;however you structure this thing.<p>For the most part, I&#x27;ve seen Docker act as an enabler of bad practices:<p>* Each developer can have an identical install, so version dependencies creep in<p>* Each team has their own container, and it&#x27;s easy for versions and technologies to diverge<p>* With per-team setups, you end up with an uncontrollable security perimeter, since you need to apply patches to a half-dozen different versions of the same library (or worse, libraries performing the same function)<p>The docker&#x2F;microservices&#x2F;etc. mode of operating gives a huge short-term productivity boost, but I haven&#x27;t actually seen a case on teams I&#x27;ve been on where the benefits outweigh the long-term costs. That&#x27;s not to say they don&#x27;t exist, but they&#x27;re in the minority.<p>For the most part, I use Python virtual environments and similar, but by the time you hit docker, I back away.')