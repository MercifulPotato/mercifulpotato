Item(by='JoshTriplett', descendants=None, kids=None, score=None, time=1602484776, title=None, item_type='comment', url=None, parent=24750969, text='There are two separate problems that&#x27;d need solving to handle bitfields:<p>1) Having uN and possibly iN types, for general-purpose use.<p>2) Placing such types at specific offsets within a struct.<p>C only handles the second of those: you can have an N-bit type, but when you extract it it comes out as the wider type you constrain it from. So, `unsigned field:5;` will get read as an `unsigned`, not a `u5`.<p>Rust <i>could</i> handle both, if appropriate sized types exist. (Const generics might be nice here, to parameterize on the type width.) (1) alone won&#x27;t solve the problem, without some way to define how those types are packed into the struct.')