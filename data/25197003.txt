Item(by='midjji', descendants=None, kids=[25199435], score=None, time=1606212092, title=None, item_type='comment', url=None, parent=25191886, text='Its truly very nice :) So much horrible preprocessor stuff goes away. Not that preprocessing cant be done right, its just that the standard C&#x2F;C++ preprocessor language breaks almost every rule of a maintainable code.<p>I love compiler sanity checks of math operations with static asserts, and stuff like compile checking for ub and cdb.<p>constexpr int signed_int_fixed_yet(){ &#x2F;&#x2F; compiler error\nreturn std::limits&lt;int&gt;::max +int(1); \n}<p>tuplify&lt;PodType&gt;() is wonderful too.<p>Just a shame it adds so much boilerplate though, like why couldnt every function have the same constexpr if possible property as lambdas, and is so damned slow and costly to compile. I also keep writing half of a nice interface, then running into template recursion depth, or gcc failing to compile correctly&#x2F;(identically to clang).<p>Its also still a bit too limited. Like, consider the case where everything is known compile time: \nint a=5; &#x2F;&#x2F; lets say sizeof(a) =4\na&lt;&lt;64; &#x2F;&#x2F; should be compile error, not ub \nfor(int i=0;i&lt;64;++i) a&lt;&lt;i; &#x2F;&#x2F; should be compile error,\n&#x2F;&#x2F; note that either line above can be removed by the compiler. Leaving a=5;<p>template&lt;class T, int R,int C&gt; Matrix{\nstd::array&lt;T,R<i>C&gt; data;\n&#x2F;&#x2F; constexper &#x2F;&#x2F; should be automatic\nT operator(int row, int col){\nif is_constexpr_in_context(row) &#x2F;&#x2F; now wouldnt this be nice... \n    static_assert(row&lt;R,&quot;&quot;); &#x2F;&#x2F; only if row is constexpr argument\nreturn data[row</i>C+col];\n}\n};<p>Matrix&lt;double,3,4&gt; m;\nauto a=m(1,2) &#x2F;&#x2F; row is known compiletime, compiler will warn, should be compile error\nm(a+3,0) &#x2F;&#x2F; also known compiletime(array default init to 0), should warn, should be compile error\nfor(int r=0;r&lt;3;++r)\nfor(int c=0;c&lt;6;++c) \na+=m(r,c); &#x2F;&#x2F; oob known compiletime, should warn...<p>Its not like this is that hard either, just transform the statements to use m.at&lt;r,c&gt;() and it works, so its just the compiler identifying constexpr context automatically as for lambda and replacing functions with their argument templated equivalents, and autogenerating these functions. It cant fix everything, but the number of errors people made when using such libs would massively decrease, especially since templated matrix classes are almost universally have visible definitions, and it often applies.')