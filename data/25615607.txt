Item(by='jgraham', descendants=None, kids=[25615890], score=None, time=1609615551, title=None, item_type='comment', url=None, parent=25613674, text='I&#x27;ve shipped relatively lots of code in Python and a little bit in Rust.<p>For any project where performance or correctness are significant concerns I&#x27;d much rather use Rust than Python. It provides a lot more tools to help you write correct code, and express invariants in a machine-checkable way. This means that they are maintained when the code changes, even when multiple contributors are involved. I&#x27;m must more confident in my ability to ship correct code in Rust and maintain that correctness over time.<p>Rust also doesn&#x27;t have the performance ceiling (floor?) of Python, either for single threaded programs, or — especially — for those that benefit from concurrency or parallelism. Of course for some progames there&#x27;s a clear hot loop that you could implement as a native extension in Python, but other workloads have relatively flat profiles where the performance bottlenecks are making allocations or similar.<p>As well as the actual language features, the commitment to backward compatibility from the Rust authors means that you don&#x27;t get regular breakage simply from updating to a newer version of the language. I think Python 2 being 2.7 for such a long time gave people a false impression of how stable a foundation Python provides and the fact that point releases of 3.x often cause problems feels like it causes a lot of unnecessary makework for Pyton users and is rather offputting.<p>That doesn&#x27;t mean I&#x27;d always choose Rust of course. You do require more upfront design to get something that works at all. Some projects also benefit greatly from not requiring a compile step and making use of the ubiquity of a Python interpreter. And I think I&#x27;d find it difficult to justify using Rust for a typical web backend that&#x27;s mostly composing together various well-tested libraries to provide an API on top of a database.')