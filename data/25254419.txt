Item(by='patrec', descendants=None, kids=[25254522], score=None, time=1606748561, title=None, item_type='comment', url=None, parent=25253763, text='Matlab is <i>much</i> lower friction than python.<p>You write a function, using nice linear algebra syntax. Already python is worse: you do a bit of import boilerplate and write linear algebra in a gimped notation. You call the function. Not so in python, where you have to import it first. You change the function definition, next call will be redefined function. In python you can try to do an interactive reload via third party software but chances are it won&#x27;t work right since Guido apparently never considered this something worth designing properly (apart from matlab lots of &quot;real&quot; programming languages are <i>much</i> better at this, including erlang, common lisp and smalltalk).<p>Your function runs too slow. You press a button and you see a color coded version of the code in your editor window and see instantly where the bottleneck is. In python you break out one of several crappy profilers. You want to save your results from your interactive exploration &quot;save results.mat&quot; -- done. In python there are various ways of saving stuff, which are either not general or slow or don&#x27;t work between different versions.<p>I haven&#x27;t used matlab in years, but as an interactive environment for linear algebra it blew python out of the water and likely still does, even if it has a number of big shortcomings as a general purpose programming language (and probably a worse selection of libraries in quite a few numerical domains these days as well). This is <i>particularly</i> true if the people using it are not trained programmers.')