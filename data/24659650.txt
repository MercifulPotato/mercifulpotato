Item(by='jasomill', descendants=None, kids=None, score=None, time=1601620915, title=None, item_type='comment', url=None, parent=24655067, text='IBM&#x27;s z&#x2F;OS UNIX System Services is very nearly this. Many UNIX systems have tons of utilities that more resemble BusyBox than GNU coreutils, and AFAIK no C compiler is anywhere <i>near</i> as compatible with GCC as clang (including, notably, slightly older versions of GCC itself).<p>But AFAIK z&#x2F;OS is the only UNIX[1] variant that offers a &quot;POSIX&quot; environment<p>Where no subset of the native character set even resembles ASCII.<p>Where &quot;everything is a file&quot;, but where many of these &quot;files&quot; — including, notably, both shared libraries and executable programs — are mostly inaccessible using anything resembling traditional byte-oriented UNIX utilities, library functions, and system calls.<p>Where process creation is not only &quot;not cheap&quot;, but where it can in fact be so cripplingly expensive vis-à-vis conventional UNIX systems that the z&#x2F;OS designers have (wisely) not only resurrected something akin to the traditional meaning of the &quot;sticky bit&quot; on executables, but have also made extensive provisions to allow both &quot;subshell&quot; scripts and <i>executable subprocesses</i> to be created within one&#x27;s own address space, both via system calls and from within the POSIX shell itself[2].<p>On a related note, I was thinking the other day that an &quot;evil&quot;, yet at least minimally standards-compliant filesystem in the spirit of your system might actually useful to have around for testing. Or, if not, would at least be fun to design.<p>Think a filesystem that imposes random per-directory length limitations on filenames and or file sizes, and occasionally allocates space for files in terms of random, per-file allocation unit sizes just because it can.<p>Or imagine a filesystem that flushes the overwhelming majority of data to disk promptly, but which also maintains a large &quot;evil cache&quot; containing a few blocks out out of the middle of every few million write calls that is flushed as <i>infrequently</i> as is permissible by the relevant standards.<p>And why let previously-allocated free space go to waste when, given careful planning, its contents could be used to present stale, yet technically &quot;valid&quot; data to applications that use  I&#x2F;O operations whose ordering with respect to one another is not formally defined for IPC (e.g., POSIX only explicitly defines ordering between its own read() and write() calls, so I&#x2F;O by any means not passing through particular versions of these functions explicitly designated as POSIX-compliant can, in terms of standards-compliance, be &quot;safely&quot; ignored).<p>And so on.<p>[1] <a href="https:&#x2F;&#x2F;www.opengroup.org&#x2F;openbrand&#x2F;register&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.opengroup.org&#x2F;openbrand&#x2F;register&#x2F;</a>\n[2] Google &quot;_BPX_SHAREAS&quot; for details.')