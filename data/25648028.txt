Item(by='nyanpasu64', descendants=None, kids=[25650842], score=None, time=1609867719, title=None, item_type='comment', url=None, parent=25647610, text='Go&#x27;s slices don&#x27;t act like what I thought were called &quot;non-owning references&quot;(Rust&#x27;s &amp;&#x2F;&amp;mut [T] or C++&#x27;s std::span&lt;T&#x2F;T const&gt;), which reference memory whose lifetime is bounded by something else (like a vector or array or shared pointer). Instead it&#x27;s &quot;shared ownership&quot; where memory is referenced by one or more slices (and no single owner) which can reference and mutate the slice simultaneously, and it&#x27;s freed by the GC sometime after <i>all</i> the slices are gone.<p>This reminds me of Numpy&#x27;s ndarrays, which act more like &quot;owning containers&quot; (which may sometimes share ownership and alias) than &quot;non-owning references&quot;.')