Item(by='bob1029', descendants=None, kids=[25156498], score=None, time=1605826972, title=None, item_type='comment', url=None, parent=25151773, text='Just checked our newest Blazor server-side web administration site in chrome devtools.<p>12 requests total, 322kB transferred (914kB uncompressed, so either way), finish in 991ms. Request was made between Texas and AWS us-east-1. Server running on a T3a instance. This is .NET Core 3.1 on Windows Server 2019.<p>Of the 322kB, blazor.server.js is 39.2k and our JS interop shim is 3k. This represents all that is required to communicate between server and client. The rest of the static source is ace code editor, bootstrap, jQuery and open iconic. All remaining interactions happen as deltas over the websocket connection.<p>Every day that I work with Blazor, I am further convinced that it is the only way to build our web applications moving forward. I don&#x27;t have a good answer for Blazor server side in mass-scale public-facing scenarios (a la Netflix), but anyone can come up with an edge case to poke holes. Our &#x27;internal&#x27; dashboards are actually accessible from the public web and we have not experienced any DDoS or other performance incidents. If something does come up, I will just pop the VM over to the internal network &amp; require VPN access. That said, I really prefer accessing Blazor server side apps as directly as possible due to the latency concern.')