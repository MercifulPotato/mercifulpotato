Item(by='blacklight', descendants=None, kids=None, score=None, time=1605660269, title=None, item_type='comment', url=None, parent=25121416, text='&gt; &quot;Oh, I just pushed a change. I really didnâ€™t wanna push that, so how do I undo it?&quot; - adding a revert commit, rebasing and squashing it together with the original is the standard way. I know, it may be painful, but back in the time when I used SVN that was only possible by asking the local sysadmin to run a bunch of hacks on the server.<p>Also, people must cope with the fact that &quot;undoing&quot; something that has already been pushed isn&#x27;t just like typing Ctrl-Z in a text editor. If you&#x27;re the only developer of the repo then no problem - rebase like there&#x27;s no tomorrow and nobody will complain. If you work on the same project with other people, then you must take into account that someone may have already pulled your commit and added something on top of it, and you can&#x27;t simply &quot;undo it&quot; without breaking his&#x2F;her git tree unless you rebase. It&#x27;s not a limitation of the tool, it&#x27;s a common solution to a common problem in versioning systems.<p>And the confusion about local and remote branch just vanishes once one figures out that there&#x27;s a local copy and a remote copy of the repo, and those may not necessarily be in sync - of course, it adds a layer of complexity, but it solves a lot of other problems when collaborating with multiple people on the same code base.<p>I believe that git is really the best version in system around. The way it works may have a bit of a steep learning curve, but once you master it you realize that its entities and functions (commits, branches, tags, reverts, rebases, submodules etc.) are really the best way to solve the problem of distributed software development without adding any more complexity.<p>The only argument one could make against git is that its cli is sometimes confusing and inconsistent - checkout can do tons of things, from resetting a file to the original version to create a new branch; some branch actions can be done through git branch, some through git checkout, some through both; you can pull --rebase, or you can run either pull or rebase alone as commands, but one pulls things from the server, the other is used to manipulate commits on the local copy - unless you want to change the commit message, and in that case you use git commit --amend.<p>I agree that the cli nomenclature is sometimes very puzzling. But let&#x27;s really try and separate the discussion around the technology and its implementation (which is, IMHO, absolutely brilliant) from that around the user interface (which is sometimes inconsistent, but it&#x27;s also the result of adding more and more functionalities on top of relatively few existing commands).')