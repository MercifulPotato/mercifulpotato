Item(by='kaoD', descendants=None, kids=[25612233, 25612221], score=None, time=1609588769, title=None, item_type='comment', url=None, parent=25612163, text='Sorry, I probably edited my comment while you were replying and added a couple links.<p>Check misconception 2 here, I think it addresses your point.<p><a href="https:&#x2F;&#x2F;github.com&#x2F;pretzelhammer&#x2F;rust-blog&#x2F;blob&#x2F;master&#x2F;posts&#x2F;common-rust-lifetime-misconceptions.md#2-if-t-static-then-t-must-be-valid-for-the-entire-program" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;pretzelhammer&#x2F;rust-blog&#x2F;blob&#x2F;master&#x2F;posts...</a><p>EDIT to your edit:<p>&gt; &#x27;static in this context would mean that all instances of T must be &#x27;static.<p>You mean in T: &#x27;static?<p>No. It means that any instance passed as type T must be bound by &#x27;static and therefore could be held up to the end of &#x27;static. This does not mean that they&#x27;re allocated at compile time, it just so happens that static variables (allocated at compile time) are &#x27;static but the causality is reversed.<p>&gt; If you want something to mean &quot;A type cannot have references in it&quot; then invent a &#x27;noref lifetime.<p>It <i>can</i> have references in it! As long as they&#x27;re bound by &#x27;static.<p>Here&#x27;s an example: <a href="https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=857389cd5251e037f5ba608566b89b04" rel="nofollow">https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;mode=debug&amp;editio...</a>')