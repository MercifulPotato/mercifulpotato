Item(by='Philip-J-Fry', descendants=None, kids=[24988368, 24989681, 24990947], score=None, time=1604490853, title=None, item_type='comment', url=None, parent=24987386, text='Why do you think it gets repeated by Go developers?<p>I was a C# developer writing all these abstractions like every other C# developer does. It&#x27;s idiomatic C#. OOP exists, you&#x27;re encouraged to use it to abstract and decouple code.<p>Even if you try and strip all that away, you&#x27;ll never escape it because every library you depend on is written this way. For example, try understanding <a href="https:&#x2F;&#x2F;github.com&#x2F;protobuf-net&#x2F;protobuf-net" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;protobuf-net&#x2F;protobuf-net</a> like I once did. The cognitive load is huge.<p>This is C#, this is what having a huge toolset results in.<p>A simple language with simple code isn&#x27;t a shortcoming. It&#x27;s an advantage. Overly complex code is a shortcoming.<p>I liked writing heavily abstracted code in C#, that&#x27;s what I used to do every day. But I never liked reading other people&#x27;s code because without the intimate knowledge of the code it is a huge mental load. Onboarding new developers into a code base they are unfamiliar with is also very time consuming.<p>In Go I realised that the only abstraction you need is an interface. There&#x27;s no &quot;abstraction first&quot; mentality like there is in C#. You can define interfaces at any point in time, whereas in C# you must define an interface first, and if you don&#x27;t then you end up going the OOP route with more abstraction.<p>And because of this small toolset, reading other people&#x27;s code is easy. It all looks the same.')