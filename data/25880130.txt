Item(by='eyelidlessness', descendants=None, kids=[25883536, 25881987], score=None, time=1611382781, title=None, item_type='comment', url=None, parent=25879400, text='Following up since this is seeing a little bit of attention: I unfortunately couldn’t open source those libraries but I’m already working on their successor. And I have really good ideas how to improve on the original, including:<p>- snapshot testing to identify unexpected API changes<p>- auto generated integration&#x2F;E2E fuzzing tests to validate API boundaries so you can trust you don’t need to test them yourself and can just trust the type system and your business logic tests<p>- a fully transport layer agnostic interface so you’re not married to HTTP (or REST, or whatever)<p>- the API boundaries are defined with standards-based primitives (JSON Schema) but simple declarative interfaces like io-ts for end users, but this internal structure makes documentation generation a first principles assumption<p>- 400&#x2F;validation errors will be automatically documented along with success responses<p>- a “choose your own idiom” interface where you can go full on Option type&#x2F;exhaustive pattern matching for responses, error&#x2F;result tuple responses, or more TS&#x2F;Node idiomatic try&#x2F;catch semantics. But each interface will be type safe from request to response and you won’t have to sacrifice any of the other guarantees listed above. The only tradeoff here is since TS doesn’t have type checked exceptions the other interfaces will probably have richer documentation')