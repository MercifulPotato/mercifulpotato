Item(by='beagle3', descendants=None, kids=None, score=None, time=1601617906, title=None, item_type='comment', url=None, parent=24657077, text='Oh, of course. GOSUB&#x2F;RETURN are easier to explain, but only as a stepping stone towards functions; I like them because unlike functions+locals, which are much more &quot;all or nothing&quot; - whereas when I taught basic, I would start with &quot;GOTO&quot; which is trivial for everyone to understand; then go to GOSUB+RETURN, which is just a tiny bit harder, but still very capable - my <i>complex</i> gosub+return example was flood fill[0]:<p><pre><code>    9000 REM F=FOREGROUND COLOR, X AND Y ARE COORDINATES\n    9010 IF POINT(X,Y)=F THEN RETURN\n    9020 PLOT(X,Y,F)\n    9030 X=X+1 : GOSUB 9000 : X=X-2 : GOSUB 9000 : X=X+1\n    9040 Y=Y+1 : GOSUB 9000 : Y=Y-2 : GOSUB 9000 : Y=Y+1\n    9050 RETURN\n</code></pre>\nWhich does recursion, visually, with only gosub&#x2F;return, lets me touch on stack overflows (trying to fill too big an image would on most interpreters).<p>I have never had the chance to teach BBC Basic, but if I did, even though it has PROCs and LOCALs, I would still go the GOTO -&gt; GOSUB&#x2F;RETURN route, and only then proceed to DEFPROC &#x2F; LOCAL.<p>[0] This would also be introduction to multiple statements - I would show this with one statement per line and multiple statements per line and discuss pros&#x2F;cons')