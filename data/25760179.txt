Item(by='paulfurtado', descendants=None, kids=None, score=None, time=1610532440, title=None, item_type='comment', url=None, parent=25759204, text='A zone transfer or grep really isn&#x27;t so terrible, even for someone who doesn&#x27;t know much about dns it&#x27;s just a quick memorized dig away. HTTP or grpc aren&#x27;t really better CLI UX and if this is your infra you can just write a cli to display your dns-driven information cleanly.<p>Storing key-value pairs in TXT records is easily parseable in any language if you use a simple delimiter. This isn&#x27;t even an abuse of DNS, the protocol has been used to serve arbitrary data forever.<p>All the other modern services like consul, etcd, zk, etc require keeping a quorum of servers happy and have pretty heavy clients. By contrast, it&#x27;s so hard to take down DNS and spinning up a new server is as easy as copying a zone file to a new server and the new server could even be running a totally different dns implementation because zone files are so standardized. Plus, your tooling can directly parse zone files with whatever dns library you were using and have a trivial way to dump the data without any server at all.<p>DNS can be replicated in arbitrary configurations and everything supports DNS caching for really high HA.<p>When you do want dynamic discovery and don&#x27;t want to implement direct zone file generation, there&#x27;s always CoreDNS which has plugins for so many datasources.<p>And if you don&#x27;t want to host it, there are tons of DNS providers with great uptime.<p>At this point, I really can&#x27;t think of any solution for service discovery that&#x27;s better than DNS for most cases. Especially since the majority of service discovery solutions end up returning hostnames instead of IP addresses so you&#x27;re already taking a dependency on DNS. Other solutions only really add benefit if you need to store tons of metadata or take advantage of things like leader election, etc')