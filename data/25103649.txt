Item(by='MaxBarraclough', descendants=None, kids=[25107856, 25104613, 25105848], score=None, time=1605466516, title=None, item_type='comment', url=None, parent=25102163, text='Good article. A nice tour of properties and their pros and cons.<p>Personally I don&#x27;t like them, for the reason labelled in the article as <i>Problem 2: Arbitrary Computation</i>. Computation should <i>look like</i> computation. I like it to be perfectly clear which statements can throw, and which cannot. I prefer <i>List.getSize()</i> over <i>List.size</i> precisely because the implementation should be permitted to perform computation, and it looks wrong when the code implies otherwise. I like to know that after executing <i>Universe myUniverse; myUniverse.answer = 42;</i> the value of <i>myUniverse.answer</i> really is 42. <i>edit</i> Ignoring the slim possibility of overflowing the integer type of <i>myUniverse.answer</i>.<p>Properties make it harder to reason about these things. Similar madness is possible in languages that allow overloading the assignment operator, such as C++. Come to think of it, you could probably &#x27;fake&#x27; properties in C++ this way.<p>I accept that properties can make for slightly tidier expressions. I also like the point that <i>properties are a single unit</i>, tidily united in a way that getter&#x2F;setter pairs aren&#x27;t. Overall though I value &#x27;honesty&#x27;, and the ability to reason clearly about code, over these things.<p>I can&#x27;t imagine Ada ever supporting properties, for the same reasons.')