Item(by='h3rald', descendants=None, kids=[25812171], score=None, time=1610852790, title=None, item_type='comment', url=None, parent=25786498, text='Joy was the inspiration for min :)<p>min is actually mainly an interpreted language, BUT it can actually as of recently be transpiled to Nim (which in turns generates C code which can be compiled), so you can actually create executable files from min, which is pretty cool.<p>Adding this form of compilation was actually really easy because in a stack-based language there&#x27;s essentially one instruction: push an item on the stack... the only things I had to add was wrapping external files in functions to delay their evaluation to when they are required.<p>Combinators like linrec etc are no different from ordinary operators, they are pushed on the stack and they rearrange it...<p>Consider the following program that takes an integer as input and prints its factorial:<p><pre><code>  args\n  (compiled?)\n    (0)\n    (1)\n  if get int\n  (dup 0 ==) (1 +) \n  (dup 1 -) (*) linrec\n  puts\n</code></pre>\nNote how I am getting the first or second argument from the command line depending if I am running the program through the interpreter (min factorial.min 5) or as a stand-alone executable (.&#x2F;factorial 5).<p>When running the min &quot;compiler&quot;:<p><pre><code>  min -c factorial.min\n</code></pre>\n...the following Nim code gets generated. As you can see, it&#x27;s mostly just pushing items on the stack :)<p><pre><code>  import min\n  MINCOMPILED = true\n  var i = newMinInterpreter(&quot;factorial.min&quot;)\n  i.stdLib()\n  ### factorial.min (main)\n  i.push MinValue(kind: minSymbol, symVal: &quot;args&quot;, column: 4, line: 1, filename: &quot;factorial.min&quot;)\n  var q1 = newSeq[MinValue](0)\n  q1.add MinValue(kind: minSymbol, symVal: &quot;compiled?&quot;, column: 10, line: 2, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minQuotation, qVal: q1)\n  var q2 = newSeq[MinValue](0)\n  q2.add MinValue(kind: minInt, intVal: 0)\n  i.push MinValue(kind: minQuotation, qVal: q2)\n  var q3 = newSeq[MinValue](0)\n  q3.add MinValue(kind: minInt, intVal: 1)\n  i.push MinValue(kind: minQuotation, qVal: q3)\n  i.push MinValue(kind: minSymbol, symVal: &quot;if&quot;, column: 2, line: 5, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minSymbol, symVal: &quot;get&quot;, column: 6, line: 5, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minSymbol, symVal: &quot;int&quot;, column: 10, line: 5, filename: &quot;factorial.min&quot;)\n  var q4 = newSeq[MinValue](0)\n  q4.add MinValue(kind: minSymbol, symVal: &quot;dup&quot;, column: 4, line: 6, filename: &quot;factorial.min&quot;)\n  q4.add MinValue(kind: minInt, intVal: 0)\n  q4.add MinValue(kind: minSymbol, symVal: &quot;==&quot;, column: 9, line: 6, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minQuotation, qVal: q4)\n  var q5 = newSeq[MinValue](0)\n  q5.add MinValue(kind: minInt, intVal: 1)\n  q5.add MinValue(kind: minSymbol, symVal: &quot;+&quot;, column: 15, line: 6, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minQuotation, qVal: q5)\n  var q6 = newSeq[MinValue](0)\n  q6.add MinValue(kind: minSymbol, symVal: &quot;dup&quot;, column: 4, line: 7, filename: &quot;factorial.min&quot;)\n  q6.add MinValue(kind: minInt, intVal: 1)\n  q6.add MinValue(kind: minSymbol, symVal: &quot;-&quot;, column: 8, line: 7, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minQuotation%, qVal: q6)\n  var q7 = newSeq[MinValue](0)\n  q7.add MinValue(kind: minSymbol, symVal: &quot;*&quot;, column: 12, line: 7, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minQuotation, qVal: q7)\n  i.push MinValue(kind: minSymbol, symVal: &quot;linrec&quot;, column: 20, line: 7, filename: &quot;factorial.min&quot;)\n  i.push MinValue(kind: minSymbol, symVal: &quot;puts&quot;, column: 4, line: 8, filename: &quot;factorial.min&quot;)</code></pre>')