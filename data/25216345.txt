Item(by='unnouinceput', descendants=None, kids=[25216601], score=None, time=1606358076, title=None, item_type='comment', url=None, parent=25215527, text='As a side note, if you have the possibility to sort data before searching values in it then implement trie:<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trie" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trie</a><p>This is the best for data with very few updates&#x2F;modifications and a lot of queries. One example would be points of interest on a map, like restaurants on google maps. Not like those restaurants gets updated&#x2F;modified every single day but you do have clients that while using your restaurant finder app they query a lot of them on a given radius around their GPS coordinates.<p>I had such a project in the past. My client acquired this data, around 3 billion points of interests residing in a PostgreSQL DB that was around 900 GB. While the server was beefed with 128GB RAM, was not nearly enough to have it all in memory and it had a responsiveness of several seconds, way too much for young impatient users and my client was seeing a decline in users. I reorganized data in PGSQL to fit a trie tree and now a query was solved in milliseconds. Accounting all other stuff on top, the app was now able to generate a response under a second. Trie ftw.')