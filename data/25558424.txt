Item(by='roca', descendants=None, kids=[25563141], score=None, time=1609155292, title=None, item_type='comment', url=None, parent=25557411, text='&quot;Only require JIT compilation if they&#x27;re launched on a non-x86 machine&quot; is a heck of a caveat.<p>The x86-64 instruction set is not a good portable IR. Some well-known problems:<p>* It&#x27;s much more irregular to decode than other instruction sets&#x2F;IRs<p>* There is a truly vast set of instructions, very many of which are almost never used. So in practice you need to define the subset of x86-64 you&#x27;re using. E.g. does your subset contain AVX-512? AVX2? AVX? BMI? X87? MMX? XGETBV? etc etc etc. These decisions will impact the performance of your code on actual x86 CPUs as well as non-x86 CPUs.<p>* x86-64 assumes the TSO memory model which is horribly expensive to support on CPUs whose native model is weaker (e.g. ARM) (which is why Apple added a TSO mode for M1; no other ARM chips have this)<p>Honestly, declaring x86-64 your portable IR and then claiming that as a technological breakthrough sounds like a trick to me. I&#x27;d agree it&#x27;s a breakthrough if you define your x86-64 subset, show your x86-to-ARM compiler, and show that it produces code competitive with your competitors (e.g. WASM compilers).')