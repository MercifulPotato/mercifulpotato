Item(by='inkyoto', descendants=None, kids=None, score=None, time=1606635568, title=None, item_type='comment', url=None, parent=25236685, text='Bitcode is the bitstream file format used to encode the LLVM IR. LLVM IR itself is architecture independent (unless the code uses inline assembly, which is architecture specific): <a href="https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;LangRef.html" rel="nofollow">https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;LangRef.html</a><p>clang compilers (or other LLVM based language&#x2F;compiler frontends) generate the LLVM IR, apply optimisation passes and run the LLVM IR through the architecture specific backend that transforms the LLVM IR into the underlying hardware ISA (or into a target ISA when cross-compiling). The original meaning of LLVM was «Low Level Virtual Machine». It is a widespread approach found in many cross-platform &#x2F; portable compilers, e.g. GNU has RTL.<p>Here is an example of the «Hello world» using the LLVM IR; there is nothing architecture specific about it:<p>------<p>@.str = private unnamed_addr constant [13 x i8] c&quot;Hello World\\0A\\00&quot;, align 1<p>; Function Attrs: nounwind ssp uwtable<p>define i32 @main() #0 {<p><pre><code>  %1 = alloca i32, align 4\n\n  store i32 0, i32* %1\n\n  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str, i32 0, i32 0))\n\n  ret i32 0\n</code></pre>\n}<p>declare i32 @printf(i8*, ...) #1<p>------<p>Seamless tranlastion of Bitcode into an Intel or ARM ISA actually works, too: <a href="https:&#x2F;&#x2F;www.highcaffeinecontent.com&#x2F;blog&#x2F;20190518-Translating-an-ARM-iOS-App-to-Intel-macOS-Using-Bitcode" rel="nofollow">https:&#x2F;&#x2F;www.highcaffeinecontent.com&#x2F;blog&#x2F;20190518-Translatin...</a><p>Lastly, Bitcode and Rosetta are mutually exclusive. If the app is available in Bitcode, it is run through an optimising hardware ISA backend at the download time and then runs always natively, whereas Rosetta runs existing x86 apps through the static binary translation into ARM first (what Apple refer to as AOT - ahead of the time) and likely uses JIT when the recompiled application is run.')