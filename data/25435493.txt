Item(by='DonHopkins', descendants=None, kids=[25435646], score=None, time=1608067789, title=None, item_type='comment', url=None, parent=25434613, text='Agreed, AWT was a horrible compromise in an impossible situation!<p>But he made up for it by creating &quot;Bongo&quot; at Marimba.<p>Bongo is to Java+HyperCard as HyperLook is to PostScript+HyperCard.<p><a href="https:&#x2F;&#x2F;medium.com&#x2F;@donhopkins&#x2F;hyperlook-nee-hypernews-nee-goodnews-99f411e58ce4#1718" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;@donhopkins&#x2F;hyperlook-nee-hypernews-nee-g...</a><p>&gt;Arthur van Hoff [...]<p>&gt;Marimba Castanet and Bongo<p>&gt;Eventually Arthur left Sun to found Marimba, where he developed the widely used Castanet push distribution technology, and the under-appreciated Bongo user interface editing tool: a HypeLook-like user interface editor written in Java, that solved the runtime scripting extension problem by actually calling the Java compiler to dynamically compile and link Java scripts.<p>&gt;Nobody else had ever done anything remotely like Bongo before in Java. Dynamic scripting with Java was unheard of at the time, but since he had written the compiler, he knew the API and how the plumbing worked, so had no qualms about calling the Java compiler at runtime every time you hit the “Apply” button of a script editor.<p>&gt;Danny Goodman’s “Official Marimba Guide to Bongo”<p><a href="https:&#x2F;&#x2F;www.amazon.com&#x2F;Official-Marimba-Guide-Bongo-Goodman&#x2F;dp&#x2F;1575212544" rel="nofollow">https:&#x2F;&#x2F;www.amazon.com&#x2F;Official-Marimba-Guide-Bongo-Goodman&#x2F;...</a><p>&gt;Danny Goodman, the author of the definitive HyperCard book, “The Complete HyperCard Handbook”, went on to write the “Official Marimba Guide to Bongo”, a great book about Bongo, described as the “reincarnation of HyperCard on the Internet”.<p>&gt;[TODO: Write about Bongo’s relationship to HyperCard, HyperLook and Java.]<p>&gt;Java applets are everywhere on Web pages these days, but if you’ve made the move to Java from a contemporary programming environment you’ve probably been dismayed by its relative immaturity. The Official Marimba Guide to Bongo covers Marimba’s Bongo environment, which is designed to allow rapid development of Java user interfaces. The book shows you how to use the large library of graphics “widgets” supplied with Bongo, how to wire them together with simple scripting, and how to integrate other Java applets. It also explains how Bongo can be used to build channels for Marimba’s Castanet system. -Amazon.com Review<p>&gt;Java users should be rejoicing at the promise of programming aid Bongo, which is is the reincarnation of HyperCard on the Internet. It is fitting that the first major book about Bongo comes from Goodman, the author of the definitive HyperCard book of days gone by (The Complete HyperCard Handbook, Random, 1994). His background is as a journalist, not a technologist, and readers will make good use of this first-rate introduction. This book will circulate. -Library Journal Review<p>Unfortunately Marimba&#x27;s Bongo got overshadowed by Sun&#x27;s announcement of &quot;Java Beans&quot; which Sun was pushing with much fanfare and handwaving as an alternative to &quot;ActiveX&quot;, but which eventually turned out to actually be just a server side data modeling technology, not a client gui framework.<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21784027" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21784027</a><p>[...]<p>Marimba developed Bongo, a Java-based gui toolkit &#x2F; user interface editor &#x2F; graphical environment, inspired by HyperCard (and HyperLook), which they used to develop and distribute interactive user interfaces over Castanet.<p><a href="https:&#x2F;&#x2F;people.apache.org&#x2F;~jim&#x2F;NewArchitect&#x2F;webtech&#x2F;1997&#x2F;10&#x2F;note&#x2F;index.html" rel="nofollow">https:&#x2F;&#x2F;people.apache.org&#x2F;~jim&#x2F;NewArchitect&#x2F;webtech&#x2F;1997&#x2F;10&#x2F;...</a><p>&gt;Feel the Beat with Marimba&#x27;s Bongo, By Chris Baron<p>&gt;In 1996, four programmers from the original Java-development team left Sun to form Marimba and produce industrial-strength Java-development tools for user interface and application administration. Bongo, one of Marimba&#x27;s two shipping products, allows developers to create either a Java-application interface or a standalone Java-based application called a &quot;presentation.&quot; A Bongo presentation resembles a HyperCard stack -- it allows developers to quickly create an application with a sophisticated user interface, but without the tedious programming of directly coding in Java or C&#x2F;C++. Bongo&#x27;s nonprogramming, visual approach makes it ideal for producing simple applications that don&#x27;t involve a lot of processing, such as product demonstrations, user-interface prototypes, and training applications. Bongo is fully integrated with Castanet, Marimba&#x27;s other product, a technology for remotely installing and updating Java applications.<p>Bongo was unique at the time in that it actually let you edit and dynamically compile scripts for event handlers and &quot;live code&quot; at run-time (in contrast with other tools that required you to recompile and re-run the application to make changes to the user interface), which was made possible by calling back to the Java compiler (which Arthur had written before at Sun, so he knew how to integrate the compiler at runtime like a modern IDE would do). Without the ability to dynamically edit scripts at runtime (easy with an interpreted language like HyperTalk or PostScript or JavaScript, but trickier for a compiled language like Java), you can&#x27;t hold a candle to HyperCard, because interactive scripting is an essential feature.<p>Danny Goodman, who wrote the book on HyperCard, also wrote a book about Bongo. Arthur later founded Flipboard and JauntVR, and now works at Apple.<p>Here&#x27;s a paper I wrote comparing Bongo with IFC (Netscape&#x27;s much-ballyhooped Java Internet Foundation Classes). (Notice how IFC = Internet Foundation Classes was Netscape&#x27;s answer to MFC = Microsoft Foundation Classes. Never define your product&#x27;s name in terms of a reaction to your widely successful competitor&#x27;s name. <i>cough</i> SunSoft <i>cough</i>)<p>NetScape&#x27;s Internet Foundation Classes and Marimba&#x27;s Bongo<p><a href="https:&#x2F;&#x2F;donhopkins.com&#x2F;home&#x2F;interval&#x2F;ifc-vs-bongo.html" rel="nofollow">https:&#x2F;&#x2F;donhopkins.com&#x2F;home&#x2F;interval&#x2F;ifc-vs-bongo.html</a><p>&gt;In summary, I think it was too early to write a Java toolkit before JDK 1.1, so IFC has gone and done a lot of its own stuff, which will have to be drastically changed to take advantage of the new stuff. Bongo is not as far down the road of painting itself into a corner like that, and if some effort is put into it, to bring it up to date with the new facilities in Java, I think it will be a better framework than IFC. Java Beans remains a big unknown, that I don&#x27;t have a lot of faith in. Arthur says Java Beans does too much, and I&#x27;m afraid it may try to push competing frameworks like IFC and Bongo out of the limelight, instead of just providing a low level substrate on top of which they can interoperate (like the TNT ClassCanvas). If Bongo can pull off ActiveX integration with style and grace, then it wins hands down, because I doubt IFC can, and I don&#x27;t trust Sun to deliver on their promises to do that with Java Beans.<p>More:<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=19837817" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=19837817</a><p>&gt;Wow, a blast from the past! 1996, what a year that was. [...]')