Item(by='0xbadcafebee', descendants=None, kids=[25363490], score=None, time=1607529168, title=None, item_type='comment', url=None, parent=25355663, text='Maybe there are some other things you can say for certain. But as to some of your points:<p>&gt; Watch out for positive-only feedback loops, you absolutely need negative feedback as well - or only. Eg. exponential back-off.<p>Agreed it <i>may</i> need negative feedback, but I&#x27;m not sure about <i>always</i>.<p>If your service has a latency SLA, exponential back-off might kill your SLA (depending on wordage and where the back-off is). The fix is to soft reject requests (RST rather than dropping packets) when you can&#x27;t meet the demand. This change may allow you to meet your SLA if it&#x27;s written to prioritize low latency over service unavailability.<p>This is it&#x27;s own negative feedback loop, but change from sending RSTs to silently dropping and you no longer have the feedback.<p>&gt; Sometimes, you just need a decentralized solution, rather than a distributed one<p>Agreed<p>&gt; Loose coupling is your friend.<p>Until it isn&#x27;t? :)<p>&gt; add an extra layer of indirection, but you probably need to pay more attention to cache invalidation<p>Fixes for additional layers tend to increase system complexity compared to fixes for fewer layers.<p>&gt; Throughput probably matters more than latency.<p>Until it doesn&#x27;t :)<p>&gt; Reducing the size&#x2F;number of writes will probably help more than trying to speed them up.<p>Depending on 20 different things... You really have to account for all the system&#x27;s limits (and business use cases) and find the solution that matches the implementation needs.<p>&gt; there is probably a huge business for multi-tenancy-as-a-service<p>Sure, it&#x27;s called EKS :-) Just build more clusters... Don&#x27;t worry, we&#x27;ll bill you...<p>&gt; Don&#x27;t overthink it<p>Yes and no; Yes, in that there will always be unknowns. But no, in that often improvements in communication will provide better solutions without extra work. Think smarter, not harder!')