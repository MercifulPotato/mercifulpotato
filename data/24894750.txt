Item(by='mythz', descendants=None, kids=None, score=None, time=1603709690, title=None, item_type='comment', url=None, parent=24894260, text='I&#x27;ve also spent a bit of time with LISPs, when learning Clojure I ported the Clojure 101 LINQ Examples [1] and did appreciate a lot of niceties that Clojure brings with it where the additional syntax actually added to its readability, e.g. the usage of vector syntax for function params provided a welcomed visual separator from its implementation body. Basically all its additional syntax improves readability over a LISP&#x27;s typical clumped sea of parens where you can more quickly discern different constructs from a glance which would otherwise take me a lot more time &amp; effort trying to determine the boundaries of each expression whilst evaluating them in my head, effectively conveying that the minimal s-expression syntax that&#x27;s optimal for the compiler isn&#x27;t optimal for humans.<p>So when it came time to implementing a .NET LISP [2], I adopted much of Clojure&#x27;s additional syntax for improved readability &amp; interop with .NET APIs [3]. But you can only improve LISP&#x27;s syntax so far, e.g. its Template libraries for HTML generation [4] make for horrible HTML DSL&#x27;s which looks nothing like the HTML it&#x27;s supposed to generate. The solution to overcome this was basically to not to use LISP for templates, instead create a multi-language scripting language [5] that embeds lisp into it allowing it to Combine strength&#x27;s of all languages [6], e.g. use LISP for algorithms and Handlebars &#x2F; JS Expressions for templating.<p>The REPL is definitely one of its super powers which is one areas where it shines &amp; basically the primary use-case where I still use it. I&#x27;ve created a live &quot;watch&quot; mode &amp; deep integration with .NET libs that I use for discovery, e.g. run DB queries, call HTTP APIs, execute shell scripts, etc. [7]. It especially shines for being able to open a REPL session with a remote production .NET instance letting me inspect its live running state &amp; invoke system functionality like querying its configured RDBMS, executing redis commands, send tweets, emails, etc [8], I&#x27;ve even got it to Live Script Unity objects in-game :) [9], which speaks to the power &amp; elegance of LISP that&#x27;s able to achieve so much with so little code.<p>At the same time I don&#x27;t think REPL-based programming is all that useful during normal development, you can execute encapsulated code fragments fine, but most of the time I&#x27;ll need my whole environment constructed before being able to inspect it as I would when debugging, so I find it useful for opening a REPL session into a live running instance, but not using the REPL to construct the live instance. So for my dev workflow, static analysis &amp; typing, great IDE, tooling + debugging is a lot more useful.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;mythz&#x2F;clojure-linq-examples" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mythz&#x2F;clojure-linq-examples</a><p>[2] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;</a><p>[3] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#net-interop" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#net-interop</a><p>[4] <a href="https:&#x2F;&#x2F;www.cliki.net&#x2F;HTML%20template" rel="nofollow">https:&#x2F;&#x2F;www.cliki.net&#x2F;HTML%20template</a><p>[5] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;docs&#x2F;syntax#language-block-modifiers" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;docs&#x2F;syntax#language-block-modifiers</a><p>[6] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;docs&#x2F;syntax#combine-strengths-of-all-languages" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;docs&#x2F;syntax#combine-strengths-of-all...</a><p>[7] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#run-and-watch-lisp-scripts" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#run-and-watch-lisp-scripts</a><p>[8] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#techstacks-tcp-lisp-repl-demo" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;#techstacks-tcp-lisp-repl-demo</a><p>[9] <a href="https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;unity" rel="nofollow">https:&#x2F;&#x2F;sharpscript.net&#x2F;lisp&#x2F;unity</a>')