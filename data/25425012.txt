Item(by='MaxBarraclough', descendants=None, kids=None, score=None, time=1607989497, title=None, item_type='comment', url=None, parent=25423984, text='&gt; When the &amp; operator is used on &#x27;a&#x27; it should mark it as unsafe to place the &#x27;a&#x27; on a CPU register<p>Not necessarily, as the compiler might be smart enough to adjust the other operations and enregister the <i>a</i> variable anyway. There&#x27;s no ceiling on how smart the optimiser can be. An extreme case:<p><pre><code>    int a = 42;\n    &amp;a;\n    &#x2F;&#x2F; do things with &#x27;a&#x27;\n</code></pre>\nThis uses the <i>&amp;</i> operator but doesn&#x27;t even save the result of the expression, so the compiler will presumably chop that whole second statement as dead code, and may still be able to enregister <i>a</i>.<p>&gt; optimizations should never affect how the program behaves (except making it run faster, of course)<p>Most of the time a C++ compiler&#x27;s optimiser must preserve observable behaviour, provided undefined behaviour is not invoked, but not always. C++ permits elision of certain copy&#x2F;move operations even if this changes observable behaviour. [0]<p>Also, if the program is multithreaded and has race conditions, an optimiser isn&#x27;t required to ensure that the relative speeds of different threads remains unchanged, which may lead to a change in observed behaviour. Of course, in such a case, <i>except making it run faster</i> contradicts <i>never affect how the program behaves</i>, so you&#x27;ve sort of covered that anyway.<p>[0] <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;12953129&#x2F;" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;12953129&#x2F;</a>')