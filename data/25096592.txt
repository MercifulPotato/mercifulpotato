Item(by='yakshaving_jgt', descendants=None, kids=[25096762], score=None, time=1605395767, title=None, item_type='comment', url=None, parent=25096412, text='If it seems confusing, it&#x27;s because it is. That&#x27;s the point I&#x27;m trying to make. I have seen — several times across a number of projects — people writing code with a philosophical ideal along the lines of &quot;well, this page should only know about the state (a subset of the model) that it is responsible for, so I won&#x27;t give it the whole model. Also it will only send the messages related to just this page. Oh, requirements changed. No problem, I&#x27;ll just add another part of the global state as an argument. Oh, requirements changed again, and I need to send a global message. Hmm… I&#x27;ll just… <i>etc</i>&quot;<p>Furthermore, I&#x27;ve observed over a few years the behaviour in which developers with significant JavaScript ecosystem experience will impose these philosophical ideals far too early in an Elm application&#x27;s design because they aren&#x27;t familiar with Elm&#x27;s refactoring story and are justifiably wary of a codebase growing to the size and level of complexity that is beyond saving.<p>I understand and agree with the idea of generally narrowing types to simplify APIs, but in my experience, the typical &quot;page&quot; in a multi-step webform actually contains too many cross-cutting concerns for this approach to remain frictionless as business needs change (and if your business&#x2F;product needs don&#x27;t change, then I would like to buy whichever crystal ball you&#x27;re in possession of).')