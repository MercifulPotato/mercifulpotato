Item(by='zzbzq', descendants=None, kids=[25071657, 25071926], score=None, time=1605197812, title=None, item_type='comment', url=None, parent=25070591, text='This is the common misconception&#x2F;defense of DI that drives me so cRaZy I&#x27;ve jumped to different languages. DI containers do NOTHING, NOTHING to make Dependency Inversion easier, nor does use of a DI container guarantee (as dozens of projects I&#x27;ve worked on prove) that DIP is correctly adhered to.<p>DIP is achieved precisely when the components (be they packages, projects, classes, types) are organized with the low-level modules depending on the high-level modules rather than vice versa. In English, this usually means the I&#x2F;O and any heavy framework code is kept out of the program logic.<p>What DI does do is confuse this matter. Class relationships which are mere IMPLEMENTATION DETAILS of a module are elevated alongside the actual component architecture of the program. The object graph becomes obscured. Program execution order becomes nondeterministic. The callstack is completely ruined, undoing decades of enlightenment since Dijkstra&#x27;s &quot;GOTO statement considered harmful.&quot; And all my experience with the pattern proves, the DI container causes programmers to not even evaluate or understand whether their dependencies are even inverted, because all classes and their relationships just become one amorphous blob floating aimlessly inside the container.')