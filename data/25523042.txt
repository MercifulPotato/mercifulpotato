Item(by='patrec', descendants=None, kids=[25524714], score=None, time=1608762682, title=None, item_type='comment', url=None, parent=25520600, text='You may believe so, but it&#x27;s not true. Let me explain. There are two somewhat different use cases for rebasing:<p>1. You want to do the equivalent of a merge without creating a merge commit, which is what I was mostly talking about when I was contrasting a merge based with a rebase based workflow. There is precisely zero difference in guarantees of things working or building or whatever between you rebasing or merging a branch into master. In fact, funnily enough, if you actually do testing&#x2F;CI correctly, issuing a &quot;git merge feature-branch&quot; command to land things in master will, with high likelihood do a rebase rather than creating a merge commit. This is because you will have pre-merged (or equivalently, as far as testing the right thins is concerned, rebased) master into your feature branch first. Because that&#x27;s the only way to actually test the right thing (the state of the code as it will be once it lands it master).<p>2. You can use rebase to (potentially wildly) rewrite individual commits (splitting them up, re-arranging or melding or editing them etc.) on your feature branch. This is not what I&#x27;m talking about, but, I have the feeling,  the thing you are actually objecting to. And yes, you can indeed mess up previously working commits this way. If you feel uncomfortable doing this, just don&#x27;t -- you can still use (and profit from) a purely rebase based workflow.[+]<p>[+] As an aside: there are ways of doing this type of rewriting that give you guarantees of working and building -- e.g. just run git rebase --exec &quot;make clean &amp;&amp; make test&quot; ... (each individual commit in the rebase is tested before landing and the rebase stops on anything that errors out)[++]. But as I mentioned, you can still get  all the benefits of a rebase-based workflow without ever engaging in this type of rebasing, and similarly you can have a fully merge-based workflow (for landing things in master) and people might still wildly rebase-to-rewrite their commits on their feature branches (and if they are not even pushed, who&#x27;s gonna stop them?). These things are really orthogonal. Also, whilst I agree that undisciplined rewriting of commits is a bad idea, and can mess up previously working non-HEAD commits, it should never  mess up the final commit on a feature branch undetected. Because you&#x27;re running CI, right?. And at the end of the day almost no workflow will run full tests&#x2F;CI on every commit (too expensive for anything but small projects), so broken &quot;intermediate&quot; commits can even happen without rebasing and if you do in fact run CI on every commit, well even undisciplined rebasing is perfectly safe.<p>[++] Also: I&#x27;d recommend preferring git commit --fixup to wildy messing about with git rebase -i on the fly.')