Item(by='mjb', descendants=None, kids=[25989179, 25989919, 25990692], score=None, time=1612190401, title=None, item_type='comment', url=None, parent=25988329, text='This is a very good list. Adrian&#x27;s blog is, particularly, a treasure.<p>I wrote this post a while ago, aiming to answer a similar question about finding paper: <a href="http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2020&#x2F;05&#x2F;25&#x2F;reading.html" rel="nofollow">http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2020&#x2F;05&#x2F;25&#x2F;reading.html</a> One key point there is that there are, in my mind, multiple &#x27;modes&#x27; of reading, and I like to use different approaches to finding material for different modes. Those blogs you list are great for curiosity mode. Another great resource there is Twitter: following distributed systems practitioners and researchers, and seeing what they tweet about. When I read a (recent) paper I really like, I often see if the authors are active on Twitter and follow them there if they are.<p>It&#x27;s also important not to weight too much on recency. A lot of the canon is actually more approachable than newer papers. For example, Lamport&#x27;s classic &quot;Time, Clocks&quot; (<a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;time-clocks-ordering-events-distributed-system&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;time-cl...</a>) and distributed snapshot (<a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;distributed-snapshots-determining-global-states-distributed-system&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;distrib...</a>) papers, and Gilbert and Lynch&#x27;s CAP paper (<a href="http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.67.6951&amp;rep=rep1&amp;type=pdf" rel="nofollow">http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.67....</a>) are approachable without deep background or systems knowledge. Similarly, John Little&#x27;s &quot;\nA Proof for the Queuing Formula: L = Î»W&quot; (<a href="https:&#x2F;&#x2F;pubsonline.informs.org&#x2F;doi&#x2F;abs&#x2F;10.1287&#x2F;opre.9.3.383" rel="nofollow">https:&#x2F;&#x2F;pubsonline.informs.org&#x2F;doi&#x2F;abs&#x2F;10.1287&#x2F;opre.9.3.383</a>) is quite approachable if you have a math background but no systems knowledge, and is one of the foundational results behind the practice of building stable systems.<p>I&#x27;ve got some longer-form dives into researcher&#x27;s work here: <a href="http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;03&#x2F;30&#x2F;lamport-pub.html" rel="nofollow">http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;03&#x2F;30&#x2F;lamport-pub.html</a> <a href="http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;09&#x2F;21&#x2F;liskov-pub.html" rel="nofollow">http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;09&#x2F;21&#x2F;liskov-pub.html</a>\n<a href="http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;05&#x2F;10&#x2F;lynch-pub.html" rel="nofollow">http:&#x2F;&#x2F;brooker.co.za&#x2F;blog&#x2F;2014&#x2F;05&#x2F;10&#x2F;lynch-pub.html</a><p>Finally, books. There are a couple recommendations for Martin Kleppman&#x27;s Designing Data-Intensive Applications book, which I like a whole lot. Alex Petrov&#x27;s &quot;Database Internals&quot; is also a very approachable introduction. I wish every practitioner in the field would read Harchol-Balter&#x27;s Performance Modeling and Design of Computer Systems.')