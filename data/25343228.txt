Item(by='hibbelig', descendants=None, kids=[25343282], score=None, time=1607417434, title=None, item_type='comment', url=None, parent=25342790, text='&gt; <i>I&#x27;m just not sure I actually understand how that distinction is supposed to be implemented by the &quot;semantic indentation&quot; style.</i><p>Given an expression such as (foo bar baz), semantic indentation examines foo to determine whether it is a macro or a function, and produces two different indentations depending on the result.<p>Fixed indentation always produces the same result, regardless of whether foo is a macro or not.<p>The &quot;semantic&quot; in the name refers to the deeper analysis required: If you see a &quot;defmacro&quot; somewhere then you have to remember that it is a macro.<p>(I think actually, it&#x27;s a bit more complicated.  Macros can have multiple arguments, and one is often special.  Look at the control structure &quot;when&quot;: it receives a condition and multiple &quot;statements&quot;, and when the condition is true all statements are executed, in order.  And semantic indentation knows this.  So you get this:<p><pre><code>    (when CONDITION\n      STMT-1\n      STMT-2)\n</code></pre>\nBut when you put the condition on an extra line, you get this:<p><pre><code>    (when\n        CONDITION\n      STMT-1\n      STMT-2)\n</code></pre>\nFixed indentation has no idea and produces the following hard-to-read thing instead:<p><pre><code>    (when\n      CONDITION\n      STMT-1\n      STMT-2)</code></pre>')