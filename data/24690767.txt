Item(by='adamkl', descendants=None, kids=None, score=None, time=1601924044, title=None, item_type='comment', url=None, parent=24689230, text='Honestly, I think this series of blog posts could have had a more complete title: &quot;Principals of Data Oriented Programming <i>(aka, Idiomatic Clojure)</i>&quot;<p>All of these ideas (and I think they are good ones) are inspired heavily by Rich Hickey&#x27;s talks and rational behind developing the Clojure language (the author of the post states as much). And while you <i>can</i> use these techniques in other languages&#x2F;paradigms&#x2F;problem domains, they are really intended to work well inside the constructs of Clojure, and when applied to &quot;information-driven situated programs&quot; [0] (read business applications with dynamic requirements).<p>As for some of the short-comings you mentioned:<p><i>&quot;But you still need a mechanism to manage mutating data&quot;</i><p>Clojure supports this through the use of locking constructs like atoms. [1]<p><i>&quot;I think what it&#x27;s getting at is that you don&#x27;t really know the precise type of your data, over time, in a distributed system, so it&#x27;s good to include the flexibility to handle that. That makes sense to me. but generic data structures aren&#x27;t necessarily always the right way to handle that.&quot;</i><p>Clojure attempts to bridge the gap between generic data-structures and strongly-typed constructs using run-time specifications. [2]<p>I mean, the ideas presented here can be generally useful, but your mileage may vary if the principals take you too far out of the idiomatic for your particular language&#x2F;paradigm&#x2F;problem domain. If that&#x27;s the case, you could find yourself wasting energy swimming up stream.<p>[0] - <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2V1FtfBDsLU" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=2V1FtfBDsLU</a>\n[1] - <a href="https:&#x2F;&#x2F;clojure.org&#x2F;reference&#x2F;atoms" rel="nofollow">https:&#x2F;&#x2F;clojure.org&#x2F;reference&#x2F;atoms</a>\n[2] - <a href="https:&#x2F;&#x2F;clojure.org&#x2F;about&#x2F;spec" rel="nofollow">https:&#x2F;&#x2F;clojure.org&#x2F;about&#x2F;spec</a>')