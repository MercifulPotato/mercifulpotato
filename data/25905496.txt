Item(by='beached_whale', descendants=None, kids=[25906161], score=None, time=1611593713, title=None, item_type='comment', url=None, parent=25904103, text='One nice thing about newer C++ is that you can write safer(in some sense) functions.  To a point.  constexpr&#x2F;consteval functions that are tested at compile time do not have UB and do not interact with global state.  This is enforced by the compiler. So building up from this, you get safer systems.  One cannot say they are safe though, as it is complicated.<p>This comes back to is the whole system safe, what do I trust, and how have I mitigated my mistakes(there are always mistakes).  No purported safe system will stop me from making logic errors in my conditionals.  They will stop an access outside a valid objects or ranges.  But C++ also has tools to mitigate this, is a for loop good here or should it be a function that works on a range and is tested properly.  Can I enforce my constraints in a type so that the compiler does the work for me.')