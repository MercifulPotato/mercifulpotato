Item(by='latch', descendants=None, kids=None, score=None, time=1606897577, title=None, item_type='comment', url=None, parent=25263488, text='I&#x27;ve read this before and I agree with it. As an elixir programmer, it frustrates me to be reminded of this article because it reminds me of the only thing I find torturous about programming in elixir.<p>Without a way to exit a function early, you either end up with deep nesting (which becomes hard to read&#x2F;follow after 2-3 levels), or a lot of small function calls to continue&#x2F;break. In many cases, you can use a `with &lt;-` but if the statement only returns a variable, you need to wrap it into a function (are have a hard-to-read guard clause, which will only work in some cases) to support matching:<p>Say `User.load` is out of your control and it returns nil | user.  I&#x27;d love to do:<p><pre><code>   user = User.load(id)\n   if user == nil do\n      return :not_found\n   end\n\n</code></pre>\nBut I have to either introduce nesting, or decrease the readability with either a guard or a function.<p>Guard:<p><pre><code>  # if we just let `nil` flow through to the `else` we won&#x27;t be able to tell this `nil` from another\n  with user when user != :not_found &lt;- User.load(id) || :not_found  \n</code></pre>\nFunction:<p><pre><code>   with {:ok, user} &lt;- get_user(id) \n     ...\n\n\n   defp get_user(id) do\n     case User.load(id) do\n        nil -&gt; :not_found\n        user -&gt; {:ok, user}\n     end\n   end</code></pre>')