Item(by='favorited', descendants=None, kids=None, score=None, time=1604458578, title=None, item_type='comment', url=None, parent=24947911, text='Since Swift strives for clarity at the call-site, you will definitely still have that property.  Readers will know it&#x27;s async because it will say `let x = await loadContent()` (the same way they know it could return an error because it has to start with `try`).<p>If, rather, you&#x27;re looking at the function <i>definition</i>, you already need to read the whole thing.  You need to read what the parameters are, whether or not it throws, what its return type is, etc.  So putting the effects (like throwing or async) after the name makes it IMO much more scannable.  Because the first thing I want to know is the name.  I only care about those implementation details once I know I&#x27;m looking at the right thing.<p>There&#x27;s also no universal consistency between languages.  Rust put `.await` after the function invocation rather than as a prefix keyword.  C++ used `co_async` and `co_await` as the keywords to avoid breaking lots of people&#x27;s code.  Swift should put the keyword where it makes sense from a consistency standpoint with Swift, which in this case is with `throws`.')