Item(by='dathinab', descendants=None, kids=None, score=None, time=1608615942, title=None, item_type='comment', url=None, parent=25501175, text='I can&#x27;t really agree to this. Through without questions there are always things you should not split out.<p>Splitting a functions which consists of multiple logical steps is most times a good idea because it makes testing much simple and tends to show you where you accidentally had subtle cross-cutting concerns or unintended cross-talk between sub-domains (domains in sense of modelling, not http).<p>What is important is to properly name functions (and if you can&#x27;t you probably shouldn&#x27;t write that function).<p>Also it&#x27;s important to learn how to live with abstraction, i.e. to reason about code wrt. a specific problem without needing to jump into the implementations about every function &#x2F;method it calls.<p>Through the later point is much easier with a reasonable use-full type system. And with this I mean useful for abstraction without making abstraction to hard and without allowing to many unexpected things. Languages like rust or scala have such a type system (as long as you don&#x27;t abuse it) but e.g. C++ fails this even through it has a powerful type system.<p>At least this are is opinion.<p>And without question if you can&#x27;t cleanly split something out, then don&#x27;t split it out. If you can split it out but not name it reasonable either your understanding it lacking or it should never have been split out.')