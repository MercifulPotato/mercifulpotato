Item(by='dillondoyle', descendants=None, kids=[25718948], score=None, time=1610232044, title=None, item_type='comment', url=None, parent=25699411, text='sure.<p>- basic js generates a css file with a random uuid and an example just my name. puts into a css var as a JSON object<p>- sets long term cache headers AND a matching etag (same as uuid)<p><pre><code>   - etag is a classic tracking trick but this is really cool it makes it accessible as state in JS client side\n</code></pre>\n- index.html prints&#x2F;logs the css var<p>- if css file is cached the uuid you see is static. no cookies needed<p>- i was also going to add just an array of recent request domains, last and first session. would help test the chrome cache keying. could even put a jwt in there<p>it&#x27;s just a cool hack I never thought of. it&#x27;s really cool how one thing can trigger an &#x27;omg that&#x27;s so obvious&#x27; brain fart.<p>Like even before CSS vars you could have done this just set really specific css width 12.999933&#x2F;122.3333 or something then measure the div you set or maybe simpler just a random &quot;&#x27;uuid_&quot;+the_uuid_var+&quot;&#x27;&quot; classname add to body and then read if it exists with js. But I never thought of it until I saw this article!!! Same with just generating a JS file with static var which I&#x27;ve played with but never deployed. though I might guess a css file is cached longer? idk i don&#x27;t have proof of that just a guess could be wrong<p>could maybe extend this to get around chrome cache keying with cname cloaking *edit actually maybe more likely that doesn&#x27;t make sense idk i&#x27;d have to think about it<p>or just reading their docs last night about their new policy (only a couple months old) it looks like webworkers aren&#x27;t enforced yet and you can explicitly control &amp; cache a file with JS in a webworker')