Item(by='jlokier', descendants=None, kids=[25914376], score=None, time=1611607246, title=None, item_type='comment', url=None, parent=25893753, text='I guess I know, as this is what I found when I googled just now :-) <a href="https:&#x2F;&#x2F;linux-scsi.vger.kernel.narkive.com&#x2F;yNnBRBPn&#x2F;o-direct-and-barriers#post3" rel="nofollow">https:&#x2F;&#x2F;linux-scsi.vger.kernel.narkive.com&#x2F;yNnBRBPn&#x2F;o-direct...</a><p>I was trying to address this aspect of the parent comment:<p>&gt; O_DIRECT is the only safe way to recover from the journal after fsync failure (when the page cache can no longer be trusted by the database to be coherent with the disk)<p>O_DIRECT is not a safe way to recover from the journal if you have decided you cannot trust fsync to do its job, because you need fsync to make O_DIRECT write-cache durable.<p>(By the way, O_SYNC&#x2F;O_DSYNC are equivalent to calling fsync&#x2F;fdatasync after each write, therefore subject to some of the same issues.)<p>But even in normal situations with fsync working fine, it is not clear if you can rely on fsync to do a drive write-cache flush when there <i>isn&#x27;t</i> any metadata or page cache data for the file because you&#x27;ve only been using O_DIRECT.<p>Neither open(2) or fsync(2) man pages address this durability issue.  You can&#x27;t use O_DSYNC or O_SYNC for good throughout with O_DIRECT because your database does not want the overhead of a write-cache flush on every write.  You only want it for barriers.  And you can&#x27;t rely on fdatasync because there&#x27;s no data to flush in the page cache, no block I&#x2F;O to do, so fdatasync could meet expectations by doing nothing.<p>My solution in the past has been to toggle the LSB in st_mtime before async <i>just</i> to force a drive write-cache flush when I&#x27;m not sure that anything else will force one.  It&#x27;s not pretty.')