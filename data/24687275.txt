Item(by='unwind', descendants=None, kids=None, score=None, time=1601902350, title=None, item_type='comment', url=None, parent=24685772, text='This is sound advice for sure, and I think it applies much more broadly (or do I mean deeply?) than just for databases.<p>For instance, one micro-application of it that makes a lot fo sense to me is the const-ness of variables in languages like C. Since a normal variable can be overwritten, and that affects the use and semantics of that variable, marking them as const whenever possible really helps in my opinion.<p>For instance, take this micro-snippet of code from Redis [1]:<p><pre><code>    int time_independent_strcmp(char *a, char *b) {\n        char bufa[CONFIG_AUTHPASS_MAX_LEN], bufb[CONFIG_AUTHPASS_MAX_LEN];\n        &#x2F;* The above two strlen perform len(a) + len(b) operations where either\n         * a or b are fixed (our password) length, and the difference is only\n         * relative to the length of the user provided string, so no information\n         * leak is possible in the following two lines of code. *&#x2F;\n        unsigned int alen = strlen(a);\n        unsigned int blen = strlen(b);\n        unsigned int j;\n        int diff = 0;\n</code></pre>\nHere, it seems quite important that the values of &#x27;alen&#x27; and &#x27;blen&#x27; do not change during the execution of the function, since it&#x27;s iterating over them. The &#x27;diff&#x27; variable on the other hand is intended to change as a function of all the characters in both strings, that&#x27;s the whole purpose of the function.<p>So, I think the middle two lines should be:<p><pre><code>    const size_t alen = strlen(a);\n    const size_t blen = strlen(b);\n</code></pre>\nThat &quot;locks&quot; the values in, so you know that for the rest of the function at least these two values stay the same. Since changing either length mid-function would represent an invalid state, I think this is close to the OP&#x27;s point.<p>Also please note that I have massive amounts of respect for Redis and Antirez, I&#x27;m not trying to say that the code is bad or anything, it was simply the first file in the first high-profile open source project that came to mind. Obviously this code <i>works</i> and has probably been more tested than most things I&#x27;ve written, again I&#x27;m NOT trying to somehow paint that program(mer) in a bad light.<p>Btw, changing the type (to me) to size_t is also an obvious, free, improvement since it frees the reader from having to worry about why the type was unsigned int to begin with. Also &#x27;int&#x27; can be less wide than &#x27;size_t&#x27;, which again is probably not a problem <i>in practice</i> since the CONFIG_AUTHPASS_MAX_LEN is probably always going to be even less, but still. It&#x27;s pointless complexity that triggers anxiety in people like me. :)<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;unstable&#x2F;src&#x2F;acl.c" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;unstable&#x2F;src&#x2F;acl.c</a>')