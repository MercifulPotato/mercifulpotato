Item(by='Jach', descendants=None, kids=None, score=None, time=1609993296, title=None, item_type='comment', url=None, parent=25664647, text='In Java, all the time, because your code is forced into classes, and restarting a program of any non-trivial size for every minor change sucks. The default experience isn&#x27;t very good when it comes to hotswapping changes, you&#x27;re basically limited to editing existing method bodies. JRebel eventually came on the scene to do a lot better and it&#x27;s magical, it can even handle a bit of re-initialization for Spring beans or making changes in code based on changes in XML files, etc. It has by itself saved me <i>days</i> of waiting on app restarts, now multiply that by a couple thousand other devs in just one company and it&#x27;s a no-brainer. (Or should be -- such logic taken seriously ought to have made interactive development championed by Lisp more popular decades ago instead of decades later having other languages with suped up IDEs and plugins slowly rediscovering the benefits.)<p>But JRebel is still fundamentally an incomplete solution because of the way it handles (or fails to handle) existing instances. In practice you learn to live with it, designing for more static methods or short-lived objects so the next time a code path runs it&#x27;ll be with new objects and new code, or you bite the restart bullet for the times when you have a long-lived object that you need to change and it&#x27;s important that it uses the new code and data. Those times are typically rarer, admittedly, and so most of the benefit is captured by being able to redefine classes and methods (and functions in Lisp) more-so than updating existing instances, but it&#x27;s great that Lisp supports the latter when you need it.')