Item(by='segfaultbuserr', descendants=None, kids=[25388735, 25387913], score=None, time=1607699511, title=None, item_type='comment', url=None, parent=25385860, text='&gt; <i>Why does Linux have so much trouble sleeping and waking? </i><p>To successfully suspend and resume a laptop, BIOS&#x2F;UEFI and <i>all</i> drivers in the system, e.g. GPU, network, audio, USB, must have perfectly working power management code, a single bug in a driver is enough to prevent the entire system from sleeping.<p>&gt; <i>[...] I&#x27;ve had Macs and PCs which don&#x27;t seem to suffer from the same issue.</i><p>Macs and PCs are fully tested by the vendor with all driver issues fixed before they are shipped - if they can&#x27;t wake up, it&#x27;s vendor&#x27;s problem. On the other hand, if a laptop does not offer explicit Linux support, they are not tested at all. Linux developers are left on their own to figure it out. Worse, for some types of hardware, documentation is often lacking or nonexistent (OEMs have internal support from all device vendors). By saying &quot;on their own&quot;, I really mean it - I&#x27;ve <i>personally</i> diagnosed and fixed a driver issue in the Linux kernel for my laptop, despite not being a kernel developer. If you have a popular machine, someone else will eventually fix it. But if you have an unique machine, sometimes there&#x27;s really nobody that would do it for you.<p>By far, the most notorious suspended&#x2F;wakeup problem I&#x27;ve ever encountered was on a Windows tablet. Once the machine is suspended (ACPI S3), it&#x27;s impossible to wakeup the machine again. After a long thread in the Linux bugzilla, ultimately the problem was identified - a developer disassembled the ACPI DSDT from BIOS, and discovered this scandal.<p><pre><code>    Device (PWRB)\n    {\n        &#x2F;*\n         * Power Button Device.\n         * _PRW: Power Resources for Wake.\n         *&#x2F;\n        Name (_HID, EisaId (&quot;PNP0C0C&quot;)\n        Method (_PRW, 0, NotSerialized)\n        {\n            Return (Package (0x02)\n            {\n                0x00, \n                0x00\n            })\n        }\n    }\n</code></pre>\nYes, it means what you think it meant, even if you don&#x27;t speak ACPI.<p><pre><code>    power_button_wakeup() {\n        return 0;\n    }\n\n</code></pre>\nThere&#x27;s <i>literally</i> no code in BIOS to wakeup the system from ACPI S3, the only instruction is &quot;return 0&quot;, it&#x27;s not implemented at all!<p>Why does it work in Windows then? In Windows, it uses Microsoft InstantGo (ConnectedStandy) - a proprietary Microsoft standby mode with network connection (to allow smartphone-like &quot;push notification&quot;). The vendor decided that implementing industry standards are not necessary - you only need to implement Microsoft - and simultaneously, they also decided that, rather than simply saying ACPI S3 is not supported, you should define a broken ACPI S3 just to screw up everyone who is not using Microsoft Windows.')