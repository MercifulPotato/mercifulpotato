Item(by='lolinder', descendants=None, kids=None, score=None, time=1609909539, title=None, item_type='comment', url=None, parent=25652175, text='I found serialization of typesafe IDs trivial in Kotlin with Jackson. We have a single generic supertype that has the correct annotation to tell Jackson to use the `value` field as the serialized value, and defines helpful methods like equals. Each new ID type is defined as a single line of code, simply inheriting from this base ID type and providing the actual underlying type (int, string, uuid).<p>Validators likewise are a non-issue. Jackson handles that automatically during the underlying type conversion, and Java won&#x27;t allow you to construct a UUID that is invalid.<p>I see explicit conversion between types as a pro, not a con. If I&#x27;m going to take one ID and try to use it as an ID for a different type of entity, I&#x27;d better have a very good reason.<p>Again, I did this with a specific set of tools, but the functionality I used should be available in pretty much any language and serialization framework.')