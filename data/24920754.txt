Item(by='scottlamb', descendants=None, kids=[24922994], score=None, time=1603902595, title=None, item_type='comment', url=None, parent=24914172, text='Seems reasonable, but as you might have seen, rossjudson did accidentally-ish go to a lower layer: he wrote &quot;never &#x27;borg&#x27; when you meant to &#x27;borgcfg&#x27;&quot;. And you&#x27;re still relying on someone actually looking at the graph in their face which isn&#x27;t as sure a thing as it&#x27;d be if they had to echo something back as Rachel is advocating for.<p>(For the benefit of non-Googlers&#x2F;Xooglers: borg is a lower-level tool mostly used when everything else has gone wrong and borgcfg is a higher-level, more routine tool. These days people often layer things on top of that as well, because we love piling up abstraction layers. This approach is completely successful because abstraction layers never leak and solve every problem without making anything hard to debug at all. &#x2F;s)<p>In my ideal world, even the lowest layer a human ever uses would do safety checks by default. Eg, imagine if the job specification included &quot;query this safety check service on change&quot; and the borg tool (as part of querying the existing job on a cancel&#x2F;rm command) discovered that and honored it. Most people&#x2F;jobs would use a safety check that fails taking down a job unless the load balancer reports all relevant services have that job drained. The safety check service could also specify a confirmation prompt (similar to what Rachel is advocating) that could be customizable (like qps or percent of global capacity rather than just number of tasks). The safety check would be effective no matter what layer you use, and there&#x27;d be no good reason to use one that would cause prompt fatigue. The outage rossjudson described (and I know he&#x27;s not the only one who has done exactly this!) would have been avoided.')