Item(by='mikepurvis', descendants=None, kids=None, score=None, time=1607722895, title=None, item_type='comment', url=None, parent=25390565, text='I&#x27;ve been doing ROS professionally for ten years and have presented twice at ROSCon. I would argue that part of the difficulty with this is that ROS is many different things to different people. I&#x27;m a low level platform&#x2F;OS&#x2F;firmware guy, so I tend to care most about the build system, dependency management, the relationship with the host OS, the standardized sensor messages, and the approach to logging (rosbag).<p>People in the perception space may care more about all the standard camera drivers, the publicly available SLAM datasets, and the zero copy nodelet system for passing image date through a pipeline.<p>People in controls care about the simulator integration, and the flexibility of move_base and its successors through a rich plugin system.<p>Then there are people doing stuff with manipulators, people doing realtime industrial stuff, people doing quadcopters, people doing academic research, people trying to build a product, people doing web frontends.<p>It&#x27;s a lot of use-cases, so it&#x27;s hard to recommend any one &quot;getting started&quot; path because it depends a lot what your interests are and your expected end goal. But generally speaking a safe option is to get a robot like Turtlebot up in the simulator, get it map-making and navigating autonomously, and then start mutating thatâ€” add more sensors to it, or write your own planner, or make an rviz plugin that does something interesting, etc. Maybe swap out gmapping for cartographer, or set it up to explore on its own.<p>These kinds of tasks will familiarize you with a lot of the tools that <i>almost every</i> ROS person uses, so that you&#x27;ll have more of a sense of what the potential next steps are.')