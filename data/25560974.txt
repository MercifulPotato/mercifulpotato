Item(by='Blikkentrekker', descendants=None, kids=[25561257, 25561156, 25561853, 25561221], score=None, time=1609175961, title=None, item_type='comment', url=None, parent=25560548, text='To me, the major major unsung pain point with <i>Haskell</i> and any non-strict language that makes it unsuitable for most applications is it&#x27;s inability to use dynamic libraries as we&#x27;re all used to.<p>For an <i>Haskell</i> implementation to have any efficiency, it must re-order the order of execution inside of function calls as it sees fit, which it can do due to the non-strict semantics. This is fine in theory, but dynamic libraries aren&#x27;t built on that assumption; they&#x27;re, naturally, built upon the idea that they are a black box and that the consumer simply calls the function, obtains the result, and does not care nor has access to the insides.<p>A <i>Haskell</i> implementation must have knowledge thereof, thus, the practical effect is that with Haskell it&#x27;s impossible to, say, fix a security problem in a dynamic library and simply have all consumers seamlessly benefit from that fix — every consumer must be recompiled with the new library&#x27;s source.<p>And this problem is very seldom raised in discussions — dynamic libraries are fundamentally designed on the assumption of strict semantics.')