Item(by='Shank', descendants=None, kids=[25482469], score=None, time=1608400353, title=None, item_type='comment', url=None, parent=25478184, text='If you view GitHub as a static infallible source, then yes -- your analysis is correct. But there are gaps anywhere. If you want perfect 1:1 mappings between source, the developers who make it, and the end builds, you essentially need a &quot;chain of trust&quot; that can be tested at every stage. For example: are all developers pushing code with encrypted SSH keys? Are the commits signed? Are the signing keys hardware backed? Does CI check the signatures? Is the CI server up to date? Are all packages on the CI server signed and trusted? Are all stages of the build pipeline testable for tampering and tamper-proof? You&#x27;re not curling or apt-getting or running npm anywhere in your build server for some kind of Slack integration, right? The list goes on.<p>The issue is that most developers view &quot;the code pipeline&quot; as a trusted and complete system, for the most part. In the vast majority of cases, that&#x27;s okay. The issue is that SolarWinds should have known, based on their very own customer list, that they were in an advantageous position in many organizations that are valuable targets. That should have _caused_ all of this thinking to happen, and led to changes internally to accommodate the new risk. That threat modeling&#x2F;analysis either didn&#x27;t happen, or the outputs weren&#x27;t good enough.')