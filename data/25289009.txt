Item(by='rkhaitan', descendants=None, kids=[25291693], score=None, time=1607005112, title=None, item_type='comment', url=None, parent=25285789, text='(Disclaimer: I&#x27;m one of the engineers at Materialize)<p>&gt; for example, max and min aggregates aren&#x27;t supported in SQL Server because updating the current max or min record requires a query to find the new max or min record<p>This isn&#x27;t a requirement in Materialize, because Materialize will store values in a reduction tree (which is basically like a min &#x2F; max heap) so that when we add or remove a record, we can compute a new min &#x2F; max in O(log (total_number_of_records)) time in the worst case (when a record is the new min &#x2F; max). Realistically, that log term is bounded to 16 (it&#x27;s a 16-ary heap and we don&#x27;t support more than 2^64 records). Computing the min &#x2F; max this way is substantially better than having to recompute with a linear scan. This [1] provides a lot more details on how we compute reductions in Materialize.<p>&gt; there are obviously limits to what can be efficiently maintained<p>I think we fundamentally disagree here. In our view, we should be able to maintain every view either in linear time wrt the number of updates or sublinear time with respect to the overall dataset, and every case that doesn&#x27;t do so is a bug. The underlying computational frameworks [2] we&#x27;re using are designed for that, so this isn&#x27;t just like a random fantasy.<p>&gt; if Materialize has a list of constraints shorter than SQL Server&#x27;s then you&#x27;re sitting on technology worth billions<p>Thank you! I certainly hope so!<p>[1]: <a href="https:&#x2F;&#x2F;materialize.com&#x2F;robust-reductions-in-materialize&#x2F;" rel="nofollow">https:&#x2F;&#x2F;materialize.com&#x2F;robust-reductions-in-materialize&#x2F;</a>\n[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;timelydataflow&#x2F;differential-dataflow&#x2F;blob&#x2F;master&#x2F;differentialdataflow.pdf" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;timelydataflow&#x2F;differential-dataflow&#x2F;blob...</a>')