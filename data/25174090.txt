Item(by='kmill', descendants=None, kids=None, score=None, time=1606008489, title=None, item_type='comment', url=None, parent=25173911, text='Right, that&#x27;s what I am getting at. If it is as good as automatic, why make a mathematician do the transformation themselves?  Why make them look at and manipulate all the transformed statements when they&#x27;re working out a tactic proof?<p>Whether or not a proposition is constructive is not something I&#x27;ve ever heard any mathematicians in my department ever worry about.  I have only ever heard about, for example, showing a certain bound was &quot;effective&quot; after showing that there was a bound at all.  Effective means that there is some procedure to construct the number -- but no one cares about whether the argument that shows this number is an upper bound is itself constructive.  Lean with its Prop, Type 0, Type 1, ... universe hierarchy is sort of well suited for this.<p>I&#x27;m sure that there <i>are</i> interesting questions that hinge on constructibility in a proof, but again, mathematicians I talk to have never seriously thought about these things.  In my field (topology), we do worry about constructing objects and invariants (and sometimes we even care about the complexity class), but at the proof level everything is classical.<p>If you&#x27;re involved in developing proof assistants and you want mathematicians to use it, then I would suggest making it so you can change the &quot;reasoning monad&quot; in a file.  If you put it in classical mode, it should look like you&#x27;re able to use LEM, etc., and the goal window should show only untransformed statements, but then when outside the classical monad a constructivist would see the transformed statements.  This would be sufficiently ergonomic.')