Item(by='cbsmith', descendants=None, kids=None, score=None, time=1603485561, title=None, item_type='comment', url=None, parent=24872705, text='Again, I think this is based on some starting assumptions about what is an ideal state, and a lot of people would argue they are flawed assumptions. It&#x27;s easy to get trapped into a context when considering what the ideal solution would look like.<p>People forget this, but ASCII (and therefore UTF-8) already has characters in it for field&#x2F;record&#x2F;etc. separation. One increases complexity <i>significantly</i> (and introduces inefficiency) by overloading other characters with their semantics.<p>There are much more simple &amp; efficient ways to demarcate ordered arrays in particular (e.g. simple length prefixed structures).<p>Nulls are highly problematic for any number of reasons that are widely documented, and JSON unfortunately compounds this by having two ways of representing them (explicitly and by omission).<p>One might quibble with the notion that a format that didn&#x27;t even exist in 2000 doesn&#x27;t really have two decades worth of applications working on it, but setting that aside, the design constraints of JavaScript and the challenges that have emerged from it are far from ideal. The work arounds that have emerged (the whole Number fiasco, the &quot;standardizing&quot; on UTF-8 while using UTF-16 when escaping, line terminators, the backslash escapign of control characters, the inconsistencies between JSON &amp; JSONP, the binary64 &quot;good interoperability&quot; rule, and comments being disallowed, and of course the various JSON Schema efforts).<p>While I agree that an ideal serialization standard would not have versioning, and Crockford&#x27;s decision to avoid JSON versioning might consequently seem to make good sense... in practice this has lead to significant inconsistencies between implementations, many of which lead to interoperability problems that could at least be somewhat mitigated by versioning. (<a href="http:&#x2F;&#x2F;seriot.ch&#x2F;parsing_json.php" rel="nofollow">http:&#x2F;&#x2F;seriot.ch&#x2F;parsing_json.php</a>)<p>&quot;Fixing&quot; a bad abstraction by layering on a bad abstraction is a common house of cards meme. It is highly problematic to say the least. It&#x27;s how &quot;simple&quot; JSON rapidly evolves to be at least as complex (and at least as error prone) as ASN.1.')