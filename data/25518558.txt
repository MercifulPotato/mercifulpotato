Item(by='tw25513397', descendants=None, kids=None, score=None, time=1608737431, title=None, item_type='comment', url=None, parent=25515861, text='Hey, thanks for replying!<p>&gt; But in a nutshell if something is pure it should support substitution.<p>Neat, hadn&#x27;t thought about it like that before.<p>&gt; If you substitute x into the body of y you get a different result!<p>Heh, I guess that depends on &quot;which&quot; x. I recognize Flix doesn&#x27;t allow shadowing as a defensive choice, but with respect to substitution, wouldn&#x27;t this be equivalent to something like:<p><pre><code>    let x = [1, 2, 3]\n    let x = insert(0, 5, x) # treating it like Map [1]\n    let y = get(0, x)\n</code></pre>\nIOW, it&#x27;s not clear to me why the `x[0] = 5` step would be skipped when considering substitution. Hmm, per the substitution principle, is `x[0] = 5` pure?<p>&gt; We are very conservative and say that anything which touches an array is impure.<p>Understandable given how difficult it is to reason about mutable things.<p>----<p>[1] Given the uniform function call syntax, I found it odd that the map is the last arg in the function. I originally assumed it would be m.insert(k, v) === insert(m, k, v)')