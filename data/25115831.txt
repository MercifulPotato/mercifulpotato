Item(by='Twisol', descendants=None, kids=[25116085], score=None, time=1605554476, title=None, item_type='comment', url=None, parent=25115664, text='&gt; The simplest explanation of DDD gaining more and more popularity is that itâ€™s a dead-simple pattern that in most cases leads to significant improvements in one of the hardest and most painful areas of programming - code maintainability.<p>I&#x27;m not sure I&#x27;d call it &quot;dead-simple&quot;. I agree with the thrust of the article, but the difficulty of DDD is proportional to the difficulty of understanding your domain and the problem you&#x27;re solving. DDD at its essence isn&#x27;t really about the code; I think that makes many software engineers (including myself at first) uncomfortable.<p>There&#x27;s no free lunch -- DDD is just a (really good) approach to extracting as much knowledge as you can from the domain, with some guidelines for manifesting that knowledge in the architecture of your program. But it&#x27;s important not to confuse the coding guidelines for the domain modeling.<p>The problem domain I&#x27;m working in has been difficult to get a handle on, because some things have been traditionalized or operationalized to the point that it&#x27;s sometimes hard to find someone who knows <i>why</i> the domain is how it is. (I&#x27;m not saying those people don&#x27;t exist; but they&#x27;re less easy to reach.) It&#x27;s taken nearly a year for the team I&#x27;m on to build up a sufficient domain model. It was anything but &quot;dead simple&quot;. Worth it, though? <i>Absolutely.</i> But it&#x27;s likely to be hard going unless you&#x27;re already domain experts.')