Item(by='tialaramex', descendants=None, kids=None, score=None, time=1608268487, title=None, item_type='comment', url=None, parent=25458782, text='Note that WebAuthn (the standardized replacement for U2F, you should not deploy U2F today) is <i>deliberately</i> designed to authenticate to the site you&#x27;re actually visiting. It is possible (but not necessarily in all browsers) to override this and authenticate to an iframe for example to allow a third party to authenticate but this creates yet a further problem to deal with:<p>Now you&#x27;ve got WebAuthn&#x27;s anti-phishing protection for the actual login, but that protection extends no further. As the native authentication of a site (e.g. Google, GitHub, Facebook) that&#x27;s fine. But for a third party helper that&#x27;s a problem.<p>Say I intend to visit my hypothetical WebAuthn enabled bank. If I go to <a href="https:&#x2F;&#x2F;fake-bank.example&#x2F;convincing-phishing-page&#x2F;" rel="nofollow">https:&#x2F;&#x2F;fake-bank.example&#x2F;convincing-phishing-page&#x2F;</a> there is no way for them to get my real-bank.example credentials. The browser vendor is responsible for making sure this is true.<p>But now suppose they use &quot;Super Tokens&quot; instead, and I protect my &quot;Super Tokens&quot; with WebAuthn. I go to <a href="https:&#x2F;&#x2F;fake-bank.example&#x2F;convincing-phishing-page&#x2F;" rel="nofollow">https:&#x2F;&#x2F;fake-bank.example&#x2F;convincing-phishing-page&#x2F;</a> and the bad guys who run it only need to fool &quot;Super Tokens&quot; into giving them a working token for my real bank. I authenticate with WebAuthn <i>to Super Tokens</i> and so that&#x27;s working fine, but any flaws in the Super Tokens backend or implementation, out of my control, put me at risk. Not great news.<p>And this has already happened (as proof of concept anyway), to existing players in the space. It&#x27;s categorically less safe to do this.')