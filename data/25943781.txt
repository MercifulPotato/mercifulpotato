Item(by='pdimitar', descendants=None, kids=[25952517], score=None, time=1611849233, title=None, item_type='comment', url=None, parent=25943590, text='&gt; <i>What plethora of problems are you referring to btw?</i><p>- Haskell: literal hundreds of possible combinations of compiler variants. Immediate turn-off.<p>- Haskell: several String types. I understand the lazy &#x2F; non-lazy distinction but I can&#x27;t understand why in 2021 you have C strings and UTF8 strings separately. I am not seeing much Haskell adoption in embedded contexts where every byte counts. Felt like a meaningless academic pursuit and not a practical concern.<p>- OCaml: lack of actual parallelism. I am following the Multicore OCaml monthly reports but at this point I accepted that it&#x27;s best to just wait for OCaml 5.0 which promises it will have Multicore baked in (earliest timeline: end of 2021, so I don&#x27;t know likely mid-2022?). Also I don&#x27;t like the mixed paradigms. Even if I would appreciate using a `for` loop every now and then I think I shouldn&#x27;t be given that freedom. But that last one is a minor gripe actually.<p>- OCaml: strings again. Having UTF-8 strings there is a challenge. In 2021 there is absolutely no excuse to introduce friction on such topic. UTF-8 strings must exist. I know I can use the libiconv bridge and it&#x27;s not what I am talking about. I am talking first-class support.<p>- Haskell and OCaml tooling felt behind excellent tools like `mix` (Elixir) and `cargo` (Rust) but I hear that they are constantly improving and are easier and more intuitive these days. Hope my impressions are outdated there!<p>There were others but I only managed to remember those above.')