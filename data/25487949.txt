Item(by='karlicoss', descendants=None, kids=None, score=None, time=1608485741, title=None, item_type='comment', url=None, parent=25486800, text='I guess, by %-syntax, you mean templace strings, something like logging.info(&#x27;logging object %s&#x27;, obj)? (as opposed to the &#x27;old&#x27; printf-style formatting with % operator)<p>This is a fair concern, but in my personal experience, that was never an issue in Python. Sometimes I had similar problems in c++ code, but then typically if you choose c++, it&#x27;s probably for the very reason you expect to squeeze every last bit of performance.<p>Another potential benefit of pattern strings is that they allow for more defensive behaviour<p>- e.g. imagine __str__ method for obj throws the extension, then f&#x27;logging object {obj}&#x27; will crash immediately. logging.info(&#x27;object %s&#x27;, obj) can catch the exception from __str__, log it, and continue<p>- or imagine a typo in the logging pattern, something like logging.info(&#x27;objects %s %s&#x27;, obj1). Depending on the logger configuration, it might just log the error (e.g. &#x27;missing value&#x27;) and carry on without crashing.<p>Such defensive behaviour may or may not be desirable, of course. In my experience, such errors just never happen (especially the latter, if you use f-strings and mypy, most of these can be statically checked). But YMMV')