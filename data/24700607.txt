Item(by='jka', descendants=None, kids=None, score=None, time=1602007342, title=None, item_type='comment', url=None, parent=24699615, text='This is really great stuff, as usual from Ink &amp; Switch.<p>One initial thought that I&#x27;d offer is that in a simple running system, these &#x27;lenses&#x27; are arranged into a series[1] that can take a datastructure from an origin &#x27;base&#x27; version all the way through to the latest-known representation.  This may be more familiar to most developers as an analogy to database migration scripts, as mentioned in the post.<p>When a new lens is created, the developers may want to distribute it to a subset of users, ensure that it works correctly, and potentially adjust it based on feedback before issuing the final lens to the application&#x27;s population[2].<p>If this is the intended release workflow, then the arrangement of lenses becomes a graph or chain rather than a simple series.  There may be times where it&#x27;s necessary to backtrack briefly.<p>It&#x27;s <i>possible</i> (although hacky, I will admit) to create an NPM JavaScript module that has <i>another version of itself</i> as a dependency.<p>I mention that because this provides a way to distribute some code -- a lens, for example -- alongside a dependency graph using an ecosystem that is relatively well-evolved (in terms of release management, client upgrade support, etc) for versioned code distribution.<p>[1] It&#x27;s nice the that analogy with light passing through a series of lenses fits<p>[2] Think of an optician testing your eyesight and asking questions about various sample lenses')