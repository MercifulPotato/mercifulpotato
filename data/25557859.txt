Item(by='Geminidog', descendants=None, kids=None, score=None, time=1609147307, title=None, item_type='comment', url=None, parent=25556518, text='&gt;This is where you lose me, I&#x27;m not sure I understand what you mean here. Abstraction is a design principle, and developers argue constantly about whether a given abstraction is good or necessary. The motivation behind abstraction as a principle hinges on how you define &quot;too complex&quot;, and that sounds very subjective to meâ€”the opposite of formal.<p>It&#x27;s subjective because it still exists in the realm of design. Once we formalize these notions the definitions become more clear. The key is formalization of fuzzy words. The definition of complexity is subjective yet there is a shared definition that we all agree on hence we won&#x27;t be able to communicate. The key is pinpoint the exact shared metric that causes us to consider one piece of code more complex than another piece of code. Not an easy task. Formalization is very much a deep dive into our internal and linguistic psychology.<p>Take for example &quot;luck.&quot; The concept of luck was formalized into a whole mathematical field called probability. Again not an easy task but doable for even fuzzy concepts like luck.<p>&gt;Not explicitly, perhaps, but it really does read like that is what you&#x27;re implying. You said multiple times that anyone labelled as an architect or designer knows nothing and is peddling bullshit. If we can agree that design is amenable to scientific inquiry, then it would make sense that some designers do know things.<p>Maybe a better way to put it is like this: Many design principles are bullshit simply because we don&#x27;t know whether two opposing design principles are better or worse. There&#x27;s a lot of rules of thumb that happen to work but there&#x27;s a lot of stuff that&#x27;s pure conjecture and unproven and even stuff that doesn&#x27;t actually work. For example OOP was previously the defacto way of programming, now it&#x27;s a highly questioned as a methodology. It brings all the &quot;experts&quot; who promoted it as the one true way into question.<p>Additionally if you meet someone with the title &quot;Architect&quot; a better title for them is &quot;Technical Manager&quot; because that&#x27;s what they actually are. The title &quot;Architect&quot; implies that they have specialized formal knowledge when they in fact are usually just managers with more experience. Really that&#x27;s the only difference, any typical engineer, holding all other things equal has pretty much the exact same informal knowledge that an architect has, after all it&#x27;s all informal anyway.<p>&gt;Are you implying that when it comes to software, we do have a choice?<p>I&#x27;m saying what you already know. We do have a choice to move software in the direction of formalized methods for things labeled as &quot;design&quot; no such choice exists for art.')