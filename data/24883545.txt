Item(by='zzo38computer', descendants=None, kids=[24883552], score=None, time=1603594840, title=None, item_type='comment', url=None, parent=24867103, text='It look like good (including there are some good features that I do not see in other implementations), although there are some things which may help:<p>- Support ISO-8859-1 encoding (true ISO-8859-1 encoding, not Windows-1252) in addition to UTF-8, for all of the functions that can read text from files and write text to files, to avoid having to implement it by yourself one byte at a time. This is useful when you want text which is mostly ASCII, but which may contain extended characters that aren&#x27;t Unicode. (There is no need to support any other character sets or encodings, though.)<p>- Document the C API better. Currently, the documentation isn&#x27;t very good.<p>- Implement WTF-8 (if it isn&#x27;t already), so that arbitrary JavaScript strings (which are strings of 16-bit characters) can be represented as UTF-8 without losing data. Often the text will be ASCII anyways, and you will want to use ordinary C strings,<p>- Add a API function to read&#x2F;write strings of 16-bit characters. (This is probably unnecessary for property names, although it is helpful for strings.)<p>- Add an option to disable use of Unicode tables, in case your program does not use them. (UTF-8, String.prototype.codePointAt, etc would still work regardless, since they don&#x27;t need Unicode tables to work. However, it would prevent Unicode properties from being used in regular expressions, remove String.prototype.normalize, and case conversion would be limited to ASCII (or perhaps ISO-8859-1) only.)<p>Additional optional extensions may be wanted, even if not enabled or even included in the executable by default (due to complexity), such as:<p>- PCRE.<p>- Option to disable automatic semicolon insertion.<p>- A &quot;goto&quot; command; you cannot jump into blocks, past declarations at the same level (in either direction), or out of functions. You can otherwise jump forward and backward within a block (including past nested blocks) or out of a block.<p>- Possibility for a function called by one JavaScript program to suspend that program while executing a different JavaScript program (which may possibly share objects with the first one), and later resume execution.')