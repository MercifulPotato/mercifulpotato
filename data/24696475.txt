Item(by='OliverJones', descendants=None, kids=None, score=None, time=1601982208, title=None, item_type='comment', url=None, parent=24684953, text='Cerner and other electronic medical records systems have, as a huge component of their operation, a scheme for ingesting HL7 data streams (and emitting them to other systems).  It&#x27;s likely the reference to ingestion in the article refers to that.<p>Chaos-monkeying with those data streams is flat out a good idea when building robust HL7 IT systems.<p>HL7 encodes a series of changes. For example, you might get records like this.<p>at 2020-10-06T14:33:00 patient 144616 moved from Floor 6 Rm 603 Bed 2 to OR3<p>at 2020-10-06T15:47:00 patient 144616 moved from OR3 to Recovery 3<p>at 2020-10-06T18:20:00 patient 144616 moved from Recovery 3 to Floor 6 Rm 603 Bed 2<p>It&#x27;s all state changes. Reconstructing the current state of affairs requires knowing which state was the latest for interesting object (patient, usually, but also maybe OR or other location in my trivial example).  These HL7 records don&#x27;t necessarily show up in chronological order either.<p>Trouble is, preexisting chaos monkeys (bugs) in systems like these sometimes say to themselves &quot;oops somebody lost sync, I better resync.&quot; Resyncing is done by resending a backlog of many days&#x27; worth of HL7 records to the unsuspecting consumer of those records.<p>So anything that can be done, by Cerner or any other HL7-using system, continually to test the oddball edge cases involving loss of sync is a good idea.<p>And, oh, yeah, everything in those records is protected health information. And often they&#x27;re sent over ordinary TCP streams without encryption. Health care IT relies on firewalls big time.<p>I don&#x27;t think the linked article is written for most HN readers; it&#x27;s written for Cerner CIOs and other in-the-trenches health care IT workers.')