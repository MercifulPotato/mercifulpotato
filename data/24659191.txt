Item(by='doonesbury', descendants=None, kids=None, score=None, time=1601616339, title=None, item_type='comment', url=None, parent=24658581, text='Well, almost. A good pedantic definition would show how to see i&#x2F;o rates as a percentage of maximum possible. And if those numbers were quite high and the CPU part was in the i&#x2F;o loop (r&#x2F;w, then compute, repeat) then indeed i&#x2F;o bound. No amount of work on the CPU part will appreciably drive down absolute time. If the CPU part is only after i&#x2F;o the CPU improvements can at most only help relatively little but at least CPU delays isn&#x27;t making i&#x2F;o artificially slower by delaying when new i&#x2F;o can start.<p>What&#x27;s a little misleading in the example is that the problem setup already is a half answer. In complex commercial apps just arriving at an apportionment of 5 and .05 for some narrow set of use cases is already an achievement.<p>If we see 5 and .05 comes in the mixed case (CPU in the i&#x2F;o loop) then there is a choice on what to fix to drive down absolute time. If the numbers are not so skewed it may take more debugging to suss out what&#x27;s going on. Here it is obvious with givens.<p>If apart we conclude the i&#x2F;o is slow (pedantically i&#x2F;o bound) and there&#x27;s no engineering need to figure out where labor needs to go. Here it&#x27;s pointless to wonder about CPU or memory.<p>The emphasis in sum is on the management end: our system slow. But what are we going to fix and why.')