Item(by='JNRowe', descendants=None, kids=None, score=None, time=1608613736, title=None, item_type='comment', url=None, parent=25501943, text='I don&#x27;t know of a plugin, but you can sorta do something kinda like the thing ish if you squint and cross your fingers...<p>You can perform actual in-place calculations by using the expression register.  So for example:<p><pre><code>    = 2 + 2\n    &lt;insert mode cursor here&gt;\n</code></pre>\nThen something like `&lt;C-r&gt;=eval(getline(&#x27;1h&#x27;)[2:])` will end up with:<p><pre><code>    = 2 + 2\n    4 \n</code></pre>\nIf you regularly did so writing a more robust mapping would probably useful.<p>And using regular :global you could perform similar operations across a file with `:g&#x2F;^= &#x2F; &lt;expression replacement&gt;`<p>I think the real solution would be just to use evil-mode in emacs when you wish to use things like literate-calc-mode.  I do that for org-mode because it is just <i>so</i> much more powerful than the basic vim plugin for org-mode files.<p>&gt; Is it something very difficult in vim?<p>Since 8.2 was released you can use popupwin¹ to emulate something similar.  I&#x27;d probably give it a go if you wrote it :P<p>It is a real shame you can&#x27;t use a funcref(or even multiple characters) for conceal replacement, or you could simply add a conceal² for =&gt; to show the result.  Such functionality would also be nice for inlining computed types in various languages too.<p>¹ <a href="https:&#x2F;&#x2F;vimhelp.org&#x2F;popup.txt.html" rel="nofollow">https:&#x2F;&#x2F;vimhelp.org&#x2F;popup.txt.html</a><p>² <a href="https:&#x2F;&#x2F;vimhelp.org&#x2F;syntax.txt.html#conceal" rel="nofollow">https:&#x2F;&#x2F;vimhelp.org&#x2F;syntax.txt.html#conceal</a>')