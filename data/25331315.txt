Item(by='DougBTX', descendants=None, kids=[25332266], score=None, time=1607342196, title=None, item_type='comment', url=None, parent=25330930, text='&gt; It&#x27;s no different to any other legacy refactoring project<p>There are two approaches to a project like that, as you say, take something which works and iteratively make it better, or derive a specification from the project which works and create a new from-scratch implementation to meet that specification.<p>My experience with the &quot;from-scratch&quot; approach is that it is very easy to miss details in the specification that will only be found out later, so it is very easy to underestimate the amount of work required. Ironically, that contributes towards making it easier to kick off the project, as it looks like it will be easier and cheaper. Especially if there is a view to drop features in the new version, which is fine until the actual users find out about the plan.<p>Another issue is that the old system which is being improved is often actually still in use, and the users still want new features even while the new system is being developed. Either those requests can be rejected, or implemented twice (once in the new system, once in the old). When incrementally improving the current system instead, those new features may end up touching areas of the code that have already been improved, making them cheaper to implement, not more expensive.<p>Basically, I think you&#x27;re right. Keep the current system working, and improve it without breaking it.')