Item(by='philh', descendants=None, kids=[25095717], score=None, time=1605384472, title=None, item_type='comment', url=None, parent=25094988, text='&gt; Your final paragraph hints at the kind of engineering that inevitably begins to appear as a workaround to solving the wrong problem in the first place. All of it is extra complexity that doesn&#x27;t need to exist at all.<p>I agree it&#x27;s extra complexity, and it&#x27;s not strictly necessary. But it&#x27;s not <i>that</i> much extra, and it doesn&#x27;t affect pages that don&#x27;t need it, which in the app I work on, most don&#x27;t. (Whereas if all your pages take a top-level model, and return a top-level message, they all need to deal with that even if they don&#x27;t need it.)<p>&gt; Does prior experience with bad surprises in Elm give you this intuition? Or is it from experience from a language like JavaScript where global mutable state is indeed something to be wary of?<p>Not specifically Elm, I&#x27;ve only written it in one app.<p>But I&#x27;m imagining bugs where a page mutates its state in ways that satisfy some invariant, and then that invariant is violated and no one can work out how it happens. Turns out some other page is editing its state, in ways that probably made sense at the time. (Granted the debugger will probably help, but... I dunno, I&#x27;d rather just not have to.)<p>I&#x27;m not convinced large Elm apps don&#x27;t have problems like this. And saying &quot;no, if you want to communicate with another page, you have to do it through this specific mechanism&quot; seems like a fine way of avoiding it.')