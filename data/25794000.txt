Item(by='AnIdiotOnTheNet', descendants=None, kids=[25795707, 25795233, 25794432], score=None, time=1610734271, title=None, item_type='comment', url=None, parent=25793809, text='&gt; I was there in the past and the tools are really not comparable. I just inserted a floppy disk and did D: then TP.EXE but do I really want to work on Turbo Pascal in MS-DOS? Of course complexity skyrocketed!<p>Did it do so for reasons that are still relevant today, is the question.<p>&gt; That&#x27;s not a counterexample because beginners have contemporary expectations.<p>Alright I&#x27;ll present a counterexample: Lazarus. You download it and install it [0], then you run it and make programs. It has a WYSIWYG GUI builder and produces stand-alone executables for multiple operating systems. There is no complicated build environment to set up.<p>&gt; If you&#x27;re not using $PATH you&#x27;d be using an analogue system to solve the same problem, and you&#x27;d lose portability with current OSes.<p>I contend that the problem $PATH solves has nothing to do with programming. $PATH is a solution for finding programs when you type their name on the commandline, nothing more. Windows and Mac programs don&#x27;t really use or need it for the vast majority of tasks. Programming does not fundamentally require $PATH.<p>&gt; Sounds like NIH to me.<p>And arguments that understanding $PATH is somehow a necessary pre-requisite to get into programming sound like needless complexity fetishism to me.<p>[0] I would argue that the installation step here is also unnecessary as there is no reason Lazarus cannot operate as a stand-alone self-contained portable folder other than the developers insistence on hardcoded paths.')