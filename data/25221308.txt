Item(by='nikic', descendants=None, kids=None, score=None, time=1606408045, title=None, item_type='comment', url=None, parent=25221200, text='&gt; I find it really weird that the match expression is strict comparison, but everywhere else it&#x27;s loose comparison. Don&#x27;t get me wrong, I prefer strict comparison, and prefer strongly typed languages because of it, I just feel that this is a strange design choice.<p>What is &quot;everywhere else&quot;? You usually explicitly need to specify the type of comparison you want by writing either == or ===. &quot;switch&quot; is a case where the comparison operator is implicitly &quot;==&quot;. &quot;match&quot; using &quot;===&quot; instead is one of the primary reasons for introducing it.<p>&gt; In addition, the @ operator seems to have functionality changed, and there is plenty of other backwards incompatible changes to go along with it, and yet, one of the main reasons to not choice the @ symbol for annotation&#x2F;attributes was because of backwards incompatibilities. Personally, I find the introduced syntax for attributes terrible, especially when @ is well recognised in the php community thanks to phpdoc annotations.<p>The only change to &quot;@&quot; is that it no longer suppresses fatal errors, which was generally not an intended or useful effect. The only thing this affects in practice are error handlers that don&#x27;t check for error suppression being active correctly.<p>The &quot;@&quot; operator is still very much needed for certain use-cases (e.g. I&#x2F;O functions may throw expected warnings) and removing it was not even a remote possibility for PHP 8, and as such also not a candidate for the attribute syntax.<p>It is worth noting that PHP uses the same attribute syntax as Rust does.')