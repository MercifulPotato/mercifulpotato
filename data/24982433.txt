Item(by='NOGDP', descendants=None, kids=None, score=None, time=1604428033, title=None, item_type='comment', url=None, parent=24982086, text='&gt; Dark is intending to be &quot;batteries included&quot; and relieve developers of the need for a huge ecosystem with multiple libraries for everything.<p>If it&#x27;s actually going to be &#x27;batteries included&#x27; in any meaningful way, then it will have to piggy-back off of one or more of these &#x27;huge ecosystems&#x27;, which invariably leads to the ability to integrate external pieces of these systems when needed. Which just makes it a wrapper around existing &#x27;huge ecosystems&#x27;.<p>There&#x27;s a reason why established languages such as Java, C#, C++, JavaScript, etc. have multiple libraries for the same problem - these libraries have different features, tradeoffs, designs etc. Same reason why existing projects get forked and new projects get started. Same reason these &#x27;huge ecosystems&#x27; have frameworks, design patterns, idioms, best practices, etc. Competition, innovation, new designs, new ways of solving existing problems is a good thing.<p>I don&#x27;t see dark as anything more than a very new framework, with lofty promises and zero evidence towards the idea that it will be better than existing systems in any way.<p>&gt; Small languages are extremely vulnerable to extinction regardless of who maintains them. But if at least one person&#x27;s full-time job is to maintain a language, I feel much more confident than if 1-5 people are maintaining it part-time.<p>A tiny FOSS language at least has a chance of getting some maintenance&#x2F;bug fixes from the community. What happens when your proprietary language dies for lack of traction? Also, nothing prevents a person working full-time on a FOSS language.')