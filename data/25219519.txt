Item(by='lifthrasiir', descendants=None, kids=None, score=None, time=1606394707, title=None, item_type='comment', url=None, parent=25215756, text='It seems that everyone implementing their own string library (including, eh, antirez) thinks masquerading pointers is cute, but in my opinion and experience it&#x27;s very dangerous because it requires a specific coding convention that can&#x27;t be checked by compilers. SDS is no exception to this problem:<p><pre><code>    sds a = sdsnew(&quot;hell&quot;);\n    sds b = a;\n    a = sdscat(a, &quot;o&quot;); &#x2F;&#x2F; this invalidates b\n</code></pre>\nMasqueraded pointers are inherently linear (or affine if you are pedantic). Any length-changing updates to such pointers can potentially reallocate them, so any value can&#x27;t be &quot;updated&quot; more than once; values should be consumed and returned by many operations. No typical C types behave like this: primitive values or structs can be updated by assignments and pointers can be updated by dereference. C doesn&#x27;t support linear types and, while normal pointers do need care, masqueraded pointers need much more care to use correctly. Yes, you can replicate the same bug with normal pointers by replacing the third like to `free(a);`, but you wouldn&#x27;t expect a bug for non-destructive operations. (Put in the other way, masqueraded pointers make many otherwise non-destructive operations destructive.)<p>While technically not a string library, this and the strict-aliasing issue for type-generic routines prompted me to write my own small extensible vector library [1] years ago.<p>[1] <a href="https:&#x2F;&#x2F;gist.github.com&#x2F;lifthrasiir&#x2F;4422136" rel="nofollow">https:&#x2F;&#x2F;gist.github.com&#x2F;lifthrasiir&#x2F;4422136</a>')