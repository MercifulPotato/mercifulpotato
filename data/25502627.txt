Item(by='hardwaresofton', descendants=None, kids=None, score=None, time=1608608766, title=None, item_type='comment', url=None, parent=25497033, text='&gt; I&#x27;d need to see what &quot;non-trivial&quot; means, because I have barely used it in three years pushing React to production, even when I used classes... The article you post is from 2017, it shows an optimization for a very particular scenario (rendering a list of 600 items), which BTW, could be optimized in many different ways... If you&#x27;re telling me Vue never needs this kind of optimization for heavy fronts, I&#x27;d have a very hard time believing you.<p>Vue2 worked a different way from inception (probably gaining from being able to see what react did and do something different), it tracks dependencies via the data property, so it does not require you to specify manually. Heavy list rendering isn&#x27;t what I was referring to, it&#x27;s manual dependency tracking -- there&#x27;s a separate pattern for large list rendering.<p>It&#x27;s not all sunshine and rainbows, but this is a better default.<p>&gt; I honestly wouldn&#x27;t know or care if the library has been &quot;rewritten&quot;, &quot;extended&quot; or &quot;patched&quot; or what they&#x27;ve done to the underlying code - because the core API has not really changed in years... Like I said, hooks extended the library and developers could transition at their own pace or not transition at all.<p>As recently as October this year breaking changes were an issue[0].<p>&gt; There are many React codebases that don&#x27;t use Redux. But it&#x27;s still a great state management library (or pattern) for moderately complex UIs. If you have your own state-management solution (including &quot;simple AJAX calls&quot;, whatever that means in the context of Flux or state management), you can use it...<p>No it&#x27;s not, and that&#x27;s the thing. There are even more codebases that are doing just fine with services + views (popularized by angular, ember). The main benefit I see is the time-travel property of state stores, but that&#x27;s not that hard to do with other approaches either. This is the cargo culting in action -- everyone just assumes &quot;oh you need state-management? well redux it is then, start reading up on reducers&quot;. Redux is so obtuse that redux-toolkit[1] exists. Again, the promise was simplicity but what you got was complexity.<p>&gt; Ditto for React... Any semi-competent dev can be writing at least presentational components with basic network calls in a day... Moderately complex state management and asynchronous actions that affect state take longer to wrap your head around, but I doubt that Vue really simplifies this. UI programming can become naturally complex under certain requirements, and I doubt there is a framework that can completely abstract away this complexity.<p>So that&#x27;s the thing, all that &quot;moderate complexity&quot; stuff you&#x27;d have been up and running with in Vue 2 on the first day. You can read the Vue docs in a few hours, and write an app that handles state reasonably well in that same day. It&#x27;s not that it&#x27;s abstracted away, it&#x27;s free of unnecessary abstraction which is what makes it simple.<p>&gt; That&#x27;s Create-React-App, which completely abstracts the need for pretty much everything except React-Router (10min to setup) and Redux (which nowadays you can substitute with plenty of alternatives). You can be writing business logic and views in 15 minutes, tops. And in a fair amount of cases, CRA stands the test of time, too: I&#x27;ve got code in production for very large customers using it and I know of startups that are building complex products in their second or third year of operations and haven&#x27;t even ejected their app...<p>Here&#x27;s another red flag for me -- if your library needs me to download a zipfile with everything pre-setup (because not doing so would be difficult), then your library is complex. Maybe I&#x27;m the only one that still creates new folders and puts files in myself, but I try not to allow this kind of complexity.<p>I want to be clear -- I don&#x27;t doubt react&#x27;s usefulness to enterprise. I do not doubt it&#x27;s production worthiness or ecosystem -- the result of the hype and the popularity is that people have <i>made</i> it production ready, contributed an intense amount, and built great stuff with it. It is the premier front end component-based library, I do not doubt that. It essentially re-introduced the idea of component-based frameworks (I&#x27;d argue Backbone Views were already there, as well as Angular Directives, some MVVM stuff etc), and made is seem simple and sexy.<p>&gt; Sure, there are network effects - popularity begets popularity. But surely a library or framework can&#x27;t live on hype alone? Look at Angular... React also - mainly, rather - remains popular because it has seen significant improvements to its core and ecosystem.<p>You&#x27;re right, they can&#x27;t but I think it&#x27;s more of a case of Angular2 being a failed migration (and maybe apply&#x2F;digest being horrible there too), it was the enterprise choice before React. I think you have it backwards -- react receives significant improvements to it&#x27;s core and ecosystem <i>because</i> it is popular, and maintained by a large FANG company. It has endured rewrites (which take significant manpower) smaller projects could not undertake because of said funding.<p>Funnily enough, this brings me back to Dart -- Dart1 was a trainwreck, and Dart2 is way better but in my opinion is trash in comparison to newer statically type checked languages designed around the same time (Rust, Go, Swift, D, etc). I know however, that Dart will never die, as long as it is used in Fuschia or at Google in general. People were probably saying the same kinds of things about Dart1 and they&#x27;ll say nice things about Dart2, but I still prefer Typescript because it a type system more suited to my tastes.<p>I don&#x27;t think I can convince you that react is complex and has warts that other libraries (in particular Vue) don&#x27;t have. It sounds like you&#x27;re productive and find it easy, that&#x27;s great by all means use it -- whatever makes you the most productive.<p>[0]: <a href="https:&#x2F;&#x2F;reactjs.org&#x2F;blog&#x2F;2020&#x2F;10&#x2F;20&#x2F;react-v17.html" rel="nofollow">https:&#x2F;&#x2F;reactjs.org&#x2F;blog&#x2F;2020&#x2F;10&#x2F;20&#x2F;react-v17.html</a><p>[1]: <a href="https:&#x2F;&#x2F;redux-toolkit.js.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;redux-toolkit.js.org&#x2F;</a>')