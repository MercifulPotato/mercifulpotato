Item(by='franga2000', descendants=None, kids=None, score=None, time=1608142954, title=None, item_type='comment', url=None, parent=25443450, text='&gt; Leanplum, location, &quot;device id&quot;<p>Doesn&#x27;t have access to location and the unique id is specific to leanplum so it can&#x27;t be tied to anything else. See [1] for an explanation (the source seems to match from my quick look)<p>&gt; GCM<p>Firefox has certain real-time features (like sending tabs) that wouldn&#x27;t be feasible without cloud messaging. Telegram FOSS and many other apps use workarounds that are less reliable, worse UX and drain battery anywhere from a bit more to HOLY SHIT WHERE DID THOSE 4500mAh GO? (source: Telegram FOSS on my OP3T) If you want to propose a better solution, I&#x27;m sure the 3 remaining devs at Mozilla would love to hear it.<p>&gt; Okay, now it&#x27;s time to refine this in context of &quot;Firefox Klar&quot;, &quot;Firefox Focus&quot; or say, the Fenix codebase(s). ...<p>Sure, let&#x27;s talk about Fenix - what is now available in G Play as the standard &quot;Firefox for Android&quot;. I don&#x27;t use Klar or Focus, but they use much of the same code, so all of this is quite general.<p>&gt; - Mozilla implemented their own ads distribution system that hijacks google ads on pages and replaces the id with the one that was specifically generated for the web browser<p>The link you provided doesn&#x27;t make that clear and neither do you. What &quot;id&quot; are you referring to? What is its significance and where in the code is it replaced?<p>&gt; - Mozilla&#x27;s Safebrowsing uses a generated hash, that is used specifically to identify a single device<p>The link you give makes no sense. The URL at the marked line is the URL from which hashes of unsafe URLs are fetched (for China). The hashes are (anonymized) URLs, not devices, and they are received, not sent.  If what you&#x27;re concerned about is &quot;SAFEBROWSIND_ID&quot; in that string, it is mapped to an implementation-specific not instance-specific identifier, as is clearly required by Google&#x27;s API [2] and is in fact taken from a the about:config entry &quot;browser.safebrowsing.id&quot; that you can check for yourself only contains something generic like &quot;navclient-auto-ffox&quot;.<p>&gt; - The server for both of those hash URLs is hosted by Alibaba in CHINA ...<p>Only for Chinese builds of the engine. See the if statement at [3] and explanation of the config option at [4]. The code you linked simply overrides the default SafeBrowsing API URL for the Chinese market as the original URL is not available there. The browsers treats it identically as the original, so all the client-side privacy guarantees are still there.<p>&gt; &gt; On top of that, FF takes extra measures to protect privacy &quot;just in case&quot;.\n&gt; As my links prove: No, they don&#x27;t<p>That part of my post was still referring to SafeBrowsing, specifically the part where they separate the cookie jar and inject some extra noise. [5] explains the whole process quite well (it&#x27;s similar to how HaveIBeenPwned works)<p>&gt; For example, they activate Leanplum&#x27;s device id specific tracking even if the user is outside the geofences, so they track users even if they already know it&#x27;s unnecessary. [7]<p>But they&#x27;re not &quot;tracking&quot; them in any significant way. My first link outlines this quite well. As for why those locales are hard-coded, It&#x27;s probably because those are the biggest markets and will usually be the first in A&#x2F;B any rollouts, so using geofences would just be wasteful as they&#x27;d always return true anyways. Either way, nothing nefarious there.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;b8de7079a963efb140ed318d876f23a17a0e3d9e&#x2F;docs&#x2F;mma.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;b8de7079a963efb...</a><p>[2] <a href="https:&#x2F;&#x2F;developers.google.com&#x2F;safe-browsing&#x2F;v4&#x2F;reference&#x2F;rest&#x2F;v4&#x2F;ClientInfo" rel="nofollow">https:&#x2F;&#x2F;developers.google.com&#x2F;safe-browsing&#x2F;v4&#x2F;reference&#x2F;res...</a><p>[3] <a href="https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;master&#x2F;app&#x2F;src&#x2F;geckoNightly&#x2F;java&#x2F;org&#x2F;mozilla&#x2F;fenix&#x2F;engine&#x2F;GeckoProvider.kt#L63" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;master&#x2F;app&#x2F;src&#x2F;...</a><p>[4] <a href="https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;baaa85db804a09635500eafeb40548a0adb61cb3&#x2F;app&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;mozilla&#x2F;fenix&#x2F;Config.kt#L60" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mozilla-mobile&#x2F;fenix&#x2F;blob&#x2F;baaa85db804a096...</a><p>[5] <a href="https:&#x2F;&#x2F;feeding.cloud.geek.nz&#x2F;posts&#x2F;how-safe-browsing-works-in-firefox&#x2F;" rel="nofollow">https:&#x2F;&#x2F;feeding.cloud.geek.nz&#x2F;posts&#x2F;how-safe-browsing-works-...</a>')