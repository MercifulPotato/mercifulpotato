Item(by='karlicoss', descendants=None, kids=[25430896, 25433752], score=None, time=1608035409, title=None, item_type='comment', url=None, parent=25429551, text='Yeah, but you need to test whether the result is an error or not in some way. In languages with better ADT&#x2F;pattern matching support (like Haskell or Rust) you&#x27;d use case&#x2F;match operator, or whatever it&#x27;s called.<p>I&#x27;ve read the issue, and it seems that it&#x27;s more about the lack of overloading&#x2F;dependent types, e.g. their example with pow function. In c++ you&#x27;d have two overloads:<p><pre><code>    float pow(float, float)\n    int pow(int, int)\n</code></pre>\nWhereas in python, even though you can achieve the equivalent behaviour in runtime, mypy (at least until recently) couldn&#x27;t express this, so you had to define something like<p><pre><code>    def pow(base: Union[int, float], power: Union[int, float]) -&gt; Union[int, float]\n</code></pre>\nWhich might be annoying on call sites when you do expect the return type to be int (but there is no way for mypy to know that with such signature).<p>In my case I do want to return a variant type unconditionally, so this warning doesn&#x27;t really apply. It&#x27;s more similar to an Optional type (just instead of None I am using a more meaningful Exception): while it&#x27;s not great if your code is riddled with optional return types, sometimes you don&#x27;t have other choice but using it.')