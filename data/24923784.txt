Item(by='Const-me', descendants=None, kids=[24924785, 24926418], score=None, time=1603917118, title=None, item_type='comment', url=None, parent=24921031, text='Embedded doesn’t need wayland nor X.org. These two things implement desktop managers. Why would you run a desktop manager on a computer that runs one program only?<p>For embedded, drm&#x2F;kms is IMO better level of abstraction to base on.\nIt only takes couple pages of code to get yourself a full-screen DRM-backed EGL context.\nI did it a few times for various Linuxes using Broadcom and Mali GPUs.<p>I’ve evaluated Flutter couple years back, chose not to. I picked NanoVG (later on I’ve patched it a bit improving fonts <a href="https:&#x2F;&#x2F;github.com&#x2F;Const-me&#x2F;nanovg" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Const-me&#x2F;nanovg</a> ), compiled a shared library, consumed from .NET Core, and implemented a GUI in C#, with animated transitions and such. Both me and my client were happy with the outcome.<p>Here’s why I was reluctant to choose Flutter.<p>1. New programming language with Flutter being the only use case. The language looks nice by itself. However, this means no library ecosystem, and non-trivial chances to waste lots of time working around bugs in language, compiler and runtime.<p>2. I don’t like Skia underneath, too much legacy and overall CPU-centric design. Marketing materials tells how they using GL and Vulkan for performance. Source code tells opposite story, they’re doing a lot of graphics on CPU. Unless the stuff is already implemented by some knowledgeable people outside ad. tech, e.g. MS Direct2D or nVidia’s NV_path_rendering. To be fair, Skia appears to be able to consume either of them, but none was available for my Linux target.')