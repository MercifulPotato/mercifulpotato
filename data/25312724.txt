Item(by='hakfoo', descendants=None, kids=[25313898], score=None, time=1607154949, title=None, item_type='comment', url=None, parent=25310788, text='It&#x27;s less &quot;good or bad&quot; and more of a philosophical choice.<p>PHP, especially old PHP, prioritized survivability over technical correctness.  The &quot;no errors for undefined variables&quot; thing is just one aspect of that.  Unquoted text strings accepted rather than being treated as constant names or throwing errors.  Functions that failed silently and you had to retrieve the error code with a seperate function or return value.  Implicitly cast a string into a taco salad.  All of these things mean that code with a modest density of minor bugs-- the sort of code you&#x27;d get from normal skill programmers with low-spec tools circa 2005-- will manage to stagger its way far enough to output something useful in a browser window.  It won&#x27;t pass any sort of rigorous analysis but it will still work well enough to solve real user problems and make real money.<p>You could make a case that while more restrictive paradigms may be <i>desirable</i> in 2020, they are not strictly <i>required</i> because they can be pawned off on the ecosystem.  IDEs are more capable, there are any number of auto-linters and rule-enforcers available.  So you can get most of the benefits of a shinier language, but with the flexibility of still being able to drop back to &quot;here&#x27;s the 20-year-old PHP4 code that does a business critical task and can never ever be touched&quot; level mid-project.<p>I feel like comparing PHP with $trendy_newer_language is sort of like the HTML&#x2F;XHTML divide a long time ago.  Making an intentional brittle system that demands correct developer behaviour might force you to make better code, but cheap, quick, and practical might make a better business.')