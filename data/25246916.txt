Item(by='nikki93', descendants=None, kids=None, score=None, time=1606674594, title=None, item_type='comment', url=None, parent=25246148, text='Is this based on having used Nim in practice in projects and observing the code of many Nim projects and collecting data &#x2F; insights; or without having used Nim and on speculation &#x2F; general thoughts about macros &#x2F; DSLs (or somewhere along the spectrum)? Just so it&#x27;s clear how to contextualize.<p>Because having tried to explore these questions by studying Nim projects, going through a book and working on a game engine in it the past months; I&#x27;ve found that ufcs+overloading covers the static traits scenario, and it feels like the runtime traits object scenario is better self-rolled (I don&#x27;t really want the compiler impl&#x27;ing vtables underneath me, save deciding to reuse a static dispatch feature for a dynamic one; if I want a struct of func ptrs I will make a struct of func ptrs.) at least for my usage. Various Nim code I come across is usually pretty readable, and I don&#x27;t need to invent macros willy nilly.<p>ufcs feels more elegant than needing to decide whether to namespace a function inside a struct or not (or which one), which is what most langs (including Rust) seem to do.')