Item(by='cactus2093', descendants=None, kids=[25779922, 25780257, 25782490, 25781964, 25779769, 25782857], score=None, time=1610645636, title=None, item_type='comment', url=None, parent=25777992, text='Drawbacks I see are:<p>1. no static typing. With typescript having taken off, and now even python and ruby becoming more and more feasible to use in production with static typing, switching to a new dynamic language is a hard sell for me.<p>2. limited ability to take full advantage of some of its unique features in many cases. The runtime and the included OTP library&#x2F;paradigm has some really cool features with its approach to processes and concurrency with the actor model, and features like hot code reload. But IMO the industry and popular best practices have evolved in a different direction that make these things less compelling. Code deploys are a solved problem in any of the major vm&#x2F;container runtimes, with blue&#x2F;green deploys, canary builds, feature flags, etc. all quite easy to use, so hot code reloading isn&#x27;t that compelling as a language feature anymore. There are tons of ways to orchestrate multiple instances of a services from Heroku to Kubernetes, and APIs built on Protobuf and GRPC, GraphQL, or json REST APIs, are now pretty standard for communicating between different services, or using message queues, kafka, cloud pub&#x2F;sub, etc. Also the paradigm most developers are familiar with is stateless app servers that store any state in database or cache layers, which has a lot of benefits.<p>Erlang and OTP seem to kind of mix all of these paradigms together, and if you use all of its built-in ways of doing things you are really striking out on your own from the common &quot;best practices&quot; that more developers these days will be familiar with. A lot of common tooling and cloud hosting providers don&#x27;t support Erlang OTP style programming natively. It can certainly be used successfully, I believe Whatsapp as one famous example was originally all written in Erlang, but I personally don&#x27;t see a whole lot of justification for most apps to do this. Of course you don&#x27;t have to use any of these features, but then why use a language if you&#x27;re not going to lean into its unique strengths?')