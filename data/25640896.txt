Item(by='eyelidlessness', descendants=None, kids=[25640981], score=None, time=1609810367, title=None, item_type='comment', url=None, parent=25640671, text='This was my proof of concept for non-negative integers. You can clearly use the &quot;template literal type&quot; functionality to do arbitrary type processing. People have used it for JSON, SQL and GraphQL type validation. Validating a numerical range is trivial compared to those.<p><pre><code>    type IntegerChar =\n      | &#x27;0&#x27;\n      | &#x27;1&#x27;\n      | &#x27;2&#x27;\n      | &#x27;3&#x27;\n      | &#x27;4&#x27;\n      | &#x27;5&#x27;\n      | &#x27;6&#x27;\n      | &#x27;7&#x27;\n      | &#x27;8&#x27;\n      | &#x27;9&#x27;;\n\n    type IntegerString&lt;T extends string&gt; =\n      T extends IntegerChar ?\n        T :\n      T extends `${infer Char}${infer Rest}` ?\n        Char extends IntegerChar ?\n          Rest extends IntegerString&lt;Rest&gt; ?\n            `${Char}${Rest}` :\n          never :\n        never :\n      never;\n\n      type NonNegativeInteger&lt;T extends number&gt; =\n      T extends infer U ?\n        number extends U ?\n          never :\n        `${U}` extends IntegerChar ?\n          U :\n        `${U}` extends IntegerString&lt;`${U}`&gt; ?\n          U :\n        never :\n      never;\n\n    type NonNegativeInteger&lt;T extends number&gt; =\n      T extends infer U ?\n        number extends U ?\n         never :\n        `${U}` extends IntegerChar ?\n          U :\n        `${U}` extends IntegerString&lt;`${U}`&gt; ?\n          U :\n        never :\n      never;</code></pre>')