Item(by='RobertKerans', descendants=None, kids=None, score=None, time=1610797422, title=None, item_type='comment', url=None, parent=25800778, text='I get it&#x27;s a glib comment, but serious answer because the answer is &quot;same as every other language&quot;. JS is easy to write, has a vast ecosystem, a vast number of developers using it. Subsequently there are a lot more people writing their thoughts about it on the internet. There are lots of &quot;new&quot; frameworks, nobody uses them, but because of language popularity the number of people writing about {shiny thing} as if it&#x27;s used is relatively high compared to other languages (PHP, for example, had the same issue, if it even is an issue).<p>1. See {thing}, assess whether to ignore it or keep an eye on it.<p>2. If {thing} is brand new, wait a year or so, then go to 1. If {thing} is a few years old and&#x2F;or has [possibly suddenly] gained traction and&#x2F;or provides immediate, obvious and significant benefits (assessing latter being where lack of experience can cause an issue), go to 3.<p>3. If {thing} is only starting to gain traction, wait a year or so, then go to 2. If {thing} has gained traction and is battle tested go to 4<p>4. If {thing} has traction + community + libraries + docs + tutorials then same as before, but more seriously, judge whether usable.<p>Early adopters using and writing about it are at stage 1 or 2 which could lead to stage 3 and 4. {Large company throwing resources at thing} may push it up ranking.<p>React&#x2F;Vue&#x2F;Angular and probably Ember are at stage 4. Svelte possibly 3 possibly 4. React&#x2F;Vue&#x2F;Svelte&#x2F;Ember use same underlying paradigm. Would expect a developer familiar with one to easily switch productively to another in a few weeks. Not quite much of a muchness, but close enough. Angular slightly different paradigm. Usage of everything else is so low as to be irrelevant.<p>At first glance this is at stage 1 and is currently fairly useless. That&#x27;s not a slight on the developer, just how it is. It doesn&#x27;t affect any perceived &quot;framework churn&quot; because it will only be tried by very few developers. There may come point several years from now where it becomes useful and widely used (this seems unlikely from skimming the linked site, as it seems to provide nothing interesting, but I may be missing something), but now is not that point.')