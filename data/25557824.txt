Item(by='rswail', descendants=None, kids=None, score=None, time=1609146803, title=None, item_type='comment', url=None, parent=25553112, text='I&#x27;ve been involved in a number of attempts to rewrite systems that ticked all of the boxes of Mythical Man Month&#x27;s second system effect.<p>The main things I&#x27;ve learned over 40 years:<p>* Rewrites will fail. Whether they&#x27;re called that, or called &quot;lift and shift&quot; or called &quot;refactoring&quot;<p>* The reason they fail is because the focus is entirely on the technology, not the users and how they use the systems<p>* Understanding business systems and users and how they interact is vital. Business processes haven&#x27;t changed, accounting hasn&#x27;t changed, company hierarchies and competitive markets haven&#x27;t changed.<p>* What has changed is that where people used to be the &quot;API&quot; for a process touchpoint, now that is likely to be another system, and will have its own API which expresses how it sees the process. Trying to &quot;force&quot; those systems to interact with yours in the way you want is a fools errand.<p>* Abstraction is really important when defining business domains. &quot;Sales&quot; vs &quot;Fulfilment&quot;, &quot;Payment&quot; vs &quot;Charging&quot;, &quot;Data&quot; vs &quot;Information&quot;, etc.<p>* Software can&#x27;t solve all of the possible implementations of the business domain abstractions. You have to set constraints to limit the number of &quot;configuration&quot; elements. Things like &quot;Sales are always retail to end user consumers so that we don&#x27;t have to deal with VAT exclusive invoicing&quot;.<p>* Those constraints need to be agreed to by the product owners&#x2F;managers of the domain. Otherwise, every potential requirement will add yet another &quot;knob&quot; to the control of the domain, yet another testing path etc.')