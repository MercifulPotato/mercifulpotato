Item(by='jka', descendants=None, kids=[25030599], score=None, time=1604863862, title=None, item_type='comment', url=None, parent=25026394, text='There are issues with micropackaging functions and code, and the fact that they didn&#x27;t exist as a concept when the JavaScript language was being designed may contribute to that - but I don&#x27;t think that it&#x27;s clear whether micropackaging will turn out to be a good or bad trend overall.<p>Hundreds of thousands of untested, unaudited implementations of a roughly-similar function _could_ be far worse in terms of overall ecosystem stability and security than a small number of frequently-used (albeit yes, potentially flawed and vulnerable) micropackage dependencies.<p>The outcome for each micropackage may depend on how much scrutiny and test coverage is available when updates occur, and how well-defined the package&#x27;s API is.<p>In a sense, that&#x27;s not hugely different to version upgrades for other, larger library dependencies.  Incremental library changes tend to be easier for developers to audit and integrate, so perhaps eventually this is a better approach?<p>In my opinion Microsoft (via GitHub and NPM) are likely best-placed to make significant progress on evaluating and improving the situation.<p>When a micropackage is updated, they&#x27;re in a position where they could run continuous integration tests not just for the package itself, but also for dependent packages, to gain an early sense for the correctness and disruption potential of the change.<p>That kind of information would be useful to make a micropackaging ecosystem more viable and healthy, although it would also increase the ecosystem&#x27;s long-term dependence on Microsoft.')