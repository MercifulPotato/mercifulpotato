Item(by='willglynn', descendants=None, kids=[25059533, 25060643, 25059995], score=None, time=1605107503, title=None, item_type='comment', url=None, parent=25057985, text='&gt; The ARM architecture floating point units (VFP, NEON) support RunFast mode, which includes flush-to-zero and default NaN. The latter means that payload of NaN operands is not propagated, all result NaNs have the default payload, so in R, even NA * 1 is NaN. Luckily, RunFast mode can be disabled, and when it is, the NaN payload propagation is friendlier to R NAs than with Intel SSE (NaN + NA is NA). We have therefore updated R to disable RunFast mode on ARM on startup, which resolved all the issues observed.<p>Hmm. ELF object files for Arm can represent this with build attributes [1]:<p><pre><code>    Tag_ABI_FP_denormal, (=20), uleb128\n        0  The user built this code knowing that denormal numbers might be flushed to (+) zero\n        1  The user permitted this code to depend on IEEE 754 denormal numbers\n        2  The user permitted this code to depend on the sign of a flushed-to-zero number being\n           preserved in the sign of 0\n\n    Tag_ABI_FP_number_model, (=23), uleb128\n        0  The user intended that this code should not use floating point numbers\n        1  The user permitted this code to use IEEE 754 format normal numbers only\n        2  The user permitted numbers, infinities, and one quiet NaN (see [RTABI32_])\n        3  The user permitted this code to use all the IEEE 754-defined FP encodings\n</code></pre>\nSeems like their code should be tagged Tag_ABI_FP_denormal = 1, Tag_ABI_FP_number_model = 3 if it were an ELF .o, .so, or executable, in which case &lt;waves hands&gt; some other part of the toolchain or system would automatically configure the floating point unit to provide the required behavior.<p>Does Mach-O have a similar mechanism?<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;ARM-software&#x2F;abi-aa&#x2F;blob&#x2F;master&#x2F;addenda32&#x2F;addenda32.rst#procedure-call-related-attributes" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ARM-software&#x2F;abi-aa&#x2F;blob&#x2F;master&#x2F;addenda32...</a>')