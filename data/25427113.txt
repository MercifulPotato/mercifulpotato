Item(by='mehrdadn', descendants=None, kids=[25427215], score=None, time=1608007686, title=None, item_type='comment', url=None, parent=25427005, text='They don&#x27;t contradict to my understanding (see below).<p>First, regarding comparing pointers vs. integers, that goes back to what I said about identical pointer representations as an integer. Just because two pointers point to the same memory location, it does not mean they have an identical representation as an integer. This might be difficult to understand if you think of a linear address space, but it&#x27;s easier to understand once you&#x27;re familiar with segmentation. Pointers derived in different ways can ostensibly have different representations due to nonlinear (e.g., segmented) memory models, and yet nevertheless point to the same memory location. Hence it is actually undefined whether they compare equal. There is no canonicalization procedure that ensures they result in the same integer representation.<p>One pointer (not sure if pun intended) that might help you see this: consider words like &quot;follows&quot; aren&#x27;t even necessarily well-defined for nonlinear address spaces—IIRC they&#x27;re defined not with respect to the physical machine, but respect to struct&#x2F;object layout in the language, implying there is a larger object&#x2F;array containing both of these adjacent arrays to begin with. That&#x27;s what they&#x27;re talking about in that quote: if you start from a pointer to an array and go to another array that <i>follows</i> it, then it&#x27;s fine to compare the pointer. To do that, you have to be able to first prove (<i>via the language&#x27;s abstract machine semantics</i>—not by putting your linear DRAM under a microscope!) one <i>follows</i> the other one, and you cannot do that unless you know they&#x27;re part of the same aggregate structure.<p>Anyway, all of this is my understanding of what&#x27;s going on (and apparently others&#x27;, as you see on that page). The entire page is a longer discussion on the meaning of these quotes. You can&#x27;t ignore the rest of the entire page and just quote the first part, since this is exactly what they&#x27;re dissecting. Read the whole thing, and look at the links they point to. What I quoted is the conclusion they come to based on the preceding quotes (including yours). The standard is not 100% explicit on the issue (hence the discussion and requests for clarification), but many of those who&#x27;ve looked into the issue so far have come to the conclusion I quoted. You need to read it extremely carefully, and (again) if you look at nonlinear address spaces, this should make more sense.')