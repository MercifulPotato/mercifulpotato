Item(by='jammycrisp', descendants=None, kids=[24853547], score=None, time=1603214727, title=None, item_type='comment', url=None, parent=24839663, text='Agreed on optimizing core objects. I recently wrote a C base class (<a href="https:&#x2F;&#x2F;jcristharif.com&#x2F;quickle&#x2F;#structs-and-enums" rel="nofollow">https:&#x2F;&#x2F;jcristharif.com&#x2F;quickle&#x2F;#structs-and-enums</a>) for defining dataclass-like-types that&#x27;s noticeably faster (~5-10x) to init&#x2F;copy&#x2F;serialize&#x2F;compare than other options (dataclasses, pydantic, namedtuples...). For some applications I write this has a non-negligible performance impact, without requiring deep interpreter changes. Using the base class is nice - my application objects are still defined in normal python code, but all the heavy lifting is done in the c-extension.<p>However, this speedup comes at the cost of being less dynamic. I&#x27;m not sure how much more optimized core python objects could be without sacrificing some of the dynamism some programs rely on. Python dicts are already pretty optimized as is.')