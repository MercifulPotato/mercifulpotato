Item(by='pydry', descendants=None, kids=[25323335], score=None, time=1607257390, title=None, item_type='comment', url=None, parent=25322651, text='&gt;For example the other day I had an issue with my Django app, and a quick search led me to tens of answers to this problem in various forums and websites. It took me at most 10 minutes to get back on track and that was the end of this issue.\n&gt;\n&gt;I experienced the exact opposite a few years ago with a popular, but not so battle-tested Scala library my team had been using for a while.<p>This issue can be sidestepped to a large extent on non popular technologies by picking technologies which are tightly scoped, well designed and well supported by their maintainers. They&#x27;ll have fewer issues and the issues that they do have will be easier to diagnose and the maintainers will probably be more help. Being very tightly scoped and well designed means that A) they won&#x27;t be flooded with issues and B) there&#x27;s a narrower range of things that can cause issues making it easier for them to diagnose and implement fixes&#x2F;workarounds.<p>Django is very broad in its outlook. It tries to do a lot. It&#x27;s also got some embedded design mistakes which make certain problems more common. The size of the community and the wealth of content online makes up for this. Any new web framework that makes half as many mistakes will not get off the ground because it won&#x27;t have this.<p>Django is also not just a technology. It&#x27;s as much a community and and set of agreed upon standards for building web apps. It&#x27;s as much about being able to purchase django suit or use django-rest-framework as it is fixing issues with django itself. The people rather than the core library itself are what hangs it all together (&amp; the people in this community are really lovely).')