Item(by='DaiPlusPlus', descendants=None, kids=[25132924, 25135661], score=None, time=1605668616, title=None, item_type='comment', url=None, parent=25132660, text='&gt; Microsoft implemented a backwards compatibility layer as Apple has in this case<p>Windows-on-ARM already has 32-bit x86 emulation - and 64-bit x64 emulation is coming soon:<p>* <a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;uwp&#x2F;porting&#x2F;apps-on-arm-x86-emulation" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;uwp&#x2F;porting&#x2F;apps-on...</a><p>* <a href="https:&#x2F;&#x2F;www.extremetech.com&#x2F;computing&#x2F;315733-64-bit-x86-emulation-officially-coming-to-windows-on-arm" rel="nofollow">https:&#x2F;&#x2F;www.extremetech.com&#x2F;computing&#x2F;315733-64-bit-x86-emul...</a><p>I haven&#x27;t looked too deeply, but it seems to use the same WoW (Windows-on-Windows) mechanism that&#x27;s been present in Windows NT going back to at least Windows XP 64-bit Edition (no, not 2005&#x27;s &quot;Windows XP x64&quot;, but the original 2001 Windows XP for Intel Itanium IA-64).<p>&gt; The WOW64 layer of Windows 10 allows x86 code to run on the ARM64 version of Windows 10. x86 emulation works by compiling blocks of x86 instructions into ARM64 instructions with optimizations to improve performance. A service caches these translated blocks of code to reduce the overhead of instruction translation and allow for optimization when the code runs again. The caches are produced for each module so that other apps can make use of them on first launch.<p>Looks like Windows dynamically translates code in DLLs&#x2F;EXEs on a JIT&#x2F;on-demand basis and caches each translated run-of-code.')