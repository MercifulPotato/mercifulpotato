Item(by='acdha', descendants=None, kids=None, score=None, time=1603249964, title=None, item_type='comment', url=None, parent=24842986, text='I realize you like it but think about what we&#x27;re talking about here: someone has a room full of students who have not been trained as programmers and they&#x27;re working on a particular experiment, not taking a class on software development. Most of them have probably used Excel&#x2F;Numbers before and if not the basic idea, especially given a template, is pretty easy to explain so you can get them up in running quickly and get back to the actual problem you&#x27;re working on.<p>Now contrast that with how much stuff you need to learn to be proficient with any programming language — and no matter how much you think your favorite one is a friendly unicorn, teaching a room full of beginners will be eye-opening for the things they get stuck on. Which editor to use? How to install it? Are you saying “$LANG” but actually using that as a shorthand for “$LANG, Git and shell tools, and the conventions for using which are common in my specialty”? How much time does it take to learn the basics of the language, how to interpret error messages, and debug things?<p>None of that is insurmountable, of course, but the difference in learning curves is why many people end up with the Excel file which started in a hurry and is now Frankenstein&#x27;s workbook which everyone is afraid to touch or share. Over a sufficient time interval, it&#x27;d be much easier to pick any decent toolchain because maintaining that level of complexity in almost any major programming language is going to be less work but unless you&#x27;re starting with experienced developers the short term answer will probably favor Excel. I&#x27;ve seen people who&#x27;ve been meaning to get around to rewriting it long enough that the target language has shifted as things fall in and out of favor.')