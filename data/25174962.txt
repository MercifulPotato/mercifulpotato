Item(by='kmill', descendants=None, kids=None, score=None, time=1606019834, title=None, item_type='comment', url=None, parent=25174764, text='&gt; it&#x27;s useful to have a marker<p>To whom?  (That is rhetorical. The point is that this is not useful information for most mathematicians -- if you picked up a random graduate textbook in, say, algebra or combinatorics, I am certain the theorems will not be annotated with which are proved by contradiction.  Quoting you from earlier, &quot;With all due respect, that seems a bit vague to me.&quot;)<p>&gt; are of interest to topologists<p>I didn&#x27;t mean to suggest I was speaking for all of topology (more specifically, I&#x27;m interested in low-dimensional topology), but still topology is a large field and what you are talking about is a small part of it.  Also, just because there are constructive internal logics, I&#x27;m not sure that means the system you use to study them has to be constructive itself, and if that&#x27;s what you are interested in studying you might want a more specialized system anyway.<p>You don&#x27;t need to convince me that these things are interesting -- I have some knowledge about internal logics and I do some higher category theory.  It&#x27;s just that languages should be ergonomic for their users.  Saying something is easy does not prove it is ergonomic.<p>Think about this: Most mathematicians I know that use Lean seem to turn on all the additional features that make it as classical as possible.  They don&#x27;t even want the inconvenience of marking definitions noncomputable.<p>(Maybe you&#x27;re already familiar with how Lean works, but LEM and double negation elimination do not let you leak values to the Type level from the Prop level.  A proof that there is a number with a specific property doesn&#x27;t mean you actually can have such a number.  You need the noncomputable choice function to &quot;obtain&quot; a value from an existential.)')