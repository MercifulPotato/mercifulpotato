Item(by='est31', descendants=None, kids=None, score=None, time=1605893776, title=None, item_type='comment', url=None, parent=25159730, text='&gt; Personally, I enjoy not having to write functions like doStuff(true, true, true, false)<p>Yeah that&#x27;s not beautiful, but most of my code is rather<p>doStuff(foo, bar, baz)<p>where foo, bar and baz are descriptive variable names.\nI agree that it&#x27;s hard to understand with literals, but in the rare cases you need such flags you can either have a config struct or use the builder pattern.\nAlso, nowadays you can set up vscode to use the rust-analyzer LSP plugin, which shows you the types as well as the parameter names. But of course that doesn&#x27;t work on Github and similar places.<p>IDK in general, the people who want named arguments outnumber the people who don&#x27;t want them, at least in threads about the question, which obviously preselects the people who want them. Maybe eventually Rust will get them, no idea. But IMO that code shows how named arguments can make code more noisy than before.<p>&gt; I don&#x27;t know how rust handles this but in swift, each POD struct has an implicit member wise constructor visible from the file it&#x27;s defined. This is for encapsulation purposes, as its signature of course changes if you add fields to the struct.<p>In Rust, POD structs can be constructed iff all their members are visible through the publicity system to the code that tries to construct them. If it&#x27;s in a different crate, it&#x27;s also important whether there is a #[non_exhaustive] attribute on the struct declaration or not.')