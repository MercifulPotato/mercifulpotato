Item(by='ChrisLomont', descendants=None, kids=[25626321], score=None, time=1609684059, title=None, item_type='comment', url=None, parent=25605149, text='One big feature is a massive amount of built-in functionality [1]. You don&#x27;t have to find various packages, install them, spend a day fighting version issues, or that some author hasn&#x27;t upgraded to a recent language version, or used a non-standard logging facility, or any of a zillion other time-sinks you face daily with gluing open source packages together. As soon as a professional has been paid to fight open source integration for 1-2 days, it would have been better if the employer had simply bought matlab.<p>And, here is by far the biggest issue with open source - the numerical accuracy of lots of it is crap. Matlab (and Mathematica, etc.), have employed professional numerical analysists to create numerically stable, robust algorithms, and has had decades (Matlab started in 1970, under academic numerical analyst Cleve Moeller) of refinement to weed out bugs. It&#x27;s the difference between using BLAS and writing your own linear algebra package - one is likely far more robust.<p>Sure, some numerical open source packages are decent, and a few are excellent (BLAS and related). But when you need to glue some together, you end up far too often with stuff that&#x27;s just flakey for production work.<p>If you&#x27;ve ever coded the quadratic formula as written in high school textbooks and not known all the mess you just made, then you are what most open source developers are. Taking almost <i>any</i> formula from a paper and just typing it in is surely the wrong way to do it numerically, but this is what open source does. A robust engineering platform should have every such formula analyzed for the proper form(s) for implementation to maintain numerical robustness, and it should also avoid allowing users easy ways to do stuff that is not robust. This is the biggest difference between tools like Matlab and Mathematica versus open source projects.<p>And, like the time spent fiddling with getting open source to work, as soon as you have one engineering task or design fail due to numerical problems, it would have been vastly cheaper to simply use the better tool - Matlab.<p>Sure, most people don&#x27;t use it very much, and rarely run into such problems. People using it for serious work in engineering toolchains or production systems cannot rely on instability of opensource.<p>And those reasons are why things like Matlab still exist, have incredible revenue, and are growing in use.<p>For example, want to do some work in python? Well, soon you need numpy. Then you might wat pytorch - but crap, it&#x27;s numpy-ish, but not numpy. So you learn some more nuances on getting the two to play nicely, to get consistent error messages... Then you need some visualization - again, another package (with a host of dependencies), with different conventions, syntax, uses, and god forbid these packages get a little out of sync between releases - then you get to spend a day chasing that down. Now you want some optimization stuff - pull in scikit, but it&#x27;s not quite consistent with the other libs... so you spend more time making glue functions between the stuff you want to build. Next you need some finite element analysis stuff - oops, pretty much dead compared to the massive amount of toolkits already in Matlab.<p>Take a moment and look through the list(s) of functions and toolkits standard in matlab [1]. For an incredible amount of engineering work, what you need is there - you spend less time trying to build enough pieces to start to work and you instead get working on the parts you want.<p>There&#x27;s a reason python stole a lot of matplotlib ideas from Matlab - it&#x27;s quite useful.<p>[1] <a href="https:&#x2F;&#x2F;www.mathworks.com&#x2F;help&#x2F;referencelist.html?type=function" rel="nofollow">https:&#x2F;&#x2F;www.mathworks.com&#x2F;help&#x2F;referencelist.html?type=funct...</a>')