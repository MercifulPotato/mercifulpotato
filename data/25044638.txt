Item(by='Tuna-Fish', descendants=None, kids=[25044890, 25045069], score=None, time=1605006383, title=None, item_type='comment', url=None, parent=25044504, text='&gt; But in the long term apps should all end up using Vulkan&#x2F;DX12&#x2F;Metal themselves directly<p>In terms of &quot;a typical 3d app writes directly to the API&quot;, they really shouldn&#x27;t.<p>The fundamental shift between DX12&#x2F;Vk and the earlier APIs is that the old graphics APIs were fundamentally about graphics, in the sense that they described a specific way to draw graphics, and then in conjunction with hardware translated that into something that ran well. Originally, there were many very different ways this was done. Over time the hardware implementations all converged towards a common form, and game developers found themselves not really coding against the old APIs as designed, but twisting it&#x27;s use into something that translated into what they wanted on the actual hardware. (That they knew and understood because of the consoles that just let the devs target the same or very similar hardware directly without a translation layer on top of it.)<p>DX12&#x2F;Vk then approaches the API design from a completely different perspective: They are designed to provide an efficient interface to the functionality that is available in hardware. Much of this is graphics-specific, simply because the hardware is meant to run graphics, but in a very real way the API isn&#x27;t about the graphics, it&#x27;s about the hardware. Vk doesn&#x27;t have the kind of simple graphics pipeline that OpenGL devs are used to, because it&#x27;s outside the context of the API. You, the developer, are supposed to make your own pipeline, out of the pieces of hardware-supported operations that the API exposes.<p>Which brings this back to my point: The typical game dev has no interest or need to learn DX12&#x2F;Vk, because they fundamentally do not provide what the devs need or want. Instead, game devs should largely build their work on top of an actual graphics pipeline. Right now, most devs get that pipeline out of the large 3rd-party game engines (UE, Unity), but if you are not using those, OpenGL or DX11 is not a bad choice, and a lot of studios still do that, and probably will for a very long time yet.<p>Hopefully over time someone will design a good separate graphics pipeline that runs on DX12&#x2F;Vk, that is designed purely to be a good abstraction for graphics, and will do that well enough that it will replace most use of the old APIs. However, this will take a very long time, simply because of the human factors. (I already know DX11&#x2F;OGL, why would I learn something new?) But even when it does, D3D&#x2F;OpenGL will not be replaced by DX12&#x2F;Vk, they will be replaced by a new translation layer that sits on top of it and is an analogue of these translation layers being built now.')