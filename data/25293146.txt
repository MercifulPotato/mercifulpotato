Item(by='mdoms', descendants=None, kids=None, score=None, time=1607022704, title=None, item_type='comment', url=None, parent=25292401, text='Say for example you need two queries, one for fetching a paged list of customers ordered by birth date, and one for fetching a paged list of customers who are male.<p>You will find you&#x27;ll need two queries with a huge amount of duplicate logic - the SELECT clauses, even if they&#x27;re pulling the same columns, will need to be duplicated (don&#x27;t forget to keep them in sync when the table changes!), because there&#x27;s no reasonable way to compose the query from a common SELECT clause. The paging logic will be duplicated for the same reason. So although the queries are similar, only sorted and filtered differently, you will need to duplicate logic if you want to avoid pulling the entire data set first and performing filtering and sorting in separate modules.<p>These problems become significantly worse when you&#x27;re talking about inserting, updating or upserting data that involves validation and business rules. These rules are not only more difficult to implement in SQL, but they change more often than the structure of data (in most cases) so the duplication becomes a huge issue.<p>I haven&#x27;t tried this on a system that uses Postgres functions so I could be way off base here, my experience was pure sprocs in MS SQL.')