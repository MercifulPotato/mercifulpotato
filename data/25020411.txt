Item(by='dmitriid', descendants=None, kids=[25020707, 25020794], score=None, time=1604789339, title=None, item_type='comment', url=None, parent=25019975, text='&gt; The original post, if you’ll read it again, carefully<p>Literally says this, emphasis mine:<p>--- start quote ---<p>If you need to get user, then 5 of his posts, then 50 of comments for each post and then 100 reactions for each post, all connected by IDs in your DB, <i>GraphQL allows you to do all of this in a single HTTP request, single SQL query and with 0 lines written by backend developer.</i><p>--- start quote ---<p>No. In general, it doesn&#x27;t. There&#x27;s a magical tool that they use, and they still have issues with it: <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25014918" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=25014918</a> So much for &quot;single SQL with 0 lines of backend code&quot; when you have &quot;weird joins that we won&#x27;t optimise for, and sooner or later there will be determined DDoSers who will figure it out&quot;<p>&gt; The magical database tool is a simple and comprehensible example (but still is brilliant in how well it works).<p>Yeah, this magical tool is only a tool, that works with a single database, for a single set of problems, and has to be constantly fine-tuned because you can&#x27;t optimise ad-hoc queries.<p>But yeah, dismiss all that and just shout to the world: &quot;REST sucks, GraphQL is so much better because we have this one single tool&quot;. The moment you step outside the limitations of that tool, you&#x27;re screwed. But you haven&#x27;t reached that point yet, so you consider yourself &quot;competent&quot;.<p>&gt; The bottom line is that if dev team is capable of working with graphql, it’s just a better choice.<p>This still has to be empirically proven by anyone without magical handwaving and dismissing any issues.')