Item(by='skohan', descendants=None, kids=None, score=None, time=1611498792, title=None, item_type='comment', url=None, parent=25888366, text='I agree the list is very good list in general.  My point of disagreement is:<p>&gt; Software architecture probably matters more than anything else\nThe devil is in the details here, but the more I program, the less I feel that &quot;software architecture&quot;, at least as it is often discussed, is actually not important and often actively harmful.<p>The architecture driven approach takes the assumption that the &quot;correct&quot; shape of a program should fit into a pre-defined abstraction, like MVP, MVVM (or god forbid atrocities like VIPER) etc which has been delivered to us on a golden tablet, and our job as programers is to figure out how to map our problem onto that structure. In my experience, the better approach is almost always to identify your inputs and desired outputs, and to build up abstractions as needed, on a &quot;just-in-time&quot; basis. The other approach almost always leads to unnecessary complexity, and fighting with abstractions.<p>The author also mentions SOLID - like architecture patterns, I&#x27;m always a bit suspect of true-isms about what makes good software, especially when they come in the form of acronyms. I generally agree that the principals in SOLID are sensible considerations to keep in mind when making software, but for instance is the Liskov Substitution Principal really one of the five most important principals for software design, or is it in there because they needed something starting with &quot;L&quot;?<p>After 10 years of programming, the biggest takeaway for me has been that the function of a program (correctness, performance) is degrees of magnitude more important than its form. &quot;Code quality&quot; is important to the extent that it helps you get to a better functioning program (which can be quite a bit) but that&#x27;s where its utility ends. Obsessing over design patterns and chasing acronyms is great if you want to spend most of your time debating with colleages about how the source code should look, but the benefits are just not reality-based most of the time.')