Item(by='scarmig', descendants=None, kids=None, score=None, time=1602172719, title=None, item_type='comment', url=None, parent=24719525, text='It depends. At a high level, &quot;at scale&quot; you&#x27;ll have to solve all the same problems for both, to the point where you have a dedicated team or teams solving those problems. Monorepos don&#x27;t automatically solve issues of version skew or code search or code consistency, and multirepos don&#x27;t automatically solve problems of access control or performance or partial checkouts. All a monorepo strategy does is say that all your source files will share the same global namespace, and all a multirepo strategy does is say that they can have different namespaces (often corresponding to a binary or grouping of closely coupled binaries). Everything after that is an orthogonal concern. As far as it goes, conceptually monorepos appeal to me, and they offer more discoverability and a simpler, more consistent interface than multirepos. It&#x27;s also worth considering that there must be some kind of trade-off if you need to pull in the abstraction of &quot;separate repos&quot; to handle code: typically you have fewer guarantees about the way source files will interact when they&#x27;re in separate namespaces, which makes some things harder.<p>But if you&#x27;re just starting out, you&#x27;re going to be going with off-the-shelf components. Usually this is git hosted on GitHub, GitLab, or something similar; there&#x27;s a good chance you&#x27;re going to be using git. Vanilla git works sub-optimally once you reach a certain number of contributors, a certain number of different binaries being generated, and a certain number of lines of code, as a lot of its assumptions (and the assumptions of folks who host git) focus on &quot;small&quot; organizations or single developers. You aren&#x27;t going to have a good time using a vanilla git monorepo with tens of millions of lines of code, and hundreds of developers, and dozens of different projects, even though in principle you could have a different source control system that would function perfectly well as a monorepo at that scale.<p>My general approach would be to start with a git monorepo, do all development within it, and once that becomes a pain point migrate to multirepo.')