Item(by='skohan', descendants=None, kids=[25717013], score=None, time=1610298723, title=None, item_type='comment', url=None, parent=25714936, text='Yeah I agree - Rust does have more static checking than is strictly needed for many domains.  But I think the reason for that is strictly orthogonal to type safety - rather it&#x27;s because Rust&#x27;s approach to memory management is a lot more demanding on the programmer than GC.<p>Speaking only in terms of type systems, I think Rust&#x27;s features - like algebraic types and explicit nullability - are strictly better than Go and make it easier to write correct code.  It just happens to be that this benefit is eclipsed by all the ceremony required to satisfy the borrow checker.<p>&gt; Swift ... has some maturing to do before itâ€™s ready for more than Apple GUI apps<p>I actually think Swift <i>as a language</i> is plenty ready for general purpose programming.  The problem is the tooling.  It&#x27;s supposedly being worked on, but last time I checked it&#x27;s possible but not at all simple to get it running on anything other than Apple platforms and a few blessed linux distros.  Also I had the experience that every time I would uprgade the toolchain, it would pretty much break all my larger projects.  Even though I like Swift as a language more than Rust in some ways, I&#x27;ve pretty much abandoned it on new projects, because with Rust I can just run `cargo run` on any system and be pretty confident it&#x27;s going to work, and Swift is <i>very</i> far from this.<p>Also you always feel like the language is a bit at Apple&#x27;s whim.  Like when SwiftUI was released, they shoe-horned a number of features into the language which seemed pretty half-baked because of iOS&#x27;s priorities.  It makes one hesitant to invest too much in a language which is so heavily influenced by a single stakeholder who may have different interests than you.')