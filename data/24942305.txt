Item(by='coder543', descendants=None, kids=None, score=None, time=1604066836, title=None, item_type='comment', url=None, parent=24941889, text='Threads existed long before multi-CPU computers or multi-core CPUs were common, so no... they don’t exist for that reason.<p>Parallelism and concurrency are orthogonal concerns. Multiple threads can run on the same core, while concurrent awaits can run on separate cores (depending on the language). Or the opposite!<p>Threads definitely solve wasted time waiting on I&#x2F;O, but OS-level threads are a very limited resource in many environments, which can cause problems more quickly in programs with unbounded concurrency, and they tend to have a lot of startup cost, so they have to be created judiciously to avoid hurting performance.<p>Languages like Go and Elixir give the programmer access to unlimited lightweight “threads”, and that works great for concurrency, without requiring developers to re-color their functions.<p>One additional note is that some OSes (including Linux) have struggled to support true nonblocking File I&#x2F;O for many years, so you literally have had to use multiple OS threads for I&#x2F;O concurrency... one for each file operation in progress. Otherwise you would block the async executor! Languages often handle this implementation detail for the programmer, so you just don’t realize you’re using a thread-per-await sometimes.<p>(io_uring seems to finally solve this in a meaningful way on Linux)')