Item(by='mfontani', descendants=None, kids=None, score=None, time=1609028634, title=None, item_type='comment', url=None, parent=25547550, text='I&#x27;m running a similar setup, whereby I run most applications (even the browser I&#x27;m using to type this reply) in docker or podman containers, opportunely created.<p>Judging from the Git repo containing my dockerfiles, I&#x27;ve been doing so since ~mid June 2018.<p>I&#x27;ve since automated:<p>* checking new versions of Git repos, alpine versions, and short crawlers for tools (i.e. I run &quot;perl latest.pl&quot; and a bunch of stuff happens and eventually some dockerfiles might get updated)<p>* auto-committing any change made from the above step (i.e. .&#x2F;autocommit.sh) with a meaningful message based on the directory the dockerfile resides, as well as which environment variable containing the version changed<p>* I use <a href="https:&#x2F;&#x2F;github.com&#x2F;crazy-max&#x2F;diun&#x2F;" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;crazy-max&#x2F;diun&#x2F;</a> running on my dokku server to keep up with base images updates (i.e. I get an email in the morning stating alpine:3.12 has been updated or debian:buster-slim or whatever); when a base image changes I have to manually &quot;dp alpine:3.12&quot; to &quot;docker pull&quot; and &quot;podman pull&quot; it; after that, I &quot;make base-images&quot; and my local base images (each coming with a short line to enable a local apt-cache-ng proxy) to also get updated; then a simple &quot;make&quot; makes all of them (docker build -t .... and podman build -t ...)<p>* Quite a lot of (mostly small) bash scripts to run those images.<p>As an example, the Dockerfile I use to build hadolint:<p><pre><code>    FROM local&#x2F;mfontani&#x2F;base:latest AS fetcher\n    LABEL com.darkpan.github-check github.com&#x2F;hadolint&#x2F;hadolint HADOLINT_VERSION\n    ENV HADOLINT_VERSION v1.19.0\n    RUN curl -sSL &quot;https:&#x2F;&#x2F;github.com&#x2F;hadolint&#x2F;hadolint&#x2F;releases&#x2F;download&#x2F;$HADOLINT_VERSION&#x2F;hadolint-Linux-x86_64&quot; -o &#x2F;usr&#x2F;bin&#x2F;hadolint\n    RUN chmod +x &#x2F;usr&#x2F;bin&#x2F;hadolint &amp;&amp; \\\n        &#x2F;usr&#x2F;bin&#x2F;hadolint --version\n    FROM scratch\n    COPY --from=fetcher &#x2F;usr&#x2F;bin&#x2F;hadolint &#x2F;usr&#x2F;bin&#x2F;hadolint\n    ENTRYPOINT [&quot;&#x2F;usr&#x2F;bin&#x2F;hadolint&quot;]\n</code></pre>\n... and the shell script I use to run it:<p><pre><code>    #!&#x2F;bin&#x2F;bash\n    DOCKER_FLAGS=()\n    [[ -t 0 ]] &amp;&amp; DOCKER_FLAGS+=(-t)\n    podman run --rm --init -i &quot;${DOCKER_FLAGS[@]}&quot; \\\n        --network none \\\n        -v &quot;${PWD}:&#x2F;usr&#x2F;src:ro&quot; \\\n        --workdir &#x2F;usr&#x2F;src \\\n        localhost&#x2F;mfontani&#x2F;hadolint &quot;$@&quot;\n</code></pre>\nIt&#x27;s not that speedy doing this, but it&#x27;s... okay:<p><pre><code>    $ hadolint curl&#x2F;Dockerfile\n    Took: 0.837s (837ms)</code></pre>')