Item(by='kortex', descendants=None, kids=None, score=None, time=1607307441, title=None, item_type='comment', url=None, parent=25328221, text='What really made monads click for me is when I read Monads for Go Programmers [0], drawing a comparison between pointers and functors:<p>&gt; We can think of a functor as a container, which contains one type of item.\n...\n&gt; A pointer: *T is a container that may be empty or contain one item;<p>Despite that comparison probably making seasoned FPers groan, that was a big clicking moment for me.<p>Thinking along the lines of nullary-function:pointer::return:dereference, frames Linus&#x27; abstraction in an interesting light. You&#x27;re manipulating the &quot;function which yields the struct&quot;, not the struct itself. In fact it looks much closer to a map than the cs101 blurb in that now all nodes can be treated symmetrically.<p>[0] - <a href="https:&#x2F;&#x2F;awalterschulze.github.io&#x2F;blog&#x2F;post&#x2F;monads-for-goprogrammers&#x2F;" rel="nofollow">https:&#x2F;&#x2F;awalterschulze.github.io&#x2F;blog&#x2F;post&#x2F;monads-for-goprog...</a>')