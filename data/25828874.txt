Item(by='tharkun__', descendants=None, kids=None, score=None, time=1611019390, title=None, item_type='comment', url=None, parent=25822670, text='You seem to be assuming that people know make. People don&#x27;t any longer. People that grew up with C, built their Linux system from scratch etc. know Make. For someone that doesn&#x27;t know make, none of what you say comes natural or &#x27;makes sense&#x27;.<p>Also, make is a very general purpose tool. You don&#x27;t have to have a `test` target. I could easily call the target `analyze`. Do you store your compiled files in a `dist` folder? Or do they just end up right next to the source files? Where are your test files stored vs. your main project files?<p>In the Java world the equivalent of Make would have been ant at some point. People did exactly what you said you would do with make. Most people had the default ant run build the project, test would test it etc. but everything else was a complete free for all.<p>What Maven did was standardize a lot. The test goal (goal being maven speak for make targets) is always called test. All build output always goes to the `target` folder. maven always expects your test files nicely out of the way of regular source files and they never end up in the resulting package etc. The package(s) always end up in the target folder too. Most if not all of these things can actually be changed but it&#x27;s work to do it and you can easily see it being reconfigured vs. build tools like Make or Ant, which are much more general purpose like shell scripts.<p>I could make the same assertions about maven btw. as you do about Make. Once you know maven, you can build anything you like with it and it takes care of all of the same things. In a previous life we actually regularly packaged non-java projects with maven, since that was the hammer we had and understood.')