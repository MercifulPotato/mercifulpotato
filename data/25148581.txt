Item(by='rglullis', descendants=None, kids=[25149048], score=None, time=1605786592, title=None, item_type='comment', url=None, parent=25148271, text='The point is not separating <i>people</i>, much less about separating files. It&#x27;s about separating <i>concerns</i> to allow extensibility of one aspect of the component without having to worry about the other parts of the system.<p>Yes, with vue it is nice to have <i>&lt;template&gt;</i>, <i>&lt;script&gt;</i> and <i>&lt;style&gt;</i> on the same file, but what if I&#x27;d like to have <i>multiple</i> styles? Why can&#x27;t I say &quot;This component has this structure and this behavior and it allows for style A, B, and C&quot; and have the application bundler choose themselves what style they want to use? What if the application bundler thinks &quot;I want to use style C, but I&#x27;d like to customize some rules&quot;? How do you do that?<p>&gt; moved over from Bootstrap shortly after I started, Tailwind has made sure that many of the old problems just don&#x27;t arise anymore.<p>Yes, Tailwind is a step up compared to Bootstrap if you consider how you can define the types and remove the utility classes from your HTML. But my feeling is that people who are so fascinated by the idea of Tailwind custom types are just in the process of reinventing semantic styling, this time with a preprocessor to compensate for the verbosity and some helpful mixins to overcome inconsistencies between browser implementations.<p>So, to repeat the question: What am missing? What do I have to gain from Tailwind if I am using already SASS as the preprocessor and a good library of &quot;utility  classes&quot; that can be @imported&#x2F;@use&#x27;d&#x2F;@apply&#x27;d to the document without touching the HTML?')