Item(by='avl999', descendants=None, kids=None, score=None, time=1608426127, title=None, item_type='comment', url=None, parent=25474039, text='Having primitive int as opposed just using Integer in the first place was the original sin of Java. I am perfectly fine with not proliferating that further, List&lt;Integer&gt; with autoboxing pretty much allows you to use primitives when working with List&lt;Integer&gt; and the workflow is seamless. await would definitely be nice, it&#x27;s a shame Java doesn&#x27;t have it. It&#x27;s a bit weird to call the features they have added as &quot;stolen from C#&quot;, these features have existed in other languages for decades- ML had type inference in the 70s, lambdas have been there since the 60s. They are not &quot;C# features&quot;.<p>There have been many useful improvements between Java 8 (the lambda release) and Java 11, I haven&#x27;t looked beyond 11 as I haven&#x27;t worked in Java in over a year and that was the last version I wrote code with. I don&#x27;t even consider var to be that useful of an improvement, the biggest pains of lack of type inference were solved in the Java 7 era with the diamond operator which eliminated the need to specify often times deep nested generic arguments on both sides. Now var was basically a bikeshed problem. Between 8 and 11, they improved Strings under the hood to move away from being backed by char arrays. This has huge implications on web services and data processing apps in reducing the memory foot print as most of them wrangle a large amount of json. Also they added an HttpClient to standard library somewhere between 8 and 11 greatly eliminating the need to depend on 3rd parties. They also added the FlightRecorder (although I haven&#x27;t had a chance to personally use it yet) which improves the the instrumentation story. Not every release is going to have sexy language features but they do contain improvements with direct impact on production software- the String class compaction improvement is the best example, it is not sexy, I doubt it even had a thread on HN but in the real world it measurably improved the performance profile of a large category of applications for free. Release cycles are just numbers, most people in the real world are not keeping up with latest release and instead opting to upgrade to just the LTS releases which are on a much slower cadence of 3-4 year cycles.')