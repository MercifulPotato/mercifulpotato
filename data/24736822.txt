Item(by='ben509', descendants=None, kids=None, score=None, time=1602306706, title=None, item_type='comment', url=None, parent=24735062, text='The way I think of that trick is it&#x27;s simply translating struct.field to struct(field).<p>You can also use it to represent sum types and then pattern match on them. For instance, Python doesn&#x27;t have a case statement. We could define an Either type as:<p><pre><code>    def Left(value):\n        return lambda Left, Right: Left(value)\n    def Right(value):\n        return lambda Left, Right: Right(value)\n\n    Left(&quot;failed, so sad&quot;)(Left=complain, Right=fh.write)\n    Right(b&quot;great data&quot;)(Left=complain, Right=fh.write)\n</code></pre>\nYou can combine the techniques to get a list type without relying on nil:<p><pre><code>    def Cons(head, tail):\n        cons = lambda field: {&quot;head&quot;: head, &quot;tail&quot;: tail}[field]\n        return lambda Cons, Empty: Cons(cons)\n    def Empty():\n        return lambda Cons, Empty: Empty()\n\n    my_list = Cons(&#x27;a&#x27;, Cons(&#x27;b&#x27;, Cons(&#x27;c&#x27;, Empty())))\n\n    def foldr(func, zero, list):\n        return list(\n            Empty=lambda: zero,\n            Cons=lambda cons: func(cons(&#x27;head&#x27;), foldr(func, zero, cons(&#x27;tail&#x27;)))\n        )</code></pre>')