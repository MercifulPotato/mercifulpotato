Item(by='dmix', descendants=None, kids=None, score=None, time=1602096856, title=None, item_type='comment', url=None, parent=24711136, text='Every millisecond counts when loading JS backed features on websites too.<p>I&#x27;m curious with the multiplexing improvements if we&#x27;ll see greater performance gains in the long-term as we changed how we package and bundle JS.<p>I&#x27;ve seen a significant improvement in general page performance using Webpack&#x27;s chunking, where it automatically breaks up each of your components into smaller .js file and only loads them if the page uses them (basically on-demand async importing of JS files that were preprocessed with webpack).<p>It went from loading one giant blob of JS  on every page into one primary JS file (about 25% smaller) + a bunch of tiny 1-10kb .js files that load async. A typical heavily interactive page would load 5-10 of these async files.<p>There&#x27;s probably opportunities to go even further in breaking up the primary file (which handles the logic of which JS components to load + includes the Vue&#x2F;whatever framework and other JS dependencies).<p>I understand the utility of &quot;loading once and caching&quot; stuff but for serious JS-heavy frontends the bundled JS files becoming extremely bulky (sometimes in multiple megabytes due to legacy dependencies) and ideally you&#x27;d minimize that always-cached part as much as possible.')