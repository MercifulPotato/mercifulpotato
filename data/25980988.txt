Item(by='sitkack', descendants=None, kids=[25981640], score=None, time=1612116620, title=None, item_type='comment', url=None, parent=25980189, text='&gt; main issue is with the Java zealots<p>Any sufficiently large population will have someone who will literally say anything. And the common outrage trope on the internet is to rage against a straw man.<p>Now I haven&#x27;t used GraalVM in production, but in having played around with it and doing new code from scratch, I found AOT compilation to be really good.<p>I think the change will come faster than you think.<p>You can build your leaf, domain level code into a native shared lib and still use the reflective code at the top level to compose the application.<p><a href="https:&#x2F;&#x2F;www.graalvm.org&#x2F;reference-manual&#x2F;native-image&#x2F;#build-a-shared-library" rel="nofollow">https:&#x2F;&#x2F;www.graalvm.org&#x2F;reference-manual&#x2F;native-image&#x2F;#build...</a><p>If Java gets CTFE (compile time function evaluation), constexpr for C++ folks, much of the need for runtime reflection would disappear.<p>There is no reason that JITed reflective code (along with VM) can&#x27;t be combined AOT code in the same program.  You can already do this in Graal via front ends for llvm-ir and wasm.<p>As it is now, you can already mix Rust, C, C++ trivially with bytecode via LLVM ir. And for languages that compile to Wasm, GraalVM has a front end for that as well.<p><a href="https:&#x2F;&#x2F;www.graalvm.org&#x2F;reference-manual&#x2F;wasm&#x2F;#embedding-webassembly-programs" rel="nofollow">https:&#x2F;&#x2F;www.graalvm.org&#x2F;reference-manual&#x2F;wasm&#x2F;#embedding-web...</a>')