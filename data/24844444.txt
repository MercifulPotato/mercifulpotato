Item(by='lmm', descendants=None, kids=[24844684, 24844556, 24844574, 24844587], score=None, time=1603250230, title=None, item_type='comment', url=None, parent=24844131, text='&gt; But there’s also this idea that the magical compiler does good enough abd there’s no reason to challenge the assembler. But there are programming problems where that is in fact essential.<p>Citation needed. I&#x27;ve seen people claiming this for years, and I&#x27;ve yet to see a single case where handwritten assembler actually did better than spending the same amount of effort on speeding up the compiled program (e.g. taking 5 minutes to actually set the right target architecture).<p>&gt; Writing great asm or C is as challenging as writing great css. But to be sure, knowing what your code actually requires hardware to do is really valuable. It matters and we don’t have abstraction in many cases to abstract that away totally.<p>&gt; It doesn’t hurt to have a good idea on how the machine works.<p>On modern hardware both C and ASM are distractions. If you actually want to understand the performance you need to look at cache misses and mispredicted branches; reading through C or an ASM listing will only serve to mislead you. Strangely enough, the crowd that wants you to learn C seem to be the same people who are vehemently against using the kind of profiling tools that will actually tell you what&#x27;s going on.')