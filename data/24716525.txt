Item(by='lgessler', descendants=None, kids=[24717072, 24716685, 24716903, 24717006, 24716640], score=None, time=1602139605, title=None, item_type='comment', url=None, parent=24712207, text='&gt; if your code compiles, it probably works<p>I&#x27;m always a little frustrated whenever I see this aphorism perpetuated since I think it gives the impression that a static type system is doing more than it is actually doing. In type systems that are used outside of academia, the main thing your static types are doing is checking whether the shapes of your data and functions all line up. With some small exceptions, that&#x27;s it: the compiler will tell you if your LEGOs fit together, but not if you&#x27;ve built a knife instead of a fork.<p>I know what this aphorism is getting at, which is that in some domains and circumstances a lot of your bugs <i>are</i> &quot;shape&quot; errors, and it&#x27;s gratifying when you&#x27;re writing OCaml or Java and you can, say, refactor without hesitation, knowing the compiler will find even the most unused paths where you need to modify an invocation of your function. But it&#x27;s been my and others&#x27; experience that there are many times where this isn&#x27;t your most pressing concern, and could in fact be a pretty boring concern that you don&#x27;t even want to pay the type annotation tax for. (I also think there&#x27;s something to the idea that a static type system can instill <i>too</i> much confidence and encourage the pursuit of bad abstractions like 18-arg functions that can no longer be effectively reasoned about by an unaided human mind, but that&#x27;s another topic.)')