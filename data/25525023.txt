Item(by='cpleppert', descendants=None, kids=[25525835], score=None, time=1608783553, title=None, item_type='comment', url=None, parent=25523851, text='&gt; The only safe use of these 2 software is basically: 1) add new unique rows (no updates) 2) much later (granted only after repairs, which take a real lot) you can read, but only up to a certain time in the past. 3) basically almost avoid deleting<p>1000x this<p>That is exactly what Cassandra was originally designed to do. Cassandra doesn&#x27;t implement complex distributed mechanisms that would make it hard to operate and implement like most distributed databases or impose a cost on application developers to understand the tradeoffs they will have to grapple with and make the. Cassandra is not AP with less than a quorum read&#x2F;write or CP with a quorum read&#x2F;write. It only fulfills those guarantees in the way you might expect if your cluster topology never changes and your timestamps are carefully synchronized.<p>Absent these guarantees modifying existing data is essentially an undefined operation. This isn&#x27;t a shot at cassandra developers. Cassandra isn&#x27;t magic. There is no possible way it can magically use a simple last write wins strategy to guarantee that data updates won&#x27;t be lost in the absence of outside guarantees.<p>Cassandra is essentially a prototype of a class of NoSQL databases try to be incredibly easy to manage for write heavy workloads. Look, I get it, it was a collection of appealing technologies, I found the original white paper on Cassandra interesting too. <i>columnar</i> <i>read-repair</i> <i>eventually consistent</i> <i>merkle trees</i> <i>NoSQL</i> <i>column family</i> <i>super columns</i> <i>cluster gossip</i> <i>phi accrual failure detector</i><p>Of course, the &#x27;columnar&#x27; attribute was originally intended so that applications designed around cassandra could reconcile multiple values associated with a single key:attribute path without having to utilize a complex api. Whether this is actually viable is another story entirely.<p>CQL&#x27;s only advantage is that it vaguely resembles SQL. CQL is not a query language. It is a collection of Cassandra operators mapped onto a vaguely SQLish syntax that bears little relation to the underlying semantics they are derived from. Cassandra just shoehorns a bunch of its idiosyncrasies onto an SQL look alike. INSERT and UPDATE do the same thing(which is not what SQL does for either and are probably not what you expect). The entire behavior of how a &#x27;query&#x27; is actually executed can change drastically. In order to use Cassandra correctly you have to understand how the database physically implements every operation. So the query language doesn&#x27;t provide a meaningful abstraction at all.<p>CQL would have never made sense in the original implementation of cassandra because cassandra was never designed to do the things that people expect from a database that implements a query language.')