Item(by='inopinatus', descendants=None, kids=[24767295], score=None, time=1602555272, title=None, item_type='comment', url=None, parent=24760658, text='I&#x27;m speaking from experience; since I&#x27;m actually using some of those I can tell you that assumption doesn&#x27;t hold in the real world.<p>It&#x27;s a myth that programs written for interpreted&#x2F;dynamic&#x2F;scripting languages are automatically portable, because many nontrivial uses pull in FFI-based or otherwise compiled extensions, so a deployment package <i>does</i> include platform-specific code.  I can&#x27;t speak for Django but this is definitely the case for Rails: a Rails application that&#x27;s been bundled with its dependencies for deployment in Lambda includes x86-64 binaries.  I just checked one of our standard templates, and it has 18 gems using compiled extensions.  I&#x27;m reasonably sure I&#x27;d find similar if I go look through our Node stuff, and in any case, it&#x27;s a documented concern[1].<p>The point being, where they don&#x27;t already have it, such AWS services will likely add platform&#x2F;arch metadata to their deployment packaging, and users shouldn&#x27;t assume a seamless transition when the option to switch becomes available.<p>[1] <a href="https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;compute&#x2F;nodejs-packages-in-lambda&#x2F;" rel="nofollow">https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;compute&#x2F;nodejs-packages-in-lamb...</a>')