Item(by='outworlder', descendants=None, kids=[25003599], score=None, time=1604607783, title=None, item_type='comment', url=None, parent=24998908, text='&gt; but are really double-edged swords in large projects<p>Yeap. I ended up dragging my team to Golang due to this. Sure they didn&#x27;t write unit tests and they still aren&#x27;t writing unit tests. But at least now a compiler will take a look at the code before it&#x27;s run. Lots of stupid errors at runtime disappeared.<p>For personal projects? Something like Python, Lua or Scheme is great. It can still be great in large teams, but they need to understand and care about what they are doing.<p>&gt; but I would have been happier stepping into C++<p>Oh no you wouldn&#x27;t. That&#x27;s the nuclear foot gun.<p>I&#x27;ve been tasked(along with some great engineers, most more experienced than myself) to fix a mess left by two other teams. A project that was severely over budget and very late.<p>It was the worst abomination ever known to man. Crashes in random places. Race conditions. Global variables. Memory corruption galore. Lack of understanding of C++ in general (copy constructors, assignment operators, initializer lists) leading to many more bugs. Leaked like a sieve.<p>A lot of this wouldn&#x27;t be possible in other languages (memory corruption in general). Some issues would happen no matter what (two modules opening the same file and writing on it simultaneously), unless something like Rust or Haskell was used to make this more difficult.<p>So far, that&#x27;s the only project I&#x27;ve contradicted Joel Spolsky and it was completely thrown away and rewritten. Again in C++ because that was the requirement, but with proper modules this time, smart pointers and the like. It was completed in 3 months.')