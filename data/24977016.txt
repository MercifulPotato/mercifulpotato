Item(by='sjrd', descendants=None, kids=[24977288], score=None, time=1604385677, title=None, item_type='comment', url=None, parent=24976837, text='In the small, Rescript generates smaller code than Scala.js, that is true. It is mostly a question of the interdependencies in the standard Scala collection library, though, not so much the semantics of the language. And Scala.js also has its share of &quot;tricks&quot; (aka optimizations) to reduce indirections and overhead.<p>Regarding interop and the link you posted, here is the equivalent documentation page in Scala.js: <a href="https:&#x2F;&#x2F;www.scala-js.org&#x2F;doc&#x2F;interoperability&#x2F;types.html" rel="nofollow">https:&#x2F;&#x2F;www.scala-js.org&#x2F;doc&#x2F;interoperability&#x2F;types.html</a><p>Yes, Rescript has more built-in types that map straightforwardly, but that is at the cost of some correctness. For example, using a JavaScript array means that JavaScript can resize it under your feet. Using `undefined` to represent `None` means that you cannot tell the difference between `None` and `Some(None)`. It&#x27;s a fine trade-off to make. Scala.js happens to make the other trade-off, and offers separate types for JavaScript interop.<p>I like the concepts and design of Rescript, really. It&#x27;s very interesting because they have all the essential requirements right (IMO) like comprehensive JavaScript interop, while making all the opposite design decisions on nonessential trade-offs compared to Scala.js.')