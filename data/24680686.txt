Item(by='smt88', descendants=None, kids=None, score=None, time=1601832666, title=None, item_type='comment', url=None, parent=24680538, text='I&#x27;ve built ~12 web APIs in the last few years across various languages (TypeScript, C#, and Kotlin).<p>You should always design first. I&#x27;m a longtime Open API Spec user, so I build the spec from scratch in Apicurio Studio or Stoplight. (I highly recommend keeping it in JSON, as the YAML specs are horrendous to read&#x2F;edit.)<p>If you&#x27;re very attached to your language of choice, there are usually tools you can use to annotate your data models and controller classes, and then you can generate your Open API Spec file from there.<p>The benefit of all this is that your public docs are programmatically bound to your type system (hopefully, assuming you&#x27;re using a strongly typed language). If your spec changes, your code won&#x27;t compile anymore.<p>You can also use your spec file to generate models&#x2F;controllers (if you did spec-first instead of the annotation option), as well as unit tests. You can import it into Postman. It&#x27;s very useful.<p>So our compile process is something like:<p>1. Lint the Open API Spec file with something like Spectral<p>2. Generate models and controllers from Open API Spec (which are imported as base classes and are <i>not</i> modified by humans)<p>3. Compile<p>Unfortunately, the existing generation of model generators for C# don&#x27;t handle null well, so you lose out a huge benefit of the strong typing. TypeScript and Kotlin are fantastic about that, though. In general, I would recommend Kotlin today because it has the best combination of ecosystem and language, whereas C# has a great ecosystem but frustrating nominal typing system (until C# 9 anyway) and TypeScript is built on the shantytown that is JavaScript&#x2F;npm.')