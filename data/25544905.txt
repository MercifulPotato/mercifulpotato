Item(by='jbreckmckye', descendants=None, kids=[25545015], score=None, time=1609004206, title=None, item_type='comment', url=None, parent=25544627, text='Relevant for what? The question isn&#x27;t really complete.<p>Is PHP still a language in use, should I support it if I build tools or platforms for programmers? Sure. It&#x27;s in use in many places.<p>Is PHP still a language worth learning if I intend to do agency style web development? Probably yeah. It still has a high showing in that domain.<p>Is PHP relevant for someone writing brand new distributed systems? Probably not. It has poor ergonomics and a bad concurrency story, and there are better languages for any criteria you care about.<p>Is PHP relevant outside of backend web services? No, and it never has been.<p>Is PHP relevant for PL research? Absolutely not. PHP&#x27;s language design is almost wholly parasitic. It has few ideas of its own.<p>But... that&#x27;s not really what we&#x27;re writing about, when we&#x27;re writing about relevance. Relevance here is a value judgement. But it&#x27;s not PHP&#x27;s quality as a language that makes it so ubiquitous. PHP is largely widespread because for a long time it had by far and away the best deployment story. You could get a LAMP server provisioned and be up within minutes.<p>I think the really interesting question is, &quot;based on what made PHP so ubiquitous, what&#x27;s the next PHP?&quot;. And I think the answer is JavaScript.<p>JS is quickly becoming the platform of least resistance. I can write a script and have it served on AWS Lambda within seconds. I can go into my function code and add logging on the fly. I have the same fast feedback cycle, in other words, that I would have had with PHP fifteen years ago.<p>I&#x27;m becoming more and more convinced that the most powerful tool a language can provide is a REPL. The faster I can turn abstract ideas concrete, the better. And the next generation of programming languages will live or die on their &quot;playability&quot;.')