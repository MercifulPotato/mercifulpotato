Item(by='mickduprez', descendants=None, kids=None, score=None, time=1605216045, title=None, item_type='comment', url=None, parent=25044112, text='I&#x27;ve read both of Christopher Alexander&#x27;s (CA) books and Zen ATAO Motorcycle Maintenance (Zen). I think the way Zen talks about QWAN is a better description than CA&#x27;s, I would call when things fit together and work together well &#x27;Elegance&#x27; rather than QWAN. \nPattern Mining is one thing and very worthwhile (to find Elegance) but without Quality the end product will be average at best.<p>The Zen description of QWAN is more about &#x27;what is Quality&#x27; or &#x27;where does quality come from&#x27;. Yes, elegance plays a part in the overall structure but without QWAN it would be a pretty average &#x27;object&#x27;. For example, the design of the car has an &#x27;elegance&#x27; in its design but without the Zen &#x27;Quality&#x27; would probably not be put together well and be unreliable and shoddy&#x2F;buggy but it&#x27;s still a car built with all the patterns.<p>Quality comes from the knowledge, experience, effort and undivided attention put in by the craftsperson creating the &#x27;object&#x27; at a given point in time. The train analogy from Zen explains this well and it&#x27;s basically about focus in the moment you are doing something. This produces Quality, nothing else. You could argue that the parts to make up the car example above would give it Quality and fix most of the issues in the final product. This is true but only if every step in it&#x27;s production, from mining the minerals, design, drafting and manufacture were given with the same focus.<p>As far as software patterns are concerned I think we have strayed too far from inherent Elegance to strive for some other abstracted Elegance (inherent Elegance takes longer to control&#x2F;master!). The computer is very simple at its low level core (how it computes at least) but we keep building languages to make it simpler at a much higher level and in the process have made things very In-Elegant in between these levels.\nWe had (and still have) languages that take on the lowest level and abstract it to a higher level very simply, the most obvious being Lisp and Forth but the lack of processing power made them untenable for their time. Both of these languages have the &#x27;Elegance&#x27; CA discusses, you have complete freedom in creating the language&#x2F;s and language features you need, put some Pattern Mining in with some Quality and you really have something!')