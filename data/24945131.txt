Item(by='deathanatos', descendants=None, kids=None, score=None, time=1604081211, title=None, item_type='comment', url=None, parent=24941766, text='&gt; <i>The issue with encountering CSV in the wild is that everybody who appreciates standards and interoperability ditched it a long time ago.</i><p>I worked on a team that used CSV somewhat extensively. For the data we generated, it was RFC complaint. It&#x27;s pretty trivial to get RFC-compliant CSVs, too; most languages have a library — ours was in the standard library, too.<p>We also had a (&quot;terrible&quot;, as we joked) idea to create a subset of CSV that would contain typing information in a required header row. (We never did it, and it <i>is</i> a bad idea.)<p>&gt; <i>If you are consuming CSV files in the wild, you can be sure that whoever is supplying them to you is using horrible tools to create them and will be unwilling or unable to address issues you find in them.</i><p>…but this is absolutely true. We also consumed CSVs from external sources and contractors, and this was an absolute drain on our productivity. I&#x27;ve also worked with engineers of this caliber, and changing CSV wouldn&#x27;t change the terrible output. I&#x27;ve seen folks approach eMail, HTTP with a cavalier &quot;oh, it&#x27;s a trivial text format, I don&#x27;t need a <i>library</i>!&quot; attitude, and inevitably get it wrong. Pointing out the flaws in their implementation and that a library would fulfill their use-case just fine is just met with more hacks (not fixes) to try to further munge the output into shape. It is decidedly <i>not</i> software engineering. I&#x27;ve seen this even with <i>JSON</i>.<p>But yeah, even with RFC standard CSV, you shouldn&#x27;t be parsing it with awk. It is the wrong tool.')