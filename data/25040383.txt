Item(by='danudey', descendants=None, kids=None, score=None, time=1604958584, title=None, item_type='comment', url=None, parent=25037111, text='I think a better way to handle your approach would be to attempt to make it automatic; for example, if a program could detect its output as &quot;not a TTY&quot; and then (somehow) make an intelligent determination about what kind of object to pass (i.e. if there was a way for the program on the other end of the pipe to say &quot;Send me object data if you want!&quot;) then it would be useful, coupled with programs or commandlets to do filtering.<p>Having to manually specify &quot;you, output JSON! And you, input JSON! and also filter based on this difficult to remember for most people syntax!&quot; would be cumbersome; much easier to have &quot;commandlets&quot; built into the shell to handle this sort of thing in a sort of composable pipeline. For example:<p><pre><code>    host -t A example.org\n        | select arecords --limit 1\n        | ping -c1\n        | select pings.time --limit 1\n        | write --append outputfile\n</code></pre>\nAs others have said, Powershell supports this, and it&#x27;s completely awesome to work with. The fact that (assuming proper metadata on the binaries) I can do queries like this is awesome:<p><pre><code>    ~ &gt; Get-Command java -All | Sort-Object Version -Descending\n    \n    CommandType     Name        Version    Source\n    -----------     ----        -------    ------\n    Application     java.exe    15.0.1.0   C:\\Program Files\\Java\\jdk-15.0.1\\bin\\java.exe\n    Application     java.exe    11.0.6.0   C:\\Program Files\\Java\\jdk-11.0.6\\bin\\java.exe\n    Application     java.exe    8.0.2610.â€¦ C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath\\java.exe\n</code></pre>\nThis lets you, for example, have multiple versions of something installed, and have a script easily and cleanly get a list of all of them and either choose which one to use, or run something on each (e.g. for testing scripts).<p>There are also a lot of &quot;that&#x27;s weird but handy&quot; features, like being able to interact with environment variables the same way you do local files:<p><pre><code>    if (Test-Path &#x27;env:GIT_COMMIT&#x27;) {\n        echo &quot;GIT_COMMIT is $Env:GIT_COMMIT&quot;\n        $commit_hash = $Env:GIT_COMMIT\n    }\n</code></pre>\nExtremely impressed with Microsoft on this implementation. Also worth noting: you can install Powershell on your Linux or macOS systems and use it there as well. Semi-tempted to try implementing things in Powershell as the only cross-platform shell available.')