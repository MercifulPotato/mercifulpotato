Item(by='hansvm', descendants=None, kids=None, score=None, time=1603661496, title=None, item_type='comment', url=None, parent=24884561, text='This depends a little on what kind of learning and explorations you want to do. I typically reach for python with some combination of jax, scipy&#x2F;numpy, sympy, jupyter, matplotlib, seaborn, networkx, cython, and I&#x27;m sure a few others that I&#x27;m missing. It&#x27;s nice for a lot of problems, but in no particular order here are a few things that are lacking and might be better elsewhere:<p>- Complicated plots take some fiddling to get right, especially when you start adding dimensions or want to do anything nonstandard. I still don&#x27;t have a volume rendering solution I&#x27;m totally happy with. This is something that &quot;just works&quot; for a much broader variety of plots in some environments like Mathematica.<p>- This doesn&#x27;t usually matter for me since exploratory code rarely does more than a few billion things, so even in Python my experiments are instantaneous, but to get good performance I do have to call into an external library (numpy, networkx, etc) or drop down and cdef everything so that cython can make it fast. That isn&#x27;t especially arduous (and I don&#x27;t do a ton of Monte Carlo or anything where that would matter), but I&#x27;ve heard that&#x27;s supposed to be a point Julia improves on.<p>- Theorem proving is only kind of okay. You have simple things like hooks into SMT solvers and whatnot, or some weak first order theorem provers, but last I checked that part of the ecosystem is underdeveloped. I wind up writing something bespoke and tailored to the problem at hand every time something like this crops up. That&#x27;s not really what you want from a system helping guide your exploration of a problem.<p>Whichever solution you go with, I strongly recommend picking something with notebooks available. Jupyter and Mathematica really excel in this regard, and it makes interactive explorations painless in a way that even REPLs lack.')