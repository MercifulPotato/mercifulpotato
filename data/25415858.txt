Item(by='megameter', descendants=None, kids=[25418454], score=None, time=1607945628, title=None, item_type='comment', url=None, parent=25414902, text='The languages that last in a through-the-ages sense tend to be conspicuously small and own their domains well. Regular expressions are one such example - there are a few variations of syntax, but the basic idea has never changed, so it hasn&#x27;t experienced the kind of drift you have when you&#x27;re looking at a large ecosystem with lots of dependencies like browser JavaScript. Data serialization  languages like CSV and JSON fall in this category too - they&#x27;re simple enough to be used poorly, but that&#x27;s also what makes them good enough.<p>Once you start looking at big applications languages that integrate a lot of features, it&#x27;s a great wad of maintenance effort that you&#x27;re hoping someone else mostly takes care of. None of them are really all that stable over the long run.<p>And there really are two kinds of code projects - the ones where you&#x27;re maintaining it and the ones where someone else is maintaining it. If your work is open-source and popular you can end up being more of a maintainer than you anticipated, and really, you only have headspace for one or two of those maintenance projects, so while they&#x27;re good learning experiences, you don&#x27;t want to take them on lightly.')