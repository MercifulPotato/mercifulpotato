Item(by='CraigJPerry', descendants=None, kids=[25621930], score=None, time=1609673383, title=None, item_type='comment', url=None, parent=25621040, text='I’m thinking a SQL console mostly qualifies per the article’s idea of a repl. The break loop concept isn’t perfect there though.<p>I’ve always liked the python repl, breaking out a django repl and being able to manipulate the db via the api always felt like a super power to me when coupled with the expressiveness of basic python but last year i started dabbling with Clojure. My first “real” repl driven development experience.<p>2 things stood out for me:<p>1. You end up with some genuinely useful executable documentation and it just makes sense to me to preserve some of what i did in the repl while developing. I saw this first here: <a href="https:&#x2F;&#x2F;github.com&#x2F;stuartsierra&#x2F;component&#x2F;blob&#x2F;master&#x2F;dev&#x2F;examples.clj" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;stuartsierra&#x2F;component&#x2F;blob&#x2F;master&#x2F;dev&#x2F;ex...</a><p>2. Integration with your editor is essential - having a keystroke to send a form to the repl or evaluate in-line is a real productivity boost. It’s like writing code while an intelligent debugger is permanently live. You don’t need to wait for a compiler run then parse the feedback, it’s just instant in-line runtime feedback. “Paredit” is really sweet. I used calva in vs code for this and tbh it’s as attractive as the language in some ways. I have no idea how to meaningfully apply those concepts to something like python or javascript though. They just don’t lend themselves to that kind of structural editing.')