Item(by='jstimpfle', descendants=None, kids=[25518476], score=None, time=1608736727, title=None, item_type='comment', url=None, parent=25517273, text='&gt; Undefined behavior<p>UB in C has some unfortunate historic problems, and is _probably_ way too complicated. But UB per se is needed for a number of really important optimizations - for example, for array indexing using 32-bit integers you need to be able to assume that index-scaling operations (implemented as multiplications&#x2F;shifts) don&#x27;t overflow.<p>&gt; null terminated strings<p>null terminated strings are like 10-50% space savers compared to string + length tuples for realistic strings (which are small). They&#x27;re also easy to pass around and require no bikeshedding what&#x27;s the best string type.<p>You can easily make your own type if you want (struct String { const char *buffer; int length; }) or you can just use C++ and one of the more terrible full featured string types with all sorts of badly matching built-in memory management and what not.<p>(By the way, the issue with SetLength() that I described in my other comment applies to Pascal Strings, too)<p>(Oh, and Pascal&#x2F;Delphi also wants you to choose between PChar, String, AnsiString, WideString and what not, and for every little thing you&#x27;re doing you need to locate and use the proper API for whatever string type you&#x27;ve chosen. Or you need to do conversions before the calls, with all the necessary implicit memory allocations. Enjoy!)<p>(Oh, this is basically how I achieved a 100x-1000x speedup in a module of a business application in a short Delphi stint. I converted the string data to chunk-allocated bytes with manually computed indexing - instead of allocating thousands of little strings and throwing them back and forth. That reduced the total application startup time (including a lot of code that I never touched) from minutes (in some cases) to something bearable (1-5 secs).<p>&gt; with the attendant buffer overflows are not fundamental constants of low level programming<p>Of course they are. If you&#x27;re not controlling bytes directly, and deciding about data layout and tradeoffs, I wouldn&#x27;t call that low-level programming. YMMV. But - while my code is never fuzzed - it&#x27;s been years since I&#x27;ve been bitten by a string bug. The importance of this stuff is way overblown, and knowledge and experience how to program with simple data structures is only found in more obscure corners of the internet. Also, very little in systems programming is about strings.')