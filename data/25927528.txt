Item(by='pansa2', descendants=None, kids=None, score=None, time=1611751507, title=None, item_type='comment', url=None, parent=25926834, text='&gt; <i>Python is adding so many features that it&#x27;s becoming something &quot;not python&quot;</i><p>Here&#x27;s an example I came across recently. It&#x27;s from the official documentation for the `heapq` module, so I assume it&#x27;s now considered the idiomatic way to write a wrapper for each item in a priority queue:<p><pre><code>    @dataclass(order=True)\n    class PrioritizedItem:\n        priority: int\n        item: Any=field(compare=False)\n</code></pre>\nThat&#x27;s completely different to the way such a class would have been written even in Python 3.4. It would have been a simple class with an explicit `__init__` and `__lt__`. Instead, the above dataclass sits on top of a mountain of complexity and everything about it is implicit.<p>It&#x27;s in violation of both &quot;Simple is better than complex&quot; and &quot;Explicit is better than implicit&quot;.')