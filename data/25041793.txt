Item(by='Groxx', descendants=None, kids=[25042914, 25042020], score=None, time=1604969739, title=None, item_type='comment', url=None, parent=25032924, text='Though I very much like that this exists, and the documentation for contextlib describes its need and use very well[1], I do want to point out that this has always been possible with a tiny bit of recursive glue code like this[2], which works fine even in python 2:<p><pre><code>    @contextmanager\n    def multi(*cms):\n      if len(cms) &gt; 0:\n        with cms[0]:\n          with multi(*cms[1:]):\n            yield\n      else:\n        yield\n\n    # use with 0..N items, it behaves the same\n    with multi(...):\n      pass\n</code></pre>\nPrior to finding ExitStack, I&#x27;ve frequently seen people either give up and do something obviously wrong, or try to manually manage their own stack of __enter__ and __exit__ funcs (which works, but exception handling is non-obvious and often loses useful info).  Personally I prefer the recursive route, since it very obviously behaves the same as if you wrote the nesting out by hand.  It even retains accurate stack traces &quot;naturally&quot;, unlike most non-ExitStack tactics I&#x27;ve seen through the years.  ExitStack&#x27;s stack-correcting tactic is... a bit more &quot;interesting&quot;[3], though AFAIK it achieves roughly the same stack trace in the end.<p>Since ExitStack exists, and is likely more efficient (by how much, I have no idea), it&#x27;s probably a better choice for most situations.  And it&#x27;s just broadly a bit nicer for things that yield resources.<p>It&#x27;s always worth browsing stdlib documentation to find gems like this, there are quite a few neat things in most languages that seem fairly unknown.<p>[1]: <a href="https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;contextlib.html#supporting-a-variable-number-of-context-managers" rel="nofollow">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;contextlib.html#supporting...</a><p>[2]: <a href="https:&#x2F;&#x2F;repl.it&#x2F;@Groxx&#x2F;TepidRosybrownLocatorprogram#main.py" rel="nofollow">https:&#x2F;&#x2F;repl.it&#x2F;@Groxx&#x2F;TepidRosybrownLocatorprogram#main.py</a><p>[3]: <a href="https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&#x2F;blob&#x2F;master&#x2F;Lib&#x2F;contextlib.py#L564" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;python&#x2F;cpython&#x2F;blob&#x2F;master&#x2F;Lib&#x2F;contextlib...</a>')