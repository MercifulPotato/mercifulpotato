Item(by='fanf2', descendants=None, kids=None, score=None, time=1607328837, title=None, item_type='comment', url=None, parent=25329940, text='Yeah I have been thinking about something like that, but we donâ€™t know at compile time when NaN will turn up. (I suppose if you take abstract interpretation as far as you can, you get to partial evaluation, but I am not in that game!)<p>Another idea is to rely on Rust-specific optimizations: make the concrete type used by the result expressions into<p><pre><code>    enum ZeroNum {\n        Zero,\n        Num(f64),\n    }\n</code></pre>\nOperator overloading on this type works like it does on the separate Zero and Num types, but the cases are tested at run time instead of compile time. But this type is only used in a small context where the optimizer should be able to eliminate the checks in the same way I naively thought it would do for ops with 0.0.')