Item(by='dragonwriter', descendants=None, kids=None, score=None, time=1611363223, title=None, item_type='comment', url=None, parent=25875961, text='&gt; I think the large things in my admittedly limited experience were hooks and context API.<p>Which, sure, is where a lot of the new goodies are going, but in enterprise land (where I recall working on apps that were .NET 2.0 and .NET 1.1 that were first written well after either was current and are <i>still</i>, AFAIK, being maintained, and on those platforms) writing apps with the still-fully-support class components and ignoring the newfangled options would be completely within the scope of normal approaches. Having <i>new options</i> doesn’t make something less stable, not supporting the old way of doing things is unstable.<p>&gt; you gotta keep going frantically just to stay up to date with the newest libs and toys and APIs and current group think<p>AFAICT, there’s <i>no</i> active platform where that’s not true, if you <i>want</i> to stay up to date with the newest libs and toys and APIs and current group think.<p>In enterprise land, though, we typically (at least for any given product team, and often at a larger organizational level) tend to go to the opposite extreme: we plant our flag someplace that was out-of-fashion of the hipsters for years before we even started the project, and nothing that doesn’t actually break what we have built that happens after that really matters. Pushing things out of <i>that</i> rut often takes effort.')