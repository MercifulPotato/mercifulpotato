Item(by='nickjj', descendants=None, kids=[25261794, 25261585, 25264390], score=None, time=1606780732, title=None, item_type='comment', url=None, parent=25260482, text='&gt; What type of dependencies aren&#x27;t covered by this (I genuinely am a novice here so would love to be informed where this runs into problems)<p>The dependencies of the dependencies of what you have listed aren&#x27;t guaranteed to be locked.<p>For example, let&#x27;s say for arguments sake you were using celery.<p>When you install celery, by default these deps will also be installed: <a href="https:&#x2F;&#x2F;github.com&#x2F;celery&#x2F;celery&#x2F;blob&#x2F;master&#x2F;requirements&#x2F;default.txt#L1-L8" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;celery&#x2F;celery&#x2F;blob&#x2F;master&#x2F;requirements&#x2F;de...</a><p>Those aren&#x27;t very locked down. If you install celery today you might get vine 5.0.0 but in X months from now you might get 5.9.4 which could have backwards compatibility issues with what celery expects.<p>So now you build your app today and everything works but X months from now you build your same app with the same celery version and things break because celery isn&#x27;t compatible with that version of vine.<p>This happened a few months ago. Celery 4.3.0 didn&#x27;t version lock vine at all and suddenly all celery 4.3.0 versions broke when they worked in the past. That was tracked at <a href="https:&#x2F;&#x2F;github.com&#x2F;celery&#x2F;celery&#x2F;issues&#x2F;3547" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;celery&#x2F;celery&#x2F;issues&#x2F;3547</a>.<p>Docker doesn&#x27;t help you here either because your workflow might be something like this:<p>- Dev works locally and everything builds nicely when you docker-compose build<p>- Dev pushes to CI<p>- CI builds new image based on your requirements.txt<p>- CI runs tests and probably passes<p>- PR gets merged into master<p>- CI kicks in again and builds + tests + pushes the built image to a Docker registry if all is good<p>- Your apps use this built image<p>But there&#x27;s no guarantee what you built in dev ends up in prod. Newer versions of certain deps could have been built in CI. Especially if a PR has been lingering for days before it gets merged.<p>A lock file prevents this because if a lock file is present the lock file gets used, so if you built and included a lock file in version control, then CI will build what you pushed from dev, so the chain is complete from dev to prod for guaranteeing the versions you want. That is how it works with Ruby, Elixir, Node and other languages too. They have 2 files (a regular file where you put your top level deps and a machine generated lock file). A lock file in Python&#x27;s world would translate to what pip3 freeze returns.')