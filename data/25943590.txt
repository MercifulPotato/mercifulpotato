Item(by='valenterry', descendants=None, kids=[25943781], score=None, time=1611848605, title=None, item_type='comment', url=None, parent=25943358, text='I would say Haskell does a much better job but at the cost of much harder to predict performance.<p>Scala (which I use professionally) comes close to Haskell, but you need more discipline, because it has e.g. the concept of &quot;null&quot; and you have to avoid it.<p>What I like about Scala is that it has a sweet spot in the sense of a good number of jobs (way more than Haskell or Rust) and also having very good tooling (better than rust, not as good as Java though).<p>And Scala gives you this &quot;if it compiles, it works&quot; feel. But it has a steep learning curve.<p>I think F# is also great and underrated - same for OCaml. But because the languages are even more niche, they have less good tooling etc. What plethora of problems are you referring to btw?<p>Nim sounds exciting, but I&#x27;ve never used it either.<p>&gt; I felt that I want to have such a powerful language like Rust in my toolbelt again.<p>If you are up for systems development, I would stick with Rust tbh. I think it will offer you some good job opportunities down the road and in general have a bright future. I don&#x27;t think other languages like C++ or D can really compete with Rust in the long term.<p>Otherwise, I recommend to Haskell or Scala a try, depending on if you favor the learning experience or the practical gain.')