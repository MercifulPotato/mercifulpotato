Item(by='lmm', descendants=None, kids=[24933331, 24930161], score=None, time=1603968238, title=None, item_type='comment', url=None, parent=24928592, text='&gt; You might not want to use JS but a language “like” JS such as TS or Lua would definitely be on the table. Or just JS without the biggest warts.<p>When you remove the warts from JS there&#x27;s not much left. And I&#x27;d be pretty skeptical of someone starting a new project in Lua today. I think the mainstream choice for a &quot;blank slate&quot; language today would look something like Swift or Kotlin; Typescript can gets close, but it still has a lot of JavaScript baggage you&#x27;d want to strip out.<p>&gt; I feel that the promise of visual design tools fell quite short. Issues with version control and general traceability of changes and the ultimate non feature parity with code make me think that code first interfaces are the future.<p>All the big UI libraries end up offering some kind of markup&#x2F;constraint-based interface - which is ultimately data rather than code. And for editing that, a visual form designer makes a lot of sense. I like Qt&#x27;s approach - you visually edit a markup form that&#x27;s compiled into a class you can subclass, so you don&#x27;t have to deal with the problems of code generation, and the markup is relatively version-control-friendly.<p>&gt; Could you elaborate what do you mean? I assume REST apis but that is basically just HTTP.<p>I&#x27;m not the person you replied to, but thrift&#x2F;gRPC are a lot nicer to work with than REST APIs. Standardised protocol definitions that let you understand what kind of changes are or aren&#x27;t forward&#x2F;backward compatible, and no need to write a bunch of boilerplate by hand.<p>&gt; I think you have shown that JS ecosystem has grown very organically. I think this is because the nature of web developers was to put stuff out rather than really think about how do make it the correct way. I believe this is because of constraints, on a native platform you had the option to go down to assembly or create a new language or paradigm. On web only the browser vendor has this power, all the dev had was JavaScript.<p>It&#x27;s the same story as &quot;no-code&quot; tools: IT departments won&#x27;t let anyone install an application runtime, but they&#x27;re happy to install a &quot;document browser&quot; and let it run arbitrary code. It&#x27;s understandable, but depressing.')