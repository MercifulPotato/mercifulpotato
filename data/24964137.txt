Item(by='tgamblin', descendants=None, kids=[24964339, 24964214, 24968133, 24968035], score=None, time=1604280825, title=None, item_type='comment', url=None, parent=24964024, text='In Spack <a href="https:&#x2F;&#x2F;github.com&#x2F;spack&#x2F;spack" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;spack&#x2F;spack</a>), we encounter this when users install packages in deep paths within their home directories, or in deep paths within shared project directories (e.g., in NFS or Lustre on HPC machines). So we patch installed scripts that have long shebangs.<p>We want installed packages to work exactly as built, with the right versions of dependencies, and we don&#x27;t want to rely on the user getting their environment right to do that.  Spack users may install several versions of python or other interpreters.  This ensures that scripts work without a special environment.<p>There is another use case that is less emphasized here. sbang also lets you pass arbitrarily many arguments on the shebang line.  If you do this:<p><pre><code>    #!&#x2F;usr&#x2F;bin&#x2F;perl arg1 arg2 arg3\n</code></pre>\nAt least on Linux, you&#x27;ll get one argument: &quot;arg1 arg2 arg3&quot;. I think perl gets around this by parsing the shebang line itself, but sbang is more general. You can use it with &#x2F;usr&#x2F;bin&#x2F;env to pass more arguments than would otherwise be allowed.<p>See <a href="https:&#x2F;&#x2F;www.in-ulm.de&#x2F;~mascheck&#x2F;various&#x2F;shebang&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.in-ulm.de&#x2F;~mascheck&#x2F;various&#x2F;shebang&#x2F;</a> for an extremely comprehensive list of limitations on shebangs.')