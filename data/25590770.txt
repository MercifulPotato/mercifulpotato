Item(by='RobinL', descendants=None, kids=[25592542], score=None, time=1609403593, title=None, item_type='comment', url=None, parent=25587964, text='I think these are all fair points and a good reflection of the downside of Python.  But there are also some pretty huge upsides.  My view is that for any model of significant complexity, the pros of Python outweigh the cons from a technical point of view.<p>- Abstraction. It&#x27;s very difficult to effectively abstract parts of a model in Excel.  It&#x27;s a bit like a doctor having to &#x27;model&#x27; a human being as a collection of atoms, rather than having abstractions like organs, cells etc.  This makes it very hard to build re-usable components, so analysts end up reinventing the wheel.  You also quickly hit a &#x27;complexity ceiling&#x27; in Excel, above which mistakes and errors becoming much more likely, and complexity is very difficult to manage.<p>- Existing libraries provide a huge range of sophisticated calculations and operations for which we don&#x27;t need to write any code.<p>- Separation of concerns - particularly separating data from model.  Easy in Python, hard in Excel.  Another aspect of this is that using data science software promotes the use of tidy data[0] (i.e. clear thinking about how data should be structured).<p>- Unit&#x2F;integration tests.  For complex models, these are essential.  Users of Excel (even extremely clever&#x2F;competent people) don&#x27;t have have a great reputation for producing error-free spreadsheets, and I think this is an important reason why, alongside copy-paste errors.    The tools for testing in Excel&#x2F;VBA are rudimentary.<p>- Version control.  This is particularly important for historical reproducibility because it allows us to run past models, and also understand what has changed in the codebase since.<p>I appreciate some of the above is also possible in VBA, but if you&#x27;re writing an entire model in code and not really using Excel at all, my view is it&#x27;s better to use a more sophisticated programming language.<p>There is also an important cultural point of having to re-skill everyone, and I can see that in some context that means in the short run at least, Excel&#x2F;VBA may still be better overall.<p>I&#x27;ve written a bit more about all of this here:\n<a href="https:&#x2F;&#x2F;www.robinlinacre.com&#x2F;transforming_analytical_functions&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.robinlinacre.com&#x2F;transforming_analytical_functio...</a><p>[0] <a href="https:&#x2F;&#x2F;vita.had.co.nz&#x2F;papers&#x2F;tidy-data.pdf" rel="nofollow">https:&#x2F;&#x2F;vita.had.co.nz&#x2F;papers&#x2F;tidy-data.pdf</a>')