Item(by='adamkl', descendants=None, kids=None, score=None, time=1607630984, title=None, item_type='comment', url=None, parent=25376943, text='<i>&gt; &quot;doing the matching in multiple places and making sure that we cover all cases in all places is starting to look like a maintenance nightmare&quot;</i><p>That sounds more like an indictment of functional programming rather than Clojure specifically. I’m not a seasoned functional programmer but I often read  glowing praise from others about the use of pattern matching in their code.<p>I’m also not a professional Clojure programmer, but I thought that multi-methods were supposed to be the solution to the expression problem [0] that both class-based inheritance and pattern matching suffer from.<p>It was my understanding that multi-methods are supposed to allow open extension of behaviour without having to do what you just described; track down every instance, and cover every case.<p>In the case of multi-methods, couldn’t you just co-locate the method implementations next to the data they are supposed to operate on? You should be able to add&#x2F;modify behaviours without worrying about what the other data types are doing.<p>Honest questions here. Just trying to learn more about the real world pros&#x2F;cons of these approaches.<p>[0] <a href="http:&#x2F;&#x2F;wiki.c2.com&#x2F;?ExpressionProblem" rel="nofollow">http:&#x2F;&#x2F;wiki.c2.com&#x2F;?ExpressionProblem</a>')