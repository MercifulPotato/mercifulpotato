Item(by='pklausler', descendants=None, kids=None, score=None, time=1608660460, title=None, item_type='comment', url=None, parent=25500220, text='A few things: Vector operations were controlled by a VL (vector length) register, so the length (simd &quot;width&quot;) was dynamic.  On the Cray-2&#x2F;-3, you could set the length to zero, and turn vector operations into no-ops.  So vectorization of a loop with an unknown length generated a &quot;strip-mined&quot; loop in which each iteration performed 1-64 (later 128) iterations, and there was no epilogue problem as with SIMD.  The last proprietary vector ISA from Cray had a &quot;compute VL&quot; instruction that attempted to smooth out the lengths of the final iterations.<p>The Cray-1 line could &quot;chain&quot; the results of one vector operation into operand(s) of another without waiting for the first to complete.  (On the Cray-1, the later operation had to issue at the exact &quot;chain slot&quot; cycle at which the first result element appeared, so scheduling was fun; on the X-MP and later, &quot;flexible chaining&quot; was possible).  Scheduling vector code involved grouping operations into &quot;chimes&quot; that would run as parallel chained operations, and so long as you could pack more vector instructions into a chime without causing synchronization due to register use or blocking on a functional unit busy, you won.  Getting a 3-chime loop down to 2 chimes was fun puzzle solving, and if the loop used (say) the floating adder twice, you knew you could stop optimizing.<p>The Cray-2 didn&#x27;t chain, but the Cray-3 had &quot;tailgating&quot;, which was kind of the opposite -- a new vector result could start writing to a vector register that was in use as an operand without having to wait for that operand use to complete.<p>It helps to think about these vector machines as being pipelined (which they were).  A single chime sequence was basically flowing data from memory to functional units and back to memory without really needing to use the vector registers per se for anything unless an interrupt arrived in the middle of the sequence.')