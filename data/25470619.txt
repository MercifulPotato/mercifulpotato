Item(by='fossuser', descendants=None, kids=None, score=None, time=1608318213, title=None, item_type='comment', url=None, parent=25470203, text='Thanks for the questions - I&#x27;m not an expert on this stuff either, it&#x27;s just something I&#x27;ve been messing with for fun during covid.<p>&gt; Whereas (using my previous example) if&#x2F;when Diaspora is packaged in a way that most folks can easily install&#x2F;configure it, it&#x27;s likely to see much broader acceptance.<p>I&#x27;ve basically come to the conclusion that this is impossible to do successfully at scale, or at least impossible to do while keeping the original p2p intent alive on the modern stack. Attempts to do this fail either outright or by reverting back to being centralized (at best they retain a small core of highly technical users). The context that causes these attempts to fail is what Urbit is trying to fix with its design. It remains an open question whether this will work, but I think there&#x27;s more of a path for it with Urbit. I think things like the ability to push updates across the fleet is one example of a critical feature that fixes a common issue with versioning in federated systems, but there are some others.<p>&gt; Aside from automatic network updates (a useful feature indeed), I wonder what value Urbit has over a platform such as Diaspora[1], which, assuming I run my own pod (a similar situation to Urbit) provides me with full control over my data, as well as federation services and strong controls over the content I allow into my environment.<p>Urbit is more of a platform (&quot;Overlay OS&quot;) than a more narrow open social media protocol (diaspora, mastodon, etc.) - you can build applications on top of it that take advantage of its ability to route encrypted data between users. Standardizing the stack makes it easier to reason about and easier to build&#x2F;run these applications for all users that want them. You can&#x27;t really do this on the modern tech stack without armies of people keeping things up to date (which creates a strong incentive to centralize). Urbit&#x27;s design allows for decentralized applications (and Urbit itself) to actually work and stay working.<p>&quot;The state of your Urbit OS is a pure function of its event history. Itâ€™s auditable, inspectable, repeatable. You can actually trust it. Writing decentralized apps becomes vastly simpler than in the old world, since every node computes exactly the same way. The entire Urbit OS stack, from programming language to applications, is upgradeable over the network. For ordinary users, this makes for almost no system administration.&quot;<p><a href="https:&#x2F;&#x2F;urbit.org&#x2F;understanding-urbit&#x2F;urbit-os&#x2F;" rel="nofollow">https:&#x2F;&#x2F;urbit.org&#x2F;understanding-urbit&#x2F;urbit-os&#x2F;</a><p>Urbit&#x27;s light hierarchy I think is necessary for this to work and solves most of the hard problems around decentralization in a way I think is clever and pretty light-touch. I do think they could be better about the ownership and governance transparency (how much is owned by any individual), but I think they&#x27;re working towards this: <a href="https:&#x2F;&#x2F;urbit.org&#x2F;blog&#x2F;governance-of-urbit&#x2F;" rel="nofollow">https:&#x2F;&#x2F;urbit.org&#x2F;blog&#x2F;governance-of-urbit&#x2F;</a><p>&gt; What&#x27;s more, I&#x27;d want to use the technology for my own (admittedly narrow) purposes, without others having the power to shut me down or blackball me -- a possibility that a hierarchical model doesn&#x27;t preclude.<p>You&#x27;re able to escape to different Stars if you need to so in practice this shouldn&#x27;t be an issue (and Stars are incentivized to keep their users happy). It&#x27;d be more comparable to your ISP blocking access - they could do it, but they&#x27;re not likely to.')