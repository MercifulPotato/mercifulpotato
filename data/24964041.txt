Item(by='inaseer', descendants=None, kids=None, score=None, time=1604279747, title=None, item_type='comment', url=None, parent=24958504, text='Concurrency is hard - this was a great investigation into the bug using TLA+ by the author which suggested simplifications to the code in addition to the bug fix.<p>This reminded me of another reader&#x2F;writer concurrency bug posted by Tom Cargill in the c2 wiki caused by surprising behavior of Java monitors, which Hillel Wayne showed how to discover and then fix using TLA+ at <a href="https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;augmenting-agile&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;augmenting-agile&#x2F;</a><p>We were able to reproduce and fix the same bug using Coyote as well, and documented our experience at <a href="https:&#x2F;&#x2F;cloudblogs.microsoft.com&#x2F;opensource&#x2F;2020&#x2F;07&#x2F;14&#x2F;extreme-programming-meets-systematic-testing-using-coyote&#x2F;" rel="nofollow">https:&#x2F;&#x2F;cloudblogs.microsoft.com&#x2F;opensource&#x2F;2020&#x2F;07&#x2F;14&#x2F;extre...</a> I was pleasantly surprised at the finding and was definitely heartened by our experiment where we were able to reproduce the bug in actual working C# code without the need of an additional modeling step. While TLA+ is undoubtedly very powerful when it comes to modeling and catching concurrency bugs, I do hope tools like Coyote get wider adoption and are implemented for more languages so bugs in critical infrastructure code can be caught in a scalable and repeatable way while staying within just one language for implementation _and_ testing.')