Item(by='teleforce', descendants=None, kids=None, score=None, time=1603710750, title=None, item_type='comment', url=None, parent=24879482, text='Static single assignment (SSA) is probably the open secret recipe for unifying imperative and functional programming [1].<p>In addition, there are also ongoing research effort utilizing SSA for parallel computation as found in GPU, FPGA and TPU.<p>For GPU we have a promising proprietary array based language Static Assignment C (SAC) as the the modern version of APL that can be used for GPU with a familiar Algol based syntax [2].<p>For parallel programming of hardware (e.g. FPGA, TPU) we have the independent but related work by ETH Zurich&#x27;s LLHD [3] and Chris Lattner&#x27;s MLIR (from LLVM team) [4].<p>Just wait and watch for the progress on modern compiler design based on SSA, it will most probably solve one of the most difficult problems in modern computing landscape (i.e. effortless parallel processing and computation).<p>[1]<a href="https:&#x2F;&#x2F;www.cs.princeton.edu&#x2F;~appel&#x2F;papers&#x2F;ssafun.pdf" rel="nofollow">https:&#x2F;&#x2F;www.cs.princeton.edu&#x2F;~appel&#x2F;papers&#x2F;ssafun.pdf</a><p>[2]<a href="http:&#x2F;&#x2F;www.sac-home.org&#x2F;doku.php" rel="nofollow">http:&#x2F;&#x2F;www.sac-home.org&#x2F;doku.php</a><p>[3] <a href="https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;abs&#x2F;10.1145&#x2F;3385412.3386024" rel="nofollow">https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;abs&#x2F;10.1145&#x2F;3385412.3386024</a><p>[4] <a href="https:&#x2F;&#x2F;llvm.org&#x2F;devmtg&#x2F;2019-04&#x2F;slides&#x2F;Keynote-ShpeismanLattner-MLIR.pdf" rel="nofollow">https:&#x2F;&#x2F;llvm.org&#x2F;devmtg&#x2F;2019-04&#x2F;slides&#x2F;Keynote-ShpeismanLatt...</a>')