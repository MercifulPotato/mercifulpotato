Item(by='lispm', descendants=None, kids=[25991616], score=None, time=1612176116, title=None, item_type='comment', url=None, parent=25986239, text='Common Lisp allows to annotate code with type information, which can be checked at runtime. Also it&#x27;s object system works on classes and thus generic function have arguments for those classes.<p>Something like Common Lisp is a dynamically typed language, but where implementations can use knowledge about types, either at runtime or even sometimes at compile time.<p>SBCL<p><pre><code>  * (defvar *foo*)       ; a global variable *FOO*\n  *FOO*\n</code></pre>\nWe tell SBCL that the type of the variable is an integer between 0 and 10.<p><pre><code>  * (declaim (type (integer 0 10) *foo*))\n  (*FOO*)\n</code></pre>\nNow we try to set it to 30:<p><pre><code>  * (setf *foo* 30)\n</code></pre>\nSBCL detects the problem:<p>; in: SETF <i>FOO</i>\n;     (SETF <i>FOO</i> 30)\n; --&gt; SETQ \n; ==&gt;\n;   (THE (MOD 11) 30)\n; \n; caught WARNING:\n;   Constant 30 conflicts with its asserted type (MOD 11).\n;   See also:\n;     The SBCL Manual, Node &quot;Handling of Types&quot;')