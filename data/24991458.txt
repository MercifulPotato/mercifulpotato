Item(by='ocornut', descendants=None, kids=None, score=None, time=1604513339, title=None, item_type='comment', url=None, parent=24990610, text='That&#x27;s not true.<p>One of the benefit of IMGUI-style is to simplify user-data binding and avoid user-data sync&#x2F;duplication, but that&#x27;s entirely decorelated with layout consideration. You could perfectly have an editor manipulating widgets properties or their layout info (e.g. pos&#x2F;size&#x2F;anchor) somewhere and have the function fetch and use those infos.<p>If a widget exist in an user interface editor, regardless of the UI paradigm, some code will interact with that widget (read&#x2F;write the data or bind actions to some callback). So what are you describing and what exists everywhere are merely a way to edit properties and layout, which can be done in IMGUI style, and actual binding requires code either way.<p>&gt; or dynamically generate user interface resources from other programs.<p>Err... of course you can, and you are free to express them in whichever format is more adequate and convenient from your application. Generating user interface resources doesn&#x27;t mean &quot;generating code&quot;, that would be silly because the interesting part of that code is the data&#x2F;function binding, and that&#x27;s the one that makes less sense to magically generate.<p>&gt; You can&#x27;t iterate quickly on user interface development, because the user interface specification is a program that you have to recompile, not data that you can reload.<p>Then I&#x27;m sorry for you if recompiling and reloading code is a slow process in your workflow today. Many languages including C++ have hot-reloading techniques, and it is the standard for any so-called &quot;scripting&quot; languages like Python, Lua, Javascript to be easy to reload. _Because_ IMGUI have less state and less spread editing UI touches less code, less data structures, less layers and therefore it is easy to have that dynamic editing. With Dear ImGui I can add temporary tooling UI _inside a random function deep into the callstack_, reload the code while running, then remove that code when I&#x27;m done.')