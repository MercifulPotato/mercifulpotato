Item(by='gavanm', descendants=None, kids=None, score=None, time=1609898366, title=None, item_type='comment', url=None, parent=25641234, text='I work in the corporate performance test &#x2F; performance tuning space in a brownfield environment with a lot of co-dependent systems supported by a lot of different teams. My background prior to this was a programmer &#x2F; DBA.<p>It&#x27;s all hard - but it&#x27;s not any harder than building and testing end to end solution working in the equivalent environment - there&#x27;s a lot of similarities, benefits and also disadvantages. Overall performance testing provides<p>&quot;Performance Testing&quot; often covers quite a few different areas:<p>- User Experience (more difficult with SPA and Mobile applications)<p>- Server Response<p>- Capacity Planning &#x2F; Utilization<p>- Performance Tuning<p>- Enterprise &#x2F; Systems Architecture<p>- Production Support for Performance Problems<p>- Monitoring (both for testing purposes and planning monitoring for production)<p>Like programming, most the time actual coding &#x2F; scripting isn&#x27;t the challenge. Some of the bigger challenges I deal with are:<p>- Test Data Setup, Availability, Size, Distribution, Consistency, Security, Backup&#x2F;Restore over multiple systems<p>- Understanding &#x2F; Confirming Scenarios<p>- Complex Application Authentication (more secure authentication methods can be harder to test or work-around)<p>- Data integrity &#x2F; security (difficult to use SaaS solutions for regulatory reasons)<p>- Environments, Sizes, Accuracy (Prod Like), Support (Application and Infrastructure), Monitoring, Limitations, Architecture<p>- Load Planning&#x2F;Estimation&#x2F;Reporting (both in Performance and Production)<p>- Deployment Planning &#x2F; Management<p>- Investigating Performance Problems<p>- Working with lots of different development teams.<p>A lot of the recent trends in DevOps &#x2F; Agile &#x2F; IaaS &#x2F; PaaS are helping improve the situation with significant improvements to deployments and scaling.<p>Good commercial tools and OSS tools are available. The move to web &#x2F; HTTP based systems has actually made testing much simpler because there&#x27;s really only one protocol to target these days (HTTP) - older applications platforms using non-HTTP based protocols often make things more difficult. There are still some smaller niche areas for industries such as call centres where there are physical requirements (such as generating call traffic), and Desktop Virtulization &#x2F; Remote Access (due to COVID) that don&#x27;t fit the more common testing patterns. Mobile App performance testing (which is closer to User Experience testing) is also relatively immature compared to SPA and HTTP testing. There are options out there though.<p>I also view there being (at least) two different traditional paths into performance testing - Functional Testing (Non Technical) and Developers&#x2F;Tech Admin (Technical) who bring different strengths and weaknesses to large performance testing efforts.<p>I&#x27;m a fairly big fan of trying to push most performance testing down into individual application teams as they know the technical details of the applications and often have better technical skills than a lot of performance testers. However, you still need cross-system &#x2F; whole environment perf testing where you have complex interconnected systems and dependencies.<p>It&#x27;s difficult trying to balance everything between purely scientific &#x2F; methodological and pragmatic (just prove it&#x27;s capable of meeting the volumes) approaches.')