Item(by='jwr', descendants=None, kids=None, score=None, time=1604048015, title=None, item_type='comment', url=None, parent=24939863, text='That is true if you take a narrow view&#x2F;definition of &quot;STM&quot;. It&#x27;s true that atoms are enough in most cases, but the reason they work so well is because the rest of the language is designed with STM in mind. You need immutable data structures throughout the language in order to be able to use atoms for synchronization: when you access a data structure through an atom, you want to be sure you are getting your own &quot;snapshot&quot; that no one else will modify.<p>This is why I frown when people say &quot;Clojure STM is useless&quot; or &quot;nobody uses Clojure STM&quot;. Everybody uses the foundations, and the reason why the foundations are so useful is precisely because they were designed for STM.<p>I&#x27;ve been writing Clojure apps for many years now, and it is true that atoms are usually enough. I used agents in the past for their serialization capability, but these days core.async is usually a better tool. I never found a use case for refs that could not be simplified. In most applications I wrote, transactionality was needed together with persistency, which shifted the responsibility to a database.')