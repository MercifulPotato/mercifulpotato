Item(by='mrkeen', descendants=None, kids=None, score=None, time=1611571550, title=None, item_type='comment', url=None, parent=25899433, text='Yes, smooth sailing in Haskell.<p>Define the datatype and let GHC generics and the Aeson library handle the rest.<p>The worst-case scenario is when keys in your JSON conflict with keywords or existing functions: &#x27;id&#x27; and &#x27;data&#x27; are pretty common.  It means you need to rename your datatype fields to something like &#x27;_id&#x27; and &#x27;_data&#x27;, and provide a mapping function to Aeson.<p>Where the &#x27;fully automatic&#x27; declaration looks like:<p><pre><code>    instance FromJSON Coord\n</code></pre>\nThe declaration where you remap to avoid name clashes could look like:<p><pre><code>    instance FromJSON Coord where\n        parseJSON = genericParseJSON defaultOptions { fieldLabelModifier = dropWhile (==&#x27;_&#x27;) }</code></pre>')