Item(by='mythz', descendants=None, kids=[25601043], score=None, time=1609475167, title=None, item_type='comment', url=None, parent=25599717, text='&gt; C# is basically the same thing from a VM perspective, an interpreted bytecoded high-level language, but tied to windows<p>C# is not tied to Windows, some new features in the latest C# 9.0 doesn&#x27;t even support running on the Windows-only classic .NET Framework.<p>All new .NET development + C# features is being invested into .NET 5+ (FKA .NET Core), i.e. the high-performance cross-platform runtime.<p>&gt; The nice thing about Java is the deployment and management tooling. It&#x27;s cross-platform and mature. C# is not nearly as good in this respect, although with the open-source it is finally free to move with that.<p>Citation needed, I deploy my .NET 5 Apps with Linux tools, either rsync, Docker as well as AWS ECS. All clean + simple, only requires a single command to publish your App ready for distribution, that you can either rsync across or include it in the runtime image of your Docker build.<p>Tried to publish a Java package last week and the whole experience was a shit show, by far the worst experience of all languages where the recommendation to publish a package is to push it to bintray first, make it available to jCenter than sync it to Maven, where you need to get manual approval to include it in jCenter then you need to create yet another account&#x2F;credentials with a 3rd Party which requires a manual request via a damn Jira ticket. Then each package manager has different requirements as to what a package needs, I could publish it to bintray but couldn&#x27;t get it to jCenter without uploading a POM which new Kotlin projects aren&#x27;t created with, then MavenCentral requires a stricter POM and Java Docs but there&#x27;s no standard way to publish to a repository as bintray needs their own non-compatible task, so now I have duplicated generated POM&#x27;s in my gradle build to satisfy different repositories, for bintray I needed to hook into their bintrayUpload task and generate the POM just just before it uploaded the package which I needed to decompile its sources to find out where exactly the POM file needs to be written to, no examples of which existed for Kotlin build.gradle.kts scripts that new Kotlin projects are created with. Then there&#x27;s the case that every build.gradle example uses configuration that is already deprecated and Java&#x2F;gradle seems to be the only one requiring uploading binary .jar&#x27;s with your source projects.<p>Every other language has a single repository you can publish to that you don&#x27;t need to jump hoops to get, published using standard tools, simple, clean, straight-forward &amp; well documented.')