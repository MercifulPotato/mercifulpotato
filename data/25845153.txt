Item(by='patrec', descendants=None, kids=None, score=None, time=1611142261, title=None, item_type='comment', url=None, parent=25837469, text='Vanilla lua does a logarithmic search (still much better than a linear scan you&#x27;d get with ipairs), but I don&#x27;t <i>think</i> that&#x27;s typically true in luajit, although I admit I might be quite wrong about this.<p>Here is some relevant Luajit code: &lt;<a href="https:&#x2F;&#x2F;github.com&#x2F;LuaJIT&#x2F;LuaJIT&#x2F;blob&#x2F;v2.1&#x2F;src&#x2F;lj_tab.c#L690-L701&gt;;" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;LuaJIT&#x2F;LuaJIT&#x2F;blob&#x2F;v2.1&#x2F;src&#x2F;lj_tab.c#L690...</a> it definitely seems to do a constant time lookup for the length in some cases only falling backing to binary search if the array contains no valid length hint. Also, I&#x27;m pretty sure most of the linear algebra libs I&#x27;ve seen overload # for vector&#x2F;matrix&#x2F;array classes (and give O(1)); IIRC it&#x27;s also not at all uncommon to do that if you create some C array backed data structure via luajit&#x27;s FFI. Regardless of &quot;length&quot; the fact that e.g. ffi.new(&quot;double[3]&quot;) will be zero and not one based is already a major source of friction.<p>In any case, in my opinion there is not first and foremost a problem with &quot;length&quot; as such. I think the overalll conclusion is that the fairly bold move to have a single all-purpose hybrid container data structure was not a success and is not something that other languages should try to replicate. Even luajit fails to make this work really well, despite heroic efforts.')