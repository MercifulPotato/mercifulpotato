Item(by='Minor49er', descendants=None, kids=[24701059], score=None, time=1601993419, title=None, item_type='comment', url=None, parent=24697417, text='I agree with the author, though the advice might be harder to follow in certain weakly-typed languages. For example, in PHP, developers have often used a false or null value to represent emptiness. An empty() check will return true on these values. However, booleans and nulls are not iterable. So if you tried to do something like this:<p><pre><code>    $stuff = null;\n    foreach ($stuff as $item) {\n        var_dump($item);\n    }\n</code></pre>\nyou would be greeted with an &quot;Invalid argument supplied for foreach()&quot; warning. So it&#x27;s common to see the extra code that the author mentions:<p><pre><code>    $stuff = null;\n    if (! empty($stuff)) {\n        foreach ($stuff as $item) {\n            var_dump($item);\n        }\n    }\n</code></pre>\nYou can get around this by using a null coalesce (??) or a ternary shorthand (?:) for null or boolean values respectively. This shows the former which gets closer to what the author describes for this situation, though it may sacrifice some readability under certain situations:<p><pre><code>    $stuff = null;\n    foreach ($stuff ?? [] as $item) {\n        var_dump($item);\n    }</code></pre>')