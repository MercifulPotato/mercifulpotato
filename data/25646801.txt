Item(by='malwrar', descendants=None, kids=[25648429], score=None, time=1609862108, title=None, item_type='comment', url=None, parent=25646584, text='These sorts of PE info dumping tools are only really useful for debugging any code you write that tries to parse and&#x2F;or write PE files. Most reverse engineering use cases already have purpose made tools created for them and directly interrogating the PE headers isn&#x27;t typically necessary.<p>In my experience, messing with PE files is useful in a few areas:<p><pre><code>  - Compiler Development (PE files tell Windows how to load your code into memory, what resources they need&#x2F;provide, and how to execute your code, etc)\n  - Reverse Engineering (Extracting the above info, plus locating executable files in memory and dumping them back to disk if they&#x27;re e.g. packed)\n  - Game Cheating&#x2F;Malware (You can simulate the PE loading process to turn e.g. a DLL into what basically amounts to shellcode, allowing you to skip putting your stuff on disk, to make your payloads harder to locate in memory, and to write custom obfuscation as part of the loading process)\n</code></pre>\nThere might be more uses I&#x27;m not thinking of, but those are the three I have experience with. It&#x27;s a handy bit of trivia to know if you like dicking around w&#x2F; systems-level stuff in Windows for sure.<p>Probably doesn&#x27;t need to be said, but just in case PE is how Windows formats .exe, .dll, .sys, etc executable files.')