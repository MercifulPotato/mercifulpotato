Item(by='magicalhippo', descendants=None, kids=[25601703], score=None, time=1609471534, title=None, item_type='comment', url=None, parent=25595377, text='Just to give a bit of context, I&#x27;ve been programming for almost 30 years, using many different languages. I&#x27;ve worked on many things, but of particular relevance I was part of a small team for several years which amongst other things had a 100kloc Python project that I did significant work on. I continue to use Python for all sorts of smaller projects, and for the most part enjoy it a lot. I&#x27;ve worked on large C++ code bases for years as well, and many of the usual suspects.<p>To take the most subjective part first, for me, I just find implicit blocks much harder to parse than with explicit start&#x2F;stop symbols&#x2F;keywords. My eyes and brain just seem to have an easier time identifying the explicit blocks. It&#x27;s like writing sentences without using a period to end them, but just three spaces say.<p>Yes it&#x27;s a bit more verbose, but I find it really helps readability for me. This of course might very well be the way my brain works, or the way my brain learned to work as a result of my first programming experiences, hence being subjective.<p>A bit more objectively, in my experience it seems easier for myself and others to make mistakes at the end of implicit blocks, either having a line indented that shouldn&#x27;t be or vice versa. It is my experience that with explicit blocks those faults tend to stick out like a sore thumb.<p>I even have an add-on for my current IDE which, amongst other issues, complains loudly about that. If the language had had implicit blocks it couldn&#x27;t really do that to the same degree.<p>I also find explicit blocks is easier to use with tools, especially when diffing. When using a language with explicit blocks I can enable the ignore whitespace feature of the diff tool and if say an outer &quot;if&quot; was added, you get about two lines that changed. With implicit blocks all the lines of the block change, so you got to scan through them to make sure no &quot;real&quot; changes were made. I tended to spend a lot longer on non-trivial Python merges compared to say C++ due to this.<p>I&#x27;ve also had the misfortune to have to edit Python code using only simple tools, without any Python-magic or similar. It&#x27;s a royal pain if you have to copy&#x2F;paste code around.<p>But yeah, I accept it mostly boils down to preference. I mean clearly there are some more objective metrics, but how you weigh those will be subjective so, yeah...')