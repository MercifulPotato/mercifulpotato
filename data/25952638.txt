Item(by='dartmoose', descendants=None, kids=[25953488], score=None, time=1611885505, title=None, item_type='comment', url=None, parent=25941765, text='My understanding of this paper (please comment&#x2F;correct based on your understanding):<p>* Instead of using a single latent feature per each implicit surface, the authors propose using a &quot;volume&quot; of latent features per each surface. This allows for the NNs to better capture the geometric detail while remaining relatively shallow. The result is a more accurate and faster to compute neural SDF. Contrary to the claim of another comment, the neural SDF alone is not the interesting part of this paper--the prior works points to at least three other papers that have explored the idea of representing an SDF with a neural net: Park et al.&#x27;s DeepSDF <a href="https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1901.05103.pdf" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1901.05103.pdf</a>, Mescheder et al&#x27;s Occupancy Networks <a href="http:&#x2F;&#x2F;www.cvlibs.net&#x2F;publications&#x2F;Mescheder2019CVPR.pdf" rel="nofollow">http:&#x2F;&#x2F;www.cvlibs.net&#x2F;publications&#x2F;Mescheder2019CVPR.pdf</a>, and Chen et al&#x27;s Learning Implicit Fields <a href="https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1812.02822.pdf" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1812.02822.pdf</a> All very interesting papers.<p>* When I say a &quot;volume&quot; of latent features I specifically mean a voxel-grid where the corners of each voxel are latent features and any position X has a corresponding feature Z which is simply the trilinear interpolation of the features on the corners of the voxel. As the authors mention, they try to keep this sparse by leaving any voxel that does not contain the surface &quot;empty&quot;.<p><i>The authors use an octree to create L different feature volumes. As L becomes larger, the resolution of the feature volume increases which means that more fine grained details can be encoded as features.<p></i>Finally, the authors describe a rendering procedure that makes use of their LOD model (still need to read this part more thoroughly).<p>Some additional thoughts:<p>Why are SDFs useful at all?<p>One comment suggests this is a form of &quot;compression&quot; but meshes have a far smaller memory footprint and are computationally less expensive to render. Ray tracing is extremely fast, largely due to the fact that as a primitive operation in graphics so much time and energy has been invested into understanding how to make it faster with various acceleration structures, like BVHs.<p>So are SDFs actually useful?<p>Yes. Triangle or polygon meshes are great when you have them, but are terribly challenging to work with for reconstruction tasks. For instance, you effectively have to pause occasionally during reconstruction to fix your mesh up so that it isn&#x27;t complete garbage (triangles with small angles, self-intersections, extremely lopsided side lengths, etc). SDFs support arbitrary topology painlessly, which is why they show up so much in reconstruction&#x2F;computer vision.<p>So why do we need neural nets to represent them?<p>I think the primary reason you use a neural network to represent a signed distance function is because it&#x27;s a more efficient representation than storing the SDF in some sort of grid structure (maybe someone else has more thoughts on this?). As a side benefit, it can simplify any sort of differentiable rendering since the surface itself already is represented in a manner that is naturally differentiable via back-propagation.')