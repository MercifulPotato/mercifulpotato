Item(by='013a', descendants=None, kids=[24975110], score=None, time=1604352636, title=None, item_type='comment', url=None, parent=24972771, text='Really? Alright then, right now, off the top of your head: What are the set of TLS ciphers which are generally regarded by the security community to represent the highest security standards?<p>I have no clue. The AWS ALB 2016-08 security policy allows for ECDHE-ECDSA-AES128-GCM-SHA256 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES128-SHA256 ECDHE-RSA-AES128-SHA256 ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES128-SHA  ECDHE-ECDSA-AES256-GCM-SHA384 and another 16 or so.<p>Of course, that&#x27;s the default ALB policy. I didn&#x27;t know that. There&#x27;s a more strict TLS policy available: TLS-1-2-2017-01. Do you know what the difference between the 2016-08 and TLS-1-2-2017-01 policies are? I don&#x27;t. I could look it up. Well, beyond disallowing TLS 1.0 and 1.1, TLS-1-2-2017-01 also disallows the ECDHE-ECDSA-AES128-SHA ECDHE-RSA-AES128-SHA ECDHE-RSA-AES256-SHA and ECDHE-ECDSA-AES256-SHA ciphers. Cool.<p>This shit is VERY domain specific. Its arcane. The way I worded those last three paragraphs was patronizing, to establish a point: No one knows this off the top of their heads. This naturally leads to two things I believe are true at any company (beyond a certain &quot;garage&quot;-scale): As few people as possible should worry about this, and even those people should encode it in some kind of automation that guarantees they don&#x27;t have to be hands-on when configuring future resources which need this information.<p>Otherwise: YOU WILL GET IT WRONG. Guaranteed, at some point, maybe today, maybe in eight months, if you let every developer at a company worry about TLS ciphersets, one of them will screw it up. That&#x27;s not patronizing; that&#x27;s human nature. We&#x27;re fallible. We don&#x27;t all have massive domain expertise, and even the ones who do make mistakes. Manually configuring things is a guaranteed recipe for mistakes.<p>I&#x27;m using ciphersets as an example, but these things are everywhere. I don&#x27;t trust any developer, including myself, to remember that by default most JWT libraries allow an alg of &quot;none&quot; to pass verification. I don&#x27;t trust anyone to remember that S3 buckets by default allow per-object public read settings without a separate non-default bucket-level setting to block it. I don&#x27;t trust anyone to remember that SQS FIFO queues only allow one concurrent reader per read group (nor understand what that means in practice, because this issue is Literally a weekly thing on &#x2F;r&#x2F;aws), or to know that hosting a public website on S3 is startlingly easy to DoS via egress network charges and AWS wont refund it.<p>Capital One, one of the biggest banks on the planet, was hacked because of a misconfigured S3 bucket. I have relieved myself of the hubris of believing I can do this on my own, a hubris every developer needs to relieve themselves of. Encode this stuff into automation and have every eye you can find inspect your changes. And while there&#x27;s room to give developers a lot of power in this setup, part of that is not &quot;here&#x27;s an AWS account, have fun&quot;.')