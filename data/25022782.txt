Item(by='orbital-decay', descendants=None, kids=[25026967], score=None, time=1604807779, title=None, item_type='comment', url=None, parent=25020363, text='Programming, in the traditional sense, has to be formal and unambiguous, that&#x27;s the main issue. The complexity can arise from seemingly nothing. Here&#x27;s an extreme math counterexample: Fermat&#x27;s last theorem. Proving it seems easy on the surface because it&#x27;s so trivially formulated, yet it took centuries for mathematicians to actually do it.<p>Commoditized programming faces the same problem: many problems seem easy at first, but when you are trying to solve them with your shiny low-entry-barrier interface, you are hitting a fundamental ceiling you never knew existed. There&#x27;s never been a shortage of unsuspecting newbies trying to parse HTML with regular expressions, as an example.<p>There were plenty of attempts to make end users program things.\nLISP machines and Genera (and Emacs, which is IMO the closest existing thing to the &quot;ubiquitous programmability&quot; you propose). BASIC, which was the main user interface for many early personal&#x2F;home computers. Visual programming environments. Spreadsheets. Some of them survived and are very useful for simple cases, like programming materials visually in Blender, or automating stuff in IFTTT, but all of them suffer from the same issue: [non-AI] computers are too dumb and expect more or less exact instructions. That leaves the complexity on users&#x27; shoulders. Once you go Turing complete (and often even without that), syntax or entry barriers don&#x27;t matter much - you either train for years to be able to formulate the human-generated problem, encode it for a computer, and change it as the need arises, or you hit a wall with a low entry barrier tool.<p>Programming is easy to learn, sure, there&#x27;s no reason it should be hard. But it&#x27;s fundamentally hard to master. And it&#x27;s not about syntax or high friction interfaces (which can often be more productive for a trained person solving a hard problem, actually).')