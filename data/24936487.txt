Item(by='hombre_fatal', descendants=None, kids=None, score=None, time=1604008250, title=None, item_type='comment', url=None, parent=24936024, text='You&#x27;re just describing any software problem where things aren&#x27;t static or you haven&#x27;t yet mapped the domain. Storing the whole response in the database so that you aren&#x27;t losing data is a good solution while you make your logic robust against the domain of values.<p>You run into this talking to an undocumented API for example. But notice that to &quot;query it later&quot;, you still have to write&#x2F;polish the rest of your logic to handle the actual data which is how you end up with a system that doesn&#x27;t need to store every API response to disk. This isn&#x27;t a web thing, it&#x27;s any time you don&#x27;t have a 100% handle on the interface between two systems.<p>Nothing to do with Rails, though. You were trying to create harder to change solutions based on a premature understanding of the values you were working with which caused churn in solutions (like DB columns) that are annoying to change frequently.<p>But in that situation, you as an engineer have to be able to step back and go &quot;okay, what can I do to handle this at a more dynamic layer until I understand what I&#x27;m working with?&quot;')