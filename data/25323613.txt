Item(by='tylerhou', descendants=None, kids=[25325182], score=None, time=1607264518, title=None, item_type='comment', url=None, parent=25323310, text='To a degree, but templates and constexpr don&#x27;t support a bunch of features like compile-time field enumeration and introspection + code generation.<p>For example, let&#x27;s say I have a bunch of structs:<p><pre><code>  struct GeoCoordinate {\n    int lat, long;\n  };\n\n  struct GeoArea {\n    std::vector&lt;GeoCoordinate&gt; perimeter;\n  };\n\n  struct Place {\n    std::string name;\n    std::string contact_number;\n    GeoArea area;\n  };\n</code></pre>\nNow I need to serialize these structs into a format to be sent over the wire. Currently, I have a few choices:<p>1. Use an off-the-shelf library like protobuf (disclaimer: I work for Google). Then I have to convert my code to a protobuf definition and rely on its code generator to perform [de]serialization. I also have to hope that my library supports all the field definitions I need.<p>2. Write macros to define each field in each structure. These macros perform some arcane magicks that somehow create the necessary [de]serialization functions. These macros are difficult to write and maintain (or I find a library).<p>3. Manually define the methods myself. This is tedious, hard to maintain, and error prone.<p>What if I could write some code <i>in C++</i> which could read the structure and generate the appropriate serialization code? Something like (syntax hypothetical):<p><pre><code>  Serializable(Class) {\n    std::string serialize() {\n      std::string output;\n      for (auto member : Class.members()) { &#x2F;&#x2F; loop unrolled at compile time\n        if (member.type == int) {\n          output.append(std::format(&quot;{:10}&quot;), member.get())\n        } else if (member.type == std::string) {\n          ...\n        } else if (member.type == std::vector) {\n          ...\n        } else if (std::has_metaclass_v&lt;member.type, Serializable&gt;) {\n          output.append(member.get().serialize());\n        }\n      }\n    };\n  };\n\n</code></pre>\nThen I could annotate my classes with Serializable instead.<p>See <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4AfRAVcThyA" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4AfRAVcThyA</a>.')