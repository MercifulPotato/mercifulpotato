Item(by='jcranmer', descendants=None, kids=[25327704, 25327690], score=None, time=1607295443, title=None, item_type='comment', url=None, parent=25326966, text='There&#x27;s arguments to be made on both sides, but I think the problem with Linus&#x27;s solution here is that it doesn&#x27;t quite clearly establish the assumption being made, which gives it a bit too much of the &#x27;cleverness&#x27; flavor that you allude to. A better implementation would be one that does establish why the use of pointers make sense:<p><pre><code>   void remove_entry(node_t *entry) {\n     &#x2F;&#x2F; curr_ref is the address of the link pointing to curr\n     node_t **curr_ref = &amp;head;\n     node_t *curr = *curr_ref;\n     while (curr != NULL &amp;&amp; curr != entry) {\n       &#x2F;&#x2F; Advance curr_ref and curr\n       curr_ref = &amp;curr-&gt;next;\n       curr = *curr_ref;\n     }\n     if (curr) { *curr_ref = curr-&gt;next; }\n   }\n</code></pre>\nChoosing names somewhat more rationally, and making it clear that &quot;curr&quot; always points to the current node, and that &quot;curr_ref&quot; is the address of whatever pointer we followed to arrive at curr, makes it easier to establish the invariant that updating curr_ref is sufficient to insert or remove curr into a list, no matter if it&#x27;s referring to the head link of a list or the next link of the prior node.')