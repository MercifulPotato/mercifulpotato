Item(by='yowlingcat', descendants=None, kids=[25556322, 25555921], score=None, time=1609118643, title=None, item_type='comment', url=None, parent=25555355, text='&gt; but don&#x27;t try to think of this stuff as anything on the same level as the sciences.<p>Depends on what kind of sciences we&#x27;re talking about. For an enormous span of the sciences, serious reproduction and funding crises have emerged to place whole fields on the verge of if not the middle of conceptual and practical collapse (hence the continuing brain-drain from science into tech).<p>At a deeper level, I think you&#x27;re making a lot of assumptions that don&#x27;t seem rooted in reality. Worse still, you don&#x27;t seem to feel any need to root them in reality -- you minimize and diminish uncomfortably sharp edges in a very whiggish kind of historiography. Why is that? Your conjecture is that architecture is not well understood because it is not formalized. What if you&#x27;re merely conflating cause and effect, and software architecture has not been formalized because it is not well understood? Then formalization is merely a memento of something else -- something far more primal, something far more deeper. And I think (though only you can say) that you might be afraid of that.<p>When we learn how to use powerful tools, we want to use them for everything. That includes philosophical ones. What if you&#x27;re taking it for granted that architecture will &#x2F;ever&#x2F; reach the level of formalization as the hard sciences? After all, there is something a bit hubristic about that. Wouldn&#x27;t it be ironic to have such a deep faith in formalization so as to ignore (and even invert) the fundamentally unidirectional flow from phenomena to formal abstraction? But that seems to be what you&#x27;re doing. After all, you have no proof that formalism, as a tool in and of itself, lends any utility to making sense from and building structures for the world.<p>It is the observations, the data accumulated in enough curious detail, kept preserved through painstaking work via the investigator and archiver, which provide material for abstraction to compact into greater expression: succinctness, clarity, and semantic power. But without that raw material, the abstraction is nothing but window dressing. It is onanistic and serves no formal purpose. And frankly, software as a field is very young by human standards. For it to not have the level of formal abstractions far older human pursuits have is a function of its youth. I think that to love formal abstraction for its own sake is an obscurantism of its own, and this kind of thing has a name: it&#x27;s called scientism.<p>Bertrand Russell tried to axiomatize mathematics into logic, and completely failed. And not because he was unintelligent. He failed because the opposite premise was vindicated by reality. What will you do if the same holds true for you here? Even he was so taken and seduced with the elegant possibility of axiomatizing mathematics that he was unable to see the logistical (and finally logically provable) impossibility of doing so. And finally even he had to ultimately give up his endeavor as directly fruitless (although the silver lining was that his work did pave the way for a lot of crucial discoveries). Consider whether you&#x27;re doing the same thing.')