Item(by='Tiki', descendants=None, kids=None, score=None, time=1605568759, title=None, item_type='comment', url=None, parent=25114319, text='A lot of questions came to mind when I read this bit of the article,<p>&quot;If you want to find a particular item in a list with N items classically, you need to check all N items—N evaluations—because the item you are searching for could be the last in the list. (If you are sure that the item is in the list, the correct number of evaluations is N-1, but this does not matter much here.) This means searching through an unsorted database with N entries takes—classically—N steps. However, with Grover’s quantum algorithm—which can be viewed as a quantum random walk—it takes √(N) steps. It allows for the same quadric speedup as the quantum random walk. For large databases—lists with big N— this can mean a lot fewer evaluations.&quot;<p>As odd as quantum computers are, I couldn&#x27;t figure out how you could evaluate static values in a database that were never evaluated... the answer was, it can&#x27;t.<p>From Wikipedia (<a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Grover%27s_algorithm" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Grover%27s_algorithm</a>)\n&quot;The database is not represented explicitly. Instead, an oracle is invoked to evaluate an item by its index. Reading a full data-base item by item and converting it into such a representation may take a lot longer than Grover&#x27;s search.&quot;<p>In essence, you need a completely new database with quantum capable representations. Even with this trade-off, I could imagine &#x27;big data&#x27; adapting this type of workflow once quantum computers become viable.')