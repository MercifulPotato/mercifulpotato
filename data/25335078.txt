Item(by='jsmith45', descendants=None, kids=None, score=None, time=1607364883, title=None, item_type='comment', url=None, parent=25329387, text='The real purpose for multi-stage builds is for compiled languages.<p>If you have some service written in say C++&#x2F;Java&#x2F;C#&#x2F;Go, then building it in one container (that has the build tools) and copying the build result to another that only has the stuff actually needed at runtime makes good sense. That is much easier and saner than trying to uninstall all the build time components after using them.<p>It is not like for desktop software we install the build tool, build, and then uninstall build tools. Instead we grab the relevant build outputs and package them into an archive or installer.<p>But as a solution for clearing out cruft like package manager caches, etc, yeah multi-stage build is not really optimal.<p>Being able to write the executed steps in a natural way, and then specify at the end to compare everything to come specified previous layer, and create a layer that just has the differences would be really useful.<p>They could even still cache the intermediate layers as part of the build caching process if they wanted, so long as they are not included in final image as pushed to a repository.<p>Docker does have a super cut down version of this with its experimental `--squash` option, but that only makes sure there is a single new layer for the output of the whole dockerfile run. You cannot use this if you for some reason want exactly 2 new layers. This limitation is probably acceptable in a lot of cases. However this option is not supported in the buildkit based backend yet.')