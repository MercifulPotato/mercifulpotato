Item(by='mwcampbell', descendants=None, kids=[24998013], score=None, time=1604581968, title=None, item_type='comment', url=None, parent=24997226, text='Ugh, yet another GUI toolkit. Let&#x27;s spread the work of implementing and debugging accessibility even thinner.<p>I understand that by drawing its own widgets on desktop, Compose can provide greater parity with Android. But that benefits developers at the cost of some users.<p>I think what I would have done is implement the widgets on the web platform and use CEF for the whole application, not just the browser widget. Then they could also target web applications through Kotlin&#x2F;JS, though potentially with an oversized JS bundle. It would also be important in that case to avoid the pitfalls of Flutter for Web, e.g. requiring the user to press a button to turn on full accessibility.<p>Speaking of CEF, making their embedding of that accessible is going to be particularly problematic, because they&#x27;re using it in off-screen rendering mode, so they can render the page to a bitmap and draw that onto their own canvas. That means they don&#x27;t benefit from Chromium&#x27;s mature support for platform accessibility APIs. CEF does expose Chromium&#x27;s cross-platform accessibility tree (thanks Adobe!), but then it&#x27;s up to you to expose that to the host platform. Windows screen readers in particular have special support for Chromium&#x27;s Windows accessibility implementation, allowing users to use special keyboard commands when browsing web pages. Unless Compose&#x27;s accessibility implementation is a bug-for-bug emulation of Chromium&#x27;s, Windows screen reader users won&#x27;t have the usual level of access to web content.')