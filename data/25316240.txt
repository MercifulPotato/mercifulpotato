Item(by='lasagnaphil', descendants=None, kids=[25316533, 25316916], score=None, time=1607188768, title=None, item_type='comment', url=None, parent=25315728, text='For C++17, the only best thing for me was that you can destructure tuples and pairs with a simple syntax (when otherwise you needed to use std::tie)<p><pre><code>    auto [a, b] = functionThatReturnsATuple();\n</code></pre>\nFor C++20, the one single thing I&#x27;m excited about is designated initializers (which was already in C99! It&#x27;s kinda mad why this came so late). Basically you can initialize structs with parameter names with just a single line of code:<p><pre><code>    struct Person {\n        std::string name;\n        int age;\n    };\n    Person person = {.name = &quot;Bob&quot;, .age = 29};\n</code></pre>\nAnything else from C++17 and onwards I really don&#x27;t find a usage for right now. Compile-time programming using constexpr and consteval is great, until you realize that compile-time programming works under the hood by evaluating the AST directly (which is the slowest possible way for an interpreter), and would make your build times skyrocket to the moon. Concepts are kinda nice because of better error messages, but doesn&#x27;t really matter for me if heavily templated libraries like STL and Eigen aren&#x27;t fully ported for this feature. Ranges are just unnecessary for me, I learned the hard way that for loops are much better in terms of clarity and performance. And for modules: again, it only matters if the STL, tooling, and major libraries are ready for it, and I&#x27;m skeptical it will be achieved at any time.')