Item(by='lhorie', descendants=None, kids=[25679856, 25680101, 25680017, 25679938, 25679978, 25680192], score=None, time=1610066558, title=None, item_type='comment', url=None, parent=25677272, text='Skimmed through the docs. Some thoughts:<p>- it has a bunch of useful serialization sugar (e.g. `{{ classes }}` serializes correctly whether it&#x27;s an array, an object of booleans, etc. This is similar to Angular (in React-land, this got pulled out into a separate package, classnames). There&#x27;s similar sugar for `style` and objects (which React also supports).<p>- I&#x27;m not a fan of the variadic event handler signature. If I understand correctly, having a event handler inside a loop adds an extra argument to the handler function, but what happens if there are nested loops? In React-land, this would be done w&#x2F; arrow functions and closures; in Angular, one would write a js function call similar to plain HTML event handlers. I prefer the React approach (though I understand that isn&#x27;t really an option for the way you approached synergyjs)<p>- Similarly, if `#` is bound to loop index, then how do you access outer loop index in a nested loop situation?<p>- Binding view property names to form controls of the same name is an interesting abstraction. React looks clunky in comparison (yes, even hooks). Angular has a similar facility, with the addition of allowing custom transformation logic (think getter&#x2F;setters for bidirectional bindings).<p>- prerendering via a browser-like environment isn&#x27;t the best approach IMHO (I&#x27;ve seen people run into issues w&#x2F; jsdom missing features, for example, and something like puppeteer is a bit of a heavy thing to be running frequently server-side)<p>- I like the clear separation between JS and CSS (but, then again, I&#x27;m an old school person). React people might dislike it if they&#x27;re used to css-in-js per-component style encapsulation.<p>Overall impression: appears to pack quite a punch for 4kb (more so than Preact IMHO, because of how it handles forms). Docs are clear and to the point, but could use more examples&#x2F;tutorials (especially lifecycle hooks). Would like to see it mature a bit (e.g. in terms of addressing things like nested loops, as mentioned above), and I think it would benefit from considering a less expensive SSR approach.<p>Very promising!')