Item(by='philzook', descendants=None, kids=None, score=None, time=1606490008, title=None, item_type='comment', url=None, parent=25218601, text='A fun post. I liked seeing some things I knew summarized and some things I didn&#x27;t know. It is fascinating to me that functional programming techniques and object oriented techniques become intersecting once you know enough about the two. The aversion some parts of the functional programming community have to object oriented is more about how it manifests in particular popular languages. People are dutifully intrigued by the CLOS or Smalltalk. Things that are function like should probably be modeled as functions and things that are object like should probably be modeled as objects.<p>Visitor patterns are a kind of fold, Functions as Closure objects, the various formulations of iterators and stream transformers. The relationship of existential types to objects was (is?) a hot research topic.<p>- Codata in Action <a href="https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;codata-in-action&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;research&#x2F;publication&#x2F;codata-...</a><p>- Hasekll&#x27;s Overlooked Object System <a href="https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;cs&#x2F;0509027" rel="nofollow">https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;cs&#x2F;0509027</a><p>- Abadi, Martin; Luca Cardelli - A Theory of Objects.<p>- Type Theories and Object Oriented Programming <a href="http:&#x2F;&#x2F;users.csc.calpoly.edu&#x2F;~gfisher&#x2F;classes&#x2F;530&#x2F;handouts&#x2F;readings&#x2F;papers&#x2F;type-systems&#x2F;p29-danforth.pdf" rel="nofollow">http:&#x2F;&#x2F;users.csc.calpoly.edu&#x2F;~gfisher&#x2F;classes&#x2F;530&#x2F;handouts&#x2F;r...</a>')