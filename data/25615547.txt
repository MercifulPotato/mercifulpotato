Item(by='sixdimensional', descendants=None, kids=None, score=None, time=1609615233, title=None, item_type='comment', url=None, parent=25615146, text='NOTE: I am not associated with temporal.io in any way, just learned about it frankly.<p>I just had a look through your docs and I understand the approach you&#x27;re taking... similar to &quot;infrastructure as code&quot; concept applied to simplifying workflow.  What you are saying makes sense to me.  I haven&#x27;t heard of temporal.io before (cool, hi!), but I get the concept of trying to eliminate the intermediate representation (which I suppose also could be seen as a bottleneck in a fully distributed system and to the &quot;workflow&quot; of a software engineer).<p>I would point out that, Petri net is a theory and modelling language for proving correctness&#x2F;soundness of a model - and as I mentioned earlier, I agree that if you don&#x27;t need that for your use case, yeah - it could be too much.  I would like to make it clear for other readers that Petri nets are not specifically the implementation of a technology, they are a modelling technique&#x2F;concept which could also be implemented&#x2F;executable through an engine.  Having, or not having, an intermediate representation in compiled code or runtime has nothing to do with whether or not you want to model your FSM, or graph, or network of processes, logic and state as a Petri net.<p>My goal in originally posting the comment was just to share the superset theory of Petri nets, as I don&#x27;t often see people bring it up in discussions on workflow, FSM, etc.<p>The comment that Petri nets are one possible representation of FSM is true, with the key difference being that FSM are for single threaded operations and have some limitations in that regard, whereas Petri nets, as the superset, also handle concurrent operations - and workflow is a common use case where we see concurrent operations (but certainly not the only one, and industrial control, etc. is certainly more complicated that organizational workflow).  I think this deck is kind of handy for describing some of the differences between FSM and Petri nets [1].  Interestingly, we know that dealing with concurrency, parallel processing, multithreading is difficult, which is why any tools to reduce some of that complexity from day-to-day coding (ex. coroutines&#x2F;async&#x2F;await, workflow engines, etc.) make the engineer&#x27;s life easier.<p>When we were talking about compartmentalization&#x2F;encapsulation of state, I see how conceptually you are abstracting that away from the engineer in temporal.  I suppose, what I meant when I was talking about WWF was, the fact that the engineer&#x27;s code and their own state could be &quot;compartmentalized&quot; into the pluggable definitions of the activities provided by the workflow engine.  It seems like your team has kind of inverted that a little bit, but roughly the idea is similar.  You appear to have the engineer &quot;write the workflow as code&quot; and use a wrapper around the activity to ensure the state management and simplify it for the engineer.  A slight difference but interesting paradigm.<p>I would say, I believe that, while rarely done - one could define WWF workflows completely through code and that there is a way to serialize workflow as an artifact that could be version controlled, etc.  But, how they display that visually and how WWF compiles into the intermediate representation and uses that at runtime does sound different than temporal.  I suppose though, having the intermediate representation does perhaps allow for running tests against the workflow logic itself - whereas you shift the tests to the code itself.. so, different implementation but similar idea.<p>Again, I see how temporal simplifies that from the engineer&#x27;s perspective, so kudos to you guys.  I can see how what you are saying would work and be a helpful approach for a lot of use cases.<p>[1] <a href="https:&#x2F;&#x2F;www.cs.ucdavis.edu&#x2F;~devanbu&#x2F;teaching&#x2F;160&#x2F;docs&#x2F;petrinet" rel="nofollow">https:&#x2F;&#x2F;www.cs.ucdavis.edu&#x2F;~devanbu&#x2F;teaching&#x2F;160&#x2F;docs&#x2F;petrin...</a>')