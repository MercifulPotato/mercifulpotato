Item(by='DonaldPShimoda', descendants=None, kids=[24701113], score=None, time=1602009001, title=None, item_type='comment', url=None, parent=24693644, text='Alright, we&#x27;ve got two different discussions going on here. I&#x27;ll address them separately.<p>---<p>As far as &quot;annotation&quot; vs &quot;ascription&quot;, you&#x27;ve actually just reinforced what I said.<p>&gt; This is equally true in Java. Types are erased at runtime. They don&#x27;t exist in the bytecode.<p>Types are erased at <i>compile time</i>, which means that the type-checking analysis has completed. Many compilers erase types after doing type checking to improve runtime performance. That doesn&#x27;t mean the types don&#x27;t do anything. They&#x27;re used for guiding the type-checking by the compiler.<p>This is in contrast to Python, which does literally nothing with the stuff you throw in the annotations. MyPy doesn&#x27;t play a role in this specific aspect of the discussion because we&#x27;re talking about language implementations, and in Python the type annotations are just artifacts in the code that get ignored during compilation and evaluation.<p><i>This</i> is the distinction between ascriptions and annotations, which you actually corroborated here:<p>&gt; Scala, for example, calls its type declarations &quot;annotations&quot;, except when they are needed to disambiguate, when they are &quot;ascriptions&quot;.<p>All of the type stuff in Python is handled via <i>annotations</i> because the language proper does not make use of them whatsoever. They&#x27;re just decoration, really.<p>In contrast, Java uses all the types to perform type-checking, making them <i>ascriptions</i>.<p>In languages with lots of type inference, like Scala, you can supply type information. Sometimes these are ascriptions (which either help the inference algorithm or are used for casting), and sometimes they are just artifacts to help the programmer (in which case they can be regarded as annotations, which I didn&#x27;t address previously).<p>But the key component in all of this is that we are only looking at the languages proper, not the suite of third-party tools available to those languages, because this is what dictates the correct terminology. In Python <i>the language</i>, types are just annotations which are completely ignored, and this is not the case in statically typed languages.<p>---<p>Which brings us to the second point: your original argument.<p>This thread started with somebody asking whether static typing will ever be implemented in Python proper, to which somebody said there&#x27;s no reason for that when we can use MyPy and disable support for `Any` types. The response to this was that it would require all third-party libraries to be fully and correctly annotated, where you came in and claimed &quot;that&#x27;s true in any type system.&quot;<p>The reason I disagreed with this is because in statically typed languages you&#x27;re not relying on annotations for anything. Keep in mind that we&#x27;ve established that <i>annotations</i> are specifically artifacts in the code that the language itself doesn&#x27;t care about, because when the language does care they are called <i>ascriptions</i>. Annotations are supplied by the programmer by desire, not by necessity of the language proper.<p>You can release a fully-functioning Python library with absolutely zero type annotations, and it will run exactly the same as if you annotated everything. This is because type annotations don&#x27;t <i>do</i> anything in Python; to gain any use from them requires using third-party tools, like MyPy.<p>But you <i>cannot</i> release a Java library that doesn&#x27;t have all its types specified in some manner. Because the Java language requires the types to be present, meaning they aren&#x27;t <i>annotations</i> like they are in Python.<p>I guess really what I&#x27;m trying to get at is that your response where you said &quot;That&#x27;s true of any type system&quot; was completely missing the point. The point being made by the person you responded to was about how in a Python ecosystem, simply using MyPy and disabling the `Any` type requires all third-party libraries to be fully and correctly annotated â€” something which is not usually required in Python, so it&#x27;s an extra burden on the libraries&#x27; developers. This is entirely distinct behavior from any statically typed language because in those languages, you can&#x27;t just leave out the types and call it a day.')