Item(by='pron', descendants=None, kids=[25303147], score=None, time=1607091742, title=None, item_type='comment', url=None, parent=25302358, text='&gt; So, there&#x27;s more than a casual relation between Kotlin co-routines and Loom.<p>Not beyond the fact it was one of the things we looked at and decided to go in a completely different direction. We looked at Python, Go, JavaScript, C#, Kotlin, C++, Rust, Zig, Haskell, Pony, Scheme, Erlang, Céu, Scala and Clojure, and decided <i>not</i> to go down the C#&#x2F;Kotlin path, which is why we ended up with a solution that is nothing alike. The positive influences were Erlang, Go, and Scheme (with a glance to Céu). That&#x27;s why virtual threads share a lot of similarities with Erlang processes and Go goroutines, and borrow ideas from Scheme&#x27;s (and OCaml&#x27;s) multi-prompt delimited continuations, but are not at all like C#&#x2F;Kotlin&#x27;s syntactic coroutines.<p>There are certainly things about Kotlin we love, like nullability types, and that we&#x27;d like to see in the Java language some day. When we do, Kotlin would have been the influence. Syntactic coroutines, on the other hand, were something to avoid.<p>&gt; Java developers are switching to Kotlin<p>Just as they had to Scala in the past, many developers are switching to Kotlin, which has reached ~2-4% on the Java Platform, and might even reach 5-7% some day. That is <i>huge</i>, perhaps unprecedented, market penetration for a Java Platform language, but let&#x27;s not get carried away.<p>There are certainly languages we consider serious competitors, but Kotlin is still an order of magnitude in size away from being one of them. Java is so big that you can still be 20-50x smaller and still be a very popular language, yet not quite a competitor.<p>&gt; Recent introduction of Records is a good example.<p>Nope. First of all, Kotlin doesn&#x27;t have records. Kotlin-like data classes were something we looked at (we look at <i>all</i> languages) and said, we don&#x27;t want that, we want records. Second, the inspiration for records was ML. So records are actually yet another example where we decided <i>not</i> to go in the same direction as Kotlin. This isn&#x27;t to say Kotlin did something worse or better, but it did do something decidedly different.<p>&gt; Typically, it&#x27;s a rookie mistake to use that. You shouldn&#x27;t have to; there are better APIs.<p>The same APIs Java users use today (Executors) are the ones they&#x27;ll use when Loom lands. There is still no need to use the Thread API directly.<p>&gt; Kotlin, btw. treats threads just as a special case of co-routines.<p>Perhaps in your desire to see Kotlin influences everywhere (and, BTW, syntactic stackless coroutines were done in C# first, at least among the well-known language) you misunderstand what Loom is. Virtual threads <i>are</i> threads, period.<p>Anyway, it&#x27;s perfectly fine to prefer Kotlin over Java (the language) just as it is to have the opposite preference. But I think you misjudge the influence those languages have and draw from.')