Item(by='alzoid', descendants=None, kids=None, score=None, time=1603281076, title=None, item_type='comment', url=None, parent=24846159, text='I agree, I see those patterns in the wild a lot. You have a Microsoft shop using .NET and SQL Server yet the devs still abstract the  data access layer.  I think those patterns just became common &#x27;just in case&#x27; they were needed.  I find refactoring tools like &quot;extract interface&quot; take care of that so there is not need to write the abstraction until it&#x27;s needed.<p>On the other side, I worked on a web app that supported multiple db vendors, we did the classic DAO pattern which worked well.  You still get to use custom SQL for each database if  you need to.<p>We tried an ORM at one point which worked out well.  It was the same web app and we moved moved some DAO code to the Java Persistence API.  We could then build the data access code and include it into our desktop (Mac Windows) and plug it in to a local DB (Derby).<p>In that case, once JPA was working, the pluggable database was allowing us to save on development costs.')