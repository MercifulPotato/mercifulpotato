Item(by='wires', descendants=None, kids=None, score=None, time=1604585008, title=None, item_type='comment', url=None, parent=24994304, text='(co-author of typedefs here): having real ADTs with sum&#x2F;coproduct type constructors is indeed one of the motivations behind typedefs.<p>re [1] the language behind ATD seems really similar to typedefs (not surprising, it is the &quot;sane&quot; choice) I need to give it a deeper look to point out more subtle differences. Additionally since we developed in Idris we provide proofs that `serialized . deserialize = id`, which is not possible in OCaml.<p>regarding [2], it&#x27;s the same idea, except that doesn&#x27;t follow any well establish type theory or other mathematical structure as the basis of it&#x27;s language:<p><pre><code>                   Compound = Record\n                            | Sequence\n                            | Set\n                            | Dictionary\n</code></pre>\nThis is mathematically already quite complicated.')