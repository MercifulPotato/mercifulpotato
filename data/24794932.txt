Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1602800791, title=None, item_type='comment', url=None, parent=24794796, text='C++ lambda. You can basically do this:<p><pre><code>  auto succ = [](int i) { return i + 1; };\n</code></pre>\nTo make variables in the surrounding scope visible (i.e., create a closure) you have to specify that they&#x27;re available and how. Grabbing a reference to all variables in scope you could do:<p><pre><code>  int x = 0;\n  auto inc_x = [&amp;] () { return x++; };\n</code></pre>\nThis makes x available via reference so it can be modified. If you just want the value:<p><pre><code>  int x = 0;\n  auto always_one = [=] () { return x + 1; };\n</code></pre>\nAnd you can constrain which variables are visible within the lambda:<p><pre><code>  int x,y;\n  auto foo = [&amp;x] (auto n) { x += n; };\n</code></pre>\nThe return type can be determined by the compiler, or they can be made explicit (I chose not to). The first examples all returned integers, the last one has void return type.')