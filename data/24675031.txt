Item(by='xorcist', descendants=None, kids=[24675666], score=None, time=1601762763, title=None, item_type='comment', url=None, parent=24674183, text='Regarding 2, that branching strategy sounds completely reasonable and simple. You wouldn&#x27;t except to delete the &quot;dev&quot; branch in that case, nor squash any commits, because &quot;dev&quot; is a shared branch that many people use. It sounds like a classic &quot;test&quot; or &quot;pre-production&quot; branch.<p>You would expect people to commit cleaned up commits ready to be merged to production into that branch. Any exploratory work would be done outside &quot;dev&quot; (either in developer local repositories or personal branches). It is also important that no commits are ever made to the production branch directly, otherwise your branches would become out of sync.<p>If you&#x27;d like the branches to stay identical over time you can stick to fast-forward merges. The downside is that you lose information about when merges to production were made, which may or may not be a problem for you.<p>The problems with repeated commits are not caused by your merge strategy. The are caused by people doing strange things with git. It might be hard to say exactly what after the fact, and without seeing the commit history we can only speculate. Perhaps many merges were made with unrelated branches, and what you are seeing is merge commits? Independently of how you proceed with this, you need to educate the users, otherwise they will keep polluting the commit history.<p>I didn&#x27;t understand the part about removing the repository and take it to be a joke that went above my head. But obviously this can&#x27;t be done without altering history. It is, after all, the history that is messed up. Fixing this means identifying which commits can be squeezed or removed from history. You have to look at these commits to find out how. Then you just rebase all commits from the beginning to a new history, and then everyone involved needs to keep working on top of that. Just remember to give the old history a name with a branch or a tag before you get to work, so you have something to reset to, should you mess up.')