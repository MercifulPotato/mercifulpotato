Item(by='majormajor', descendants=None, kids=[25077889], score=None, time=1605212678, title=None, item_type='comment', url=None, parent=25074174, text='&gt; What is at risk by not allowing developers to &quot;learn from mistakes&quot; is autonomy. Striping developers of their autonomy is the primary cause of poor performance, not an inability to execute so-called &quot;best practices&quot;<p>I&#x27;ve seen a lot of the opposite. Yes, coding is a design practice, but I&#x27;ve had to clean up a lot of messes resulting from <i>just plain bad design</i> because nobody involved - generally ~25 year olds with very little experience out of school - knew that there were lessons from the past they could learn about what designs would and wouldn&#x27;t work.<p>I agree with you that programming is an endeavor that benefits from experience, and wish that people would realize that means they can <i>learn from the experience of others</i>. Sure, intuition is involved too, but one common thing I&#x27;ve seen in shitty code I&#x27;ve had to salvage is that people often don&#x27;t apply their intuition to &quot;how could this code fail&quot; or &quot;how easy will this be to modify in the future&quot;?<p>That said... taking a look at this book... I don&#x27;t see much in the description or table of contents that would teach those folks whose work I&#x27;m decrying above much useful about <i>writing good software</i>. It has sections on reliability, project estimation, and development methodology as separate things - plus a lot of non-software-design stuff. But to me, the flow is different - estimation, reliability, and delivery will all suffer if you don&#x27;t have the right fundamental design skills. You can&#x27;t get much better at any of those without some deeper underlying changes.<p>It seems to have a lot of discussion of studies <i>adjacent to</i> software-related things, but I&#x27;m not sold on them saying much meaningful about software design.')