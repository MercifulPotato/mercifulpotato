Item(by='dragontamer', descendants=None, kids=[24871146], score=None, time=1603468676, title=None, item_type='comment', url=None, parent=24869227, text='Hmm... I&#x27;ll be honest, I don&#x27;t think this explanation in the blogpost works for me. However, I understand that everyone thinks differently, and its VERY important to proliferate &quot;different viewpoints&quot; when it comes to explanations. Especially with concepts like SSA which are extremely important to modern compiler theory.<p>So with that being said, here&#x27;s how I&#x27;d change the post.<p>---------<p>I think what&#x27;s missing here is the concept of &quot;Basic Blocks&quot;, the ability for a compiler to break down code into smaller pieces. SSA is an improvement on top of Basic Blocks, so its just... odd... that the blog post tries to talk about the benefits of SSA without talking about basic blocks first.<p>A basic block is a simple set of code that executes from beginning to end, without any loops or if-statements (or other control flow) associated with it. There are compiler-specific details (do function calls count as a basic block? Or do &quot;leaf functions&quot; stay within the block?) But the general gist is to encode if&#x2F;else and loop statements in the form of a graph.<p>Breaking up the &quot;helpful_open&quot; function (see the blogpost) into basic blocks, we have:<p>Block A: &quot;int flags = O_RDWR; tmp = access(fname, F_OK) &quot;.<p>Block B: if (!tmp){ flags |= O_CREAT; }<p>Block C: fd = open(..., flags, ...); return fd;<p>The graph in &quot;graphviz&quot; syntax is:<p>A -&gt; B<p>A -&gt; C<p>B -&gt; C<p>Notice, there are two blocks that can lead to C. If there were a loop, blocks can lead back into themselves.<p>-------------<p>Now that we&#x27;ve explicitly labeled the code-flow graph, it is obvious what the Phi-function does. The phi-function causes one variable (the &quot;flags&quot; variable in C) to become associated with variables from OTHER blocks (either A, or B).<p>Furthermore: Phi functions are ALWAYS at the start of basic blocks (in this case: B, and C). It seems absolutely imperative to visualize the basic-blocks explicitly if you wish to truly understand SSA.<p>----------<p>But why do we make Phi-functions and SSA? Well, that&#x27;s another question entirely. Long-story short, variables broken up into Phi-functions are easier to keep track of. But that&#x27;s a story for probably another day. Or really, that&#x27;s a story that the blogpost covers pretty well, so I don&#x27;t feel like critiquing that part of the post. :-)')