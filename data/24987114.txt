Item(by='willtim', descendants=None, kids=[24987340, 24987919], score=None, time=1604476019, title=None, item_type='comment', url=None, parent=24986774, text='I am skeptical about the novelty of Scala&#x27;s &quot;OOFP&quot; as you put it. It looks essentially the same as the original anonymous classes or SAM types in Java. Function values are objects with a single method and methods themselves are not first-class, but are wrapped in objects as required. The most important part of OO are the first-class modules; and in the literature, arguably more elegant examples of unifying first-class modules and FP exist, for example by starting with FP and adding objects as records containing functions, this way both &quot;objects&quot; and methods would be first-class. Subtyping also adds significant complexity to the language and weakens type inference.<p>Scala is, first and foremost an OO language which embraces subtyping, class hierarchies and imperative programming, see for example its own collections library. As Java gets more and more FP features, there is a danger it will struggle to differentiate itself.')