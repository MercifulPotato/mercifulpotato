Item(by='joshstrange', descendants=None, kids=[24844141], score=None, time=1603234211, title=None, item_type='comment', url=None, parent=24842919, text='Sure! I have all my self-hosted apps running on subdomains under 1 domain. So let&#x27;s say it&#x27;s &quot;mydomain.com&quot; and then I have subdomains like &quot;gitlab.mydomain.com&quot;. So for this setup I add a block at the top of my Caddyfile:<p><pre><code>    (secure) {\n      jwt {\n        path &#x2F;\n        redirect https:&#x2F;&#x2F;auth.mydomain.com&#x2F;login?backTo=https:&#x2F;&#x2F;{host}{uri}\n        except &#x2F;api\n        except &#x2F;rest\n        except &#x2F;zm&#x2F;cgi-bin&#x2F;nph-zms\n        except &#x2F;zm&#x2F;api\n      }\n    }\n</code></pre>\nThe &quot;except&quot;&#x27;s are for some services I use that have some kind of api-based auth for reaching certain endpoints that need to be whitelisted. This approach (of importing this &quot;secure&quot; block in each caddy block, that&#x27;s just what I called it, &quot;secure&quot; isn&#x27;t a special word) has the downside of requiring a global list but makes it easier as you will see in just a minute. Also there wasn&#x27;t any overlap of &quot;services that have api endpoints using api keys&quot; and &quot;services that have the same endpoint but it needs to be under SSO auth&quot;. Moving on, after that block I have my &quot;auth&quot; url, again you can name this whatever:<p><pre><code>    auth.mydomain.com {\n      login {\n          simple username=password\n          jwt_expiry 24h\n          redirect_check_referer false\n          redirect_host_file &#x2F;root&#x2F;.caddy&#x2F;hosts\n          cookie_expiry 2400h\n          cookie_domain mydomain.com\n        }\n    }\n</code></pre>\nThe &quot;simple username=password&quot; is the line doing a lot of the heavy lifting but you can replace that with something that uses a different SSO provider (like Google, LDAP, etc). I have a random U&#x2F;P that I store in 1Password so &quot;simple&quot; is fine for me but I&#x27;ve wanted to setup Google&#x27;s OAUTH to at least test it out. The other big thing here is &quot;&#x2F;root&#x2F;.caddy&#x2F;hosts&quot;, this is a list of all the domains&#x2F;hosts (one per line) that you want to be able to redirect to. This is so that if you go to &quot;gitlab.mydomain.com&quot; and you aren&#x27;t logged in it will bounce to auth.mydomain.com and then, because you put &quot;gitlab.mydomain.com&quot; in that &quot;&#x2F;root&#x2F;.caddy&#x2F;hosts&quot; file, it will redirect back to &quot;gitlab.mydomain.com&quot; once you login. Gitlab may be a bad example since you will absolutely be using GL&#x27;s auth as well but substitute Gitlab with other services that either don&#x27;t provide auth or provide some basic auth you can turn on&#x2F;off, that&#x27;s where this really shines. Once you are logged into 1 of them you are logged into all of them.<p>Lastly we have our actual, regular, caddy entires: (and looking at mine I see I should have been using Syncthing as the example all along haha)<p><pre><code>    syncthing.mydomain.com {\n      import secure\n      proxy &#x2F; 10.0.1.123:8384 {\n        transparent\n        websocket\n      }\n      gzip\n      tls myname@mydomain.com\n    }\n\n</code></pre>\nI will note that you might not need the &quot;websocket&quot; line anymore but it works and I&#x27;m not touching it. That &quot;import secure&quot; line is what &quot;protects&quot; the Syncthing service.<p>It has been a breeze to add&#x2F;remove services that I want to stick behind auth and I&#x27;m very happy with it. A couple caveats: I still need to update to Caddy 2, it came out shortly after I did all this work I decided to sit back and wait for the dust to settle. Also I wasn&#x27;t able to use the default caddy docker image, it needs some extra plugins. This may no longer be the case for Caddy 2, I don&#x27;t know. I ended up just making my own image [0] (&#x2F;Do not use this&#x2F;, really, don&#x27;t. I&#x27;m not going to keep it updated, I make no promises, and it&#x27;s a huge security risk IMHO) by forking the repo and adding the extra plugins I needed [1]. You can do the same and build locally or maybe you don&#x27;t even use docker and so this is a non-issue. The two plugins I needed were &quot;jwt&quot; and &quot;login&quot;.<p>I hope this helps and I can answer any other questions you might have about it.<p>[0] <a href="https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;joshstrange&#x2F;caddy" rel="nofollow">https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;joshstrange&#x2F;caddy</a><p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;joshstrange&#x2F;caddy-docker&#x2F;blob&#x2F;master&#x2F;Dockerfile" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;joshstrange&#x2F;caddy-docker&#x2F;blob&#x2F;master&#x2F;Dock...</a>')