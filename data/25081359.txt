Item(by='meredydd', descendants=None, kids=[25081572, 25082570, 25081455, 25083211, 25082115], score=None, time=1605268799, title=None, item_type='comment', url=None, parent=25075284, text='This article is dated because these days, even the people who exclusively use vim are mostly &quot;tool mavens&quot; - because most people are driving the Web, and the only way to make the Web bearable is to load yourself up with huge toolchains.<p>It&#x27;s the worst of both words: Even if you&#x27;re using vim, you spend an awful lot of your time using (or debugging) tools like webpack, minifiers, live-reloaders, and of course the in-browser dev tools.<p>BUT, you still don&#x27;t get the benefits of an old-school IDE, because no IDE can reason about a modern web stack reliably! Take something basic like click-to-code: &quot;where is  this attribute defined?&quot; The web is such a Turing Tarpit[0] that, if that data comes from the backend, that question is <i>literally undecidable</i>. Between the database and that JS object are ORMs, backend frameworks, REST requests, microservices, JS frameworks, templating engines, and possibly CSS frameworks as well. At best, you can build good IDEs within one layer of the stack (I love WebStorm, and the VSCode+code-server stuff is cool - but they break down completely at stack boundaries).<p>[0] <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_tarpit" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Turing_tarpit</a><p>And it&#x27;s been like this for so long that new web developers <i>don&#x27;t even remember what it was like</i> to have full autocomplete, everywhere in your project!<p>I have a dog in this fight - I founded a startup (<a href="https:&#x2F;&#x2F;anvil.works" rel="nofollow">https:&#x2F;&#x2F;anvil.works</a>) to make web-dev tools, and we realised that to reason automatically about a web app you basically have to replace the whole stack. We went with Python - by doing Python front-end and back-end, replacing REST calls with function calls, and building a UI toolkit rather than generating HTML, it turns out you can have actual, real click-to-code, across your whole program. And full-stack autocomplete (I gave a talk about that one[1]).<p>If the Web is going to turn us all into tool mavens, at least we should do it right!<p>[1] <a href="https:&#x2F;&#x2F;anvil.works&#x2F;blog&#x2F;python-autocompleter-pycon17" rel="nofollow">https:&#x2F;&#x2F;anvil.works&#x2F;blog&#x2F;python-autocompleter-pycon17</a>')