Item(by='TheOtherHobbes', descendants=None, kids=None, score=None, time=1611743884, title=None, item_type='comment', url=None, parent=25925914, text='I thought the original article was very poor. There&#x27;s no real data, no references (except Fred Brooks), and the graphs are just nice shaded opinions based on nothing much.<p>It fails to ask <i>why</i> the complexity of tools and systems grows over time, and whether this is matched by improvements in UX.<p>It also fails to note that one of the goals of abstraction is to hide inherent complexity. And in fact this happens time and time again in engineering and product design - an insight that starts off requiring near-genius levels of original mathematical creativity is packaged into commodified tools that make it easy to do a certain job.<p>Sometimes the tools are aimed at engineers, and sometimes they&#x27;re built for the public. But because no one expects to literally reinvent the wheel, they all package genius in their different ways.<p>Except software. In software teams keep working to reinvent wheels completely every few years. Some are arguably more refined than existing wheels. But they&#x27;re <i>all wheels.</i><p>They&#x27;re not a new kind of thing - like an engine. Or wings.<p>So I agree. Software has mediocre lumpy wheels They&#x27;re mostly back-references to existing software, and not so much attempts to commodify and simplify standard problems - like security, reliability, scalability, and UX.<p>There are packages for all of the above, but they&#x27;re rarely <i>clean and elegant</i> - in the sense that someone has really understood the problem and designed a maximally effective but minimally complex automated solution.<p>Worse, there are no processes for efficiently abstracting a domain. And <i>that&#x27;s</i> what&#x27;s missing.')