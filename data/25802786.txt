Item(by='jorangreef', descendants=None, kids=[25803283], score=None, time=1610810909, title=None, item_type='comment', url=None, parent=25802085, text='Yes, I fully agree that a correct program can&#x27;t contain memory bugs, and that we want the compiler to help us.<p>For a systems programming language though, I think Zig hits the sweet spot, and not only with regards to memory safety.<p>Correctness, in this realm, is as much memory safety as:<p>* error safety (making sure that your program correctly handles all system call errors that could possibly occur, without forgetting any, and there are many! The Zig compiler can actually inspect and check this for you, something not many languages do), see <a href="https:&#x2F;&#x2F;www.eecg.utoronto.ca&#x2F;~yuan&#x2F;papers&#x2F;failure_analysis_osdi14.pdf" rel="nofollow">https:&#x2F;&#x2F;www.eecg.utoronto.ca&#x2F;~yuan&#x2F;papers&#x2F;failure_analysis_o...</a> for how critical error handling is in distributed systems,<p>* OOM safety (making sure your program can actually handle resource allocation failures without crashing),<p>* explicitness (clear control flow with a minimum of abstractions to make it easy to reason about the code with no hidden surprises, no weird undefined behavior),<p>* and especially as much runtime safety as you can possibly get from the language when you need to write unsafe code (which you will still need to do when writing systems code, even if your language offers memory safety guarantees, see <a href="https:&#x2F;&#x2F;andrewkelley.me&#x2F;post&#x2F;unsafe-zig-safer-than-unsafe-rust.html" rel="nofollow">https:&#x2F;&#x2F;andrewkelley.me&#x2F;post&#x2F;unsafe-zig-safer-than-unsafe-ru...</a>). Here, Zig helps you not only at compile time, but also at runtime (and with varying degrees of granularity as you see fit), something not all systems languages will do.<p>On all these axes, Zig is at least an order of magnitude more likely to lead to a correct program than C, while optimizing for more readable code (even for someone coming from TypeScript) and thus code review, also essential for improving the odds that your code is correct with respect to its requirements.')