Item(by='jhallenworld', descendants=None, kids=None, score=None, time=1606059992, title=None, item_type='comment', url=None, parent=25178093, text='Unions are always better than casts.  It would be better if casts in C looked like union deselection, because parenthesis are ugly.  There really should be an infix casting operator.<p>An example of where this matter is an AST forest, like this:<p><pre><code>    struct node { int tag; }; &#x2F;&#x2F; Generic node\n    struct infixnode { int tag; struct node *l, *r; };\n    struct intnode { int tag; int val; };\n</code></pre>\nBut it&#x27;s really ugly to use.  If you have an expression represented in this AST like &#x27;a<i>(b</i>(c+d))&#x27; and you want to access &#x27;d&#x27;, you need to do this:<p><pre><code>    struct node *n;\n    int d = ((struct intnode *)(((struct infixnode *)(((struct infixnode *)(((struct infixnode *)(((struct infixnode *)n)-&gt;r))-&gt;r)))))-&gt;val;\n</code></pre>\nBut if you use unions:<p><pre><code>    union node { struct infixnode infix; struct floatnode floatval; struct intnode intval; };\n</code></pre>\nThen you can say this:<p><pre><code>    union node *n;\n    int val = n-&gt;infix.r-&gt;infix.r-&gt;infix.r-&gt;intval.val;\n</code></pre>\nThe same holds for C++.  In C++ you could make a class hierarchy for your AST.  But you still have the casting to convert to the derived types, which is just as ugly..  But you can instead make inline access functions in the base class whose sole purpose is to do this casting, you end up something like this:<p><pre><code>    node *n;\n    int val = n-&gt;infix()-&gt;r-&gt;infix()-&gt;r-&gt;infix()-&gt;r-&gt;intval()-&gt;val;</code></pre>')