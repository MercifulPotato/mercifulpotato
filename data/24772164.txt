Item(by='dragontamer', descendants=None, kids=[24772208], score=None, time=1602637850, title=None, item_type='comment', url=None, parent=24771906, text='Thread safety, or the lack of it.<p>The system-allocator needs to be thread-safe in a large variety of situations.<p>Your custom allocator doesn&#x27;t have to be: maybe you know only 1 thread is running. Heck, even knowing that only 32-threads or 64-threads will ever run can make gross simplifications to the synchronization code.<p>System-allocator needs to be thread-safe with an unbounded number of threads (because you may call pthread_create at any time).<p>Your custom allocator may know more specifics about when, and where, pthreads are created, as well as whether or not they interact with each other.<p>---------<p>Case in point: lets say you malloc a 256MB region per thread. You know that only one thread would ever access this 256MB region, so you write it without any synchronization primitives what so ever.<p>But you still want a general purpose, multi-size supported allocator to split up the data inside the 256MB region.<p>You call void* fooptr = malloc(256MB), because grabbing from the system allocator should remain thread-safe (who knows how many other threads are calling malloc?). But afterwards, you can make very specific assumptions about the access patterns of that fooptr.')