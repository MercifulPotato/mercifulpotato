Item(by='jillesvangurp', descendants=None, kids=None, score=None, time=1608317194, title=None, item_type='comment', url=None, parent=25468912, text='Yes, it&#x27;s sad but true; IBM ran eclipse into the ground over the last ten years and they gradually lost the mindshare they had 15-20 years ago when they were best in class and Intellij was a new kid on the block. That&#x27;s on IBM. They completely mismanaged this project for a decade plus. They failed to keep up with a changing market and instead focused on irrelevant stuff not related to the core use case of, you know, developing stuff on the JVM. I was able to get away with using it doing Java until about 2016. Then I joined a bog standard Spring Boot + gradle project and it just couldn&#x27;t do anything with it. I had no choice but to switch to Intellij.<p>Eclipse is still there but I can&#x27;t use it for the vast majority of projects I work on these days. Kotlin support is a joke. Gradle support never worked properly for me (though in fairness, I stopped trying 3 years ago).<p>But Eclipse was a great IDE once upon a time. I still miss incremental compilation that actually works consistently and is actually incremental &amp; fast. That&#x27;s a trick that Intellij never even came close to doing. Intellij fakes it with inconsistent &amp; super flaky caching (hence the top level menu item with the name: &quot;invalidate caches&quot;). And then they still manage being about 2 orders of magnitudes slower (about 100x: 10s vs 50-100ms). Anything over a second would be an order of magnitude already because the Eclipse incremental java compiler really is that fast. I&#x27;ve never seen intellij launch a test faster than 5 seconds; even for a 1 line change in a class that is not depended on by anything (i.e. the work is: compile 1 class), like a test. Incremental in Eclipse used to mean: it&#x27;s compiled &amp; ready to run by the time your finger reaches the next key on the keyboard: you can&#x27;t type faster than it compiles incrementally and the test runs in process so there is no jvm startup overhead. Error markers would update in real time and be typically gone within a second or so of fixing the problem.<p>Even today, Intellij never gets even remotely close to that. But it works and does the job and Eclipse just stopped even being able to make sense of the projects I threw at it a few years ago which makes the whole performance argument irrelevant. My biggest gripe with Intellij is actually just the endless amount of time I seem to wait for it to index, rebuild, and stop lying about the compilation state of my projects. I just can&#x27;t trust it either way. It says it&#x27;s fine and it&#x27;s not or the other way around. Either way, I always have to double and triple check it more or less continuously and it is sucking up non trivial amounts of my day.')