Item(by='zemptime', descendants=None, kids=None, score=None, time=1608841678, title=None, item_type='comment', url=None, parent=25530140, text='This gets a hard disagree from me. I _really tried_ to give the whole node + react approach a go because, to me, GraphQL &amp; all the things you can generate with it is _magical_ (especially fine-grained authz with app-specific graphql directives - beautiful!). Singularly, the availability of xstate to replicate business processes identically between api &amp; ui. So useful! So undervalued!<p>Then I ran into finding myself spending time on background jobs, authentication management (not the basic functionality but tinkering &amp; modification past password reset &#x2F; session management, blacklist&#x2F;expiry if jwt&#x27;s, etc), file upload integrations, db management (when not utilizing prisma or hasura), etc. High variety of effort spent on tasks where I found myself asking the question, &quot;why am I having to work on this...?&quot;<p>I still ship more in Rails. It&#x27;s still a better tool for most things. There are cases where I&#x27;ll reach to node when needs are simple and short-lived. Other tools have the potential to exceed Rails (and I hope they do), but they&#x27;re not there yet.<p>One of my least favorite things about Rails, &amp; one of the best ideas to emerge in the past decade or so, is react. The componentization of views driven by state is such a useful approach. Rails has historically had a has &amp; belong to many relationship between controller contexts and views, which is essentially global and easy to get super confusing. React (and now browser-react aka web components) provide a better way of tackling this problem.<p>And... they hook up directly to my cache? They provide a great way of broadcasting dom updates directly? They interoperate with web components no problem where I need high fidelity interaction&#x2F;performance? etc etc. Rails... has done it again.<p>No getting away from how useful it is.')