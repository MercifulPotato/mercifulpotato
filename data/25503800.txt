Item(by='slad', descendants=None, kids=[25504536, 25504552, 25504197, 25504861], score=None, time=1608621217, title=None, item_type='comment', url=None, parent=25498079, text='I have worked at several companies with SOA. In fact, I was lead at one of the companies where we were breaking monolith to smaller services. We were having lots of issues with scalability with monolith. First we tried breaking to scale it horizontally by creating shards and routing users to different shards. That helped but with the growth we were seeing, we were back to scaling issue in 14 months. We broke it further into 4 shards and started working on SOA. After year and half we had dozens of smaller services and scaling was really smaller problem as it boiled down to scaling specific service. Over all, few points to add for without regards to SOA that I didn’t see here in threads -<p>- smaller blast radius: every change is small and specific to service so easy to rollback and understand the impact<p>- load tests: capacity management was relatively easy; small services with small dependencies<p>- easier to update dependencies: java version updates was not huge project with every feature development on hold<p>- autonomy: team had more autonomy as it didn’t require committee approvals<p>- prolific design patterns: services could use different architectural patterns<p>This obviously came with lot of other issues - latencies, cross service atomocity, logs correlation. But at the end I believe pros outweigh the cons and I would continue to use SOA pattern wherever I could.<p>Industry has been trending towards microservices&#x2F;lambdas which in my opinion take it too far. Finding that balance between Monolith and micro service is what works in my opinion.')