Item(by='hardwaresofton', descendants=None, kids=None, score=None, time=1608003796, title=None, item_type='comment', url=None, parent=25425043, text='&gt; &quot;Infrastructure As Code&quot; is a misnomer in my opinion. The underlying mechanism is more &quot;Infrastructure as Configuration&quot;. Terraform syntax is called HCL &quot;HashiCorp Configuration Language&quot;. The &quot;code&quot; aspect of (consuming) Terraform is oriented around providing dynamic configuration capabilities utilising reusable code Modules.<p>While TF is the most popular interpretation of IaC these days it is definitely not the only way to do it. I have maintained that HCL is the worst part of Terraform -- it&#x27;s likely that DSL will grow until it very nearly rivals a full grown language, when they could have gone with full blown languages to start (like Pulumi[0]). Terraform <i>does</i> now support native programming language via their CDK support[1]. This meets the &quot;code&quot; requirement.<p>There is a trade-off of course -- opening up the door to a fully powered programming language means opening the door to infinite complexity, but I think I&#x27;d rather have that than have the DSL that has spiky (though constrained) complexity.<p>&gt; . As GraphQL has led people to question the applicability of REST type API&#x27;s in SPA contexts, so I believe IaC will eventually suggest a transition towards single Cloud API endpoints where the entire required state is described; reducing IaC to configuration<p>Agree -- the interface will likely be kubernetes-like.<p>&gt;  Currently the programming or Code aspect is required as a function of API design and the corresponding wiring of components together. Potentially not necessary and not particularly helpful.<p>On the meta level, it looks like we&#x27;ve run into the ol&#x27; &quot;are declarative languages code&quot; (alternatively, &quot;is HTML code?&quot;) question.<p>A free unsolicited hot take on GraphQL: In my opinion GraphQL is just funny looking SQL, which offers every codebase the opportunity to become as complex as the time-tested query execution engines in real production-ready databases. It&#x27;s almost like how mongo let you pull schema validation and constraint checking from your relational database up to your application language, which as far as I&#x27;m concerned is a bad idea <i>most</i> of the time. That said, just like mongo, the productivity brought about by GraphQL is undeniable (whether real or imagined), so I tread lightly and often don&#x27;t speak ill of it.<p>[0]: <a href="https:&#x2F;&#x2F;www.pulumi.com&#x2F;docs" rel="nofollow">https:&#x2F;&#x2F;www.pulumi.com&#x2F;docs</a><p>[1]: <a href="https:&#x2F;&#x2F;www.hashicorp.com&#x2F;blog&#x2F;cdk-for-terraform-enabling-python-and-typescript-support" rel="nofollow">https:&#x2F;&#x2F;www.hashicorp.com&#x2F;blog&#x2F;cdk-for-terraform-enabling-py...</a>')