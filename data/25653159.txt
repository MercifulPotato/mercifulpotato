Item(by='dmitriid', descendants=None, kids=[25653318, 25653787], score=None, time=1609891910, title=None, item_type='comment', url=None, parent=25652677, text='&gt; You&#x27;re talking purely about performance.<p>Not <i>just</i> about performance.<p>&gt; Sure, you can do whatever you want in a game UI, and it will probably outperform a web UI.<p>Not probably, but definitely<p>&gt; But there&#x27;s a reason game UIs often scale&#x2F;function badly as soon as you change the screen size or the input type: they aren&#x27;t built on a platform that has flexibility baked into its bones.<p>Yeah, no. Games have had UI scaling since monitors got more resolutions than 640x480.<p>The reason why the web is horrible at UI performance is simple: <i>it was never built for UIs</i>. It is, at its core, a system to display simple texts with a few images in between, and that&#x27;s it.<p>Look at the sad state over at <a href="https:&#x2F;&#x2F;csstriggers.com" rel="nofollow">https:&#x2F;&#x2F;csstriggers.com</a>. Setting text shadow will cause a full-screen reflow. What does this have to do with &quot;flexibility baked into its bones&quot;?Nothing. If anything, it&#x27;s entirely <i>in</i>flexible. Same for any type of animation apart from a handful of css transforms: touching any part of an element will cause a full-age reflow (and that&#x27;s why animating `height: auto` is one of the web&#x27;s holy grails). This has nothing to do with &quot;changing screen size or the input type&quot;. The web was never built for this, and anything outside simple-text-plus-a-few-images is just a bolted-on hack that barely works.<p>&gt; all sizing and positioning is determined automatically based on rules, which can be expensive to calculate, but is what makes it so robust.<p>iOS uses a significantly more complex system layout constraints not dissimilar to Cassowary. Cassowary was proposed for the web in the late 1990s and was rejected because it was considered to be too expensive to calculate on the hardware of the times. The vast majority of the web was designed with one goal in mind: <i>avoid</i> expensive calculations. To the point that the actual algorithms to decide how to layout and draw stuff are specified in the standards. And the core of the web is designed around ... <i>a single pass</i>. The first time an allowance for two passes appears is for some stuff in tables (was it vertical alignment?) in early 00s.<p>And the actual complexity on the web comes from the fact that it was never designed for any of this stuff. And, of course, there&#x27;s no robustness to speak off. Even looking at the web sideways will break it in innumerable ways: from the fact that just asking for an element&#x27;s size will cause a full-page reflow to inability to properly encapsulate anything.<p>&gt; Qt still exists. It&#x27;s still being actively developed and still gets used for some modern software.<p>I know it still exists. What I was saying that Qt and Delphi in early 00s and TurboVision in 1990s had tools that surpass anything the web has to offer today. Which is not unusual, because they were developed as UI frameworks&#x2F;libs&#x2F;tools. Unlike the web. It can barely display a simple page with text and images, and now we&#x27;ve built an unholy mountain of hacks on top of it.<p>The web is the first and only UI system that lacks any and all tools to actually build and customise a UI beyond a very restricted set of badly interconnected very rigidly defined primitives. Where any UI lib&#x2F;framework gives you a rich set of complex controls, the web gives you a few form elements with little to no functionality. Where any UI lib&#x2F;framework gives you a plethora of tools to design&#x2F;change any control or primitive you want (going as far as letting you redefine your own paint functions), the web gives you nothing.<p>I keep repeating this in various comments, but: there&#x27;s a reason why most CSS&#x2F;UI frameworks on the web repeat the same handful of primitive elements: a badge, a text input, a button, a breadcrumb, an avatar. Because that&#x27;s all you can do in any reasonable amount of time. Very very very few attempt a date picker or a complex dropdown (inevitable with significant a11y issues). More complex UI elements like virtual lists, tree views, master-detail sheets, proper data tables, truly complex layouts where you can actually mix and match any and all components? Ahahahahahaha. And of course, nothing even approaching visual editors of early 00s because they are simply impossible on the web.<p>&gt; But the web works pretty well for all types of applications.<p>The web performs poorly for any type of <i>application</i> and performs barely well enough for <i>pages</i>.')