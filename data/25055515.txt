Item(by='tptacek', descendants=None, kids=None, score=None, time=1605069324, title=None, item_type='comment', url=None, parent=25055089, text='To be clear: the dispute over the history of BPF&#x2F;eBPF is not interesting, and I don&#x27;t want to litigate it anymore than they do.<p>I&#x27;m just here to say that eBPF and BPF are in fact pretty closely related. The eBPF design is uncannily similar to Begel, McCanne, and Graham&#x27;s BPF+ design[1]; in particular, the BPF+ paper spends a fair amount of time describing an SSA-based compiler for a RISC-y register ISA, and eBPF... just uses (at this point) LLVM for a RISC-y register ISA.<p>Most notably, the fundamental execution integrity model has, until pretty recently, remained the same --- forward jumps only, limited program size. And that&#x27;s to me the defining feature of the architecture.<p>The lineage isn&#x27;t important to me, so much as the sort of continuous unbroken line from BPF to eBPF, regardless of what LKML says.<p>[1]: <a href="http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.597.3024&amp;rep=rep1&amp;type=pdf" rel="nofollow">http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.597...</a>')