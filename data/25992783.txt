Item(by='TeeWEE', descendants=None, kids=[25995198, 25993358, 25992828, 25993178, 25993130], score=None, time=1612208719, title=None, item_type='comment', url=None, parent=25990702, text='FAST Api is a nice library, but it uses code-based api specifications. It&#x27;s generates the spec from code. So you need to write your API code by hand first, and do serialization manually...<p>This is an important distinction and might not be what you want.<p>Using spec first API design makes more sense IMHO.\nYou first spec your API (Either in OpenAPI or GRPC or whatever Interface Definition Language you use). This allows Backend and Frontend developers to change the API definition.<p>From there you generate all type-save model objects, client and server stubs, and fill in the implementation with full type hinting.<p>At my current company, we wrote OpenAPI specs first, no need to know Python. And use <a href="https:&#x2F;&#x2F;openapi-generator.tech&#x2F;" rel="nofollow">https:&#x2F;&#x2F;openapi-generator.tech&#x2F;</a> to generate both the Python server, python client and typescript client. We&#x27;re looking into generate Kotlin and Swift clients too...<p>I&#x27;m a big proponent of spec first API design. It&#x27;s much cheaper to agree on a spec first before you start coding.<p>But it depends on what you are doing.<p>Personally I like GRPC best, since the code generators are top notch.<p>Very good article on this principle:<p><a href="https:&#x2F;&#x2F;medium.com&#x2F;apis-and-digital-transformation&#x2F;openapi-and-grpc-side-by-side-b6afb08f75ed" rel="nofollow">https:&#x2F;&#x2F;medium.com&#x2F;apis-and-digital-transformation&#x2F;openapi-a...</a><p>First, stop writing interface code for your APIs by hand.\nSecond, stop writing interface code for your APIs by hand.\nThird, stop writing interface code for your APIs by hand.<p>We&#x27;re living in 2021... Every time I see somebody manually mapping an objects to a JSON dictionary I&#x27;m crying in the inside. It&#x27;s like writing machine code by hand.')