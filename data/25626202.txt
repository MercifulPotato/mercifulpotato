Item(by='zmmmmm', descendants=None, kids=[25627855, 25627781, 25640664, 25628096, 25639413, 25637397, 25638999, 25626607, 25637742, 25633676, 25637259, 25627541, 25629545, 25627360, 25627273, 25627414], score=None, time=1609715697, title=None, item_type='comment', url=None, parent=25620256, text='I have a concern about REPL driven development, which is around how maintainable the result is.<p>The reason people like REPLs is because they can experiment to discover the right way to write the code in a very fast feedback loop. This alleviates a huge pain when you are operating with uncertainties or at the edge of your knowledge - &#x27;does this function return null if no matching entries or an empty list?&#x27; - etc.<p>The problem is that the reader of your code is not going on that journey with you. They are coming in naively without knowing all of that experimentation you did. The writer now has the opportunity to create code that &quot;just happens&quot; to work by a magic of coincidences and conveniences based on very subtle non-obvious properties of the APIs and systems they are working with. The reader is severely disadvantaged and will have a much harder time to reach parity with the state of knowledge that the writer had. For example, some property of a function or object may not be documented at all, but through the REPL the writer has ascertained it is true. How can the reader know this?<p>So its a double edged sword in that the more you empower the original creator of the code, the greater imbalance you create to the later readers and maintainers of the code. Used well and with great discipline I could see it being very powerful and positive force to make better code. But in the worst case scenario, you&#x27;ll end up with extremely unmaintainable code.')