Item(by='loxs', descendants=None, kids=None, score=None, time=1603693276, title=None, item_type='comment', url=None, parent=24889975, text='I just migrated fully from OCaml to Rust. Couldn&#x27;t be happier. I cannot even start to explain how big a difference a stable and mature ecosystem (including tooling) makes.<p>Language-wise, Rust leaves some (small) things to be desired with regards of ergonomics, but this isn&#x27;t even close to offsetting the general feeling of developer friendliness and fitness to the problems it aims to solve. The borrow mechanics&#x2F;lifetimes are godsend and one starts to wonder why all languages are not like this.<p>Rust completely exhausted the problem domains of these languages (for me): Java, Go, OCaml, even Python for something that would require more than 50 lines of code. Once you &quot;get it&quot;, it&#x27;s not harder to write than these.<p>OCaml still has some very advanced features (types) like polymorphic variants, GADTs and others, which I have used in the past to elegantly solve (in a type safe way) problems. But at least for my use-cases (and the software that I migrated) these were mostly problems created by the functional, garbage collected nature of OCaml. With Rust&#x27;s imperative (but still very type-safe) nature I just don&#x27;t need to apply such complicated idioms - it seems to fit perfectly to the &quot;real world problems&quot;. And on top of that I get 3-4x speedup &quot;for free&quot; (for the program that I migrated). I added some very &quot;lightweight&quot; (as in &quot;easy to do&quot;) parallelism and I got another x3 speedup (for the most frequent use case). This kind of speedup makes a dramatic difference. It enables me to do things that were previously not possible in the OCaml version.<p>And yes, on top of that I get to use Cargo, which feels decades ahead of every other package manager I have used and the IDE support (at least in IntelliJ&#x2F;CLion) is pretty good (OCaml is nowhere near).<p>PS. And Traits are extremely cool')