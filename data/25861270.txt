Item(by='jcranmer', descendants=None, kids=[25862467], score=None, time=1611249154, title=None, item_type='comment', url=None, parent=25856256, text='The practical effect isn&#x27;t what you think it is.<p>Many compiler writers are employed by hardware companies, and these companies are employing them to sell their hardware chips. For these companies, even a 1% boost in performance on $BENCHMARK can drive measurable impact on sales. Even if you&#x27;re not worried about driving hardware sales, performance tends to be the major benchmark that gets mentioned in comparisons--note how the &quot;Benchmarks Game&quot; (what used to be called the Programming Language Shootout) compares languages solely on the basis of performance.<p>In other words, if you look at actual customer behavior, performance tends to be one of the most dominant factors in choosing one compiler over another (language compliance is probably more dominant, however). Surety of correctness is not a major factor at all.<p>Now, in order to actually report benchmarks correctly, you have to implement them correctly, so to some degree you have a basic guarantee that the compiler will usually work. But someone pointing out a soundness issue using a hypothetical example (as opposed to real code) is going to end up low priority because the evidence is that it doesn&#x27;t matter in practice for the real, large applications that customers care about (as no one else has complained about it for the past several years).<p>In summary, <i>practical</i> performance will win out over <i>theoretical</i> correctness, but not <i>practical</i> correctness.')