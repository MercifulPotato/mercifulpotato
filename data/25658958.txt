Item(by='TeMPOraL', descendants=None, kids=None, score=None, time=1609949450, title=None, item_type='comment', url=None, parent=25658375, text='&gt; <i>The main difference is that it chose javascript instead of lisp as its universal language, which, in the current world, is a much better choice for adoption.</i><p>That at best bifurcates the community (possibly along the age lines). I for one consider it to be a bad choice <i>for me personally</i>. JavaScript ain&#x27;t a particularly pretty language. And it&#x27;s nowhere as nice as Emacs Lisp.<p>&gt; <i>saying app can share data easily because the format is text buffer is either a tautology or a non-sequitur</i><p>I&#x27;d agree, though with caveat that an Emacs buffer is not just an array of text. It&#x27;s an array of text with bells, whistles, and a semantically well-designed API layer. This lets extensions to mostly compose nicely.<p>But I&#x27;d say the more important feature is that <i>nothing is sandboxed</i>. That means extensions can detect and work around potential conflicts with other extensions, up to the point of extending or replacing any function such conflicting extension uses (though with proper extension design - which is by this point a part of Emacs culture - this is rarely needed). It&#x27;s easy for any extension to expose an API layer for interop, and Emacs itself provides enough of an API surface that usually you don&#x27;t even need to do that explicitly.<p>More importantly, <i>I myself</i> can trivially extend or fix extensions as well. Something conflicts and errors out? Flip a debugger trap, wait for it to error again, poke around the source, find the culprit, patch it in your config. Granted, you need a passing familiarity with Emacs Lisp for that (though IMO, one should consider getting comfortable with Emacs Lisp a part of becoming a power user of Emacs). But you <i>can</i> do that, quite easily, and the entire environment supports you in doing this.')