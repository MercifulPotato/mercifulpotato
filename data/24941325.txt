Item(by='lipanski', descendants=None, kids=None, score=None, time=1604059415, title=None, item_type='comment', url=None, parent=24940650, text='I spent some of my time building or trying to build various web apps in both Rust and Crystal. The Rust web experience of several years ago was very frustrating and it was partially due to the lacking ecosystem but also due to the nature of the language. The safety guarantees that the language provides are great if you care about that, but they can be quite a pain when you just want to get something out. The majority of web projects fall in the last category. The language ergonomics have improved since (you don&#x27;t have to do so much pointer juggling any more) but it&#x27;s still no way near other languages that might only cover these guarantees partially or not at all. Language ergonomics is a very important aspect because it can limit both the development speed of your project but also the speed at which the ecosystem develops.<p>The performance aspect (aside from WebAssembly, where it has few contenders) is something that can be partially matched by other technologies.<p>By comparsion, developing for the web in Crystal is quite enjoyable. The language has great ergonomics (I&#x27;d say even better than Ruby). The web ecosystem might not be mature but it&#x27;s blooming and it has you covered in the main areas. Most importantly, if you&#x27;re missing something, it&#x27;s very easy to build it yourself. The standard library contains a lot of web goodies, including a very decent HTTP client, a server, easy to use and fast JSON and XML parsers, an OAuth2 client (yes!). The language feels like it was built for the web, which I can&#x27;t say about Rust.<p>In the end, what matters is your use case and the trade-offs you are willing to make (development speed vs. performance vs. safety guarantees). If I would have to build a load balancer, I might consider Rust. For a normal web app, I&#x27;d personally go with something like Crystal, Ruby, Python, Node.')