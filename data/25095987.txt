Item(by='rubyn00bie', descendants=None, kids=None, score=None, time=1605390848, title=None, item_type='comment', url=None, parent=25087739, text='Aye, I think (not that my opinion is worth a shit) y&#x27;all are using protobufs correctly assuming I&#x27;m grokking your use case correctly. I&#x27;m mostly focusing on discussions moving from JSON to protobufs... or essentially any problem space where serializing&#x2F;de-serializing your data types isn&#x27;t a ever going to be an issue (assuming one is not totally negligent).<p>Most of these articles focusing on protobufs as schema definitions are able to use gzipped JSON just fine. Their only reason to use protobufs is for schema definitions because they believe the &quot;type system&quot; will help them enforce constraints, validations, and or enable consistency across application boundaries.<p>The binary format, specification, and platform independence are completely irrelevant for these &quot;schema&quot; definition scenarios being brought up on HN constantly... and yet, they should be the things at the top of the list if you need protobufs and having a better more robust schema definition language should be damn near the bottom.<p>I think I just figured out a way to sum up my protobuf feelings (so, sorry for the late tldr):<p>Protobufs are a contract for serializing&#x2F;deserializing data structures NOT enforcing validations&#x2F;contraints of those data structures.<p>If you&#x27;re using &#x27;em as a serialization contract: fuck yeeeeeeaaaaah. If you&#x27;re trying to use them to improve validations&#x2F;constraints then: fuck naaaaaaah.')