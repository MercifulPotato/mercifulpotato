Item(by='alexey2020', descendants=None, kids=None, score=None, time=1607019341, title=None, item_type='comment', url=None, parent=25289745, text='Comparing JS frameworks and libraries was always a hurdle to me - its hard to find an unbiased up-to-date side by side comparison of the libraries one needs.\nTons of blog posts and surveys come out every year trying to answer questions like &quot;What framework to use in 2021&quot;, &quot;Redux vs Recoil&quot;, etc. But all of them tend to have the same shortcomings:\n- biased\n- limited number of metrics and data sources\n- become outdated very fast\n- usually consider only 2-3 libraries<p>I wanted to create a tool that solves that problem<p>I quickly realised I need to solve the following problems&#x2F;questions:\n1. Moderated list of libraries vs automatic non-moderated (e.g. from Github, NPM).\nI didn&#x27;t want to limit users in what libraries they can compare. At the same time I wanted to provide data from different platforms (npm, Github, Google Trends, etc.), the more different data sources the better. I couldn&#x27;t come up with a solution how, for example, to map every npm package to every data source. Therefore I decided to have a moderated list of libraries and configure data sources for every library manually.<p>2. Scale nicely in both directions - horizontally (supported libraries) and vertically (charts and data sources).\nIt was a pure technical problem and quite easy to solve - I created a configuration file where I configure charts and data sources for every library<p>3. Shareable comparisons.\nSelected apps are saved as url query parameters.<p>4. Find the right data sources for charts&#x2F;diagrams.\nSometimes it&#x27;s easy to find the right api and use it, sometimes not.\nFor example, I wanted to add a &quot;Release frequency&quot; (number of releases per year) chart. I thought it&#x27;s easy to do and I just need to use Github api for that. Turned out not all js libraries provide release history data via Github api (not sure why). Then I had an idea of using jsdelivr.com data, but they don&#x27;t have release dates.\nFinally I found an npm api which probably provides the needed data for all the packages, but it can take ~1Mb per package...<p>5. Do not abuse data sources and avoid &quot;Service Unavailable&quot; kind of problems.\nCurrently every api call is cached for 24 hours (though it seems to not work the way I expect. Need to dive deeper here)<p>Ideas for the next charts:\n- build size (raw&#x2F;minified&#x2F;gzipped)\n- contributors\n- real usage of libraries (share of sites that use the library)\n- vacancies per technology\n- salaries per technology\n- licenses\n- use of stateofjs survey<p>TechStack: Vercel, Vue, Tailwind, Fauna (database)<p><i>Request for comments&#x2F;questions</i>\nRight now I&#x27;m keen to know if <a href="https:&#x2F;&#x2F;jsdiff.dev" rel="nofollow">https:&#x2F;&#x2F;jsdiff.dev</a> is something that can be interesting to others and worth building.\nWhat metrics users need the most.\nAny questions, comments and suggestions are very welcome and valuable.')