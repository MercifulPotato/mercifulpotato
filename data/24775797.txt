Item(by='rkangel', descendants=None, kids=[24776082], score=None, time=1602679061, title=None, item_type='comment', url=None, parent=24775650, text='It shouldn&#x27;t need to know implementation details, but it should need to know expected behaviour. The use of ICartDiscountStrategy and BulkPurchaseDiscountStrategy is an implementation detail, the high level requirement that buying 10 of something should be cheaper than 9 is just specified system behaviour and that is exactly what you should be testing for.<p>I would refer to these tests as &quot;integration tests&quot; although the language is poor here. Test a load of module together. This is beneficial in a number of ways: It tests whether modules are integrated together correctly - you can check that module A works and calls your fake of module B correctly, but you don&#x27;t have a good way to check that your fake of module B matches module B behaviour properly (in practice it&#x27;s usually when there are multiple modules involved that the problems occur). Unit tests only test stuff in isolation. It also means that you can refactor all that code, and as long as you don&#x27;t change the top interface the tests will remain valid. If you move some responsibility around and change interfaces this can result in a lot of time consuming unit test changes, and that usually means that people don&#x27;t actually structurally refactor as much as they should do.<p>Integration tests do not replace unit tests, they should just be taking a lot of the load. This at least is my interpretation of the well known &quot;Write tests. Not too many. Mostly integration&quot; tweet (<a href="https:&#x2F;&#x2F;twitter.com&#x2F;rauchg&#x2F;status&#x2F;807626710350839808" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;rauchg&#x2F;status&#x2F;807626710350839808</a>).')