Item(by='KMag', descendants=None, kids=[25581513], score=None, time=1609201173, title=None, item_type='comment', url=None, parent=25558429, text='It&#x27;s rare to have one function that uses both a lot of integer operations and a lot of fp operations.  My understanding is that there are two advantages to having split gp and fp register files: (1) it is advantageous to not have integer&#x2F;address calculations and fp operations not contend with each other over register file read ports (2) you get twice as many visible (architectural) registers without taking up more bits in the instruction stream.<p>My understanding is that the designers of both POWER and  aarch64 did a bunch of research before settling on 32 for the number of gp registers, and there are some workloads where 32 are really needed, so having a fixed split is suboptimal for some workloads.  Aarch64 isn&#x27;t that old, and I&#x27;m not aware of major improvements in compiler register allocation algorithms since it was designed.  Are you contending that ARM made a mistake in their analysis when expanding from 16 to 31&#x2F;32 gp registers for aarch64?<p>So, my assumptions are (1) optimal split between fp and gp depends on workload (2) splitting them has a cost in die area for low-power implementations and (3) high performance chips can use the register renaming hardware to get the extra register file read ports from split register files and  effectively tailor the gp&#x2F;fp split to the workload.  You wouldn&#x27;t need to make integer-fp forwarding an exception, though the forwarding might have latency similar to an L1 cache read.  Presumably, the register renaming hardware would keep a single bit (or small 2-3 bit saturating counter) to keep track of the last usage of each register, so that load instructions were likely to be stored to the optimal register file.<p>It just seems that if you&#x27;re going for a brand new green field architecture design, you can get rid of the cost of a split register file for low-power implementations and get all of the benefits of a split register file in high-performance designs that are going to have register renaming hardware anyway.<p>Maybe I&#x27;m missing something with regard to your comment about integer-fp forwarding needing to be an exception instead of incurring slight latency.')