Item(by='jpeloquin', descendants=None, kids=None, score=None, time=1603934949, title=None, item_type='comment', url=None, parent=24923175, text='&gt; there&#x27;s nothing inherent to any particular domain that demands this kind of &#x27;magical&#x27; API<p>Plotting seems to tend towards magic because plots are basically art, with all the desire for aesthetic customization that applies, and it&#x27;s a very common task so users also want brevity (magic).  The result is a plot() function with a gazillion options hidden behind keyword arguments.<p>I agree that matplotlib has a sprawling interface,  and this can be annoying, but I&#x27;m still not sure what &quot;guess the caller&#x27;s intent by inspecting the types of the arguments&quot; means.  Sure, the functions have multiple call signatures, but that&#x27;s not exactly unusual in libraries or languages.  I don&#x27;t understand the context that brings guesswork into the picture.  Skimming the manualâ€”are you using the data keyword argument and hitting the `plot(&#x27;n&#x27;, &#x27;o&#x27;, data=obj)` ambiguity [0]?  Or calling plot through `pyplot.plot` &amp;c. (which rely on state) instead of `Axes.plot` &amp;c.?<p>Asking because if there&#x27;s an interface trap I&#x27;m unaware of I&#x27;d like to learn about it before walking into it blindly.<p>Pandas I sort of agree with; I personally find it harder to remember how to use pandas than dplyr, despite using pandas more often and spending more time reading the pandas documentation.  I also find it inconvenient to represent missing values in Pandas (`None` and `NaN` are overloaded, and `None` forces the `object` dtype).  But maybe the problem is on my end.<p>[0] <a href="https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.2&#x2F;api&#x2F;_as_gen&#x2F;matplotlib.pyplot.plot.html" rel="nofollow">https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.2&#x2F;api&#x2F;_as_gen&#x2F;matplotlib.pyplot.p...</a>')