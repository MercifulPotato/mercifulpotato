Item(by='dkarl', descendants=None, kids=[24688480], score=None, time=1601909972, title=None, item_type='comment', url=None, parent=24686474, text='The requirements here aren&#x27;t clear, but I&#x27;m guessing the requirement is to model the contracts the company actually has with customers.<p>The business <i>also</i> tells you that there are never two contracts running at the same time.  But are you actually going to believe that?  Is this condition really &quot;impossible?&quot;<p>A vital and necessary factor here is whether the system being designed has complete control of the creation of contracts.  This is perhaps taken for granted by the author, but it&#x27;s too important to leave implicit.  You have three choices in a situation like this:  <i>make</i> it impossible for contracts to overlap, model it, or don&#x27;t model it and accept the consequences.  Depending on the frequency and the consequences of the assumption being incorrect, maybe it&#x27;s acceptable not to model it.  Maybe not. My point is that you can&#x27;t assume something is impossible unless you can actually prevent it from happening, and the author should not have sidestepped this part of the analysis (though possibly they meant for it to be understood that contract creation happens through this data model.)<p>&gt; Also don&#x27;t forget that this is only an example.<p>The problem is that this is an example meant to illustrate and justify a rule of thumb, but it&#x27;s extremely, extremely simple.  How often do you deal with requirements that are this simple, this mathematical?  Is this really the kind of example you want to build a rule of thumb from?<p>Realistically, when I hear requirements like this, I assume they&#x27;re wrong (very common at the beginning of a project) and I get together with the product manager and ideally a domain expert representing the customer (if the product manager isn&#x27;t too territorial about that being their job) and figure out what the hell the actual requirements are.  What if a customer has a contract to rent 10 units of space at $5 and in the middle of that contract needs more 5 more units but the price has gone up $10?  Do you tell them they have to cancel the existing contract at $5 and pay $10 for all their units if they want to add some?  Or give them the new units at the old price?  Or is it okay to represent the same customer by distinct customer records?<p>I do like the principle of making invalid states unrepresentable, but I would like to add two supplementary principles:<p><i>1.  Oftentimes what the business tells you about the data they produce is purely aspirational.</i><p>&quot;There will never be overlapping contracts,&quot; often means, &quot;We swear we&#x27;re going to stop creating overlapping contracts, and this time we really mean it.&quot;  You have to follow up with questions like, &quot;How often have we had overlapping contracts in the past?  When was the most recent occurrence?&quot;  You should even ask, &quot;When do we anticipate signing the next one?&quot;  A logically-oriented software developer might expect someone to take offense if you respond to &quot;we don&#x27;t sign contracts like that&quot; with &quot;Do you have any currently in the pipeline?&quot; but this is a totally normal kind of question to ask.<p><i>2.  When users give you a rule in their business requirements, they often take it for granted that the software will handle exceptions to the rule gracefully.</i><p>They don&#x27;t necessarily appreciate how bad things can go in software when something &quot;impossible&quot; happens.  When they say, &quot;Contracts will never overlap,&quot; you have to say, &quot;What should happen when they do?&quot;  If you are talking to a mathematician or a programmer this might come off as questioning their competence, but most people will not find it unusual at all or at least will appreciate that the question is motivated by experience rather than disrespect.  It&#x27;s not like a math problem in school; it is legitimate to question the givens.')