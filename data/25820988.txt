Item(by='saagarjha', descendants=None, kids=None, score=None, time=1610972230, title=None, item_type='comment', url=None, parent=25820109, text='Xcode is…not very extensible IDE, I&#x27;ll grant you that. The true impact of XcodeGhost is felt to this day :( I wish it was more extensible, and have myself done sketchy things to make it so, but I entirely agree with you that this is not a positive by any means.<p>If you are dealing with Xcode settings, move everything you can into xcconfigs, full stop. Just do it. It will save you countless merge conflicts, you&#x27;ll be able to do mix and match and inheritance easily, and you&#x27;ll actually understand what your build process is doing rather than it being a black box. I have no qualms blowing away targets and schemes now because I can just make them on demand and let Xcode autocreate the rest.  I can &quot;rebrand&quot; an app in seconds and undo the changes in the same amount of time. Things which get used by other people always have ⌘B do the full build rather than some strange dance of &quot;oh CocoaPods changed those settings so you should try to not set your development team on these targets and the dependency analysis is a little broken so…&quot;.<p>Debugger variables are…fine, I guess? I think the biggest issue I have with it is that it&#x27;s placed in a not-so-great place, where it is generally to small to really see things. So usually I grab that information myself through a combination of p&#x2F;po.<p>Xcode is still slick, IMO. Performance wise I haven&#x27;t seen a huge change–it gets steadily bigger and slower and more complicated, but at about the rate that I update my computer. The people testing Xcode are clearly not using an Early 2015 MacBook Pro like I am, so I write off some of the features like Playgrounds or Previews or many simulators, but other than that I guess it&#x27;s fine? I certainly value that it opens &quot;immediately&quot; rather than &quot;initializing&quot; (looking at you, Java-based IDEs…).<p>Where Xcode really shines is the things you touched upon: its integration with LLVM is first-class. It&#x27;s certainly my preferred frontend to LLDB. The ability to flip on a bunch of diagnostics with one click has surely found many bugs, and the the built-in tooling for debugging memory graphs and view hierarchies is quite good–yes, it breaks sometimes, but it gives me useful results that I can&#x27;t quickly get anywhere else nine times out of ten. Instruments is certainly unparalleled on macOS for external developers, and in comparison to tooling elsewhere it&#x27;s a very solid offering.<p>Finally, of course, it&#x27;s a nice native Mac app that plays well with all the other ones. That has to count for something :)')