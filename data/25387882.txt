Item(by='squeaky-clean', descendants=None, kids=None, score=None, time=1607705943, title=None, item_type='comment', url=None, parent=25387481, text='If I&#x27;m reading it correctly, it loads up an array of points [0], and after you move your cursor it loops through all points and finds the one with the nearest distance [1]. It seems like every image has the URL structure &#x2F;images&#x2F;[index of point].jpg.<p>The interesting bit is it keeps a list of the 4 point&#x2F;images you&#x27;ve most recently seen, and will ignore those when searching for the new nearest point&#x2F;image. Then scales that image to point at your cursor more accurately. This is why it feels pixel-perfect or so, because you won&#x27;t get a repeat image until you refresh, or try the same location 5 times.<p>To test that out, ctrl+tab away and back to the tab without moving your cursor. You&#x27;ll always get a different image. Then refresh the page, and ctrl+tab away and back again without moving your cursor. You&#x27;ll see the same images in order.<p>Also neat that what was once a jQuery app now uses React and Typescript.<p>[0] <a href="https:&#x2F;&#x2F;pointerpointer.com&#x2F;new-positions.json" rel="nofollow">https:&#x2F;&#x2F;pointerpointer.com&#x2F;new-positions.json</a><p>[1] From &#x2F;static&#x2F;js&#x2F;Point.ts<p><pre><code>    const bruteClosest = (position: Point, positions: Point[]) =&gt; {\n      let index = undefined;\n      let closest = Number.MAX_VALUE;\n      for (let i = 0; i &lt; positions.length; i++) {\n        const pos = positions[i];\n        const distance = distancePoints(pos, position);\n        if (distance &lt; closest &amp;&amp; !lastPicked.includes(i)) {\n          closest = distance;\n          index = i;\n        };\n      }\n      lastPicked.unshift(index!);\n      lastPicked.length = Math.min(lastPicked.length, 4);\n      return index;\n    };</code></pre>')