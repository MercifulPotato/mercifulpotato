Item(by='bane', descendants=None, kids=None, score=None, time=1605271242, title=None, item_type='comment', url=None, parent=25074174, text='Many years ago I would 110% agree that developing software was more art than science, and that the average software developer was working in a creative medium. But those days are generally over for the vast majority of software engineering needs. But this was in the days when memory was available in kb, the OS was a thin veneer over the hardware, your choices of languages were more which dialect of an machine language you worked in, and the fact that software worked at all was a miracle.<p>These days, with virtually unlimited memory, storage, and extremely high software reuse, the industry has been effectively bootstrapped to the point that the average software engineer is more of a tradesman than an artist - a plumber or an electrician, who&#x27;s job it is to fit standard components into the space provided for by the business logic. While there are elements of creativity to that job, it&#x27;s no longer a truly creative medium for <i>most</i> jobs. This in a broad sense was the miracle of Java.<p>That&#x27;s not to say that there still isn&#x27;t the room for beautiful, elegant, code. But those tasks are rare, and they tend to target some low-level highly reusable code that the digital plumbers can reuse over and over without any nod to artistry.<p>If assembly line levels of engineering are ever achievable in software engineering, then it&#x27;s most likely that software engineering can simply be mostly or entirely automated and the &quot;engineer&quot; disappears. But that&#x27;s not where the field is yet. When that&#x27;s achieved (maybe in the near future!), a user of a computer can simply ask the computer to build software to perform some function based on some conversational Q&amp;A and and entire, scalable software stack will appear out of the ether.<p>&quot;Computer, I need to...&quot; and software will appear that does that.')