Item(by='bmitc', descendants=None, kids=None, score=None, time=1606963842, title=None, item_type='comment', url=None, parent=25284479, text='I am currently using a Digilent Nexys A7-100T.<p><a href="https:&#x2F;&#x2F;store.digilentinc.com&#x2F;nexys-a7-fpga-trainer-board-recommended-for-ece-curriculum" rel="nofollow">https:&#x2F;&#x2F;store.digilentinc.com&#x2F;nexys-a7-fpga-trainer-board-re...</a><p>It has a USB host port for a keyboard and VGA out for the display. The jury is still out as to whether I can build the entire CPU using nand gates, including the ROM and RAM memory. Doing so will use a <i>lot</i> of the FPGA&#x27;s resources from calculations I&#x27;ve seen. If that&#x27;s not possible for the memory, then I plan on using the block RAM that&#x27;s included on the Xilinx board, but for everything else I plan on following the book&#x27;s design as close as possible. So far, I am in chapters 1-3 simply porting my solutions in the course&#x27;s HDL to VHDL, which is relatively straightforward so far. I&#x27;m taking my time to make sure I&#x27;m doing things &quot;professionally&quot;, as I&#x27;d like to learn the Xilinx toolchain in my professional work at some point. My experience with FPGAs has been implementing them with LabVIEW, which actually makes learning VHDL somewhat mechanical although a bit frustrating. (If I had an FPGA big enough that&#x27;s targetable via LabVIEW, I could probably build and test the computer in a day or two aside from the VGA and keyboard.) The combinatorial gates are done now, and I&#x27;ve implemented a DFF and am building things from there. So now I&#x27;m learning about clocking and such with VHDL. The most troublesome part I anticipate is what to do about the ROM and RAM memory and the display and keyboard. I&#x27;d also like to update the CPU where I can interactively download new code to the CPU from a PC using the assembler and software stack I&#x27;m building, which is in F#.<p>I have several books I am using as reference:<p>- <i>VHDL By Example</i> by Blaine C. Readler (great first intro to VHDL)<p>- <i>Digital Design Using Digilent FPGA Boards: VHDL&#x2F;Vivado Edition</i> by Haskell and Hanna<p>- <i>Effective Coding with VHDL: Principles and Best Practices</i> by Ricardo Jasinski (I&#x27;m using this to sort through the various ways to do things in VHDL and have best practices in my code.)<p>- <i>VHDL for Logic Synthesis</i> by Andrew Rushton<p>- <i>FPGA Prototyping by VHDL Examples: Xilinx MicroBlaze MCS SoC</i> by Pong Chu')