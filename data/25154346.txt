Item(by='dragonwriter', descendants=None, kids=None, score=None, time=1605819952, title=None, item_type='comment', url=None, parent=25147990, text='&gt; The explicit nil in the original implementation implies that the method is being called for its return value — that it’s probably functional, with inconsequential side effects.<p>&gt; Making the nil implicit says that the return value is not important. This method now reads like it’s implemented by avoiding side effects within super.<p>That&#x27;s...not my understanding of idiomatic ruby conventions. The idea that a method is assumed to have no or inconsequential side effects and be called only for its return value with an explicit return, but to be called for side effects with an implicit one, is a <i>Python</i> idiom, not a <i>Ruby</i> idiom. As I understand Ruby idiom, it is basically &quot;a method defined with `def` is assumed to have both significant side effects <i>and</i> a significant return value unless documented otherwise on either point, except that a method with a name ending in `?` is assumed to return a value meaningful in a boolean context and have no or inconsequential side effects.&quot; Concise function bodies with implicit nil returns are normal, including for functions called for their return value.')