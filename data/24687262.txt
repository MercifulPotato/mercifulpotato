Item(by='dpryden', descendants=None, kids=None, score=None, time=1601902194, title=None, item_type='comment', url=None, parent=24686527, text='I think much of the difference here depends on your workflow. Where do you run tests? How do you manage build infrastructure? What is your process for code review? What is your process for validation and testing of shared branches? How do you manage releases?<p>In my opinion, squash merges make the most sense when the following are true:<p>1. Developers cannot push directly to shared branches; all commits into shared branches are done via pull requests with mandatory code review.<p>2. Shared branches must build and pass tests at every commit.<p>3. The team builds features incrementally and uses the &quot;Branch by Abstraction&quot; approach (feature flags&#x2F;experiments) to ensure functionality can be merged before it is ready to be enabled in production.<p>4. Changes that merge into the shared (&quot;trunk&quot;) branch are released frequently.<p>Now, you may argue against some of those practices, and if you end up in a different place on one of those, squashes may not make sense to you. But then the actual difference of opinion is elsewhere. It&#x27;s not really about squashing, it&#x27;s about how much code is a reasonable granularity to code review at one time.<p>If you can keep the code review cycle tight, then a pull request branch basically becomes almost like a virtual pair-programming session. There may be some back and forth as the author and reviewer settle on a final form of the commit. But I don&#x27;t see the commits that happen along the way as valuable in the least. (In my experience, the vast majority of intermediate commits are things like &quot;fix typo&quot;, &quot;make linter happy&quot;, &quot;rename this function because code reviewer pointed out it was named inconsistently&quot;, etc.) Instead, my mental model is that a pull request is like a mutable commit: you keep mutating it until it&#x27;s the commit you want, and then you merge it. Since my mental model is that a pull request is a kind of commit, it makes sense that when it merges in, it does so as a single commit.<p>Again, I&#x27;m not saying that this is the only valid way to work. But neither is it an invalid way to work.<p>As a meta-comment: When you see someone else making a technical decision that doesn&#x27;t make any sense to you, rather than instantly assuming that they are a clueless incompetent, it&#x27;s usually more instructive to assume that the decision does make sense to them, and to try to figure out what about their circumstance is different from yours to make that the case.')