Item(by='sai_c', descendants=None, kids=[24753633, 24752994], score=None, time=1602495691, title=None, item_type='comment', url=None, parent=24752150, text='<p><pre><code>   * unsafe makes it very easy for you to audit where data races or memory errors are possible, instead of needing to audit an entire c codebase\n</code></pre>\nI have seen this argument a couple of times before. But I can&#x27;t make myself buy it.\nBecause I always have to think about embedded systems in the car industry. Look at this list:<p><a href="https:&#x2F;&#x2F;betterembsw.blogspot.com&#x2F;2018&#x2F;09&#x2F;potentially-deadly-automotive-software.html" rel="nofollow">https:&#x2F;&#x2F;betterembsw.blogspot.com&#x2F;2018&#x2F;09&#x2F;potentially-deadly-...</a><p>The argument is basically &quot;the possible fail places are easily grepable&quot;, right? \nI said in another comment in this thread (jokingly) &quot;time is money&quot;. It seems for the devs in the car industry this saying is of utter most importance.<p>So how does Rust prevent something like this throughout the code base (and those are BIG code bases):<p>&quot;LOL. I need to get this done.\n    unsafe {\n        ...\n    }\n&quot;')