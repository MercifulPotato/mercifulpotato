Item(by='golergka', descendants=None, kids=[25015065, 25015080], score=None, time=1604755336, title=None, item_type='comment', url=None, parent=25014582, text='Searched the article for the word &quot;join&quot;, no hits. Strange: this is my personal top counter-argument to use GraphQL.<p>On my current project, we&#x27;re using Graphana with Postgresql on the server and Apollo on the client. You create a new table in database, click a couple of buttons in Graphana admin panel, and the client now can query those tables, without a single line of code on the server! This part is awesome.<p>What is much less awesome though, is when you have a normalized database, and entities with many layers of links, and your client can generate GraphQL queries with so many crazy joins that will take your production database 30 seconds to complete â€” all while accessing public data, with no authentication required. So far, I haven&#x27;t seen anybody figuring it out to DDoS our server, and every time this happens with real production queries, I get a fun index writing task.<p>However, just being able to run into database perfomance limitations by writing code on the client seems wrong. There&#x27;s always going to be weird joins that we won&#x27;t optimise for, and sooner or later there will be determined DDoSers who will figure it out and will be able to spam our server much more effectively with each query. I&#x27;m not yet sure what&#x27;s the right way to alleviate this problem is, it&#x27;s just strange that no one is talking about it.<p>Edit: I think I have been proved wrong by lukeramsden&#x27;s comment below; or at least I should research this more before having an opinion on this matter.')