Item(by='tanelpoder', descendants=None, kids=None, score=None, time=1611937614, title=None, item_type='comment', url=None, parent=25958726, text='Good question. I don&#x27;t ever read kernel code as a starting point, only if some profiling or tracing tool points me towards an interesting function or codepath. And interesting usually is something that takes most CPU in perf output or some function call with an unusually high latency in ftrace, bcc&#x2F;bpftrace script output. Or just a stack trace in a core- or crashdump.<p>As far as mindset goes - I try to apply the developer mindset to system performance. In other words, I don&#x27;t use much of what I call the &quot;old school sysadmin mindset&quot;, from a time where better tooling was not available. I don&#x27;t use systemwide utilization or various get&#x2F;hit ratios for doing &quot;metric voodoo&quot; of Unix wizards.<p>The developer mindset dictates that everything you run is an application. JVM is an application. Kernel is an application. Postgres, Oracle are applications. All applications execute one or more threads that run on CPU or do not run on CPU. There are only two categories of reasons why a thread does not run on CPU (is sleeping): The OS put the thread to sleep (involuntary blocking) or the thread voluntarily wanted to go to go to sleep (for example, it realized it can&#x27;t get some application level lock).<p>And you drill down from there. Your OS&#x2F;system is just a bunch of threads running on CPU, sleeping and sometimes communicating with each other. You can <i>directly</i> measure all of these things easily nowadays with profilers, no need for metric voodoo.<p>I have written my own tools to complement things like perf, ftrace and BPF stuff - as a consultant I regularly see 10+ year old Linux versions, etc - and I find sampling thread states from &#x2F;proc file system is a really good (and flexible) starting point for system performance analysis and even some drilldown - all this without having to install new software or upgrading to latest kernels. Some of the tools I showed in my article too:<p><a href="https:&#x2F;&#x2F;tanelpoder.com&#x2F;psnapper" rel="nofollow">https:&#x2F;&#x2F;tanelpoder.com&#x2F;psnapper</a> &amp; <a href="https:&#x2F;&#x2F;0x.tools" rel="nofollow">https:&#x2F;&#x2F;0x.tools</a><p>In the end of my post I mentioned that I&#x27;ll do a webinar &quot;hacking session&quot; next Thursday, I&#x27;ll show more how I work there :-)')