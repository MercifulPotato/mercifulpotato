Item(by='csnover', descendants=None, kids=None, score=None, time=1602183326, title=None, item_type='comment', url=None, parent=24719900, text='Rust doesn’t support object inheritance (only traits). It also doesn’t have function overloads or default arguments. Qt relies heavily on all of these C++ features; inheritance is fundamental to how Qt works (for example, it is impossible to respond to mouse&#x2F;keyboard events without subclassing to override virtual methods), and function overloads with default arguments are used everywhere. As a result, it’s a struggle to shoehorn this object model into Rust.<p>rust-qt[0] doesn’t support inheritance at all, so you can only connect to things in Qt which accept callbacks using slots. It requires `&#x27;static` lifetime on those callbacks, so as far as I can tell you are also forced to use `Rc`s whenever you are doing something with a rust-qt object even if you should be able to use a plain reference. The code is auto-generated, so all APIs are `unsafe`, and no function overloads means names are gross because the function signatures must be expressed in the function name (e.g. the `QMessageBox` constructor[1] becomes `QMessageBox::from_icon2_q_string_q_flags_standard_button_q_widget`). This could be improved by using `Option`s for arguments with defaults, but right now this is what it looks like.<p>qmetaobject-rs[2] has some support for inheritance but as far as I can tell it’s limited to a couple of base types only. It’s also designed around using QML, so it doesn’t actually expose most of the Qt API. As such I don’t have too much experience with it.<p>I’m unaware of any other usable Rust Qt bindings right now. I currently make things work by using rust-cpp[3] to create C++ subclasses and smuggle events, but this sucks because it also means the objects on the Rust side need to have the Qt API re-exposed manually since AFAIK there isn’t a way to have Rust handle that without using a code generator. (There might be some hackier ways to make this work, or maybe someone with more Rust experience than me knows of something smarter that could happen, but in any case the ergonomics right now are not good for the average developer.)<p>[0] <a href="https:&#x2F;&#x2F;github.com&#x2F;rust-qt&#x2F;ritual" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;rust-qt&#x2F;ritual</a><p>[1] <a href="https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qmessagebox.html#QMessageBox-1" rel="nofollow">https:&#x2F;&#x2F;doc.qt.io&#x2F;qt-5&#x2F;qmessagebox.html#QMessageBox-1</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;woboq&#x2F;qmetaobject-rs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;woboq&#x2F;qmetaobject-rs</a><p>[3] <a href="https:&#x2F;&#x2F;github.com&#x2F;mystor&#x2F;rust-cpp" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;mystor&#x2F;rust-cpp</a>')