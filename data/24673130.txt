Item(by='staticassertion', descendants=None, kids=None, score=None, time=1601743312, title=None, item_type='comment', url=None, parent=24672614, text='It&#x27;s also Knuth quoting Tony Hoare, a man who I highly recommend everyone familiarize themselves with, he&#x27;s a wonderful speaker and is extremely intelligent.<p>The context of the quote from both Hoare and Knuth is critical, and is always left out.<p>&quot;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.&quot;<p>ie: 3% of the time you should absolutely care about &#x27;small&#x27; efficiencies. Given that most programs spend almost all of their time in a few places, this is hardly surprising, and 3% is actually a fairly sizable amount of code to optimize to the degree which the paper is discussing (most people are rarely dropping to tools like goto for performance).<p>And, <i>from the same paper</i> (Structured Programming with goto Statements):<p>&quot;The conventional wisdom shared by many of today&#x27;s software engineers calls for ignoring efficiency in the small; but I believe this is simply an overreaction to the abuses they see being practiced by pennywise-and-pound-foolish programmers, who can&#x27;t debug or maintain their &quot;optimized&quot; programs. In established engineering disciplines a 12 % improvement, easily obtained, is never considered marginal; and I believe the same viewpoint should prevail in software engineering. Of course I wouldn’t bother making such optimizations on a one-shot job, but when it’s a question of preparing quality programs, I don’t want to restrict myself to tools that deny me such efficiencies.&quot;<p>In other words, we should not write slower code when we can help it. Small efficiencies are well worth attaining in the general case, and the fears of writing &#x27;unreadable&#x27; code because it&#x27;s fast are mostly unfounded.<p>I believe this has never been truer. It&#x27;s easier than ever to create highly tuned code that&#x27;s hidden behind a 0 cost abstraction, and it&#x27;s well worth it to tune that code for simple and obvious wins - we should never strive for inefficiency, as so many seem to advocate.')