Item(by='orware', descendants=None, kids=None, score=None, time=1609867316, title=None, item_type='comment', url=None, parent=25644656, text='Not that many people may be using Oracle and PHP together, but last summer I decided to take a closer look at some performance aspects since I&#x27;m wanting to move certain PHP things to the cloud, while our Oracle database remains local, which would introduce some extra latency.<p>In some basic testing on my local machine at work just connecting to our local Oracle database introduced a good 60 ms - 100 ms for a request (before running any sort of queries) and due to PHP&#x27;s nature this recurs on every new request.<p>I had searched for options for a long time in past months&#x2F;years that would allow PHP to have some sort of connection pool the same way languages like Java&#x2F;Go might allow, but had come up short each time.<p>I don&#x27;t even recall how I came across it, but last July I finally learned about Oracle&#x27;s Database Resident Connection Pooling feature (and then reminded my coworker about wanting to try it out in November) and was able to run some tests and it does a good job of eliminating most of that unnecessary connection waiting time for PHP applications so I was pretty happy with that testing and it didn&#x27;t seem to increase the load much at all on the database server side.<p>Even though it might not be as ideal as a truly separate Connection Pool being managed at the application server level, or outside of the database, a Connection Pool available for use at the database level still has benefits so it would be kind of neat to maybe see more of this sort of approach be available with other vendors (if it isn&#x27;t already).<p>EDIT: Forgot to add that as a result of the DRCP testing, even though moving the PHP side to the cloud introduces extra latency, with the time savings of the DRCP change, it helps reduce latency enough that overall it results in a time savings over the normal&#x2F;conventional connection approach when the PHP code is local so for me that was a win (hopefully I&#x27;ll get to try using it in production in the near future, but waiting on my colleague to sort out a few things with enabling it in production at the moment).')