Item(by='solodev1', descendants=None, kids=None, score=None, time=1601899982, title=None, item_type='comment', url=None, parent=24680538, text='Adhering to OpenApi 3.0 spec <a href="https:&#x2F;&#x2F;swagger.io&#x2F;docs&#x2F;specification&#x2F;about&#x2F;" rel="nofollow">https:&#x2F;&#x2F;swagger.io&#x2F;docs&#x2F;specification&#x2F;about&#x2F;</a> you will be able to take advantage of plenty of tools available to you, regardless of the programming language&#x2F;framework chosen to build your software.<p>It&#x27;s not always possible or desirable to have back-end models and controllers auto-generated from OpenApi spec, but still I totally recommend to make an extra effort to keep documentation and API in sync since day 1 as API is evolving.<p>Document an API it&#x27;s definitely not an easy task, but it pays off - specially if you plan to have third-party developers consuming your API in the future beyond your own engineering team.<p>Some important points I try to be disciplined about, based on my own experience building APIs in C#, Delphi, Go, Java, Node.js, PHP, Python and Ruby:<p>1) Document your API from day 1<p>2) Update your API docs every time you commit a new change to your models&#x2F;controllers&#x2F;endpoints<p>3) Test your API docs against your actual implementation. Dredd is a great tool for that: <a href="https:&#x2F;&#x2F;github.com&#x2F;apiaryio&#x2F;dredd" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;apiaryio&#x2F;dredd</a><p>4) Build an API client from day one (web app, command line app, desktop app, whatever), and use it for testing the consumption of your API endpoints, and update it every time your API changes<p><i></i>* Benefits: \nyou&#x27;re gonna have a perception of the developer experience that your API users are going to have when consuming it, and very likely that will bring you some insights on opportunities to make things simpler or better documented (header params, query params, request payloads, endpoints signature, response status codes, ...)')