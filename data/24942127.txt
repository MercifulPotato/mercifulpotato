Item(by='couchand', descendants=None, kids=None, score=None, time=1604065670, title=None, item_type='comment', url=None, parent=24941470, text='This may be the first time I&#x27;ve ever disagreed with a comment you&#x27;ve made, but here we go!<p>&gt; Meanwhile, safety in a web application is domain-specific, and there isn&#x27;t much a language can do to protect you.<p>There absolutely is.  Rust&#x27;s expressive type system is a more important feature than the memory-safety guarantees for general purpose programming.  This has significant impact on the ability to express security constructs directly in the code.  Witness, for instance, the widespread use of typing to distinguish unvalidated and validated user inputs, such as Rocket&#x27;s RawStr type [0].<p>Applying that technique can mitigate SSRF attacks without even knowing the details.  You can worry all you like about SQLI in Rust, but in the code I&#x27;ve seen it&#x27;s no more a concern than any web app, and likewise it can be enforced in the type system in a way that sure seems superior to &quot;hope the dev only writes boring Python&quot;.<p>I&#x27;d agree with the general premise that, all things being equal, the security of something that looks exactly like everything else is higher than some novel construct.  But I strongly disagree that there&#x27;s nothing a language can do to help developers write secure applications, and I&#x27;d suggest it starts with an expressive type system.<p>[0]: <a href="https:&#x2F;&#x2F;api.rocket.rs&#x2F;v0.4&#x2F;rocket&#x2F;http&#x2F;struct.RawStr.html" rel="nofollow">https:&#x2F;&#x2F;api.rocket.rs&#x2F;v0.4&#x2F;rocket&#x2F;http&#x2F;struct.RawStr.html</a>')