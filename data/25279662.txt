Item(by='btown', descendants=None, kids=[25280954], score=None, time=1606934146, title=None, item_type='comment', url=None, parent=25278540, text='For a primer on materialized views, and one of the key rationales for Materialize&#x27;s existence, there&#x27;s no better presentation than Martin Kleppman&#x27;s &quot;Turning the Database Inside-Out&quot; (2015). (At my company it&#x27;s required viewing for engineers across our stack, because every data structure <i>is</i> a materialized view no matter where on frontend or backend that data structure lives.)<p><a href="https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;turning-the-database-inside-out-with-apache-samza&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.confluent.io&#x2F;blog&#x2F;turning-the-database-inside-ou...</a><p>Confluent is building an incredible business helping companies to build these types of systems on top of Kafka, Samza, and architectural principles originally developed at LinkedIn, but more along the lines of &quot;if you&#x27;d like this query to be answered, or this recommender system to be deployed for every user, we can reliably code a data pipeline to do so at LinkedIn scale&quot; than &quot;you can run this query right away against our OLAP warehouse without knowing about distributed systems.&quot; (If it&#x27;s more nuanced than this please correct me!)<p>On the other hand, Materialize could allow businesses to realize this architecture, with its vast benefits to millisecond-scale data freshness and analytical flexibility, simply by writing SQL queries as if it was a traditional system. As its capabilities expand beyond parity with SQL (though I agree that&#x27;s absolutely the best place for them to start and optimize), there are tremendous wins here that could power the next generation of real-time systems.<p>EDIT: some clarifications and additional examples')