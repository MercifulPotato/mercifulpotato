Item(by='nostrademons', descendants=None, kids=[25088930], score=None, time=1605310429, title=None, item_type='comment', url=None, parent=25085276, text='The static&#x2F;dynamic debate reoccurs every ~20 years and has more to do with the economics of the software industry than any intrinsic merits of each approach.<p>In times of rapid change, technological revolution, and landgrabs for market share, dynamic typing wins out.  Why?  Because you don&#x27;t <i>know</i> what information you want to encode in your schema.  You get this by putting products in front of users, changing them, and see what resonates and increases your growth rate.  This was the case in the early 60s (mainframes &amp; scientific computing), the early 80s (AI &amp; PCs), and the early 00s (Web 2.0).<p>In times of steady-state, where the dominant players have already been established and we&#x27;re just filling in niches, static interfaces dominate.  This is a way of building supplier networks, increasing efficiency, and locking down best practices.  At this point the users are largely known, we&#x27;re just trying to serve them better.  This was the case in the 70s (mainframes), 90s (Windows), and 10s (Internet&#x2F;mobile).<p>The challenge for a new startup selling statically-typed APIs is that at this point, the ecosystem is already established, the big players are in place, and remaining startups are just filling in niches.  <i>Somebody</i> is likely to win with a statically-typed API, but it&#x27;ll likely be Google (gRPC), Facebook (Thrift), or Microsoft (TypeScript?) rather than some startup.')