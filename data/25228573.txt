Item(by='contravariant', descendants=None, kids=[25229931], score=None, time=1606484098, title=None, item_type='comment', url=None, parent=25226764, text='&gt;I know that it’s common to refer to type checking as “semantic analysis”, but the logician in me is not happy. There’s nothing inherently more “semantic” about types compared to grammars.<p>They can be semantic and in practice are used semantically, especially in nominal type systems. It depends on the programming language how much they enforce though, but even if you don&#x27;t enforce anything names carry <i>meaning</i>, and to some extent meaning isn&#x27;t even about what should be impossible but what you should expect (though some states should be impossible). For instance there&#x27;s no restriction you can build in that would make &#x27;DegreesFahrenheit&#x27; and &#x27;DegreesCentigrade&#x27; any different, in fact you could argue that any place one of them can be used the other is also valid. The <i>meaning</i> however is very different.<p>&gt;To change a type checker into a parser it would have to output a representation which makes invalid states impossible to represent.<p>Agreed.<p>That doesn&#x27;t require you to do anything on the level of the grammar of the language though, parsing the text a programmer wrote and parsing an object to a certain type are two <i>very</i> different operations. It doesn&#x27;t matter how a programmer produced the AST what matters is whether it makes sense (which is a semantic matter as the parser already forces the AST to be grammatically correct).')