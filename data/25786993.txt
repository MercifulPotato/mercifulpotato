Item(by='rckoepke', descendants=None, kids=[25787516], score=None, time=1610684740, title=None, item_type='comment', url=None, parent=25786236, text='I believe the first attempts at doing something like this were back in July of 2020. <a href="https:&#x2F;&#x2F;github.com&#x2F;below&#x2F;HelloSilicon" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;below&#x2F;HelloSilicon</a> : Someone with an early Developer Transition Kit (pre-M1 release) worked to convert the code from &quot;Programming with 64-Bit ARM Assembly Language&quot; to the M1&#x27;s syntax.<p>Porting additional  textbooks to M1&#x27;s (ARMv8) syntax could help a lot in terms of making assembly accessible to more people. I believe there&#x27;s a lot of value in learning it on a particularly popular real-world platform like x86 or M1 - where it may directly translate to reverse engineering userspace applications without having to then learn another assembler language as you might if you started with, say, RISC-V.<p>Truthfully I think someone should really add the M1 syntax to the new version of VisUAL: <a href="https:&#x2F;&#x2F;github.com&#x2F;scc416&#x2F;Visual2" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;scc416&#x2F;Visual2</a> . I&#x27;ve been intending to work on that to go along with porting Bob Plantz&#x27; &quot;Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi&quot; to ARMv8 for the same educational purpose but haven&#x27;t quite found the time to really dive in. A tool like VisUAL2 could help a lot of people learn this even if they don&#x27;t own an M1 themselves.<p>Very tangentially to all of this, I&#x27;d like to showcase <a href="https:&#x2F;&#x2F;github.com&#x2F;cornell-brg&#x2F;pydgin" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;cornell-brg&#x2F;pydgin</a> , which is a flexible toolkit for simulating ISA&#x27;s in Python, and was used to help validate the first version of VisUAL during its own development.')