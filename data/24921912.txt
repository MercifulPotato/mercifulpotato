Item(by='an_ko', descendants=None, kids=None, score=None, time=1603907544, title=None, item_type='comment', url=None, parent=24920831, text='[ To save readers a search, LIPS is at <a href="https:&#x2F;&#x2F;github.com&#x2F;jcubic&#x2F;lips" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;jcubic&#x2F;lips</a> ]<p>I&#x27;m happy that eslisp has inspired other language ideas.  LIPS is cool.   The auto-resolving Promise feature is a great idea that&#x27;s only really possible when you implement the language as an interpreter like you have.  Generated code for that would be a mess...<p>I agree about the <i>(. console log)</i> thing.  Such a common operation should be easy to type.  I only did it this way to avoid adding any more syntax to the language, because I thought I could solve that problem later by making the syntax configurable by users.<p>...which I haven&#x27;t really done well yet.  Eslisp has a system called _transform macros_, one of which is <a href="https:&#x2F;&#x2F;github.com&#x2F;anko&#x2F;eslisp-propertify" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;anko&#x2F;eslisp-propertify</a> which turns `console.log` atoms into `(. console log)`, making the syntax legal.  The transform macro system is really awkward to use and limited in functionality.  I&#x27;m working in private on replacing the whole parser with one that user macros could modify, based on <a href="https:&#x2F;&#x2F;github.com&#x2F;anko&#x2F;partser" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;anko&#x2F;partser</a>.  Parser combinators are the future!')