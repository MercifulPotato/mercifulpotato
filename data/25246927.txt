Item(by='rcthompson', descendants=None, kids=[25247244, 25247133], score=None, time=1606674732, title=None, item_type='comment', url=None, parent=25246785, text='Not having to worry about the order of patches would (except where they explicitly depend on each other) is a really nice property to have. One consequence of this property, alluded to in the article, is that if I understand correctly, rebasing and merging effectively become the same operation. In Git, the difference between rebasing and merging is the resulting dependency graph of the commits. However, in Pijul, there is no dependency graph, at least not based on the order in which the commits are applied, so rebase and merge are equivalent.<p>For example, have you ever been doing code-review on a Github pull request and made an inline comment on a line of code, only to have that comment later invalidated by a rebase? That happens because the commit hashes were changed by the rebase, so the commit hash referenced by that comment is no longer contained in the pull request. There&#x27;s <i>probably</i> a new commit with a new commit hash representing the same change, but there doesn&#x27;t <i>have</i> to be. So Github can no longer be certain of where to place that comment, and it can&#x27;t tell you whether that comment is still relevant to the pull request in its current state. (IIRC, Github continues to show such comments but marks them as associated with commits that are no longer in the branch, which makes it hard to know if they&#x27;re still applicable.)<p>In Pijul, I&#x27;m pretty sure this problem simply doesn&#x27;t exist. A hypothetical &quot;Pijulhub&quot; that implemented the same &quot;comment on changes&quot; feature could certainly have comments on old changes that subsequently get removed from the pull request, but if that happens, then &quot;Pijulhub&quot; can confidently declare that those comments are no longer relevant to the current state. On the other hand, if some version of the same change is still present in the current state of the pull request, then &quot;Pijulhub&quot; can confidently continue to include that comment, still associated with that same change, because even after modifying the pull request, that change still has the same hash, because it still represents the exact same change.')