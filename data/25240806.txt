Item(by='haberman', descendants=None, kids=[25241975, 25243727, 25244874], score=None, time=1606599747, title=None, item_type='comment', url=None, parent=25240546, text='&gt; Here&#x27;s an example of a minimal makefile:<p>Your example does not contradict what I wrote. You manually specified the tool to be run ($CC) and all of the arguments to that tool.<p>It&#x27;s true that there is a level of indirection through the $CC variable, but you&#x27;re still operating at the level of specifying a tool&#x27;s command-line.<p>&gt; There&#x27;s no reason this shouldn&#x27;t be possible with make; it just hasn&#x27;t been implemented so.<p>Make is 44 years old.  If it were an easy extension to the existing paradigm, there has been ample time to implement such an extension.<p>&gt; Do bazel&#x2F;buck&#x2F;please actually do this? As far as I know tup is the only tool that actually verifies inputs&#x2F;outputs of rules, and it needs FUSE to do so.<p>Bazel certainly has some amount of sandboxing, though I don&#x27;t think it&#x27;s quite as complete as what is available internally at Google with Blaze.  I haven&#x27;t used Buck or Please, so I can&#x27;t speak for them.<p>&gt; True, it&#x27;s a bit of a footgun, but by no means difficult.<p>Well footguns aren&#x27;t great. :)  As just one example, any header that is conditionally included (behind an #ifdef) could cause this cache to be invalidated when CFLAGS change, but Make has no idea of this.')