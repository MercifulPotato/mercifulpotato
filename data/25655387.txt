Item(by='sudhirj', descendants=None, kids=[25656318], score=None, time=1609917659, title=None, item_type='comment', url=None, parent=25652121, text='Yeah, Rails doesn&#x27;t currently strongly analyze what it needs to do. Based on my experience with it, I remember that it either 1) checks out a connection at the beginning of the request into a thread local &#x2F; request context and releases it at the end of the request, or 2) checks out when the first active record work is attempted, and releases at the end of the request.<p>Either way, if you have a request flow of 1) DB read - 50ms 2) Network request - 200ms 3) DB write - 50ms, you can see that the connection is idle for 2&#x2F;3 of your request handling time. Rails does this so that if you start a transaction in step 1 you can commit it in step 3. All your writes are also automatically wrapped in a transaction, I think.<p>In Go on the other hand, step 1 will checkout and release the connection immediately, and step 3 will checkout and release. So the connection isn&#x27;t idle locked for the 200ms in step 2. But if you don&#x27;t remember this explicitly and try in step 3 to finish something (transaction&#x2F;advisory lock&#x2F;prepared statement) that you started in step 1, you&#x27;re screwed.<p>So Rails saved you from doom by holding onto a connection for an inefficient extra 200ms, and Go shoots you in the foot in the name of efficiency.')