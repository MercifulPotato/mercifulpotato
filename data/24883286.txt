Item(by='salawat', descendants=None, kids=None, score=None, time=1603590738, title=None, item_type='comment', url=None, parent=24881904, text='Certainly. Which parts, forgive me for the long delay, was building a shed today. In order though...<p>&gt;Secure Boot&#x2F;Trusted Computing<p>This is an effort born out of seemingly benevolent intentions. Rootkits, a form of malware known for implanting themselves into a computer system before an Operating System even loads and persisting in various exotic ways were quite difficult to detect or do anything about. By applying various cryptographic verification techniques though, one can be sure that software being loaded or delegated to is actually the &quot;original legit stuff&quot;.<p>The issue comes back to trust though. The community fought hard against a move that had been shaping up in the standardization of UEFI and secure boot to fight against entrenched industry actors being able to gatekeep or be the only holders of keys. The fear was that someone like Microsoft would utilize their position to remove a User&#x27;s ability to load a cryptographically &quot;unblessed&quot; OS. Happily, User&#x27;s can swap out that cryptographic material now, but many of the more arcane aspects to doing so on a system to system basis are poorly documented and difficult to discover. At least the desktop world seems to be pretty accesible, but the mobile world is a nightmare in regards to getting it up and running from the get go with minimal support and a modest home lab.<p>&gt;Monolith&#x27;s<p>The monoliths I speak of are tech giants. Microsoft, Apple, Google, Intel, Broadcom, Nvidia, etc. The different flavors of evil wrought vary by the particular actor. \nApple and Google have used their role as gatekeepers to their App store as a means to tap into novel business verticals, or to be able to ensure that other app developers can be frustrated or otherwise managed by applications of arbitrary structure and standards. Things such as code signing requirements baked into the OS have created situations where now there is a barrier to entry of at least understanding cryptography and the tools around it (once considered a niche and unnecessary computer programming skill, now core). It also dissuaded and complicates the keyboard to pixel prochain even more intimidating. I expected that I could hand my child a smartphone sized computer to program and crash to get familiar with computing fundamentals, but the world has gone <i>hard</i> the other way. Frankly any place with an App store has. Most mobile system foundries or OEM&#x27;s are notorious for locking down access to the implementation details of their silicon.<p>Nvidia, Microsoft, and even AMD&#x27;s graphics divisions have earned a access to a special place of hatred in my mind over the two pronged efforts of collusion with the media industry through software driver and hardware implementations that make it absurdly difficult to drive one&#x27;s own purchased graphics and coprocessor equipment as well as supporting abandoned hardware configurations. (I&#x27;m looking at you Sony, and your abandonment of the Nvidia GeForce 630M.)<p>All of this user hostility was absent when I was growing up. You had this machine where the only limit was what you had the documentation to read to know how to drive it. Nowadays, it seems everyone is more interested in shoving a microprocessor in things, but threatening with lawyer, anti-tamper, or absolution of themselves from having to provide any documentation to a buyer at all, of the responsibility to deliver to the user any constructive value, while at the same time, maximizing lock-in and recurring revenue streams. Look at HP printers nowadays for how microprocessors being inserted into the meta-logistical function of ink management makes user&#x27;s life actively worse, where previously one was free to source one&#x27;s ink from anywhere with nary a concern.<p>It&#x27;s got to stop.')