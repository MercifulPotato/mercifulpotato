Item(by='anfilt', descendants=None, kids=[25724864, 25724810], score=None, time=1610339719, title=None, item_type='comment', url=None, parent=25721501, text='I disagree with the idea of using C++. Even with some of its more modern features. If I was choosing a compiled language for system development right now I would choose C or Rust.<p>For starters C++ does not have a stable ABI. Rust plans too have a stable ABI. In either case right now both fall back to the C ABI, but at least its a goal of the rust devs.<p>C++ is going to be harder to boot strap than either Rust core or C when trying to build   a compiler for a new system&#x2F;platform. C probably is the easiest bootstrap of the 3.<p>Rust and C are generally more performant than C++ code. Also in the realm of low end micro controllers C code tends to have the smallest binary image size.<p>In C++ if you need to interact with other languages a lot  times your stuck to the C abi which which forces you to avoid a lot C++ features&#x2F;constructs. As for rust its not an object orientated language and its unsafe blocks generally make it easier to at least keep rust code idiomatic.<p>C++ is also a massive kitchen sink of a language with many ways to hide gotchas. Probably the worst thing in C is its null terminated strings but C++ also suffers from that. C is simple, and rust has at least so far made good design choices for the most part.<p>There also choices in the C++ language that are even part of the standard library that seemed like a good idea but with hind sight are not that great of idea. For example operator overloading.<p>Although we are talking a GCC front end so I would be surprised to see both C and C++.')