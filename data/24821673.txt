Item(by='rmk', descendants=None, kids=[24821747], score=None, time=1603060470, title=None, item_type='comment', url=None, parent=24821539, text='- Read code and emulate the style of code that you find good. In code reviews, pay attention to the comments you get from people you admire and want to learn from in your team. Likewise, perform code review on others&#x27; code, and offer constructive suggestions, preferably in the form of concrete examples.<p>If you work at a large company, read code from subsystems that do not directly touch. Read code written by teams that are admired, and code written by teams that are reviled, and try to figure out why they are so, from their work: the code.<p>- Develop a good style in the language you program in. Learn its idioms. For instance, if you write Java, there is a book by Joshua Block (Effective Java?); for JavaScript, JS the Good Parts; for Go, The Go Programming Language; for C++, there is the Google C++ style guide, and so on; for Python, try to read and emulate code or advice by Raymond Hettinger&#x2F;Alex Martelli etc.<p>- Read most&#x2F;all of your language&#x27;s standard library (the documentation and usage examples) APIs, and when performing any programming task, ask yourself: do I really need to add a dependency on this egg&#x2F;jar&#x2F;gem&#x2F;whatever, or can I accomplish this task using the standard library? You will be surprised by the answer quite often. Python, Go and Java all have extremely good standard libraries and documentation (the latter has some iffy parts that are to be avoided, but this advice holds in general).<p>- Write library code. Lots of it, with a focus on safety (the user should not get any nasty surprises when using your library in a standard way), developing the right level of abstraction, reusability and extensibility, and most important, testability. Volunteer to write Unit Tests for portions of code that aren&#x27;t covered by adequate Unit Tests at your work. Most people consider this drudgery and will applaud you. By noticing the flaws of your programs, you will get a chance to fix them and you&#x27;ll get better.')