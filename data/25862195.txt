Item(by='ben509', descendants=None, kids=None, score=None, time=1611253660, title=None, item_type='comment', url=None, parent=25857753, text='I&#x27;d want something like this <i>and</i> the more compact language.<p>Classic regex syntax has a similar problem as purely expression-based languages: it&#x27;s hard to clearly delineate between smaller and larger scale structures.<p>Sometimes, brevity is clarity. It&#x27;s bad to write matchDigit().times(2).match(&#x27;-&#x27;).matchDigit().times(2) instead of simply &#x27;\\d\\d-\\d\\d&#x27;. So even with the problems with metacharacters, I don&#x27;t think you want to lose that.<p>But more complex regexes are clearest when the individual parts are assigned to meaningful names and they&#x27;re then composed into the final expression.<p>Most regex implementations require that you&#x27;re doing string-munging to compose regular expressions, and developers and maintainers must be aware of the semantics of that string-munging to the regex compiler.<p>Allowing the dev to compose regular expressions from parts, then, seems like the greatest opportunity here for improving regex syntax. It&#x27;d be especially helpful for any dynamically generated regular expression, and you could have facilities like a &quot;quote&quot; operator.')