Item(by='grzm', descendants=None, kids=[25887627], score=None, time=1611447740, title=None, item_type='comment', url=None, parent=25886712, text='Clojure Java interop has been pretty painless in my experience.<p><a href="https:&#x2F;&#x2F;clojure.org&#x2F;reference&#x2F;java_interop" rel="nofollow">https:&#x2F;&#x2F;clojure.org&#x2F;reference&#x2F;java_interop</a><p>It&#x27;s pretty easy to translate things like<p><pre><code>    import java.time.Duration;\n    import java.time.Instant;\n    import java.util.Date;\n    \n\n    &#x2F;&#x2F;...\n    Instant nowInstant = Instant.now();\n    Instant fiveMinutesAgo = nowInstant.minus(Duration.ofMinutes(5));\n\n    Date nowDate = Date.from(nowInstant);\n    \n</code></pre>\nto<p><pre><code>  (import &#x27;(java.time Duration Instant))\n  (import &#x27;(java.util Date))\n\n  ;; static method call with &#x2F; (slash)\n  (def now-instant (Instant&#x2F;now))\n  ;; instance method call with dot. First arg is the instance\n  (def five-minutes-ago (.minus now-instant (Duration&#x2F;ofMinutes 5))\n\n  (def now-date (Date&#x2F;from now-instant))\n</code></pre>\nImplementing interfaces and extending classes are a bit more involved, but I haven&#x27;t had to do much of that in my experience, and when I have had to, that&#x27;s been pretty good, too.<p>Here&#x27;s an example implementing the AWS Lambda RequestStreamHandler interface<p><a href="https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lambda-java-libs&#x2F;blob&#x2F;master&#x2F;aws-lambda-java-core&#x2F;src&#x2F;main&#x2F;java&#x2F;com&#x2F;amazonaws&#x2F;services&#x2F;lambda&#x2F;runtime&#x2F;RequestStreamHandler.java" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-lambda-java-libs&#x2F;blob&#x2F;master&#x2F;aws-...</a><p><pre><code>    (ns com.example.hn.handler\n      (:gen-class\n        :implements [com.amazonaws.services.lambda.runtime.RequestStreamHandler])\n      (:require\n       [clojure.java.io :as io]))\n\n    ;; implement the RequestStreamHandler handleRequest method\n\n    (defn -handleRequest\n      &quot;echoes request&quot;\n      [_ input-stream output-stream _context]\n      (let [w (io&#x2F;writer output-stream)\n            event (slurp input-stream)]\n         (-&gt; w\n           (.write event)\n           (.flush))))\n</code></pre>\nThat&#x27;s probably shorter than the equivalent Java implementation.')