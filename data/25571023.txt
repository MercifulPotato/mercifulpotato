Item(by='mumblemumble', descendants=None, kids=None, score=None, time=1609257588, title=None, item_type='comment', url=None, parent=25570134, text='There are three use cases for DSL to consider. They can be used as alternatives to:<p><pre><code>  1. libraries for general-purpose languages\n  2. general-puprose markup languages\n  3. graphical user interfaces\n</code></pre>\nOf those three, I&#x27;d say your complaint is a compelling criticism for the first use case, but not the other two.<p>Probably not coincidentally, the first one is also the only one where Turing completeness is almost certainly a requirement.<p>For the case of alternatives to general-purpose markup languages, I would present as exhibit A that the readability and tooling support for gRPC&#x27;s *.proto files is far ahead of that of OpenAPI&#x27;s JSON-based format. And that&#x27;s not just down to popularity. Now that the language server protocol is so well supported, it&#x27;s generally easier to get good tooling support for a homegrown DSL than it is a format that reuses an off-the-shelf markup language.<p>It&#x27;s harder to find well-known examples for #3. All I can say is that, in my experience working on in-house software, I&#x27;ve seen that there are certain classes of problem where DSLs are generally more successful than GUI-based solutions. Usually these are situations where people need to manage complex and subtle configuration. In those situations, DSLs tend to be both less expensive to develop and maintain, and easier for end users to learn and use, than GUI-based solutions. A solution that uses a general-purpose markup language like XML or JSON may be cheaper to develop, but tends to be the worst possible option from an end-user perspective.')