Item(by='kevincox', descendants=None, kids=None, score=None, time=1605704620, title=None, item_type='comment', url=None, parent=25133921, text='I agree the modules are annoying. I realize that the &quot;standard&quot; Rust style is import everything you need. However personally I have long worked with code that avoided imports and found it very helpful to read as it was obvious where each type of function was coming from. However the deeply nested imports makes that painful in a lot of Rust libraries.<p>For example `std::time::Duration`, `std::path::Path`, std::cmp::Ordering`. I wish everything was just directly in `std` such as `std::Duration`, `std::Path` and `std::Ordering`.<p>This re-export that the article talks about is doing this change (which I think is great!) while keeping a nice file structure. I think it is a shame that Rust conflates how you organize your code and how the user of your library sees it by default. However this seems like the best compromise.<p>Example of this pattern in my code: <a href="https:&#x2F;&#x2F;gitlab.com&#x2F;kevincox&#x2F;mario-solver&#x2F;-&#x2F;blob&#x2F;137ac5dea0676d82bb42c8dc0497c84155d69c85&#x2F;src&#x2F;lib.rs#L1-6" rel="nofollow">https:&#x2F;&#x2F;gitlab.com&#x2F;kevincox&#x2F;mario-solver&#x2F;-&#x2F;blob&#x2F;137ac5dea067...</a> (however since this isn&#x27;t a library I use `pub(crate)` instead of `pub`. It works just fine with `pub` except you get a warning if the file doesn&#x27;t have any exports which is a little annoying).')