Item(by='derekp7', descendants=None, kids=None, score=None, time=1609108743, title=None, item_type='comment', url=None, parent=25554255, text='&gt; I would expect that when I made a backup, it contains whatever is needed for it to be restored<p>The normal use case is for the Sqlite DB (the &quot;backup catalog&quot;, labeled as the &quot;meta&quot; directory in &#x2F;etc&#x2F;snebu.conf), to be on the same external drive array as the rest of the backup data.  And I&#x27;ve found that SQLite is extremely robust, esp. when used with a write-ahead log file (which Snebu does by default).<p>However I found that if you use an external 2.5&quot; USB hard drive, they typically have very bad seek times which makes the DB a constraining factor on performance.  In those specific cases I either make sure the &quot;meta&quot; directory is located on a separate small flash drive, or on the backup server itself.<p>&gt;or is that just your own backup script and not on the page<p>Just a simple script running on the backup server<p><pre><code>  for host in host1 host2 host3 host4\n  do\n      snebu-client backup --remote-client ${host}\n  done\n  cp &#x2F;var&#x2F;lib&#x2F;snebu&#x2F;catalog&#x2F;* &#x2F;var&#x2F;lib&#x2F;snebu&#x2F;vault&#x2F;catalog-backup&#x2F;\n</code></pre>\nBasically something like that.  In reality it reads a list of hosts from a file, on anything that has an Oracle DB on it gets thrown in hot-backup mode first, and there is a bit more logic to rotate the backup directory to keep a week&#x27;s worth of DB copies, but so far I think I&#x27;m just being paranoid (as I mentioned, SQLite is really solid).<p>I run that daily in cron.  As a to-do, I really should either put together a general purpose scheduling script, or add scheduling functionality to the DB where you could add host names, ssh private keys, and backup time.<p>&gt;how is that enforced<p>If you have snebu installed and owned by a non-root user (&quot;snebu&quot;) and set-uid, and make &#x2F;var&#x2F;lib&#x2F;snebu owned by the snebu user, then only the snebu user can access it.  So when a regular user executes it, the program looks at your EUID vs UID -- if they are different, it looks up your UID in the userpermissions table to see if you are allowed the given function on the given client name.  If EUID = UID (if you run snebu as the snebu user, or if it isn&#x27;t installed suid) then extended permissions aren&#x27;t enforced by the application (standard file system protections are all that apply).<p>BTW, there is one more trick that I don&#x27;t have documented, but I will put a front end for it in the next version -- you can sync a backup from one Snebu install to a second one, by using some additional parameters to &quot;listbackups&quot; to give output similar to the documented &quot;find&quot; (so it can be fed into a &quot;newbackup&quot; instance on a target server).  And you can issue a &quot;snebu restore&quot; (not &quot;snebu-client restore&quot;) which outputs a tar file of that backup that can be fed into the second Snebu instance.  Useful for cleanly syncing your on-site instance to an offsite one.  But again it is a bit tricky to explain, so I&#x27;m working on how to present the functionality in a simple front-end (along with the ability of having the on-site server not encrypted, and encrypt the data on the way to the off-site server).<p>That should be ready for the next minor release.')