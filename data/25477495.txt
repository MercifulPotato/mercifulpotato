Item(by='spion', descendants=None, kids=[25479196], score=None, time=1608387264, title=None, item_type='comment', url=None, parent=25475743, text='My comment was already concise to begin with. Your change reduced clarity. Here I will exaggerate your example:<p><pre><code>    list_of_profiles_that_we_got_from_reading_a_file_named_profiles_dot_txt = get_list_of_profiles_from_file(&quot;profiles.txt&quot;)\n    \n    list_of_profiles_from_the_file_named_profiles_dot_txt_which_are_filtered_by_name_where_the_name_was_bob = \n      filter_profiles_by_name(&quot;Bob&quot;, list_of_profiles_that_we_got_from_reading_a_file_named_profiles_dot_txt)\n    list_of_profiles_from_the_file_named_profiles_dot_txt_which_are_filtered_by_name_where_the_name_was_jane = \n      filter_profiles_by_name(&quot;Jane&quot;, list_of_profiles_that_we_got_from_reading_a_file_named_profiles_dot_txt)\n    combination_of_the_profiles_from_the_profiles_dot_txt_file_containing_both_the_profiles_with_a_name_bob_and_the_profiles_with_a_name_jane = \n      concatenate_profile_lists(\n        list_of_profiles_from_the_file_named_profiles_dot_txt_which_are_filtered_by_name_where_the_name_was_bob,\n        list_of_profiles_from_the_file_named_profiles_dot_txt_which_are_filtered_by_name_where_the_name_was_jane\n      )\n    list_of_pairs_from_the_profiles_txt_file_where_the_first_person_is_named_bob_the_second_is_named_jane_and_they_are_also_married = \n      merge_married_profiles_into_list_of_pairs(\n        combination_of_the_profiles_from_the_profiles_dot_txt_file_containing_both_the_profiles_with_a_name_bob_and_the_profiles_with_a_name_jane\n      )\n</code></pre>\nThere is a point where verbosity decreases clarity by overwhelming the reader with irrelevant detail which can already be inferred from context.<p>Lets try a concise example:<p><pre><code>  profiles = get_profiles_from_file(&quot;profiles.txt&quot;)\n\n  bobs = profiles.filter(p =&gt; p.name == &#x27;Bob&#x27;)\n  janes = profiles.filter(p =&gt; p.name == &#x27;Jane&#x27;)\n\n  marriages = bobs.inner_join(janes, (bob, jane) =&gt; bob.partner == jane)\n</code></pre>\nDoes it matter whether profiles is a list or not? If the typical data structure &#x2F; convention you use for plural variables is a list, you don&#x27;t have to say it.<p>Do I have to say that the variable bobs is a list of people named bob? Not if its obvious from the context on the right hand side that I&#x27;m filtering by name<p>Do I have to use a more verbose argument name in the lambda passed to `filter`? Not really - its short and there is plenty of context around to deduce that its a profile, especially if the reader is familiar with a commonly used standard library function.<p>The last one is tricky, and it depends who you&#x27;re communicating with. Do you expect your readers to be familiar with the standard library of the language, even less commonly used functions? If so, then its fine. If not, again it depends. Is the reader familiar with SQL or relational algebra? If so, then yes they probably have no problem with this.<p>As long as your context and conventions are clear, you can leave a lot of details out and still get the message across. Its better to err on the side of caution, yes, but it doesn&#x27;t mean that unlimited verbosity leads to unlimited clarity. As with writing - your audience is what matters.')