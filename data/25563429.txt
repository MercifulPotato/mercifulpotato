Item(by='qdot76367', descendants=None, kids=[25568104], score=None, time=1609190933, title=None, item_type='comment', url=None, parent=25563090, text='Protocol specs are actually pretty easy. The protocols aren&#x27;t that complicated, and there&#x27;s some pretty simple ways to figure them out. It&#x27;s usually an hour or two per new device, at most.<p>Everything that v1 rust does right now, our C#&#x2F;JS versions did before, so the technical work there was mostly fitting it from gc&#x27;d runtime&#x27;d languages into Rust. I&#x27;m much better at Rust now though!<p>The majority of the work technically AND design-wise (for me at least) is the haptics abstraction. Our protocol is built on a system of &quot;verbs&quot; at the moment, i.e. &quot;vibrate&quot;, &quot;rotate&quot;, &quot;stroke&quot; (though we call it linear because it only goes one direction at a time), etc... I&#x27;m writing a larger blog post on this, but to summarize, it&#x27;s REALLY hard to build a language around this that&#x27;s general. For instance, the Lovense Max (a onahole style toy) has an air bladder that inflates&#x2F;deflates. It&#x27;s about the only thing that has that. So do I just make a new verb called &quot;inflate&quot;? Do I try to match it to other toys with constriction like systems and call it &quot;constrict&quot;? Does it even matter?<p>But, that&#x27;s an ongoing problem. In terms of &quot;done&quot;, I think the next <i>big</i> milestone will be mobile app support. We work on mobile web browsers in a couple of different ways, but Buttplug still needs app support, both native and for things like cordova&#x2F;react native&#x2F;etc... The biggest issue there at the moment lies in our bluetooth library (btleplug, <a href="https:&#x2F;&#x2F;github.com&#x2F;deviceplug&#x2F;btleplug" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;deviceplug&#x2F;btleplug</a>), because getting the FFI via JNI to android is going to suck (even though I can crib off Servo&#x27;s WebBluetooth impl, which worked on Android).')