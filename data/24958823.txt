Item(by='Silhouette', descendants=None, kids=None, score=None, time=1604230992, title=None, item_type='comment', url=None, parent=24957412, text='<i>Just look at how many web sites&#x2F;apps hijack or break scrolling</i><p>Hardly any? That&#x27;s been a minor trend in web <i>sites</i> for a while, but changing scroll behaviour for no good reason is widely regarded as an antipattern by UI professionals. I don&#x27;t recall ever seeing normal scrolling behaviour subverted in anything I&#x27;d call a web <i>application</i>.<p><i>or the back button</i><p>This is a tricky one from a usability perspective, because some users see URLs as shortcuts to particular parts of a web application and expect the back button to behave accordingly as they navigate information in the app, while others think of the whole application as being a single page and expect the back button to just leave everything. But there is a whole set of browser APIs for managing that behaviour, and it&#x27;s something a well-designed application will at least present in a consistent and logical way.<p><i>or the ability to middle-click on a link and get a new tab</i><p>This sounds like you&#x27;re talking more about web sites than applications again, and again it also sounds like you&#x27;re talking about bad design that web UI professionals would universally disagree with. It&#x27;s usually caused by newbies who read some style-over-substance tutorial and decided that making links or buttons with elements other than the designated anchor and button ones that exist for that purpose was a good idea. After the first few glaring usability problems, they&#x27;ll learn better.<p><i>or the ability to highlight text.</i><p>I don&#x27;t really understand this one at all. The only times you wouldn&#x27;t be able to highlight text in a web application would be if the designers have actively prevented it, for example to prevent selecting UI labels along with the content of a text field. This typically works exactly the same way as any native desktop application.<p><i>But in spite of that, nobody ever really expects drag and drop or rich copy and paste or any other data exchange mechanism to work between web apps.</i><p>I don&#x27;t know what you mean here, either. Dragging and dropping text between web applications typically works fine. If by &quot;rich copy and paste&quot; you mean other more complicated data types, what happens is obviously highly context specific, but once again, this is the same story on native desktop applications. It&#x27;s not as if you can copy a selection of spreadsheet cells and paste them into a drawing package with obvious and meaningful results either.<p>As a final comment, the examples you&#x27;re talking about here all seem very &quot;meta&quot;. As such, they&#x27;re not particularly interesting to me, because as a UI developer working on a web app you generally get the expected behaviour by default with these kinds of things. Sure, some people can and do break them. They&#x27;re just bad UI designers. Some people make native applications with shocking pink skins over the normal window dressing, too, but that doesn&#x27;t mean all native apps are bad.')