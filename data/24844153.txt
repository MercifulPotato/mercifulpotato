Item(by='Animats', descendants=None, kids=[24846779, 24844248, 24845150, 24844292, 24847210, 24846458, 24846748, 24845107, 24846149, 24845694, 24845226, 24844566], score=None, time=1603245349, title=None, item_type='comment', url=None, parent=24834965, text='Over a decade ago I used to argue this with the C++ committee people. Back then, they were not concerned about memory safety; they were off trying to do too much with templates. The C++ people didn&#x27;t get serious about safety until Rust came along and started looking like a threat. Now they&#x27;re trying to kludge Rust features into C++ by papering over the unsafe stuff with templates, with some success. But the rot underneath always comes through the wallpaper. Too many things still need raw pointers as input.<p>The encouraging thing today is that we&#x27;re kind of converging on good practices in language design.<p>- You really want to declare types for function parameters. The compiler needs that information for checking, and the programmer, and the maintenance programmers who follow behind, need that information so they know how to call the thing.  On the other hand, you can usually infer the result types of expressions by a simple forward process. So C++ gained &quot;auto&quot;, Rust and Go started off with that arrangement, Javascript got TypeScript, and Python is getting there via a side trip through unchecked type declarations.<p>- The three big questions in C: &quot;How big is it?&quot;, &quot;Who can delete it?&quot;, and &quot;What locks it?&quot; C gives no help with any of those. C++ now tries to address the first two. All the garbage-collected languages address the first two. Rust addresses all three.<p>- The idea that locks should be connected by syntax with the data they are locking took far too long to become accepted. Partly because the Ada rendezvous and the Java synchronized object didn&#x27;t work well. Even Go doesn&#x27;t do that very well. But language design seems to be coming around. When and if thread-type concurrency comes to Javascript, the webcrap crowd will create race conditions everywhere without automation in locking.')