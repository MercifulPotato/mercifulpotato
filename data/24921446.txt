Item(by='idealstingray', descendants=None, kids=None, score=None, time=1603905492, title=None, item_type='comment', url=None, parent=24919475, text='A few other comments have mentioned the LEGO Mindstorms system, which is a great choice if you don&#x27;t want to deal with hardware.  If you go that route, I would strongly recommend using ev3dev [1] in order to avoid the LabVIEW-based programming language LEGO provides.  You can get pretty far in the Mindstorms system, especially if you avoid LabVIEW; my biggest Mindstorms project was a 1v0 tabletop soccer robot using a subsumption controller.  I will also note that if you&#x27;re planning to teach controls at all (PID controllers are easy to implement, and are often used for controlling motor speed), Mindstorms can&#x27;t really achieve a tight enough control loop; go with an Arduino-based system instead.<p>If you want something a little simpler than Mindstorms to get started with, you can also get a robot that holds a pen and is programmed in Logo [2].  Logo was designed as a language to teach programming to children, so it&#x27;s very easy for kids to get started, and drawing on big sheets of paper with a pen immediately gives them the feeling of &quot;doing something&quot;.<p>I would encourage you not to be scared of hardware :)  You can build a lot of fun robot projects with cheap motors (you don&#x27;t necessarily need servos), bump switches, and a cardboard-and-hot-glue chassis, using pretty simple circuits.  The two classic beginner projects are wall-following and back-and-turn.  At its simplest, a wall-following robot can use a switch touching the wall to control which of two motors turns on.  A back-and-turn robot is a robot that backs up and turns in a different direction when it encounters an obstacle (and, if you leave it running long enough, will tend to escape whatever room you put it in).  To avoid soldering, you could get started with a solderless breadboard (although make sure the wires don&#x27;t get jostled out of place by robot collisions or falls).<p>It sounds like this is probably more advanced than your kids are ready for, but you could also get a Neato robot vacuum cleaner and control it with a Raspberry Pi running ROS [3] [4].  ROS (Robot Operating System) [5] is a very popular framework used by both professional robotics engineers and hobbyists; it&#x27;s not the most beginner-friendly, but is useful for more advanced robotics software projects, and there&#x27;s a large ecosystem of ROS packages for things like teleoperation and path planning.  Neato vacuum cleaners specifically are great for this because they include a LiDAR, which lets you try out the SLAM and path planning packages provided by ROS.<p>[1]: <a href="https:&#x2F;&#x2F;www.ev3dev.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.ev3dev.org&#x2F;</a><p>[2]: <a href="https:&#x2F;&#x2F;www.terrapinlogo.com&#x2F;robots&#x2F;probot.html" rel="nofollow">https:&#x2F;&#x2F;www.terrapinlogo.com&#x2F;robots&#x2F;probot.html</a><p>[3]: <a href="https:&#x2F;&#x2F;www.servomagazine.com&#x2F;magazine&#x2F;article&#x2F;neato-ros-robot-navigation" rel="nofollow">https:&#x2F;&#x2F;www.servomagazine.com&#x2F;magazine&#x2F;article&#x2F;neato-ros-rob...</a><p>[4]: <a href="https:&#x2F;&#x2F;github.com&#x2F;SV-ROS&#x2F;intro_to_ros" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;SV-ROS&#x2F;intro_to_ros</a><p>[5]: <a href="https:&#x2F;&#x2F;www.ros.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.ros.org&#x2F;</a>')