Item(by='jakuboboza', descendants=None, kids=None, score=None, time=1605687615, title=None, item_type='comment', url=None, parent=25133118, text='Exactly this. Assume nobody knows anything and explain everything 500 times.<p>Also quick 5 minute call on Slack can save 4 hours to 4 days of sending emails. So prioritize fast issue solving rather than &quot;process&quot;.<p>Imho key things are:<p>* Communication.\n* Biz + Technical PoV from devs.\n* Ownership &#x2F; ability to make decisions.<p>Full remote is not for control freaks. It is for people who wants to get shit done. If you can&#x27;t trust anyone you can&#x27;t do remote.<p>1. Communication is key<p>Ability to talk and exchange info in processable way is king. This means no 5000 esseys. But not 1 line 4 word summaries. Communication should assume 0 knowledge on the reader but start with easily digestable summary &#x2F; TLDR so person reading it can skip explanations he already knows.<p>Your english doesn&#x27;t have to be perfect, but when you speak you can&#x27;t sound like a broken acordeon. If your english is on level of ability to laugh from a pun you are good. Always learn and never assume your english is perfect.<p>2. Biz + Technical PoV from devs<p>Developers should know entire domain, how the app works in a biz sense. What is important. IF you are selling  voice services and birthday card generator services from which cards generate 3% of income. Dev should be aware where the focus must be.  This might be simple example, but this knowledge lets developer asses damage in dire situation and help prioritize things.<p>I know it might be shocking but sometimes developers can generate a good biz idea that will propel more profits.<p>Technical pov from devs. This is trivial and i assume every dev has technical pov but it might not be 100% true always. Simply to put it. This means understanding code in platform and setup &#x2F; deployment. Sometimes developer can spot some easy optimization in other areas that just code. For example in the deployment sense.<p>3. Ownership<p>Teams &#x2F; Developers have to have decent level of ownership. Possibly 100%. The decision-feedback-loop should be fast and simple. It doesn&#x27;t mean devs call all shots but if they need to do something or get info it shouldn&#x27;t take 3 weeks to get response.<p>All questions not answered are waste, all meetings about follow up to this questions are waste, all emails without answer or with bad answer are waste.<p>Imagine this situation:<p>Your team has 3 devs in 3 different countries. Lets call them D1,D2 and Dave. There is a product owner in 4 time zones behind him. Dave asks a question &quot;how do we want handle service deletion?&quot; he has to wait 4 hours to get the response, if product owner don&#x27;t have to ask higher up.  If PO has to ask up the response might be after 2 days. The response might be &quot;in a good way&quot; which prompts another set of questions. etc...<p>ofc Dave can ask the question like this:<p>&quot;How do we want to handle service deletion ? Option A: just remove everything. Option B: marked it as deleted and keep in archive&quot;<p>This might prompt Product owner response<p>&quot;Adding in Steve from finance and Karolina from GDPR department. What do you guys think ?&quot;\n^- this solo can freaking prompt a week of delay because Karolina will respond &quot;we must delete it&quot; and Steve &quot;i&#x27;m on holidays until March&quot; etc....<p>Short feedback loops are ideal even if solution isn&#x27;t ideal. It will be ideal most of the time. but the key is that a lot of this comms was just useless waste of time. And when PO involves multiple people and they start to disagree it is full scale setting up money on fire.<p>ofc Karolina is correct about GDPR handling but Steve might say &quot;no no, we never delete&quot; xD classic Steve.')