Item(by='webmaven', descendants=None, kids=None, score=None, time=1607491660, title=None, item_type='comment', url=None, parent=25349259, text='<i>&gt; The only thing you can say for certain is that reducing the amount of components and complexity in the system often results in better outcomes.</i><p>No, there are a few other things that you can say for certain:<p>Watch out for positive-only feedback loops, you absolutely need negative feedback as well - or only. Eg. exponential back-off.<p>Sometimes, you just need a decentralized solution, rather than a distributed one, and you don&#x27;t have to have the same answer at every scale (eg. distributed intra-datacenter, decentralized inter-datacenter, or vice-versa).<p>Loose coupling is your friend.<p>Sure, add an extra layer of indirection, but you probably need to pay more attention to cache invalidation than you think.<p>Throughput probably matters more than latency.<p>Reducing the size&#x2F;number of writes will probably help more than trying to speed them up.<p>Multi-tenancy is a PITA for systems in general, and distributed ones are no exception (aside: there is probably a huge business for multi-tenancy-as-a-service, if anyone manages to solve it in a general-purpose way), but a series of per-customer single-tenant deployments may be worse, especially if they are all on different versions of the code. Here be dragons.<p>Don&#x27;t overthink it. Start with a naive implementation and go from there (see loose coupling above).')