Item(by='geofft', descendants=None, kids=None, score=None, time=1604368952, title=None, item_type='comment', url=None, parent=24974723, text='It&#x27;s Git performance art&#x2F;protest art, more or less.<p>Git has a mechanism called &quot;submodules&quot; which allows one repo to reference another repo. It doesn&#x27;t actually include any of the content from the second repo: all that&#x27;s included is the URL (in the file .gitmodules) and a commit hash (in Git&#x27;s view of the directory structure).<p>When you clone a Git repository with submodules and you pass an option to git clone, or if you run a git submodule command later, Git will make a nested clone at whatever subdirectory path contains the submodule, and check out that commit. If you make commits in the submodule (and, hopefully, remember to push them), the outer repo will appear to be modified, and you can git add the changes, which will record the new commit hash, but only the hash.<p>The purpose is to deal with vendoring or sometimes making changes to large repositories owned by someone else without copying the whole source code into your own repository. (It&#x27;s also occasionally used as a mechanism to split up very large repositories that are owned by the same group&#x2F;organization, e.g., if you have a test suite or large data files or something, or a shared library used by multiple projects, you might find it helpful to use submodules.) <a href="https:&#x2F;&#x2F;github.com&#x2F;ceph&#x2F;ceph" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ceph&#x2F;ceph</a> is an example repo that uses them - &quot;ceph-object-corpus&quot; and &quot;ceph-erasure-code-corpus&quot; at the top level are submodules, and if you click on the .gitmodules file, you&#x27;ll find that there are other submodules inside src&#x2F;, too. This is also an example of how GitHub handles submodules also hosted on GitHub - it will link you to the submodule at that commit.<p>So, GitHub does at least <i>some</i> parsing of submodules. The author is claiming that if you include a banned commit hash as a submodule in the history of your own project, and then promptly delete it, it won&#x27;t noticeably increase the size of your Git repo, nor will you actually include any of the banned content yourself, but GitHub will potentially prevent that history from being pushed. As a result, you have a Git repo that GitHub would not accept.<p>Since the author both does not use GitHub and wants to encourage others to do the same, this would be a fairly effective way of forcing that.<p>(The article doesn&#x27;t show GitHub actually refusing to accept the history containing this submodule, though - it only shows the submodule having been created, locally. Although maybe the author&#x27;s argument is simply that pushing it violates the Terms of Service even if it&#x27;s not blocked by automated means.)')