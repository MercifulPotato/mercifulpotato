Item(by='Jugurtha', descendants=None, kids=None, score=None, time=1604347847, title=None, item_type='comment', url=None, parent=24972066, text='We have a LaTeX template. We generate a PDF, send the invoice, then we get paid.<p>Caveat emptor: we&#x27;ve been building custom machine learning products exclusively for large enterprise for seven years..<p>I wrote a twitter thread[0] you might find useful, especially as a relatively new freelancer. It deals with the fact you&#x27;ll get paid way more if you&#x27;re a company than an individual, product development, protecting yourself, foot in the door, and then expanding and abstracting. The context is enterprise products in the mid six figures that a couple of individuals can pull off.<p>- [0]: <a href="https:&#x2F;&#x2F;twitter.com&#x2F;jugurthahadjar&#x2F;status&#x2F;1310668293305499653" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;jugurthahadjar&#x2F;status&#x2F;131066829330549965...</a><p>Here it is, unrolled:<p>0. Form:<p>0.0. It pays to provide services through a company. Companies write large checks to companies without blinking; not so large for individuals.<p>1. Contracts:<p>1.0. Get a lawyer to prepare contracts for collaborations. Someone at some point might disagree or have trouble remembering what they have agreed to pay you, make sure to have a mnemonic device in the form of a clear contract.<p>1.1. Companies have typical contracts for collaboration: don&#x27;t sign anything without legal counsel.<p>1.2. Retain intellectual property to amortize engineering and sell what you make to others.<p>1.3. Companies might ask that you do not sell to competitors: define them and contain geographic zone and duration. Get paid for the opportunity cost.<p>1.4. Split project into tranches for which you get paid. This can help cash-flow and reduce risk, especially in the beginning.<p>2. Presentation:<p>2.0. Your company solves problems and being open minded about these problems is useful; so it&#x27;s not much about finding problems for your solutions, but more like finding solutions to clients&#x27; problems.<p>2.0.0 After enough problems you built solutions for, patterns emerge and you can abstract a solution that serves several use cases. See &quot;Abstraction&quot; section.<p>2.1. General presentation with broad strokes of your capabilities, including previous work with other clients<p>2.2. Conversation with the prospect on their worries in a given space<p>2.3. Conversation with the prospect on their worries in a given space<p>2.4. Extract <i>problems</i> from that conversation and send a list of N problems to solve&#x2F;ideas to explore.<p>2.5. The client finds one problem urgent&#x2F;highest priority&#x2F;highest value<p>2.6. You get together and talk about &quot;desirability, fasiblity, viability&quot;.<p>2.7. Once you agree on what to do, prove the concept.<p>2.7.0. e.g: organizations give us data and ask us to predict something, say customer churn or subway car malfunction. We return predictions, they validate the predictions, and we can then start the project because they have proof we actually can predict what they want us to.<p>3. Execution:<p>3.0. Your opinion on what is valuable for the client does not matter. It doesn&#x27;t have to be valuable to you, only to the client. A client who gets excited by a functionality that took one hour to implement because it solves a real problem is a learning experience.<p>3.1. Go above and beyond. Some sectors&#x2F;clients are hard to get in, but once you&#x27;re in, you&#x27;re in.<p>3.2. Listening and assuming the client is smart goes a long, long, long way.<p>3.3. Send meeting notes to the client. It clears ambiguities during&#x2F;after the project.<p>3.4. Press to get the client&#x27;s domain experts&#x27; collaboration. They will actually use what you&#x27;re building. Get them at the table.<p>3.5. Some of the most valuable insights are gleaned <i>after</i> a meeting and not necessarily with your &quot;counterpart&quot;.<p>Don&#x27;t build the wrong thing.<p>4. Abstract:<p>4.0. When you solve many problems, some patterns emerge. You built custom products for your clients, but you can abstract functionality and build tooling to scale your services, and enable others to do the same.<p>4.0.0. e.g: we we built machine learning products for enterprise clients. After many projects, we built iko.ai, our own machine learning platform to &quot;Get Data Products Released&quot;.<p>4.1. One advantage of this approach is to explore the space while being profitable. Some problems exist not for lack of a nice front-end or lack of knowledge of the target audience. Coming at them from a purely &quot;webdev&quot;&#x2F;&quot;devops&quot; mindset can bring bad surprises.<p>All the best,')