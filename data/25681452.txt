Item(by='tel', descendants=None, kids=None, score=None, time=1610079411, title=None, item_type='comment', url=None, parent=25680456, text='The trivial implementation isn&#x27;t law abiding. This law doesn&#x27;t hold (written in Kleisli form for simplicity)<p><pre><code>    pure &gt;=&gt; f == f  (left identity)\n</code></pre>\nThere are no other monads for Maybe. First, any definition of pure must be Just as Nothing doesn&#x27;t work because of left identity and parametricity prevents any other funny business. Now, by law we know<p><pre><code>    pure a &gt;&gt;= f == f a\n</code></pre>\nThus, we must define<p><pre><code>    Just a &gt;&gt;= f = f a\n</code></pre>\nSo the only variable is what (Nothing &gt;&gt;= f) does. For (f: A -&gt; B) we must end up with a Maybe B. We don&#x27;t have one to start and we can produce Maybe values only via Nothing and Just. So, either &gt;&gt;= is the standard definition or we have to do<p><pre><code>    Nothing &gt;&gt;= f = Just (_: B)     -- we can achieve a B only via use of f, so\n    Nothing &gt;&gt;= f = Just (f (_: A)) -- now we are stuck, there are no values of A\n</code></pre>\nThus, we must define<p><pre><code>    pure a = Just a\n    \n    Just a &gt;&gt;= f  = f a\n    Nothing &gt;&gt;= f = Nothing</code></pre>')