Item(by='LinuxBender', descendants=None, kids=None, score=None, time=1609551830, title=None, item_type='comment', url=None, parent=25608240, text='This is not so much a technical answer to your question, but a generalization.  If you can determine what specifically an application must be able to do to function properly, then you can write rules and implement them in Linux Security Modules (SELinux, AppArmor, Tomoyo) [1] that enforce mandatory access controls describing what the applications are permitted to do, then it becomes a bit harder to bend an application to do your bidding through code bugs and deficiencies.  Android has SELinux, so this could be done on some cell phones.  It would be up to cell phone vendors and app developers to work together to implement this properly.  I am betting they won&#x27;t actually do this, but some of the <i>open source</i> phones like PinePhone [2] might be open to it.  You can also containerize applications and set&#x2F;unset &quot;capabilities&quot; [3] for the container to the bare minimum required for the application.  MAC + Capabilities implemented properly can make exploiting zero days significantly harder.  It can also make spotting and logging exploit attempts easier.  This raises the risk for people holding zero days to utilize <i>and burn</i> them.<p>[1] - <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linux_Security_Modules" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linux_Security_Modules</a><p>[2] - <a href="https:&#x2F;&#x2F;www.pine64.org&#x2F;pinephone&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.pine64.org&#x2F;pinephone&#x2F;</a><p>[3] - <a href="https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man7&#x2F;capabilities.7.html" rel="nofollow">https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man7&#x2F;capabilities.7.html</a>')