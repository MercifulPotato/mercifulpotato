Item(by='BoorishBears', descendants=None, kids=None, score=None, time=1602525271, title=None, item_type='comment', url=None, parent=24753398, text='&gt; The problem is that Unity always has 2 or 3 ways of doing things for each feature, and the &quot;proper&quot; way that&#x27;s actively maintained (and recommended by the community) is always the one that&#x27;s still in Beta and missing features, so you&#x27;re kinda cornered into updating.<p>First part of this sure, Unity likes to have different ways to do stuff and I do wish they&#x27;d focus more. The roadmap approach they&#x27;re taking shows that they are committed to working on it, and I&#x27;d say they&#x27;ve done well tackling that.<p>But the second part? About getting cornered into updating by new features, not buying that <i>for a second</i>.<p>If the feature is done enough to use it in a game with a large scope trying to follow a real development schedule, it&#x27;s not disappearing. If it&#x27;s not, don&#x27;t use it.<p>LTS releases are getting 3+ years of updates, before that we were going 5+ years with the same unity version, so when you say &quot;actively maintained&quot; when you mean is they&#x27;re not getting changed anymore. Which is a good thing.<p>Unity 5, from 5 years ago, is still getting security updates.<p>Where you get cornered is trying to pull in beta features into a game that has a hard schedule then getting screwed when the beta feature takes advantage of has breaking changes during a major release... which is kind of the point of a beta.<p>Unity has a huge community with a wide range of expertise and scope in their projects, if you&#x27;re just blindly following what people in the forum are talking about, you&#x27;ll follow some people working on small projects with small lifecycles.<p>Unity has never been for rug pulling, if something works well enough for your game today, it&#x27;s going to work well enough tomorrow, they&#x27;re not going to yank it just because it&#x27;s not the new hotness. Even Unityscript ended up getting a smooth path into the sunset with a converter tool despite being used heavily in under 4% of projects (and being used exclusively by &lt;1% at the time)<p>-<p>&gt; Also, the whole upgrade process itself could be improved if they put time on it. There&#x27;s nothing inherent to game engines that forces Unity to have so many breaking changes all the time.<p>Again, where are these breaking features &quot;all the time&quot;? Unity 4 =&gt; 5 was half a decade?<p>Now they have their date-based versioning, but LTS releases still get at least 3 years of support, and the next LTS is the next year, not the old 5+ year cadence, so you get an incremental upgrade path with 3 whole years of smoothing.<p>Outside of major releases I&#x27;ve only ever seen a <i>tiny</i> handful of breaking changes per release, the majority of which where back when we were going 5 years between major revisions so they&#x27;d hold everyone&#x27;s hand with a detailed guide and &quot;pay once, cry once&quot;: <a href="https:&#x2F;&#x2F;docs.unity3d.com&#x2F;Manual&#x2F;UpgradeGuides.html" rel="nofollow">https:&#x2F;&#x2F;docs.unity3d.com&#x2F;Manual&#x2F;UpgradeGuides.html</a><p>Note how now only LTS versions need these...<p>I mean, someone brought up Monogame here, apparently not aware that XDA 4 which it targets was a major breaking event from XDA 3. Game engines have breaking changes on major revisions.<p>Software, often has breaking changes on major revisions.<p>Don&#x27;t build your software, on other software, hoping to blindly chase every major release painlessly, it&#x27;s just not going to happen once you get to a certain level of complexity. These companies are not abandoning previous releases instantly, they still get maintained<p>I could Ctrl+R Unity for Unreal in this comment and nothing would change, it just comes with being a swiss army knife of this sort')