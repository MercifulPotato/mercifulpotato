Item(by='jlokier', descendants=None, kids=[24752077], score=None, time=1602481392, title=None, item_type='comment', url=None, parent=24751261, text='I have plenty of compiler design experience and I don&#x27;t know that.  What I have seen is in line with my comment.<p>But I&#x27;d be happy to discover something new.<p>Care to show me a real-world, working example of compiler-optimisable assembly inlines with something that isn&#x27;t using the GCC extension?<p>If by DMD you mean the Digital Mars D compiler (which is called DMD), then:<p>No.  I checked the online documentation just now for DMD x86 just to be sure.  According to that documentation, its inline assembly doesn&#x27;t provide any of the flexibility that I listed.<p>You can see that easily by the way DMD requires you to name the exact registers in the inline asm, and the way the operands syntax is fixed as either a register, memory, memory with base and offset etc (the usual Intel things).<p>But DMD doesn&#x27;t let you say &quot;pick any suitable operand type&quot;.  With GCC the compiler will select among possible operand types according to what fits best with the surrounding code.  This way it avoids unnecessary loads, stores, register transfers etc. when interleaving C with asm, intrinsics with asm, or even asm with other asm from different inline functions.<p>You certainly can&#x27;t do any of the fancy stuff the Linux kernel relies on, with asm directives like &#x27;.pushsection&#x2F;.popsection&#x27;, memory fault fixup tables, asm goto, inline lock hot paths and cold paths, etc.')