Item(by='derefr', descendants=None, kids=[25591316, 25589829], score=None, time=1609377481, title=None, item_type='comment', url=None, parent=25586059, text='Input events don&#x27;t need network linearization. Instead, every input event &quot;happens&quot; on an explicit frame. Each network-broadcast input-event message looks like &quot;<i>during frame N</i>, player P {was&#x2F;wasn&#x27;t} holding down button B.&quot; Nodes can receive and apply such messages in any arbitrary order, and the result will be correct. It&#x27;s the frame-counter in each message, not the order each message was received, that determines how history will be rewound and altered.<p>Keep in mind, every node is running the same deterministic simulation. As long as nodes achieve eventual consistency in their &quot;input movie&quot; <i>somehow</i> (a gossip protocol, say), then every node will end up on the same VM state. You don&#x27;t need a leader to declare what the consensus state is; presuming trustworthy peers(!), there is a single &quot;objectively-correct&quot; consensus state that every node will converge upon once all nodes have all messages.<p>Every time an input-event message is received from the network, the receiving node just rewinds to frame N, and recomputes it (and all frames after it) with an input-movie where player P {is&#x2F;isn&#x27;t} holding button B. (And then, only if that explicit message wasn&#x27;t already what was predicted during run-ahead.)<p>Note that this is also exactly what happens when the <i>local</i> node produces an input-event message â€” that&#x27;s what run-ahead is!')