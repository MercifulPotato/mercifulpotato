Item(by='yokaze', descendants=None, kids=[24919801], score=None, time=1603898512, title=None, item_type='comment', url=None, parent=24919526, text='Depends on what you want to do. Either way, exposing yourself to more programming languages ideally with different styles and background should make it easier to familiarise yourself with others.<p>So, either choice is not wrong.<p>C and C++ are clearly different programming languages, so you are actually looking at three languages.<p>&gt; Rust could also turn into something big, by the looks of it, in the next 10 years.<p>I wouldn&#x27;t bet on that. 20 years ago, I heard Haskell and or Java is going to be huge. They are, C and C++ still are. Learn Rust by all means, probably you will be more quickly productive, and it gives you a wide range of choice of targets. That should be sufficient reasons to go that way.<p>&gt; To me, it seems Rust is so much better than C&#x2F;C++ in many ways: lots of Python-like abstractions, ...<p>Yes, but that is also an argument to go for either C or C++. You&#x27;ll have to learn more. The active code-base in C and C++ is huge, and I don&#x27;t see everything being rewritten in Go and Rust.\nMaybe you&#x27;ll be less productive in churning out code, but it&#x27;ll give you expertise to look and modify the existing code-base when necessary.<p>Not that you cannot do that when learning Rust.<p>In summary, I would go, with Rust, if you want to be quickly able to do your own stuff, C or C++ if you want to be able to work through existing code build &quot;with a hodge podge of welded on features&quot;. The deciding factor between C and C++ again should be then, in what language is the code written you&#x27;ll be looking at. I would say, (and others might disagree) kernel-code (OS kernel, that is), Microcontroller, low level stuff more likely C. C++ you&#x27;ll find more likely in application code, numeric libraries, etc..')