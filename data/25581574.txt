Item(by='segfaultbuserr', descendants=None, kids=[25583430, 25582714], score=None, time=1609335768, title=None, item_type='comment', url=None, parent=25580848, text='+1. It&#x27;s also my recent experience of running FreeBSD on AMD Ryzen, several features are missing. And so far this is a list of problems I&#x27;ve encountered.<p>1. No ECC driver for AMD Ryzen, and no ECC support in memory management.<p>While you don&#x27;t need any OS support to use ECC, it&#x27;s much better to have it.<p>* Linux has an ECC kernel driver for AMD CPUs that accurately reports the ECC status, this is extremely helpful given the uncertainty of ECC in consumer-grade hardware. On FreeBSD, it&#x27;s not possible to tell whether ECC is enabled due to the lack of driver. Also, if ECC is not initialized properly by the firmware, the Linux ECC driver will also detect it and try reenabling ECC and memory scrubbing. On FreeBSD, better to check whether your BIOS is broken.<p>* When an ECC error occurs, a <i>Machine Check Exception</i> is generated by the CPU. On Linux, it will be correctly decoded and recorded. But on FreeBSD, so far there&#x27;s no decoder, leaving you a mysterious MCA error in dmesg. For example, a correctable DRAM ECC error will be reported as &quot;L3 cache error&quot; (which made many people to falsely believe that Ryzen&#x27;s ECC was not working on FreeBSD).<p>* On Linux, if an unrecoverable multibit ECC error is detected in userspace memory, the process will be killed by a SIGBUS (my username checks out?). If the error occurs in kernel memory, it triggers a kernel panic. On FreeBSD, as far as I know, none of the features is supported by the kernel, it increases the risk of data corruption, and it&#x27;s not a Ryzen or MCE-specific problem. Also, Linux also supports memory offlining, which can be used to temporarily remove bad memory pages from the system after an ECC error, which is not found in FreeBSD.<p>Fortunately the ECC-enabled flag is easy to check (I plan to make a contribution to the FreeBSD kernel), and a MCE decoder in userspace should also be easy. But implementing the rest is not trivial, the lack of ECC support in memory management is a problem. It&#x27;s unfortunately that these features are not supported in a server-grade OS like FreeBSD (I guess FreeBSD runs on &quot;real&quot; servers, which implements all of those ECC features in the management firmware, so &quot;real&quot; FreeBSD users don&#x27;t really need them...)<p>2. No USB serial system console and netconsole support. On FreeBSD, although tty login via USB serial is supported (just run a getty on it), it seems that there&#x27;s no way to redirect all dmesg to a serial port (perhaps someone can correct me), FreeBSD&#x27;s comconsole requires a real physical serial port, not USB, on the other hand Linux&#x27;s CONFIG_USB_SERIAL_CONSOLE supports USB natively. On Linux, there&#x27;s also a kernel-space netconsole that redirects all demsg via UDP&#x2F;IP, this feature is not found in FreeBSD although there was an attempt in 2012.')