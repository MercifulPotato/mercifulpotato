Item(by='aszlig', descendants=None, kids=None, score=None, time=1604860668, title=None, item_type='comment', url=None, parent=25026661, text='Agreed, the language support situation is a very mixed one in nixpkgs, where support ranges from rudimentary (or even non-existing) to well integrated and supported. Particularly the Erlang&#x2F;Elixir situation is - as you already brought up a while ago[1] - very rudimentary and really needs to be improved.<p>Right now, I do manage my Erlang dependencies with Nix only and without using rebar&#x2F;mix (particularly since I do want full release upgrades with hot code reloading), but manually managing those dependencies certainly doesn&#x27;t scale well for all projects, especially if they already use rebar&#x2F;mix.<p>I also haven&#x27;t looked into newer projects like nix-elixir[2], but as another commenter here mentioned, there are typically tools available to convert between the language-specific package managers, but they all come with their\nown set of issues and tradeoffs (eg. duplicating dependency information or importing from other derivations at evaluation time) so they might not be suitable for your project.<p>The situation with secrets is a long lasting issue[3] with several attempts of solving, but so far the best practice is to just to either leave secrets out of the Nix store or just make sure the entire Nix store is not accessible.<p>Since I also use NixOS for a few days, I can imagine why it could be frustrating if things don&#x27;t work out of the box like on other distros. Having had my own adventures patching things like no tomorrow, I know sometimes the effort to do this could be quite time consuming, especially the GOG games[4] you mention.<p>So I&#x27;d say if you frequently use software that is problematic on NixOS and don&#x27;t want to go through the hoops of patching or making workarounds like eg. Docker or FHS user environments[5], I&#x27;d probably stay off NixOS.<p>Personally however I think it is worth going through a few hoops, since to me it shifts the frustration of &quot;my system broke during an update&quot; to &quot;just want to get X to work NOW&quot; and among other nice benefits (eg. bisecting\nwhole systems, rollbacks and&#x2F;or using specific packages before they broke) I&#x27;d rather prefer a working and reproducible system.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;53834" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;issues&#x2F;53834</a><p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;hauleth&#x2F;nix-elixir" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;hauleth&#x2F;nix-elixir</a><p>[3]: <a href="https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;8" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nix&#x2F;issues&#x2F;8</a><p>[4]: <a href="https:&#x2F;&#x2F;github.com&#x2F;openlab-aux&#x2F;vuizvui&#x2F;tree&#x2F;0aa8064087b895d21845e5726c69071cc7023f0&#x2F;pkgs&#x2F;games&#x2F;gog" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;openlab-aux&#x2F;vuizvui&#x2F;tree&#x2F;0aa8064087b895d2...</a><p>[5]: <a href="https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#sec-fhs-environments" rel="nofollow">https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#sec-fhs-environment...</a>')