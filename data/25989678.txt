Item(by='ParadigmComplex', descendants=None, kids=None, score=None, time=1612194719, title=None, item_type='comment', url=None, parent=25988696, text='&gt; Thanks for coming on here.<p>You&#x27;re welcome :)<p>&gt; What do you think about Nix and Guix way of managing packages<p>I have not used either in adequate depth to make strong statements about them.  That having been said, I find the idea so far as I understand it obviously desirable, and I would love to see more of the Linux ecosystem move in this direction.  Where NixOS and GuixSD is the comparatively limited breadth and depth of packages.  There was a point some years back where, upon recognizing the size and scope of Bedrock, I considered instead using the time to package what I find missing from NixOS.  After serious investigation, I concluded both that this would be more work in total (Bedrock is, fundamentally, about leveraging work done by other distro maintainers so I don&#x27;t have to do it [0]) and less interesting work (I find rote packaging tedious, but researching challenging problems enjoyable).<p>&gt; is there a chance of incorporating similar features into Bedrock (like reproducible builds)<p>Given the fact a Bedrock system is mostly features from other distros, this would require making those other distros reproducible.  Wrestling other distros into playing with each other is difficult enough; getting them to do that _and_ making other distros reproducible is beyond what is feasible with the resources I have at hand.<p>That having been said, I do take steps in that direction where feasible.  Bedrock includes a Package Manager Manager utility, pmm, for cross-distro and multi-distro package management workflows.  It supports interacting with a configuration file that lists which packages should be installed from which distros.  Mine includes this representative but incomplete section:<p><pre><code>    # desktop environment\n    arch:pacman    gtk-engines # needed for gtk theme\n    arch:pacman    terminus-font\n    arch:yay       terminus-font-ttf # aur\n    gentoo:portage x11-misc&#x2F;dwmstatus\n    gentoo:portage x11-misc&#x2F;slock\n    gentoo:portage x11-misc&#x2F;dmenu\n    gentoo:portage x11-wm&#x2F;dwm\n    debian:apt     dunst\n    debian:apt     gcalcli\n</code></pre>\nFor a sense of why I get what from where:<p>- I prefer Debian and its lack of churn by default.<p>- Gentoo makes maintaining things I compile myself very easy.  I have patches for the items I am getting from Gentoo, which Gentoo dutifully applies on updates.<p>- My preferred font is Terminus, which is normally a bitmap font and inaccessible to TTF-only programs.  Arch&#x27;s Arch User Repository provides a TTF version.<p>- Bedrock does not make gtk2 engines, which are *.so shared library files, work cross-distro; this needs to be redundantly installed for each distro that provides gtk2 programs.<p>pmm will add or remove packages from the available package managers as needed to match the configuration file.  I track this file with git and use it both to reproduce my system upon new Bedrock installs and to synchronize setup across my fleet.  However, this is very limited compared to Nix and Guix.  It cannot express, for example, the need to lock a given Arch Linux package to a given version, or to setup a third party repository before attempting to install packages from that repository.  I am slowly working towards making more and more things reproducible from simple text configuration, but I do not expect to ever get all of the features Bedrock supports from all of the distros Bedrock supports to be as reproducible as something like NixOS or GuixSD.<p>It should probably also be noted that:<p>- I would eventually like Bedrock to interact nicely with NixOS and GuixSD.  Ideally, this would allow at least those slices of the system to be reproducible.  Users who value reproducibility could then continue to benefit from them where the available, but still have the option to get bits from non-reproducible distros when the trade-off is worthwhile.<p>- As far as I know, Nix and Guix as stand-alone package managers do work on Bedrock just as they do on other distros.  The limitation above is for NixOS and GuixSD only.<p>[0] <a href="https:&#x2F;&#x2F;bedrocklinux.org&#x2F;introduction.html#purpose" rel="nofollow">https:&#x2F;&#x2F;bedrocklinux.org&#x2F;introduction.html#purpose</a>')