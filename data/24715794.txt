Item(by='dwohnitmok', descendants=None, kids=[24716426], score=None, time=1602131279, title=None, item_type='comment', url=None, parent=24715090, text='This example has nothing to do with type systems. The same system exists e.g. for Clojure (see Specter).<p>The fundamental idea behind the approach in the article is the following:<p>Treat the path through a nested data structure as a first-class thing.<p>This gives helps us mainly in two scenarios:<p>1. Allowing for easy field-update-like code to exist for immutable data structures in addition to mutable data structures. This is especially valuable for updates.<p>2. Unify everything that can be &quot;field-like&quot; under a consistent field syntax.<p>In most class-based languages we can write something like<p><pre><code>    myObject.field0.subfield1.subsubfield2\n</code></pre>\nbut `field0.subfield1.subsubfield2` isn&#x27;t a first-class item that we can pass around and use. We can certainly write something like the following:<p><pre><code>    def myPath(someObject):\n        return someObject.field0.subfield1.subsubfield2\n</code></pre>\nbut (to the first point) if someObject is deeply immutable, we can&#x27;t use `myPath` to actually update `subsubfield2` and instead have to cumbersomely write out the entire reconstruction of an immutable data structure at every level.<p>To the second point, even if someObjet were mutable, there are a variety of things that would be nice to have as field accesses, but aren&#x27;t, simply because they don&#x27;t fit into a class definition. As an example, consider the bits of an integer.<p><pre><code>    # Imagine .permissions.bitMask.lastBit to be a path \n    # through user\n    set(user, .permissions.bitMask.lastBit, 0)\n</code></pre>\nis so much nicer than the corresponding bit shifting code.<p>If path access through data were a first-class concept, there&#x27;s no reason that paths should be restricted to only fields in classes. You can fit the same interface to anything that supports the notion of &quot;field-like&quot; access.')