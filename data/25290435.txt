Item(by='pdimitar', descendants=None, kids=None, score=None, time=1607012404, title=None, item_type='comment', url=None, parent=25286734, text='I appreciate JS and PHP but I do reach for Elixir for most of my web work because it parallelizes transparently, unlike PHP where you literally have to spin several interpreters -- separate OS processes -- and somehow coordinate through them. And this &quot;coordination&quot; turns out to have a lot of holes. So why not use a language that&#x27;s explicitly made to coordinate between a lot of tasks easily?<p>An experienced programmer might appreciate most tech (I certainly do and I recognize what they brought to the table) but there also comes the time to retire some of that tech because you have something that has all the benefits of the old stuff plus new goodies that make productivity objectively better -- we&#x27;re not talking some fanboyism here like &quot;I like the syntax better!&quot;, we&#x27;re talking &quot;I can make it in 2 days as opposed to 5, plus it will have less bugs on the first deployment&quot; (which is something that statically and strongly typed languages like Rust bring to the table).<p>I worked with PHP, with Java, with JS, some .NET, and a bunch of others. I wouldn&#x27;t reach for them nowadays. I recognize that rewriting some systems might cost millions and I am sympathetic to the companies who can&#x27;t just spend  that much and are keeping their old giants alive and well. More power to them. But there are many situations where new and improved tech can be picked, yet people still refuse because of the fear of the unknown and because they became way too set in their ways.<p>A lot of modern tech -- Elixir, Rust, F#, BuckleScript, Nim, Zig being a few good examples -- only lacks the network effects of Java &#x2F; PHP &#x2F; JS and it beats them in almost every other aspect.<p>Inertia. Problem is always the inertia and people becoming old men in their 30s, yelling: &quot;Back in my day &lt;this&gt; and &lt;that&gt;...!&quot;. (Hell, I&#x27;ve seen people being like that at 27 years old; quite sad.)<p>So no, languages aren&#x27;t just a hammer and a saw. Some languages can only be a saw ever, some can be a lame hammer and a lame screwdriver at the same time, others can only ever be a good car to transport tools from one place to another.<p>What a &quot;good developer&quot; is, is a guy&#x2F;girl who can use one or more of them in a team where each shines in their strong area.')