Item(by='ajuc', descendants=None, kids=[25568974, 25574188, 25568957], score=None, time=1609240526, title=None, item_type='comment', url=None, parent=25568614, text='&gt; Quest and Dialogue systems etc. for the game designers and these things are quite mundane.<p>Depends what you want from them. I&#x27;ve written a small quest and dialog system for my indie game (never finished, as most of my side projects :( ), and it was quite involved.<p>I used a graph programming library ( <a href="https:&#x2F;&#x2F;github.com&#x2F;ajuc&#x2F;pefjs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ajuc&#x2F;pefjs</a> ) to create graphs of nodes where each edge is a blocking condition (is the $MONSTER alive? is player near $NPC?) and each node is next step in a quest (with some actions if needed).<p>Then there was a in-memory database allowing to record arbitrary metadata that quests might require. Stuff like &quot;have the player killed that monster&quot;, &quot;does the player have the quest item equipped&quot;, &quot;have the player talked with one of these 4 people about X&quot;, &quot;has any NPC seen the player near the $PLACE during $EVENT&quot;.<p>I briefly considered adding gossips - if $NPC1 seen player commit murder and $NPC2 meets $NPC1 - then $NPC2 remembers that too, and remember who told them. But then I calculated how much memory that would need and it&#x27;s staggering. And players won&#x27;t notice anyway most likely. But it would be so cool.<p>Once you start recording data about data (does $NPC2 know about the fact that $NPC1 seen player commit murder?) it&#x27;s hard to know where to stop.<p>Anyway, even without these - there&#x27;s lots of that stuff and it needs indexing and filtering. I considered using some in-memory SQL database or datalog, but eventually just rolled my own with basic hashmap indexing.<p>Then there was dialog system and I wanted more variety than the same responses every time, so I created sets of possible greetings and goodbyes, confirmations, negations, reaction to repeatedly asking the same question, etc. Then the system chooses randomly from the list (each &quot;kind&quot; of NPC has separate list - one for working class characters, one for strangers, one for scholarly types, and special lists for important NPCs).<p>You can also parametrize dialogs with data from quest database - so you can for example ask the player about his new $COLOR $BRAND vehicle when he comes to see the NPC the first time after the purchase.<p>There&#x27;s lots of interesting stuff to do there, even if it&#x27;s not visual.')