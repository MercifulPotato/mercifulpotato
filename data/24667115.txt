Item(by='AaronFriel', descendants=None, kids=[24668430, 24668259, 24667200], score=None, time=1601673437, title=None, item_type='comment', url=None, parent=24650084, text='This seems like a slightly less optimized, simpler form of finger trees, which are more common in pure functional languages as a persistent data structure.<p>Finger trees can be paired with a monoidal function efficiently which is recomputed on node insertion and removal.<p>This segment tree looks like an in-place version of a finger tree that&#x27;s a bit harder to extend. Finger trees are a great tradeoff data structure with constant time insertion at the end or beginning, constant time reversal (forward and backward traversal), log n merge and split, and log n random access insertion. Just a wonderful data structure.<p><a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Finger_tree" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Finger_tree</a><p><a href="https:&#x2F;&#x2F;andrew.gibiansky.com&#x2F;blog&#x2F;haskell&#x2F;finger-trees&#x2F;" rel="nofollow">https:&#x2F;&#x2F;andrew.gibiansky.com&#x2F;blog&#x2F;haskell&#x2F;finger-trees&#x2F;</a>')