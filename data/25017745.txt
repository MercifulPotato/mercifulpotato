Item(by='JD557', descendants=None, kids=None, score=None, time=1604776255, title=None, item_type='comment', url=None, parent=25015343, text='&gt;It&#x27;s funny. For all the useless Java &quot;factory&quot; patterns, the one thing there ISN&#x27;T a factory for - Futures[...].\n&gt;It&#x27;s a bit of a puzzle to me why this isn&#x27;t just standardized.<p>It kind of is. A `FutureFactory` it&#x27;s pretty much `IO` (as in, Haskell&#x27;s IO).<p>It just so happens that a lot of implementations don&#x27;t want you to call `unsafeRun` (so that `unsafeRun` in only called at the edge of the world) and some implemetations don&#x27;t like, but nothing stops you from having a `unsafeRunToFuture` that returns a `Future`. This is actually pretty common in Scala.<p>Some examples:<p>- Cats-effect: <a href="https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;datatypes&#x2F;io.html#unsafetofuture" rel="nofollow">https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;datatypes&#x2F;io.html#unsafeto...</a><p>- ZIO: <a href="https:&#x2F;&#x2F;javadoc.io&#x2F;doc&#x2F;dev.zio&#x2F;zio_2.12&#x2F;latest&#x2F;zio&#x2F;Runtime.html#unsafeRunToFuture[E%3C:Throwable,A](zio:zio.ZIO[R,E,A]):zio.CancelableFuture[A]" rel="nofollow">https:&#x2F;&#x2F;javadoc.io&#x2F;doc&#x2F;dev.zio&#x2F;zio_2.12&#x2F;latest&#x2F;zio&#x2F;Runtime.h...</a><p>- Monix: <a href="https:&#x2F;&#x2F;monix.io&#x2F;api&#x2F;current&#x2F;monix&#x2F;eval&#x2F;Task.html#runToFuture(implicits:monix.execution.Scheduler):monix.execution.CancelableFuture[A]" rel="nofollow">https:&#x2F;&#x2F;monix.io&#x2F;api&#x2F;current&#x2F;monix&#x2F;eval&#x2F;Task.html#runToFutur...</a><p>I guess that this is not very standardized in OOP languages because they lack some of the ergonomics to use such factories (namely, do-notation).')