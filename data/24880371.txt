Item(by='mrkeen', descendants=None, kids=None, score=None, time=1603558429, title=None, item_type='comment', url=None, parent=24880148, text='&gt; Why not start from the imperative model<p>This video gives a bit of discussion around that point: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=iSmkqocn0oQ" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=iSmkqocn0oQ</a><p>My take on it is that it&#x27;s too hard to put the side-effect genie back into the bottle once you take it out.  It&#x27;s hard to write side-effect-free code out of side-effectful pieces.<p>E.g. You can&#x27;t make a reasonable transaction system if you allow side-effects.  You just have to hope that the programmer doesn&#x27;t include any code that can&#x27;t be rolled back.<p>&gt; Haskell&#x27;s &quot;do&quot; notation seems to be an acknowledgment of this, but to me it&#x27;s adding another layer of abstraction just to recover what imperative syntax gives in the first place.<p>Haskell do-notation and Scala for-comprehensions kick arse and I always miss them when I don&#x27;t have them.  I think lack of do-notation is my biggest complaint about Java syntax.')