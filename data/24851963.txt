Item(by='Const-me', descendants=None, kids=None, score=None, time=1603312972, title=None, item_type='comment', url=None, parent=24850638, text='&gt; Wouldn’t that violate the rule that userspace can’t crash the kernel?<p>A program that accesses same memory location from different cores at the same time won’t crash, as long as the address is good. You’ll just get random garbage in your memory. Concurrent updates by CPU and DMA devices is equally fine, again garbage out is the only result you’ll get.<p>If you corrupt things like that due to a concurrency bug in your userspace code, you may get garbage in your memory, garbage in your files, but I don’t see why would it crash the kernel?<p>&gt; On Windows this is solved by using the memory protection provided by the cpu and Structured Exception Handling<p>Switching memory protection is relatively expensive. Also memory protection doesn’t have byte granularity: you can allocate a 4kb buffer (a single page), view it as a circular buffer with four 1kb-long pieces, and use that circular buffer for streamed I&#x2F;O.<p>It’s the same on Windows. Check the docs for WriteFileEx, it says <i>“This buffer must remain valid for the duration of the write operation. The caller must not use this buffer until the write operation is completed.”</i> but I don’t think you gonna get any SEH if you ignore what’s written there, and use the buffer in the meantime.')