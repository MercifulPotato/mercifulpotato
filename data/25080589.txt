Item(by='didibus', descendants=None, kids=None, score=None, time=1605259319, title=None, item_type='comment', url=None, parent=25080259, text='&gt; #1 is just moving the goalpost. You jumped from &quot;why new is bad&quot; to &quot;why can&#x27;t language mock fields&quot;.<p>I don&#x27;t think I did. Someone says, well if you use new, how are you going to unit test your class?<p>And one answer from a user of the language would be: Ya, I guess you&#x27;d need to change the way you&#x27;re creating dependencies so they happen in the caller, and then you&#x27;d need to change your class so it takes the instance on its constructor, etc.<p>And this is the original OPs issue with C#, all the ceremony involved.<p>Another answer would be that the C# language designer could build a language level feature that avoids having to do that and allows mocking new inside a unit so it can be easily tested without shenanigans.<p>In fact, in Java-land, there is a library that lets you unit tests classes that use new, it&#x27;s called Powermock. So it is feasible.<p>&gt; #2 What stops you from creating a complex system without having dependencies, thus avoiding DI? Also, I think it would make an interesting case study if you&#x27;re willing to write it.<p>I&#x27;ve moved to a functional language instead personally. That said, I do still like C# and Java, and think they are great languages. I&#x27;m also not against DI, or other enterprise patterns, some have legitimate uses. But I have definitely seen what the OP is complaining about, those languages are too deep in their own rabbit hole sometimes. To the point that half the developers don&#x27;t know why they use DI, that&#x27;s just part of the template they used to bootstrap their app. There&#x27;s no thought process about, wait, what is the issue in my code structure and design that I&#x27;m facing, and what could I do to solve it. Instead it&#x27;s just, I&#x27;m using all the &quot;best practices&quot;, they are the best, and I&#x27;m using them all, all the time, so my code is the best it can be. Without any thought about what advantages they&#x27;re even getting out of it.<p>That&#x27;s why I asked about the &quot;new&quot;. Most people don&#x27;t really know the pros&#x2F;cons. They only repeat what they read blindly: &quot;New&quot; bad bad, no use &quot;new&quot;, never, very bad, antipattern, here link proof, must use DI instead.<p>And sometimes when they know of a cons, they don&#x27;t think about tradeoffs against alternatives. They just say, well it has this one con, so it&#x27;s very bad! An antipattern!<p>I think that creates a setting where you get monstrous framework and code bases, where people just throw every known pattern at it, no matter if it was called for or not.')