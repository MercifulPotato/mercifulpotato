Item(by='socialdemocrat', descendants=None, kids=[25333076], score=None, time=1607228774, title=None, item_type='comment', url=None, parent=25315815, text='&gt; The reality is that many projects are enabled more by existing libraries &amp; tools rather than blank slate clean language syntax.<p>As I said, sometimes for legacy reasons you must use C++. My point is to use a sane subset of C++ an ignore the modern crap. You are only going to make life harder for co-workers, and future maintainers. If the modern C++ features themselves are what attracts you specifically to C++ rather than some library you need to use, then that is when I suggest switching language.<p>&gt; deep learning: NVIDIA CUDA api is C++<p>You can do deep learning much better in Julia. It is a nicer language, allow iterative development in a REPL and will typically give you higher performance as well.<p>And who on earth does machine learning in C++? People typically use Python today. C++ is an implementation detail. A necessary evil for a slow language like Python. But given a choice people pick Python as their interface, not C++, because C++ is a horrible language to use, which you should only use when you absolutely have to.<p>&gt; HPC High Perfomance Computing: Intel MKL math library is C++<p>Again you could actually use Julia for that. Next generation climate models running on super computers is built in Julia, specifically because it is fast. A language with 1&#x2F;10th the cognitive load of C++.<p>&gt; physics engine for video games: Unreal game engine is C++<p>Sure, as I said, sometimes you need to use C++ for legacy reasons. But who on earth writes the game logic in C++? Typically you use Lua, JavaScript, GDScript or something else because people don&#x27;t use C++ when they can avoid it. Historically it has been hard to avoid C++ when creating a physics engine, because you need the kind of high level performance and memory control C++ gives.<p>&gt; Qt GUI is C++<p>Yes, which I have spent a lot of my career coding. And which cannot be compared to the insanity of modern C++. Qt tries to keep C++ somewhat sensible.<p>I could add VTK. Old school C++, which is fairly readable, unlike modern C++. As I said if you have some deep geek desire for fancy language features, find another language.<p>&gt; Recommending&#x2F;lecturing people to use Rust&#x2F;Swift&#x2F;D overlooks the reasons that many programmers use C++. It&#x27;s not a random choice.<p>Problem is that you missed my central point. I didn&#x27;t say you could go out and replace C++ in every instance with any of these languages. I specifically made it clear that for legacy reasons that may not be possible. And yes that may include that the functionality you need only exists in C++. My point was to write your code in cold old C++, which most people can actually somewhat fathom. If you want to geek out, C++ is a terrible place to do it.<p>&gt; What&#x27;s a good game engine... oh, it&#x27;s Unreal, and that&#x27;s C++.<p>Yeah... so Unreal Script was made because C++ is such an amazing language? You know I use Godot Engine, mostly written in C++, but I don&#x27;t have to relate to that fact. I just code in GDScript. Fortunately the makers of Godot was no so sadistic as to require their users to code in C++.<p>&gt; It&#x27;s when you have the luxury of a greenfield project that doesn&#x27;t need legacy dependencies that choosing alternative cleaner syntax of Rust&#x2F;Swift is possible.<p>I think you are kind of overselling the need for using C++. You fail to  mention in any of your examples that C++ is very frequently wrapped and not the preferred interface. E.g. TensorFlow is written in C++, but who the hell interface with it from C++? No, people use Python as much as possible.<p>Or how about Qt. The most popular way to create Qt GUI code today is through QML, not through their C++ APIs. You also failed to mention that in most game engines such as Unreal you can do almost your entire game in a script language. It is typically only the Engine designers who have to program in C++.<p>You have to consider each case, but frequently wrapping C++ works just fine and may make you a lot more productive. VTK is written in C++ but it is also frequently if not mostly used through bindings to other languages.<p>If you cannot wrap C++, then embedding a script language may work well. I have written simple game engines in C++ with Lua. I found myself pushing more and more functionality over to my Lua layer as I experienced how much productive language that was.')