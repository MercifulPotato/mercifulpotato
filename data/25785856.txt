Item(by='eyelidlessness', descendants=None, kids=None, score=None, time=1610675031, title=None, item_type='comment', url=None, parent=25783152, text='None are ready for the public yet, but all in the hopper or under serious consideration:<p>- Personal site&#x2F;blog with a bunch of algorithmically generated art and other fun stuff, built on Node&#x2F;Preact but progressively enhanced&#x2F;almost completely JS-free at runtime. Motivation for the build approach is that I’m on the low&#x2F;no client JS static site bandwagon but I quite like the DX of JSX components and CSS-in-JS.<p>- I’m using a few excellent existing tools[1][2] for said site which unfortunately aren’t designed to work well together, so I have a variety of wrapper tooling that makes them live peacefully together. I’m also developing a bunch of other build-stage tools for my use cases. I plan to open source (or hopefully contribute back) all of that as soon as I’m satisfied with their quality.<p>- A set libraries for building declarative, type safe, automatically validated&#x2F;documented service API boundaries (HTTP&#x2F;REST to start, but I also plan to support other transport protocols) — think io-ts[3] type interfaces but you get swagger docs for free in a transport-agnostic interface. I’ve built this kind of thing before, it was wildly successful in real world use, but it’s proprietary to a previous employer and I’m starting over with all the stuff I learned in hindsight.<p>- A “nag me” app that’s basically “reading list” plus “reminders” with minimal config, eg “nag me soon” or “nag me after a while”. My personal use case is I frequently screenshot&#x2F;text myself&#x2F;etc stuff I want to look at later (usually on phone but need a computer to dive in), then it just goes down the memory hole. I’ve tried setting reminders but it’s often too much fuss, and I’m far too ADHD to use a passive list.<p>- Exploring building yet another FE build tool&#x2F;bundler that’s explicitly multi-stage&#x2F;sequential with static input&#x2F;output validation, per-step&#x2F;time travel debugging. Motivation is that existing tools are just a big ball of config magic and totally inscrutable. I’d likely wrap existing build tools because their set of responsibilities isn’t my motivation and I don’t want to introduce that much more new API surface area to weary FE devs.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;natemoo-re&#x2F;microsite" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;natemoo-re&#x2F;microsite</a><p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;callstack&#x2F;linaria" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;callstack&#x2F;linaria</a><p>[3]: <a href="https:&#x2F;&#x2F;github.com&#x2F;gcanti&#x2F;io-ts" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;gcanti&#x2F;io-ts</a>')