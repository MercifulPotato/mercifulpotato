Item(by='rscho', descendants=None, kids=None, score=None, time=1606742416, title=None, item_type='comment', url=None, parent=25253210, text='Yes, I heard of K which makes some things a little more convenient and others a little less by adopting the &quot;list-of-vectors&quot; model instead of true multidimensional arrays. K still is very much in the line of traditional APLs, though. I don&#x27;t have extensive experience with K, but J with the Jd DB seems very closely related.<p>I was thinking of more radical changes that would certainly disappoint APL purists by exchanging some well-known and highly-regarded APL capabilities for a more specialized language. Maybe I&#x27;ll put my thoughts in code someday, if life doesn&#x27;t get in the way.<p>The strength of APLs relies on having a fixed set of versatile primitives. From there, the terseness of the language allows one to write small but expressive and useful programs. This strongly limits the need for external libs and this is where the real value lies. Whereas in Python, you&#x27;d reach for multiple libs made in another language and often by other people, in APL you learn the prmitives and you&#x27;re off to the races! Therefore, the <i>fixed</i> fraction of the programs you write (primitives vs functions) is much smaller (no libs with poor documentation) and you don&#x27;t risk the carpet being swept from under you by changing lib APIs.<p>BTW J is <i>stellar</i> for data wrangling, and I encourage everyone to endure the multiple weeks of effort required to learn the basics of the language. Spend the time, it will be really rewarding!')