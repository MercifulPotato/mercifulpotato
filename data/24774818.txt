Item(by='jakevoytko', descendants=None, kids=None, score=None, time=1602668326, title=None, item_type='comment', url=None, parent=24774512, text='This isn&#x27;t a &quot;fatal flaw.&quot; It&#x27;s a tradeoff. You add a little bit of extra code (which is a liability), and in exchange, you get a test double that you can reuse in many places (which is a benefit). This is in opposition to mocks, where you get an automated framework that can substitute calls anywhere in the system (a benefit), but you&#x27;re completely replicating the behavior in every single test (a liability).<p>I argue that [0] the liability of mocks are much higher than the fake. With a fake, you could theoretically write tests that asserts that your class is satisfying the interface. There&#x27;s no way to do this with a mock. You can just make an interface do anything, regardless of whether it makes sense. This is fragile under modification. With a large codebase, you&#x27;re inevitably going to change the behavior of a class during a refactoring. Are you going to read every test that mocks that class to decide how the mocks should be rewritten? Probably not - the mocks force-overrode the behavior of the class, so your tests will still pass. Why would you look at them again?<p>&gt; Make a fake for every error scenario?<p>By the time you&#x27;re implementing a fake, you have an interface that the fake implements. One way that I&#x27;ve handled this is to make a FailingBlobStorage that takes an error in its constructor and throws it from any calls. If you need even more detailed behavior than that, you can create a mock for that specific test case. You&#x27;re not married to the fake. It&#x27;s not going to magically test every scenario. But fakes handle the common case in so many situations that it&#x27;s actually surprising when you start trying them out.<p>[0] In fact, I&#x27;ve basically written this same blog post before. <a href="https:&#x2F;&#x2F;www.bitlog.com&#x2F;2019&#x2F;12&#x2F;10&#x2F;simple-software-engineering-mocks-are-a-last-resort&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.bitlog.com&#x2F;2019&#x2F;12&#x2F;10&#x2F;simple-software-engineerin...</a>')