Item(by='lifeisstillgood', descendants=None, kids=None, score=None, time=1606132224, title=None, item_type='comment', url=None, parent=25182887, text='No.<p>Ok - there is a spectrum of <i>reliability</i> - lets say that NASA produces the most reliable code anywhere, and that it has a very high cost to produce code like that.  At the other end of the spectrum is some guy slinging php code out without any testing, hoping that it will turn into the next unicorn.<p>If we asked both ends of the spectrum to write code to solve the same business (Pet food delivery app) then the guy slinging PHP will get woken up at 2am regularly because the server is always crashing.  The NASA guy will never get woken up, but also the app probably will be out on the market a year after the first one.<p>So the business has to choose a trade off - sling code and get lots of 2 am wake up calls or wait and possibly lose market share to a competitor.<p>Now there was a famous example of a Reddit co-founder who slept next to his laptop and just rebooted the server every two hours till they discovered Python Supervisor.  Now that seems ok - the business (co-founder) was making the trade off and exploiting the worker (same co-founder).  The worker was happy to take the job because they were likely to get paid if it all worked out (and it did)<p>The issue comes when the worker on call is not making the business judgement. How much should they demand in payment?<p>If they have a healthy equity payment in a growth company, that might work just like the above founder.  Otherwise the payment needs to come out of the money not spent.<p>SO I guess my argument is that there is a <i>fixed</i> cost to reliable software to the business - it should either pay for highly reliable software, or it should pay the saved cash to the code clinger for each time the server goes down.<p>This will change the trade off mathematics.')