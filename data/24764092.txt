Item(by='Tainnor', descendants=None, kids=None, score=None, time=1602584746, title=None, item_type='comment', url=None, parent=24756934, text='It&#x27;s quite cool that you can use type systems in &quot;regular&quot; languages to do such things.<p>Notice though, that this system is not powerful enough to prove all the facts about the natural numbers. For example, the author states that this system has the property that there is no number smaller than zero. This is true, at least if we define &quot;smaller than&quot; transitively via the successor function (&#x2F; type constructor). However, it&#x27;s still entirely possible to define a &quot;struct NegativeOne();&quot; and define addition so that -1+1=0, so you can&#x27;t prove that there is no number such that when you add to it a nonzero number, you get zero. More generally, this system doesn&#x27;t actually formally define the natural numbers, it just constructs a finite number of them (which is fine, the article didn&#x27;t claim otherwise). I don&#x27;t know if Rust&#x27;s type system is powerful enough to construct the natural numbers in some &quot;natural&quot; way (it&#x27;s mentioned that the type system is Turing complete, but that doesn&#x27;t technically guarantee that such an encoding would be practical to use), you&#x27;d need some way of writing an inductive type definition where Zero is a Nat and Succ&lt;N&gt; is a Nat iff N is s Nat.<p>You can do such things in theorem provers, here&#x27;s a tutorial on how to do it in Lean: <a href="https:&#x2F;&#x2F;wwwf.imperial.ac.uk&#x2F;~buzzard&#x2F;xena&#x2F;natural_number_game&#x2F;" rel="nofollow">https:&#x2F;&#x2F;wwwf.imperial.ac.uk&#x2F;~buzzard&#x2F;xena&#x2F;natural_number_gam...</a>')