Item(by='leephillips', descendants=None, kids=None, score=None, time=1611464216, title=None, item_type='comment', url=None, parent=25888626, text='There&#x27;s another reason for using containers or pretested distributions. I just wrote an article for LWN about SciPy¹. To get what was supposed to be a clean install of the newest release, I created a virtual environment and used Pip to install the SciPy components. It was broken out of the box. IPython did not work because a module that it depends on, that does tab completion, had been recently upgraded and was incompatible with it. I mean it crashed frequently, not just that it didn’t do tab completion. To get a working system, I had to install an older version of the library. So people seek solutions that avoid the dependency hell that comes from maintainers releasing things at will, with nobody testing the combination of things that they nevertheless market as “SciPy”, which is supposed to be a bunch of stuff that works together. And whenever I install anything from the Python world, I am amazed when it actually works without the need to spend hours with Google or staring at sources trying to resolve conflicts. One of the many nice things about Julia is that their package system works.<p>So yes, once you manage to put together a working installation, you naturally want to encase that precious thing in the bubble of some kind of container, to protect it from an upgrade of some piece that will break everything. If you work with a lot of Python things, you may have a dozen copies of the same libraries, and a handful of Python binaries, taking up space on your drive. The concept of dynamic linking was supposed to save us from this. But the haphazard habits endemic to the Python community seem to have left us with the worst of all possible worlds.<p>[1] <a href="https:&#x2F;&#x2F;lwn.net&#x2F;SubscriberLink&#x2F;842964&#x2F;f7e2e5006c5efe36&#x2F;" rel="nofollow">https:&#x2F;&#x2F;lwn.net&#x2F;SubscriberLink&#x2F;842964&#x2F;f7e2e5006c5efe36&#x2F;</a>')