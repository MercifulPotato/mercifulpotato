Item(by='TeMPOraL', descendants=None, kids=None, score=None, time=1610920300, title=None, item_type='comment', url=None, parent=25814884, text='Between my wife and I we actively use 3 different banks (until recently 4), and we&#x27;ve also been through a bunch of redesigns, modernizations and acquisitions. I must have used some 10 banking UIs by now, not counting mobile apps.<p>One thing I can tell is: they get worse over time, and the more JS they involve, the worse they end up being. I can talk <i>a lot</i> about the UI design itself and it won&#x27;t be nice (suffice to say: it&#x27;s getting worse, and it&#x27;s most likely because the goal of the bank isn&#x27;t to provide a productive financial management UI, but to confuse you and upsell you financial products), but beyond that, performance goes down with each iteration.<p>(My least favorite piece of garbage of user interfaces is the offering of IDEA Bank in Poland - an Angular.js monstrosity where every operation - like opening account history, or downloading a PDF with transaction details - seems to take 30 second to one minute on a good day. The interface itself lags a lot, starts to visibly slow down if listing more than couple dozen items - say, transaction history for the past 6 months. But showing such long lists isn&#x27;t a good idea anyway, because if you scroll to the end of it, some random XHR will fire and reset the list to &quot;last month&quot; or something like that, because of course it&#x27;s a reasonable thing to do.)<p>Banking pages absolutely do not have anything in them that would require &quot;desktop like functionality&quot;. They&#x27;re the poster child of the document model - their job is literally to be digitized bureaucracy. They present you with forms and respond to queries. Every interaction you want to have on a banking interface boils down to that. Request a list of this. Request details about that. Send that much money there.')