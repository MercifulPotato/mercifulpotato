Item(by='sgtnoodle', descendants=None, kids=None, score=None, time=1608799264, title=None, item_type='comment', url=None, parent=25521247, text='For MCU code, it&#x27;s best practice to statically allocate all memory. If you do need dynamic allocation, it&#x27;s better to use either fixed size pool allocators, or allocate only pools.<p>For performance critical code running on a more powerful system with an OS, it&#x27;s still good to stick with static allocation, or malloc and free only during initialization time.<p>Over the last decade I&#x27;ve written firmware for space ships, self driving cars, and autonomous aircraft, and I&#x27;ve never needed more than an allocate only pool or an O(n) LRU cache data structure. I&#x27;ve written plenty of software that was hard on the heap, but rarely does memory need to be freed during runtime, and it&#x27;s rare to need raw pointers in C++ when writing such code.<p>Ideally, your &quot;firmware&quot; is written in a way that abstracts away the target hardware enough that it&#x27;s basically just weird software. Then, you can unit test it, and even run linters and memory sanitizers on it.')