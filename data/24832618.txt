Item(by='hajile', descendants=None, kids=[24834626], score=None, time=1603153394, title=None, item_type='comment', url=None, parent=24829990, text='I completely agree that separate operators area MUST for dynamic languages.<p>Lua allows operator overloading with metatables as do ruby and Python with classes<p><a href="http:&#x2F;&#x2F;lua-users.org&#x2F;wiki&#x2F;MetatableEvents" rel="nofollow">http:&#x2F;&#x2F;lua-users.org&#x2F;wiki&#x2F;MetatableEvents</a><p><a href="https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html#emulating-numeric-types" rel="nofollow">https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html#emulating...</a><p><a href="https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;documentation&#x2F;faq&#x2F;7&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;documentation&#x2F;faq&#x2F;7&#x2F;</a><p>&gt; One number type in Lua:<p>Not quite true. Lua had only 64-bit floats like JS until version 5.3 and the blazing fast LuaJIT still only has floats. Well, to be honest, it has hidden 32-bit integers for sake of bitwise operations just like JS (well, JS uses 31-bits with a tag bit which is probably a lot faster).<p>&gt; How about `{} + []`? I believe I can disable this part in JavaScript engine and no one would notice.<p>That&#x27;s very simple. {} at the beginning of a line is an empty block rather than an object (yay C). &quot;Disabling&quot; that would break the entire language.<p>&gt; UTF-16<p>UCS-2 actually. Back in those days, Unicode was barely a standard and that in name only. Java did&#x2F;does use UCS-2 and JS for marketing reasons was demanded to look like Java. I don&#x27;t want to go into this topic, but python, PHP, ruby, C&#x2F;C++, Java, C#, and so on all have a long history not at all compatible with UTF-8.<p>&gt; You&#x27;ve said nothing about constructor oriented programming. Unique feature, I have not heard any other language adopted it yet.<p>I&#x27;ll give you that JS prototypal inheritance is rather complex due to them trying to pretend it&#x27;s Java classes. Once again though, the deep parts of both Python and Ruby classes are probably more difficult to explain. Lua&#x27;s metatables are very easy to understand on the surface, but because there&#x27;s no standard inheritance baked in, every project has their own slightly different implementation with it&#x27;s own footguns.<p>Closures are almost always preferred over classes in modern JS. Likewise, composition is preferred over inheritance and the use of prototype chains while not necessarily code smell, does bear careful consideration.<p>If someone insists on using deep inheritance techniques, they certainly shouldn&#x27;t be using class syntax as it adds yet another set of abstractions on top. Object.create() and inheriting from `null` solves a ton of issues.<p>&gt; By the way, you can say &quot;Yes, I know JavaScript has some problems&quot;. It is not a secret, everyone knows.<p>I&#x27;d say if you take the top 20 languages on the tiobe index, it sits in the middle of the pack with regard to warts and weirdness. Maybe people are just attracted to weird languages.')