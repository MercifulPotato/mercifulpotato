Item(by='dperfect', descendants=None, kids=[25180046, 25175825, 25176305], score=None, time=1606030067, title=None, item_type='comment', url=None, parent=25175422, text='I used Rails for a lot of projects starting ~10 years ago, but slowly gravitated towards a stack based on Sinatra (for a lean REST API), Middleman (static site generator), and webpack&#x2F;react&#x2F;etc - for mostly the reasons you describe.<p>In hindsight, I can&#x27;t blame Rails for the direction it took; JavaScript&#x27;s path (the language itself, as well as the tools) has been extremely volatile in that time. Rails is opinionated, which is part of what makes it great, but to be <i>more</i> opinionated on JS in the past probably would have been detrimental to the Rails community. I&#x27;ve felt the pain in my own work: every 2 weeks, it feels like my webpack&#x2F;react&#x2F;babel&#x2F;etc toolchain and codebase need to be refactored because what was recently best-practice is now considered &quot;legacy&quot; and unsupported. When you embrace a specific set of technologies, you take on a certain amount of risk that those technologies will be deprecated, unsupported, or unpopular tomorrow.<p>I believe (<i>hope</i> is probably the better word) the JS landscape is getting more mature and stable, and it makes sense that the recent versions of Rails have incorporated more of what has become &quot;standard&quot; JS tooling. I&#x27;ll always love Ruby, and even if I don&#x27;t use Rails at the moment, I appreciate what Rails is doing and I directly benefit from the contributions of the Rails community.<p>More recently, I&#x27;ve been trying to learn some Elixir (those Phoenix LiveView demos look amazing), but not sure I&#x27;m ready to jump in 100%. Looks like matestack is essentially doing something similar with Ruby, so I&#x27;ll be interested to see where it goes.')