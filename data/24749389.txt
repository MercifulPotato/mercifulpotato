Item(by='gavinray', descendants=None, kids=[24749458, 24749565], score=None, time=1602452904, title=None, item_type='comment', url=None, parent=24749232, text='This might not exist in C (I&#x27;ve never written it), but something like this seems like a fairly clean pattern you could use:<p><pre><code>  abstract class BaseDriver {\n    abstract commonThing()\n  }\n\n  abstract class BaseDriverV1 extends BaseDriver {\n    commonThing() {\n      console.log(&#x27;This is the common method implementation for all V1 drivers&#x27;)\n    }\n\n    abstract doThingOnlyV1Does() \n  }\n\n  class DriverV1_1 extends BaseDriverV1 {\n    doThingOnlyV1Does() {\n      console.log(&#x27;This is how Driver V1.1 does the V1 thing&#x27;)\n    }\n  }\n</code></pre>\nThis way you can use either an interface or an &quot;abstract&quot; definition that declares the base driver methods and the versioned driver methods, then provide version-dependent implementations where needed, or else share the common implementations by inheritance&#x2F;extension.<p>Maybe this turns into spaghetti at scale and it actually is easier to just copy-paste all of it, who knows.')