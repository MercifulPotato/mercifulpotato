Item(by='joshuamorton', descendants=None, kids=[24702220], score=None, time=1602016322, title=None, item_type='comment', url=None, parent=24701834, text='&gt; The original question was about Python the language, not Python the ecosystem.<p>Python doesn&#x27;t have a spec, so the argument that the language doesn&#x27;t support static typing is dubious at best, since a static type checker is maintained by the language itself. If I alias python to `mypy $0 &amp;&amp; python $0` or whatnot, is it no longer python? It&#x27;s certainly statically typed.<p>&gt; Because of this distinction, it is never a genuine concern of a developer in Java or another statically typed language whether third-party libraries will be properly typed. There do not exist libraries without valid static types. You can&#x27;t install something from Maven or what-have-you that won&#x27;t type-check.<p>Is this enforced by the language, or is this just an aspect of the ecosystem? &quot;Maven-packages must typecheck&quot; is enforced by the spec?<p>&gt; But you can do this in Python. You can install something via pip and there is no guarantee it will come with good type annotations for your type-checking tool to use, because the type checker is not part of the language proper. It&#x27;s not required.<p>Are you saying that there is a guarantee in Java that the types need to be &quot;good&quot;? I&#x27;m not even clear that maven (which again isn&#x27;t part of the java language) requires that uploads <i>compile</i>, much less that the type declarations be &quot;good&quot;, whatever that means.<p>Which all returns to my central point: you trust the java ecosystem more that the python ecosystem to have &quot;good&quot; type declarations. There is nothing implicit in the type systems of those languages that enforces that one or the other have better or worse type annotations.<p>Your argument <i>relies</i> on conflating use in practice with theoretical guarantees, I&#x27;m just pointing that out. If you want to say that your experience is that python has less reliable types than java, then sure, that&#x27;s probably true. But the type systems available in those languages are functionally equivalent. The use, however, differs.')