Item(by='lumost', descendants=None, kids=None, score=None, time=1610809162, title=None, item_type='comment', url=None, parent=25798628, text='I&#x27;ve been around go, java, and rust for a bit now (I even worked full-time on go projects for a couple years). Go really lacks a few features that are required for the numeric computing, and data processing.  If you are building a web service that needs these kinds of things, it&#x27;ll be a painful experience.<p>There are a bunch of things rust has which makes it attractive over go for these types of apps, from a practical perspective it <i>tends</i> to be better for a team to use a minimal number of languages across their stack.<p>The lack of generics means that each numeric type has it&#x27;s own signature, if you deal with a lot of numbers with different precisions - you&#x27;ll have a bunch of identical methods lying around just to support alternate precisions.<p>The lack of function&#x2F;closure serialization in Go means that &quot;moving compute to data&quot; ala Spark or Hadoop becomes exceptionally difficult.<p>As native code, rust interfaces cleanly with C and can run in a few more places than Go - there are some active efforts to even support GPU kernels.<p>Go can&#x27;t really do any of the three things above today, and the community is averse to include new features into the language for both good and bad reasons.  Java can do the first two, but struggles in the last category.<p>Rust has an interesting opportunity to be a modern C which does the things java does and the things C&#x2F;C++ do.  But the library support and learning curves would need to improve dramatically for it to get there.')