Item(by='jrockway', descendants=None, kids=[25321877], score=None, time=1607230486, title=None, item_type='comment', url=None, parent=25318987, text='I think Windows provides all the tools necessary for accurate color management, it&#x27;s just that not everyone has done the necessary bookkeeping for it to work.<p>The underlying problem is that APIs describe colors in the display colorspace.  #ffffff means &quot;send full power to the red, green, and blue subpixels&quot;[1], without describing what color the red, green, and blue subpixels are.  That was not a major problem until relatively recently; every display used the same primary colors, so there was no need to specify what colorspace you were sending values to the OS in.  But, then it became cheap and easy to use better primaries (&quot;wide gamut&quot;), and we had a problem.  Every color written down in a file suddenly became meaningless; an extra piece of information would be required to turn that (r, g, b) tuple into a display color.  So, everyone kind of did their own thing!  Image formats long had a way to tag the pixel data with a colorspace, so images with tags basically work everywhere.  Applications can read that and tell the OS that colors are in a certain color space, and it can map that to your display.   Most applications do that; if you have a wide-gamut display and take an AdobeRGB-space image off your digital camera, the colors will be better than if you looked at it on an sRGB display.  Even web browsers handle this fine; if they are presented with an image with a colorspace tag, they&#x27;ll make sure your monitor displays the right colors.<p>The problem is sources of color data that don&#x27;t have a tag.  CSS is a big offender.  CSS doesn&#x27;t specify the colorspace of colors, so typically browsers will just send whatever is in there directly to the display.  That means if you&#x27;re a web designer and you pick #ff0000 on your sRGB display, people using a wide-gamut display will see a much more vibrant shade of red, and everything will look off.  In fact, pretty much everyone using a wide-gamut display will see wrong colors everywhere because of this; I have one, and I just forced into sRGB mode because it&#x27;s so broken.  (On the other hand, a lot of people like more vibrant colors, so they think it&#x27;s a good thing that they get artificial vibrance enhancement on everything they view.  And are then disappointed when an application handles colors correctly, and what they see on their monitor are the same boring colors their digital camera saw out in the field.)<p>But, the problem is not Windows, the problem is applications and specs those applications use.  Authors of specs don&#x27;t want to say &quot;sorry, there is no way you can ever use colors outside of sRGB without some new syntax&quot;, so they just break colors completely for everyone.  That&#x27;s why things look terrible on monitors that aren&#x27;t sRGB; the code was built with the assumption that monitors will always be sRGB.  Get rid of that assumption and everything will look correct!<p>There are also plenty of images out there that don&#x27;t include color space tags, so it&#x27;s undefined as to what colors they&#x27;re actually trying to display.  Some software assumes sRGB.  Some software assumes the display colorspace.  It&#x27;s inconsistent.  (I used to produce drawings in Adobe RGB and upload them to Pixiv, and their algorithm totally gets colorspaces wrong.  It will serve your verbatim file to some users, but serve a version of the file to other users with the color tag removed, so that there is no possible way the viewer can see the colors you intended.  I gave up on wide gamut and restricted myself to sRGB, because the Internet sucks.)<p>[1] It gets more complicated for shades of grey, involving gamma correction.  #7f7f7f doesn&#x27;t mean &quot;send half as much electrical power to each subpixel&quot;, but rather maps to an arbitrary power level.  The idea is to use the bits of the color most efficiently for human viewers; it&#x27;s easy to tell &quot;0 power&quot; from &quot;0.01% power&quot;.  (You&#x27;ll see this in practice when you write some code to control an LED from a microcontroller; if you just use the color as a PWM duty cycle, your images won&#x27;t be the right colors on the display you just made.  Of course, many addressable RGB LEDs do the gamma correction internally, so your naive approach of copying the image pixel values to the addressable LED will actually work.  I learned this the hard way when I got addressable LED panels from two separate batches, and the old batch did gamma correction and the new batch didn&#x27;t.  I didn&#x27;t realize it was gamma at play, so built an apparatus to measure the full colorspace of the LEDs with a spectrophotometer (<a href="https:&#x2F;&#x2F;github.com&#x2F;jrockway&#x2F;apacal" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;jrockway&#x2F;apacal</a>).  When I plotted the results, I immediately realized one was linear and the other was gamma-corrected... which meant all the code I wrote to build a 3D LUT for the LEDs was pointless; some simple multiplication was all I needed to make the LEDs look the same.  But I digress...)')