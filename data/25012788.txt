Item(by='jariel', descendants=None, kids=None, score=None, time=1604715140, title=None, item_type='comment', url=None, parent=25012631, text='First - different perspectives (i.e. bigger vs. narrow picture), Second - skills and competencies gaps.<p>First &#x27;Special Conditions&#x27; - The gap between &#x27;customer&#x27; and &#x27;engineer&#x27; can often be quite large. Junior Engineers especially generally don&#x27;t have an intuition for those things, and often &#x27;the technical details&#x27; deal directly with feature orientation. There are legal issues, operational issues, so many &#x27;bigger picture&#x27; things that are relevant. Cross-functional issues are definitely a thing, which is why a guy like Musk is probably managing a few layers deep, and &#x27;very deep&#x27; in some specific scenarios.<p>Musk is a good example - because when he intervenes, because he has &#x27;a lot of legitimacy&#x27; as &#x27;founder and supposed genius&#x27; - people may not feel &#x27;micromanaged&#x27; whereas if it were any other situation they very well might.<p>You may have a very complex code base where the architects, or Senior Devs who built the system need to intervene with a bunch of things to ensure consistency, communicate much of the &#x27;unspoken&#x27; idioms that exist, and provide &#x27;leadership by example&#x27; etc. etc..<p>For example, I trust my team members a lot more in the Java&#x2F;Python domain, I almost don&#x27;t trust <i>anyone</i> in C++ there are just so many ways to skin the cat, so many horrible anti-patterns, I&#x27;ve seen it all, so I like to take a really good look at the code. Often a second set of eyes helps.<p>On the whole, yes, micromanaging probably shouldn&#x27;t be constant, but it can be consistent.<p>Second - there are skills (and communications) gaps in every resume. I&#x27;m literally managing a small offshore team right now, not getting adequate response when asking some specific questions. I&#x27;ve come to the conclusion they are literally not considering a whole pile of corner cases. I&#x27;m going to have to step in and hold their hands through a set of functions that they, for whatever reason, are not wading through very well. Fortunately, I have a ton of experience with this, and it will be ok.<p>This idea of &#x27;if they are not good enough use someone else&#x27; is a little bit glib because far more often than not, it&#x27;s not an option - either you have an incumbent team, budgetary&#x2F;timing issues, and frankly, even if you didn&#x27;t have limitations there, it&#x27;s hard to evaluate people anyhow.<p>Finally - I will say that there are some situations where micromanaging probably is going to be constant. For very young and new developers on any kind of complex system ... they will need to have a lot of coaching and oversight. Even little things like tooling usage, which may not be &#x27;formalized&#x27; because the team is in good sync, or the team is senior, but you have a junior who&#x27;s not familiar with the git idioms on the team etc...')