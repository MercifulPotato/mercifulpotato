Item(by='tremon', descendants=None, kids=[25587256], score=None, time=1609367687, title=None, item_type='comment', url=None, parent=25586728, text='&quot;the arrow&quot; is an expression of a function operation, or rather, how a function transforms its arguments. In Haskell, the following signature:<p><pre><code>  func :: A -&gt; B\n</code></pre>\ndeclares a function <i>func</i> that takes one argument of type <i>A</i> and returns a value of type <i>B</i>.<p>I&#x27;m guessing a bit, I feel this goes over my head, but here&#x27;s my layman&#x27;s interpretation:<p>In Rust, in order to declare a linear type, you must do so when initializing the variable:<p><pre><code>  let x = vec![1, 2, 3];\n</code></pre>\nNow <i>x</i> is declared as move-only, so that the vector cannot be duplicated by assigning it to a second variable; after assignment, accessing <i>x</i> will result in a compiler error.<p>In Haskell, you declare a function<p><pre><code>  func :: A %1 -&gt; B\n</code></pre>\nto indicate that after this function call, accessing <i>A</i> should result in a compiler error.')