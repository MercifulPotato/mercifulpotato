Item(by='geokon', descendants=None, kids=[25845352, 25845399], score=None, time=1611143229, title=None, item_type='comment', url=None, parent=25838364, text='I&#x27;m not super familiar with the ecosystem, but does the GraalVM compiler provide a way to &quot;tree shake&quot; dependencies?<p>This past year I wrote a rather simple desktop app (JavaFX) for work using Clojure. But Java by default uses RTTI - and Clojure by extension does as well - the dependency tree would balloon my final executable. For instance, I&#x27;d bring in some CV library like BoofCV to do some very basic image manipulation, but all of BoofCV and its dependencies would get dragged in. Hundreds of megabytes of junk.. So you either have to just accept you have a gargantuan executable or you have to use some smaller subpar libraries to do what you want. But it seems unfortunate the ecosystem pushes you to use less&#x2F;smaller dependencies instead of using robust large ones.<p>I understand the reason behind it. The java compiler has no way to ensure which classes will be used and which won&#x27;t be b&#x2F;c crazy things can happen at run time. Maybe with all the work on GraalVM people will move their libraries to not use RTTI as much? I haven&#x27;t had a chance to hook up Graal yet (I think it doesn&#x27;t play nice with JavaFX.. or maybe that&#x27;s old news) - but it&#x27;s unclear if it&#x27;ll slim down the final binary. If it does - then this potentially a game changer for &quot;deliverable&quot; executables :)<p>PS: You can manually go in and disable sub-dependencies.. but it&#x27;s ugly and incomplete. I got Clojure&#x2F;JFX&#x2F;Java to compile down to something like 60MB - but my app is simple and it really should be more like 2MB.')