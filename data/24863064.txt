Item(by='ywei3410', descendants=None, kids=None, score=None, time=1603399171, title=None, item_type='comment', url=None, parent=24859159, text='When it’s hard to do something in Nix, it’s <i>really</i> hard. Let’s say you download a \nrandom binary which isn’t part of the Nix distribution — it is unlikely that you can run\nthe binary; you may need to run <i>ldd</i> or <i>nm</i> to check the headers or construct the <i>LD_LIBRARY_PATH</i>\nmanually. So many random build scripts assume certain things like <i>cp</i> exists in <i>&#x2F;bin&#x2F;cp</i> or use\nabsolute paths (looking at you Python) that I tend to find I’m yak-shaving pretty often.<p>The documentation for Nix… is special. I’ve never seen any configuration need to explain the fixed-point [1]\nin order to do something which should be pretty simple.<p>On the other hand, when it works, it works brilliantly. I have projects where I want to fetch some random URL,\nor build some randomly generated C file; previously which I would have just said sod-it and checked it into the\nrepository. Being able to share crafted environments ala <i>direnv</i> to colleagues and the continuous-integration\nis magical. Having per-project environment management which doesn’t require 3-4 tools like virtualenv, nvm,\ndocker, docker-compose is really nice.<p>[1] <a href="https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;nixpkgs-overriding-packages.html" rel="nofollow">https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;nixpkgs-overriding-packag...</a>')