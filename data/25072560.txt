Item(by='didibus', descendants=None, kids=[25072637], score=None, time=1605203787, title=None, item_type='comment', url=None, parent=25070591, text='&gt; the reason for DI is to support the Dependency Inversion Principle : &quot;High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g. interfaces).<p>You can still depend on abstractions without DI. Just use an interface or asbtract class in your code.<p>DI only plays into how you acquire yourself an instance of the concrete class for that abstraction you depend on.<p>So it can be given to you by your caller (DI). You can go fetch it somewhere (ServiceLocator). You can create it through a utility (Factory). Or you can create it yourself old fashion way with new.<p>&gt; But you don&#x27;t have to use a library; many times I&#x27;m writing a simple-ish console app and just use good old &quot;Poor Man&#x27;s DI&quot; where I manually construct my object graphs at startup<p>I will support that. I&#x27;d like people to be precise in their criticism, do you find the DI pattern troublesome, or some particular DI framework?')