Item(by='octoberfranklin', descendants=None, kids=None, score=None, time=1605958847, title=None, item_type='comment', url=None, parent=25167468, text='Program extraction.<p>In dependent type theory if you&#x27;ve proved &quot;A implies B&quot; you can extract from that proof a program that takes an argument of type A and always halts, returning a value of type B.  Moreover if you prove some property about proofs that A implies B, you&#x27;ve also proved the corresponding proposition about programs.<p>This means your proofs get to deal with programs directly, rather than having to formalize them as something like Turing machines whose tapes are set-theoretic encodings of lists of integers.  It&#x27;s excruciatingly painful to write non-hand-wavy proofs of anything that way.  Hand-wavy proofs that can&#x27;t be machine-checked aren&#x27;t so bad of course; complexity theory folks have been doing that for decades.<p>If you aren&#x27;t proving things about programs or homotopy then there really aren&#x27;t any obvious reasons to prefer dependent type theory.  I say this as somebody who loves programming with dependent types.  But I&#x27;m being honest here, and I wish more people in the mechanized mathematics world would be honest about this.')