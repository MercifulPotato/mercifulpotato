Item(by='Philip-J-Fry', descendants=None, kids=None, score=None, time=1604508590, title=None, item_type='comment', url=None, parent=24988368, text='I&#x27;m not trying to argue that C# is at fault by any means. But having a large toolset and trying to enforce very specific code quality when handling a code base touched by 100+ developers is very hard because using all these tools is very easy.<p>In Go it&#x27;s quite difficult to make idiomatic overly complex code. If someone is making something really complex in Go I can easily see what they&#x27;re trying to do and suggest an easier more idiomatic way of doing it.<p>In C# trying to understand some overly complex abstraction is a task in itself. Then trying to simplify it in a way that pleases everyone else who is of the mindset that these abstractions are good is another challenge. Most Go developers are of the opinion that there is only 1 or 2 idiomatic ways to solve most problems. But in C# there&#x27;s so many more because of the more advanced language.<p>I&#x27;m not trying to justify the shortcomings of Go either. From day 1 of learning Go I was craving for generics and I read people saying &quot;you don&#x27;t need generics, just use interface{} and type switch.&quot;. It&#x27;s ugly and it&#x27;s one of the worst parts of Go, I absolutely hate seeing interface{} in a function.<p>But in the context of working in a team I&#x27;ve worked on sizeable projects in Go and bringing new devs of various skill levels onto the project has been a breeze. The code they write is the same as the code I write because it almost has to be, there&#x27;s not many ways they can stray from the path laid out ahead.')