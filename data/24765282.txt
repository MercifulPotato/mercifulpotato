Item(by='sillysaurusx', descendants=None, kids=[24765626, 24765294, 24765584, 24768739, 24765610, 24765694], score=None, time=1602595161, title=None, item_type='comment', url=None, parent=24764605, text='Gamedev! One of the best parts of being in gamedev was that the problem space forces you to work this stuff out. People won’t wait 30 minutes for a frame to render.<p>A few ways to solve this pop to mind. As Aeolun mentions in a parallel comment, you can just divide coordinates if your grid is regular. But it often isn’t.<p>In that case, you can attack it in a few ways. One time Feynman was giving a lecture and said “This triangle looks a little cockeyed. Obtuse! That’s the word! I know about the triangles but not their names.” And I’m not Feynman, but I did forget the name of this: you build a tree of squares. First one is your whole grid; split it into four smaller squares, those are the children; repeat till your resolution is sufficient. Then you can attach whatever you want to the child nodes (in this case, grid squares). Since it bisects space into halves, you can do a search in O(log n).<p>But what if you want to go faster? What if it’s absolutely crucial for speed, like a physics engine, to be able to ask “which objects occupy this region of space?”<p>My favorite algorithm is absolutely delightful: a radix sort on floats. <a href="http:&#x2F;&#x2F;www.codercorner.com&#x2F;RadixSortRevisited.htm" rel="nofollow">http:&#x2F;&#x2F;www.codercorner.com&#x2F;RadixSortRevisited.htm</a><p>You end up getting O(k*N) time, just like radix sort normally gives you. But the real magic is that it works with bounding boxes. There’s an article from the same author which I can no longer find, detailing it. But the idea is, you sort all your objects in one spatial dimension first, say along the X axis, and then you don’t need to do anything to search quickly. No trees. Suppose you want to ask “does this region of the X-axis have any objects?” You just... do something, ha. I forgot the next step, so I don’t want to say a mistaken answer and tarnish poor Pierre’s idea, which is quite nice. But he’s been working on this problem for basically decades, so here’s one of his N papers on the topic (of spatial partitioning, not applying radix sort to solve it): <a href="http:&#x2F;&#x2F;www.codercorner.com&#x2F;ZeroByteBVH.pdf" rel="nofollow">http:&#x2F;&#x2F;www.codercorner.com&#x2F;ZeroByteBVH.pdf</a><p>I could work it out if I sat down with it for a bit, but, I leave it to one of you younger devs can take up the torch. It’s a fun puzzle.')