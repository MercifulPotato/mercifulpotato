Item(by='pansa2', descendants=None, kids=[25396715], score=None, time=1607729732, title=None, item_type='comment', url=None, parent=25384433, text='Python&#x27;s descriptor protocol is very elegant. Given:<p><pre><code>    class C:\n        def __init__(self):\n            self.a = 1\n        def b(self):\n            print(f&#x27;b({self})&#x27;)\n        @property\n        def c(self):\n            print(f&#x27;c({self})&#x27;)\n    o = C()\n</code></pre>\nThe descriptor protocol is a generic way to enable `o.a` to access an attribute of `o`, `o.b` to access an attribute of `C` and bind `self` to `o`, and `o.c` to access an attribute of `C`, bind `self` to `o`, <i>and call it</i>.<p>Do any other dynamic languages use a similar protocol for attribute access?<p>Ruby, for example, doesn&#x27;t need to - it can use a simpler approach because `o.x` never refers to an attribute of `o`.<p>JavaScript&#x27;s solution is less elegant - the way it sets the value of `this` is infamous, and AFAIK properties are treated as a special case rather than built on top of a generic protocol.')