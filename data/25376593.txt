Item(by='cellularmitosis', descendants=None, kids=[25376898], score=None, time=1607624257, title=None, item_type='comment', url=None, parent=25375804, text='&gt; Thereâ€™s a video somewhere in one of our talks of an Uber engineer typing a single line statement in Xcode and then waiting 45 seconds for the letter to appear in the editor slowly, one-by-one.<p>I&#x27;m not sure if you are familiar with Xcode, but this indicates an off-the-charts LOC count.  Something isn&#x27;t adding up -- the user-visible features and screens in the app don&#x27;t necessitate a codebase this large.<p>My guess would be the intersection of several compounding factors:<p>- a product team endlessly pushing special-case features which aren&#x27;t core to the user experience (the twitter thread talks about the rate of new code being added as if it were a foregone conclusion the app would continue to grow without bound),<p>- an A&#x2F;B testing framework which leads to the deployed codesize being much larger than what the typical user actually interacts with (worse if they are lax about culling the vestigial A&#x27;s and B&#x27;s),<p>- and reaching a &quot;thermal runaway&quot; point of too many devs x too many lines of code, where code reuse stops happening.  Once you reach the point where it takes less time for a dev to write a given feature in a from-scratch fashion rather than doing some codebase archaeology to find existing code structures which can be reused, you&#x27;ve reached thermal runaway.  The Facebook iOS app revelation of &quot;18,000 classes&quot; indicates they were likely suffering from this as well <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=10066338" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=10066338</a><p>Was Swift up to the task?  Perhaps not.  But does a ride-hailing app really necessitate this level of codebase complexity?  Uber&#x27;s iOS app is now over 300MB...')