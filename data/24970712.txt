Item(by='jasode', descendants=None, kids=[24971422], score=None, time=1604338563, title=None, item_type='comment', url=None, parent=24970182, text='<i>&gt;the mailing list does not serve the function of email address discoverability in any form. Instead, the source is the source code itself, in which the target email addresses will be recorded ad nauseam.</i><p>Not every project records email addresses in the source code.  Yes, the project maintainers <i>could</i> do that, but some don&#x27;t.<p>I&#x27;m looking inside the latest &quot;youtube-dl-2020.11.01.1.tar.gz&quot; source archive and it does <i>not</i> have maintainers&#x27; email addresses in it.  The main Python source code file &quot;YoutubeDL.py&quot; and other <i></i> .py files do <i>not</i> have email addresses.  The archive also has a text file &quot;AUTHORS&quot; for historical credits -- but no actual email addresses.  I suppose the current maintainer <i>could</i> explicitly put his email address in that source, but he&#x2F;she didn&#x27;t.  (Maybe there are good reasons to <i>avoid</i> putting an email address in the source code.)<p><i>&gt;To carve it out: You, as a holder of the source code, will always be able to send patches, ask questions, as well as start discussions that others will organically be added to, using no other sources of information than the source, irrespective of mailing list availability, as long as you can send email, and that at least one of the maintainers or contributors of the source can still receive email.</i><p>Based on what you wrote, it seems you still have not fully internalized the difficulties of a Schelling Point for something like Youtube-dl.  Even if <i>&quot;youtube-dl-2020.11.01.1.tar.gz&quot;</i> contained the actual email address of the current maintainer, if that maintainer decides to quit because of RIAA hassles and someone else (unknown to us because we can&#x27;t predict identities of future authors) takes over and creates a new <i>&quot;youtube-dl-2021.03.15.1.tar.gz&quot;</i>, the old &quot;tar.gz&quot; file does not point to the existence of the new file or new canonical location.   The world still needs a Schelling Point so people know where to download the latest trusted non-malware version of Youtube-dl <i>even if they don&#x27;t know the identity of the new maintainer</i>.  You claim the &quot;source&quot; can be the starting point ex nihilo but you still need a trusted Schelling Point to <i>obtain the source in the first place</i> to enable the subsequent steps of private email correspondence that make a mailing list server irrelevant.<p>How do people get the latest <i>&quot;youtube-dl-202x.xx.xx.x.tar.gz&quot;</i> without a Schelling Point?!?  Your answer:  start with the source code.<p>My response:  isn&#x27;t that circular logic?<p>I can only guess that you&#x27;re using mental model of Linux kernel development.  The problem with trying to transfer that collaboration workflow over to youtube-dl is the Linux project does <i>not have adversaries like RIAA</i> trying to kill it.  Schelling Points are stable in that world of mainstream projects and seemingly trivial.  E.g. just read the Linux kernel .h&#x2F;.c file for email addresses.')