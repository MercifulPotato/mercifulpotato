Item(by='varikin', descendants=None, kids=[25670358], score=None, time=1609971010, title=None, item_type='comment', url=None, parent=25643940, text='I recently got a masters in software engineering, not that this means I&#x27;ve mastered the discipline, but I think it set a decent idea of what is important.<p>Here&#x27;s a incomplete list of topics that I is worthwhile:<p>Creating a data schema (sql, no-sql, api based, whatever). This seems simple and obvious, but it becomes very hard very fast, especially when you need to model a complex  subject that you know nothing about. Consider being hired by a hospital to model their records, or an insurance company. You need to talk to many people and understand how everything they say and do relates to everything else.<p>Project management: You may not want to be a project manager, but you should familiar with scrum, agile, waterfall, lean, and kanban. At least you can have an informed opinion when you argue for or against how things are done.<p>QA: You should know how to write a test plan for a large feature or application. This includes unit tests, manual testing, deciding what areas need more effort because getting it wrong is very bad and what is less important. This may include security and performance testing.<p>Architecture and design: How would you design a new application? How would you add a new feature to an existing application? How do you communicate this design to a team or many teams?<p>How to evaluate new things like languages, tools, libraries, technologies, etc. This isn&#x27;t just reading a couple blogs, this is doing small scale test, proof of concepts, looking at the code to an extent, getting opinions for others you trust.<p>Finally, communicating. Software engineering is a team sport. You need to know how to write design documents, test plans, maybe architecture plans, progress reports, etc. If you can&#x27;t effectively communicate your designs, plans, or even why someone else&#x27;s thing is bad or good, you won&#x27;t be able to convince others that you are right. And remember, you need to not just convince your peers, but also non-technical people, such as managers, VPs, and many other.')