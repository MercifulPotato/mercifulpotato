Item(by='marcan_42', descendants=None, kids=[24771662], score=None, time=1602610593, title=None, item_type='comment', url=None, parent=24765437, text='Here is a Twitter thread I wrote on the subject:<p><a href="https:&#x2F;&#x2F;twitter.com&#x2F;marcan42&#x2F;status&#x2F;1040626210999431168?s=19" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;marcan42&#x2F;status&#x2F;1040626210999431168?s=19</a><p>TL;DR the FSF&#x27;s RYF program is designed to allow inaccessible, un-auditable, immutable blobs - because they know that if they didn&#x27;t, nothing would ever get certified (everything has at least some microcode or ROM of some sort, e.g. the USB sound cards they&#x27;ve meaninglessly certified as RYF). By doing this, they <i>encourage</i> companies to make their blobs inaccessible, immutable, and un-auditable in order to get that rubber stamp. And so, we go from having firmware in &#x2F;lib&#x2F;firmware or something where it makes engineering sense, to dumping it in some write-protected flash read by a controverted set-up with a side CPU, where the user will never be able to audit or replace it, because <i>that</i> is what they will certify. In their view, proprietary blobs are OK as long as the user can&#x27;t see them or touch them - but if they can, that&#x27;s a big no-no. This isn&#x27;t a hypothetical scenario, as Purism has already gone down this road for the Librem 5, to the detriment of their users&#x27; freedom, as well as wasted engineering time and final device cost (that extra flash chip).<p>Put this way: a device that requires proprietary firmware loaded by an open driver from &#x2F;lib&#x2F;firmware is, by any reasonable metric, <i>strictly more free</i> than a device with the same firmware burned into ROM, but the FSF will only certify the latter. Even though you could audit the firmware, guarantee firmware authenticity, or even replace it with a free replacement when it becomes available (or reverse engineer it yourself) in the former case, but not at all the latter.<p>Meanwhile I have a friend who designed a completely open hardware laptop (think about the significance of that) and the FSF refused to certify it because the main CPU (one of the few with open documentation at all at the time) <i>happened to have</i> a GPU accelerator in it (even though it was not required, you can use it just fine with only framebuffer output) and at the time there were  no free drivers, so even if the thing shipped with all open code, they thought users might be &quot;tempted&quot; to install the blob drivers. There was some talk then of getting the manufacturer to <i>permanently disable</i> the GPU in those chips to get certified. So the FSF will certify hardware as long as you <i>remove</i> any features which <i>might</i> be usable with proprietary software. How does this increase user freedom again?<p>It&#x27;s all completely bonkers.<p>I&#x27;m somewhat frustrated at the FSF, because it seems that so much of what they do these days is extremist to the point of hurting the free software cause (e.g. some of their campaigns are just embarrassing in how childish they sound). I understand that they don&#x27;t like proprietary software, but treating it like it&#x27;s a massive evil upon the world is now way past its expiry date as an advocacy approach; this just makes the whole community look bad. Look at the FSFe if you want a more moderate organization which advocates for these causes without falling into sily behavior like that.')