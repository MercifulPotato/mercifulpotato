Item(by='a1369209993', descendants=None, kids=None, score=None, time=1609709210, title=None, item_type='comment', url=None, parent=25623353, text='Actually... there <i>is</i> a word of memory that you already have to <i>read</i> every time you access a region of memory: the page table entry for that region. If you have 64-byte cache lines, that&#x27;s 64 lines per (4KB) page, so you could load a second 64-bit word from the page table[0], and use that as a parity bit for each cache line, storing it back on write the same way you store active and dirty bits in the PTE proper. Actual E[<i>correcting</i>]C would require inflating the effective PTEs from 8(orginal)-16(parity) bytes to about 64(7 bits per line, insufficient)-128(15, excessive), which is probably untenable, but you could at least get parity checks this way.<p>There&#x27;s also the obvious tactic of just storing every logical 64-bit word as 128 bits of physical memory, which gives you room for all kinds of crap[1], at the expense of halving your effective memory and memory bandwidth.<p>0: This is extremely cheap since you&#x27;re loading a 64- vs 128-bit value, with no extra round trip time and still fits in a cache line, so you&#x27;re likely just paying extra memory use from larger page tables.<p>1: Offhand, I think you could fit triple or even quadruple error <i>correction</i> into that kind of space (there&#x27;s room for <i>eight</i> layers of SECDED, but I don&#x27;t remember how well bit-level ECC scales).')