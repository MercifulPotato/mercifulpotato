Item(by='dcolkitt', descendants=None, kids=[24720476], score=None, time=1602170161, title=None, item_type='comment', url=None, parent=24719525, text='For me the biggest pro and con are the same thing. With a monorepo your respective projects&#x27; codebases become tightly coupled.<p>Why that can be a bad thing? Good software engineering practices tend to be associated with loose coupling, modularity and small, well-defined interface boundaries. Putting each project into its own repo, encourages developers to think of it as a standalone product that will be consumed by third-party users at arms length. That&#x27;s going to engender better design, more careful documentation, and less exposed surface area than the informal cross-chatter that happens when separate projects live in the same codebase.<p>Why that can be a good thing? The cost of that is that each project has to be treated as a standalone project with its own release schedule, lifecycle support, and backwards compatibility considerations. Let&#x27;s say you want to deprecate an internal API in a monorepo? Just find all the instances where it&#x27;s called and replace accordingly. With a multi-repo it&#x27;s nowhere near as easy. You&#x27;ll find yourself having to support old-style calling conventions well past the point you&#x27;d prefer to avoid breaking the build for downstream consumers.')