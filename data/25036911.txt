Item(by='a1369209993', descendants=None, kids=None, score=None, time=1604941680, title=None, item_type='comment', url=None, parent=25026065, text='&gt; It&#x27;s true that you use this way of programming so often in functional languages that it earned itself a name, so that it&#x27;s easier to talk about it. However calling it a &#x27;pattern&#x27; feels weird (to me), even though it technically is one.<p>&gt; The equivalent of accumulators in imperative languages would be the &#x27;pattern&#x27; of having some variables outside of the loop and mutating them from within the loop. Maybe you can appreciate that it feels weird calling this a &#x27;pattern&#x27; â€” and now you can better understand how I feel about accumulators being called a pattern.<p>That&#x27;s a fair point, actually. I read &quot;patterns&quot; as &quot;design patterns&quot; a la the book of same name, based on the implied^Wlater stated title &quot;accumulator pattern&quot;, but I agree it does fit a weaker notion of &quot;pattern&quot; such as &quot;less-than-maximally-entropic (aka compressible in the information-theoretic sense) feature of code&quot;.')