Item(by='stickfigure', descendants=None, kids=[25901026, 25900962], score=None, time=1611562335, title=None, item_type='comment', url=None, parent=25900067, text='<p><pre><code>  static JObject CreateMessageRepresentation(Customer customer)\n  {\n    return new JObject(\n      new JProperty(&quot;customer&quot;,\n        new JObject(\n          new JProperty(&quot;name&quot;, customer.Name),\n          new JProperty(&quot;address&quot;,\n            new JObject(\n              new JProperty(&quot;street&quot;, customer.Address.Street),\n              new JProperty(&quot;zipCode&quot;, customer.Address.Zip),\n              new JProperty(&quot;town&quot;, customer.Address.City)\n            )\n          )\n        )\n      )\n    )\n  }\n\n</code></pre>\nYuck.<p>Just make CustomerData and AddressData classes, even if you only use them for that one API response. And even if you have ten other versions of CustomerData and AddressData for ten other methods. You get type safety and your tests refactor nicely.<p><pre><code>  @Value\n  static class AddressData {\n    String street;\n    String zipCode;\n    String town;\n  }\n\n  @Value\n  static class CustomerData {\n    String name;\n    AddressData address;\n  }\n\n  @Value\n  static class Message {\n    CustomerData customer;\n  }\n\n\n  public Message createMessage(Customer customer) {\n    final Address addy = customer.getAddress();\n    return new Message(new CustomerData(customer.getName(), new AddressData(addy.getStreet(), addy.getZip(), addy.getCity())));\n  }\n</code></pre>\nYou could format this nicer, and adding some constructors would help, but at least the typechecker is doing work for you.')