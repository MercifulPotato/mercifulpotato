Item(by='rscho', descendants=None, kids=[25253210], score=None, time=1606739761, title=None, item_type='comment', url=None, parent=25252995, text='A comprehensive stat library for J would be close (there is an RServe lib), but the most important thing is the integrated data store. For big companies, it makes perfect sense to want a separate data store. But for small shops or loners, tight language integration is light-years better! With J, I am allowed a <i>real</i> database (no effing .csv) where I can use the same (terse) language as for the analysis. This is the killer feature. This is where you see that say, for example Julia, is made for serious industrial coding with teams of tens of people and not lone guys.<p>Following the same principle, R dplyr allows you to seamlessly interact with the DB by using a translation layer. However, every time I open R I find myself having to write tens if not hundreds of loc to shape the data where I&#x27;d do that in a few lines of J. For single researchers, it&#x27;s actually <i>much</i> easier to read your one-page of J code 6 months later than it is for your 500-loc R script (again IMO).<p>Although I imagine it could be possible to really make a specialized APL geared towards data analysis as a strict DSL (APL is <i>not</i> a DSL). Meaning for example, making it more static and therefore statically compileable at the expense of losing things such as first-class environments (namespaces) or the &quot;execute&quot; primitive. One could also specialize the notation further towards statistics. There really is a whole realm of possibilities, here!<p>In a word, there is a market for lone scientists. It would be nice to have tools for that market ;-)')