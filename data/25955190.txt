Item(by='slpnix', descendants=None, kids=None, score=None, time=1611907930, title=None, item_type='comment', url=None, parent=25954620, text='krunvm uses libkrun (<a href="https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;libkrun" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;libkrun</a>) for executing the VM, and while the later is also based in rust-vmm and shares some code with Firecracker and Cloud-Hypervisor, it&#x27;s specialized in the process isolation use case. This means it implements a different set of devices (most notably, virtio-fs instead of virtio-blk, and virtio-vsock+TSI (Transparent Socket Impersonation) instead of virtio-net), and it takes the form of a dynamic library instead of a final binary.<p>In fact, the networking limitations are caused by this use of virtio-vsock+TSI. TSI (WIP implementation here: <a href="https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;libkrunfw&#x2F;blob&#x2F;main&#x2F;patches&#x2F;0003-Implement-TSI-WIP.patch" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;libkrunfw&#x2F;blob&#x2F;main&#x2F;patches&#x2F;00...</a>) is an experimental mechanism that provides inbound and outbound networking capabilities to the guest, with zero-configuration and minimal footprint, by transparently replacing user-space AF_INET sockets with AF_TSI, that have both an AF_INET and AF_VSOCK personality.<p>TSI has the additional advantage that, for the host side, all connections appear to come and go to the process acting as a VMM (in this case, krunvm, as it links directly with libkrun), which makes it very container-friendly in a way that even side-cars (such as Istio) work out-of-the-box.')