Item(by='mercer', descendants=None, kids=[25170377], score=None, time=1605962219, title=None, item_type='comment', url=None, parent=25169186, text='&gt; Then you define the corresponding rule. With SASS that is almost too easy. Also, don&#x27;t forget that the C in CSS means cascading.<p>Over the lifetime of projects &#x27;cascading&#x27; always led to headaches. There&#x27;s a reason the whole BEM thing became a thing.<p>&gt; Do you think it will be too repetitve? Make a SASS mixin that defines these for you. Not only you&#x27;re still keeping CSS separate from the HTML structure, it will very likely work in the same way that all of those &quot;pull-x&quot; and &quot;push-y&quot; rules are doing anyway.<p>I used to do all that. Still do for some projects that rely heavily on SASS. But using mixins and functions and extends and whatnot adds complexity that I honestly feel I can&#x27;t justify anymore. &#x2F;Why&#x2F; do I want to keep CSS separate from HTML when in practice they tend to end up entangled anyways. It just reeks or cargo-culting &#x27;separation of concerns&#x27; where really it&#x27;s just &#x27;separation of technologies that are separate for historical reasons&#x27;.<p>&gt; I am not against using classes and ids that define purpose and even state (for the odd case where the attributes are not enough&#x2F;non-existent). What I am against is the definition classes that are mapped to the presentation. You can have a &lt;button class=&quot;critical-action-trigger&quot;&gt; all you want, but please do not make &lt;button class=&quot;size-huge red&quot;&gt;.<p>But <i>why</i>? Other than &#x27;this is the way it has always been and I refuse to change my mind&#x27;?<p>&gt; I said above. If tailwind was only providing a bunch of utlity mixins and variables that I could then @import to my SASS, I would understand. What I don&#x27;t understand and do not want is to have classes that I am supposed to be writing inside the HTML.<p>Because it works. And it&#x27;s measurably easier to do, in the experience I and many others have. And because I still can&#x27;t find a good argument <i>not</i> to.<p>&gt; If we had a 100% style-free &quot;standard&quot; component library and the CSS designers focused only on implementing their design languages against that standard, the chances of us getting a more paretto-efficient basis for frontend development would grow immensely.<p>I do agree with this, I think. But day to day it&#x27;s not going to happen. When someone comes up with a popular style-free standard, assuming that&#x27;s practically possible and good enough to become popular, I&#x27;d happily switch to that.<p>&gt; Nowadays, every frontend developer either needs to do everything on their own or hope that there is already a combination of JS component library + design language that is acceptable. If we had my way, everyone could then start their application with the standard components, pick any design language that claimed to implement the rules for the standard components and customize only the relevant parts. Everyone&#x27;s 80% of the job would be mostly done.<p>Yes, but honestly by that logic we could dismiss any improvement and argue for some kind of ideal where HTML and CSS are not used for app development in the first place. But that&#x27;s just not the reality we live in.')