Item(by='munificent', descendants=None, kids=None, score=None, time=1603914265, title=None, item_type='comment', url=None, parent=24922559, text='I work on the Dart team.<p><i>&gt; 1. Dart is garbage-collected;</i><p>Yup. Most languages used for UI programming these days are. JS and C# are probably the biggest two. UI programming is at a really interesting intersection between two difficult constraints:<p>* Much of the work is subjective, exploratory, and frequently-changing. It&#x27;s hard to evaluate whether a UI looks and feels right until you code it up and try it. When you do, you often realize you need to change things. Also, product people really like to &quot;refresh&quot; application UIs frequently so there&#x27;s a ton of churn. All of this means that developer productivity is absolutely paramount. You need to be able to make small iterative changes quickly to evaluate them, and you need to be able to do sweeping re-writes efficiently. That means you want a high-level language and GC is a big part of that.<p>* At the same time, the program is real-time interactive software running on user hardware that you don&#x27;t control. So just like games, execution performance and latency is critical. A slow language implementation can degrade the application&#x27;s appeal in ways that materially affect its success.<p>Balancing those is hard. Fortunately, people have been hacking on GCs for decades and have gotten <i>really</i> good at them. The Dart VM&#x27;s garbage collector has been designed from day one for soft-realtime interactive performance. It&#x27;s generational with a very fast nursery allocator and collector, doesn&#x27;t stop the world, and (I believe) can do a full collection in the background.<p>Also, the language itself was somewhat designed to be GC friendly. Unlike dynamically typed languages like JS, object shape doesn&#x27;t change at runtime so an instance is only ever a single allocation.<p><i>&gt; 2. Dart has optional typing, which is to say it supports type hints but is essentially dynamically rather than statically typed.</i><p>As my colleague mraleph said, this hasn&#x27;t been true for a couple of years, though it tends to take a long time for knowledge about this to percolate through the world. Dart is now a typical statically-typed language very similar to C# and Scala.<p><i>&gt; But GC isn&#x27;t just about overhead (although that is a concern). It&#x27;s about predictability of performance. It&#x27;s about tuning the VM and the characteristics of STW GC pauses (if any). </i><p>Exactly right. The Dart VM was always intended for client-side applications, so it&#x27;s designed around low latency performance.')