Item(by='crowhack', descendants=None, kids=[25799005, 25798996], score=None, time=1610759467, title=None, item_type='comment', url=None, parent=25798606, text='&quot;I have to carefully make sure that each resource has been freed&#x2F;closed (but not too soon!)&quot;<p>You can use defer keyword to free right after allocating and it won&#x27;t be called until the function&#x2F;program completes. You can use debug or testing allocators to ensure no memory is left unfree&#x27;d or double free&#x27;d. The std lib has a large selection of custom allocators that you can use depending on your needs. One great one is an &quot;Arena Allocator&quot; which is just a linked-list of allocations that can be free&#x27;d at one time, versus tracking all these individual allocations. And if none of these allocators fit your needs, the interface to define one is pretty easy to implement.\n<a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Choosing-an-Allocator" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Choosing-an-Allocat...</a><p>&quot;I&#x27;m not mutating or holding onto anything I&#x27;m not meant to&quot;<p>Not really sure Zig can help you with this one. With great power comes great responsibility, or something like that.<p>&quot;that I&#x27;ve accounted for every exception that I can result from a given call&quot;<p>Zig does not have exceptions, but it does have error types which functions can return. From the function definition you usually can determine all the errors that can possibly be returned, unless the function definer use&#x27;d the catch all ! error type. Regardless, it is still much better than regular exceptions because<p>- you know by the function def that an error could be thrown, the compiler forces the caller to account for a possible error by &quot;unwrapping&quot; the return value<p>- an error happening just passes back a different type to the caller and in combination with the above, you can never &quot;miss&quot; an error  \n<a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Errors" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#Errors</a><p>Also Zig switch statements without an else ensure you handle every possible value so if you forget to handle one possible error (based on the type), it will throw a compile error.  \n<a href="https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#toc-Exhaustive-Switching" rel="nofollow">https:&#x2F;&#x2F;ziglang.org&#x2F;documentation&#x2F;0.7.1&#x2F;#toc-Exhaustive-Swit...</a>')