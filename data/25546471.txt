Item(by='hnlmorg', descendants=None, kids=[25546896], score=None, time=1609016885, title=None, item_type='comment', url=None, parent=25545139, text='&gt; <i>&quot;A microkernel would be a good fit for such constrainted environments.&quot;</i><p>As the GP said, micro kernels have a performance overhead swapping data between rings. That overhead would bite hard on something running a NEC VR4300 clocked at 93.75 MHz.<p>A monolithic kernel <i>is</i> the way to go. Just not Linux specifically.<p>&gt; <i>My argument is that the linux kernel (even if you strip everything out and create the most tiny linux kernel) is still too big for many constrained environments</i><p>That was the OP&#x27;s point. Yours was that a micro kernel would be a better fit. It would not.<p>&gt; <i>a old router with 512 KiB memory (there are many devices that cannot run linux)</i><p>Those devices wouldn&#x27;t be running code written to programmable chipsets. They wouldn&#x27;t be running an operating system in the conventional sense. Much like laumars point about how games are written for the N64.<p>Also nobody is suggesting Linux runs everywhere. We are just pointing out that you massively misunderstand how micro kernels work (and embedded programming too by the sounds of your last post).<p>By the way, you wouldn&#x27;t find any routers running a meger 512KB of RAM. That wouldn&#x27;t be enough for multiple devices connected via IPv4, never mind IPv6 and a wireless AP too. Then you have firewall UI (typically served via HTTP), a DHCP &amp; DNS resolver (both of which are usually served by dnsmasq on consumer devices) and likely other stuff I&#x27;ve forgotten about off hand -- I have some experience building and hacking routers :)<p>&gt; <i>However, it is possible to run a small microkernel on such a router, that&#x27;s my point, nothing more nothing less, that&#x27;s why I consider using microkernel a good fit.</i><p>Most consumer routers actually run either Linux or some flavour of BSD. All of which are also monolithic kernel designs. Some enterprise gear will have their own firmware and from what I&#x27;ve seen from some vendors like old Cisco hardware, those have been monoliths too.<p>I know micro kernel has the word &quot;micro&quot; in it and the design requires loading the bare minimum into the kernel address space of the OS, but you&#x27;re missing the bigger picture of what a micro kernel actually is and why it is used:<p>The point of a micro kernel isn&#x27;t that it consumers less memory. It&#x27;s that it separates out as much functionality from the kernel as it can and pushes that to user space. The advantages that brings is greater security with things like drivers (not an issue with the N64) and greater crash protection (again, not really an issue with the N64). However that comes with a performance cost, code complexity and any corners you do cut to try to bring those costs down ultimately end up eroding any real world benefits you get from a micro kernel design.')