Item(by='Twisol', descendants=None, kids=[25554760, 25555355], score=None, time=1609105068, title=None, item_type='comment', url=None, parent=25553786, text='&gt; the resulting non-answer people come up with is: &quot;Depends on your use-case.&quot;<p>&gt; We are dealing with computers here: virtual idealized worlds ripe for systematic formalism.<p>I disagree with the premise. Generally, computers are the tool, not the product. The primary focus ought to be on the problem we&#x27;re solving, not on the particular tool we use to construct a solution.<p>You&#x27;re right: design patterns are couched completely in terms of the software domain. Just knowing a handful of design patterns doesn&#x27;t help you understand when or how to apply them. When you confuse the map for the territory, design patterns look like the tool, rather than a particular example of how the tool is used. No doubt, that&#x27;s problematic.<p>But I think you&#x27;re under a similar illusion: that the computer _is_ the problem to be solved.<p>The practice of software engineering sits at the nexus of (at least) two distinct domains: computer science and the problem domain, whatever it may be. Software architecture is  fundamentally about understanding the shape and structure of the problem domain, understanding the capabilities of your engineering tools, and creating an architecture where both domains support each other. Your overall system architecture should flex where the problem domain flexes, and may be rigid where the problem doman is rigid. (It really does &quot;depend on your use-case&quot;.)<p>This kind of architecture isn&#x27;t really about the computer. It&#x27;s about the human developers and maintainers who have to inhabit this space for years, possibly decades. You have to think about the human factors, and understand (as best as possible) the problem domain you&#x27;ll be working with. (And you have to be willing to tear it down once, finally, the problem has evolved sufficiently away from expectations.)<p>Architecture is just a disciplne of making your life suck less later. It&#x27;s not an easy discipline, and (clearly) not a well-understood one. But it&#x27;s also not formal in the same way computer science or mathematics can be.')