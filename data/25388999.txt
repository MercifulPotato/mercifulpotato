Item(by='s-combinator', descendants=None, kids=[25394582, 25390705], score=None, time=1607711725, title=None, item_type='comment', url=None, parent=25386606, text='Using a loop is not a sin, but it is often counterproductively over-prescriptive.  A loop says, &#x27;do these things in this order in a single thread&#x27;.  If the loop body is an effect-free function, then the order doesn&#x27;t matter, why not use a map to let the compiler or run-time decide how many cores&#x2F;containers&#x2F;botnets to throw at the problem?  Similarly, if the loop combines the results of its iterations in a unital and associative way, why not use a fold&#x2F;reduce in order to get as much parallelism as possible for free?  Sure, your compiler could try to do some fancy static analysis to try to figure out whether the loop you&#x27;ve written is equivalent to a more efficient program, and if so, replace it for you, but that&#x27;s a lot of work for the compiler writer and inherently limited: we&#x27;re a long way away from compilers being able to guess properties of programs and synthesize proofs for them.  Sometimes avoiding loops is both conceptually clearer and practically more efficient.')