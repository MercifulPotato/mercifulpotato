Item(by='Evan-Purkhiser', descendants=None, kids=None, score=None, time=1610666901, title=None, item_type='comment', url=None, parent=25783152, text='Software for live-streaming DJs to show IDs of the tracks they&#x27;re playing, in real time, directly off of their Pioneer DJ gear!<p><a href="https:&#x2F;&#x2F;prolink.tools" rel="nofollow">https:&#x2F;&#x2F;prolink.tools</a><p>Since night clubs and festivals are a no go there&#x27;s a lot more live streaming going on by DJs. I&#x27;m always on the look out for great music, and it&#x27;s always a struggle when a DJ misses your ID request in the chat. Or of-course, when you&#x27;re the one DJing and you just don&#x27;t have time to type it out :)<p>source: <a href="https:&#x2F;&#x2F;github.com&#x2F;evanpurkhiser&#x2F;prolink-tools" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;evanpurkhiser&#x2F;prolink-tools</a>\nexample overlay: <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4rvdzTYK29E" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4rvdzTYK29E</a><p>Technically the software covers a _lot_ of the stack<p>* Reverse engineered Pioneer DJ gear&#x27;s proprietary low-level network protocol to masquerade as one and receive state updates from the physical DJ gear on the network. The implementation is a typescript library [0].<p>* Implements a NFS client in typescript to download the music metadata database off of the USB drives DJs plug into the DJ gear.<p>* Uses kaitai-struct [01 to generate parsing code for the (very old) DeviceSQL database files that the music database use.<p>* The application is built as an electron app, react + emotion (styled-components) + framer-motion (animated components), and mobx with serializr to handle IPC between the main thread and renderer.<p>* Uses websockets with the same serialization driver to communicate updates to the overlay browser window which is rendered in OBS (or another livestreaming studio software)<p>I&#x27;ve just started working on an API backend for it as well, where the same serialization backend is used to publish users app store to a central server which will be useful for features like &quot;Live user track voting&quot;, where you pick a playlist on your gear to expose to users, and they can vote on tracks.<p>[0]: <a href="https:&#x2F;&#x2F;github.com&#x2F;EvanPurkhiser&#x2F;prolink-connect" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;EvanPurkhiser&#x2F;prolink-connect</a>\n[1]: <a href="https:&#x2F;&#x2F;kaitai.io&#x2F;" rel="nofollow">https:&#x2F;&#x2F;kaitai.io&#x2F;</a>')