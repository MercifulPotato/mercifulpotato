Item(by='cle', descendants=None, kids=[25223860, 25224327], score=None, time=1606424930, title=None, item_type='comment', url=None, parent=25221993, text='I think it’s important to be more specific here. You can always mess up and pass the wrong thing, the type system can never know what is semantically correct, no matter how strict your types are. They’re about ergonomically reducing the space of valid programs.<p>There are a lot of interesting tradeoffs to be made there.  Over strict specification (whether parsing or type checking), specifically checking for invariants that aren’t actually useful, can make code and systems brittle and hard to change, just like under specifying them.  The specifications can also be different depending on what you’re doing with the data.<p>Also as the expressiveness of types increases, the space of possible ways to constrain your program space goes up, along with the complexity of the transformations of that space, making it difficult to understand what the valid program space actually is, hard to understand when you’ve accidentally excluded perfectly valid programs, etc.<p>So yes, fundamentally there are always types and underlying structure to useful data, but saying that it has “a” type is dramatically over-simplifying things.')