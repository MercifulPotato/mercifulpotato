Item(by='valand', descendants=None, kids=[25973989], score=None, time=1612039864, title=None, item_type='comment', url=None, parent=25972226, text='In the in-storage form (database), the mappings is synchronized at all times.<p>Many-to-many relationships in the purest form is described as records of ItemAId&#x2F;ItemBId pairs. `List&lt;{ account: Account, customer: Customer}&gt;`. There isn&#x27;t any cyclical relationship in this form.<p>From `List&lt;{ account: Account, customer: Customer}&gt;` one can derive `Map&lt;Customer, Set&lt;Account&gt;&gt;` and `Map&lt;Account, Set&lt;Customer&gt;&gt;`. Bank can have copy of both mappings and use them as double index, synchronizing both mappings as operations goes by, while at the same synchronizing both mappings to the in-storage form. Or not!<p>We&#x27;re talking mostly about data-modelling in a programming language, which applies to the in-memory form. `Customer { accounts: Set&lt;Account&gt; }` and A\n`Account { customers: Set&lt;Customer&gt; }` is its in-memory form, a layer of indirection from its actual form, the in-storage `List&lt;{ account: Account, customer: Customer}&gt;`.<p>If informations of Accounts, Customers, and the many-to-many relationship of both are laid flat in its purest, source-of-truth form, the in-storage database entries, why are people suggesting that there is&#x2F;should be a cyclical relationship in its representative form, the in-memory objects?')