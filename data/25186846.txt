Item(by='Jugurtha', descendants=None, kids=[25188696, 25187314], score=None, time=1606140256, title=None, item_type='comment', url=None, parent=25186708, text='Not that I could see at this point. It is not a panacea, but for us, it was a way to <i>contain</i> scope at different levels.<p>For exaple, we have the platform and it has icons on the sidebar for Notebook, Object Storage, etc.<p>Every single one of these is a separate application and a separate repository. These applications are independent in how they deal with business logic, so there&#x27;s no loss of expressiveness. They just must present certain &quot;receptors&quot; or interface if they want to be plugged into the system. The &quot;interface&quot; is a big word, and someone can produce a valid minimal plugin (that does nothing except be loaded) in two minutes.<p>This allows us to contain details of a plugin to the plugin itself, and not having it leak to other parts of the product. If we want to activate&#x2F;de-activate the plugin, it takes less than 10 seconds manually.<p>Now, sometimes a plugin depends on another plugin. But they make their requests to that plugin, and fall-back to something else in case that plugin is unavailable.<p>The amount of engineering time this has saved us is delightful. I think of all the code we did not have to write and it makes me smile.<p>That&#x27;s for containment and encapsulation at the application level. But we also follow that mode at the functionality level, too. For example, model detection and tracking is done by plugins.<p>We like to do things and have an abstraction so that we can churn out functionality for similar things &quot;industrially&quot;, without thinking too much, but also so we could <i>remove</i> things easily without breaking the rest. Making code not just easy to add, but easy to <i>remove</i> is important. When we did that, we were able to remove a lot of code, too.<p>It is a spectrum, and we started by using it to contain at the &quot;app&quot; level.')