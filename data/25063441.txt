Item(by='sargun', descendants=None, kids=[25063762], score=None, time=1605131365, title=None, item_type='comment', url=None, parent=25058725, text='I added integration for Zipkin in via Opencensus some time ago into a project I work on. This has been running in production for a while now:\n<a href="https:&#x2F;&#x2F;github.com&#x2F;Netflix&#x2F;titus-executor&#x2F;tree&#x2F;master&#x2F;vpc&#x2F;service&#x2F;db&#x2F;wrapper" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;Netflix&#x2F;titus-executor&#x2F;tree&#x2F;master&#x2F;vpc&#x2F;se...</a><p>You need to:<p>1. Have an Opencensus tracing context<p>2. Have query logging setup on your PG server. There are a bunch of ways to do this with minimal overhead. You can log slow queries (say queries &gt;5ms), or log queries that fail, or sample queries.<p>Your query &#x2F; log ends up getting something like:<p><pre><code>  2020-11-11 21:00:00 UTC:titusvpcservice@titusvpcservice:    \n  [60294]:HINT: The transaction might succeed if retried.\n  2020-11-11 21:00:00 UTC:titusvpcservice@titusvpcservice: \n  [60294]:STATEMENT: &#x2F;* md: {&quot;spanID&quot;:&quot;34c1a9f38fb44cad&quot;} *&#x2F;\n  INSERT INTO assignments(branch_eni_association, assignment_id) VALUES ($1, $2) RETURNING id\n</code></pre>\nYou can then look at a Zipkin, and use the value within MD (spanID) to get the trace. I did this originally, because I wanted to transparently wrap the PG SQL Driver for Zipkin. Postgres can be oblivious to the fact there&#x27;s &quot;Zipkin Inside&quot;, because it&#x27;s a terminal node. You can get the span ID from the BEGIN TRANSACTION &#x2F; first query, and then tie that to the pid and timestamp, and then use that to go back and look through things with standard(ish) postgres introspection, since almost all of it has the pg_backend_pid + timestamp in it.')