Item(by='soraminazuki', descendants=None, kids=[25763211], score=None, time=1610551433, title=None, item_type='comment', url=None, parent=25761741, text='&gt; I don&#x27;t quite understand how these work if a python project depends on separate versions?<p>For Python packages in the offical Nix repository, the packages AFAIK isn&#x27;t auto-generated. In this case, Nix devs split out the common part of the package definition to resemble the following pseudocode:<p><pre><code>    def commonDefinition(version):\n        return {\n            &#x27;src&#x27;: &#x27;http:&#x2F;&#x2F;...&#x27;,\n            &#x27;sha256&#x27;: &#x27;000...&#x27;,\n            ...\n        }\n\n    packageV1 = commonDefintion(1)\n    packageV2 = commonDefinition(2)\n</code></pre>\n&gt; For the nodejs part I&#x27;m more curious. ... But how would security patches be applied across versions?<p>I guess this was a bad example, as I incorrectly assumed it was patching dependencies when it wasn&#x27;t. But you can though, by matching package names. The Nix language is powerful enough to do this.<p>&gt; thus each Go application is self-contained<p>I wasn&#x27;t aware of the go situation, but this does seem to be the case. However, this looks incidental rather than it being a hard requirement. Many tools provide mechanisms to centrally maintain patches, which would work whether or not vendoring is enabled.')