Item(by='oieoeireoes', descendants=None, kids=None, score=None, time=1603664433, title=None, item_type='comment', url=None, parent=24867643, text='It always bothers me when otherwise well-meaning educational materials are untested and completely miss major points they seem to be making.<p>Case in point, where it explains how to teach make to compile C files into object files, and then provides a rule to compile all files _from source_ rather than from object files.<p><pre><code>    # Tell make how to compile your *.c files into *.o files \n    %.o: %.c\n        gcc -c -o $@ $&lt; $(CFLAGS)\n\n    # Finally, tell make how to build the whole project\n    final_binary.elf: $(SRCS)\n        gcc $(INCLUDE) $(CFLAGS) $(LFLAGS) $^ -o $@\n</code></pre>\nThis compiles the final binary from the sources, not using the object files and the rule above it.<p>(And clearly the leading example was never tested as it also missed the closing parentheses after &quot;$(CFLAGS&quot;!)<p>Anyway to take advantage of the c-&gt;object rule, the sources of last line should be changed to use files like this:<p><pre><code>    # Finally, tell make how to build the whole project\n    final_binary.elf: $(SRCS:.c=.o)\n        gcc $(INCLUDE) $(LFLAGS) $^ -o $@\n</code></pre>\nTo be pedantic, the above will recompile faster but will not necessarily be correct when header files change, so with that change it would be good to integrate automatic dependency generation [1] as well (for the object files).<p>[1]: <a href="https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;make&#x2F;manual&#x2F;html_node&#x2F;Automatic-Prerequisites.html" rel="nofollow">https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;make&#x2F;manual&#x2F;html_node&#x2F;Automatic...</a>')