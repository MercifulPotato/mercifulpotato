Item(by='ben509', descendants=None, kids=None, score=None, time=1601552217, title=None, item_type='comment', url=None, parent=24648524, text='This is the strongest argument against claiming &quot;using&quot; or Python&#x27;s context managers are RAII.<p>RAII naturally composes because a container has to clean up its memory, and it has a well defined lifetime.<p>Python has a very straightforward model for its context managers, two magic methods:<p><pre><code>    def __enter__(self):\n        ...\n\n    def __exit__(self, etype, eval, tb):\n        ...\n</code></pre>\nTo handle many resources being released, the stdlib prefers a more direct approach using a special class:<p><pre><code>    with ExitStack() as stack:\n        files = [stack.enter_context(open(fname)) for fname in filenames]\n</code></pre>\nAnd it makes sense. You probably don&#x27;t want regular containers to have yet another magic method defined on them, and there is no clear single behavior the a container&#x27;s __enter__ and __exit__ method could have.<p>And it doesn&#x27;t compose in other ways. In async code, for instance, there&#x27;s a completely separate mechanism with `async with` that calls __aenter__ and __aexit__.<p>It really comes down to the fact that when objects have an ambiguous lifetime, which is a consequence of garbage collection, you can&#x27;t have RAII.')