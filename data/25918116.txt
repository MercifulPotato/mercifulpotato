Item(by='throwaway894345', descendants=None, kids=[25919544, 25918212, 25918481], score=None, time=1611680119, title=None, item_type='comment', url=None, parent=25917297, text='I generally agree.<p>I&#x27;ll add a couple more frustrating limitations to Python&#x27;s typing:<p>1. You can define a function type somewhat clumsily (`Callable[[Arg1T, Arg2T], ReturnT]`), but if your callback uses keyword arguments (pervasive among Python programs), you&#x27;re out of luck.<p>2. You can&#x27;t define recursive types like JSON. E.g., `JSON = TypeVar(&quot;JSON&quot;, Union[str, int, None, bool, List[JSON], Dict[str, JSON]])`.<p>3. Getting mypy to accept third party definitions sometimes works perfectly and other times it doesn&#x27;t work at all. You get a link to some troubleshooting tips that have never actually worked for me.<p>Beyond that, it&#x27;s just the general usability issues that ultimately derive from Python&#x27;s election to shoehorn a lot of typing functionality into minimal syntax changes (as opposed to TypeScript which can make whichever syntax changes it likes because it isn&#x27;t trying to be valid JavaScript).<p>I think the idea was that they didn&#x27;t want to introduce build system complexity by way of a compiler, which is an easy choice to criticize in hindsight but I might&#x27;ve made the same call. I haven&#x27;t used TypeScript in vain so I can&#x27;t say for certain, but the TypeScript grass certainly looks pretty green from the Python side. Moreover, on the Python side we aren&#x27;t even absolved from build-time problems since we still have to fight tooth and nail to get Mypy to accept third party type annotations.<p>Mypy is a valiant effort, but like everything in the Python ecosystem, it&#x27;s a problem made difficult by an accumulated legacy of unfortunate decisions and there just isn&#x27;t enough investment to move it forward. I&#x27;ve since moved onto Go for everything I used to use Python for, and I haven&#x27;t honestly looked back--Go solves all of my biggest Python pain points: performance, tooling [especially package management], and dealing with the low-quality code that you tend to get when your colleagues don&#x27;t have a type system keeping you on the rails <i>and</i> Go doesn&#x27;t impose many pain points of its own (generics, but at a certain point in your career you realize that &quot;good code&quot; is not &quot;maximally abstract code&quot; nor &quot;maximally DRY code&quot;, and the actual valid use cases for generics are fewer and farther between). TypeScript piques my interest, but it seems a bit too complex and configurable and in particular I&#x27;m not looking forward to figuring out how to wire together a JavaScript build system. Maybe I&#x27;ll try Deno if I hear enough positive feedback about it, but for now it&#x27;s hard to beat `go build`. Rust seems cool but the borrow checker tax is too steep for my blood.')