Item(by='adamkl', descendants=None, kids=[25446993, 25439615], score=None, time=1608090067, title=None, item_type='comment', url=None, parent=25436951, text='There’s actually nothing server specific about GraphQL. The specification makes no mention of transport layer, it’s simply a type system + query executor.<p>You can pretty easily (if you have experience with the GraphQL reference implementation in JavaScript) create a GraphQL layer that sits inside of the browser, with a schema created by the UI team, that executes calls to REST APIs to resolve the data.<p>You could think of it as an “ORM” for the browser, which seems cool, but I wouldn’t necessarily recommend this approach (though I have done it in the past) for two reasons:<p>1. The “graphql” library isn’t really optimized for size so it can add a bunch of overhead to your JavaScript bundles<p>2. One of the benefits of GraphQL is to combine multiple requests for related data into a single query to be sent from the browser. Yes, that makes the life of the backend developer harder as they try to optimize for performance, but it makes for less data&#x2F;fewer requests over the wire to the client. If you stick GraphQL in the browser, you’ve now just moved your N+1 query across the internet.<p>If you really want to go down that road, Apollo offers a “plugin” to their GraphQL client that allows you to call multiple REST endpoints as if they were a single GraphQL endpoint (without embedding the actual “graphql” library in the browser): <a href="https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;link&#x2F;links&#x2F;rest&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.apollographql.com&#x2F;docs&#x2F;link&#x2F;links&#x2F;rest&#x2F;</a><p>A better approach for what you’re looking for would be to schema stitching (which allows you to combine multiple GraphQL endpoints together and treat them as one. You can even combine that with your own schema definitions to mix in whatever backend sources you want; e.g. your vendor + FedEx REST APIs): <a href="https:&#x2F;&#x2F;www.graphql-tools.com&#x2F;docs&#x2F;stitch-combining-schemas" rel="nofollow">https:&#x2F;&#x2F;www.graphql-tools.com&#x2F;docs&#x2F;stitch-combining-schemas</a><p>Or if you don’t want to do the work yourself, check out OneGraph, which uses schema-stitching to do exactly what you describe. It’s pretty cool: <a href="https:&#x2F;&#x2F;www.onegraph.com&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.onegraph.com&#x2F;</a>')