Item(by='venfen', descendants=None, kids=None, score=None, time=1604249235, title=None, item_type='comment', url=None, parent=24956156, text='In my job I do a lot of code reviews and I notice that by using Typescript, devs tend to write worse JavaScript code. I often see that developers are assigning `undefined` to properties in order to clean value or to satisfy badly written TS interface, instead of just using JS `delete` statement. Also a lot of times I see passing `undefined` to methods with optional params, instead of just skipping them. Here some bad practices:<p>If there is an interface: `interface ISomething { x?: string };` and obj of this interface to have `obj.x = undefined` instead of `delete obj.x`.<p>Writing methods: `function x(param0, param1?, param2?) {}` to be used as `x(1, undefined, &#x27;2&#x27;);` instead of creating the func as `function x(param0, option: { param1?, param2? })` and using as `x(1, { param2: &#x27;2&#x27; })`.<p>Returning undefined from a function: `function x(): undefined { return undefined; }`, instead of `function x(): void { return; }`.<p>Mixing the meanings of `undefined` and `null`, can bring a lot of troubles for JS devs when they use `Object.keys` or using `arguments` in function. IMHO If we keep that `undefined` means missing while `null` means no value, then we will have better JS code, using: `&#x27;x&#x27; in obj` instead of `obj.x === undefined` or `typeof obj.x === &#x27;undefined&#x27;`, `delete  obj.x` instead of `obj.x = undefined`, `obj.x = null` and then `obj.x === null` instead of `obj.x == null`.')