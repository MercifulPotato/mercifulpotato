Item(by='aidenn0', descendants=None, kids=None, score=None, time=1605917228, title=None, item_type='comment', url=None, parent=25159704, text='The author seems to believe that the RISC&#x2F;CISC distinction is still important while presenting evidence that demonstrates the opposite.<p>The author presents a reasonably non-controversial RISC list<p>1. Fixed size<p>2. Instructions designed to use specific parts of CPU in a predictable manner for facilitate pipelining.<p>3. Load&#x2F;Store architecture. Most instructions operate on registers. Loading and storing to memory is generally done with specific instructions only for that purpose.<p>4. Lots of registers to avoid frequent memory access.<p>Very few chips since the late 90s have fulfilled all of these.  32-bit ARM never had 4, modern ARM doesn&#x27;t have #2.  An ARM Thumb2 chip that supports division only has #3.<p>When RISC came out, it really meant fewer, simpler instructions (CPUs had been adding instructions almost as fast as transistors got cheaper).  This implies #1 and #3, and #3 requires #4 for performance.  #2 got included primarily because CPU speeds had hit the point where pipelining yielded big performance gains, and #1 and #3 meant it was easier to implement in RISC first.')