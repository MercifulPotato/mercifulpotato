Item(by='jlgaddis', descendants=None, kids=None, score=None, time=1608768687, title=None, item_type='comment', url=None, parent=25523663, text='X.509 certificates issued by your private PKI would do the trick.<p>You&#x27;d have to implement a registration &#x2F; enrollment process during which you&#x27;d handle the setup but that&#x27;d be a one-time thing (plus a &quot;renewal&quot; process every few years or so).<p>Although it isn&#x27;t necessarily the most &quot;user-friendly&quot;, pretty much every HTTP(S) client and server in existence supports using certificates to authenticate clients.<p>As a security nerd, this is what I think I&#x27;d prefer, however...<p>--<p>An alternative that&#x27;s probably more popular and &quot;user-friendly&quot; -- and more likely to be recommended (especially here on HN) -- would be to allow users to generate and manage API keys tied to their accounts.<p>You could then either 1) require <i>everyone</i> to authenticate to the back-end services using their API keys (even &quot;free&quot; users) or 2) make authentication optional but implement strict rate-limiting and&#x2F;or quotas for unauthenticated requests.<p>--<p><i>EDIT:</i> There are two other similar &#x2F; closely related methods that I forgot to mention which are quite easy to deal with (both client-side and server-side) and supported practically everywhere (as, if memory serves, they&#x27;ve been around since HTTP 1.0 and 1.1, respectively!): HTTP Basic Authentication and HTTP Digest Authentication. The latter is basically the former with MD5 hashing added, although neither are particularly &quot;secure&quot; nowadays compared to the alternatives. This is much less of a concern if all requests and responses are being carried over a TLS-encrypted session, however.')