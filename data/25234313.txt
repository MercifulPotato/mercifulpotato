Item(by='bArray', descendants=None, kids=[25242548], score=None, time=1606527096, title=None, item_type='comment', url=None, parent=25233356, text='&gt; whatever string you use to represent the null value EG<p>&gt; &quot;null&quot; is now a keyword that needs to be enforced.<p>So in the JSON itself, you literally remove the field. In another comment I make is the point that NULL itself could be considered a proper value, you&#x27;re just pushing the problem down the line. The library making such a decision for you is what may ultimately trip you up.<p>Instead, you could have something like:<p><pre><code>    string name = jobj.get(&quot;name&quot;, NULL)\n</code></pre>\nSo that it does return NULL in this case if a name hasn&#x27;t been given.<p>But consider an example where you&#x27;re loading some code into a VM&#x27;s RAM:<p><pre><code>    int location = toint(jobj.get(&quot;address&quot;))\n</code></pre>\nNULL in this case is a perfectly valid place to load a program in a VM, or was it that there was an error? Or is it that no address was given in the JSON configuration?<p>Instead, we can specify our own &quot;NULL&quot; value:<p><pre><code>    int location = toint(jobj.get(&quot;address&quot;, &quot;-1&quot;))\n</code></pre>\nSo now you&#x27;re asking to load something before the first position of the VM memory, which indicates an error.')