Item(by='simias', descendants=None, kids=None, score=None, time=1604519782, title=None, item_type='comment', url=None, parent=24991848, text='I think for people used to garbage collection, going to a non-gc ecosystem seems to be a big jump, akin to switching from an imperative to a functional language or from a dynamic to a statically typed language.<p>Articles like this one make me think that maybe the Rust community should develop more resources to help people make this jump because the language is more likely to attract people with this background than other non-GC languages that are typically seen as lower level and relegated to high performance applications.<p>I&#x27;m very anti-GC myself: I think the pros don&#x27;t outweigh the cons in the overwhelming majority of the cases, they hide a complexity that you&#x27;ll have to deal with eventually if you ever need to optimize your memory consumption and they encourage sloppy coding by not forcing you to think about ownership relations in your program&#x27;s data.<p>Having this debate over the years (often here on HN) I notice that the GC-fans tend to fall in two groups: those who really understand the tradeoffs and, unlike me, really think that GCs are worth it and those who simply have never really used languages with manual memory management - or not for very long - and seem to base their dislike of them on a lack of comprehension, cargo culting and associating it with C-style memory management where tracking memory allocations and frees adds a true cognitive overhead (unlike languages like C++ or Rust where usually RAII will take care of it 99% of the time).<p>I realize that I&#x27;m building a strawman here, but when I see the way the author talks about memory management (and how much they hate it) I can&#x27;t help thinking that they&#x27;re Doing It Wrong:<p>&gt;I was actually surprised at how little the actual memory management bothered me. I&#x27;m a big believer in garbage collection, and not having to think about memory, so I expected to hate this part of Rust, but it turns out it&#x27;s kinda OK. You put everything in a Box::new (regular heap memory) or RC::new (reference counted memory) or Arc::new (reference counted memory suitable to be used concurrently in different threads), and then when they go out of scope they&#x27;ll be cleaned up.<p>See, here&#x27;s the problem. You don&#x27;t like to think about memory management and ownership, so you think &quot;oh, I&#x27;m just going to put everything in a Box&#x2F;Rc&quot;. Spoiler alert: (A)Rc <i>is</i> garbage collection, it&#x27;s just a very simplistic one. You haven&#x27;t switched from GC to manual memory management, you&#x27;ve reimplemented a lousy GC in Rust and, unsurprisingly, it fails to compete with the good GCs of the languages you&#x27;re used to.<p>It&#x27;s like when I started using Python and I naively tried to do RAII with destructors, only to realize that it&#x27;s a very bad idea because you never know when the destructor is going to run in such a language.<p>I&#x27;m currently implementing a rather asynchronous multicast Rust applications where I have 3 threads processing messages and passing them around to deal with retransmits, packet reconstruction etc... I have one(1) Arc, zero Rc and one(1) Box in the entire codebase (and I intend to get rid of this Box soon).')