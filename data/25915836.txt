Item(by='vkwallace', descendants=None, kids=None, score=None, time=1611669914, title=None, item_type='comment', url=None, parent=25910496, text='Very nice writeup, I hope autotools will continue the good work. It is still the best build system.<p>- If you ship a trimmed down version of .&#x2F;configure, it will run quite fast. Many people copy&amp;paste configure.ac from other projects and do not delete unnecessary tests.<p>- It is easy for users of other systems to add portability patches. With .&#x2F;configure you can do anything, not so with meson or cmake.<p>- .&#x2F;configure&#x27;s command line syntax is still the most elegant compared to the enterprise syntax of cmake and meson. --prefix=&#x2F;home&#x2F;foo&#x2F;bar vs. -DCMAKE_INSTALL_PREFIX=&#x2F;home&#x2F;foo&#x2F;bar. Specifying CFLAGS in cmake is painful.<p>- Unlike cmake or meson, autotools do not dictate a rigid source tree structure.<p>- You can easily build both shared and static libraries, which the &quot;modern&quot; build systems do not support.<p>- Cross compiling on Linux with autotools&#x2F;gcc is heaven compared to cmake&#x2F;clang. You just need the host triplet and you are done.<p>- The build output is exactly what I want to see. cmake and meson&#x2F;ninja hide the output by default. If you enable it using yet another arcane option, the output is more chaotic and unreadable than in most autotools projects.<p>In general I find autotools projects like gcc easier to compile. The flags are more intuitive, the output is organized and readable. Compare that to cmake projects like llvm, which always seem to expand the option set to more than 100 unintuitive -DENABLE_ARCANE_FOOBAR_QUUX=&quot;a;b;...;z&quot; flags.<p>Autotools is very much appreciated. Thank you for another release, I am looking forward to future ones!')