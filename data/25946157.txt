Item(by='nicbou', descendants=None, kids=None, score=None, time=1611857609, title=None, item_type='comment', url=None, parent=25943119, text='&gt; Then you use an if statement to split at that point<p>This quickly falls apart as the difference between the classes grow. A view that turns a Facebook API call into Post-like Facebook objects has very little in common with a view that turns Twitter API call into Post-like Twitter objects. Doubly so if you factor other parts of the request like authentication, pagination and rate-limiting. You&#x27;ll need a bunch of if-else statements in a bunch of different places.<p>This gets even hairier when you need to test that code. It&#x27;s a lot easier to make sure a FacebookView calls the right endpoint and returns the right data, than to test every path of a combination of if-else blocks.<p>And what if you want to extend this code, but don&#x27;t have control of it (external module or different team)? It&#x27;s easy to extend parts of a class that do exactly one thing. It&#x27;s not easy to extend big if-else block without overwriting it.<p>I have seen the benefits of this approach first-hand. We got more reliable code and better test coverage with less effort, and greatly simplified maintenance and development.<p>&gt; I&#x27;m fairly certain a reasonable refactor is possible<p>To what benefit? There is already a nice construct for self-contained objects that offer a similar interface, that can be inherited from, and that can be unit-tested. Objects.')