Item(by='adkadskhj', descendants=None, kids=[25292143], score=None, time=1607016238, title=None, item_type='comment', url=None, parent=25291129, text='I&#x27;m getting <i>into</i> indie game development. I know next to nothing on game dev, but figured i&#x27;d still reply since this specific part interests me quite a bit.<p>&gt; How do you manage &#x2F; version assets? Git? Git LFS? ...?<p>Recently i started working and planning on a 2D game. However i wanted 3D assets, and so the process was very asset and pipeline heavy. As such i wanted my code to always match concrete versions of asset sources - blender&#x2F;etc - and so i searched around. Git LFS fit wonderfully, with one issue: It&#x27;s centralized.<p>Github&#x27;s Git LFS support is iffy. Their pricing is harsh (imo, for an indie dev) and i couldn&#x27;t find ways to prune history to save cost. Likewise the entire design of Git LFS requires a centralized server, something i didn&#x27;t understand.<p>So since i have a passion and existing projects in various Content Addressable Stores, i decided to attempt to make my own &quot;Git LFS&quot; with a more natural Git-like behavior. Eg syncs over SSH, not requiring servers, etc. I don&#x27;t want to link it here (anonymous account), but even if i did i wouldn&#x27;t advise anyone use it - it&#x27;s a toy project more than anything.<p>With that said i found the general workflow of Git LFS to be excellent for this purpose (minus the flaws i mentioned). Tracking binary assets worked wonderfully and allowed my code to always match explicit versions of the asset sources - making my pipeline feel very repeatable.<p>I am a single dev on the game project so i didn&#x27;t test the binary [un]locking features though - but i hear good things there.')