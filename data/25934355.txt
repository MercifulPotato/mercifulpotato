Item(by='gfalcao', descendants=None, kids=None, score=None, time=1611783579, title=None, item_type='comment', url=None, parent=25934350, text='Section from &quot;No Silver Bullet&quot;<p><i>Object-oriented programming.</i><p>Many students of the art hold out more hope for object-oriented\nprogramming than for any of the other technical fads of the day.<p>I am among them.<p>Mark Sherman of Dartmouth notes that we must be careful to distin-\nguish two separate ideas that go under that name: abstract data types\nand hierarchical types, also called classes.<p>The concept of the abstract data type is that an object&#x27;s type should\nbe defined by a name, a set of proper values, and a set of proper\noperations, rather than its storage structure, which should be hidden.<p>Examples are Ada packages (with private types) or Modula&#x27;s modules.<p>Hierarchical types, such as Simula-67&#x27;s classes, allow the definition\nof general interfaces that can be further refined by providing\nsubordinate types.<p>The two concepts are orthogonal â€” there may be hierarchies without\nhiding and hiding without hierarchies.<p>Both concepts represent real advances in the art of building software.<p>Each removes one more accidental difficulty from the process, allowing\nthe designer to express the essence of his design without having to\nexpress large amounts of syntactic material that add no new\ninformation content.<p>For both abstract types and hierarchical types, the result is to\nremove a higher-order sort of accidental difficulty and allow a\nhigher-order expression of design.<p>Nevertheless, such advances can do no more than to remove all the\naccidental difficulties from the expression of the design.<p>The complexity of the design itself is essential; and such attacks\nmake no change whatever in that.<p>An order-of-magnitude gain can be made by object-oriented programming\nonly if the unnecessary underbrush of type specification remaining\ntoday in our programming language is itself responsible for nine-\ntenths of the work involved in designing a program product.<p>I doubt it.')