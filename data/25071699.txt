Item(by='DougWebb', descendants=None, kids=[25071933], score=None, time=1605199839, title=None, item_type='comment', url=None, parent=25071202, text='The way to manage this without DI would be a static method someplace (Startup.cs or elsewhere) which creates the new MyService, stores it, and returns a reference. Then any controllers or pages that need the reference call the static method.<p>The method could return a MyService, or an IMyService if you want to be more flexible. It can always create a fresh object, manage and return a singleton object, or manage a pool of objects. For the new and pool cases, you can have another static method for &#x27;returning&#x27; the object when the controller&#x2F;page is done with it, so you can manage disposal or pool availability.<p>The biggest advantage I see to this approach is in debugging: there is a clear stack trace back to the source of the object, and also to its implementation if you&#x27;re not using an interface. With DI you often can&#x27;t tell where an object came from, and sometimes it takes some digging to even find out its exact type (unless you only have one implementation of each interface, which is often the case.)')