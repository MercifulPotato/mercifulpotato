Item(by='midrus', descendants=None, kids=None, score=None, time=1610521561, title=None, item_type='comment', url=None, parent=25757314, text='The &quot;defacto&quot; today is to use React on top of a nodejs&#x2F;Elixir&#x2F;Go backend in a monorepo deployed across microservices in a custom kubernetes infrastructure.<p>Hope you read enough of this comment to avoid going this way, and prevent your team from going with this &quot;defacto&quot; way of doing things.<p>The above stack, which is what many companies are doing, is a total mistake in my opinion. It creates a LOT of work which is not related to your business.<p>It also involves a TON of discussions about how to do things, what state management library you will use, what router library, what ORM (oh wait, we favour no ORM in this language because ORMs are bad blah blah), what validation library you will use in the backend, what validation library on the frontend, a bunch of different testing frameworks (some for the backend code, some for the frontend code), a way to do CSS-IN-JS or similar, etc.<p>Moreover, those decisions are not something you can decide and be done with it. Those decisions come back every X months to bite your ass, because they get deprecated or their developers just moved to something else and just ignore you when problems arises (it&#x27;s ok, they&#x27;re not paid after all..). So you end up with some part of your system that now are unmaintained[1] [2]. In this world, things get quickly out of fashion, such as using classes for React components. Now despite they say in their docs it is perfectly fine to still use classes, this community is driven mostly by fashion, so nobody will want to use classes and a lot of time will be invested in rewriting perfectly working code into whatever the new trend is.<p>Then you have the equivalent crazyness at the infrastructure level. Teams of engineers playing with Kubernetes (because it is the React of the infra folks), which is a very low level tool, upon which they will build an TON of custom tooling and scripting and processes, etc,etc and cross your fingers so that they never leave your company because if they do, you&#x27;ll be in a very bad situation. If you&#x27;re lucky, you will end up with something which is about 25% of what you get from AppEngine, or any other similar service, except that an order of magnitude more expensive (because of the salaries of the people building this).<p>Let&#x27;s not talk about all the work required to coordinate different services, document APIs from Backends For Frontends (TM), gRPC for communication between services because, hey, REST is overkill and non-performant, GraphQL which is the current trend and might not be tomorrow, etc.<p>I&#x27;m not saying all of this is useless and wrong for every situation. Those tools are great and serve in the RIGHT context. If you&#x27;re a big company, with tons of employes, it is better to have to do more work if that allows you to split the work across people.<p>In a startup, or a small&#x2F;mid sized company, there is nothing that beats a full stack solution such as Ruby On Rails. The libraries are stable and maintained because they&#x27;re being used by a lot of companies. You have almost every decision already made for you, you might like it or not, but the set of decisions included in it are guaranteed to work well together. It is a lot more unlikely that some part of it will go unmaintained, you don&#x27;t need to build an API for a separate frontend, you will get frequent updates, you have clear patterns and recommendations for how to do things. Deploy this on Heroku until the price goes to the salary of one or two engineers. That&#x27;s a LOT. Would be more expensive to have somebody building a half assed version of it in-house. If it gets expensive, move to AppEngine or any similar, managed service. As long as you keep it using SQL and Docker you can move anywhere.<p>You might have more difficulty hiring people which, nowadays, want to work with Rails and do templates, etc. But the benefit is that you will need a lot less people for building an equivalent product. And probably you will find yourself with less people hyped by building kubernetes microservices on React with Monorepos and RXjs redux on top of Rust because &quot;that&#x27;s the defacto&quot; and &quot;ruby doesn&#x27;t scale&quot;.<p>Please, CTOs of the world, let&#x27;s get back to sanity. I just can&#x27;t stand anymore seeing the time we&#x27;re wasting with all of this.<p>Of course, at some point you will be a big company and then it might make more sense to do some of this. But think twice about all the trade offs until you get there.<p>Hope it helps.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;vercel&#x2F;styled-jsx&#x2F;issues&#x2F;688" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;vercel&#x2F;styled-jsx&#x2F;issues&#x2F;688</a>\n[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;ReactTraining&#x2F;history&#x2F;issues&#x2F;804" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ReactTraining&#x2F;history&#x2F;issues&#x2F;804</a>')