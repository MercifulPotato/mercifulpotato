Item(by='KronisLV', descendants=None, kids=None, score=None, time=1609932639, title=None, item_type='comment', url=None, parent=25654738, text='I really wanted to like Swing - despite it really being an overengineered mess, with some IDE GUI tools for creating UI layouts (a crutch that you might want to use, given how messy the code-first approach would be), it was actually a passable way of creating cross-platform GUI apps. Though you&#x27;d still need JDK, which was a drawback (and it wouldn&#x27;t look or feel native, but then again, at least it worked). JavaFX&#x2F;OpenJFX, despite its advantages, somehow feels worse integrated into the development workflow that some people like me used to have.<p>Never really got into GTK+ or Qt, or other tools that are more wieldy in the lower level languages, i&#x27;m afraid, though i&#x27;m sure that with enough time investment, bindings for other languages could be found and you could use them well enough.<p>Though the closest i&#x27;ve seen to &quot;easy&quot; cross-platform GUI development that actually respects the underlying platform (unlike Electron), but that also doesn&#x27;t make your hair go gray, was the way FreePascal + Lazarus handled it, by attempting to support multiple frameworks in a transparent manner, where possible ( <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lazarus_Component_Library" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lazarus_Component_Library</a> ). Now, normally something like that would fail, since abstractions are leaky, but it seems like a number of useful pieces of software was actually written that way ( <a href="https:&#x2F;&#x2F;wiki.freepascal.org&#x2F;Projects_using_Free_Pascal" rel="nofollow">https:&#x2F;&#x2F;wiki.freepascal.org&#x2F;Projects_using_Free_Pascal</a> ).<p>It&#x27;s just sad that the language is kind of dead nowadays, as is the idea of having up-to-date tooling around it, or even many tools for developing web APIs. :&#x2F;')