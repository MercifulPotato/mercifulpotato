Item(by='whizzter', descendants=None, kids=None, score=None, time=1603462302, title=None, item_type='comment', url=None, parent=24868785, text='(TL;DR; It&#x27;s just a different way of working with less manual code)<p>I never spent much time on webdev in the era where jQuery came into being but as I&#x27;ve understood (and from the jQuery code I&#x27;ve seen since) it solved basic issues in working with manipulating the DOM and gives powerful animation tools,etc. So as you say the upgrade over the browser API DOM manipulation is obvious, clear and direct.<p>I&#x27;d say that my background is mainly from games, where you usually setup your own data structures and then rendered them as it fit.<p>From time to time I&#x27;ve worked on custom tools on native platforms (win32&#x2F;GDI&#x2F;MFC, Java&#x2F;Swing,etc) and working with these is conceptually similar to using the DOM (manipulating objects like adding buttons, responding to events, reading data from input boxes on events,etc) and there is always relatively lot of work with shipping data in and out of the UI objects (either keep data synchronized between UI and internal model or reading data from the UI continually).<p>Compared to your game rendering code that usually just needs to iterate internal data this always felt like a lot of manual work to keep UI and internal data in sync.<p>Considering for example a 3D program where you can drag around an object with some arrows, while those arrows are dragged an input-box is updated with the new values and if you want to align the position you might edit the value manually in the input box and have the 3D view show the new position as you edit it. On top of these 2 sources of value changes you might have an animation system wanting that might change these values while animating (so that they are visible to the user), this kinda stuff is usually a buggy nightmare to maintain once you have it in a few many places.<p>This is why I like Vue and React (Angular.JS also had this to a degree even if it&#x27;s implementation was weaker than Vue), with both of them you only need to concern yourself with how your internal data works&#x2F;looks and operations are simple to do since they only operate on that internal data.<p>Then the Vue templates (or your React rendering functions) takes care of visualizing it with the associated automatic functionality to adjust the internal values if changed by the user.')