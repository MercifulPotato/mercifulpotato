Item(by='zaptheimpaler', descendants=None, kids=[24715225, 24715794, 24715296], score=None, time=1602124779, title=None, item_type='comment', url=None, parent=24710565, text='So overly complicated. The &quot;state of the art&quot; of FP now means heavy type systems and heavy machinery to deal with them. The 80&#x2F;20 pareto of FP is just pure functions + composing those functions and it works in any language. Here is all of it in python:<p><pre><code>    from __future__ import print_function\n    import json\n\n    struct = json.loads(open(&#x27;staff.json&#x27;,&#x27;r&#x27;).read())\n    staff = struct[&#x27;staff&#x27;]\n    salaries = struct[&#x27;salaries&#x27;]\n\n    def visit_pets(staff, cond, visit):\n        for person in staff:\n            for pet in person[&quot;pets&quot;]:\n                if (cond((person, pet))):\n                    visit((person, pet))\n\n    # Find all cats owned by any of our employees\n    visit_pets(staff, lambda t: t[1][&quot;type&quot;] == &quot;cat&quot;, lambda t: print(t[1]))\n\n    # Find each pet and their owner\n    visit_pets(staff, lambda t: True, lambda t: print(&quot;{} belongs to {}&quot;.format(t[1][&quot;name&quot;], t[0][&quot;name&quot;])))\n\n    # Give a $5 raise to anyone who owns a dog\n    dog_owners = set()\n    visit_pets(staff, lambda t: t[1][&quot;type&quot;] == &quot;dog&quot;, lambda t: dog_owners.add(t[0][&quot;id&quot;]))\n    for staff_id,salary in salaries.items():\n        if staff_id in dog_owners:\n            salaries[staff_id] += 5\n</code></pre>\nIn my view it gets you 80% of the power of optics in exchange for zero machinery and can be understood by almost anyone. For doing these kinds of ops on a deeper structure, using Scala&#x2F;Javascript or something with first-class support for HOFs, folds&#x2F;filters&#x2F;maps would work better.<p>I wish more people promoted this view of FP - just pure functions, higher order functions and referential transparency. It gives you the ability to reason locally and extend code well. The remaining type system and architecture astronomy buys very little in relation to what it costs.')