Item(by='bhauer', descendants=None, kids=[25802392, 25802728, 25798679, 25801195, 25798642], score=None, time=1610755346, title=None, item_type='comment', url=None, parent=25798148, text='As someone who is relatively outside of the JavaScript ecosystem, I had the following realization yesterday when I was reviewing this: JavaScript has what I would consider two distinct flavors of &quot;back-end&quot; frameworks.<p>It has frameworks like Express and Koa, which I would consider traditional back-end frameworks.  These are designed around handling HTTP requests and providing dynamic responses in myriad forms: rendered content as HTML, API responses as JSON or other forms, etc.<p>And then there are what I would call back-ported front-end frameworks, or semi-static site hosts.  These are Next.js and Nuxt.  As far as I can tell, these <i>can</i> be used to build traditional server-side application logic but they seem intended to host &quot;pages.&quot;  For example, in looking over Next, I see it <i>does</i> have the ability to expose API routes, but this seems very much a second-class citizen.  The Next documentation [1] says &quot;Next.js has support for API Routes, which let you easily create an API endpoint as a Node.js serverless function.&quot;  This seems to be provided as an escape hatch, but it doesn&#x27;t appear to be the core focus of the framework.<p>Is this distinction real or am I sadly misinformed of the, ahem, state of JavaScript?<p>[1] <a href="https:&#x2F;&#x2F;nextjs.org&#x2F;learn&#x2F;basics&#x2F;api-routes" rel="nofollow">https:&#x2F;&#x2F;nextjs.org&#x2F;learn&#x2F;basics&#x2F;api-routes</a>')