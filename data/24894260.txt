Item(by='monsieurbanana', descendants=None, kids=[24894750], score=None, time=1603704303, title=None, item_type='comment', url=None, parent=24894076, text='First rule of macros is: do not write macros. At least in clojure, it&#x27;s rare that I stumble upon macros in the wild. But when they&#x27;re needed (someone else wrote about core.async in this thread) they are very useful.<p>After one year of clojure, it&#x27;s annoying for me to read classic C-like languages. There&#x27;s also people who prefer reading code without syntax color, so clearly this is a subjective matter.<p>I find clojure tooling really good, and it&#x27;s hard to go back to a non-repl oriented workflow (this is not at all the same as something like python or javascript repl). But this is admittedly a gray area, there&#x27;s areas where it&#x27;s immature compared to other languages, and others where it shines because of it&#x27;s repl-oriented nature.<p>The lack of typing is certainly a sound argument, although my personal opinion is that for many use cases it isn&#x27;t required. This is going to be a contentious opinion, I&#x27;m sure.<p>Note that clojure has an advantage on this over other dynamic languages: idiomatic clojure code means that pretty much everything is pure data, in basic structures: maps and vectors. So the functions that you use to operate on your data are always the same. Over time you&#x27;ll learn them, and they won&#x27;t change between domains nearly as much as, say, if you were coding in OOP oriented python.')