Item(by='jlokier', descendants=None, kids=[24751261], score=None, time=1602474300, title=None, item_type='comment', url=None, parent=24748342, text='I always found the Microsoft &#x2F; Turbo C++ inline assembler syntax clunky, very limiting compared with the GCC version.<p>With the Microsoft syntax you were generally stuck with having to fix specific registers, and hope the surrounding code was ok working around the asm code and its unstated and excessive constraints.<p>Whereas with the GCC extended assembly syntax, you can tell the compiler that it has a choice of which registers to use, which memory locations are read from and written to, and many other options that the compiler is free to optimise with.<p>The GCC version is much better for optimisation.  It can even optimise away assembly instructions whose output is stored in a variable that happens to be unused by another part of the program, and select between code using registers or code using inline constants or direct memory operands, depending on expressions that are passed to functions.  It also works with &quot;new&quot; instructions that the compiler doesn&#x27;t know about but the assembler does, or even assembler macros and linker directives that the compiler doesn&#x27;t know about.  The Linux kernel has used all this flexibility to great effect since the beginning.')