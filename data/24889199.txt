Item(by='parksy', descendants=None, kids=None, score=None, time=1603654514, title=None, item_type='comment', url=None, parent=24887521, text='I haven&#x27;t enough experience to talk about any things I don&#x27;t like but my limited experience with it on a couple of small personal projects has been positive. All of this is subjective of course but these are my impressions:<p>- It&#x27;s fast - given I work with PHP for a living it&#x27;s no fair comparison really, transposing a processor-intensive algorithm into Go is like lifting a veil. In one instance I think Go ended up being ~100 times faster, and that was without splitting computation across multiple cores.<p>- Getting async multi-core concurrency feels smooth with golang, it&#x27;s not that much of a stretch to transfer concepts from my experiences with async JavaScript &#x2F; nodejs applications, only that it feels more natural dealing with flow control, race conditions, and shared resources in Go - JS tools have improved in recent years but being single threaded they only really approximate the experience of concurrency in Go and that can sometimes bite hard.<p>- It&#x27;s fairly intuitive to pick up and use. I used to be a big fan of C#&#x27;s syntax, and prior to working with PHP I learned development with C-style languages (including C&#x2F;C++) so anything with a similar syntax feels natural to me. Golang feels to me like JavaScript got in bed with C# and made a baby.<p>tl;dr: I&#x27;d definitely welcome the opportunity for some professional work using Go, and will certainly consider implementing some of my future projects with it to gain experience.')