Item(by='kmill', descendants=None, kids=None, score=None, time=1605989822, title=None, item_type='comment', url=None, parent=25171334, text='Sort of the official policy is that inside proofs (i.e., terms of types in Prop) constructibility doesn&#x27;t matter, but inside definitions (i.e., terms of types in Type 0 and above) try to be constructive.  For example, it is ok to define a function constructively but with a nonconstructive proof of termination.<p>LEM is used everywhere because it&#x27;s actually a theorem.  It follows from functional extentionality and the existence of quotient types. <a href="https:&#x2F;&#x2F;github.com&#x2F;leanprover&#x2F;lean&#x2F;blob&#x2F;master&#x2F;library&#x2F;init&#x2F;classical.lean#L69" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;leanprover&#x2F;lean&#x2F;blob&#x2F;master&#x2F;library&#x2F;init&#x2F;...</a><p>The axiom of choice is an actual axiom, and it too ends up being used everywhere, but mostly to introduce decidable instances to permit things like double negation elimination inside proofs.  An illustration: [1] introduces these instances to the file and [2] implicitly uses the instance.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;leanprover-community&#x2F;mathlib&#x2F;blob&#x2F;master&#x2F;src&#x2F;logic&#x2F;basic.lean#L22" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;leanprover-community&#x2F;mathlib&#x2F;blob&#x2F;master&#x2F;...</a>\n[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;leanprover-community&#x2F;mathlib&#x2F;blob&#x2F;master&#x2F;src&#x2F;logic&#x2F;basic.lean#L260" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;leanprover-community&#x2F;mathlib&#x2F;blob&#x2F;master&#x2F;...</a>')