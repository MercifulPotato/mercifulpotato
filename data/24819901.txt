Item(by='petr_tik', descendants=None, kids=[24821435], score=None, time=1603044872, title=None, item_type='comment', url=None, parent=24819726, text='<i></i> Security<p>First of all, the proliferation of header-only libraries that people vendor into their Cpp projects has the same attack surface. Additionally, there is less tooling to help you track vulnerabilities in Cpp dependencies and upgrade when fixes come out. If you do rely on external cpp deps, then you must have a code review process before those deps are whitelisted for use.<p>Now, you can extend this code review process to rust crates.<p>Run a security review of a crate after which that crate is pushed to an internal registry. Every external crate upgrade can go through the same security review process until which point developers will build with the old version present in the internal registry.<p>In the context of a large enough organisation, an increasing number of crates will become internal, thus solving the trust&#x2F;responsibility issues.<p>by no means, do i suggest that crates is unhackable. That&#x27;s why I want to raise awareness of <i>already existing</i> infrastructure and procedures to vet code before including in your systems.<p><i></i> Safety<p>Before we get to ownership and some thread-safety, how do you explain the fact that integer addition and number conversion are safe operations in Rust, which throw&#x2F;panic when they fail instead of the default Cpp behaviour, which _silently_ corrupts data?')