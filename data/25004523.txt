Item(by='rektide', descendants=None, kids=None, score=None, time=1604632422, title=None, item_type='comment', url=None, parent=25002523, text='Comments in this discussion are filled with similar sort of &#x27;it&#x27;s easy, just do it by hand&#x27; sort of advice.<p>Let&#x27;s Encrypt is an example of one thing that you can either get practically for free in Kubernetes, or which you can keep fiddling &amp; expanding your nginx configuration with, as you add domains &amp; subdomains. Keep hoping your cron jobs are running as they need to.<p>But it&#x27;s one example. And it&#x27;s an easy example.<p>If I want a postgres database, it&#x27;s pretty easy to set up postgres too. I can do it in under 30 minutes. But I should also set up read replicas. I should set up backups. Somehow I have to leave enough documentation so that the next time I need to operator on these systems, or if someone else does, they can follow my work &amp; understand what&#x27;s happening. I should probably set up monitoring on all these systems, so that if something goes wrong with a replica &amp; lag raises, or if backups don&#x27;t write, I get notified. I should add metrics so I can see problems as they are developing, increasing my ability to sleep soundly. There&#x27;s a fractal web of concerns around running &amp; operating software, and the classical path is to become ever more an expert on the niche. To keep diving in, trying to find your own way forward, pick your own stack of tools to help, and document document document test test test everything. Run some chaos engineering tests to make sure these systems you&#x27;ve strung together are going to not lose all the data if something some day does go wrong.<p>Kubernetes should be the default model for anyone who cares about themselves and&#x2F;or running software effectively. A off-the-shelf postgres operator will let me define a Postgres resource, with as many replicas as I please, and backup schedules as I like. One can install k3s on one node or a dozen nodes, install the helm chart for a postgres-operator, create a manifest for a postgres database, and apply it, in under an hour. Whether you want a tiny small one node postgres, or to run a many replica geo-distributed postgres system, this is a better way to do it, that will yield more predictable results, that more engineers will be able to recognize &amp; identify &amp; work with the pieces of, than what would take me a week of time to set up. Because it flips the model. Rather than bottom-up engineering the pieces of the system, Kubernetes empowers me to define a top-down set of things I desire, and it lets the automation work to fulfill those asks. It take the grunt work out, paves the cowpaths.<p>And Kubernetes does it consistently. After getting a backed up, monitored, replica&#x27;ed postgres going in an hour, I can use the same skillset, the same patterns, to deploy Redis. And the next service after that.<p>Even if you are single node, perhaps you might want to use SQS, or S3, or soon Lambdas; maybe as a part of some JAM Stack. Well, with Kubernetes, you can manage that under the same roof too, whether you run Amazon&#x27;s EKS, or your own Kubernetes at home, or any other Kubernetes. You can manage everything, consistently. <a href="https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;containers&#x2F;aws-controllers-for-kubernetes-ack&#x2F;" rel="nofollow">https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;containers&#x2F;aws-controllers-for-...</a><p>It&#x27;s a different operational paradigm, and I think almost all operators would have a better experience, learning &amp; benefiting from a top-down control system like Kubernetes. Using bottom-up engineering to deploy services seems appealing to a large amount of the seasoned engineers of today, it seems easier to them, but they don&#x27;t get how powerful it is having automation at your back, they don&#x27;t understand how much clearer operations are when all of your state is centralized &amp; something you can work on with consistent tooling, and they haven&#x27;t seen how much nicer it is when everything you have can be managed under one roof. They all think it&#x27;s easy, learning this service, learning that service, that the services are all simple. But lacking this top down system of control, lacking something consolidated &amp; centralized to mange everything, lacking the live-agents&#x2F;controllers that are tirelessly working to keep things running, it&#x27;s a huge loss. I hope future engineers can enjoy a much better constructed, much less piecemeal environment.')