Item(by='thu2111', descendants=None, kids=[25125835], score=None, time=1605630391, title=None, item_type='comment', url=None, parent=25123023, text='A bit of context may help.<p>The author of the blog post works for JetBrains (I think). JetBrains are interested in moving away from Swing for their product line. Their intended replacement is a port of JetPack Compose to the desktop, perhaps because it&#x27;s a Kotlin-centric framework and Kotlin is their baby, perhaps because Google is funding Compose and they hope that it&#x27;ll have more money invested in it than Swing&#x2F;JavaFX did.<p>Compose renders with the Skia graphics library. Hence, Skija and Skiko, bindings to Java and Kotlin respectively. And hence their Compose for Desktop effort.<p>The grandparent comment is questioning whether a mobile toolkit ported to desktop is really going to become competitive with Swing anytime soon, given that although Swing is admittedly by now a very old API, it&#x27;s been continuously developed for 20+ years and is thus by now one of the most battle tested and matured frameworks in the world.<p>Now you might ask, but aren&#x27;t Skia bindings useful in and of themselves? Well sure, maybe, but bear in mind Java has had a Skia equivalent for a very long time via Java2D as used in Swing, and JavaFX also has a Skia-type subsystem where you can issue drawing commands and they get hardware accelerated. So to understand the value of this new library you very much need to be able to do an in depth comparison of Skia vs Java2D vs the JavaFX Graphics subsystem. Very, very few people have the expertise to do this and the blog post doesn&#x27;t really try.<p>I&#x27;ve actually looked at this topic in the past few months for various obscure reasons. I&#x27;ll say that:<p>• Skia is the core of Chrome so it&#x27;s actively maintained, which is good. On the other hand so is Java 2D.<p>• Skia seems to have some support for playing animations exported by a visual animation builder called Lottie, which is nice. Java 2D doesn&#x27;t have that.<p>• You can partly embed Skia in a web page via WebAssembly, which I guess is neat. You can embed Java2D in a web page via stuff like TeaVM too though.<p>• There are no benchmarks comparing these libraries, as least not as far as I know.<p>• They are both hardware accelerated via OpenGL &#x2F; Direct3D. Skia also has experimental support for Vulkan.<p>• Skia is a C++ lib that therefore requires manual bindings to other languages. Java2D&#x2F;JFX are JVM APIs that can be automatically bound to a wide variety of languages, e.g. JavaScript, Python, Ruby, etc.<p>• Skia&#x27;s documentation is rubbish. Check out this excuse for a website: <a href="https:&#x2F;&#x2F;skia.org&#x2F;" rel="nofollow">https:&#x2F;&#x2F;skia.org&#x2F;</a> - a 2D graphics lib is a complex thing. Where are the docs? E.g. click on the main API objects and you get a handful of semi-random examples with one line of explanation for each.<p>Basically, Skia is a component of Chrome that happens to have its own website. There is some vague attempt to make it into a real, production quality API but when internal docs for Skia developers drastically outnumber API docs for users, you know what you&#x27;re dealing with. Java2D and JavaFX are designed to be APIs consumed by lots of developers, in a large variety of languages.')