Item(by='gallier2', descendants=None, kids=None, score=None, time=1606164094, title=None, item_type='comment', url=None, parent=25176531, text='Rarely used feature that I quite like is defining function types.<p><pre><code>   typedef bool foo_fn(int, char);\n</code></pre>\nThis declares a type of a function.<p><pre><code>   foo_fn  foo1, foo2, foo3, foo4;\n</code></pre>\nThis declares 4 functions of the same type. It&#x27;s equivalent to<p><pre><code>   bool foo1(int, char);\n   bool foo2(int, char);\n   bool foo3(int, char);\n   bool foo4(int, char);\n</code></pre>\nUnfortunately the type can not be used at function definition but that is not where function are interesting. They are neat for function pointers especially those that require casting.<p><pre><code>   void function_taking_foo(int, foo_fn *);\n\n   function_taking_foo(1, foo1);   &#x2F;&#x2F; no cast necessary as type is identical and even\n</code></pre>\ninstead of<p><pre><code>   function_taking_foo(1, (bool(*)(int,char))foo1);\n</code></pre>\nWhen you have a lot function pointers it is incredibly more readable than the usual syntax.')