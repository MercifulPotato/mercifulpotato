Item(by='lucb1e', descendants=None, kids=None, score=None, time=1606059154, title=None, item_type='comment', url=None, parent=25177469, text='To not have to go to DDG or WA manually, I wrote a script to convert stupid measurements on a page, but I can&#x27;t say it turned out very well.<p>In case someone wants to try it out or improve it, open a recipe website and run the code. Or uncomment the console.log() line at the bottom, comment out the document.x line, and run it from the command line (`js code.js`).<p><pre><code>    &#x2F;&#x2F; todo:\n    &#x2F;&#x2F;    - °F matches hex codes (&quot;abcd64fabcd&quot;)\n    &#x2F;&#x2F;    - fluid ounce?\n    &#x2F;&#x2F;    - &quot;([0-9]{2,5}) degrees&quot; especially when N &gt; 300\n    \n    var test = &#x27;Take 1&#x2F;4-1&#x2F;2 cup of water, 3 1&#x2F;2 c. marinara sauce, two ounces of potatoes and three to five tbsp gold.\\nOr perhaps 1&#x2F;8 oz. of gold.\\nBake at 350F or with degrees symbol 350°F!&#x27;;\n    test = &#x27;one 29 oz can black beans, rinsed and drained\\none 6 oz can tomato paste\\n32 oz vegetable stock\\n1 onion, chopped\\n5 cloves garlic, minced\\n1 tablespoon chili powder\\n1 tablespoon cumin\\n1 teaspoon oregano\\n1 tablespoon olive oil\\n1 sweet potato, peeled and cut into bite sized chunks\\n1 cup dry quinoa\\nsalt and pepper to taste\\navocado, cilantro for garnish  (optional)\\n\\nHeat the oil in a large heavy soup pot over medium low heat. Add onions, and cook until soft and they start to turn brown (about 10 minutes). Add the garlic, and cook for about 2 minutes.\\nAdd the tomato paste, chili powder, cumin, and oregano and cook for about 2 minutes, stirring constantly.\\nAdd the beans, stock, and potatoes, and season with salt and pepper.\\nCook for about 5 minutes, then add the quinoa. Continue cooking for about 15 minutes – 30 minutes, stirring frequently, until quinoa and potatoes are cooked and the chili has thickened.\\nAdd a bit of water if the chili becomes too thick for your liking. Top with avocado and chopped cilantro. Scrumptious!&#x27;;\n    test = &#x27;Chocolate is very sensitive to high temperatures and different chocolates require different maximum temperatures. Dark chocolate should never be heated above 120 F, while milk and white chocolates should never be heated to above 110 F. It is quite easy to exceed these temperatures if using a double boiler with boiling water, or if microwaving on full power&#x27;\n    test = &#x27;one 29 oz can black beans, rinsed and drained\\none 6 oz can tomato paste\\n32 oz vegetable stock\\n1 onion, chopped\\n5 cloves garlic, minced\\n1 tablespoon chili powder\\n1 tablespoon cumin\\n1 teaspoon oregano\\n1 tablespoon olive oil\\n1 sweet potato, peeled and cut into bite sized chunks\\n1 cup dry quinoa\\nsalt and pepper to taste\\navocado, cilantro for garnish  (optional)&#x27;\n    \n    function fixSizes(str, debug) {\n     var SIprefix = function(amount) {\n      if (amount &gt; 1000) {\n       return (Math.round(amount &#x2F; 1000 * 10) &#x2F; 10).toString() + &#x27;k&#x27;;\n      }\n      if (amount &lt; 1) {\n       return (Math.round(amount * 1000 * 10) &#x2F; 10).toString() + &#x27;m&#x27;;\n      }\n      return amount.toString();\n     };\n    \n     var volume = function(amount, ratio) {\n      return SIprefix(amount * ratio) + &#x27;l&#x27;;\n     };\n     var weight = function(amount, ratio) {\n      return SIprefix(amount * ratio) + &#x27;g&#x27;;\n     };\n     var fahrenheit = function(amount) {\n      return (Math.round((amount - 32) * (5 &#x2F; 9) * 10) &#x2F; 10).toString() + &#x27;°C&#x27;;\n     };\n    \n     &#x2F;&#x2F; units = [ [from, type, rate], ... ]\n     &#x2F;&#x2F; from = list of names, e.g. [&#x27;ounce&#x27;,&#x27;oz.&#x27;]. The &#x27;s&#x27; suffix is automatically checked for, so you don&#x27;t need to specify &#x27;ounces&#x27;.\n     &#x2F;&#x2F; type is one of weight, volume, fahrenheit.\n     &#x2F;&#x2F; rate is: if weight, the ratio of $from to grams; if volume, the ratio of $from to litres; if fahrenheit, omitted.\n     var units = [\n      [[&#x27;°F&#x27;, &#x27;F&#x27;], fahrenheit],\n      [[&#x27;cup&#x27;, &#x27;c.&#x27;], volume, 0.25],\n      &#x2F;&#x2F;[[&#x27;tsp.&#x27;, &#x27;teaspoon&#x27;], volume, 0.0049],\n      &#x2F;&#x2F;[[&#x27;tbsp&#x27;, &#x27;tbs&#x27;, &#x27;tblsp&#x27;, &#x27;tablespoon&#x27;], volume, 0.0148],\n      [[&#x27;lb&#x27;], weight, 453.6],\n      [[&#x27;ounce&#x27;, &#x27;oz.&#x27;, &#x27;oz&#x27;], weight, 28.4],\n     ];\n    \n     var strtonumber = function(s) {\n      switch (s) {\n       case &#x27;a&#x27;: case &#x27;an&#x27;: case &#x27;one&#x27;: return 1;\n       case &#x27;two&#x27;: return 2;\n       case &#x27;three&#x27;: return 3;\n       case &#x27;four&#x27;: return 4;\n       case &#x27;five&#x27;: return 5;\n       case &#x27;six&#x27;: return 6;\n       case &#x27;seven&#x27;: return 7;\n       case &#x27;eight&#x27;: return 8;\n       case &#x27;nine&#x27;: return 9;\n       case &#x27;ten&#x27;: return 10;\n       case &#x27;eleven&#x27;: return 11;\n       case &#x27;twelve&#x27;: return 12;\n       case &#x27;1&#x2F;2&#x27;: return 1&#x2F;2;\n       case &#x27;1&#x2F;4&#x27;: return 1&#x2F;4;\n       case &#x27;1&#x2F;8&#x27;: return 1&#x2F;8;\n      }\n      return amount = parseInt(s); &#x2F;&#x2F; TODO float values. But the regex atm doesn&#x27;t match that. Didn&#x27;t encounter any decimals in recipes yet.\n     };\n    \n     var re_unit = &#x27;&#x27;;\n     for (var unit in units) {\n      for (var alias in units[unit][0]) {\n       re_unit += &#x27;|&#x27; + units[unit][0][alias].replace(&#x27;.&#x27;, &#x27;\\\\.&#x27;);\n      }\n     }\n     re_unit = &#x27;(&#x27; + re_unit.substring(1) + &#x27;)&#x27;;\n    \n     var re_number = &#x27;a|an|1&#x2F;2|1&#x2F;4|1&#x2F;8|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|[1-9][0-9]*&#x27;;\n     var re_numeric = &#x27;^[1-9][0-9]*$&#x27;;\n     var re_amount = &#x27;(((&#x27; + re_number + &#x27;) to )?(&#x27; + re_number + &#x27;)|(&#x27; + re_number + &#x27;)( |-)(&#x27; + re_number + &#x27;))&#x27;;\n    \n     var re_full = new RegExp(re_amount + &#x27;( )?&#x27; + re_unit + &#x27;(s?)&#x27;, &#x27;igm&#x27;);\n     var re_numeric = new RegExp(re_numeric);\n     re_number = new RegExp(re_number, &#x27;igm&#x27;);\n     re_amount = new RegExp(re_amount, &#x27;igm&#x27;);\n     re_unit_noplural = new RegExp(re_unit, &#x27;igm&#x27;);\n    \n     var hits = str.match(re_full);\n     for (var hit in hits) {\n      hit = hits[hit];\n      var amounts = hit.match(re_number);\n      var unit = hit.match(re_unit);\n      unit = unit[0];\n    \n      for (var unit2 in units) {\n       for (var alias in units[unit2][0]) {\n        if (units[unit2][0][alias] == unit) {\n         unit = [units[unit2][1], units[unit2][2]];\n        }\n       }\n      }\n    \n      &#x2F;&#x2F; Catch &quot;1 1&#x2F;2&quot; as addition rather than a range\n      if (amounts.length == 2 &amp;&amp; hit.indexOf(amounts.join(&#x27; &#x27;)) &gt; -1) {\n       &#x2F;&#x2F; Exception: &quot;one 29 oz can of whatever&quot; is just 29 oz instead of one+29=30\n       if ((amounts[0] == &#x27;one&#x27; &amp;&amp; strtonumber(amounts[1]) &gt;= 1) || amounts[0] == &#x27;a&#x27; || amounts[0] == &#x27;an&#x27;) {\n        amounts[0] = amounts[1];\n        delete amounts[1];\n       }\n       else {\n        amounts = [strtonumber(amounts[0]) + strtonumber(amounts[1])];\n       }\n      }\n    \n      var replacement = &#x27;&#x27;;\n      var separator = &#x27;&#x27;;\n      for (var amount in amounts) {\n       amount = strtonumber(amounts[amount]);\n    \n       replacement += separator + unit[0](amount, unit[1]);\n       separator = &#x27;-&#x27;;\n      }\n    \n      if (debug) {\n       console.log(&#x27;Matched:&#x27;, hit, &#x27;Amount:&#x27;, amount, &#x27;Unit:&#x27;, unit, &#x27;Replacement:&#x27;, replacement);\n      }\n    \n      str = str.replace(hit, replacement);\n     }\n     return str;\n    }\n    \n    &#x2F;&#x2F;console.log(fixSizes(test));\n    document.documentElement.innerHTML = fixSizes(document.documentElement.innerHTML);</code></pre>')