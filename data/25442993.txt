Item(by='ragnese', descendants=None, kids=None, score=None, time=1608129507, title=None, item_type='comment', url=None, parent=25442267, text='This is a bit off-topic, but something you said resonated with me.<p>&gt; The PCL book is very much &quot;project based&quot; in that the author walks you through building a couple of actual applications. This is a Good Thing™ for the most part, but it does mean that you don&#x27;t necessarily get things in the order you might expect.\n&gt; \n&gt; There&#x27;s a part of me that almost wishes I&#x27;d started with a book that takes more of an approach of &quot;programming is ultimately sequence, selection and iteration. Here&#x27;s how you do sequence in Lisp. Here&#x27;s how you do selection. Here&#x27;s how you do iteration. Now here&#x27;s all the Fancy Lisp Stuff™&quot;.<p>I feel like I&#x27;m in the minority in that I prefer to NOT learn things by just &quot;diving in&quot;. I am much more successful when I start from the absolute fundamentals. There are objective pros and cons to either approach, but I suspect the success factor is based on one&#x27;s personality (or some such).<p>If you start with the fundamentals, it&#x27;s hard to know if you have any mastery until you try to do something &quot;real&quot;. And then you might get frustrated because nobody taught you, e.g., how to do a network call in this programming language. It&#x27;s also less rewarding because you can spend hours&#x2F;days&#x2F;weeks before actually &quot;doing&quot; anything.<p>If you start by diving in to a project, it&#x27;s hard to know if you&#x27;re doing things &quot;the right way&quot; or if you&#x27;re just porting over bad habits from some other language you&#x27;re familiar with. Sure, I got it to work, but is it <i>good</i>, or did I just cement in some bad habits?<p>The first time I drove a standard transmission car, I didn&#x27;t stall it a single time. Because I read on the internet for a week about how car transmissions work and the difference between a manual and automatic gearbox. I do the same thing with programming languages. The first thing I want to know is what is the memory model approximately like (everything is a reference, values + references, are allocations cheap or expensive), what is the &quot;philosophy&quot; of the language (everything is an object, function composition is the blessed approach, mutability is bad, types are most&#x2F;least important), etc. Then I want basic mechanisms: loops, iterators, lists or arrays, threads&#x2F;futures&#x2F;coroutines. Etc, etc.<p>That being said, SICP is kind of nice in that it finds an interesting middle ground where you&#x27;re definitely learning details of the scheme language (applicative order vs normal order, recursion, etc) while it also feels like the details of the language is not the entire point.<p>No real point here. Just inspired by your comment and thought I&#x27;d share my own experience.')