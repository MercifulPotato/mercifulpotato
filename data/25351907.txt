Item(by='ohazi', descendants=None, kids=[25352131], score=None, time=1607464524, title=None, item_type='comment', url=None, parent=25348839, text='This argument doesn&#x27;t work when PCs are essentially the <i>only</i> widely available hardware platform that ended up with an open standard for modifying the software running on the device. Even here, the fact that we ended up with this model was an accident.<p>Every device or platform since the IBM PC, including phones, tablets, non-x86 PCs, thermostats, wristwatches, routers, appliances, cars, etc. -- <i>all</i> of them have switched to the device-only-accepts-firmware-signed-by-the-manufacturer model where you can&#x27;t put your own software on the vast majority of devices without a significant amount of reverse engineering and hardware&#x2F;firmware exploit hunting.<p>Software can&#x27;t eat the world if nobody wants to make hardware that can run arbitrary software. Then it&#x27;s only &quot;this one particular company&#x27;s software can eat your thermostat for the two years that they feel like providing device support, then it&#x27;s trash.&quot;<p>I think that hardware (or at least boot architecture) <i>does</i> matter. For all of UEFI&#x27;s flaws, the secure boot model is actually pretty good. A device can come with a preloaded manufacturer key, and can be configured by default to only run manufacturer signed firmware. But once a user buys the device, they have the option of adding an additional key, either from another third party (i.e. like the key that RedHat and Ubuntu use to sign their kernels), or keys that you or your organization generate and manage yourselves. You can also remove the preloaded key, because as the owner of the device, <i>you should be able to do whatever you want with it</i>. If the manufacturer needs their application to only work if the secure boot settings haven&#x27;t been altered (i.e. in a car, with safety&#x2F;liability concerns), they can do that.<p>I would be a lot happier if we had a model like this for literally any other non-PC platform. Right now everybody rolls their own crappy implementation of signature checking with hard-coded manufacturer keys. It&#x27;s really pretty awful.')