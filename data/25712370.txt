Item(by='skohan', descendants=None, kids=None, score=None, time=1610267750, title=None, item_type='comment', url=None, parent=25710856, text='&gt; the “developer speed above all else” rabbit hole with Python<p>I&#x27;ve become convinced that any language without a strong type system will eventually lead to a codebase which collapses under its own weight.  Lately I&#x27;ve been working on a bit of data analysis in Jupyter, and even in that limited setting I find it hilariously slow and error-prone working with python.  I would rate developer speed in terms of the time it takes to imagine and implement a correct solution.  The correct part is key, because solving issues at runtime so so much slower than doing it at compile time.  The only place where Python has an advantage is <i>maybe</i> in terms of how long it takes to type the code.<p>&gt; it wouldn’t take that much longer to get a grip on Rust<p>This just hasn&#x27;t been my experience at all.  I&#x27;ve been programming professionally for over a decade, and I&#x27;ve dabbled with probably over dozen programming languages, and done real work in several: C&#x2F;C++, Java, Obj-C, JS, Ruby, Swift, Python and Rust.  I would say that Rust is an extreme outlier in terms of learning curve.  It really took months to get to the point where I really got to that comfort point where I can just type Rust code with confidence that it&#x27;s going to compile without looking a lot of things up, and even then I run into situations where I have to ask for help, and I feel like I am just scratching the surface with some more esoteric aspects of the language.  In most languages it has been possible to reach that point in weeks.<p>I say this as someone who actually loves programming in Rust and currently reaches for it often as my &quot;main language&quot; of choice, but it is a complex language which is not easy to learn, and this is a real point to consider in terms of using Rust in a team setting.')