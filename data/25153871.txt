Item(by='jkingsbery', descendants=None, kids=None, score=None, time=1605817084, title=None, item_type='comment', url=None, parent=25140536, text='To add to bonoboTP&#x27;s useful comments:<p>&gt; When I do mimic accomplishing various things, this mostly comes from taking various portions of online example code, reformulating it, and doing some basic data plumbing to make it work the way I want it to.<p>What you&#x27;ve described is common. It&#x27;s the basis for the punchline to <a href="https:&#x2F;&#x2F;xkcd.com&#x2F;1988&#x2F;" rel="nofollow">https:&#x2F;&#x2F;xkcd.com&#x2F;1988&#x2F;</a> .<p>&gt; I have in fact built tons of projects and worked on large codebases, but I&#x27;m not certain that makes me an engineer or that any of this is a genuine accomplishment.<p>I don&#x27;t know your background, you&#x27;ll need to figure out some yourself.<p>I&#x27;ve heard in my career two conflicting opinions. Opinion A: &quot;You can&#x27;t be a <i>real</i> engineer unless you built something from scratch.&quot; Opinion B: &quot;You can&#x27;t be a <i>real</i> engineer unless you&#x27;ve worked on a large scale project.&quot; The number of engineers that have worked continuously on one project from inception to millions of customers is pretty small. Most of us either take a project from inception to some small scale over the course of a couple years, or we are dropped into an existing project that has scaled to one size and we keep it up and running (and maybe growing) for a couple years. There are different challenges with both taking a project from inception to a small scale and with managing something at a large scale, and they are both valuable.<p>&gt; I should already know all this at this point in my career.<p>I don&#x27;t know how far along you are in your career, but programming exercises are valuable whether you&#x27;ve been programming for a couple years or several decades.<p>There&#x27;s always more to learn. Not knowing something about software engineering doesn&#x27;t disqualify you from being a software engineer.<p>One other thing I do I forgot to mention: ask others for specific feedback. If you&#x27;re not sure about how you did on something, hearing from someone who you trust to be honest can be helpful relieve your concerns, or help you to at least make your gaps more concrete.')