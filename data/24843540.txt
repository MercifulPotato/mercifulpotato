Item(by='kentonv', descendants=None, kids=[24844398], score=None, time=1603238080, title=None, item_type='comment', url=None, parent=24843406, text='Yes, I know what copy-on-write is.<p>You can get copy-on-write semantics by passing MAP_PRIVATE to mmap(). So, again, you could literally replace your pread() calls with mmap() calls with MAP_FIXED and MAP_PRIVATE and get the described optimization, without kernel help -- so long as your buffer is page-aligned. If your buffer isn&#x27;t page aligned, then no such optimization is possible in either the kernel or userspace.<p>So the question is: Why would the kernel implement this optimization if (1) programs that aren&#x27;t explicitly designed for it (by using page-aligned buffers) won&#x27;t get the benefit, and (2) programs design for it could implement the same optimization in userspace anyway?<p>&gt; Most modern implementations of malloc will call mmap in the background.<p>Well of course they do. But malloc() won&#x27;t promise you a page-aligned address, regardless of how it&#x27;s implemented. If you need a page-aligned address you have to call mmap() directly. (Or I suppose you could malloc() one more page than you need, and then find the page-aligned subset, but it&#x27;s a lot easier to just call mmap()...)')