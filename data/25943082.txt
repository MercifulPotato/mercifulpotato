Item(by='dkersten', descendants=None, kids=[25943712], score=None, time=1611847186, title=None, item_type='comment', url=None, parent=25937095, text='Maybe its true, but that just shifts the blame and doesn&#x27;t change anything or solve anything. Try as we might, &quot;fixing&quot; programmers just isn&#x27;t realistic, so the only thing we can do is look for ways to improve the tools to make them encourage better practices.<p>Going back to the ORM example, I&#x27;m cool with just using SQL. The language encourages a style of thinking that fits with databases and it being a separate language makes it clear that there&#x27;s a boundary there, that its not the same as application code. However, I&#x27;d also be ok with an ORM that enforced this boundary and clearly separated query logic from application logic.<p>As for OOP, I don&#x27;t know what the solution there is. Maybe there isn&#x27;t one. I like to use OOP, but sparingly, and at least in my personal code (where I have control over this), its worked out really well. A lot of code is transforming data structures and a functional approach maps really well to this, but for overall architecture&#x2F;systems and even for some small things that just map well to objects, its great to have OOP too. In my toy game, I use inheritance to conveniently create external (dll&#x2F;so) modules, but inside the engine, most data is transformed in a functional style. Its working quite well. I&#x27;m not sure how you could redesign the paradigms to encourage this though, outside of designing languages to emphasize these things.')