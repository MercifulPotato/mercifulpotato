Item(by='alerighi', descendants=None, kids=[25105285, 25104614], score=None, time=1605471288, title=None, item_type='comment', url=None, parent=25104142, text='&gt; Say you have an int field and you want to change it to an int array field.<p>Will you ever do that in real life? Seriously, why would someone change something from an int to an array...<p>I see all these Java programmers say that you should always use getters&#x2F;setters and not expose public field in classes for this reason, yet I have to see an example where this would have happened.<p>Also the argument that you will need to touch more files in a refactoring. Sure. Not doing so would mean adding a technical debt, a method that exists for the sole purpose of some code that you were too lazy to update. Do that and your software will become spaghetti code easily.<p>I see this typically Java code that is not readable for all these getters, to the point that a simple class that represent a user is like 200 lines of code long for all these getters&#x2F;setters that only return or set fields of the class without doing nothing.<p>Is also a matter of performance (no wonder Java code is that slow), since you are calling a function for each property access (and a function call is an expensive operation, it involves jumps, you have to access the vtable for the object, set up the stack frame) where you could simply access a field in an object (a simple addressing with an offset for the CPU). Sure, a call is not that expensive. But imagine doing that in a loop and it will be a performance problem. It will make also the CPU optimization work more difficult, since you are jumping around.')