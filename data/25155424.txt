Item(by='rglullis', descendants=None, kids=None, score=None, time=1605827077, title=None, item_type='comment', url=None, parent=25154368, text='Ok. So it is basically that going full-on &quot;CSS dictates HTML&quot; approach, which only makes (some) sense if you have full-control of every aspect of the stack and you just want to have a single repository for your design system.<p>Honestly, the only possible place where this <i>may</i> make sense to me is if you have tooling that can keep a two-say sync between designer tools and programmers tools. I think AirBnB was doing something like that with Sketch?<p>Aside from that, honestly I am still failing to see any benefit. If you are tying yourself to a JS codebase, you can still do that whole &quot;utility classes at the component level&quot; with plain SASS and global variables and mixins and you <i>still</i> don&#x27;t need to put class definitions in your HTML.<p>Let me see if I can draft a quick Vue example:<p><pre><code>   &lt;template&gt;\n     &lt;button&gt;&lt;slot&gt;&lt;&#x2F;slot&gt;&lt;&#x2F;button&gt;\n   &lt;&#x2F;template&gt;\n\n   &lt;script&gt;\n     export default {\n       name: &quot;my-button&quot;\n    }\n   &lt;&#x2F;script&gt;\n\n   &lt;style lang=&quot;scss&quot;&gt;\n   @use &quot;my&#x2F;sass&#x2F;variables&quot;\n   @use &quot;my&#x2F;sass&#x2F;mixins&#x2F;buttons&quot;\n\n   button {\n     @include buttons.rounded($variables.radius-button-small)\n     @include buttons.colors($active: $variables.primary, $background: $variables.primary-accent, $disabled: $variables.disabled)\n   }\n   &lt;&#x2F;style&gt;\n\n</code></pre>\nNo Tailwind required. Easy to customize. One central place to organize your style and - most importantly to me - no css classes shoved in the HTML!<p>Now, someone might ask for &quot;a large button inside the hero section from the home page.&quot; Let&#x27;s go about that...<p><pre><code>  &lt;template&gt;\n  &lt;div class=&quot;hero&quot;&gt;\n    &lt;p&gt;Welcome to the beautiful site&lt;&#x2F;p&gt;\n    &lt;MyButton&gt;Sign up now!&lt;&#x2F;MyButton&gt;\n  &lt;&#x2F;div&gt;\n  &lt;&#x2F;template&gt;\n\n  &lt;script&gt;\n  import MyButton from &#x27;.&#x2F;my-button.js&#x27;\n\n  export default {\n    name: &quot;hero&quot;,\n    components: {MyButton}\n  }\n  &lt;&#x2F;script&gt;\n\n  &lt;style scoped lang=&quot;scss&quot;&gt;\n  @use &quot;my&#x2F;sass&#x2F;variables&quot;\n\n  div.hero {\n    button {\n      width: $variables.size-button-large-width;\n      height: $variables.size-button-large-height;\n    }\n  }\n  &lt;&#x2F;style&gt;\n</code></pre>\nReally, I am yet to understand what I am missing by taking this approach. The example above is contrived, but I don&#x27;t see why more complex widgets and even whole pages couldn&#x27;t be done this way. The mixins are the place where you can have all of the abstraction you want, you can even add some logic depending on the values from the variables.<p>So, let&#x27;s take a look at the benefits:<p>- If next week the frontend team decides to switch from Vue to <i>anything else</i>, the SASS code does not need to be touched at all.<p>- If next week the design team brings a whole new &quot;Design Language&quot;, the JS code does not need to be touched at all (unless of course the design system also brings new functionality)<p>- The styling could even be verified on a series of static HTML pages. If the designer does not do any code, they can verify if the implementation matches the designs by opening a reference template, no need to run a whole JS app.<p>Downsides:<p>- If you want the code to be truly portable, your SASS need to follow a standard convention of @mixin names&#x2F;parameters as well as variables. Honestly though this <i>IS</i> what I would expect from a &quot;CSS framework&quot;, so I am not even sure it&#x27;s a bad thing.<p>- You don&#x27;t get to put any hip CSS-in-JS framework on your resume.')