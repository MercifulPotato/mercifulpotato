Item(by='BugsJustFindMe', descendants=None, kids=[25796794, 25796499], score=None, time=1610744123, title=None, item_type='comment', url=None, parent=25795027, text='&gt; <i>There error messages aren&#x27;t great</i><p>No language has _great_ error messages. But comparing the Lua message for e.g. `print(nil+5)` to the Python message for `print(None+5)`, I somewhat prefer Lua&#x27;s natural language approach &quot;attempt to perform arithmetic on a nil value&quot; over Python&#x27;s jargon-heavy &quot;TypeError: unsupported operand type(s) for +: &#x27;NoneType&#x27; and &#x27;int&#x27;&quot;. Of course Lua&#x27;s message could be better (it could&#x2F;should tell you which operation and where the nil is in the expression), but &quot;not great&quot; basically describes every language&#x27;s error messaging, and Lua&#x27;s messages are not exactly eye-bleeding like C++ STL errors either.<p>&gt; <i>the 1-indexed arrays</i><p>1-based indexing is actually really human friendly, and programmer affinity for 0-based indexing in languages that don&#x27;t map directly to RAM pointer offsets is largely excess familiarity with C plus cargo-culting and wanting to believe that everything Djikstra ever said is universally true regardless of context. Indexing by 1 gives many nice human-oriented properties, like for instance that indexing the front and back is symmetrical (first is 1 and last is -1), whereas in 0-based languages you have 0 and -1 which makes a lot less sense (people who haven&#x27;t been bent to the will of the C language gods don&#x27;t think of the last element as one before the first one, it&#x27;s all the way at the end) except as a conceit to the fact that there&#x27;s no -0 available. It&#x27;s easier to reason about a list of five things where the first element is the first and the fifth element is the fifth, instead of constantly having to do mental -1 arithmetic to satisfy a paradigm that requires visualizing hardware memory layouts.<p>And if you really really really want to cycle over an array using modulus operations, the classic &quot;0 is better&quot; example that people love to trot out, Lua also lets you start your array at 0 if you want. Lua doesn&#x27;t care what you use for table keys as long as they&#x27;re not nil.<p>&gt; <i>the syntax is super weird</i><p>Is it? I teach Lua to people, and most novice programmers I meet find the syntax quite intuitive with its plain english keywords and operators. Do you think &quot;function&quot; is more weird than &quot;def&quot; or &quot;sub&quot;, &quot;or&quot; more weird than &quot;||&quot;, &quot;not&quot; more weird than &quot;!&quot;?')