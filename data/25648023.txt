Item(by='jrockway', descendants=None, kids=[25648916], score=None, time=1609867696, title=None, item_type='comment', url=None, parent=25647618, text='How is this damning, exactly?  It&#x27;s a very specific set of library quirks that are kind of expected -- Chmod doesn&#x27;t do much on Windows.  Arguably, maybe Chmod shouldn&#x27;t be in the core library if it can&#x27;t do everything on every OS&#x2F;architecture combination, but I am not sure that damns the language.  It does the best it can, but doesn&#x27;t deliver a POSIX overlay for Windows.  (The complaint continues into a discussion of build tags, to make Windows-only code compile only on Windows.  Again, what&#x27;s the alternative here?  If you want your program to do different stuff depending on the platform, there&#x27;s going to be some sort of conditional to apply that.)<p>There is then a discussion about monotonic time.  The author immediately knows they want monotonic time, but there is no method that specifically returns that.  Instead, go embeds the wall clock and monotonic time into a time.Time when you create one with time.Now.  It uses the wall clock time for display, and monotonic time to compute the difference between two timestamps.  This is not what the author expected, but it ultimately allows them to do what they want.  (There is then a complaint about how when you boot a Raspberry Pi without giving userspace any time to start up, the time is set incorrectly, and Go doesn&#x27;t help.  Well... yeah.  You can add a hardware RTC if you want the time to be correct as soon as the i2c subsystem comes up, or you can wait for NTP, or you can live with the wrong time.  Not sure how any of this involves Go -- it does expect the OS to do OS things for it.)<p>If you were going to write a damning critique of why to never use Go, it would probably be something like &quot;this dumb library uses channels, sync.Mutex, and atomic.AddInt64 all in the same code and it deadlocks and runs out of memory&quot; or &quot;I installed the most popular ORM on Github and it prints colored text to the console when there is a database error rather than returning an error from the function&quot;.  I think the linked article totally misses the mark on what problems people are likely to encounter with Go.  Let&#x27;s be honest -- 99% of programmers have no idea that their OS has a monotonic clock, and are quite surprised (and have no idea how to fix it) when start := time.Now(); time.Sleep(time.Second); fmt.Println(time.Since(start)) prints a negative number.  But... with Go they don&#x27;t have that problem.  Pretty interesting.')