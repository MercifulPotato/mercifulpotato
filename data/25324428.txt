Item(by='bordercases', descendants=None, kids=None, score=None, time=1607271536, title=None, item_type='comment', url=None, parent=25323420, text='I have no experience using TLA+, just secondhand knowledge, so you might very well be right. From my understanding, everything I said is true when restricted to classical logic. Otherwise, there are multiple approaches to objects and time, all of which are non-classical logics, and so are not commonly taught nor have they yet been embedded in many languages. TLA+ has been getting more traction, which might signal some kind of convergence since I last looked into it? I guess Rust would be another example where state is checked against using ownership signals, which uses non-classical concepts.<p>Defending myself against the second claim, yes these algorithms have implicit state because the machines we&#x27;re operating on are fundamentally stateful. But that&#x27;s meant to be abstracted away at the language level and left for the interpreter&#x2F;compiler to resolve.<p>This still leaves problems for how to modularize code at the domain layer using functional idioms, which primarily express behavior over properties. OOP can be restricted in a way which makes this simple to bridge towards using the Actor model but that&#x27;s still a step away from habitually structuring your code using modules monoids and combinators.<p>TLA+ doesn&#x27;t quite address this, since (IIRC) you don&#x27;t implement your final system in TLA+.')