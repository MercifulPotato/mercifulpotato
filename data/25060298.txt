Item(by='valyala', descendants=None, kids=[25060556], score=None, time=1605115019, title=None, item_type='comment', url=None, parent=25048028, text='Go is my primary programming language during the last 10 year. I absolutely love Go because of the following features:<p>* Great code readability. I can open any project in Go and instantly start reading and understanding the code. This is because of simple syntax, which doesn&#x27;t provide ability to write implicitly executed code, and `go fmt` tool, which formats everybody&#x27;s code to a single code style.<p>* Go discourages unnecessary abstractions and encourages writing essential boring code without various &quot;smart&quot; tricks. The end result is much shorter code base, which is easy to read and refactor.<p>* Fast compile times. For instance, my latest project - VictoriaMetrics [1] - contains almost 600K lines of Go code excluding &quot;_test.go&quot; files. Go builds the final `victoria-metrics` executable in less than a second during development. This means that I can quickly iterate on code modifications and testing without the need to wait for minutes and hours for build process to finish (hello, Rust and C++ :) ).<p>* Single statically linked output binary with relatively small size. For example, VictoriaMetrics is built into 19MB statically linked binary with Go 1.15.4. And this binary contains all the debug symbols. Binary size shrinks to 12MB when stripping debug symbols. Such a binary can run on any host without the need to manage external dependencies - just upload the binary and run it.<p>* Ability to build executable for any supported target platform by specifying GOOS and GOARCH environment variables. For example, I can build binary for FreeBSD on ARM from my x86 laptop running Ubuntu.<p>* Great and easy-to-use tooling for race detection and CPU&#x2F;memory&#x2F;locks profiling. There tools significantly simplify code optimization and allow to catch data races at much lower mental cost comparing to race-free Rust :)<p>P.S. I hope Go will never adopt generics. I didn&#x27;t need generics during the last 10 years of active development in Go [2]. Before Go I was working with C++ and was experiencing constant pain with reading and debugging C++ templates in stl and boost libraries. I don&#x27;t want to experience the same feelings with Go.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;VictoriaMetrics&#x2F;VictoriaMetrics&#x2F;" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;VictoriaMetrics&#x2F;VictoriaMetrics&#x2F;</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;valyala&#x2F;" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;valyala&#x2F;</a>')