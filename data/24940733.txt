Item(by='segfaultbuserr', descendants=None, kids=None, score=None, time=1604052333, title=None, item_type='comment', url=None, parent=24940378, text='&gt; <i>The flip side, of course, is that you can have &quot;picked the wrong license&quot; if your intent was to force someone to do something.</i><p>Yes, for this purpose, copyleft is an example which forces everyone to keep the software and its derivative works free, and from history we know it&#x27;s very effective. Nevertheless, I have some doubts on whether a copyleft-style acknowledgement license will effectively work in a similar way as we described due to some practical problems below.<p>First, it has no power on independent implementations. In the academia, if J. Random Hacker developed a new algorithm that solved an important problem and published under a free license, sequentially, all the relevant papers that come after that will acknowledge that &quot;In 2020, J. R. Hacker, et al. developed the first....&quot;, even if what the paper shows in an independent research not directly related to the original. However, such acknowledgement can never be enforced using a license. This is not just a hypothetical scenario, earlier in this year, the first controversy on using FOSS without acknowledgement was the AppGet incident [0], which has received strong attention to the community. If my observation is correct, it&#x27;s how the current discussion began. However, in this case, Microsoft didn&#x27;t reuse any the original code from AppGet - WinGet was an independent implementation by Microsoft in another programming language and has no similarity to AppGet at the source code level. However, the accusation was that &quot;WinGet works pretty much identical to the way AppGet works&quot;, in other words, it only served as an inspiration for Microsoft on its high-level architecture. In the academia, we certainly expect such inspiration to be acknowledged, on the other hand, an &quot;attribution&quot; license will have zero legal effect - If the proposed license cannot even address the prime controversy that triggered the entire discussion, what&#x27;s the point?<p>Second, if acknowledgement is forced by a license, the license must be careful not to overspecify the acknowledgement requirement. A historical example of overspecification is the original 4-clause BSD license, which includes an advertising clause, &quot;<i>all advertising materials mentioning features or use of this software must display the following acknowledgement: This product includes software developed by the &lt;organization&gt;.</i>&quot; It requires <i>all</i> promotional materials of a product to include an acknowledgement if a piece of 4-clause BSD software is included. Such a requirement is inherently problematic to integrators, distributions, and packagers, which are an important part of the community. For a distribution, it must acknowledge 1,000+ projects (even in a one-page poster) to comply with the license [1]. Thus, the copyleft-style acknowledgement license must include some forms of &quot;escape&quot; conditions to allow one to skip acknowledgement.<p>Examples: you can skip the acknowledgement if...<p>1. If you are shipping more than 10 programs simultaneously.<p>Failure mode: This requirement is too simple. A bad company will simply ship a bunch of packages to get a free pass. Thus, the conditions should be more robust if your intention is to force bad actors to behave in certain ways (&quot;someone goes up against a company that seems to have lost its way morally&quot;).<p>2. If it&#x27;s used in an unmodified form (LGPL-like).<p>Failure mode: If the original project has been forked by the community, the exception becomes useless again, and everyone has to spam acknowledgements everywhere. Thus, conditions of higher complexity should be used.<p>As you see, in order to avoid inadequacy of the license, and to prevent bad actors to abuse the escape clauses, I&#x27;m afraid that it&#x27;s possible that these conditions can quickly become extremely convoluted and difficult to follow. Perhaps someone can come up with an elegant solution, but I&#x27;ll remain skeptical until the solution is demonstrated.<p>Third, this hypothetical copyleft-style acknowledgement license would be incompatible with most existing copyleft licenses, namely GPL (unlike most pessimistic licenses, which are GPL-compatible), making it impractical in the larger established community. Traditional copyleft licenses, such as GPL-2 or GPL-3, explicitly forbids relicensing to prevent a bad actor from nullifying its the copyleft nature by additional restrictions. Since no additional licensing terms shall be added, any code under the acknowledgement license can never be used in a GPL&#x27;d project, nor can it use any GPL code. Even worse, multi-licensing, the traditional solution to this cooperation problem cannot be used - In the existing community, if cooperation between GPL and BSD developers are needed, the code can be explicitly dual-licensed or even triple-licensed to avoid compatibility problems, for example, Linux kernel has dual-licensed GPL&#x2F;BSD code, and Firefox is available under three licenses. However, if multi-licensing is applied to a copyleft-style acknowledgement license, the license becomes useless and pointless to enforce, since a bad actor will simply select an alternative license.<p>In conclusion, I&#x27;m not sure whether a copyleft-style acknowledgement license is a good idea.<p>[0] <a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23331287" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=23331287</a><p>[1] Worse, it won&#x27;t be a problem initially, but only after most people had noticed this trend: they would want their acknowledgements too, and everyone would start adding advertising clauses, in the end - everyone spams all posters with credit and nobody gains any notability, it&#x27;s kind of a tragedy of the commons. The only way to stop this problem is explicitly discouraging everyone from using this license, which is what has happened to the original BSD license.')