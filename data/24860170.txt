Item(by='MayeulC', descendants=None, kids=[24862473], score=None, time=1603385658, title=None, item_type='comment', url=None, parent=24859921, text='CPU peripherals are memory, so it just looks like copying a GPU &quot;kernel&quot; (program) from a memory area (from disk) to another (GPU, via PCIe).<p>I don&#x27;t know enough about PCIe to be an authoritative source, but I&#x27;ll just go along and describe the way most microcontrollers and peripherals work. I doubt x86 has instructions dedicated to PCIe. There will likely be a PCIe controller memory-mapped to some hardware address, that the OS will write to as if it was regular memory (that address is physically wired to the controller, be it on the CPU die or on the motherboard). The address is generally specified by the BIOS&#x2F;UEFI (devicetrees on most embedded platforms).<p>Of course, what you will write will depend on the controller itself, but the OS will have a driver that contains that information. You have a back-and-forth to list peripherals on the bus, identify the one you want to communicate to, set-up access mode (direct memory access where you map an area of your memory to the peripheral, or just sequential access trough the controller). Once you can communicate with the GPU, you start the same dance to give it a program you compiled ahead of time, have it run, and fetch the result.<p>I don&#x27;t have low-level experience with that specific part of the system, but that kind of stuff is generic enough that you find the same patterns everywhere, at least for turing machines, which x86 CPUs are.')