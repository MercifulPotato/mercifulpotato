Item(by='rrss', descendants=None, kids=None, score=None, time=1603636006, title=None, item_type='comment', url=None, parent=24884372, text='&gt; No, it happened much earlier, in WDDM 1.0<p>WDDM 1.0 supported virtualized video memory, but it did it in software by patching command buffers to reference the new physical memory addresses.<p>Not until WDDM 2.0 did WDDM actually support using the hardware virtual memory capabilities of GPUs.<p>&gt; A new memory model is implemented that gives each GPU a per-process virtual address space. Direct addressing of video memory is still supported by WDDMv2 for graphics hardware that requires it, but that is considered a legacy case. IHVs are expected to develop new hardware that supports virtual addressing.<p>i.e. prior to WDDM 2.0, each process did not have a separate virtual address space on the GPU, and all hardware was assumed to use &quot;direct&quot; (i.e. physical) addressing of memory.<p><a href="https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;display&#x2F;gpu-virtual-memory-in-wddm-2-0" rel="nofollow">https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;di...</a><p>&gt; Under Windows Display Driver Model (WDDM) v1.x, the device driver interface (DDI) is built such that graphics processing unit (GPU) engines are expected to reference memory through segment physical addresses. As segments are shared across applications and over committed, resources gets relocated through their lifetime and their assigned physical addresses change. This leads to the need to track memory references inside command buffers through allocation and patch location lists, and to patch those buffers with the correct physical memory reference before submission to a GPU engine<p>&gt; it is necessary to eliminate the need for the video memory manager to inspect and patch every command buffer before submission to a GPU engine.<p>&gt; To achieve this, WDDM v2 supports GPU virtual addressing')