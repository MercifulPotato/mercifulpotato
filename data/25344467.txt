Item(by='rualca', descendants=None, kids=None, score=None, time=1607431927, title=None, item_type='comment', url=None, parent=25342813, text='&gt;  Each individual microservice becomes simpler, but the whole system becomes much more complex than an equivalent monolith with a single DB.<p>Indeed a distributed system forces developers to think through how dependencies communicate, which otherwise would be taken for granted.<p>However, that misses the whole point of microservices.  Services are peeled off monoliths because the monolith no longer meets operational requirements, which is trivial to provide with a distributed system.  I&#x27;m referring to aspects such as reliability, or ceasing to be able to scale vertically.<p>In addition, some people simply mindlessly develop monoliths not realizing they already have a distributed system, once we account for the fact that managed services and even running a database already opens that door wide open.<p>&gt; Microservices have their advantages, but simplicity and testability aren&#x27;t part of them.<p>Not really.  Contary to your claim, microservices make systems more easy to test.  The only thing that changes is that you&#x27;re no longer able to drop a breakpoint in a request and track it all the way through a database.  However, you get cleanly separated components with very crisp boundaries that make it trivial to test interactions.<p>Perhaps the main cultural clash that is added by moving from a monolith to a distributed system is that developers start to need to thing things through when they put up an interface.')