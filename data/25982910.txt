Item(by='kazinator', descendants=None, kids=[25984348], score=None, time=1612129974, title=None, item_type='comment', url=None, parent=25982586, text='Firstly, C is statically typed, so if you&#x27;re arguing for static typing as the cure for security holes, citing C examples of security hoes won&#x27;t speak well for your argument Secondly, C has an incomplete static system, which has no run-time safety net to compensate for it.<p>Many properties of C programs go unchecked. What is checked is easily defeated with type casts. Even the numeric conversions lack safety; e.g. floating point to integer conversion is silently implicit, with undefined behavior if the value is out of range.<p>All of that is a straw man example if we are arguing against incomplete static type systems, because the iron man is incomplete static with strong dynamic checks.<p>C also doesn&#x27;t provide access to the language at compile time; we cannot execute test cases for the code in the same breath as compiling it. If code is cross-compiled, it needs unit tests compiled into individual executable programs, and an emulator like QEMU to run them.<p>Because C doesn&#x27;t have run-time safety, unit tests do not reliably flush out type errors; programs with type errors can pass unit tests by fluke due to undefined behavior. E.g. a string that is not properly null terminated can have a zero byte in the right place anyway during the execution of a test case, and so on.<p>C security holes are not a good example to invoke in a static&#x2F;dynamic debate as something that could be prevented with static, so I&#x27;m asking that: if those are the examples, please spare the debate.')