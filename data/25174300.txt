Item(by='jbmsf', descendants=None, kids=None, score=None, time=1606010937, title=None, item_type='comment', url=None, parent=25170547, text='Because context matters, everyone is going to have different opinions on some (or all) parts of this one.<p>From my experience, I&#x27;ve run into a few challenges with some of the claims<p>For 1: If engineers always operate their code, you will end up with an organization structure built around &quot;these developers work on (and operate) this code.&quot; That might be what you want, but it&#x27;s often not what <i>I</i> want. There are going to be some part of the code base that don&#x27;t change very much and I&#x27;d rather not have a specific team perpetually taxed with operating it (instead of building new business value). Likewise, there are some engineers who are much more productive at building new things (and not just in the the crappy, &quot;now it&#x27;s your problem way&quot;). I don&#x27;t want those engineers to have a larger share of operations because they are more productive at development. Support-focused roles have value.<p>For 5: I have never seen a maintainable automated test suite. I&#x27;m sure they exist somewhere, just not in my experience, and I&#x27;ve never worked with anyone who knew how to ensure that developers create one. This means that, with purely-automated testing, your development costs can become dominated by &quot;fixing the tests.&quot; My preference is to automate the most important things and to have have humans, with judgement, test behaviors based on test cases written in English.')