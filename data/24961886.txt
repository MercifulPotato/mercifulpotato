Item(by='akiselev', descendants=None, kids=[24964083, 24967917], score=None, time=1604259446, title=None, item_type='comment', url=None, parent=24961512, text='Off the top of my head:<p>#8 Error handling: on an exception, does the whole app crash? What parts of it become unusable? What are the reset paths?<p>#9 Data consistency indicators: how functional is the UI when in a fallible state like server updates? (In multiplayer games this would be stuff like client side prediction and reconciliation) What is the recovery path so that data isn&#x27;t lost across many users? CRDTs and their competitors solve it for document editing but what about general purpose GUIs?<p>#10 User driven layout: Plugins, configurable UI elements, and a panel manager like you&#x27;d find in most IDEs.<p>#11 Automation&#x2F;accessibility: mapping UI actions to command line calls or a scriptable layer (former for technical fields like EDA packages, latter for more GUI centric stuff like line of business app). Automation and accessibility are two distinct factors but the implementation details align almost perfectly.<p>Bonus #12: Remote execution for secure GUIs and ultra high processing power collaboration - think stuff like graphical CAD&#x2F;FEA simulator with an entire bridge assembly. This is usually only possible with X or if you stream something like display lists&#x2F;GL calls from a browser engine on the server to a client renderer.<p>I&#x27;ve seen #8-10 absolutely tear through every UI architecture I&#x27;ve ever seen and #11 is important because it&#x27;s a nonstarter (<i>or should be</i>) for any serious application that goes out to the public, especially as the ADA&#x27;s reach expands. The latter requires deep integration with any platform it&#x27;s on so sadly would eliminate all but the big well funded GUI packages.<p>#12 has broad implications on how humans interface with computers but I&#x27;ve never seen it implemented at the GUI framework level - think WASM style bytecode for streaming UI state updates (I think ember.js&#x27;s renderer works this way?).')