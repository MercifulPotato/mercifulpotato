Item(by='AshamedCaptain', descendants=None, kids=[24942064, 24941934], score=None, time=1604061757, title=None, item_type='comment', url=None, parent=24941209, text='The problems are:<p>* &quot;Show the user interface&quot; implies that you need a way to render to the screen. Rendering to the screen implies a graphics driver.   Since on many architectures the user can change the graphics hardware, you need a Plug&amp;Play system where drivers for graphic cards can be loaded dynamically (e.g. from the PROM in the graphics card itself, and yes, EFI does this) . You need to be able to set resolutions, control multiple plugged in monitors (otherwise your BIOS output is sent to your HDMI connected projector only rather than your primary monitor).<p>* &quot;when I press F2&quot;: to read keyboard input implies a full USB stack with HID support. Bluetooth keyboard? You need a USB stack again, HCI support, capability for storing non-volatile data such as the pairing key for the keyboard, and either the UI to pair stuff or at least a tool to edit the pairing information once the system is booted (likely not a hit with users).<p>* &quot;Boot from a DVD&quot; implies a Serial ATA stack, ATAPI possibly full SCSI stack. ISO9660 support, plus FAT32.<p>* &quot;Boot from a USB&quot; implies USB host support, likely USB 1, USB2&#x2F;EHCI, and USB3&#x2F;xHCI support -- unless you want your pendrive to work on some ports and not others, or some pendrives to work and not others. Also support for the multiple mass storage protocols such as Mass Storage or UAS (again, full SCSI stack), and support for FAT32, exFAT, likely NTFS since a lot of people use it, etc.<p>* And then comes the bells &amp; whistles that most users also want, which suprisingly at this point actually add very little complexity. Fancy graphics support, mouse support (you already have HID driver, so why not?), sound support (cause most devices don&#x27;t have a plain speaker anymore, if you want even simple beeps you have to use the sound card, which requires drivers like HDA, codec drivers, etc. And yes, Macs do this.), crypto functions for full disk encryption support, OPAL, secureboot, etc.<p>* Also most users want their BIOS to present devices in a abstract way, i.e. so that your kernel is able to render to a framebuffer on an ARM server board with the same code it uses to render to a framebuffer on more standarized x86.<p>All of this at this point already requires a operating system-level of complexity. So you end up with a BIOS that resembles an operating system -- EFI.<p>tldr: BIOS are complicated because they have to abstract hardware, and hardware has become complicated.')