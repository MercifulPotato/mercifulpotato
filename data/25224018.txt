Item(by='acqq', descendants=None, kids=None, score=None, time=1606429865, title=None, item_type='comment', url=None, parent=25223866, text='Haven&#x27;t seen, but thanks. Lived and worked while following some of the ideas mentioned.<p>E.g. at the whole bottom of the page in some comment is a link to:<p>&quot;Why should I have written ZeroMQ in C, not C++ (part II)&quot;<p><a href="https:&#x2F;&#x2F;250bpm.com&#x2F;blog:8&#x2F;" rel="nofollow">https:&#x2F;&#x2F;250bpm.com&#x2F;blog:8&#x2F;</a><p>where the author writes &quot;Let&#x27;s compare how a C++ programmer would implement a list of objects...&quot; and then &quot;The real reason why any C++ programmer won&#x27;t design the list in the C way is that the design breaks the encapsulation principle&quot; etc.<p>I have indeed more than once used intrusive data structures in non-trivial C++ code, and the result was easy to read, and very efficient. There I really didn&#x27;t care about some &quot;thou shalt not&quot; &quot;breaking the encapsulation principle&quot; because whoever thinks at that level of &quot;verbot&quot; 100% of times is just wrong.<p>The &quot;encapsulation principle&quot; is an OK principle for some levels of abstraction, but nobody says that one has to hold to it religiously (exactly my point before). I would of course always make an API which would hide what&#x27;s behind it. But where I implement something (&quot;the guts&quot; of something), I of course have my freedom to use intrusive elements, if that solves the problem better. I have even created some &quot;extremely intrusive&quot; stuff (with a variable number of intrusive links in the structures). It worked perfectly. Insisting on doing anything as  &quot;ritual&quot; all the time is just so, so wrong.')