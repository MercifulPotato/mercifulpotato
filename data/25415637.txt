Item(by='nobody9999', descendants=None, kids=[25415864], score=None, time=1607943491, title=None, item_type='comment', url=None, parent=25414182, text='&gt;Blame always rises. Management knows that any product without extensive review is going to be bad. They push it out the door without that review because quality costs. Stockholders know. Software is bad because you can&#x27;t sue the companies that made it.<p>I get that a variety of pressures are put on developers to add features and ship quickly.<p>But whether it&#x27;s corporate development done internally (e.g., LOB applications), a web app or a SaaS offering, not designing security into the software is a disaster waiting to happen.<p>So many times I&#x27;ve seen businesses have their crown jewels ripped off due to poorly implemented&#x2F;weak or non-existent security practices in application design&#x2F;development.<p>Even when the infrastructure is reasonably well secured, with defense-in-depth, including strong authn&#x2F;authz, separation of duties, as well as strong security processes and policies in place, software that lacks <i>designed-in</i> security can render all of it useless.<p>Whether that&#x27;s because the software doesn&#x27;t&#x2F;can&#x27;t integrate with the security tools in use (often requiring applications to run with much higher privilege than they should) or because little or no thought was given to secure coding mechanisms or access controls.<p>I absolutely understand that there are <i>always</i> security trade-offs, regardless of where in a multi-layered infrastructure&#x2F;management&#x2F;application environment.<p>And it&#x27;s always important <i>not</i> to expend resources beyond what&#x27;s appropriate for the assets being secured.<p>That said, application software is the most frequent culprit in enabling compromises (followed closely by poor security implementation in the infrastructure and a lack of policy&#x2F;process in securing it -- usually through ignorance&#x2F;incompetence).<p>My argument is not that developers are stupid or ignorant, but that security isn&#x27;t baked-in to their design decisions as a guiding principle.<p>And that often leads to insecure software and&#x2F;or sloppy&#x2F;insecure integration of security <i>after the fact</i>.<p>If more developers thought about security as a <i>feature</i> rather than an inconvenience to be given little thought or just lip service, that would make a big difference.<p>Edit: Clarified verbiage and fixed typos.')