Item(by='aidenn0', descendants=None, kids=None, score=None, time=1609779178, title=None, item_type='comment', url=None, parent=25625332, text='Common Lisp (hereafter Lisp for concision) is <i>differently</i> dynamic, not strictly more dynamic.<p>One quick example: standard-class objects in Lisp are mostly more dynamic than python objects[1] but structure-class objects are quite static, and compilers will use this to their advantage.<p>On top of this, functions in python are in fact objects; in python you can do this just fine:<p><pre><code>  def foo():\n    foo.bar = 3\n\n  def bar():\n    print(foo.bar)\n</code></pre>\nThere are obviously other ways to accomplish this in lisp, but the fact that someone <i>might</i> do something like this can inhibit optimizations.<p>If you read the Lisp specification you will see dozens of places where they allow for opting out of dynamism in ways that help the compiler optimize.  Type declarations are one and the fact that a function defined in a single file is considered to have a fixed definition for the scope of the file is another.<p>1: It&#x27;s not quite as easy to add new slots to Lisp standard-class instances on the fly as it is to python class instances, but it&#x27;s doable, and Lisp, of course, supports class redefinition in a way that few other languages (including Python) do.')