Item(by='Blikkentrekker', descendants=None, kids=None, score=None, time=1611792716, title=None, item_type='comment', url=None, parent=25934450, text='&gt; <i>So the example manages to evade any need for encapsulation.</i><p>In <i>Scheme</i> and many other lisps there is no difference between “objects” and “records” and “fields” and “methods”.<p>Defining a record with a number of fields also defines accessor functions, such that:<p><pre><code>  (define-record point\n    (fields (mutable x) (mutable y)))\n</code></pre>\ndefines the following procedures:<p><pre><code>  make-point\n  point?\n  point-x\n  point-y\n  point-set-x!\n  point-set-y!\n</code></pre>\nAll these names can optionally be changed to something else.<p>Encapsulation is simply enforced by not exporting any of these procedures from the module wherein they are defined.<p>Any arbitrarily more complicated functions can be built on top of these which can be exported.<p>As such, there is no meaningful difference any more between an object and a record, there is no special “dot notation” for field access and method calls, and normal procedure calls are used. This follows the general lisp design principle of avoiding special syntax as much as possible and using ordinary procedure calls for everything. There is no special “subscript notation” for `vector[i]` either, and `(vector-ref vector i)` is used instead.')