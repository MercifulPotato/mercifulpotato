Item(by='Geminidog', descendants=None, kids=[25733193], score=None, time=1610383877, title=None, item_type='comment', url=None, parent=25731495, text='Right, but the article says that Haskell pushes these side effects to the edge. I am not saying haskell claims this, I&#x27;m saying the article claims this. Haskell actually doesn&#x27;t do this in practice as tons of people use do notation and state monads. The more people use do notation, the more they are embracing side effects. Literally I&#x27;ve seen haskell code where all function definitions had some form of do notation which is basically against the claim made by this article.<p>To push side effects to the edge you have to only use do notation and monads when you absolutely have no choice, which is not done in practice with haskell.<p>&gt;The presence of monads does not necessarily mean side effects<p>The presence of a functor does not mean side effects. The presence of a monad implies composition and binding which does imply a side effect. Even maybe monads composed have side effects that can produce output that the function itself can never produce on it&#x27;s own.<p>For example let&#x27;s say I have a maybe monad that will never produce &quot;Nothing.&quot;<p><pre><code>   b :: int -&gt; Maybe Int\n   b x = Just x\n</code></pre>\nbut I can produce a side effect by binding it with Nothing.<p><pre><code>  Nothing &gt;&gt;= b\n</code></pre>\nThe above yields &quot;Nothing,&quot; even though it is not part of the definition of b. It is a contextual side effect passed on through monadic composition. Normal composition outside of monadic composition usually does not have this property.')