Item(by='maria_weber23', descendants=None, kids=None, score=None, time=1609546918, title=None, item_type='comment', url=None, parent=25608241, text='Last part from the article: &quot;But maybe I’m imaging things. Maybe the reason progress stopped in 1996 is that we invented everything. Maybe there are no more radical breakthroughs possible, and all that’s left is to tinker around the edges. This is as good as it gets: a 50 year old OS, 30 year old text editors, and 25 year old languages. Bullshit. No technology has ever been permanent. We’ve just lost the will to improve.&quot;<p>Yeah, that&#x27;s obviously bullshit. But we also didn&#x27;t lose the will to improve. The leap from where we were 20 years ago, to where we are now, isn&#x27;t mind-boggling. I still remember my Turbo Pascal days, my Delphi days. Sure things to improve... But overall this experience was sufficient. I wouldn&#x27;t really have trouble implementing any of the projects I worked on in the past 10 years with Delphi, or even Turbo Pascal. It would sure suck, and take longer, but it wouldn&#x27;t be a dealbreaker...\nThis is the raw definition of a non-revolutionary progress.<p>The problem is that the next step of software engineering is incredibly difficult to achieve. It&#x27;s like saying &quot;Uh math&#x2F;physics didn&#x27;t change a whole lot since 1900&quot;. Well it did, but very incrementally. There is nothing revolutionary about it. Einstein would still find himself right at home today. That doesn&#x27;t mean progress was stalling per se.<p>It means that to get &quot;to the next level&quot; we need a massive breakthrough, a herculean effort. Problem also is that nobody really knows what that will be... For me, the next step of software engineering is to only specify high-level designs and have systems like Pluscal, etc. in place that automatically verify the design and another AI system that code the low-level implementation. We would potentially have a &quot;cloud compiler&quot; that continuously recompiles high level specs and improves over time with us doing absolutely nothing. I.e. &quot;software development as a service&quot;. You specify what you want to build, and AI builds it for you, profiting from continuous updates to this AI engine world-wide.')