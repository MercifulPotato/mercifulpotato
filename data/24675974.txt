Item(by='bArray', descendants=None, kids=[24677701], score=None, time=1601774893, title=None, item_type='comment', url=None, parent=24674490, text='Why choose this over the other options? Just some thoughts:<p>1. I like that comments are part of the standard. I wrote my own C++ JSON parser that allows for comments too.<p>2. Is it strict about indentation? One thing you can never get programmers to do on significantly sized teams is consistent indentation. Is that tab+space? Or spacex5? Is it going to break if a tab sneaks into Git? (Setting up Git push rules just annoys and confuses people.)<p>3. &quot;without the syntatic clutter of JSON&quot; - I happen to like it. I can compact it quite far if I need to. I also like the fact I can spit it out over a debug server and JS will just magically start reading it.<p>4. Something really cool would have been the introduction of typed data. One way we achieve this via JSON is to create a template file which would declare something like (in a file named &#x27;template.json&#x27; or something):<p><pre><code>    {\n      &quot;data&quot; : { &quot;type&quot;: &quot;float&quot;, &quot;default&quot;: 0.0, &quot;min&quot;: -1.0, &quot;max&quot;: 1.0 }\n    }\n</code></pre>\nObviously this requires checking in the code, but it does build up some kind of format checking and sanity. It can also warn you that it&#x27;s using a default rather than a config defined value.<p>It would be nice if there was then the ability to define type syntax... But I fear this might be going too far.<p>5. Another thing I do with JSON is inheritance. So you define a &#x27;parent&#x27; property at the top of a file, the values are loaded from the parent and then the child loads theirs over the top. Why have this? We usually need some per-application configuration but mostly it stays the same. It saves having to write it multiple times. You can even break it down into sections to keep each configuration file smaller.<p>(NOTE: For inheritance, a top tip is to implement &quot;maximum depth&quot;, encase you get into a loop.)')