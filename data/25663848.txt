Item(by='mcguire', descendants=None, kids=None, score=None, time=1609973759, title=None, item_type='comment', url=None, parent=25658797, text='Speaking as a career-long technical person,<p>1) All of those people aspects are <i>very, very</i> important.<p>2) Stacks don&#x27;t matter. Languages don&#x27;t matter. Editors&#x2F;IDEs&#x2F;whatever-the-hell-else doesn&#x27;t matter. What I used to call a &quot;firm theoretical grounding&quot; does matter.<p>What does that mean? At the base, the ability to write clear code that other people can read, and the ability to read code that other people have written. (Don&#x27;t laugh, it&#x27;s not uncommon to get called in when someone has bugs (or features) they can&#x27;t get fixed after they&#x27;ve painted themselves into a corner.) (For me, the key to this is formal logic and what is variously known as axiomatic semantics (<a href="http:&#x2F;&#x2F;homepage.divms.uiowa.edu&#x2F;~slonnegr&#x2F;plf&#x2F;Book&#x2F;Chapter11.pdf" rel="nofollow">http:&#x2F;&#x2F;homepage.divms.uiowa.edu&#x2F;~slonnegr&#x2F;plf&#x2F;Book&#x2F;Chapter11...</a>) or Hoare logic, or predicate transformer semantics. Theoretical, right? But the ability to think about a piece of code as a block of text, without &quot;simulating the computer&quot; is darn useful.)<p>Further, algorithms and data structures. No, you don&#x27;t have to memorize a bunch of algorithms. But it&#x27;s a good idea to understand what kind of things are out there and what they can do, as well as having experience writing them yourself. (I get downvoted a lot, but I do have to point out that everytime anyone puts code in an editor, they&#x27;re building a data structure or writing an algorithm.)<p>Then, at least some knowledge of computer architecture and all the stupid little electricy bits. :-)<p>Then there is a stack of things that build on that, some of which are only relevant to some tasks: databases, network protocols, and so on.<p>None of this has changed fundamentally in 30 years. The only major change I&#x27;ve seen is an increase in the importance of continuous math---which I noticed because I&#x27;ve always had a hate-hate relationship with trig and calculus and so on. But all of machine learning and statistical techniques are based on that nastyness, so you can&#x27;t ignore it any more.<p>Why does nobody mention technical things? For one thing, they&#x27;re hard. You can practice communication at the grocery store. Not so much with technical matters. Further, the people aspects are important everywhere, whereas technical things just aren&#x27;t. And at some point, it&#x27;s easier to convince some one else to do the work while you have the ideas. (Personal motto: Ideas are cheap. Implementation matters.)<p>Finally, technical mastery is not really encouraged. Outside of academia, there are no real incentives for it. (Inside academia, there are almost no incentives for it.) After 20, 30, or 40 years, people will migrate on to something else, even if they don&#x27;t like it or are really horrible at it.')