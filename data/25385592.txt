Item(by='bluGill', descendants=None, kids=[25386151], score=None, time=1607694165, title=None, item_type='comment', url=None, parent=25383829, text='Yes, more features make a better language. I need those features to abstract my software so I can wrap my mind around all 15 million lines of code I have to deal with (that is both too many for one human to understand, and yet I know many will respond that they work on much larger system!).<p>We don&#x27;t need new languages without features: it has already been proven that you only need exactly one feature in your programming language to write any program possible. Look up single instruction languages for proof that it is possible and such single features languages exist.<p>What we need are languages with many features that are easy to use to create complex programs that are still easy to understand.<p>C++ is a very powerful language, but the various features do not fit together well and so even experts tend not to know how to use everything and so the whole suffers. Most languages since then have attempted to take the [all or some subset of] the features of C++  to make a better language. (when any other language comes up with a good feature C++ copies it so is often getting credit for ideas that actually come from elsewhere - possibly better)<p>When someone is saying they want less features they mean one of the following: &quot;I don&#x27;t know how to use some feature and I&#x27;ve gotten this far so it must be useless&quot;.  &quot;That feature is useless for my domain so I don&#x27;t want to pay the compromises required to allow it&quot;.  &quot;That feature is too often abused to write bad code and so it isn&#x27;t worth having&quot;. &quot;That features is neat but it makes the whole language ugly and so it isn&#x27;t worth having&quot;. There is probably something I missed but you get the idea. Some of the above are logical fallacies, the others are compromises that apply to a particular problem.  None of them are universal truths for problems.')