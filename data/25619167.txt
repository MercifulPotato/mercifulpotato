Item(by='ianamartin', descendants=None, kids=[25619597, 25619648, 25619596, 25619241], score=None, time=1609645071, title=None, item_type='comment', url=None, parent=25617083, text='One technique I&#x27;ve used as a team lead to limit tech debt that makes it into production is to have devs write prototypes in a different language than what we actually support in prod. This has a few really nice advantages.<p>1. Devs enjoy getting to use new languages in the real world, and helps keep us learning.<p>2. The better you know a language, the more tempting it is to take shortcuts. When you don&#x27;t know a language well enough to write really gross things that work &quot;for now&quot;, you have to think carefully about the simplest possible solution to a problem that you can express clearly in an unfamiliar language.<p>3. You learn tons the first time you solve a particular problem. At the end of the solution, when all of your hacks and tradeoffs are fresh in your mind, you are the best possible person to tackle all the shortcomings and immediately do a rewrite in a language you are expert in.<p>3. Management really can&#x27;t twist your arm to just go ahead and transition the prototype to MVP. All you can really do is throw it out there as a public beta with no guarantees while you build the MVP properly using everything you just learned from doing it the first.<p>4. You can start collecting feedback on what users want included in v1 and get an idea of where the user base is heading with their desires and plan some of that into your design, again reducing long-term tech debt.<p>If your prototype sticks the landing well enough for management to decide to move forward to MVP, then it&#x27;s good enough to mark your territory in the problem space while you do the rewrite. You won&#x27;t lose competitive advantage while it&#x27;s sitting out there in a separate VPC collecting users and activity.<p>In a healthy company, this isn&#x27;t a difficult sell to management. They&#x27;ll understand the short and long-term value to the company. In more toxic environments, it will look more like you&#x27;re throwing a poison pill into your dev processâ€”which you kind of are. So, you know, tread carefully. But when people buy in to this process, it works really nicely and has far better long-term outcomes.')