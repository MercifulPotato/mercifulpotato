Item(by='mattlondon', descendants=None, kids=None, score=None, time=1602535933, title=None, item_type='comment', url=None, parent=24754200, text='Thanks (and to the other comment who suggested the same talk).<p>This was useful.<p>The tl;dr for anyone who can&#x27;t spend an hour watching (why are so many Unity things done as videos?!?! so infuriating!) is that you use &quot;Scriptable Objects&quot; (new to me - this is a first-class thing in Unity) to store common state and so break statically defined dependencies between Game Objects by having them share the Scriptable Object rather than reference each other.<p>So you might have a Scriptable Object that contains the player&#x27;s score&#x2F;coins picked-up&#x2F;zombies killed etc. On its own this is conceptually basically just a number&#x2F;several values&#x2F;etc wrapped in a small singleton class. You then reference that Scriptable Object in your player game object&#x2F;script that will mutate that value.  Anything else that needs to know the score&#x2F;coins picked-up&#x2F;zombies killed (e.g. UI code) references the <i>same</i> Scriptable Object.<p>So now two separate parts of the game share the state without being statically bound to each other (they are only bound to the Scriptable Object).  Plug in as many or as few new components all using the same state stored in the same Scriptable Object and nothing else needs to change as they only share the Scriptable Object. No references to other game objects required.<p>You can do the same for events - create a Scriptable Object for an event (e.g. PlayerHurt or PlayerShoot etc).  Since Scriptable Objects can contain code like any other class, you can have GameObjects register their interest in this shared singleton event by calling &quot;PlayerHurt.RegisterListener(this)&quot; etc, and then have another GameObject trigger&#x2F;raise&#x2F;activate the event ScriptableObject (&quot;PlayerHurt.Trigger()&quot; etc). Neither side know about each other, so you can plug in as many or as few listeners as you want.  The talk uses some extra cleverness to use a UnityEvent to allow for a function call in reaction to the event being triggered - this means a lot can be done directly in the unity editor, but that seems separate from the main secret-sauce of the scriptable object as the mechanism for shared state.<p>Site here that basically repeats the video nearly verbatim: <a href="https:&#x2F;&#x2F;unity.com&#x2F;how-to&#x2F;architect-game-code-scriptable-objects" rel="nofollow">https:&#x2F;&#x2F;unity.com&#x2F;how-to&#x2F;architect-game-code-scriptable-obje...</a><p>Cheers!')