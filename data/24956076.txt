Item(by='Twisol', descendants=None, kids=None, score=None, time=1604186708, title=None, item_type='comment', url=None, parent=24955227, text='&gt; Writing functions that receive other functions as input can lead to over complicated code that&#x27;s really hard to read.<p>Although your opinion is more extreme than I can get behind, I don&#x27;t entirely disagree. I find monads and applicative functors are far easier to understand when presented in their non-higher-order formulation -- that is, &quot;flatten&quot; instead of &quot;bind&quot;, and &quot;merge&quot; instead of &quot;ap&quot;. You still need to understand &quot;map&quot;, but that&#x27;s an incredibly common pattern that you can get a lot out of for putting in just a little.<p>I wrote a little comment on this earlier this week.<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24894849" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=24894849</a><p>I also agree with your opinion elsewhere about preferring combinators instead of directly passing higher-order functions, but I suspect that&#x27;s much more of a style and design issue than a language feature distinction. You still need higher-order functions (and I&#x27;m frustrated weekly by Java&#x27;s lack of higher-kinded types or pleasant existential types) as the basement layer to expose a beautiful API in more natural terms.')