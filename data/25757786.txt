Item(by='bigiain', descendants=None, kids=None, score=None, time=1610509648, title=None, item_type='comment', url=None, parent=25757314, text='&gt; What is the tech stack you&#x27;d chose for your startup<p>Whatever you can build your mvp and iterate fastest in.<p>Use whatever source control you&#x27;ve used most often and are most proficient in - if that&#x27;s CVS-RCS, use it anyway - you can always change to git when you get a second dev.<p>Do not even consider Kubernates unless you&#x27;ve used it so much you&#x27;ve forgotten how to configure a regular VM.<p>Do not learn a new database. Use whatever relational db you&#x27;re most familiar with, or choose MySQL (or a variant). You won&#x27;t need specialised key&#x2F;value stores or time series databases until you scale past what a big MySQL&#x2F;Maria&#x2F;Aurora instance can handle, and you&#x27;ll have learnt a _lot_ about your problem space by the that&#x27;ll give you a real understanding of what data storage&#x2F;query problems you have.<p>Pick a service and frontend framework you&#x27;re familiar and experienced in and which has a big enough user base to provide decent support. Ruby on Rails, WordPress&#x2F;PHP, Django&#x2F;Python, whatever the relevant Microsoft equivalents are. DO NOT decide the first thing you need to do is write your own framework. That is _never_ the right answer. It is totally not true that &quot;everybody else is an idiot&quot;. Those frameworks are familiar because they work - they solve enough of the common problems without making the uncommon parts of your project too much harder than doing it another way.<p>Throw away everything you don&#x27;t need to get to mvp. You almost certainly don&#x27;t need GraphQL or caching or service metrics or messengers or bug&#x2F;project management software to get to mvp. All that can wait until after your second dev and after you&#x27;ve sat potential customers in front of your mvp. Probably until after you&#x27;ve sold to your first 10 or 50 customers. Bug reports in your email inbox work just fine until they don&#x27;t, wait until they don&#x27;t before you spend time solving that problem.<p>Just build something and ship it. It _really_ doesn&#x27;t matter what you wrote it in, it&#x27;s gonna be rewritten anyway if it succeeds. Many times. Proving someone will actually pay for it is a way more valuable use of your time at the beginning than carefully evaluating the advantages and disadvantages of Go vs Rust when you never used either in anger.<p>A &quot;startup&quot; is usually about building a dog and pony show about how you can solve a problem for a group of people and sell the solution to them - in a way where the size of the group and the price they&#x27;re willing to pay and a plausible conversion rate makes you a unicorn&#x2F;decacorn&#x2F;whatever-we&#x27;re-calling-it-now. You borrow or fake as much of it as you can. Customers care about you solving a problem for them, not &quot;what your tech stack is&quot;. Investors care about customers and how much they&#x27;ll pay you and how many other people have their problem, not &quot;what your tech stack is&quot;.<p>Note: Some of that advice will be &quot;obviously wrong&quot; to you because there&#x27;s details of your idea you haven&#x27;t shared. If you&#x27;re doing computationally expensive or data intensive work, by advice about Kubernates or databases probably don&#x27;t apply. But you&#x27;ll know if that applies. Do not fall into the trap of thinking &quot;but I might need a globally distributed shared KV store when I get to 1 billion concurrent users!&quot; when you have zero users, and no clear path to even getting your first 10 or 100 users.')