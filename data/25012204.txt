Item(by='crdrost', descendants=None, kids=[25014788], score=None, time=1604706666, title=None, item_type='comment', url=None, parent=25011469, text='&gt; So it was not so much about any technical debt, but rather about the lack of understanding of what the client wanted (often the ignorance of the client himself of what he actually wanted).<p>I cannot emphasize enough how much I want you to read, watch, listen to Ward Cunningham in his own words. :)<p>If you know what technical debt really is, then this sentence kind of sticks out as a sore thumb, as it is literally saying &quot;So it was not so much about any technical debt, but rather about the technical debt.&quot;<p>Technical debt viewed this way is not just “hurdles in my code that I don’t like to jump over.” It is a subset of those hurdles and kludges and nicks and grumbles. What subset? Precisely the subset that corresponds to our lack of up-front understanding of what we were building when we were at first building it.<p>Put another way, every single problem we can solve well has at least one (maybe many) perspective from which that solution seems “relatively straightforward.” If you can specify that perspective in a way that a computer can understand it, you can think of that as “creating an algebra” for that problem and similar problems, or perhaps a “domain-specific language.” Technical debt is precisely the mismatch between the language you are programming in, and the domain you are programming for. Syntactically, this &quot;language&quot; might be some programming language like Java. But semantically, you get to define your own classes and methods and create your own little world inside that language, where things can be combined and chained together, and the richness and algebraic predictability of that little world informs the spaghettification and robustness of your code to implement the algorithm within that world.<p>Viewed this way, a lot of programming today spends absolutely no investment into that &quot;little world&quot; and just consists of writing FORTRAN. Just pages and pages and pages of FORTRAN. I mean, you&#x27;re writing it in some other language, maybe Python, maybe Java: but you do not have any sort of little algebraic world that you phrase your problem in, you just say &quot;fetch this input, fetch that input, begin subroutine with vaguely suggestive name to label the following steps, compare the two inputs, fetch other data as needed, perform these side-effects, modify these variables, return to the beginning of some loop.&quot; Very verbose individual commands being operated on individual data structures.<p>So I tell you &quot;make sure that if I press this button a hundred times you don&#x27;t start the job a hundred times, only one job per project name should be running at any given time, but if I press the button while a job is ongoing you should still probably trust that I made a mistake when I first pushed the button and now I want to abort if possible and retry with the latest version&quot; and because you don&#x27;t have a rich vocabulary for that you&#x27;re stuck programming something in a &quot;redis assembly language&quot; or whatever,<p><pre><code>    redis_job_flag = &quot;job_id_for_&quot; + project.name;\n    current_job = redis.get(redis_job_flag);\n    if (current_job) {\n      redis_complete_flag = &quot;job_is_complete_&quot; + current_job;\n      add_followup = redis.setnx(redis_complete_flag, &quot;afterwards=run_again&quot;, 60*minutes);\n      if (!add_followup) {\n        followup = redis.get(redis_complete_flag);\n        if (followup == &quot;afterwards=run_again&quot;) {\n          &#x2F;&#x2F; someone else got there first\n          return;\n        } else {\n          &#x2F;&#x2F; race condition, it completed before we could\n          &#x2F;&#x2F; set the followup attempt, so we need to retry\n          &#x2F;&#x2F; this method to restart it\n          return recurse();\n        }\n      } else {\n        &#x2F;&#x2F; ok we can trust that they will redo what they just did\n        return;\n      }\n    }\n    &#x2F;&#x2F; if we&#x27;re here then we did not see any prior jobs.\n    my_id = generate_random_id()\n    try_to_setnx = redis.setnx(redis_job_flag, my_id, 60*minutes);\n    if (!try_to_setnx) {\n      &#x2F;&#x2F; race condition, someone else got started before me.\n      &#x2F;&#x2F; better still set a follow-up just in case.\n      return recurse();\n    }\n    &#x2F;&#x2F; hooray! I am the unique one running the job.\n    redis_complete_flag = &quot;job_is_complete_&quot; + my_id;\n    looping = true\n    while (looping) {\n      doTheActualThing();\n      really_done = redis.setnx(redis_complete_flag, &quot;complete&quot;, 60*minutes);\n      if (really_done) {\n        redis.unset(redis_job_flag);\n        looping = false;\n      } else {\n        &#x2F;&#x2F; let someone else tell us to rerun again\n        redis.unset(redis_complete_flag);\n        &#x2F;&#x2F; bug we ran into where someone made us rerun jobs\n        &#x2F;&#x2F; for an hour, we reset the timeout for this here\n        redis.set(redis_job_flag, my_id, 60*minutes);\n      }\n    }\n</code></pre>\nand then this requirement is restated for other buttons and that gets copy&#x2F;pasted everywhere and other mutations get inserted in various places.<p>And I think what Ward would tell you is not &quot;never write all those lines of code&quot; but that this eventually needs a refactor so that it matches the business language,<p><pre><code>    repeatableDebounce(&quot;project_jobs&quot;, project.name, doTheActualThing);\n    &#x2F;&#x2F; repeatableDebounce defined elsewhere, \n    &#x2F;&#x2F; it is part of our &quot;little world&quot;\n</code></pre>\nBasically, Ward wants you to start doing &quot;aspect-oriented programming&quot; because it turns out that is a felicitous perspective from which to view these requirements about needing to cache whether jobs are in-transit and if they are then to retry them and whatever else. Technical debt is the noise in the above implementation being pasted and tweaked across the entire codebase because we didn&#x27;t have this perspective when we were starting.')