Item(by='badsectoracula', descendants=None, kids=[25450955], score=None, time=1608164014, title=None, item_type='comment', url=None, parent=25448208, text='&gt; I&#x27;m not sure what you mean waste of time. If they weighed the cost of doing a port versus the cost of staying on GTK1 or GTK2 and backporting things, and they chose the port, it seems like according to them that would be the least time-wasting option.<p>If GTK3&#x27;s API was backwards compatible (both in binary and source form) with GTK2&#x27;s API then the developers of all the applications that relied on GTK2 wouldn&#x27;t have to spend any time changing their applications to work with GTK3 nor make any &quot;weighting&quot; between doing these changes or staying on a library that wont receive any further updates and features after a while. And in practice this isn&#x27;t really much of a choice unless the GTK developers <i>also</i> committed to updating, fixing and improving (ie. adding new features) to the previous library - at which point why bother with the new version at all?<p>This is a waste of time because the developers of those applications could have spend their (often limited, since they&#x27;re not paid to make those applications and instead make them in their free time) development time on fixing bugs and adding features to these applications that directly benefit the end users instead of trying to catch up with whatever stuff GTK3 broke (and now will be broken again in GTK4).<p>&gt; I get what you&#x27;re saying, but asking &quot;why doesn&#x27;t my old API get new features&quot; is a different thing than asking for backwards compatibility because that entails actually modifying the old applications to support new API features, not just maintaining compatibility with them.<p>No, this is exactly backwards compatibility in the best way: the old applications get new features <i>without</i> even having to recompile them. This is how it works, e.g. in Win32 where as i wrote above you get new features in applications that were compiled 20+ years ago.<p>You only need to modify existing applications so that they can use new features when it makes sense for those new features to be requested by the application. But, for example, you do not need to modify existing GTK2 applications to add Wayland support in GTK2, or to improve the a common dialog like the file picker, or to add an emoji picker in text editing areas (which, btw, is also a feature that Windows applications got in Windows 10 which works even in applications compiled many years ago before emoji was a thing outside Japan), or a bunch of other stuff.<p>What you describe would only be an issue if someone statically linked against GTK but the overwhelmingly vast majority of applications link against GTK dynamically and on Linux they all pretty much use the distribution&#x27;s libraries instead of bundling their own.<p>&gt; If someone really wants to step up and backport features to GTK2, that&#x27;s always possible, you don&#x27;t need to wait for the GTK4 developers to figure it out.<p>Yes, of course anyone could improve GTK1, GTK2, etc but what is being discussed here isn&#x27;t if it is technically possible to improve these libraries without breaking backwards compatibility (it obviously is) but about what the (official) developers of these libraries are actually doing with regards to backwards compatibility.')