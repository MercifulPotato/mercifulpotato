Item(by='rdsubhas', descendants=None, kids=None, score=None, time=1607078133, title=None, item_type='comment', url=None, parent=25290339, text='This was a trend in 2002. PSP (PLSQL Server Pages), just like ASP and PHP. <a href="https:&#x2F;&#x2F;oracle-base.com&#x2F;articles&#x2F;9i&#x2F;plsql-server-pages-9i" rel="nofollow">https:&#x2F;&#x2F;oracle-base.com&#x2F;articles&#x2F;9i&#x2F;plsql-server-pages-9i</a><p>Many large Banks (including Bank of New York where I worked in) and ERPs have stored procedures as their life and blood, have invested and built huge tooling over it – namespacing, dependency tracing of who&#x27;s using what, monitoring, etc. It&#x27;s excellent at having a tightly integrated, closed system where the Database is the source for authorization, module ownership, etc.<p>But there were reasons why it was not successful:<p>* Severe vendor restrictions. e.g. For a long time, Oracle could not do distributed compile-time PL&#x2F;SQL checks. If you changed a function definition, other procedures that depended on it would break. But if you change a <i>procedure&#x27;s</i> definition, it wouldn&#x27;t tell you anything until you deploy it at runtime and something somewhere will fail, or recompile every other procedure. I don&#x27;t know if it&#x27;s fixed yet.<p>* Testing, or the severe lack of tooling that we have taken for granted – code coverage, easy local machine unit tests, etc<p>* Lack of modules (availability of an ecosystem or community of modules to solve recurring problems), and the subsequent dependency management and versioning overhead that comes with it<p>* Debugging, i.e. putting breakpoints, remote debugging, logging, good exception handling, etc<p>* Change management, graceful rollouts, rollbacks, etc. There is no so-called &quot;Router&quot; for stored procedures, they&#x27;re all tightly coupled with each other, so there is no easy way to rollout and rollback new versions quickly without recompiling each time<p>* Connection limits. There is a tradeoff on a database being good at all the above – and how many concurrent connections it can support. It was impossible to simply &quot;pass through&quot; entire web traffic over to the underlying connection, without investing in quite heavy tooling<p>Overall, if you already have put all your eggs and tooling into one giant, well designed, well governed database – then PSPs are a natural evolution forward.')