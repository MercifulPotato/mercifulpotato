Item(by='lovehashbrowns', descendants=None, kids=None, score=None, time=1602538740, title=None, item_type='comment', url=None, parent=24759454, text='We use terraform and terragrunt by themselves to deploy lambdas. No frameworks. It&#x27;s slightly more work, I guess. But deploying and understanding how deployments happen is easier this way. Plus, getting any kind of framework approved in a corporation is annoying as heck, whereas we already use terraform and terragrunt.<p><a href="https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;aws&#x2F;latest&#x2F;docs&#x2F;resources&#x2F;lambda_function" rel="nofollow">https:&#x2F;&#x2F;registry.terraform.io&#x2F;providers&#x2F;hashicorp&#x2F;aws&#x2F;latest...</a><p>The biggest annoyance is unit testing, although it forces certain good habits on us. So for example, since we don&#x27;t use SAM, we have to do unit testing separately (our code is in Python). But because we can&#x27;t exactly run a lambda via Python, we have to put most of our code in the layers that our lambdas import.<p>So we run unit tests on the layers, and the positive is that we can essentially copy and paste the code that our lambdas would run into the unit tests. And then we can keep it DRY because almost all the code is in layers, and that incentivizes us to create generic functions that can be used across all of our lambdas.<p>For things like unit testing DynamoDB, we use Moto which works exceptionally well.<p><a href="https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;moto&#x2F;" rel="nofollow">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;moto&#x2F;</a><p>More detail:<p>Our terraform has infrastructure code for:<p>API Gateways<p>Hard-coded API keys we use for testing<p>DynamoDB tables<p>IAM roles used by the Lambdas and Step Functions<p>Lambdas themselves<p>s3 buckets used for the Lambda zip files and state<p>Step functions')