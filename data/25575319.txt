Item(by='anonacct38', descendants=None, kids=None, score=None, time=1609277580, title=None, item_type='comment', url=None, parent=25575051, text='Go&#x27;s journey here has been interesting. Early on it was possible (though rarely seen in practice) to end up with a cpu bound thread not yielding because it didn&#x27;t hit yield point like I&#x2F;O.<p>Then they added a guarantee that if your loop called a function, the scheduler would be able to make the goroutine yield. <a href="https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;go1.2#preemption" rel="nofollow">https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;go1.2#preemption</a><p>This mostly worked although you could still have a CPU-bound thread not making any function calls. I also personally ran into a pathological issue where the scheduler was being invoked, but a heuristic kept the current goroutine running so others were still starved.<p>Finally they added true pre-emption (not yielding) in 1.14 <a href="https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;go1.14#runtime" rel="nofollow">https:&#x2F;&#x2F;golang.org&#x2F;doc&#x2F;go1.14#runtime</a> it looks like it just sends signals and saves state.<p>Once nice thing is that if I understand the go runtime correctly, work stealing by scheduling goroutines on different threads has been a thing for a long time.')