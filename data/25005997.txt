Item(by='barnacled', descendants=None, kids=[25009632], score=None, time=1604651157, title=None, item_type='comment', url=None, parent=25003214, text='All very reasonable, thank you for taking the time to reply!<p>I think it&#x27;s first important to note that Russ Cox himself admitted that the whole go dep vs modules thing was poorly handled which really does back up my point of view - <a href="https:&#x2F;&#x2F;twitter.com&#x2F;_rsc&#x2F;status&#x2F;1022588240501661696" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;_rsc&#x2F;status&#x2F;1022588240501661696</a><p>&gt; looks like from that thread that the Go team was never on board with certain technical aspects of how dep was implemented.<p>Note that the package management committee were _regularly_ meeting with Russ about this, e.g. <a href="https:&#x2F;&#x2F;twitter.com&#x2F;_rsc&#x2F;status&#x2F;1022588240501661696" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;_rsc&#x2F;status&#x2F;1022588240501661696</a><p>They were well apprised of what was going on, I am not sure there was much of an end-run at all - <a href="https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034893126320771072" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034893126320771072</a> - note that Russ was just ignoring the literal package management committee set up to look at this - <a href="https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034893509394882562" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034893509394882562</a><p>Look at <a href="https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034894397261979649" rel="nofollow">https:&#x2F;&#x2F;twitter.com&#x2F;sdboyer&#x2F;status&#x2F;1034894397261979649</a>:<p>&#x27;To the extent i was defensive, it was primarily from having to field yet another greenfield idea, after months of silence.&#x27;<p>If the technical lead literally ignores the package management committee set up to look at package management and goes off and does his own thing - what does that say about community engagement?<p>This is about the largest [officially sanctioned] community engagement on something semi-core to the language and look at what happened.<p>&gt;I have to admit I&#x27;m a bit biased here, I use Go and Go modules, followed closely the discussions at the time, and strongly prefer the trade offs made by the (now official) Go package manager over those made by dep.<p>I don&#x27;t even think this is relevant - it&#x27;s perfectly fine for people to disagree and for Russ to say no, that&#x27;s his role as BDFL, but to ignore and not engage at all? The committee could have been pushed in the direction Russ preferred rather than going off and doing his own thing. Or perhaps they could have been told &#x27;sorry we have decided to go in another direction so we don&#x27;t need you any more&#x27;.<p>&gt;They&#x27;ve made almost no changes to the language so far<p>I was involved in contributing to the compiler in 2011 back when many changes were made both in terms of language, compiler and standard library. When I worked on it the compiler was written in C (!)<p>So even when that was not true, the attitude was the same (which is what put me off continuing to be involved in the project).<p>&gt;I believe Russ Cox&#x27;s check&#x2F;handle proposal [2] and Robert Griesemer&#x27;s try proposal [3] (both core team members) were rejected after community feedback.<p>It&#x27;s good they listen to community feedback but that&#x27;s not the same as accepting fundamental or even not that fundamental language or standard library changes.<p>Other language projects like python for example, have retained a strict attitude to development but had actual community support through small and big changes to both language and library. It is clearly possible to both maintain a strict philosophy AND accept serious patches from the community.<p>Again I really have no problem with how they approach things but I do have a problem with the dishonesty about that. They should not set up a package management committee then ignore them, or say you&#x27;ll accept proposals but then only accept core google employee ones.<p>I think sometimes people will argue back and forth on details but miss the bigger picture - perhaps that&#x27;s what we&#x27;re doing here. The culture of a project (not relevant here but also applicable to companies) always percolates down from the top - ruby, python, haskell, for a non language example of course the linux kernel - each have their own culture, attitude and approach that is clearly informed by the founders&#x2F;core maintainers. The same is clearly true of go.<p>I look forward to being proven wrong and when a significant standard library or language change occurs (and v2 is where that would have happened clearly) from the community but I don&#x27;t think it&#x27;s going to happen.<p>And again maybe it shouldn&#x27;t, maybe go is better off run the way it is, but they should be honest - you can&#x27;t have it both ways, it&#x27;s one or the other.<p>&gt;an enormous amount of work that an expert would have to put in for free<p>Finally - I dislike the gatekeeping idea of an &#x27;expert&#x27;, especially for a language like go which is so explicitly anti-academic. Surely what should matter is how well argued a proposal is? Unless you mean a go expert but there are plenty in the community who are.<p>As for enormous amount of work being put in for free, I think many would have loved to have the kudos of being the person who invented generics for go and would have happily done so. The history of open source is replete with people who have done enormous amounts of work for free - gcc for example.<p>But you could also imagine an employee of some other company being paid to do it, as happens with the linux kernel very often. Again, I really doubt that an &#x27;expert&#x27; (however we want to define it) hired by anybody other than google or even as a hobby submitting the exact same proposal would have got the acceptance Ian and Robert have received.<p>The community will be used as a sounding board no doubt to cover any edge cases they&#x27;ve not thought about but again that&#x27;s not the same as somebody being able to _submit_ changes like this.<p>In any case I don&#x27;t mean to be hostile here - I wish golang every success and it&#x27;s well deserved, the core team are extremely talented and I hope they go on to greater and greater success.')