Item(by='Twisol', descendants=None, kids=None, score=None, time=1604534807, title=None, item_type='comment', url=None, parent=24994338, text='The example of &quot;integer vs. string&quot; is too low-level to explain why algebraic data-types are useful. It&#x27;s much more valuable when trying to model a particular domain.<p>As a concrete example, consider assembly: often you can either provide a number directly (&quot;immediate&quot; mode) or refer to a register for a value (&quot;register-direct&quot; mode). You could model this as a product of &lt;mode, value&gt;, but the way you interpret the value depends on whether it&#x27;s meant to be an immediate value or a register name. We get lucky in that registers and immediates are both numbers, but there&#x27;s no reason that has to be true a priori -- perhaps we have a gloss on our assembly that treats register names as strings.<p>Moving up a level, the set of all instructions is also a natural sum type. You provide different kinds of arguments depending on which instruction you intend to invoke. In general, when the _type_ of things may depend on the _value_ of a tag chosen from some fixed family (&quot;immediate&quot; vs &quot;register&quot;, or choice of instruction), sum types are a really good option.<p>Scott Wlaschin has a nice series of posts on domain modeling with types: <a href="https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;series&#x2F;designing-with-types.html" rel="nofollow">https:&#x2F;&#x2F;fsharpforfunandprofit.com&#x2F;series&#x2F;designing-with-type...</a> . I can also highly recommend his book!')