Item(by='wegs', descendants=None, kids=None, score=None, time=1605622228, title=None, item_type='comment', url=None, parent=25122890, text='There is a minimum bar for programmers I&#x27;d want to work with. Fully understanding git, for me, is part of that bar. The problem is that many programmers don&#x27;t know how fundamental git is:<p>1) It&#x27;s like understanding the basics of databases, network protocols, or compilers. It gives a lot of insight to how things work in a pretty deep and generalizable way. How do you organize data, and why are DAGs, Merkle trees, and hashes awesome? It&#x27;s a beautiful case study in data engineering.<p>2) It&#x27;s like knowing the shortcuts in your editor. It makes you more productive. If a programmer is hunt-and-pecking to type, and gets confused by shortcut keys, they&#x27;ll be less productive.<p>Yes, I understand not all programmers will know how important it is to know this stuff, and I won&#x27;t disadvantage someone who hasn&#x27;t done this YET in hiring. But I would never hire the type of programmer who says &quot;I don&#x27;t need to know this.&quot; You do.<p>I&#x27;m sorry, but it takes a couple weekends of work to write yourself a git end-to-end from scratch. That&#x27;s 0.5% of the time you put into a CS degree. If you don&#x27;t have the interest, discipline, or drive to do that, there are plenty of jobs out there.<p>git internals are simple, but hard. Like Go. If you don&#x27;t understand them, the userspace is a near-infinite pile or arcane complexity, incantations, half of which break something in counter-intuitive ways. If you do, it&#x27;s a matter looking up the right command in the docs in a few minutes.<p>Yes, compilers, database, and other tools abstract away a lot of stuff. But if you don&#x27;t understand the internals, you&#x27;re likely to hurt yourself and my system in very bad ways. I don&#x27;t want that on my team. My experience is good programmers are fluent one or two abstractions up and down, to not e.g. make a database query that does a full table walk, run out of stack space with a compiler that doesn&#x27;t do tail recursion (and conversely, know they can use tail recursion with ones that do), etc. A tool you use every day definitely falls into the category of Stuff You Ought to Know, in a way that understanding how quantum tunneling is used in an SSD is in the category of Stuff You Don&#x27;t Need to Know.<p>If you&#x27;re hurting yourself with git, that&#x27;s a good signal it&#x27;s in the Stuff to Know category. And if you&#x27;ve wasted more than a few hours fighting git, as it sounds you have, it sounds like making a focused effort to learn it will save you time in the long term. Probably in a few months, even.')