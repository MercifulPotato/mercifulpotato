Item(by='davewritescode', descendants=None, kids=None, score=None, time=1602595374, title=None, item_type='comment', url=None, parent=24758772, text='My company tried really hard to make serverless work on a new part of the platform we rolled out.  Our cloud team and management drank the AWS koolaide on serverless and went 100% all in for all new use cases implemented in this particular platform.  It was probably one of the biggest mistakes in the history of the company because doing serverless right is at least as much work and running workloads on well-managed servers (which we have).  Management won&#x27;t resource it appropriately because the whole point of higher costs in serverless is to eliminate Ops budget in the first place.<p>As for running actual code, many types of workloads currently do not map to serverless at all and you won&#x27;t find out until you hit the limits.  Anything that needs to read in a lot of data from a file or do a lot of in memory computations are a lot less efficient or impossible in Lambda given the memory constraints.  If any single invocation of your lambda needs more than the alloted memory, it&#x27;ll just fail and you&#x27;ll either need to implement some heuristics based routing to the different lambdas (same code with the appropriate amount of memory) or you&#x27;ll just eat cost on every lambda invocation.  You&#x27;ll find you end up doing things like re-writing lambdas from Python into Go to make it easier to fit more in memory.  How is that not insane?<p>Although it&#x27;s not 100% true anymore, at the time serverless development was often easiest using SAM which ties you directly to AWS CloudFormation which is the biggest mistake any company can make.  CloudFormation is easily the worst thing that AWS has ever created.  It&#x27;s fine for infrastructure with lower rates of change but for applications it&#x27;s an absolute nightmare to the point where it comes up in every sprint retro on some of our teams.<p>I &#x2F;won&#x27;t even go into how crappy testing is.  It&#x27;s a complete afterthought and it shows.<p>That team has started moving towards ECS&#x2F;Kubernetes and even running Docker containers directly on EC2 instances in some cases because it&#x27;s actually saving them time over futzing with Lambda and it&#x27;s enabling them to do more faster.')