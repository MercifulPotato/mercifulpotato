Item(by='aseipp', descendants=None, kids=[25288362], score=None, time=1606997283, title=None, item_type='comment', url=None, parent=25287171, text='&gt; http&#x2F;2 and up you speak of, I know only a single F&#x2F;OSS one (ng-http2) actually used in server-side production.<p>I can think of, like, five off the top of my head (mod_http2, nginx, h2o&#x2F;quicly, about a million go apps that use http2, Rust has a production HTTP&#x2F;2 implementation or three, and Microsoft&#x2F;Apple&#x27;s implementations if you want ones on the client side.) It&#x27;s not anyone&#x27;s fault but your own if you can&#x27;t look it up. There are 23 implementations in the QUIC interop matrix which are cross tested against each other as of now, too, and it wasn&#x27;t hard to find: <a href="https:&#x2F;&#x2F;docs.google.com&#x2F;spreadsheets&#x2F;d&#x2F;1D0tW89vOoaScs3IY9RGC0UesWGAwE6xyLk0l4JtvTVg&#x2F;edit#gid=1268516408" rel="nofollow">https:&#x2F;&#x2F;docs.google.com&#x2F;spreadsheets&#x2F;d&#x2F;1D0tW89vOoaScs3IY9RGC...</a> and several of those stacks also implement HTTP&#x2F;2 as well.<p>It&#x27;s not like the internet was some rosy garden in the HTTP&#x2F;1.1 era where everything was magical and democratic and perfect. HTTP&#x2F;1.1 is easy to implement wrong, and most people just used stock HTTP servers to front their application anyway regardless of the actual protocol spoken to the end user, which is how it&#x27;s always been.<p>Besides, you don&#x27;t have to actually have to be a megacorp to see the benefit of HTTP&#x2F;2 or QUIC, you can just... try using your imagination. I have an actual real workload where I want to fetch potentially hundreds of metadata files from an HTTP server. HTTP&#x2F;2 is a dramatic performance boost for workloads like this. It&#x27;s not rocket science to see why, despite people wringing their hands about opening multiple parallel connections, etc.<p>&gt; Similarly, F&#x2F;OSS was too ubiquitous so we had to invent &quot;the cloud&quot;.<p>You&#x27;ve got a lot of things very confused in your head, it seems. FOSS was never &quot;ubiquitous&quot; until recently, and it was only allowed that status because corporations decided they could make more money with it. They can also make money with proprietary software, so they do that too when possible. You seem to be implying the rise of FOSS was some kind of &quot;outsider threat&quot; to the system which needed to be suppressed, lest it make things &quot;too good for us&quot;, and so it was then tragically coopted by Google. No, it was not; FOSS as a movement was always a captive animal from the very beginning and its viability was always at the mercy of corporations with mass market penetration and reach, not the other way around. It&#x27;s not surprising it took off; it turns out &quot;Don&#x27;t pay people for their work and keep all the profits for yourself&quot; is a tried-and-true corporate tactic for making money since basically forever.<p>Not that it&#x27;s relevant to this thread, but the sooner the free software movement realizes it&#x27;s completely failed, that it&#x27;s never even truly had a chance at success, the sooner it&#x27;ll be able to actually succeed at something.')