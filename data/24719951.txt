Item(by='Communitivity', descendants=None, kids=[24722212, 24720767], score=None, time=1602170597, title=None, item_type='comment', url=None, parent=24719525, text='Mono-repos are either a shortcut to avoid release management and dependency management, or are a way to manage development at scales approximating Google&#x27;s.<p>First, for almost all companies copying non-selectively what Google does is harmful - you are not Google.<p>Second, if you are a small team, your code only produces one binary that is shared across team boundaries, then you might be able to do with a monorepo. But if you are refactoring pieces of your code into libraries (you probably should be) and sharing those libraries for use by other teams in your company (you maybe should be), then you probably shouldn&#x27;t use a monorepo.<p>However, converting may be a painful process. Using multiple repos, one per shared product (library, SDK, web site, documentation package) is harder to manage because you need to manage your dependencies much better and pull in the correct versions for the current product.<p>You also will need to communicate changes on products better across your teams, ideally with automatic notification of new releases that include a changelog and examples of new&#x2F;changed features.<p>As part and parcel of the above you&#x27;ll need to have better release management, including a release repository.  What you use will depend on your environment, the language(s) your team uses, and your budget. There are some good Open Source dependency repositories out there that can be used to accomodate NPM-style dependencies, JAVA dependencies, and others (e.g., Artifactory).<p>In summary migrating away from monorepos is going to mean: investing in good DevOps people and giving them what they need to create&#x2F;install&#x2F;manage good processes; learning these new processes and dealing with the added work they impose on developers.  But, it also will likely give you better products and over time both speed up development time and reduce defects (in part through more well-defined API touchpoints).')