Item(by='jolux', descendants=None, kids=[25810735, 25770431], score=None, time=1610586464, title=None, item_type='comment', url=None, parent=25770286, text='In this case I don&#x27;t see how regular functions would do. It&#x27;s a way of giving a module specific behavior in a way that fits in with the application structure Phoenix enforces. That aspect of it is very Railsy, but the way it&#x27;s implemented is totally different. Elixir macros are much closer to Lisp macros than Ruby macros, because they are not object oriented. I personally find them much easier to read and understand as a result. Here&#x27;s __using__ in Phoenix.LiveView: <a href="https:&#x2F;&#x2F;github.com&#x2F;phoenixframework&#x2F;phoenix_live_view&#x2F;blob&#x2F;v0.15.3&#x2F;lib&#x2F;phoenix_live_view.ex#L459" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;phoenixframework&#x2F;phoenix_live_view&#x2F;blob&#x2F;v...</a><p>I think LiveView is a very compelling technology and I&#x27;m not sure we would have it if Elixir didn&#x27;t exist, because Elixir brought a whole raft of different perspectives into the Erlang community. Erlang and Elixir are about as close as two languages can get, and I find complaints from either camp about the other silly. It reminds me of Python vs Ruby flame wars.<p>Maybe it&#x27;s just because I&#x27;m used to C# and F# and the way they feel in the .NET world, but Elixir and Erlang both feel like different syntaxes over the exact same underlying language concepts.')