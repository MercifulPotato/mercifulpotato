Item(by='Jemaclus', descendants=None, kids=None, score=None, time=1603229595, title=None, item_type='comment', url=None, parent=24842283, text='Depends on the experience level and number of engineers they are managing.<p>First, my philosophy on management is that you are constantly asking yourself two questions:<p>1) How can I help you? (e.g., unblock you, mentor you, take stress off your plate)<p>2) How can I get out of your way? (i.e., trust you to do the job you were hired to do)<p>For 2-3 engineers, I&#x27;d say anywhere between 50% and 10% of time should be spent hands-on in the code. I&#x27;ll go ahead and lump code reviews in there. Since there are so few engineers, you probably aren&#x27;t spending 40 hours a week in meetings and managing people problems, so that gives you time to still be involved technically. I think this is a sweet spot where most engineers I know would like to be in.<p>For 4-8 engineers, I&#x27;d go closer to 10% to 0% being hands-on in the code, including code reviews. I recommend EMs do code reviews as often as possible, so you aren&#x27;t out of touch with your codebase, but at this stage, you&#x27;re likely spending more time in project management meetings and 1:1s, and so you have less time to write code. This is fine, because again, you&#x27;re involved but spending more time on the people side of things.<p>For 8+ engineers, you&#x27;re almost certainly at the 0% code point and are spending most of your time in meetings or high-level architectural reviews. This is also fine -- good, even! But at this point, you&#x27;ve lost the benefits of smaller team management that <i>can</i> be hands-on in the code. It might be time to consider hiring another manager or promoting from within to get back to that level of technical mentorship and rigor.<p>Remember, your goal is to enable your team to be successful, and as the team grows, most of that entails being a shield to protect your team from external requests and also to facilitate their growth, whether personal or professional. As the team grows, your force multiplier stops being code-based and becomes people-based, and the more you can delegate and facilitate your team&#x27;s growth, the more successful your team will be.<p>A Director of Engineering writing code is probably not the best use of her time. If she instead spends that time unblocking two of her ICs so that they can do their job, that&#x27;s way more efficient than doing it herself.<p>A LOT of new engineering managers struggle with this. In fact, I&#x27;d say most EMs that I know have a hard time letting go of the code, and act almost like principal engineers or architects, instead. For small teams, this isn&#x27;t a bad thing, but it doesn&#x27;t really scale well.')