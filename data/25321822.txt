Item(by='linguae', descendants=None, kids=[25322451, 25327684], score=None, time=1607239619, title=None, item_type='comment', url=None, parent=25320588, text='I am finishing up teaching an undergraduate-level course on programming language principles and paradigms.<p>Here is what I recommend:<p>1.  Study Scheme for an introduction to programming in a Lisp-like language.  I used Structure and Interpretation of Computer Programs as one of my course textbooks (I also assigned my students separate textbooks for the Prolog and Smalltalk portions of the class).  My favorite part of this book is its discussion of the metacircular interpreter (i.e., a Scheme interpreter written in Scheme), which is key to understanding how a Lisp works internally.<p>2.  Read the Lisp 1.5 Programmer&#x27;s Manual.  While this Lisp has long been succeeded by more modern Lisps, it is a very nicely designed manual that discusses the implementation of Lisp.  It also has a short metacircular interpreter on page 13 that profoundly inspired Alan Kay and many other luminaries of computer science.<p>3.  Begin learning Common Lisp.  Common Lisp is much more complex than Scheme is; Common Lisp is to Scheme as C++ is to C.  I started getting serious about learning Common Lisp earlier this year, and I am currently working through the Advent of Code exercises in Common Lisp.  My favorite intro book is Common Lisp: A Gentle Introduction to Symbolic Computing.  I also own a copy of Common Lisp Recipes, which has been valuable for learning Common Lisp idioms; part of the challenge of learning a large language is figuring out what are the most idiomatically correct ways of doing things.<p>4.  Read The Art of the Metaobject Protocol.  I have a copy of the book, but I haven&#x27;t gone through it yet.  My goal is to work through this book to have a full understanding of the Common Lisp Object System.')