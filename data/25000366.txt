Item(by='iainctduncan', descendants=None, kids=[25001297], score=None, time=1604599154, title=None, item_type='comment', url=None, parent=24999860, text='yeah, I use S7 Scheme. It&#x27;s a complete scheme interpreter in one C file, super easy to embed, quite similar to Clojure linguistically. Basically all &quot;business&quot; logic is in Scheme, all OS&#x2F;UI interaction is in C or C++. For me, it&#x27;s amazing, because I write music apps and I can reuse my model code across desktop, phone, in Max&#x2F;MSP or PureData, in web assembly, everywhere. Being able to prototype in Max is awesome. My model layer <i>only</i> knows about music, the high-level user actions (ie &quot;play note&quot;, not &quot;click button&quot;), and Scheme. It doesn&#x27;t know anything about widgets, phones, etc. All boundaries are crossed with the C FFI layer (which is really nice in S7) forcing a strict ports-and-adapters approach. There absolutely is upfront cost, but the liberation of being totally decoupled from any framework or vendor in my model code is awesome. I chose S7 because I&#x27;m doing music, but you could do similar with Guile, Chicken, Gambit, Embedded Common Lisp, etc. And Scheme is so minimal that if I needed to switch Scheme implementations it would not be a big deal - I would only be rewriting the adapter layer.<p>Interesting, one of the most successful companies I&#x27;ve seen in my tech due diligence work was doing the same thing in high end scientific computing. They had written their own DSL, and a whole containing application layer in C that could run on any target platform, with GUI adapters for windows, unix, osx, etc. They were doing <i>very</i> well. And they could get amazing scientists to work for them super-productively because the DSL was designed around the scientists needs.')