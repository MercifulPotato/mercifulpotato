Item(by='dathinab', descendants=None, kids=None, score=None, time=1602007975, title=None, item_type='comment', url=None, parent=24676161, text='&gt; - which is often not good enough.<p>Except that it mostly should be good enough.<p>async-std tried to mirror rust&#x27;s libstd, and tokio adapted it.<p>Similar the global `spawn` and the value returned from it work kinda the same +- some naming differences.<p>Even the `LocalExecutor`&#x2F;`LocalSet` can be abstracted over to erase their differences.<p>That also true for all simple usages of timout.<p>The remaining differences are:<p>- different internal implementation details<p>- naming differences which are not that easy to abstract away<p>- some detail about time&#x2F;timeout handling I forgot which for many use-cases doesn&#x27;t matter<p>- <i></i>the AsyncRead&#x2F;AsyncWrite traits<i></i> but this is going to get into std so this will go away soon<p>- some &quot;advanced&quot; features like the fact that tokio overlaps the non-blocking executor thread pool with a blocking worker thread pool, but that in many case not a very important feature.<p>- some differences in e.g. how to specify the number executor threads etc.<p>Most other differences are &quot;old legacy left overs&quot; from the pre-async&#x2F;await futures time periode.<p>So while a generic in-language abstraction likely won&#x27;t happen anytime soone one which uses feature flags and re-exports as basis should be very doable in the close future.<p>(I don&#x27;t know how good the mentioned one is.)')