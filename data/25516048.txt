Item(by='jpcooper', descendants=None, kids=[25516564], score=None, time=1608716848, title=None, item_type='comment', url=None, parent=25505701, text='I don&#x27;t agree with the &quot;constant-stack algorithm&quot; comment. Whether you represent the stack implicitly through recursive function calls, explicitly through building up lambdas, or again even more explicitly by using a singly linked list or other suitable data structure, it&#x27;s still a stack, and the memory complexity is the same.<p>They&#x27;re all different ways of doing the same thing. Of course there could be a benefit for cases where you have a limited stack size. The author says that there&#x27;s no need to do this in Haskell, because the stack is allocated on the heap, but I still wonder what the constant factor overhead of doing this with a linked list plus data types is over simple recursive function calls.<p>This whole thing can be summarised as:<p>1. Represent the stack as a singly linked list (or std::stack).<p>2. Data type for encoding stack frame: function state and where to return to in function.<p>As an example, this technique is useful if you are doing an in-order tree traversal and want to avoid using the stack. Define a data type to encode the nodes to be looked at, and encode whether you have already been through the left branch of the node or not.')