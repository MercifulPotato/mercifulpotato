Item(by='ncmncm', descendants=None, kids=[24969160], score=None, time=1604287414, title=None, item_type='comment', url=None, parent=24960108, text='Almost everything the article says about the prospects for using C++ in an OS kernel is wrong.<p>It is hard to understand how someone could know so many basic facts about the language and still be so thoroughly confused.<p>None of the reasons cited for not using C++ in kernel code is valid. None of the things claimed to be impossible are.<p>Example: RTTI. Really, RTTI is hardly ever used in good code. (I used in once in 10 years.) Despite its low use-value, nothing interferes with using it in a kernel.<p>Name mangling is absolutely no problem; neither would using `extern &quot;C&quot;`, if you wanted to.<p>Operator new is wholly compatible with kernel allocators.<p>The Standard Library does have read-write locks, although it is usually foolish to use such a lock in real code. It is trivial to wrap any synchronization primitive you like with a zero-overhead abstraction. Kernels tend to have their own anyway.<p>Exceptions in kernel threads would work identically the same as in user-level threads.<p>Static ctor sections could be run by kernel startup code as easily as they are run in regular programs. (Probably one would not bother running static dtor sections.)<p>I could go on and on, but enough.<p>This article joins others packed to the brim with out-and-out falsehoods. When you need to rally so many falsehoods to make your case, you end up making the opposite case--except where your audience is easily fooled.')