Item(by='Geminidog', descendants=None, kids=[25092987], score=None, time=1605367630, title=None, item_type='comment', url=None, parent=25090816, text='It&#x27;s well known that less power leads to less opportunities to shoot yourself in the foot. The article talks about &quot;less&quot; power from a qualitative perspective like how &quot;Go&quot; is less &quot;powerful&quot; than &quot;C++&quot; because the language primitives are less dense. It also talks about turing completeness as well but still from a qualitative perspective.<p>There is actual benefits in removing fundamental core features of programming. You can remove iteration to make something not turing complete but before that you can maintain turing completeness while removing certain core programming features.<p>In fact There is an entire style of programming that removes these core features and is &quot;less&quot; powerful and &quot;less&quot; expressive as well. It is called functional programming.<p>Functional Programming is simply the same thing as imperative programming only without the power of mutability. No variable reassignment. No looping.<p>The strange thing is I always hear people talk about things how functional languages like say...  Haskell are more expressive and more powerful than imperative languages. They are technically wrong. These languages are LESS powerful.<p>So yeah the author is really talking more about cognitive overload of say something like C++ but at a more fundamental level making our core programming model less powerful actually has some interesting benefits outside of just &quot;cognitive overload&quot;<p>Modules in functional programs (called combinators) are the most modular primitives available in all of programming and FP pushes the programmer into encapsulating his logic into these primitives leading to actually more modular and better constructed programs. The structure of programs changes for the better when things are made less powerful.')