Item(by='pradn', descendants=None, kids=[24670001], score=None, time=1601676263, title=None, item_type='comment', url=None, parent=24666999, text='It&#x27;s more like<p>1) Application sends a message w&#x2F; ordering key &quot;abc&quot; (let&#x27;s call it msg1)\n2) Pub&#x2F;Sub gets msg1.\n3) Pub&#x2F;Sub acknowledges that msg1 was received. Now, you can be secure we have stored this message durably.\n4) Pub&#x2F;Sub sends msg1 to the subscriber ASAP if there&#x27;s one available.\n5) A subscriber client assigned to ordering key &quot;abc&quot; gets msg1.\n6) The subscriber client processes msg1 and sends an ack to Pub&#x2F;Sub.\n7) Pub&#x2F;Sub receives the ack and removes the message from storage. (It&#x27;s possible to retain acked messages, but let&#x27;s not talk about that for simplicity.)<p>Another message for the same ordering key &quot;abc&quot; arriving at Pub&#x2F;Sub any time after step 4 will be delivered to the subscriber only after msg1. To summarize, the timestamp of a successful publish response is the timestamp by which we order messages sent to the client.<p>Pub&#x2F;Sub may not send messages immediately if the subscriber is too slow to ack the message (perhaps each message takes a while to process) or if the subscriber is down or if there&#x27;s too many messages in the backlog for the ordering key. In these cases, you can be assured that they&#x27;re safely stored on disk and will be resent later (after some backoff period.)<p>So, to answer your question directly, we only stall the sending of ordered messages to subscribers if there&#x27;s a backlog for that ordering key or if the subscriber not fast enough.')