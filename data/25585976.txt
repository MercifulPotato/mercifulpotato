Item(by='aw1621107', descendants=None, kids=None, score=None, time=1609361661, title=None, item_type='comment', url=None, parent=25585509, text='I <i>think</i> you can get something similar now with C++20 concepts?<p><pre><code>    template&lt;typename T, typename U&gt;\n    void my_func(std::vector&lt;T&gt;* vec) requires std::derived_from&lt;T, my_data_container&lt;U&gt;&gt;;\n</code></pre>\n(Probably mangled something, but the idea is there)<p>Without concepts, you&#x27;re left with SINFAE:<p><pre><code>    template&lt;typename T, typename U, typename = std::enable_if_t&lt;std::is_base_of_v&lt;my_data_container&lt;U&gt;, T&gt;&gt;&gt;\n    void my_func(std::vector&lt;T&gt;* vec);\n</code></pre>\nor just a regular function and a hope that anything wrong will be caught by the compiler:<p><pre><code>    template&lt;typename T, typename U&gt;\n    void my_func(std::vector&lt;T&gt;* vec) {\n        &#x2F;&#x2F; use my_data_container&lt;U&gt; somewhere and hope things blow up if something is wrong\n        &#x2F;&#x2F; Not 100% sure this is allowed, but something similar should be at least\n    }</code></pre>')