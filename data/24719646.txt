Item(by='ben-schaaf', descendants=None, kids=None, score=None, time=1602169003, title=None, item_type='comment', url=None, parent=24719359, text='Sure, if by &quot;smaller issues&quot; you mean a likely redesign of large parts of the codebase. Think of it like writing C code without bothering to free any memory.<p>In C having to free allocated memory manually dictates how data structures are built and how your program flows. Often you have to keep track of extra state in order to free your memory at the right time and if you don&#x27;t have this in mind from the get-go you&#x27;re going to write code that leaks a lot of memory or doesn&#x27;t work. The same is true for rust, but instead of the code leaking or not working it doesn&#x27;t compile. If you turn those checks off with unsafe you&#x27;re essentially stuck with an improved C that&#x27;s just as difficult to prototype in.<p>Systems programming languages are simply not designed for fast prototyping, instead focusing on fast and in rust&#x27;s case correct code. A GC, dynamic typing, high level library, etc. all help you prototype faster but you&#x27;re not going to be able to use them to write an OS or a web browser.')