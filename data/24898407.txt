Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1603731959, title=None, item_type='comment', url=None, parent=24897724, text='1. Macros give you laziness. So if you want to conditionally execute part of what&#x27;s supplied, with functions the user has to supply closures or functions.<p><pre><code>  (my-if condition then else)\n</code></pre>\nWould execute each of those before a call to my-if, so keeping it a function you&#x27;d need:<p><pre><code>  (my-if condition (lambda () then) (lambda () else))\n</code></pre>\n(bad example, don&#x27;t make your own if, but illustrates the idea)<p>2. You want to capture variables from the calling context, same issue as above. Consider the <i>with-resource</i> pattern:<p><pre><code>  (let ((foo ...))\n    (with-resource (lambda (r)\n      (do-something-with-resource r foo)))\n</code></pre>\nOr the macro-d version:<p><pre><code>  (let ((foo ...))\n    (with-resource (r)\n      (do-something-with-resource r foo)))\n</code></pre>\n3. You want to do something that can be done efficiently in Lisp but uses very low level stuffs (like tagbody and go). Rather than writing that (repeatedly if this is a recurring pattern, like for various state machines) you can present a lispier syntax that compiles (via macros) down to the low level primitives (do a macro expand on some of the <i>do</i> constructs). See [0] for a variation of this idea in Scheme.<p>4. You want to do something repeatedly and consistently, and want to remove errors. See the definition of <i>defdot</i> in [1]. You could define and register all those functions yourself for each now .&lt;whatever&gt;, or you could let a macro do the heavy lifting.<p>[0] <a href="http:&#x2F;&#x2F;cs.brown.edu&#x2F;~sk&#x2F;Publications&#x2F;Papers&#x2F;Published&#x2F;sk-automata-macros&#x2F;" rel="nofollow">http:&#x2F;&#x2F;cs.brown.edu&#x2F;~sk&#x2F;Publications&#x2F;Papers&#x2F;Published&#x2F;sk-aut...</a> see the linked PDF<p>[1] <a href="http:&#x2F;&#x2F;users.rcn.com&#x2F;david-moon&#x2F;MMD&#x2F;MMD.lisp" rel="nofollow">http:&#x2F;&#x2F;users.rcn.com&#x2F;david-moon&#x2F;MMD&#x2F;MMD.lisp</a>')