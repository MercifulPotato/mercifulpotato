Item(by='randomswede', descendants=None, kids=None, score=None, time=1609775396, title=None, item_type='comment', url=None, parent=25619265, text='I have at times in the past made the (somewhat joking) observation that &quot;memory leak&quot; and &quot;unintentional liveness&quot; look very similar from afar, but are really quite different beasts.<p>With a &quot;proper&quot; GC engine, anything that is no longer able to be referenced can be safely collected. Barring bugs in the GC, none of those can leak. But, you can unintentionally keep references to things for a lot longer (possibly unlimited longer) than you need to. Which looks like a memory leak, but is actually unintentional liveness.<p>And to prove the difference between &quot;cannot be referenced&quot; (a property that can in principle be checked by consulting a snapshot of RAM at an instant in time) and &quot;will not be referenced&quot; (a larger set, we will never reference things that cannot be referenced, but we may not reference things that are reachable, depending on code) feels like it is requiring solving the halting problem.<p>And for free()-related problems, I&#x27;ve definitely seen code crash with use-after-free (and double-free).')