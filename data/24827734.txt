Item(by='mfateev', descendants=None, kids=None, score=None, time=1603123935, title=None, item_type='comment', url=None, parent=24825572, text='The main difference is that Temporal is using general-purpose programming languages to implement workflow code. This gives developers unlimited flexibility and doesn&#x27;t require learning a new specialized language just to add resiliency to their program. Some other benefits of using programming language instead of XML&#x2F;JSON based language:<p>* Strongly typed (for languages like Java or Go)<p>* Uses standard error handling of the language of choice. For example, Java SDK throws exceptions, and Go one returns errors.<p>* Use standard tools for development like IDEs, Debuggers, Linters, Unit Testing frameworks, etc.<p>* Allows using the same language for both activities and workflows.<p>* Allows programs of practically unlimited complexity through standard programming language techniques like OO, functions, etc.<p>* Easily supports handling of asynchronous events<p>* Supports updating definitions of already running workflows<p>* Allows reuse of standard libraries. For example, if workflow needs to keep a state in a priority queue, it can use an existing one.<p>My personal opinion that BPMN tries to cater to two distinct groups of people. Non-technical domain experts and software developers. And it is essentially a compromise that cannot serve both of them well. Non-technical domain experts still cannot implement production-ready workflows, and developers have to use limited complicated UI&#x2F;XML-based technology that is inferior to the programming languages and environments they are used to.\nThe Temporal approach gives developers the best tool for their job and lets them decide how to interact with non-technical users. In some domains, it is possible to create DSL for non-technical users to use. Temporal is an excellent technology for implementing such domain-specific languages. BPMN&#x27;s problem is that it is not domain specific and tries to serve as a general-purpose language without being one.')