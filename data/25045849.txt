Item(by='waterofclear', descendants=None, kids=None, score=None, time=1605016161, title=None, item_type='comment', url=None, parent=25044009, text='&gt; That&#x27;s actually the case, because you can totally simulate Git using Pijul if you want, except for the weird merges where Git shuffles up lines randomly.<p>I don&#x27;t think this is true. The snapshot model is fundamentally different and doesn&#x27;t require resolving conflicts in the same way.<p>&gt; It is not a drawback at all, there are no downsides to it<p>It&#x27;s a much more complicated model to implement, performance isn&#x27;t as good, and your model is closely tied to your diffing algorithm. Contrast this to git where you can merge however you want and no one else needs to know the details.<p>&gt; You can totally do that in Pijul by adding extra dependencies, and moreover, this is like saying `git rebase` adds very little value to Git.<p>Can do that and will happen in practice are very different things. It&#x27;s not something likely possible to do automatically and doing it manually is just extra work that is probably for nothing.<p>&gt; It is actually the exact opposite: Git forces you to reconsider those conflicts (there&#x27;s even `git rerere`), whereas Pijul only shows you the unresolved conflicts. Once a conflict is solved in Pijul, it&#x27;s solved by a patch, and solved forever.<p>I&#x27;m comparing git merge to adding a patch to a set in Pijul.<p>Let&#x27;s say I have a patch A that adds a line:\nreturn 1 + 1 + 1 + 1;<p>and a patch B based upon A changes it to:\nreturn 1 + 1 + 2;<p>and a patch C based upon B changes that to:\nreturn 1 + 3;<p>and a patch D based upon the original A changes it to:\nreturn 4;<p>So we now have:<p><pre><code>  A\n  |\\\n  B D\n  |\n  C\n</code></pre>\nNow lets say we add them all to the same set of patches. Will I have to resolve the conflict in B and D and then also the conflict in (the resolution of B and D) and C?')