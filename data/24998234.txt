Item(by='jlaban-uno', descendants=None, kids=[24998269], score=None, time=1604584787, title=None, item_type='comment', url=None, parent=24997611, text='- Uno dev here<p>Fair comment.<p>Here are some other live Wasm apps examples: <a href="https:&#x2F;&#x2F;github.com&#x2F;unoplatform&#x2F;uno#live-webassembly-apps" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;unoplatform&#x2F;uno#live-webassembly-apps</a>.<p>Note that .NET for WebAssembly is still in its early stages and the .NET team is likely to continue working on AOT compilation in the coming months, and the Uno is going to help. This will be improving the payload size and performance that is currently very much lacking in that mode. Interpreted IL mode (the UADO app) is used where the AOT engine is not yet working properly, providing a base to get the framework itself progressing, while the infrastructure rest is improving.<p>Many of the .NET constructs are expecting [exception handling](<a href="https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;exception-handling" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;exception-handling</a>), which has to be emulated as it is not yet available in WebAssembly, adding significant code to the payload. Same for other features like null reference checking or indirect invocations (some may know more on that last one).  Other features like lazy WebAssembly loading (for more than 4KB at least) and Interface Types to remove any Javascript (<a href="https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;interface-types&#x2F;blob&#x2F;master&#x2F;proposals&#x2F;interface-types&#x2F;Explainer.md" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;WebAssembly&#x2F;interface-types&#x2F;blob&#x2F;master&#x2F;p...</a>) will also improve the actual and perceived performance significantly.<p>The immediate goal of the project is to provide the ability for new and existing C# apps (and not Web sites, not yet at least) to be available for non-walled garden environments. We expect the field to progress significantly in the coming years on many fronts, making this kind of apps more useful and viable.<p>Finally, you&#x27;ll find that the Windows Calculator port to Uno is actually stretching thin the browsers resources because of the size of the Wasm payload (browser&#x27;s memory and CPU is going really high because of the internal WebAssembly management). Yet, once the tiered compiler has cached the result, the load time goes down significantly.')