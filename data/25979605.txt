Item(by='johnisgood', descendants=None, kids=[25981167], score=None, time=1612108006, title=None, item_type='comment', url=None, parent=25979506, text='That is funny, Ada&#x2F;SPARK is not mentioned at all! How strange.<p><a href="https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Contract_Based_Programming" rel="nofollow">https:&#x2F;&#x2F;en.wikibooks.org&#x2F;wiki&#x2F;Ada_Programming&#x2F;Contract_Based...</a><p><a href="http:&#x2F;&#x2F;www.ada-auth.org&#x2F;standards&#x2F;12rat&#x2F;html&#x2F;Rat12-2-3.html" rel="nofollow">http:&#x2F;&#x2F;www.ada-auth.org&#x2F;standards&#x2F;12rat&#x2F;html&#x2F;Rat12-2-3.html</a><p><a href="https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;source&#x2F;how_to_write_subprogram_contracts.html#writing-contracts-for-functional-correctness" rel="nofollow">https:&#x2F;&#x2F;docs.adacore.com&#x2F;spark2014-docs&#x2F;html&#x2F;ug&#x2F;en&#x2F;source&#x2F;ho...</a><p><a href="https:&#x2F;&#x2F;blog.adacore.com&#x2F;contracts-of-functions-in-spark-2014" rel="nofollow">https:&#x2F;&#x2F;blog.adacore.com&#x2F;contracts-of-functions-in-spark-201...</a><p>Plus, I do not believe that static typing is pointless. Even if it were ONLY for documentation, that would already make it pretty useful, in my opinion, like Erlang&#x27;s type specifications, although there is a static analysis tool called dialyzer that identifies software discrepancies such as type errors and such.<p>In any case, from AdaCore&#x27;s website:<p>&gt; In statically typed languages, a type is mainly (but not only) a compile time construct. It is a construct to enforce invariants about the behavior of a program. Invariants are unchangeable properties that hold for all variables of a given type. Enforcing them ensures, for example, that variables of a data type never have invalid values.<p>&gt; A type is used to reason about the objects a program manipulates (an object is a variable or a constant). The aim is to classify objects by what you can accomplish with them (i.e., the operations that are permitted), and this way you can reason about the correctness of the objects&#x27; values.<p>Just for the curious:<p>&gt; A nice feature of Ada is that you can define your own integer types, based on the requirements of your program (i.e., the range of values that makes sense). In fact, the definitional mechanism that Ada provides forms the semantic basis for the predefined integer types. There is no &quot;magical&quot; built-in type in that regard, which is unlike most languages, and arguably very elegant.')