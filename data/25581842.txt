Item(by='ludocode', descendants=None, kids=[25581979, 25586315], score=None, time=1609337765, title=None, item_type='comment', url=None, parent=25581576, text='It appears you are technically correct. TIL!<p>I don&#x27;t think it matters in this benchmark though. Compilers can certainly deduce that it&#x27;s a compile-time constant because the template is fully instantiated in the same translation unit and only used once so it&#x27;s not hard for a compiler to propagate it. At least in my tests GCC and Clang seem to propagate it just fine.<p>I suppose a case where it might matter would be if you call std::sort several times in the same translation unit (or the same binary under LTO) with the same template types but different comparison functions. In that case calls to std::sort with different comparison functions would share an implementation so it couldn&#x27;t be inlined.<p>You&#x27;re right though, it should be fixed. Rather than making it a lambda, the benchmark probably shouldn&#x27;t pass a compare expression to std::sort at all so it can make its own decisions on how to compare values. For example I expect C++20 implementations of std::sort may provide alternate implementations of partitioning that use the spaceship operator if it exists (at least my implementation will.) This is one of the true advantages C++ has that can&#x27;t be replicated in C.')