Item(by='inck', descendants=None, kids=None, score=None, time=1608481291, title=None, item_type='comment', url=None, parent=25482410, text='I dunno seems like 90% of this is mostly caused by a need to reduce complexity. In my old job I basically talked to alot of startups about what they were building etc... Alot of teams get free aws credits and use lambda as their process so they can serve data for low to no traffic websites, save on a devops team to get things going. It&#x27;s because the scope of things you might have to do is so small and the traffic served is also really small. So in the beginning you&#x27;d probably rock such a system. When you or if you ever scale out where you are dealing with multiple concurrent requests ( most things are not like they were in early 2000s server logic heavy requests). In fact we&#x27;ve moved to fat clients vs. the old paradigm of thing clients. Now caching layers ship entire heavy weight clients to an app and the server does more mundane things like handle database writes that are shipped off to probably another hosted solution. Additionally actions that require a db write are probably few and far between. Login&#x2F; if you&#x27;re gdocs maybe a periodic save on 15second interval.<p>Again probably the focus should be on scale and scope. If things are easy water will flow to the path of least resistance. I&#x27;ve done all kinds of deployments over the years (private data center, vps, aws, gcp, etc... with all kinds of deploy management and configuration tools. Having a well maintained permissioned, monitored up time sync&#x27;d, has the right packages on the right machine, machine has a non trivial upfront cost. That if someone is going to give me 50-125k of AWS credits (as a startup) then why not. Alternatively if I have a low traffic website and want to dogfood building a product then why not especially if the use case for a db is maybe tracking payments ocassionally handling a login.<p>My two cents there.')