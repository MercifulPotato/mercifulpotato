Item(by='the-smug-one', descendants=None, kids=[24697077, 24697144], score=None, time=1601986717, title=None, item_type='comment', url=None, parent=24696589, text='Warning! Lots of disjointed thoughts below.<p>I&#x27;ve used Frama-C ACSL+WP and it was incredibly painful to use to prove basically anything.<p>For me the main issue was that Frama-C can say 3 things about your specs: Yes, No, and Don&#x27;t know. That means I have no idea where to start to debug my proof, especially as I&#x27;m already convinced that my proof works! This is inherent to computing weakest pre-condition AFAIK. I had to provide my own loop invariants, which is also a pain :-).<p>C&#x27;s semantics also makes a lot of things which I would assume was &quot;trivially true&quot; fail verification. This isn&#x27;t Frama-C&#x27;s fault however, of course.<p>I haven&#x27;t used the other plugins, perhaps there are better ones!<p>Type systems can be quite nice with regards to error messages, especially as the programmer themselves essentially derive their own granularity with regards to the domain and the proofs of the domain. But yes, we all have examples of absolutely terrible type system error messages.<p>The paradigm of making comments have semantic meaning in some other language is also terrible. I&#x27;d rather have a superset of the core language with syntactic extensions for proofs. The build system can pull out the core language source code for me.<p>Finally:<p>I think that abstract interpretation of a low-level compilation target combined with a proof-carrying compiler is the way to go. The compiler has proofs of a bunch of stuff regarding the code already, carry them down into the assembly level please! There&#x27;s some work in abstract interpretation of WebAssembly, and I think that could be a great platform for formal verification.<p>Sorry for the barfing :-). Hopefully there&#x27;re thoughts here to react to and reply to me about!')