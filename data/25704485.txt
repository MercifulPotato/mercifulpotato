Item(by='ksaj', descendants=None, kids=None, score=None, time=1610224756, title=None, item_type='comment', url=None, parent=25701511, text='Are the tools pretty much exactly the same? If there are differences, even minor, think about them in the process.<p>For example, I love clisp because that&#x27;s pretty much what I learned to program Common Lisp in, and it starts up so fast, making it ideal for scripting. It&#x27;s also more forgiving on input&#x2F;output buffering for whipping up quick hacks. But I also use sbcl because although it is almost punishing in its strictness, it has a few features that take it over the top, such as compiling to native binaries. I prefer a lot of things on the command line, so both of them have that as plus points. Basically I can hack something together in clisp, and then polish it up in sbcl to make sure it works more universally.<p>And then I also use LispWorks because it can create windowed UIs out of the box that work on both Linux, Mac and Windows without modification. And I love its much-nicer-than-emacs editing and debugging. I&#x27;ve actually been using it a lot more than clisp and sbcl for development lately because there are so many conveniences in the LispWorks GUI.<p>Having said that, I find sbcl&#x27;s debugger warnings far more easy to work with than LispWorks. So I do tend to use sbcl for trying to work out particularly pesky bugs in non-graphical functions.<p>I often have 2 different ones running at the same time because I really like to play up to their strengths. But regardless, nearly all my non-graphical code works equally well on clisp, sbcl and LispWorks - effectively the same &#x2F; competing tools, but in my workflow there are different purposes at hand.<p>So, I guess I&#x27;m questioning whether you need to omit one tool at the expense of the other, so long as your workflow allows them to play nice together.')