Item(by='exmadscientist', descendants=None, kids=None, score=None, time=1602747127, title=None, item_type='comment', url=None, parent=24785695, text='It&#x27;s true that needing strict unpredictability, but not true cryptographic security, is rare in a microcontroller application. Though it can be nice to have.<p>What makes PCG attractive for microcontrollers is really that it&#x27;s of known good quality, its implementation is very small and very simple, and it ends up generating efficient code for 32-bit processors (i.e., ARM Cortex-Ms). That is not, and can not ever be, true for something like a 128-bit shift register. PCG is great for just tossing in when I&#x27;m working on a platform that has no built-in library rand() function, or where it&#x27;s busted, or whether I don&#x27;t want to bother figure out if&#x2F;how badly it&#x27;s busted. (With how easy PCG is to use, that last one covers every embedded platform ever....)<p>PCG is not the best RNG out there: it&#x27;s not the highest quality, it&#x27;s not the fastest, it&#x27;s not the least predictable, it&#x27;s not the strongest theoretically. (It isn&#x27;t the smallest, either, but it&#x27;s quite small and the smaller RNGs I know of are either code-golfed, which doesn&#x27;t count, or truly garbage.) But it is a nice equilibrium between all of those things. And did I mention it&#x27;s simple? Simple is really, really nice to have :)')