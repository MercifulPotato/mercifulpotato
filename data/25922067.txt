Item(by='whiw', descendants=None, kids=[25923142, 25925874], score=None, time=1611702172, title=None, item_type='comment', url=None, parent=25918592, text='Great idea, I love the idea of getting real-time transcription of what I&#x27;m attempting to play.<p>As others have commented, it seems to struggle with the low E and A strings of guitar.  Thinking about this:<p>1. The smallest note interval is from open low E (82Hz) up to the next semitone (82*(2^(1&#x2F;12) -1)), which is about 5Hz.  This gives the maximum bin width.<p>2. The guitar range is approx 4 octaves, ie up to about 330Hz.  The min sampling freq must be double this.<p>3.In practice the bin edges wont line up with the semitone boundaries, so we ought to aim for bin widths smaller than half of 5Hz above, say 2Hz.  This guarantees that a bin exists that doesn&#x27;t cross semitone boundaries.<p>4. As lower frequencies probably wont be sampled across an integer number of cycles, spectral smearing will occur.  This can be reduced by making the binwidth even smaller, and by use of windowing in the time domain.<p>5. My environment has background noise (eg computer fan).  Unless the noise is filtered out pre-sampling (which it probably isn&#x27;t for most users) then this will fold back into the signal of interest.  Sampling at a higher rate than 2 x 330Hz would allow separation of the noise from the signal. I&#x27;m not sure what sample rate is used in the app.  If the noise goes up to 4kz (I&#x27;m guessing) then this implies a sample rate of 8kHz to remove it.<p>6. From the above: sample at 8kHz for 1 second, use a window funtion to reduce spectral leakage.  8192 samples is a handy power of 2.  Smaller sized ffts are likely to struggle to identify the right bin at lower frequencies, and&#x2F;or have more noise in the signal band to confuse the peak detector.<p>7. An oscilloscope display would be handy to verify that signal levels were ok, and  that noise isn&#x27;t too intrusive.')