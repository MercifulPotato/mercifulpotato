Item(by='jcranmer', descendants=None, kids=[25130270], score=None, time=1605645723, title=None, item_type='comment', url=None, parent=25128701, text='&gt; understanding C is crucial to understand low level programming concepts<p>That is a patently false statement. To understand low-level programming concepts, you need to understand fundamental notions about how machines represent state in registers and memory, how memory is organized (including primarily the concept of function calls and the stack), and the indirect referencing of memory via pointers. Note that nowhere in that list did I describe a concept that is unique to C.<p>In fact, one of the more common approaches to introducing developers to low-level programming is to introduce them to these concepts via <i>assembly</i> (say, Nand2tetris). In my own experience TA&#x27;ing such a course, I am more than willing to translate code into whatever language the student is most comfortable with to express the concepts as necessary. You can absolutely learn these concepts in other languages, and my own suspicion is that unsafe Rust does a slightly better job of it than regular C does.<p>C does not have a monopoly on understanding the low-level organization of code, and quite frankly, C&#x27;s lack of coverage here can be frustrating. C has no concept of multiple return values, functions with multiple entry points, unwinding the stack, computed goto, SIMD vector types, nested functions, discontinuous structures, or tail calls, and these are all concepts that are present in other languages that <i>cannot</i> be expressed in standard C or often even in vendor-extended C.')