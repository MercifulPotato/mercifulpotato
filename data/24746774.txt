Item(by='formerly_proven', descendants=None, kids=None, score=None, time=1602432804, title=None, item_type='comment', url=None, parent=24746294, text='&gt; Does anybody know why this was?<p>In general, recursive calls require stack frames, which is main memory. Tail recursion is however relatively easily transformed into the equivalent while loop, which then does not consume stack frames.<p>Consider:<p><pre><code>    def factorial(n):\n        if n is 1: return 1\n        else: return n * factorial(n - 1)\n</code></pre>\nFor factorial(12345), this requires 12345 stack frames, but with tail-call optimization the compiler can transform the function into something this:<p><pre><code>    def factorial(n):\n        accum = n\n        while n &gt; 1:\n            n -= 1\n            accum *= n\n        return accum\n</code></pre>\nBesides this, some older languages just didn&#x27;t have a real stack. All variables would be allocated as-if they are global variables and there would be a small array of return addresses and the current index into it somewhere. Naturally, you could not nest function calls deeper than this array was long.<p>For Fortran the reason may be that Fortran was (and still is) used a lot for numeric code and loops lend themselves more naturally to optimization and vectorization compared to arbitrary recursion.')