Item(by='mjevans', descendants=None, kids=[25897562], score=None, time=1611531189, title=None, item_type='comment', url=None, parent=25870793, text='Mapping JSON to rigidly typed languages is also a bit of a problem.  E.G. in golang you can use Interface, for some level of performance cost, to handle arbitrary maps of (string) keys to (arbitrary, Interface?) values.<p>Usually I&#x27;ve encountered JSON blobs that start with a map (dictionary &#x2F; object &#x2F; whatever) of keys to values, but they might also be lists, or maybe even just a string in the case of errors.  The values can also be of any type.<p>For rapid prototyping or cases where performance is trivial, I would really like a language to have some kind of object tree type which can represent any of JSON&#x27;s data types.  It would only need to be converted &#x2F; cast at the leaf level, when transforming data to&#x2F;from JSON.<p>The same data structure would also be useful for manipulating any other &#x27;trivial within memory&#x27; documents, like XML or anything else that easily fits within memory.<p>Extra bonus points if the interface type is also an option for external databases to wired up and mapped as an ORM.<p>Golang has some kind of comments based decorator that does this for XML and JSON mapping of native objects, but it tends to be clunky and I generally end up hating myself for using it on anything not trivial.  Offhand I&#x27;m not sure if there&#x27;s a more proper way of implementing it via configuration files &#x2F; scripts or programatically (build or runtime?)...<p>It&#x27;d be interesting to see if any languages have an effective and easy solution to this issue; any suggestions from others?')