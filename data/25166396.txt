Item(by='smarx007', descendants=None, kids=[25168706, 25167559], score=None, time=1605914895, title=None, item_type='comment', url=None, parent=25165752, text='Yes, that&#x27;s true but beware of the fact it only works this way if your code is 0%-serial, see <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Amdahl%27s_law" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Amdahl%27s_law</a> for the math. By the way, this law is why supercomputers like Fugaku <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WVsFFojdq3c" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WVsFFojdq3c</a> simply have no other way than optimizing their code. 0.1% serial code means that a code running on 160000 CPUs will be just 1000x faster than the code running on a single CPU.<p>Further, <a href="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gustafson%27s_law" rel="nofollow">https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gustafson%27s_law</a> may be more appropriate here as it is common for the app requirements grow with the performance increase of the compute hardware.<p>Edit: bottom line is that the conclusions of the article are dangerous. Reducing the controller method exec time by 10x is not likely to allow your system to process 10x RPS by itself, the cost and product backlog delay caused by a perf optimisation project may not be acceptable etc. But beware that slow code in the critical path of your distributed&#x2F;parallel system such as kernel code, event loop code, transaction commit code, distributed consensus protocol implementation can make your system unscalable beyond N factor (whether it is cores or servers). You can surely add 100xN nodes but it won&#x27;t help.')