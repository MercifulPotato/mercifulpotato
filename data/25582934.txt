Item(by='optymizer', descendants=None, kids=[25583165, 25584989], score=None, time=1609345090, title=None, item_type='comment', url=None, parent=25576466, text='Congrats on having an idea, coding it up and releasing it as a library! You should be proud.<p>Now I&#x27;d like to respectfully offer a bit of constructive criticism. Your idea is fine, but I think the API needs some polishing.<p>1) The 3 letter names have to go. &#x27;vec&#x27; is somewhat is established in graphics libraries, so you might get away with that, but &#x27;lst&#x27; - seriously? Just use &#x27;list&#x27;, &#x27;queue&#x27;, &#x27;map&#x27;, etc. Don&#x27;t invent your own terms for well-known concepts. It&#x27;s ok if combined data types are a bit longer. &#x27;list_queue&#x27; is fine and very readable, &#x27;lst_que&#x27; is less so.<p>2) &quot;#define P&quot; is clunky for several reasons: a) why do we have to care about POD vs non-POD? is it impossible to get rid of that? b) for the same reason that just using &quot;int p&quot; is clunky; and c) imagine lots of developers actually using your library. It would be great if each one of them didn&#x27;t have to look up what &quot;define P&quot; is (what would google results be?). My suggestion would be to do away with having to define it<p>3) multiple #define in front of an #include is verbose imo. It works, but it&#x27;s not perfect. I&#x27;d shoot for perfect, but that&#x27;s just me. I suspect this would require significant API change so I don&#x27;t have a good suggestion at the moment, I just know that I personally would not prefer multiple #define calls before I include the list. I get that you&#x27;re using X-includes, but a single #define is my limit before I groan, but other people&#x27;s tolerance level might be different.<p>Cheers!')