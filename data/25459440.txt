Item(by='gpm', descendants=None, kids=[25459628, 25459528], score=None, time=1608233987, title=None, item_type='comment', url=None, parent=25453663, text='I&#x27;ve spent far too much time reading this while I&#x27;m supposed to be working - and I still don&#x27;t understand it. Hopefully someone can help.<p><pre><code>    __static_call(name)\n</code></pre>\nis a macro that expands to (name inlined):<p><pre><code>    ({         \\\n        __ADDRESSABLE(__SCK__x86_pmu_add);    \\\n        &amp;__SCT__x86_pmu_add_tramp;     \\\n    })\n</code></pre>\nIt is used in this context<p><pre><code>    #define static_call(name) __static_call(name)\n</code></pre>\nWhich is used in this context<p><pre><code>    static_call(name)(args...);\n</code></pre>\nBut... this (expanding the last version) isn&#x27;t valid syntax?<p><pre><code>    ({         \\\n        __ADDRESSABLE(__SCK__x86_pmu_add);    \\\n        &amp;__SCT__x86_pmu_add_tramp;     \\\n    })(args...)\n</code></pre>\nA block isn&#x27;t callable in C?<p>---<p>It might help if I understood what the final product (assembly) is supposed to look like, but I don&#x27;t. For instance, at the end of the article the final assembly produced is discussed, but it&#x27;s not clear to me what code is producing that assembly&#x2F;what the surrounding assembly is supposed to look like. Taking the last example<p><pre><code>    call __SCK__x86_pmu_add\n    ; in call + &quot;trampoline&quot;\n    ret ; &quot;trampoline&quot; returns, completing the call\n\n</code></pre>\nIs this code generated inside a trampoline function (so that last ret is actually a ret)? Is this code called inside the caller, and someone played with the return address? Something else?')