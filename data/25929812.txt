Item(by='jacobr1', descendants=None, kids=None, score=None, time=1611763107, title=None, item_type='comment', url=None, parent=25919544, text='More annoying for our codebase is the inability to specify optional&#x2F;default arguments with closures. We often use functions that return other functions and you can&#x27;t persist the &quot;optional state&quot; without using a protocol. It would be great just to match the current state of vanilla defs with optional params.<p>For example:<p><pre><code>  def make_fun1(a: int) -&gt; Callable[[int, Optional[int]], str]:\n      def fun(b: int, c: Optional[int] = None) -&gt; str:\n          if c:\n              b += c\n          return f&quot;{a+b}&quot;\n\n      return fun\n\n  fun = make_fun(1)\n  fun(2)\n</code></pre>\nWill give you `Too few arguments` for `fun(2)`<p>You can fix this with something like:<p><pre><code>  class FunC(Protocol):\n      def __call__(self, b: int, c: Optional[int] = None) -&gt; str: ...\n\n  def make_fun(a: int) -&gt; FunC:  ...\n</code></pre>\nBut that that seems like unnecessary overhead, because the non-nested def case can happily understand the optional parameter.')