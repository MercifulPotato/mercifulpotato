Item(by='TeMPOraL', descendants=None, kids=None, score=None, time=1609230707, title=None, item_type='comment', url=None, parent=25566285, text='Tangential:<p>Pure impl v2:<p><pre><code>  class foo {\n  public:\n    &#x2F;&#x2F;enum is a keyword, so let&#x27;s call it _enum\n    const _enum current_operator;\n    foo(_enum co) : current_operator(co) { }\n  &#x2F;&#x2F; ... evalOp() as in your stateful impl example ...\n  };\n\n  &#x2F;&#x2F;Example use:\n  Reduce(foo{ADD}, 1, 2, 3, 4, 5, 6);\n</code></pre>\nPoint being, functional purity doesn&#x27;t necessarily mean only functions taking all their inputs as arguments. It means no <i>mutable state</i>. In the above example, the class foo essentially represents a partially applied evalOp(). If you have multiple, related functions working on similar sets of parameters, you could put them in such a class with const members to create what is essentially a package of partially applied functions.')