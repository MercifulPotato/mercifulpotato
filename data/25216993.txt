Item(by='brundolf', descendants=None, kids=None, score=None, time=1606366914, title=None, item_type='comment', url=None, parent=25214845, text='&gt; But this isn’t “critical software”, either<p>I strongly disagree. Anyone on the project would have (hopefully) known what it was being used for and how critical timing is for that task. Heck, the entire reason the project <i>exists</i> is to expedite the task. That translates directly to minimum-latency being a project constraint, so this to me just sounds like a project that failed to meet its constraints.<p>If you&#x27;re an application developer, you&#x27;re generally going to have a clear idea of what the priorities are for your project and what does and doesn&#x27;t matter (in terms of performance and otherwise).<p>Maybe there&#x27;s a case here for systems&#x2F;library programmers erring on the side of performance because they genuinely don&#x27;t know who will be using their code for what. But even then- if a library isn&#x27;t fast enough (put differently: if the library&#x27;s priorities diverge from the application&#x27;s priorities), the application developer should know that and not use that library for their application.<p>This trend of universalist performance-puritanism is exhausting. Performance is one of many priorities that a project may have. Know your target user, set your priorities accordingly, and develop your code in line with those priorities. No single priority gets to be so important across an entire field that everything else takes a back-seat.')