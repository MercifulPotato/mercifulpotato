Item(by='scaramanga', descendants=None, kids=None, score=None, time=1610255711, title=None, item_type='comment', url=None, parent=25710081, text=' Yes, 1,167 pagefaults for the read() version and 66,704 pagefaults for the mmap() version. With MAP_POPULATE it&#x27;s back down to 1,167 faults and it goes a bit faster.<p>My libc is using rep&#x2F;mov, same as the kernel, however. So I can&#x27;t conclude that AVX memcpy is the win.<p>From the profile of readsyscall version I see this:<p><pre><code>  42.12%  fa       [kernel.kallsyms]  [k] copy_user_enhanced_fast_string\n\n  14.45%  fa       [kernel.kallsyms]  [k] syscall_exit_to_user_mode\n\n  11.00%  fa       [kernel.kallsyms]  [k] find_get_entry\n\n   6.28%  fa       [kernel.kallsyms]  [k] syscall_return_via_sysret\n\n   5.14%  fa       [kernel.kallsyms]  [k] entry_SYSCALL_64\n</code></pre>\nnearly 15% of the time is spent on a single verw instruction. Spectre mitigations.<p>When I reboot with mitigations=off, sure enough, the difference goes away and read() and mmap() perform identically.<p>What OP has discovered is that spectre mitigations make syscalls enough slower than pagefaults that what used to be a slower way to do things is now faster.<p>If you want the mmap version to perform faster when spectre mitigations are off, you need to use MAP_POPULATE.')