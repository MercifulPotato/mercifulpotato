Item(by='qayxc', descendants=None, kids=[24838152], score=None, time=1603203846, title=None, item_type='comment', url=None, parent=24837305, text='&gt; The real future though is theorem proving systems, and generating code from them.<p>I&#x27;ve heard the same thing about model-driven development 25 years ago. Outside of some very small niches, it&#x27;s pretty much dead now.<p>&gt; But theorem proving systems that embrace the full spectrum of abstract and correct thought.<p>And here&#x27;s where reality and the ideal world collide: the vast majority of applications consists of incomplete models (in that data and&#x2F;or understanding of the problem are incomplete), quickly shifting goals, and pressure to release.<p>Theorem proving systems offer nothing that helps with this class of software - <i>abstract and correct thought</i> sounds marvellous in an academic environment or if you have unlimited budget to hire top talent and perform thorough analysis.<p>In practice, however, your typical line-of-business application is faster, cheaper, and well-enough programmed using traditional languages and a healthy dose of best-practises.<p>Optimisation and platform support are another area where a TPS won&#x27;t be very useful. Every hardware has its quirks and workarounds are required to get the best performance or avoid pitfalls. These aren&#x27;t easily expressed (and identified) using abstract thought and models.<p>Last but not least, no sane company is going to just throw away decades worth of investment in applications, libraries, and (software-)infrastructure just for a nebulous promise of what basically boils down to smarter and better staff with the right tools.<p>Theorem proving systems have their place and that place might get bigger in the future, but they&#x27;re most certainly not the panacea of all software development.')