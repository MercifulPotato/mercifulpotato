Item(by='jfrisby', descendants=None, kids=None, score=None, time=1609462544, title=None, item_type='comment', url=None, parent=25598448, text='As I touched on, the cost can vary a lot depending on the particulars of the situation.<p>For example, one company I came into was using Redshift and fighting a lot of problems with it.  The problems stemmed from a combination of not knowing how to use it effectively (e.g. batching writes), it being the wrong tool for the job (they were using it for a combination of OLAP and OLTP(!!) workloads), and so forth.  The long and short is that for both workloads, a basic RDS Postgres instance -- or a pair, one for OLAP, one for OLTP -- would&#x27;ve been considerably cheaper (they&#x27;d had to scale up a couple notches from the minimum cluster size&#x2F;type because of performance), avoided correctness problems (e.g. UNIQUE constraints actually doing the thing), been several orders of magnitude more performant at the scale they were at, etc.  They simply didn&#x27;t understand the tool and tried to apply it anyway.  They basically thought Redshift was like any RDBMS, but faster &quot;because it stores data in a columnar format.&quot;<p>Had they understood it, designing a data pipeline that could make use of such a tool would have required considerably more engineering person-hours than the pipeline they actually built.<p>Obviously this is a terribly extreme example, but the learning curve for tools -- including the time&#x2F;effort needed to discover unknown unknowns -- is a cost that must be factored in.<p>And, even if your org has the expertise and experience already, more-scalable solutions often have a lot more moving parts than simpler solutions.  Another organization I was at wanted to set up a data pipeline.  They decided to go with Kafka (self-managed because of quirks&#x2F;limitations of AWS&#x27; offering at the time), and Avro.  After 2 months that _team_ (4 sr + 1 jr engineers, IIRC) had accomplished depressingly little.  Both in terms of functionality, and performance.  Even considering only the _devops_ workload of Terraforming the setup and management of the various pieces (Avro server, Zookeeper cluster, Kafka cluster, IAM objects to control access between things...), it was a vastly more complicated project than the pipeline it was meant to replace (SQS-based).  Yes, that&#x27;s a bit of an apples-to-oranges comparison but the project&#x27;s goal was to replace SQS with Kafka for both future throughput needs and desired capabilities (replaying old data into other targets &#x2F; playing incoming data into multiple targets without coupling the receiving code).<p>By the time I left, that project had:  1. Not shipped.  2. Was not feature-complete.  3. Was still experiencing correctness issues.  4. Had Terraform code the CTO considered to be of unacceptably poor quality.  4. Monitoring and observability was, let&#x27;s say, a &quot;work in progress.&quot; Some of that is for sure the Second System Effect, but it is not at all clear to me that they would have been better off if they&#x27;d gone with Kafka from day 1.<p>Given that we could pretty easily extract another 2 orders of magnitude throughput out of SQS, there&#x27;s a real discussion to be had about whether or not a better approach might&#x27;ve been to make a Go consumer that consumed data more efficiency, and shunted data to multiple destinations -- including S3 to allow for replay.  That would&#x27;ve been a 1-2 week project for a single engineer.  Kafka is 100% the right tool for the job _beyond a certain scale_ (both of throughput and DAG complexity), but the company was something like 4 years in when I got there, and had been using SQS productively for quite some time.<p>And no, 26k&#x2F;sec&#x2F;server isn&#x27;t especially huge.  I was referring to the fact that the downvoted commenter was making sweeping generalizations.  Sweeping generalizations tend to shut discussion down, not prompt more nuanced discussion.  Other threads on this post have seen very interesting and productive discussions emerge, but note that the downvoted commenter&#x27;s post hasn&#x27;t really drawn anything other than people being sucked into the very discussion we&#x27;re having now.  It&#x27;s counter-productive.')