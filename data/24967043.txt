Item(by='the_other', descendants=None, kids=[24973658, 24967673], score=None, time=1604317758, title=None, item_type='comment', url=None, parent=24965433, text='I don’t understand this complaint.<p>Components are functions of their props and state, returning markup (in the form of a descriptor foe the rendering engine). When a prop or piece of state changes, the component <i>must</i> re-render. The fact that useState might be responsible isn’t relevant.<p>That said, I’m also still struggling with hooks (and I <i>like</i> functional programming in JS). I want to like that hooks let you wrap your domain logic into neat bundles, but I find that I miss the lifecycle callbacks of the older class based style.<p>Hooks based components are trying to make modules that are “about” the problem domain they illustrate, but they do it as a feature of React. React isn’t about your problem domain, it’s about driving the DOM and rendering, and I think it makes more sense to treat React code that way.<p>I’m open to having my mind changed on this. I have spent way more time writing classical React than hooks-based.')