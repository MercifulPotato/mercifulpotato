Item(by='dmitriid', descendants=None, kids=None, score=None, time=1604496088, title=None, item_type='comment', url=None, parent=24988513, text='&gt; and the HTTP package should not be polluted with assumptions about what (if any) data is being passed.<p>I&#x27;m not talking about the HTTP package itself. In Java and C# you do something along the lines of<p><pre><code>  &#x2F;&#x2F; Java\n  CompletableFuture&lt;PagedResult&lt;Contract&gt;&gt; getContracts(...);\n  CompletableFuture&lt;PagedResult&lt;Client&gt;&gt; getClients...(...);\n  CompletableFuture&lt;PagedResult&lt;Book&gt;&gt; getBooks...(...);\n\n  &#x2F;&#x2F; C#\n\n  JsonSerializer.Deserialize&lt;PagedResult&lt;Contract&gt;&gt;(responseBody);\n  JsonSerializer.Deserialize&lt;PagedResult&lt;Client&gt;&gt;(responseBody);\n  JsonSerializer.Deserialize&lt;PagedResult&lt;Book&gt;&gt;(responseBody);\n</code></pre>\nAnd that&#x27;s basically it. With Go you end up having fifteen identical PagedResult types for every single type that can be returned from the API because you can&#x27;t parametrize anything:<p><pre><code>  &#x2F;&#x2F; Go\n  \n  type ContractsResult struct {\n Result        []*entities.Contract\n NextPageToken string\n  }\n  type ClientsResult struct {\n Result        []*entities.Client\n NextPageToken string\n  }\n  type BooksResult struct {\n Result        []*entities.Book\n NextPageToken string\n  }\n</code></pre>\n&gt; Or they use code generators, which is also pointed out in the article.<p>Code generators are just bandaid for glaring holes in the language. Worse still, I don&#x27;t know if you can even specify code generating tools in your go.mod. For example, wire&#x27;s installation instructions say &quot;you need to install wire globally and have it on your $GOPATH&quot; [1] So your go build will just fail mysteriously until you have all the necessary tools installed.<p>&gt; Of course, anything more advanced would be greatly helped with generics<p>That... that is exactly what I&#x27;m talking about.<p>&gt; Option types to avoid nil, Either types to replace the value&#x2F;error tuples<p>Indeed. I forgot about those :) Yup, that would be a great use case for generics.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;wire" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;wire</a>')