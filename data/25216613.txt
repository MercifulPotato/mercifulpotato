Item(by='twotwotwo', descendants=None, kids=None, score=None, time=1606362125, title=None, item_type='comment', url=None, parent=25215527, text='In college I played with a variation of this where you fix the size of the collection to a power of 2 (sprinkling in zeroes&#x2F;repeated values if needed): you make your initial guess for where to look is just by taking the top bits of the searched-for value, then estimate the number of slots off you were from the top bits of the _difference_ between the value you found and the one you want (clamping your next guess to the first&#x2F;last item if you&#x27;d fall off the end otherwise). In the concrete example I was playing with, it worked to just stop there then do linear search, but you could be cleverer about how long to iterate and when&#x2F;how to bail out to something with a better worst case.<p>As Lemire says the problem (a good &quot;problem&quot;!) is that hashtables and B-trees can be quite fast, robust against different distributions, and you have them right at hand. It&#x27;d almost have to be some weird situation like you&#x27;re handed data in a format that kinda fits the requirements and you&#x27;re looking for how to work with it in-place.')