Item(by='layer8', descendants=None, kids=[25328629], score=None, time=1607298205, title=None, item_type='comment', url=None, parent=25318386, text='The following bit from the documentation [0] (&quot;step 2&quot;) is a bit strange:<p>&gt; A good practice is to create and test your LAMBDA function in a cell to make sure it works correctly, including the definition and the passing of parameters. To avoid the #CALC! error, add a call to the LAMBDA function to immediately return the result:<p>&gt; =LAMBDA function ([parameter1, parameter2, ...],calculation) (function call)<p>&gt; The following example returns a value of 2.<p>&gt; =LAMBDA(number, number + 1)(1)<p>&gt; Assuming the LAMBDA function is in cell A1, you can reference the cell that contains the LAMBDA function in the following way:<p>&gt; =A1(1)<p>What this seems to say is that (1) you get a #CALC! error when a cell contains a bare =LAMBDA(...) expression, and (2) if the lambda calls itself (doesn&#x27;t produce a #CALC! error any more), then you can call it with a different argument by referencing the cell containing the self-invocation (the &quot;=A1(1)&quot; example above). This seems like a weird model, because just &quot;=A1&quot; would give you the result of the self-invocation.<p>Maybe the documentation intends to say that you can do the &quot;=A1(1)&quot; call iff the cell containing the lambda is <i>not</i> a self-invocation (but then shows the #CALC! error)?<p>[0] <a href="https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-us&#x2F;office&#x2F;lambda-function-bd212d27-1cd1-4321-a34a-ccbf254b8b67" rel="nofollow">https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-us&#x2F;office&#x2F;lambda-function-b...</a>')