Item(by='vbrandl', descendants=None, kids=[25622379], score=None, time=1609686685, title=None, item_type='comment', url=None, parent=25620110, text='Is there anything that can be achieved by using the visitor pattern [0], that cannot be done by using pattern matching? I have only used the visitor pattern in languages that do not have pattern matching as a language feature (e.g. Java before it got a Scala-like `switch` construct [1]).<p>Edit: one limitation of pattern matching is, that all values need a common supertype (e.g. be variants of the same enum in Rust, if we see each variant as a type and the enum as the common supertype. There is an RFC [2] to make enum variants accessible as types), while the visitor pattern could be implemented for any set of independent types. On the other hand, you then cannot have a typed collection&#x2F;container that contains values of these types, so you&#x27;d need some common trait like `Visitable` so you could accept an `Vec&lt;dyn Visitable&gt;`.<p>[0]: <a href="https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;patterns&#x2F;patterns&#x2F;visitor.html" rel="nofollow">https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;patterns&#x2F;patterns&#x2F;visitor....</a><p>[1]: <a href="https:&#x2F;&#x2F;openjdk.java.net&#x2F;jeps&#x2F;8213076" rel="nofollow">https:&#x2F;&#x2F;openjdk.java.net&#x2F;jeps&#x2F;8213076</a><p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2593" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2593</a>')