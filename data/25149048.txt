Item(by='rvense', descendants=None, kids=[25149335], score=None, time=1605791139, title=None, item_type='comment', url=None, parent=25148581, text='&gt; It&#x27;s about separating concerns to allow extensibility of one aspect of the component without having to worry about the other parts of the system.<p>Right, and I don&#x27;t see the HTML and the CSS as separate concerns when the HTML describes a GUI, not a document. There being two languages in play is a historical detail that as developers we have to tackle in the best way. I don&#x27;t believe that it&#x27;s some sort of holy spirit we have to respect.<p>For my money, separation of concerns is things like where do I put my mutable state, which part of the application talks to the network, etc.<p>&gt; but what if I&#x27;d like to have multiple styles<p>I have to say that&#x27;s not a thing I&#x27;ve ever needed to worry about. I&#x27;m worried about things turning into a big pile of goop. The old approach too often devolved into making a separate class for each tag. Starting with repetition and noticing patterns that then get factored out is a better approach for me.<p>I will say, though, that in Tailwind it absolutely would be workable to give e.g. colours a semantic name - like primary and secondary - and then map those to whatever you want, including CSS custom properties. So you absolutely can implement both build-time and runtime theming at that level if you want, where you just need to change configuration options or a set of properties.<p>&gt; What do I have to gain from Tailwind if I am using already SASS as the preprocessor and a good library of &quot;utility classes&quot; that can be @imported&#x2F;@use&#x27;d&#x2F;@apply&#x27;d to the document without touching the HTML?<p>Again, I&#x27;m not afraid of touching the HTML, that&#x27;s not a goal for me. In my work, any change of any consequence is going to involve both HTML, CSS, and JS anyway. I am much more afraid of accumulating cruft in poorly-maintained CSS files.<p>Tailwind&#x27;s utility classes are pretty fantastic - for instance, you can define a colour palette and they also become usable in gradients - so they&#x27;re a good place to start. I also like that it&#x27;s basically real CSS because that forces developers to learn, which will lead to better layouts. And yes, it will in some cases lead to the same set of classes as a semantic approach, because sometimes that classes are what makes sense. But the thing is, how do you arrive at that set of classes, and what do you do with the edges and boundaries and all the glue you need. Tailwind provides an extremely usable starting point and a good thought pattern for building the type of apps I do.')