Item(by='throw1234651234', descendants=None, kids=[25475223], score=None, time=1608346159, title=None, item_type='comment', url=None, parent=25459506, text='DRY and SRP are the air I breathe, so I need to defend it.<p>&quot;This means that when reading through the original caller, it is less clear what the code does.&quot;<p>This is false - if you have a clear service and method name, with clear, properly-typed params, it SAVES time, because unless it&#x27;s broken, it&#x27;s a SHORT invocation that abstracts the details.<p>&quot;the function might have some surprising semantics. For example, mutating contents of local variables is sensible in code.&quot;<p>Pure functions are the only &quot;apply everywhere&quot; part of the functional programming paradigm. Side effects are just as painful in .NET and Java as they are elsewhere.<p>&quot;Overgeneralized code&quot;<p>SRP let&#x27;s you identify this fairly easily. As an example, I just tried to abstract away &quot;Edit&quot; and &quot;SuggestEdits&quot; in the same controller to stay DRY, but then realized it violates SRP.<p>&quot;Each modification of the &quot;common&quot; function now requires testing all of its callers. In some situations, this can be subtly non-trivial.&quot;<p>Much less painful then knowing you have to change it in multiple places AND THEN checking the code. Just doesn&#x27;t apply.<p>&quot;When each of those code segments were repeated, ownership and responsibility were trivial. Whoever owned the surrounding code also owned the repeated segment.&quot;<p>The team owns the code. At worst, the lead owns the code. Bad excuse.<p>Feels like a dramatic contrarian piece to me. As mentioned, SRP and DRY are the only two things that allow our team to keep churning without significant tech debt. That, and avoidance of magic strings.<p>These 3 things are probably 80% of clean code.<p>Edit: Oh, and keeping methods to 5 lines or less, except in genuinely extreme, rare cases. Of course that&#x27;s theoretically under &quot;SRP and abstraction&quot;, but you know..<p>Edit 2: The single source of truth comment is on point as well. There was a rule when Python was designed &quot;There should be ONE, and ideally ONLY one way of doing things.&quot; This is extremely important to writing good code and on-boarding people onto your project.')