Item(by='rwmj', descendants=None, kids=[24899106, 24899062], score=None, time=1603733197, title=None, item_type='comment', url=None, parent=24897326, text='Having not used Tcl since the 90s, I recently wrote some small graphical scripts in Tcl, basically tailing a text file, parsing the data, and producing a live animation[1].  The project was successful, but also reminded me about what I disliked about the language in 1994: As long as what you are doing is supported by the core language, it&#x27;s &quot;fine&quot;, but if you need to use an external library or need to do something beyond what the core does, it becomes quite tedious or even impossible.  Also structured data is really badly handled.  The article mentions defining your own operators and control flow, but is that something you ever really need?  (Yes, occasionally, but not very often)<p>I believe now as then that the great contribution of Tcl was Tk (the graphical toolkit), which is fantastic and has bindings in other languages.  I really wish GIMP had used Tk and improved it rather than inventing Gtk which is inferior in most ways.<p>Maybe this is all because I&#x27;m doing it wrong, writing scripts, and I should stick to its original purpose as an extension language, but it&#x27;s easy enough to add C extensions to Lua or Python, and at some point you may end up writing a significant sized extension and the language will matter.<p>[1] <a href="http:&#x2F;&#x2F;git.annexia.org&#x2F;?p=libguestfs-talks.git;a=tree;f=2019-fosdem&#x2F;nbdview" rel="nofollow">http:&#x2F;&#x2F;git.annexia.org&#x2F;?p=libguestfs-talks.git;a=tree;f=2019...</a>')