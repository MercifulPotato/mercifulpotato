Item(by='xamuel', descendants=None, kids=[25491615, 25491559], score=None, time=1608511232, title=None, item_type='comment', url=None, parent=25489879, text='Here&#x27;s an open-ended programming project which, in a certain formal sense, spans the entire range of all difficulty levels: write an &quot;intuitive ordinal notation&quot; for as large of an ordinal number as you can.<p>What is an &quot;intuitive ordinal notation&quot;? Definition: The set of intuitive ordinal notations is the smallest set P of computer programs with the following property. For every computer program p, if, when p is run, all of p&#x27;s outputs are elements of P, then p is in P.<p>So &quot;End.&quot;, the program which immediately ends with no outputs, is vacuously in P (all of its outputs are in P, because it has no outputs). It notates the ordinal 0. Likewise, &quot;Print(`End.&#x27;)&quot; is in P, because its sole output, &quot;End.&quot;, is in P; it notates the ordinal 1. Likewise, &quot;Print(`Print(End.&#x27;)&#x27;)&quot; is in P, notating the ordinal 2. And so on.<p>The above can be short-circuited:\n&quot;Let X=`End&#x27;; While(True){Print(X); X=`Print(\\`&#x27;+X+`\\&#x27;)&#x27;}&quot;.\nThis program outputs &quot;End.&quot;, &quot;Print(`End.&#x27;)&quot;, &quot;Print(`Print(`End.&#x27;)&#x27;)&quot;, and so on forever, all of which are in P, so this program itself is in P. It notates omega, the smallest infinite ordinal.<p>Here&#x27;s a library of examples in Python, currently going up to a notation for the ordinal omega^omega: <a href="https:&#x2F;&#x2F;github.com&#x2F;semitrivial&#x2F;IONs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;semitrivial&#x2F;IONs</a>')