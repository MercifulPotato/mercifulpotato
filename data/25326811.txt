Item(by='jpgvm', descendants=None, kids=[25328234, 25327131], score=None, time=1607290007, title=None, item_type='comment', url=None, parent=25326454, text='While this is true JVM disadvantages are only a problem in very niche domains like embedded or kernel development. (and where you are forced to use JS like web ofc)<p>Overall it&#x27;s definitely in contention for &quot;universal&quot; runtime and Kotlin&#x2F;Java are definitely close to fully general purpose languages that do all things sufficiently well.<p>IMO the reason why they win the general purpose category is because they have the least hard limitations.<p>CLR is in a similar quality class to JVM, C# is a very good language. I think if you are not on the JVM that is where you should be for general purpose programming.<p>JS&#x2F;Ruby&#x2F;Python&#x2F;etc are all single threaded, this is a hard limitation that I can&#x27;t look past. It&#x27;s a needlessly painful constraint when you just need something CPU intensive to be done quickly. Additionally lack of static typing isn&#x27;t something I am willing to compromise on anymore. I&#x27;m older now, I don&#x27;t have time for the sort of defensive programming required to make these languages produce programs with as few bugs as a statically typed equivalent.\nI still use Ruby for scripts but it&#x27;s not a tool I pick up for anything but the quickest of hacks anymore.<p>C&#x2F;C++ are too unsafe to use without too much brain space dedicated to making sure you are managing memory correctly.\nAlso lacking centralised repository and package management ala Maven.<p>Functional languages are too polarising, I can use them and appreciate them but rallying a team around them is too hard.\nHaskell and it&#x27;s ecosystem taught me a great many things and it&#x27;s definitely what most good languages steal from these days.\nBright spot of JVM&#x2F;CLR is you can mix a bit of them in when you need to with compatibility with the rest of your code with F# and Clojure&#x2F;Scala.<p>Rust is getting there but isn&#x27;t there yet. I think it&#x27;s the most promising besides JVM&#x2F;CLR. Really high quality type system, tooling is coming along, great quality ecosystem, async getting worked out. As it&#x27;s borrow checker gets smarter and perhaps an easy GC library is introduced (atleast easier than Rc&#x2F;Arc&#x2F;Cell&#x2F;friends) then it&#x27;s got great things in it&#x27;s future.<p>For me it&#x27;s Kotlin for now. It&#x27;s the right mixture of modern, easy to learn and built on solid proven tech without any severe limitations.')