Item(by='mehrdadn', descendants=None, kids=[25437506], score=None, time=1608041437, title=None, item_type='comment', url=None, parent=25430185, text='&gt; UB wasn&#x27;t meant to forbid anything, it was meant to allow implementers to offer different behaviour.<p>That&#x27;s unspecified behavior, not undefined behavior. Unspecified behavior can literally do anything or nothing at all, including aborting the program nondeterministically. That effectively forbids invocation of UB for the programmer since you can&#x27;t reason about the program after it&#x27;s invoked, unless you&#x27;ve verified your implementation has actually defined the behavior for you (despite not being required to). That&#x27;s quite different from unspecified behavior where the implementation is required to pick some sane behavior (often among a set of acceptable behaviors) and stick with it in a self-consistent manner.<p>&gt; Requiring everyone to define an ordering on all kinds of pointers would be too burdensome for implementers<p>I don&#x27;t see how it&#x27;d be more burdensome, and I don&#x27;t think burden is the issue here anyway. Implementers already have to implement canonicalization for equality comparisons, and they already have to implement casting to uintptr_t too. Just put the two together you get comparisons. One reason to not want to do this is that it might be too <i>expensive</i> to canonicalize to an integer under the hood (maybe it&#x27;s complicated arithmetic or whatever), but if they&#x27;re already willing and able to jump through all the hoops just for the sake of equality comparisons, ordering is hardly any different.<p>&gt; (or maybe some implementers wanted to trap on unrelated pointer comparison, because if you&#x27;re doing pointer arithmetic with unrelated pointers you&#x27;ve probably got a bug).<p>Not at all. You want to linear-search in a list and want equality to work for that? Well I want to binary search in an array&#x2F;BST and need comparisons to work for that. This was such an obvious thing to want to do that C++ made it work out-of-the-box for std::less and whatnot.')