Item(by='t0astbread', descendants=None, kids=None, score=None, time=1605456018, title=None, item_type='comment', url=None, parent=25096156, text='I was initially shocked by this as well so I did some more reading on OCSP and it seems this is being addressed through OCSP stapling.<p>According to Wikipedia &quot;[OCSP stapling] allows the presenter of a certificate to bear the resource cost involved in providing Online Certificate Status Protocol (OCSP) responses by appending (&quot;stapling&quot;) a time-stamped OCSP response signed by the CA to the initial TLS handshake, eliminating the need for clients to contact the CA, with the aim of improving both security and performance.&quot;<p>I&#x27;m not aware how widely deployed OCSP stapling is in reality. I looked at my Firefox settings which seemed to be the default for OCSP and it looked like this:<p><pre><code>  security.OCSP.enabled                     1\n  security.OCSP.require                     false\n  security.OCSP.timeoutMilliseconds.hard    10000\n  security.OCSP.timeoutMilliseconds.soft    2000\n  security.ssl.enable_ocsp_must_staple      true\n  security.ssl.enable_ocsp_stapling         true\n</code></pre>\nSo I assume OCSP stapling is enabled but direct OCSP is disabled in Firefox by default but a positive OCSP response is not required in general. I tried to check what was really happening with Wireshark but regardless of the configuration and sites I visited, I couldn&#x27;t get Firefox to emit an OCSP query.<p>I also don&#x27;t know what other TLS implementations (like OpenSSL) do and how users of such libraries usually configure them.<p>Addendum: Oh and of course, OCSP stapling is useless when you weren&#x27;t about to open a TLS connection (like in this case when checking software signing certificates). I&#x27;m also curious if and how this works for other applications of X.509 certificates such as mutual TLS authentication.')