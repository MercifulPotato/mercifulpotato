Item(by='tehbeard', descendants=None, kids=None, score=None, time=1603442235, title=None, item_type='comment', url=None, parent=24867104, text='Do you have a staging enviroment you can use?<p>As others said, vscode with php extensions works quite well (you do need a local php install for intellisense to work iirc?)<p>As for migrating. I wouldn&#x27;t aim for 8, that&#x27;s a hell of a jump to make from 4&#x2F;5 and just getting to 7.x would give you a few years of breathing room <a href="https:&#x2F;&#x2F;www.php.net&#x2F;supported-versions.php" rel="nofollow">https:&#x2F;&#x2F;www.php.net&#x2F;supported-versions.php</a> .<p>First goal, get it working on 5.6 without any deprecation errors or notices, that&#x27;s a good basis for a &quot;legacy&quot; codebase to be on.<p>From there, the hop to 7.x is mostly changing any mysql_* calls, avoiding the short tags (use `&lt;?php` instead of `&lt;?&#x27; and a few other things found by looking at the migration notes here <a href="https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration70.php" rel="nofollow">https:&#x2F;&#x2F;www.php.net&#x2F;manual&#x2F;en&#x2F;migration70.php</a> (other version notes available from the menu on that page).<p>As for tooling, Rector, phpstan and Psalm might be helpful, but might be more trouble than their worth if you&#x27;ve only dipped your toe into PHP development. Rector can do automated refactoring with some code (helpful for the mysql_* function removal&#x2F;replacement with mysqli_* for instance). phpstan and psalm are static analysis tools that can help find problems or issues with the code.<p>Final comment, make sure this is in version control so you can track any changes made and have known working versions.')