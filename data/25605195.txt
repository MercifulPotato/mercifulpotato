Item(by='redshirtrob', descendants=None, kids=None, score=None, time=1609524587, title=None, item_type='comment', url=None, parent=25605002, text='&gt; Why is there so much aversion to proving one&#x27;s abilities? Programmers today feel they shouldn’t have to do whiteboards, or hackerrank, or take-homes.<p>Because it doesn&#x27;t necessarily prove one&#x27;s abilities. Each of those items have pretty obvious flaws:<p>- Whiteboard: Usually idealized problems requiring specific knowledge that is easily looked up, but not necessarily in one&#x27;s short-term memory. Whiteboard is generally not the tool one uses to write code. It&#x27;s very easy to bomb these sessions despite being competent.<p>- Hackerrank: Easy to cheat. Usually toy problems with idealized properties, i.e. they don&#x27;t have the dirty edge cases you see in real world development. This also tends to be just a first-pass filter for getting an phone interview or maybe on-site.<p>- Take Home: Easy to cheat. May run afoul of existing employment agreements. Requires a pretty large up-front time commitment, and IME does not actually avoid the on-site whiteboarding sessions anyway. It&#x27;s more of a first-pass filter.<p>&gt; How does a prospective employer evaluate someone’s problem-solving and programming chops?<p>That&#x27;s the million dollar question. As an industry we just don&#x27;t have a good system for identifying competent developers. My personal approach is to stick with folks I&#x27;ve already worked with, who have a long track record of delivering. That doesn&#x27;t scale at all and is not very good for folks just entering the industry.<p>I truly wish we had better answers and I support anyone trying to build something that explores the problem space. It&#x27;s nice to have diversity in hiring practices.')