Item(by='vlovich123', descendants=None, kids=None, score=None, time=1608246422, title=None, item_type='comment', url=None, parent=25461028, text='I feel like you&#x27;re kind of twisting my words (maybe because I wasn&#x27;t clear &amp; you got confused?).<p>My specific advice was originally towards the marketing strategy. So &quot;all software must be rewritten&quot; is not a marketing strategy. That is a go to market strategy. Additionally note that I&#x27;m specifically providing my thoughts on the go to market strategy a new entrant (i.e. startup) might use. I don&#x27;t know why you think I would be saying that the go to market strategy for a startup would be the same as Apple. It&#x27;s not. Apple has the scale and bankroll that they can operate &amp; innovate on multiple fronts simultaneously. That is not an avenue available to a smaller competitor.<p>I&#x27;m talking about general trends &amp; general advice. I&#x27;m saying if you&#x27;re <i>starting</i> a new chip company, you do not start by boiling the ocean. If you&#x27;re Google you already make ~40 billion dollars of (relatively high margin) revenue each quarter (Apple makes ~100 billion). The kinds of investments you make with that cash flow is very different from if you&#x27;re a chip company with a few hundred million in the bank from VCs to bankroll development &amp; no revenues to speak of initially (Nuvia, Cerebras). It&#x27;s also immediately apparent from this general framework that something like Mills is DOA &amp; will never get anywhere. The company either doesn&#x27;t have the focus OR they&#x27;re extremely underfunded to land what actually needs to be done. Likely the latter. They&#x27;re trying to innovate too much on too many different parts from reading their forums while simultaneously trying to build a company on principle free of VCs &amp; generally alien from how SV works.<p>If you want advice on how to a completely new chip is brought to market &amp; the extreme hyper-focus that kind of start up needs, I think you can use my advice on that to help you be more successful (or, if you&#x27;re an investor, evaluate whether such a company is worth investing in or trying to do too much). None of these are necessarily hard &amp; fast rules of course. The specifics of the situation can matter (although usually not as much as you think) but I use this as a first principles starting point before adjusting for the specifics of the situation. For example, if an asynchronous chip + a matching novel language can reduce asynchronous program costs by 20% &amp; provide performance 1000x greater per watt but you also need a paired custom OS, I&#x27;d probably say &quot;go &amp; build your own language &amp; operating system&quot; but pair it with &quot;what&#x27;s the developer story? Do we build something like Rosetta? Is there a non-trivial amount of code we&#x27;d need ported to make our solution attractive? etc&quot;. I&#x27;d of course first evaluate what amount of money that company is looking to raise &amp; whether they&#x27;re banking on their own abilities to be able to actually generate novel industry-leading inventions or if they&#x27;re just taking existing tech&#x2F;concepts that aren&#x27;t popular yet &amp; polishing it. Building world-class teams on multiple fronts, especially in both chip design &amp; compilers, operating systems, &amp; language design is extraordinarily hard. No one does it all at the beginning. Like it took Facebook a while to get to a point where they built their own PHP compiler for their needs. The cost of it didn&#x27;t make sense when FB had smaller revenues &amp; needed more of that revenue to focus on other ares of the business.')