Item(by='blacklight', descendants=None, kids=[25537451], score=None, time=1608913713, title=None, item_type='comment', url=None, parent=25535142, text='The programming language is often only a (relatively small) part of this problem. The choice of the framework (or, I&#x27;d say, the pollution of frameworks, as well as 40 MB libraries only imported to do dependency injection), wrong abstractions, wrong data models (if I&#x27;d had a penny for every time I&#x27;ve seen some code do a full list scan when it could have indexed the objects into a map I&#x27;d be millionaire by now), over-engineering, frameworks that reinvent the wheel (often in a much less optimal way, all in order to provide the developer with a bit of syntactical sugar), they all play a much bigger role in performance degradation than the language itself.<p>On top of it, projects are often lead by managers that are mostly interested in grabbing the low hanging fruits, pack the product with poorly tested features, set unrealistic deadlines and monetize as fast as possible, and they often don&#x27;t provide developers time to breathe, take a step back and do any refactoring or optimization - those are too often labelled as purely technical tasks with no business impact and pushed down the priority line.<p>Some of the code written two or three decades ago was much more efficient (especially given the hardware available at the time) than today&#x27;s projects both because developers were aware of building software for machines with a limited amount of resources, and because the software delivery timelines were much more realistic - aggressive marketing, sales and product departments hadn&#x27;t yet completely taken over the engineering departments, and while agile methodologies were supposed to mitigate these issues they&#x27;ve actually only shrunk even more the delivery windows and made software development more hectic and shortsighted.<p>30 years ago a program that would choke on a 386 would be refactored until each single but was optimized for the available resources. Today&#x27;s approach is simply &quot;just throw more RAM&#x2F;CPU power&quot; - and that&#x27;s what I frankly find unacceptable.')