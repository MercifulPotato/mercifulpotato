Item(by='Majromax', descendants=None, kids=[25708004], score=None, time=1610212343, title=None, item_type='comment', url=None, parent=25700719, text='This has been in the news again lately with Apple Silicon.  The ARM architecture has a weaker memory model than x86 in that it does not normally provide &quot;total store ordering&quot;.  Under that memory model, if thread A executes (from an initially zeroed heap):<p><pre><code>    a = 1; b = 1;\n</code></pre>\nthen thread B can safely execute:<p><pre><code>    if (b == 1) assert(a == 1); \n    if (a == 0) assert(b == 0);\n</code></pre>\nx86 provides this guarantee, but ARM does not -- thread B might see the b=1 write before the a=1 write.<p>Apple Silicon has a runtime toggle (<a href="https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;hardware&#x2F;comments&#x2F;i0mido&#x2F;apple_silicon_has_a_runtime_toggle_for_tso_to&#x2F;" rel="nofollow">https:&#x2F;&#x2F;old.reddit.com&#x2F;r&#x2F;hardware&#x2F;comments&#x2F;i0mido&#x2F;apple_sili...</a>) to provide for that behaviour, which greatly improves performance of translated x86 code (i.e. the translator does not need to insert precautionary memory barriers).')