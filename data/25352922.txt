Item(by='chrisdone', descendants=None, kids=[25355266], score=None, time=1607469476, title=None, item_type='comment', url=None, parent=25346456, text='A paper that profoundly influenced my language design: “Programming with Polymorphic Variants” <a href="https:&#x2F;&#x2F;caml.inria.fr&#x2F;pub&#x2F;papers&#x2F;garrigue-polymorphic_variants-ml98.pdf" rel="nofollow">https:&#x2F;&#x2F;caml.inria.fr&#x2F;pub&#x2F;papers&#x2F;garrigue-polymorphic_varian...</a><p>And the earlier paper “A Polymorphic Type System for Extensible Records and Variants” <a href="https:&#x2F;&#x2F;web.cecs.pdx.edu&#x2F;~mpj&#x2F;pubs&#x2F;96-3.pdf" rel="nofollow">https:&#x2F;&#x2F;web.cecs.pdx.edu&#x2F;~mpj&#x2F;pubs&#x2F;96-3.pdf</a><p>Row types are magically good: they serve either records or variants (aka sum types aka enums) equally well and both polymorphically. They’re duals. Here’s a diagram.<p><pre><code>              Construction                Inspection\n\n    Records   {x:1} : {x:Int}             r.x — r : {x:Int|r}\n              [closed]                    [open; note the row variable r]\n    \n    Variants  ‘Just 1 : &lt;Just Int|v&gt;      case v of ‘Just 0 -&gt; ...\n              [open; note the row var v]  v : &lt;Just Int&gt;\n                                          [closed]\n</code></pre>\nNeither have to be declared ahead of time, making them a perfect fit in the balance between play and serious work on my programming language.')