Item(by='LeifCarrotson', descendants=None, kids=None, score=None, time=1609961556, title=None, item_type='comment', url=None, parent=25659728, text='Reading this as a controls engineer who frequently deals with industrial robotics, it looks like there are three main points being made:<p>1. Industry 4.0&#x2F;Cyber-physical systems: Basically, the process of getting a database server to speak Ethercat&#x2F;Profinet&#x2F;EthernetIP and upload tag values from all the PLCs in the plant. Then you run some statistics and flag trends or anomalies and have a process engineer squint at the most promising graphs. This is a lot easier to do than of keeping track of cycle time, average sensor values,  faults etc. on a whiteboard or clipboard (and don&#x27;t expect vendors of traditional HMIs to make this easy to do on individual screens...HMIs are one of the most regressive parts of the industry). It&#x27;s not as complicated as the C-level&#x2F;government sales pitch makes it sound, but not a bad idea.<p>2. Safety around collaborative robots is hard. You want the robot to be able to accelerate heavy objects fast, but also to not hurt the squishy human in the same volume. Part of this can be fixed by improved electronics that can detect ever-smaller torque anomalies so that your 1kg payload robot detects a force more like a 2kg payload and comes to a halt after gently shoving the operator. But there&#x27;s a fundamental limit where no matter the sensor resolution or how fast you can stop, contact between your 100kg, 2000mm&#x2F;s cast steel robot arm and somebody&#x27;s skull is going to hurt the human.<p>3. Anyone familiar with natural-language programming, voice interfaces, or domain-specific languages will probably see the hazard they run into with the second point:<p>&gt; <i>Improved programming and communication interfaces can enable humans with little programming experience to control robots to perform a variety of tasks,while communication interfaces enable robots to communicate with other hardware and software.</i><p>Yes, robotics manufacturers are improving their software - your teach pendant is probably a color touchscreen now, instead of a 480x320 monochrome display with a few softkeys. But solving hard problems is always hard, and it&#x27;s probably always going to take a programmer (whether that&#x27;s part of their job title or not) who understands the solution to the problem to express that in a precise way so the software can understand it. Otherwise you&#x27;ve just made a more complicated system that usually solves the problem, and dropping back to a level that actually fully expresses the decision tree leaves you with more complicated interfaces. There&#x27;s certainly a lot of room to make the interface easier to use, but it&#x27;s always going to take some programming.  Doubly so if you&#x27;re trying to integrate vision or additional analog axes. Stick with digital sensors, open&#x2F;close grippers, and highly tolerant processes if you want it to be easy enough for an operator to pick up a pendant and do useful work.<p>My company, unlike some of our competitors, typically does not lock our customers out of their teach pendants to keep their warranty intact. It does sometimes mean that I need to come back and touch up a point where the operator saw that the robot sometimes failed to make the target and had their technician move it a little too far, so now the parts at the other side of the tolerance range don&#x27;t fit anymore, but typically both sides are acting in good faith and we work through that.<p>I think it&#x27;s going to take some third-party robot software like RoboDK to make this more intuitive. Right now, Yaskawa&#x2F;Fanuc&#x2F;Kuka&#x2F;ABB&#x2F;Epson&#x2F;Denso etc. are burdened with:<p>A) Customer bases who are productive with their legacy teach pendants and Pascal-like programming languages, and have a significant familiarity with their 2000-page manuals.<p>B) Robot operating systems that work. It&#x27;s hard to justify starting fresh, so you have to leave the quirks and complexities of old systems.<p>C) Simulator&#x2F;IDE software departments that are their own cost&#x2F;profit center in the automation company. Sure, the company manufactures hardware, but mostly you have to program it with the pendant (which might itself be a line item), the offline IDE is an optional line item that costs several thousand dollars. The offline simulator is extra, vision programming is extra, CAM toolpath generation is extra, each new network interface is extra...<p>Because of these factors, existing players will have a hard time making things intuitive.<p>Side note: Figure 2, the 2-position dial table with the light curtains, is a frequently-seen design but IMO a dangerous&#x2F;bad one. I really hope that blue button is a latch reset, but given that the process is typically to replace the completed assembly in the nest with new unassembled parts, and carry the assembly to pack-out (so your hands are full), everyone involved really wants to make this system self-resetting so the table indexes when the light curtains are restored. Operators and maintenance techs (like, I assume, this guy with the giant wrench) will frequently be tempted to step over the knee wall and into those two small voids adjacent to the dial to reach stuff at the back of the table, or put a knee up on the table to reach something.  If they take their other foot out of the horizontal light curtain, fix whatever&#x27;s broken or interrupt whatever sensor was blocking the condition that prevented the dial table from rotating, they&#x27;re going for a ride, which is really, really bad. That kneewall should fill the space around the dial so you can&#x27;t step in the corners, and there should be a floor scanner just above the table (it can also perform the function of the vertical light curtain) to stop the machine when someone&#x27;s anywhere in the entire volume.')