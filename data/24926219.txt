Item(by='kumarvvr', descendants=None, kids=None, score=None, time=1603936120, title=None, item_type='comment', url=None, parent=24920702, text='I found Blazor to be a good middle ground between SPAs and frameworks like Django or RoR.<p>The problem with frameworks like Django is that they have no real concept of UI Components. They have glorified ways of copy pasting html code. The cognitive burden when creating a fairly complex app, like a set of dashboards, is very high in Django.<p>The reason people flock to React is because, once they develop a component, it&#x27;s easy to re-use. And that is the drug that fuels them. However, the learning curve is high.<p>I found Blazor to be a good middle ground, because it has the concept of Pages (Razor pages), which are linked to URLs&#x27; and those pages can contain re-usable components. The framework is setup for basic site structures with a lot of options for customization. For example, you have default layout pages, that are included in every output. Great to put a basic menu and footer system.<p>Those working on ASP.NET MVC and like would find it a breeze to work on Blazor.<p>Couple that with the option of using C# for the whole application, it is very enjoyable to develop with.<p>I have used Angular, React and Django. Angular, for me, is too much complication for simple stuff, but <i>perhaps</i> works well with complex apps. However learning TS, as good as it is, was a turn-off for me. React is easy to start with, but as your app grows in complexity, it becomes hard to manage and think about various stuff like state management, routing, etc. Given choice between React and Angular, I would definitely choose React. Django is very good for sites like blogs or info pages, basically wherever there is a large amount of static content, pulled from database. Of all the above, I found Blazor to be very productive. I can also mix and match different paradigms and Dependency Injection is a god send.')