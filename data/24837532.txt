Item(by='danShumway', descendants=None, kids=None, score=None, time=1603203383, title=None, item_type='comment', url=None, parent=24833408, text='&gt; it&#x27;s still essentially the same program it was when the Blender Foundation was established.<p>I completely disagree. Blender&#x27;s interface has undergone a large number of revisions since the original program was launched, even prior to its giant 2.5 rewrite.<p>I chose Blender as an example in part because I think its single-company origins make it a better example of how Open committees can improve UX. Blender in the early-to-mid 2000s had a strong reputation for being unintuitive and hard to use. It&#x27;s only because of some really hard work from a dedicated community that Blender doesn&#x27;t have that same reputation today -- and I don&#x27;t think it&#x27;s a terribly controversial claim to say that Blender&#x27;s close relationship with artists has been one of the elements that has elevated it so far above other art tools on Linux (see Gimp), and that has allowed it to make so many smart iterations on its UX over the years.<p>&gt; and I can cite success stories from all of those approaches<p>Sure, I do agree with that. I didn&#x27;t mean to suggest that the community development model is the only way to write software; just that the community development model is a viable way to write software (especially for creative tools) and that it shouldn&#x27;t be dismissed.<p>There are several &#x27;auteur&#x27; style programs that I love that I think would have benefited from having more community involvement in their UX design. Git has a wonderfully elegant core; it definitely benefited from having a single person come up with the idea. But the CLI that was built around that core is really bad, and would have benefited tremendously from having more input.<p>There are also a lot of single-dev OS efforts that shine. But I don&#x27;t think that&#x27;s the only way to design software, or that community-run design should be dismissed because they exist.')