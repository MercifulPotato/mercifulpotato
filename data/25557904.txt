Item(by='rswail', descendants=None, kids=[25558449], score=None, time=1609147988, title=None, item_type='comment', url=None, parent=25553288, text='You are making the assumption that the actual science of Computer Science has anything to do with &quot;Software Engineering&quot;. The formal theories of CS, eg proof of correctness etc, have very little to do with day to day programming. The only example I know of true software &quot;engineering&quot; was the NASA Space Shuttle software team.<p>But they had the benefit of a fixed platform and total control of the software environment. Attempts to implement similar levels of &quot;engineering&quot; (eg CMMI etc) always fail unless they have similar constraints.<p>Software development is not &quot;engineering&quot; in the classic sense, where there are a set of formalized approaches, acceptance criteria etc to specific areas of implementation.<p>People wrap things up in &quot;process&quot; to try to present a picture of &quot;engineering&quot; but it&#x27;s a Potemkin village.<p>On the other hand, software &quot;architects&quot; are doing what building architects do. They apply heuristic approaches, hopefully using patterns that have shown to be successful. The reason architectual patterns appealed to programmers is because both fields are not engineering.<p>The trouble is that many software architects are focussed on the low level engineering. Architects that draw &quot;C4&quot; diagrams that go lower than maybe 2 levels aren&#x27;t being architects.<p>Design doesn&#x27;t travel in circles, it learns from experience. It understands that there needs to be constraints, otherwise the problem to be solved is unbounded. It understands that the system or product has to interact with its users and that the interaction needs to be as seamless as possible, so affordances are vital.<p>Don&#x27;t judge a professional field (&quot;design&quot;) by empirical science standards.<p>Design is not engineering.')