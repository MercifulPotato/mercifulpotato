Item(by='simias', descendants=None, kids=[24738775], score=None, time=1602330319, title=None, item_type='comment', url=None, parent=24738120, text='The only practical issue with &quot;out of control&quot; includes is still compilation time though, especially if modifying a single file causes many other files to rebuild because they include it directly or indirectly. Beyond that I really don&#x27;t care about it, I don&#x27;t usually bother to micromanage my #includes, I don&#x27;t really see the point.<p>Beyond that I think that very complicated include graphs are usually a sign that there&#x27;s an architectural problem with the application, forbidding includes within includes treats the symptom, not really the core of the issue.<p>As a quick example of some code I wrote not long ago: I have a microcontroller communicating with an external chip over a serial link using a custom protocol. I have a &quot;serial.h&quot; file that describes the API to send and receive serial messages, then a &quot;protocol.h&quot; that implements the higher level protocol. protocol.h includes serial.h since it uses it as a lower layer, it&#x27;s effectively a dependency. I don&#x27;t really think it&#x27;s a problem.<p>So I&#x27;m not really sure that it makes a lot of sense to forbid includes within includes as a rule of thumb. I guess if I was to make a rule it would be &quot;include trees are fine, include graphs are bad&quot;? As in, there shouldn&#x27;t be cycles in the include graph?')