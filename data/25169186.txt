Item(by='rglullis', descendants=None, kids=[25173369, 25169356], score=None, time=1605959605, title=None, item_type='comment', url=None, parent=25161280, text='&gt; you&#x27;re going to start having issues in targeting these elements unless you only ever have exactly 1 single design for each element, no matter where it is.<p>My example shows precisely how untrue that is. The buttons got different styles without having to change anything in the html structure.<p>&gt; What happens if you put &lt;button&gt; inside different tags?<p>Then you define the corresponding rule. With SASS that is almost <i>too</i> easy. Also, don&#x27;t forget that the <i>C</i> in <i>CSS</i> means <i>cascading</i>.<p>&gt; different order?<p><i>display:grid</i>, <i>grid-template</i> and even <i>position:absolute</i> if you need.<p>Do you think it will be too repetitve? Make a SASS mixin that defines these for you. Not only you&#x27;re  still keeping CSS separate from the HTML structure, it will very likely work in the same way that all of those &quot;pull-x&quot; and &quot;push-y&quot; rules are doing anyway.<p>&gt; single &lt;button&gt; specifically?<p>I am not against using classes and ids that define <i>purpose</i> and even <i>state</i> (for the odd case where the attributes are not enough&#x2F;non-existent). What I am against is the definition classes that are <i>mapped</i> to the presentation. You can have a <i>&lt;button class=&quot;critical-action-trigger&quot;&gt;</i> all you want, but please do not make <i>&lt;button class=&quot;size-huge red&quot;&gt;</i>.<p>Likewise, if the &quot;fire all nukes&quot; button is so special, it deserves to be represented with <i>&lt;button id=&quot;fire-all-nukes&quot;&gt;</i>.<p>&gt; then that&#x27;s exactly what Tailwinds already does for you.<p>I said above. If tailwind was only providing a bunch of utlity <i>mixins</i> and variables that I could then @import to my SASS, I would understand. What I don&#x27;t understand and <i>do not want</i> is to have classes that I am supposed to be writing inside the HTML.<p>The reason that I don&#x27;t want that is not out of &quot;purity&quot;, but rather because this lack of separation of concerns is leading us to a sub-optimal solution and forcing every frontend developer to reinvent component libraries every time they want to do something that is non-standard.<p>If we had a 100% style-free &quot;standard&quot; component library and the CSS designers focused only on implementing their design languages against that standard, the chances of us getting a more paretto-efficient basis for frontend development would grow immensely.<p>Nowadays, every frontend developer either needs to do everything on their own or hope that there is already a combination of JS component library + design language that is acceptable. If we had my way, everyone could then start their application with the standard components, pick any design language that claimed to implement the rules for the standard components and customize only the relevant parts. Everyone&#x27;s 80% of the job would be mostly done.')