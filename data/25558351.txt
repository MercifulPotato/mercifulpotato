Item(by='Geminidog', descendants=None, kids=None, score=None, time=1609154526, title=None, item_type='comment', url=None, parent=25557960, text='&gt;It&#x27;s definitely not &quot;science&quot;, either is it &quot;engineering&quot;, but it is definitely a discipline. You are judging one field by the axioms of another and then declaring it invalid because it doesn&#x27;t comply.<p>It&#x27;s a discipline the same way modern art is a discipline.<p>&gt;But that literally has nothing to do with the actual problem, which as Twisol said is about mapping the problem domain and the software domain so that both are supported.<p>I explained to Twisol, that I am talking about the &quot;problem domain.&quot; Both domains actually go hand in hand.<p>Think about it this way. Number theory is a formalization of numbers. A Math problem is in the problem domain that utilizes the formalization of numbers as a method for solving.<p>&gt;Both hardware and software have moved in well known cycles. Processing has moved from CPUs to external processors (IO, then GPUs etc) and back again as hardware capabilities change. When comms are slow, its better to have two smart ends so that you minimize the information that needs to flow. When comms are fast, you can make one end &quot;dumber&quot;.<p>So your point? I&#x27;m not getting what you mean by slow comms, and smart ends and dumb ends.<p>&gt;Your entire premise is at a different level of abstraction than &quot;software architecture&quot; or &quot;systems design&quot;. You haven&#x27;t proposed a mechanism by which messy human problems can be formalized.<p>No it&#x27;s not. It encompasses all levels. Have you ever used formal math to solve a &quot;math problem&quot; let&#x27;s say accounting. Balancing the books of your finances. This is a &quot;messy human problem&quot; that uses a formalization of something else for solving.<p>&gt;Software architecture and design is about dealing with non-deterministic, non-linear, fractal environments and the computer and systems science hasn&#x27;t provided the theoretical frameworks that would allow the environments to be formalized so that they can be &quot;engineered&quot;.<p>wrong. software is mostly deterministic. However, even a non-deterministic model is amenable to theory. Ever heard of probability? Additionally non-linear systems are just not as easily analyzable by certain methods such as calculus. You can still form a proof around a set of non-linear assembly instructions.<p>&gt;allow the environments to be formalized so that they can be &quot;engineered&quot;.<p>And that&#x27;s my entire point. There&#x27;s no point in iterating over the same endless design cycles and repeating the same mistakes over and over again every couple of years with a new framework that doesn&#x27;t necessarily make anything better. Better to develop the formalism around &quot;design&quot; and optimize it. Another article like the one the parent poster posted is pointless and doesn&#x27;t move the needle forward At all.<p>&gt;It&#x27;s definitely not &quot;science&quot;, either is it &quot;engineering&quot;, but it is definitely a discipline. You are judging one field by the axioms of another and then declaring it invalid because it doesn&#x27;t comply.<p>No I&#x27;m looking at the field and seeing that we&#x27;re going nowhere with endless conjectures and analogies about design. I&#x27;m seeing the patterns of today aren&#x27;t that much different then the patterns from the past. I&#x27;m also seeing the software being called &quot;engineering&quot; while eschewing much of the formalism that is part of engineering.<p>Due to all this I&#x27;m saying, that the field is going nowhere and is pretty much a big sham. I&#x27;m tired of the pointless flat circle of repeating history. &quot;Systems Design&quot; from the software perspective is therefore ripe for formalization and theory.')