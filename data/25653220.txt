Item(by='xyzelement', descendants=None, kids=None, score=None, time=1609892340, title=None, item_type='comment', url=None, parent=25652369, text='I didn&#x27;t read this article but I did decide to use Prolog (which I didn&#x27;t know prior) for this year&#x27;s Advent of Code. I ended up solving the first 8 days (so, 16 puzzles) and it was fun.<p>What I got out of the experience:<p>1. Intellectual confidence - it&#x27;s not often that we get to learn not just a new way of doing something but a new paradigm. I am 38, and while I try to challenge myself in all areas of life, how often is something a true mind-bender? The fact that I was able to wrap my head around (some of) the Prolog way of doing things proves to me that I &quot;still got it&quot; and is good exercise for keeping it that way.<p>2. One specific thing about Prolog is heavy reliance on recursion. I probably &quot;get&quot; recursion better than an average CS grad but this took me to the next level - I will be able to apply it in other languages.<p>3. There&#x27;s something about Prolog that makes programing feel like this: a ton of thinking up front, but once you do it, the implementation is bug-free (versus lots of fiddling around in other languages). I guess that&#x27;s probably true of non-imperative languages in general, but it was a nice change of pace. I am not a full-time programmer anymore (product manager) so for me coding is mainly fun&#x2F;intellectual and doing it in a way that removes the fiddling is great.<p>4. Prolog feels very retro, I can&#x27;t really explain it but it doesn&#x27;t try to be cool - it&#x27;s the opposite of say the latest JS framework that is polished to the 9s. Prolog feels more like the cockpit of a fighter jet - sparse and powerful, but you have to know how to use the tools.<p>5. The community is cool. I found the IRC channel and folks were very generous with their time, though to be fair I asked questions like: &quot;I implemented X like this, is that canonical?&quot; vs &quot;how do I do X?&quot;<p>6. I am glad to have Prolog in my toolkit. I can imagine problems down the road where logic programming is the best tool and I know I can reach for it now.<p>Bonus: a few posters in this thread asked about the ROI of learning a retro language given that they could be learning something else. I think it&#x27;s totally up to you, but looking back on the list above, almost none of the benefits I enjoyed are that I now know Prolog. So I guess you have to pick and chose your challenges, I wouldn&#x27;t get the same value from learning Fortran77 and I wouldn&#x27;t expect anyone else to either. Prolog is different enough from whatever else you&#x27;re doing that it can grow you beyond learning some minute detail of React Hooks (which are great, btw!)')