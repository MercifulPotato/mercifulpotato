Item(by='skohan', descendants=None, kids=None, score=None, time=1602964493, title=None, item_type='comment', url=None, parent=24810180, text='&gt; The result is a language ideal for no one and pushed heavily by Apple.<p>Does it have to be &quot;ideal&quot; to be worthwhile?  I think it fits a similar use-case to something like C# but it&#x27;s a lot nicer to work with.  I don&#x27;t understand why Swift shouldn&#x27;t be perfectly usable for data science, or writing server-less functions for example: it would be a perfectly suitable stand-in for Python or Go in these cases, but with a much nicer type system in my opinion thanks to the first-class optional handling.<p>&gt; Swift as a &quot;compiled python&quot; loses to Go, and that not even Go&#x27;s design goal (though it is a fairly common use of it).<p>I totally disagree.  Go is a jail.  It&#x27;s optimized for big teams with a lot of turnover, where you want to prevent complexity in the code-base by choosing a language with very limited facilities for abstraction.<p>Swift on the other hand has a really flexible syntax, which allows you to hide a lot of complexity behind simple interfaces.  In that way, it can be a lot more like Python, where the code you&#x27;re writing is very much at the domain level, and you don&#x27;t have to think about the implementation details very often.  There are many things you can express in swift which are no expressible in go.')