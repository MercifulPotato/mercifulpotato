Item(by='ojnabieoot', descendants=None, kids=[24912046, 24912513], score=None, time=1603833456, title=None, item_type='comment', url=None, parent=24911243, text='I would strongly recommend looking at “standard” dependently-typed theories and languages (or even proof assistants without dependent types), instead of trying to plunge into homotopy theory. Learning how dependent types work will be much more illuminating than trying to catch up on the algebraic topology. While the link between topology and formal logic is certainly interesting, I think you’ll be much better served by starting on the logic side of things.<p>Software Foundations is a well-known book &#x2F; series of Coq programs for theoretical computer science. [1]<p>Lectures on the Curry-Howard Isomorphism[2] is my favorite (graduate-level) introduction to type theory and the lambda calculus, including the “lambda cube” and pure type systems.<p>Finally, while Type-Driven Development With Idris[3] is not at all “theoretical,” it is still an excellent introduction to dependent types and the idea of proof-as-program. It’s also the only book about a specific programming language I’ve ever read and actually enjoyed :)<p>[1] <a href="https:&#x2F;&#x2F;softwarefoundations.cis.upenn.edu&#x2F;" rel="nofollow">https:&#x2F;&#x2F;softwarefoundations.cis.upenn.edu&#x2F;</a><p>[2] Available for free here (1 MB pdf) <a href="https:&#x2F;&#x2F;disi.unitn.it&#x2F;~bernardi&#x2F;RSISE11&#x2F;Papers&#x2F;curry-howard.pdf" rel="nofollow">https:&#x2F;&#x2F;disi.unitn.it&#x2F;~bernardi&#x2F;RSISE11&#x2F;Papers&#x2F;curry-howard....</a><p>[3] <a href="https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;type-driven-development-with-idris" rel="nofollow">https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;type-driven-development-with-i...</a>')