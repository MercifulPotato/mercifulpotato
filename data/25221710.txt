Item(by='nmadden', descendants=None, kids=None, score=None, time=1606410232, title=None, item_type='comment', url=None, parent=25221414, text='Thanks. For what it&#x27;s worth, the flow of thought was the following:<p>1. The original &quot;parse, don&#x27;t validate&quot; essay clearly describes why parsers are preferable to validators.<p>2. It uses a type system to make illegal states unrepresentable in a programming language - but a type system is a validator under its own terminology.<p>3. What would a parser-like approach to solving the problem look like?<p>I believe that actually adjusting the programming language grammar (and thus the actual parser) is clearly a parser approach to solving the problem. Abstraction is also, to me, a parser-like approach to solving the problem - it transforms code that allows illegal states into code that enforces particular invariants. I probably didn&#x27;t make those connections explicit enough in the blog.<p>Perhaps the diversion into object-capabilities is a bit off the track, but I found it an interesting connection at least. (And frankly, I&#x27;m usually close to the sole audience of my blog so I better make it interesting for me!)<p>Edit: formatting')