Item(by='adamkl', descendants=None, kids=[25116959], score=None, time=1605558725, title=None, item_type='comment', url=None, parent=25115664, text='This article seems to be more focused on code organization, which I guess ties into the idea of a <i>bounded context</i>, but doesn&#x27;t really dive into the nitty-gritty of DDD.<p>The most important aspects of domain driven design (as per Eric Evans himself) are probably the ideas of a <i>ubiquitous language</i> (so developers and domain experts understand each other) and <i>bounded contexts</i> (so you don&#x27;t conflate two different views of a particular domain concept into a single implementation).<p>I have to say that over the years I&#x27;ve become less enamored with associated object-oriented approach of entities and aggregates when it comes to an information processing system.<p>DDD likes to model things in terms of interacting entities, but I think a more functional, ETL-ish approach is closer to what our information systems are doing. Taking data from one place (UI, database, 3rd party service, etc), transforming it, applying business logic, and sending the result somewhere else. You can still leverage the benefits of a <i>ubiquitous language</i> and <i>bounded contexts</i>, you just model things as flows of data rather than interactions of entities.<p>I suppose I&#x27;m digressing here, but ultimately, this article is really only scratching the surface of DDD.')