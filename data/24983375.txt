Item(by='pjmlp', descendants=None, kids=None, score=None, time=1604433619, title=None, item_type='comment', url=None, parent=24979567, text='Maybe I should have phrased it in another way.<p>For you to get where I am coming from, for me Longhorn only failed due to the usual set of politics between DevDiv and WinDev that those of us on Windows know so well throughout the years.<p>Had they actually worked together and Longhorn, with .NET based stack would have happened, just like it did with Android and ChromeOS. When technical limitations exist, they can be sorted out when everyone rows into the same direction.<p>So after its failure, and reboot as Vista, the Windows team took many of the Longhorn ideas and redid them as COM libraries.<p>This decision started a trend (hence my started with Vista), where all major new APIs that were added to Windows since then, were COM based instead of classical Win32.<p>You can see this by following the C++ Hilo tutorial later released for Windows 7.<p>When Windows 8 came to be, they decided to double down on this direction and came up with WinRT, which if you read the Ext-VOS paper, looks quite similar. Ext-VOS being what was being designed as successor to VB&#x2F;C++&#x2F;J++ as COM evolution, before all the events that made .NET happen.<p>So you got the Windows team creating WinRT, they also had their own shot at what .NET should be, hence why it uses AOT based compilation with a compiler that only supports the MSIL sets that they cared about.<p>As we all know by now, due to several reasons this did not turn out as expected, still UWP (as COM evolution is now know) is still the way to go to all major APIs, even in the context of Project Reunion.<p>So we changed from Win32 + some relevant projects using COM, to Win32 mostly frozen in Windows XP API level + everything else is COM&#x2F;UWP based.<p>This was my point about Vista being the turning point where this took place.<p>I might be wrong, but this is how I see the evolution of those events.')