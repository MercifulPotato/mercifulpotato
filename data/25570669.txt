Item(by='eadmund', descendants=None, kids=[25571521, 25573284], score=None, time=1609255974, title=None, item_type='comment', url=None, parent=25569148, text='&gt; In 1986, perhaps I would have used telnet or ftp instead of scp. Modern scripting languages didn&#x27;t exist yet (perl was created in 1987 and perl5, the first version that some argue is modern, was released in 1994), so writing code that would do this with parallelism and &quot;good enough&quot; error handling would have taken more than an order of magnitude more time than it takes today. In fact, I think just getting semi-decent error handling while managing a connection pool could have easily taken an order of magnitude longer than this entire task took me (not including time spent downloading logs in the background).<p>&gt; Today, we have our choice of high-performance languages where it&#x27;s easy to write, fast, safe code<p>&gt; In 1986, there would have been no comparable language<p>Shell existed in 1986, and IIRC ftp could actually be scripted, a bit, so I think that it could have been used to run the download portion.  Maybe I misremember?<p>Lisp existed in 1986; the first edition of Common Lisp the Language was written in 1984.  It certainly could have been used, and even in the 80s I <i>think</i> it would have good enough performance for log parsing.  Certainly it would now, but that is after four decades of optimisation.<p>His point about libraries, though, is excellent.  The rise of open source libraries radically changed the software world for the better.<p>I should note, though, that Plan 9 — which was developed in the late 80s — removed a ton of the accidental complexity in dealing with e.g. FTP servers.  We could have <i>much</i> less accidental complexity, but we choose not to.')