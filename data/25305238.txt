Item(by='jayd16', descendants=None, kids=[25307007], score=None, time=1607103364, title=None, item_type='comment', url=None, parent=25301246, text='&gt;All threads created by this factory will be virtual threads that are always &quot;carried&quot; by the UI OS thread<p>Does this actually solve the problem?  I don&#x27;t see it.  We want to interweave foreground and background work.  Sometimes that means blocking work will yield, sometimes that means it should not yield because conceptually several tasks should retain exclusive control of that thread.  You might want some IO task on the background but you need a block of OpenGL tasks to retain control.<p>I just don&#x27;t see how you can do this implicitly in a way that&#x27;s cleaner than async&#x2F;await.  It seems like posting tasks to this thread factory or that will get the job done but is that an improvement?<p>It sounds like for now this stuff will still be using the current model of posting unyielding runnables to a thread.  That&#x27;s fine I guess.  Loom still seems very cool, it just doesn&#x27;t cover the cases I deal with a lot more often.')