Item(by='thepratt', descendants=None, kids=None, score=None, time=1611781414, title=None, item_type='comment', url=None, parent=25933698, text='If we step into the haskell land of monads having explicit functionality kept in individual monads with their own instances would be one way to segment this type of stuff. Something vaguely written as below would let you run actions where anyone can move or is an enemy, and default implementations can be provided as well.<p><pre><code>    data Demon = { ... }\n\n    data Action\n      = Dead\n      | KnockedBack\n      | Polymorphed\n\n    class Character a where\n      health :: Int\n\n    class (Character a) =&gt; Movement a where\n      speed :: Int\n\n    class (Character a) =&gt; Enemy a where\n      kill :: a -&gt; Action\n      damage :: a -&gt; Action\n\n    instance Character Demon where\n      health = 30\n\n    instance Movement Demon where\n      speed = 5\n\n    instance Enemy Demon where\n      kill _ = _\n      damage _ = _\n\n</code></pre>\n<a href="https:&#x2F;&#x2F;soupi.github.io&#x2F;rfc&#x2F;pfgames&#x2F;" rel="nofollow">https:&#x2F;&#x2F;soupi.github.io&#x2F;rfc&#x2F;pfgames&#x2F;</a> is a talk going through an experience building a game in a pure fp way with Haskell and how they modelled certain aspects of game dev. Most of the code examples are when you press down in the slides.')