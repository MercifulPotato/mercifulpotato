Item(by='cerved', descendants=None, kids=None, score=None, time=1608634041, title=None, item_type='comment', url=None, parent=25501978, text='I&#x27;m not familiar with the type system of Rust but it seems like a really nice language.<p>Ofc a type system that helps you deal with mutable data responsibly goes a looong way to alleviate the problem but it&#x27;s not a guarantee. And often times such a type system comes with weird and unexpected quirks. Here are some examples from C#:<p>For example &quot;readonly&quot; is not immutable, it&#x27;s a compile time guarantee that a value can only be assigned in the constructor of a type and to that instance of the type only.<p>This means that for type Foo with readonly int bar, you can have a constructor Foo(...) : this(...) and the value of bar is mutable in the context of those constructors. For most intents and purposes however, the &quot;readonly&quot; only field however acts immutable enough to give a reasonable degree of immutability.<p>The you have something like private setter functions. They go a long way to guarantee encapsulation of state. But there&#x27;s no compile time guarantee that an instance of <i>Bar int baz { get; private set; }</i> won&#x27;t mutate the <i>baz</i> value of any other Bar instance. In-fact, it&#x27;s a common misconception that private modifiers make something private to the instance, whereas it&#x27;s only a compile time guarantee that it&#x27;s not visible to any other type.<p>Furthermore, private modifiers don&#x27;t actually prevent anything from actually utilizing it in runtime. You can simply use reflection or other techniques and do what you will.<p>Then you can do other weaker forms of type-checking &quot;immutability&quot;, for example only exposing getter functions in a IFooReader interface.<p>These things all help alleviate &quot;dark mutability&quot; to different degrees but the underlying values are still mutable. I guess the point I&#x27;m trying to make is, yes, it massively helps to have a type system that guarantees encapsulation and immutability to different degrees. The caveat is that we are still at the mercy of that type system and the way it enforces immutability is often non-obvious and less immutable than one might expect.')