Item(by='1980phipsi', descendants=None, kids=None, score=None, time=1608668840, title=None, item_type='comment', url=None, parent=25498496, text='I&#x27;m not sure it&#x27;s worthwhile to debate whether Rust or D is better.<p>On @live, I&#x27;m not sure Walter is going in the right direction, but I think some of your arguments aren&#x27;t the strongest. I have no issue with the incremental use of @live. People who use D know the difference between @system&#x2F;@trusted&#x2F;@safe and @live (esp. when @live is actually shipped and there is adequate documentation). The relevant question @live supporters could make is if @system&#x2F;@trusted with @live is safer than without it. I think your point about D not having a memory model might be fairer, I&#x27;m not really in the position to judge it. Your final point is a bit weaker. Walter could easily argue that the idea is to move towards incorporating these features from Rust. Of course Rust is going to be further ahead on this. @live is also not thoroughly documented and there&#x27;s a lot left to be determined.<p>I think on @live I&#x27;ve been most convinced by skeptics that something like a new type qualifier or storage class is better. This storage class would basically enforce the equivalent of Rust&#x27;s borrow checker (as in @live) and only allow one mutable or unlimited const references but not both. Users can also apply it incrementally, but is a bit more significant of a change than @live.')