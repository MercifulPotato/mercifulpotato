Item(by='MauranKilom', descendants=None, kids=None, score=None, time=1604882121, title=None, item_type='comment', url=None, parent=25026561, text='From my first few minutes of thinking about the problem (essentially scrolled right to the problem statement):<p>- Something about it reminded me of Project Euler. Shortly afterwards read the surrounding text confirming that.<p>- The problem should be pretty easy to solve if we could assume that each digit is unique (i.e. appears only once in the pass phrase). Clearly the challenge here comes largely from digits being possibly present multiple times. A greedy algorithm could start with this assumption and then, upon encountering a contradiction, duplicate a digit. To decide whether such an algorithm is optimal you&#x27;d want to try and construct an example where it produces a suboptimal result. Might lead to a few iterations of refining and seeing whether you can keep it greedy.<p>- Could this problem be NP-hard? Could you encode NP problems in the ambiguities of &quot;are these two identical digits also the same ones in the passcode&quot;? At this point some meta-solving comes in: Project Euler problems allow brute-forcing in principle, but usually it won&#x27;t get you far without at the very least a clever reduction. 50 login attempts might be on the order of 10-20 digits in the passphrase (if you assume digit positions being chosen at random, you could actually get a decent estimate), which is not amenable to pure brute force.<p>- Is it possible that there is no unique solution? It seems very likely to me, and I should probably try to construct an example. (I won&#x27;t, because I&#x27;m trying to only scope out my own solution process).<p>- I tried to frame the problem as a partial ordering, but the difficulty is (again) in the label ambiguities. Could we give a different label to every single given digit and then try to merge them? Can this be done greedily? What to do with ambiguities? The above considerations return, from a different angle.<p>- The unknown length makes the number of unknowns, well, unknown. But you could postulate a length, giving you a fixed number of unknowns that need to be assigned.<p>- It&#x27;s impossible to observe my own problem solving process without impacting it. And writing it down tends to affect it very strongly (mentally drilling down into individual facets instead of staying at &quot;surveying level&quot;).')