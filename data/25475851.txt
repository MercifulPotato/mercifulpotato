Item(by='geocar', descendants=None, kids=None, score=None, time=1608363768, title=None, item_type='comment', url=None, parent=25473823, text='&gt; How true is this? I hear this claim a lot but haven&#x27;t seen any real benchmarks ...<p>I think you&#x27;re trying to read into the statement something other than Arthur meant; The last part of the quote is just as important as the first. Allow me to try and explain.<p>It&#x27;s pretty easy for an experienced C programmer to beat K at some things, for example:<p><pre><code>    int i,n;for(i=n=0;i&lt;1000000;++i)n+=i;\n</code></pre>\nis faster (with gcc -O2) than the &quot;equivalent&quot;:<p><pre><code>    +&#x2F;!1000000\n</code></pre>\nwhich is more literally:<p><pre><code>    int N=1000000;*a=malloc(N*sizeof(int)),i;\n    for(i=0;i&lt;N;++i)a[i]=i;\n    int n=a[0];for(i=1;i&lt;N;++i)n+=a[i];\n    free(a);\n</code></pre>\nbut even an experienced C programmer will experience some fatigue trying to convert a K program to C in this way, and the K implementation is certainly faster than a literal translation (largely because it doesn&#x27;t use malloc, but yes also because of careful vectorisation and parallelising of many of the operators).<p>It&#x27;s my experience this difference adds up faster than anything else, and that&#x27;s why a 20kloc C++ implementation of a HIBP checker was beat 10x by a 5-line k&#x2F;q solution:<p><a href="https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22467866" rel="nofollow">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=22467866</a><p>But make no mistake, I don&#x27;t use k because it&#x27;s fast, but because it makes <i>me</i> fast: five lines of code ain&#x27;t squat to get right over 20k lines, so I&#x27;d prefer the k solution even if it were &quot;only&quot; just as fast as someone&#x27;s C++ solution.<p>It does help tremendously though, that it&#x27;s usually much much faster.')