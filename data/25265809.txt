Item(by='rzwitserloot', descendants=None, kids=None, score=None, time=1606835418, title=None, item_type='comment', url=None, parent=25265183, text='&gt; prevent abuse by the trusted party<p>Actually eliminating this problem by using a cryptocurrency requires 2 crucial aspects:<p>1. The transaction being performed would have to be stateable and checkable 100% as an eth contract. Thus, if the deal is: I mail you my old iphone, and once I receive it, you shall gain a bunch of digital value, then.. how? How do you put in an eth contract that the iphone is real, not stolen, not broken? How do you protect against someone mailing you a brick? If the entire transaction cannot be _completely_ described in the contract, there are still third parties and plenty of room for scams. As far as I can tell (and I&#x27;m no expert, so I&#x27;m writing this mostly to check if my assumptions are wrong - plenty of knowledgable folks in the thread), bitcoin, ethereum et al make this _worse_: Normally if you send me a literal brick in a box, I don&#x27;t have to file in court, I can just make some pictures and make a claim with the payment processor. Yes, this can be abused, but right now, today, this is more of a help than a hinder: They _DO_ prevent the &#x27;mail a brick in a box&#x27; scams relatively well. With ethereum and such, if we code in the contract that the money will be transferred once DHL or UPS or whatnot signs off that the package was signed for, then what the heck do I do if you mail me a brick in a box? The kinds of middlemen (courts, governments, payment processors, transaction broker, etc) that can help me out are precisely the middle men that systems like ethereum are trying to eliminate!<p>2. That Joe Random knows how to program eth contracts and inherently knows how to ensure that the contract code seems like it has no leaks. Given that teaching someone to program is difficult, that there are many folks who don&#x27;t seem to have a knack for it, and that there are lots of stories about faulty contracts that resulted in massive financial loss, I don&#x27;t see how Joe Random gets to do this. Thus, Joe Random will need to rely on trusted parties: A programmer for the contract, or a website that shows standard contracts, or a security consultant that will review the contract code Joe Random wrote to ensure it is sound. If that consultant wants to scam Joe, how does Joe stop this? One could make overtures that eth itself will solve this (by using it to convey that a whole boatload of parties all sign off on &#x27;You can trust Jane Consultant, she knows her stuff&#x27;, but now you&#x27;re just encoding a web of trust, which you can do just as well for current systems (&#x27;You can trust paypal, they know their stuff and will fairly treat chargebacks and complaints&#x27; [1]).<p>Combine the two and I&#x27;m left with the idea that the problem eth tries to solve is real, but that it is just the technical part of a more complicated solution - a solution whose human parts are not obviously solved.<p>In other words, yeah, eth as a concept seems misguided and mostly useless to me. But I&#x27;m sure I&#x27;m missing something.<p>[1] PayPal isn&#x27;t particularly trusted. But that&#x27;s just proof of the current system working: It&#x27;s not hard to figure that out, and to get an in-depth analysis of what paypal will and won&#x27;t do for you if you get scammed.')