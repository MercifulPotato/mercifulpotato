Item(by='Traster', descendants=None, kids=None, score=None, time=1604597482, title=None, item_type='comment', url=None, parent=24997675, text='Well, on this particular topic, I used to work for Intel so a lot of it comes from knowledge of how the company works institutionally. It&#x27;s difficult to explain to an outsider but Intel has this weird combination of making enormous bets but with an incredibly ossified corporate culture. So some project will get kicked off - they&#x27;ll buy a company like Nervana or they&#x27;ll hire in someone like Jim Keller and give them a mandate to go off and do something huge.<p>The problem is how this intersects with the dynamics with the Intel organisation. Firstly, there&#x27;s already five teams that already do whatever you want to do, so you go up the chain saying &quot;I need 5 engineers to do X&quot; and the answer comes back down the chain &quot;Team Y already has 20 people, they do X, you should get them to do it&quot;. But so now rather than doing X, you&#x27;re paying Team Y to do X, oh and Team Y doesn&#x27;t give a shit about X, they care about Z, so about half your budget for X is now being subtly shifted to work on Z. So the cost of your project massively inflates.<p>Oh, and because when your project was approved they canned something else, some senior executive is saying that half your headcount should be &quot;internal transfers&quot; so suddenly your project has to find work for 50 software engineers at Folsom who just finished working on Intel&#x27;s Modem team (before that they worked on Intel&#x27;s previous GPU team too before that got canned).<p>Now comes the real issues, because you&#x27;ve got all these different teams that you rely on for your project and they don&#x27;t answer to you, they answer to random different org structures, it&#x27;s practically impossible to hold them accountable. Which leads to hilarious dynamics where team A will fall behind on their tasks, but they already know team B has fallen behind, so team A will lie about being able to deliver, because they know they&#x27;ll never have to. So the critical path on your project isn&#x27;t the team that&#x27;s fallen behind, it&#x27;s the team that&#x27;s fallen behind <i>and</i> all the other teams that have made the calculated  judgement your work can be deprioritized because team B will sink your project anyway.<p>Finally comes the release. All of these internal fights don&#x27;t change the fact that you&#x27;re responsible for delivering a product to market, and almost certainly if it&#x27;s an important project it&#x27;ll be part of some Group&#x27;s goals (like the Datacentre group or networking group). Now, the General Manager of the group isn&#x27;t going to miss her&#x2F;his goals. So you&#x27;ll &quot;ship&quot; a product, by which we mean you&#x27;ll send a handful of sample products to a partner. They probably wont work, they&#x27;ll be a tiny subset of the functionality you originally promised. So anyway, that&#x27;s the point at which someone realises we&#x27;ve just spent 10,000 years of engineering effort to deliver a discrete Graphics chip that is marginally less powerful than the integrated one.<p>But the product is out there, so you&#x27;ve got sales data now and revenue. So you need to agree your roadmap for the future! But the first product was shit, and getting it into any sort of state to be competitive would be an enormous amount of work because it was compromised at every point, so no one will sign off on throwing good money after bad and so what happens? Nervana? Fuck you! We&#x27;re betting on Habana Labs now!')