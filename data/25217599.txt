Item(by='m_mueller', descendants=None, kids=[25217653], score=None, time=1606374299, title=None, item_type='comment', url=None, parent=25217501, text='I find Java itself works quite well for this. Especially newer Java versions with functional interfaces. You keep your data in data centric classes (e.g. something akin to struct-of-arrays in C) and have some functional interfaces to access this data, the only place where you loop over it, maybe in batches if it&#x27;s really large (test it though, up to 10s or 100s of millions of elements is still fast to loop through in memory). Then you got some algorithm centric classes that you can plug into these interfaces. And finally, after reducing the data you may have some classic objects, e.g. to represent results.<p>edit, to give you an example. Let&#x27;s say you have double precision X&#x2F;Y coordinates. Put that into a class with two double arrays for X and Y. In order to e.g. run an Euclidean distance computation against it, provide a (double, double) -&gt; double interface against it. Then you have either an Euclidean distance class providing that function or just an inline lambda that you can plug into that interface, giving you a distance array. Let&#x27;s now say you just want to have a list of 10 closes points - instead of sorting you&#x27;re fastest to brute force it. Only after you reduced it down to the 10 points, you put them into Point objects because there&#x27;s probably a consumer expecting it that way.')