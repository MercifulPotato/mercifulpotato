Item(by='nearbuy', descendants=None, kids=[24756925], score=None, time=1602519395, title=None, item_type='comment', url=None, parent=24753734, text='Funny, for a programmer or hobbyist, I&#x27;d recommend Unity hands down over Unreal. Unreal&#x27;s main strengths its rendering engine, better tools for artists and animators, and that it&#x27;s set up for making multiplayer first-person shooters. If you&#x27;re a mid-sized or larger team looking to make a multiplayer shooter with AAA graphics, Unreal is a strong choice. (You can make anything with either engine, but that is where Unreal excels.)<p>However:<p><i>Programming in Unity is quicker and easier.</i><p>* In Unreal you have to choose between Blueprints (which have some issues) and C++. C++ compile times are slow. Unreal supports hot-reloading of C++, but it frequently breaks stuff, so it&#x27;s safer to save your work, close the editor, and then recompile and restart the editor. It takes a few minutes, which really slows down iteration times when you&#x27;re tweaking a feature. If you have a bug in your C++ code, it can crash the whole editor, and you&#x27;ll lose any unsaved changes.<p>* Unity&#x27;s architecture is simpler, lighter, and more pure. Unity has GameObjects. They hold a collection of components. An empty GameObject has very few functions or variables. GameObjects are purely containers; you don&#x27;t inherit from them, you just make components. Unreal has Actors. An empty actor has 448 functions. sizeof() and empty actor is over 1 KB. You inherit from actors, and functionality is mixed between inheritance and components. This flexibility may sound like an advantage, but I find inheritance tends to cause more problems, especially in conjunction with Blueprints. Unreal&#x27;s built-in classes (AGameMode, APawn, APlayerPawn, ACharacter, APlayerController, AGameState, UCharacterMovementComponent) set up a somewhat complex architecture for you that&#x27;s strongly biased towards the FPS genre.<p>* Unity&#x27;s API documentation is miles ahead of Unreal&#x27;s. The community is also larger which makes problems more googleable.<p><i>Blueprints kind of suck.</i><p>* Blueprints look friendlier to non-programmers, but code is easier to read and write for anything complex. Even short things are often simpler in code. For comparison, here&#x27;s the same function in Blueprints (<a href="https:&#x2F;&#x2F;i.imgur.com&#x2F;86rt8qp.png" rel="nofollow">https:&#x2F;&#x2F;i.imgur.com&#x2F;86rt8qp.png</a>) and C++ (<a href="https:&#x2F;&#x2F;i.imgur.com&#x2F;7HSnlR9.png" rel="nofollow">https:&#x2F;&#x2F;i.imgur.com&#x2F;7HSnlR9.png</a>).<p>* Blueprints are saved in an opaque binary format. This doesn&#x27;t work well with version control. Unreal has a diff tool for Blueprints, but you can&#x27;t merge them. On rare occasions, a Blueprints will get corrupted or bugged and your only option is to revert it in your version control (we&#x27;ve had Blueprints crash the Unreal editor whenever you open them).<p>* Blueprints are an order of magnitude or two slower than C++.<p>* Blueprints lack a lot of functionality compared to C++. Only API functions that are intentionally exposed to Blueprints can be called. You don&#x27;t have anything like functors or lambdas. There&#x27;s nothing like templating or generics. While there appears to be a dropdown to make Blueprint functions public&#x2F;private&#x2F;protected, it doesn&#x27;t work (it literally has no effect).<p>* Making C++ code useable from Blueprints is extra work. It can be tricky to write classes and interfaces in C++ that can be used from either C++ or Blueprints. It&#x27;s not much of a problem for a single concrete class, but it gets tricky when you want to make things flexible with interfaces.<p><i>Unity has more resources for developers</i><p>Epic is slowly closing the gap here, but Unity has a bigger community, a bigger asset store, and better docs. For models and sounds, we often would use the Unity Asset Store for our Unreal projects. Unfortunately, that&#x27;s not possible for code plugins. Stuff like Amplify Imposters and FinalIK just doesn&#x27;t exist on the Unreal Marketplace (although looking again, the Unreal Marketplace recently got a Fabrik IK plugin, so maybe they&#x27;re catching up).')