Item(by='Geminidog', descendants=None, kids=None, score=None, time=1608431386, title=None, item_type='comment', url=None, parent=25482503, text='&gt;And we get to the key point you are missing. Its clear from the context.<p>I understood this point utterly and completely you have misunderstood the point I was making. I am saying you can&#x27;t rely on context because context can grow in complexity and can actually live far away from where you are using a variable or a function. Relying on context leads to code that will inevitably become less and less readable as complexity grows. Read my post. I literally addressed &quot;context&quot; and you literally missed my point.<p>Let me spell it out for you. If I have a 500 line piece of code, Bobs is created on line 1 then reused again on line 500, and I&#x27;m currently looking at line 500, you&#x27;re expecting the reader to scroll all the way back to line 1 to decipher context. Couple that with multitudes of other concepts littered throughout your code with context strung throughout the page and located in different files.... This is my point that I demonstrated to you earlier to COUNTER your point. Once you realize this, you&#x27;ll know that you&#x27;re the one who missed the point.<p>You function name should be so clear that a reader should never have to read context. He reads the name and he can move on with life without decoding everything you did.<p>If I called the variable list_of_profiles_named_bob, no context is needed. Critical information lives and moves with the concept.<p>Let me reiterate my point: Context used in place of naming is done by programmers who are bad at writing readable code.<p>&gt;Additionally, &quot;merge_married_profiles_into_list_of_pairs&quot; is not necessarily better. When debugging the code, we don&#x27;t know what that part really does.<p>This is 100% better. Nobody needs to know what a function actually does, this is how abstraction works the point is that you only need to dive in when there is bug, but before there&#x27;s a bug complexity should be abstracted away so we can make sense of the bigger picture.<p>&gt;And again, it might depend on the audience - are we talking to a language expert, or a domain expert? Do we have a well tested and well defined library of domain functions that everyone has a clear understanding of?<p>I assume the audience can understand english. No need to use &quot;inner join&quot; when both the person who knows SQL also knows english. I chose the methodology that everyone can understand. What is the cost of doing this? Nothing. Just a longer function name that actually does zero harm to the structure of a program.<p>&gt;Context and audience matter.<p>Audience matters, assume the audience can read English and generally program, that&#x27;s it. Context as a communication medium is a crutch used by bad programmers to avoid abstracting concepts and giving things clear names.<p>&gt; Verbosity can be a lazy cop out for bad structure.<p>Verbosity and naming have nothing to do with structure this is categorically wrong, and also obvious but whatever, I&#x27;ll show you..<p><pre><code>   func add_two_nums(x,y):\n        return x + y\n\n   func add(x, y):\n        return x + y\n</code></pre>\nLiterally, 2 functions that do the exact same thing. You may claim the bottom function is better because it&#x27;s shorter. And I claim it&#x27;s shorter by a measly two words, who cares, both functions convey equal meaning and equal structure.<p>&gt;are we talking to a language expert, or a domain expert?<p>Literally domain expert code is a synonym for bad code. All code that is bad, when studied long enough will produce a domain expert that knows that shitty code inside and out. A domain expert is someone who mastered (or wrote) code only readable by other masters of reading that same bad code. Think about it this way, if you posted your code on github and people started reading the code, all domain expert code will be regarded as shitty code. This is the colloquial definition of bad code. The best code is code on github that should be readable by non-domain experts on a single pass.<p>Now I admit that there are some cases where it&#x27;s just too hard to do this. You can&#x27;t program a simulation in relativity that&#x27;s so readable that someone who doesn&#x27;t understand relativity can read the code. Of course that&#x27;s just too much to ask. What I&#x27;m saying is that &quot;inner_join&quot; is utterly unnecessary and that &quot;merge_married_profiles_into_list_of_pairs&quot; way better then what you came up with.')