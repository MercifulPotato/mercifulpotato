Item(by='ninjin', descendants=None, kids=None, score=None, time=1611122182, title=None, item_type='comment', url=None, parent=25842663, text='Care to elaborate? I am fairly familiar with the “story” in terms of packaging binary dependencies for Julia, but I am struggling to put my finger on the problem you describe.<p>BinDeps [1] which was the first stab at it was very much akin to what you describe in that it would attempt to build or install binary dependencies which would potentially affect the state of your system beyond Julia itself. While favoured by operating system package managers, it puts an enormous burden on package creators as you need to be aware of the state (also across versions) and inner working of each operating system, their package managers, and which dependencies that they pull in.<p>[1]: <a href="https:&#x2F;&#x2F;github.com&#x2F;JuliaPackaging&#x2F;BinDeps.jl" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;JuliaPackaging&#x2F;BinDeps.jl</a><p>This lead to the current approach, BinaryBuilder [2], where binary dependencies are described, cross-compiled, and then distributed and managed in a read-only “story” by the latest iteration of the Julia package manager. While I admit that this comes with drawbacks such as security updates to dependencies falling upon the Julia package maintainers, it more than makes up for it in terms of usability and reproducibility for the end user.<p>[2]: <a href="https:&#x2F;&#x2F;github.com&#x2F;JuliaPackaging&#x2F;BinaryBuilder.jl" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;JuliaPackaging&#x2F;BinaryBuilder.jl</a>')