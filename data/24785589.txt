Item(by='shaftway', descendants=None, kids=[24809770], score=None, time=1602744345, title=None, item_type='comment', url=None, parent=24758299, text='It was me. I can&#x27;t remember how I built it.<p>If I was doing it today I&#x27;d use some sort of balanced tree using the priority to navigate the nodes. Each node would have pointers to the head and tail of a singly linked list. Insert when the priority isn&#x27;t in the tree is a simple tree insert with head and tail pointing to a new single-element linked list, insert when the priority is in there is adding it to the tail of the right node and moving the tail pointer, removing is finding the right-most node, taking the head and advancing the head pointer by one element. If the list is now empty then delete the node.<p>But none of it matters. I don&#x27;t care if someone would build it the way I would. I would never expect that. I don&#x27;t even want an optimal or semi-optimal answer. I&#x27;d have accepted a singly linked list with O(n) insertion time and O(1) pop time. Or a plain list where new items are added to the end and a pop is an O(n) seek through the list.<p>What I care about is whether the developer come up with any solution, describe the tradeoffs that they are making, why they are making them, and what research they would do if any to find a better solution. If i could have this conversation that we&#x27;re having right here, right now with them then they&#x27;d probably pass my hiring bar.')