Item(by='geofft', descendants=None, kids=[25884202], score=None, time=1611419702, title=None, item_type='comment', url=None, parent=25882948, text='I had a use case recently for serializing C data structures in Rust (i.e., being compatible with an existing protocol defined as &quot;compile this C header, and send the structs down a UNIX socket&quot;), and I was a little surprised that the straightforward way to do it is to unsafely cast a #[repr(C)] structure to a byte-slice, and there isn&#x27;t a Serde serializer for C layouts. (Which would even let you serialize C layouts for a different platform!)<p>I think you could also do something Serde-ish that handles the original use case where you can derive something on a structure as long as it contains only plain data types (no pointers) or nested such structures. Then it would be safe to &quot;serialize&quot; and &quot;deserialize&quot; the structure by just translating it into memory (via either mmap or direct reads&#x2F;writes), without going through a copy step.<p>The other complication here is multiple readers - you might want your accessor functions to be atomic operations, and you might want to figure out some way for multiple processes accessing the same file to coordinate ordering updates.<p>I kind of wonder what Rust&#x27;s capnproto and Arrow bindings do, now....')