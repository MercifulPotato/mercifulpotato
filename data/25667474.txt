Item(by='amazoniananon', descendants=None, kids=[25671054], score=None, time=1609995848, title=None, item_type='comment', url=None, parent=25661488, text='&gt; these algorithm quizzes have nothing at all to do with our job<p>There are no algorithm quizzes here, and it&#x27;s not saying to prep for one. It says you should have a good grasp on these: arrays, heaps, linked lists, searching, etc. And it provides quality references for refreshing that knowledge and for getting practice thinking and speaking about them in human language instead of internal abstract thought. I think we agree that if you are in a senior engineering role, I don&#x27;t necessarily care if you can implement a linked list in an interview time slot, but I sure as heck care that you know how it&#x27;s different from an array, how it generally functions, when you would use it, in what situations alternatives might be better, and so on. When and why would you use a linear search instead of a binary search, are you aware of how hashes actually work and that hash collisions may occur and need to be handled in some way, can you identify that a particular problem is best solved by recursion or by dynamic programming even if you can&#x27;t whip up a functional solution in an hour, etc, etc. Some interview candidates literally can&#x27;t tell you why you would use a linked list instead of an array - it&#x27;s just an ordered collection to them. That&#x27;s what this is about - it&#x27;s not about quizzes, its about fundamentals. These are what our systems are made of and understanding them is valuable to do the work we do.<p>And aside from data structures and algorithms and being able to talk and reason about them, I also need to see actual code of some kind that solves an actual problem in this interview, with appropriate questions around the presented ambiguity as well as be able to talk about its trade-offs, potential improvements, testability, maintainability observability, and so on. But these are not necessarily anything like an algorithm quiz')