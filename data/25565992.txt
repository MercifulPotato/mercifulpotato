Item(by='a1369209993', descendants=None, kids=[25566227], score=None, time=1609208580, title=None, item_type='comment', url=None, parent=25565043, text='&gt; &gt; no documented way to force [the reference implementation, with the standard libraries (in particular libc) that the default system semantics are dependent on] to generate a static executable.<p>&gt; <a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;edition-guide&#x2F;rust-2018&#x2F;platform-and-target-support&#x2F;musl-support-for-fully-static-binaries.html" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;edition-guide&#x2F;rust-2018&#x2F;platform-a...</a><p>Yes, I&#x27;m aware of that; the fact that they continued using glibc as their default (aka canonical) OS&#x2F;syscall interface after discovering that it was so impossible to statically link that people had to retarget code to a whole second libc was one of the final nails in the proverbial coffin for me.<p>&gt; because Haskell also links dynamically to glibc by default, but it statically links with other Haskell code.<p>Not particularly relevant, since my inquery was mainly about Rust, but on my system I get:<p><pre><code>  $ echo &#x27;main = pure ()&#x27; &gt; foo.hs\n  $ ghc foo.hs\n  [1 of 1] Compiling Main             ( foo.hs, &#x2F;tmp&#x2F;tmp.icUr2pqZXx&#x2F;Main.o )\n  Linking foo ...\n  $ file foo\n  foo: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped\n</code></pre>\nAdmittedly, it&#x27;s entirely possible that I fixed ghc and&#x2F;or gcc at some point and forgot (I&#x27;ve fixed other bugs, but I don&#x27;t recall fixing this one).')