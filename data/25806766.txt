Item(by='tombert', descendants=None, kids=None, score=None, time=1610841998, title=None, item_type='comment', url=None, parent=25805286, text='I don&#x27;t think I agree with your last point; I actually think that the Java syntax isn&#x27;t particularly great, even for the time.  I don&#x27;t think that Java&#x27;s idea of object oriented design is ideal (I&#x27;m more of a fan of the ObjectiveC&#x2F;SmallTalk model), and that version of OOP is all Java really contributes from a syntax perspective...otherwise it&#x27;s largely just C&#x2F;C++&#x27;s syntax.<p>However, in a sister thread I think you mentioned that you are basically alright with languages targeting the same VM, which I think is probably a better path forward for a majority of use-cases.  Clojure and Kotlin and Scala all benefit from being more-or-less fully interoperable with each other; as a result, one can feel free to experiment with language design to their heart&#x27;s content without too much fragmentation.<p>That said, I don&#x27;t know that it&#x27;s entirely fair to completely criticize Rust on this; Rust exists specifically to address issues with C and C++, languages without garbage collection, and whose design doesn&#x27;t quite allow the same level of compiler safety and goodness that Rust does, though to be fair Rust does have C FFI so it&#x27;s not necessarily always reinventing the wheel either. I mean, I agree with the blog post we&#x27;re chatting on top of; Rust might be super awesome for systems-ey stuff, but for anything TCP-or-higher, I think a managed language is kind of better.')