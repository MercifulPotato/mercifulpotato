Item(by='fefe23', descendants=None, kids=[25138531, 25141396], score=None, time=1605716002, title=None, item_type='comment', url=None, parent=25138125, text='I may be missing the point here but this postings makes little sense to me.<p>There is nothing in the C standard that requires dynamic linking. In fact, I have been creating statically linked binaries with C for decades (and still am).<p>Also the definition of portability used here is not helpful.<p>If I take a program and put it on another computer, I can never just expect it to work. The other computer may be running OpenBSD when the first one was running Linux and we are talking about a Windows EXE. This metric makes no sense.<p>The established meaning of portability is whether you can take the source code and compile it on a different platform (but also supporting a development environment for said programming language), and it will compile and work.<p>This is not a function of the programming language.<p>The &quot;winners&quot; of this blog post are winning because they contain compatibility layers. Those work as long as you have one for the target platform. If you don&#x27;t you may actually be worse off with those languages compared to, say, a basic C environment that does not give you source code portability across all platforms but gives you a workable basis on each platform to bootstrap off of.<p>Also note that being portable may actually turn out to be a downside, because it means you have to limit what you can do to the common denominator of all supported platforms.<p>I recommend disregarding this blog post.')