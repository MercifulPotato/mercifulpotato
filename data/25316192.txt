Item(by='quietbritishjim', descendants=None, kids=[25316393], score=None, time=1607188463, title=None, item_type='comment', url=None, parent=25315191, text='Agreed that std::get_if is nice, it avoids redundantly checking then fetching the value compared to using holds_alternative. But there&#x27;s no need to have that separate clause in the if statement to test the truthiness of pointer, that&#x27;s already what will happen from the initialisation:<p><pre><code>    if (std::string* s = std::get_if&lt;std::string&gt;(&amp;myVariant)) {\n        &#x2F;&#x2F; Use s\n    }\n    else if (int* i = std::get_if&lt;std::string&gt;(&amp;myVariant)) {\n        &#x2F;&#x2F; Use i\n    }\n    else {\n        throw std::logic_error(&quot;Unexpected type in variant&quot;);\n    }\n</code></pre>\nThe hardcore modern C++ gang will vigorously complain that using this kind of chained if will - horrors! - yield a runtime error instead of a compile time error if you have forgotten one of the types that the variant can hold. I have some sympathy for that point of view, but in practice the small likelihood of that bug happening and the small extra difficulty of finding it at runtime is completely overshadowed by the extra complexity of std::visit.<p>I don&#x27;t agree with GP&#x27;s claim that chained ifs are likely to be slower than std::visit. If anything, it seems like they&#x27;d give the compiler less work to do to optimise well than the layers of funtion calls involved in std::visit, especially since std::visit is ultimately going to expand to chained if statements anyway.<p>(A digression that&#x27;s maybe dangerous to bring up: You&#x27;ve made an odd choice out of the many initialisation syntaxes to use. Many in the hardcore modern C++ gang would advise always using auto and brace initialisation, with no equals, even for really simple variable definitions e.g. auto i{int(3)};. Personally I find that obtuse and would write that as int i = 3, at least for simple things (raw pointers like in the example above fall into that category for me). Direct initialisation with parentheses isn&#x27;t normally advocated by either old-timers or modern C++ fans, in part because of the most vexing parse - did you mean to use braces?)')