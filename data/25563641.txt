Item(by='ragnese', descendants=None, kids=[25564799, 25565097], score=None, time=1609192159, title=None, item_type='comment', url=None, parent=25562987, text='For the most simple CRUD apps, there is almost zero business logic. So your whole application is basically IO. What&#x27;s the point of Haskell&#x27;s IO type when every function will have to be IO?<p>For the less simple apps, IO can be hidden behind interfaces for complex business logic. Here&#x27;s an imaginary example:<p><pre><code>    def getPriceForShoppingCart(product: Product, user: User, getDiscount: (User) -&gt; Percentage): Price {\n        if (user.isPremium) {\n            product.price * getDiscount(user)\n        } else {\n            product.price\n        }\n    }\n</code></pre>\nHow do we put the IO on the edges? Does this function just disappear and we have an `if` statement in our impure outer shell? That smells like business logic in the impure shell to me. Do we go ahead and call `getDiscount` in the outer shell and pass in the discount to the function? That also sucks because what if we made that trip to the database when we didn&#x27;t need to (because the user is not a premium user)?<p>I feel like every time I try to be religious about IO at the edges and not using impure dependency injection tricks, I end up running into a bunch of cases like this.<p>On the other hand, if I stand back and look at a function like this objectively... It&#x27;s easy to understand, it&#x27;s still quite easily testable. What&#x27;s the problem?')