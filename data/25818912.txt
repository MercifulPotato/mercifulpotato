Item(by='AWebOfBrown', descendants=None, kids=None, score=None, time=1610952084, title=None, item_type='comment', url=None, parent=25812753, text='The reality is that I&#x27;ve heard unit, integration and e2e almost entirely used interchangeably, <i>maybe</i> except the former and latter. I don&#x27;t think trying to nail down the terms to something concrete is necessarily a useful exercise. Attempts to do so, imo, make subjective sense in the terms of the individual&#x27;s stack&#x2F;deployment scenario.<p>To me, it&#x27;s a contextual term much like &#x27;single responsibility&#x27;. In this case, the two &quot;sides&quot; of an integration test are present. A consumer issues a request and a provider responds accordingly. The tests would ascertain that <i>with</i> variations to the client request, the provider behaves in the expected manner.<p>At which point you might point out that this sounds like an e2e test, but actually using the client web app, for example, might involve far more than a simple http client&#x2F;library - in no small part because the provider can easily run a simple consumer in memory and avoid the network entirely. E2e tests tend to be far more fragile, so from the perspective of achieving practical continuous deployment, it&#x27;s a useful distinction.<p>integration tests in this instance: varying HTTP requests (infrastructure layer) provoke correct behaviour in application layer.<p>e2e: intended client issues http requests under the correct conditions, which provokes certain provider behaviour, which client then actually utilises correctly.<p>This, to me, is why the most important part of testing is understanding the boundaries of the tests. Not worrying about their names.')