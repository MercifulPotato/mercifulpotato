Item(by='EGreg', descendants=None, kids=[25221839], score=None, time=1606409234, title=None, item_type='comment', url=None, parent=25221331, text='Look, 10 years ago I tried — really tried — to get the PHP team to adopt it. I am glad they finally came around:<p><a href="https:&#x2F;&#x2F;www.mail-archive.com&#x2F;internals@lists.php.net&#x2F;msg45871.html" rel="nofollow">https:&#x2F;&#x2F;www.mail-archive.com&#x2F;internals@lists.php.net&#x2F;msg4587...</a><p>Excerpt of the proposal:<p><i>So why am I saying all of this? Well, PHP up until 4 had a reputation\nfor lots of bad coding style, spaghetti code, etc. With PHP 5 and\nbetter OOP, this reputation has lessened, especially with the great\nlibraries out there (Zend Framework, Kohana, symfony, etc.) But there\nis still a problem. We (or at least I) would want PHP 6&#x27;s reputation\nto be even better, and the reputation is largely based on how\nmaintainable and cost-effective the code is, which is written by\nprogrammers actually using PHP. Blaming newbie programmers is one\nthing, and may even have some truth to it (PHP is simple - thus\nattracts newbies) but it&#x27;s always good for a language to steer you in\nthe right direction by default, and make it easier to write\nmaintainable code.<p>PHP has a great opportunity to do this, by implementing a very simple\nchange, turning all current PHP 5 code, and all code that will be\nwritten in the future, into maintainable code. Moreover, it won&#x27;t\nbreak any existing code, like some other additions to PHP 6 might do.\nThis one simple tweak will make PHP 6 code much more reusable and\nmaintainable, just like namespace support will potentially make future\nPHP code more interoperable without having to write\nArtificial_Namespace_Class, like ZF and PEAR do.</i>')