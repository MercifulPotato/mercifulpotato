Item(by='jrockway', descendants=None, kids=None, score=None, time=1606165098, title=None, item_type='comment', url=None, parent=25186866, text='I am surprised that game engines aren&#x27;t set up to test simple scenarios programmatically.  I play a lot of Overwatch and the bugs &#x2F; patch notes about fixing those bugs amaze me every time; they tell me a lot about how the software is designed and tested.<p>There was one bug where a character has a deployable ability that doubles the damage and healing of all projectiles that pass through it.  One day, the patch notes read &quot;fixed an issue where healing was not amplified when passing through the amplification matrix&quot;.  And, I totally get it... every conference talk I&#x27;ve seen out of Blizzard goes into details about all the infrastructure they&#x27;ve made for play testing their games.  It sounds easy to get your coworkers into a build of your latest PR and try it out.  But things like these subtle numbers adjustments just don&#x27;t translate well to play testing -- sometimes the enemy is doing so much damage that you can&#x27;t really be sure that the problem is the Amp Matrix isn&#x27;t multiplying the healing by the right number.  So, from time to time, refactors break it!<p>But, in a world where you could easily write integration tests, this problem would never happen.  You&#x27;d write a simple scenario like &quot;create empty room.  place baptiste at position 0,0.  deploy amp matrix at position 10,0 with orientation 90 degress.  place sombra at position 20,0.  set her health to 80.  make baptiste fire a healing grenade along vector 1,0 at an angle of 45 degrees.  wait 10 ticks.  ensure that sombra&#x27;s health is now 200.&quot;  The framework to be able to write tests like this is not difficult (you can do it in their &quot;workshop&quot;), and it&#x27;s not difficult to write a test like this for every ability, and even every combination of abilities.  And, it would mean that play testers never ever need to be suspicious of numbers; the automated tests already check that.  You&#x27;d make developers more productive (the computer can check the basics like this), and play testers more productive (they don&#x27;t need to test simple stuff anymore).  But... I don&#x27;t think they do it.  The buggiest releases are when the team is under time pressure to hit a deadline (Overwatch has seasonal events; the patch that introduces a seasonal event always has some weird bugs), and I don&#x27;t think automated tests miss things under time pressure -- but humans sure do.<p>The one thing I&#x27;ll give Blizzard credit for is that their games are fun.  All that playtesting is certainly a good idea.  I&#x27;d supplement it with some gameplay-focused integration tests, though.  They have the money and the tools teams, and their games last longer than a few months, so it just seems like a smart investment to me.  So it just baffles me what bugs ship to production.')