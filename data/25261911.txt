Item(by='Jtsummers', descendants=None, kids=None, score=None, time=1606792649, title=None, item_type='comment', url=None, parent=25261636, text='The author could&#x27;ve made it somewhat easier, though. Keeping the unused variable (so still keeping the drop) it can be reduced by 1 operation, but the logic of what&#x27;s on the stack and managing it is simplified:<p><pre><code>  drop dup dup * swap abs - swap dup * +\n\n  operation : stack\n  (init)    : x y z\n  drop      : x y\n  dup       : x y y\n  dup       : x y y y\n  *         : x y (y^2)\n  swap      : x (y^2) y\n  abs       : x (y^2) |y|\n  -         : x (y^2 - |y|)\n  swap      : (y^2 - |y|) x\n  dup       : &quot; x x\n  *         : &quot; (x^2)\n  +         : y^2-|y|+x^2\n</code></pre>\nThe author&#x27;s version requires rot_3 in order to deal with performing the computation in an awkward order. This version deals with each variable in order and in a more natural way. And replacing `dup * ` with `square` simplifies it a bit more (which is what you&#x27;d do in a language like Forth, you factor common operations into new words):<p><pre><code>  : square dup *;\n\n  drop dup square swap abs - swap square +\n\n  operation : stack\n  (init)    : x y z\n  drop      : x y\n  dup       : x y y\n  square    : x y (y^2)\n  swap      : x (y^2) y\n  abs       : x (y^2) |y|\n  -         : x (y^2 - |y|)\n  swap      : (y^2 - |y|) x\n  square    : &quot; (x^2)\n  +         : y^2-|y|+x^2\n</code></pre>\nDown to 9 ops, and reasonably clear at this point.')