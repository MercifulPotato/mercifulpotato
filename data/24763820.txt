Item(by='badsectoracula', descendants=None, kids=None, score=None, time=1602581638, title=None, item_type='comment', url=None, parent=24753226, text='&gt; There is always more that could be optimized, especially when it comes to niche use cases, but generally Mesa&#x2F;radeonsi do a decent job of making things fast.<p>Sure, i didn&#x27;t dispute that, what i wrote was that Nvidia&#x27;s drivers are faster in some cases based on code i&#x27;ve actually seen. And they used to be slower until not too long ago in that case too, so it isn&#x27;t like they aren&#x27;t improving. But still Nvidia&#x27;s implementation is faster.<p>&gt; By &quot;lot of applications&quot; you mean some workstation applications that refuse to upgrade their code. You can still use AMD&#x27;s closed source driver on Linux if you need optimizations for those. If you don&#x27;t (and most people won&#x27;t) then Mesa works extremely well.<p>I mean games, applications and tools, not workstation applications. Not every application uses the latest and -rarely- greatest version of everything out there nor all applications are always updated - or even under development (especially games). Those that are may have other priorities too.<p>But why an applications uses some API is irrelevant, the important part is that the API is being used and one implementation is faster than another, showing that that other implementation has room for improvement.<p>&gt; You could argue for drivers not providing newer features in the compatibility profile (and Mesa did that until recently) but as long as there are customers demanding support for newer features while refusing to move off the older APIs, this is what you will get. I don&#x27;t think having OpenGL Core and OpenGL Compat sharing some of the API hurt anything here.<p>My point was that the split itself was a mistake (it isn&#x27;t like splitting OpenGL into Core and Compatibility was a mandate from heaven -or hell- it was something Khronos came up with) and the hurt was that it make things complicated for a lot of people (e.g. not everyone cares about having the best performance out there - some applications are, e.g., tools that wont even come close to using even a 1% of a GPU&#x27;s power, but they&#x27;d still prefer to rely only on open APIs instead of some proprietary one or some library that may be abandoned next year - code written for OpenGL 1.x 25 years ago can still work fine in modern PCs after all) and split the OpenGL  community into two &quot;camps&quot;.<p>This created issues like libraries and tools only supporting one version or the other, tons of bugs and wasted time for &quot;integrating&quot; to Core (or supporting both Compatibility and Core), invalidating a ton of existing knowledge and books (OpenGL being backwards compatible down to 1.0 is very helpful since you can always start at the beginning with something proven and work your way towards more modern functionality in an as-needed basis) and at the end all of that was a huge waste of time since everyone outside Apple decided that Compatibility is necessary - and Apple decided that splitting OpenGL in two halves wasn&#x27;t enough, so they made everyone&#x27;s life even harder and came up with a proprietary API all on their own.')