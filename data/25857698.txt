Item(by='vaduz', descendants=None, kids=None, score=None, time=1611227534, title=None, item_type='comment', url=None, parent=25855181, text='The reasoning on this is a bit circular: it was &quot;used by nobody&quot; because Google did not use it, because it had a static pin in both Chromium-based browsers and in Mozilla [0], resulting in high success rate in tests (they note it in their blog post that very high sucess rate is reported if static pins are on, but very low if they are ignored). There is also the problem that MS and Apple never bothered to implement it.<p>They had a chance to go forward and implement HPKP protocol in parallel with CT, they didn&#x27;t. They had a chance to go with other proposals - e.g. checking the CAA records (a proposal they themselves have made in the deprecation post, especially as CA certs are also well-known and pinned), they didn&#x27;t. They chose an option that works best for Google (and by extension: Facebook, Dropbox, etc), but not so much for everyone else.<p>This means is there is no way to spot a mis-issued certificate before it has been used - and you need to trust that the specific CA that issues it both adheres to transparency (pinky promise!) and obeys CAA (also, pinky promise - LetsEncrypt got in hot water when it didn&#x27;t). That is: unless you are Google or Dropbox or Twitter - then your browser will actually save you from connecting to any counterfeit site, <i>as that is what was important for Google</i>.<p>End result? Privacy is enhanced if you are lucky enough to be on the list of statically pinned sites (see my parent comment, and see the Mozilla version as well), everyone else only gets more transparency, but not stronger privacy.<p>[0] <a href="https:&#x2F;&#x2F;hg.mozilla.org&#x2F;mozilla-central&#x2F;file&#x2F;tip&#x2F;security&#x2F;manager&#x2F;ssl&#x2F;StaticHPKPins.h" rel="nofollow">https:&#x2F;&#x2F;hg.mozilla.org&#x2F;mozilla-central&#x2F;file&#x2F;tip&#x2F;security&#x2F;man...</a>')