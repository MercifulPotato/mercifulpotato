Item(by='ddek', descendants=None, kids=[25256140], score=None, time=1606754927, title=None, item_type='comment', url=None, parent=25255276, text='As you say, the API feels similar. However, result types have many benefits over exceptions, with a few drawbacks.<p>With a result type, in most languages, you can&#x27;t just ignore failure. You must handle it, if you want to access the value. This prevents the common Java bug where a checked exception is caught but not handled. In rust, you must handle the error, propagate the error, or panic and fail fatally.<p>Results don&#x27;t abuse a runtime either. The exception process is slow - stack traces must be generated and the runtime itself needs to manually find the catch block responsible. Returning a result doesn&#x27;t find this problem.<p>Checked exceptions are fine for exceptional cases. At risk of sounding facetious, that&#x27;s why they&#x27;re called <i>exception</i>s.<p>But there&#x27;s an important distinction that we need to make: <i>logic failures are not exceptional</i>.<p>If you expect an operation may produce an error, you should handle it or crash the program. You should do this without incurring a performance hit, and using reliable and transparent primitives. Result types achieve both of these criteria, checked exceptions neither.<p>The drawback to results is mainly the loss of data. Generating a stack trace is expensive, but often that&#x27;s a worthwhile cost. Exceptions could be more versatile, in that any part of your code can throw any type of exception, but a result can only contain a specific type of error. That&#x27;s not always a pro, though.<p>So in general, checked exceptions are pretty awful for expressing normal failure cases, such as not finding a record in a database. They aren&#x27;t great for anticipated errors, such as not finding a file, because of the chance a programmer might allow this to silently fail. Runtime exceptions are highly valuable, however.<p>[1] - A decent SO post on the topic: <a href="https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;613954&#x2F;the-case-against-checked-exceptions" rel="nofollow">https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;613954&#x2F;the-case-against-...</a>')