Item(by='yakubin', descendants=None, kids=[25619328], score=None, time=1609646097, title=None, item_type='comment', url=None, parent=25619096, text='This is a memory leak in a GC language as well, depending on what happens to foo in <i>...code that uses foo...</i> Maybe it will become a field of some class, maybe it will get pushed to some queue, maybe it will get captured in a lambda, etc. You won&#x27;t even be able to tell just from looking at this code in this one place alone, if you passed this pointer as argument to a function.<p>It is my experience that when people work with GC languages, they treat the GC as a blackbox (which it is) and simply won&#x27;t bother investigating: do they have memory leaks? Of course not, they are using a GC after all, all memory-related problems solved, right? Right... With code that relies on free(), I can use a debugger and check which free() calls are hit for which pointers. Even better, I may use an arena allocator where appropriate and don&#x27;t bother with free() at all. With a GC I&#x27;m just looking at some vague heap graph. Am I leaking memory? Who knows... &quot;Do those numbers look right to you?&quot;<p>Memory management issues are usually symptoms of architectural issues. A GC won&#x27;t fix your architecture, but it will make your memory management issues less visible.<p>It is my experience that most memory problems in C come from out-of-bounds writes (which includes a lot more than just array access), not from anything related to free(). A GC doesn&#x27;t help here.')