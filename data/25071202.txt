Item(by='shireboy', descendants=None, kids=[25071699], score=None, time=1605196841, title=None, item_type='comment', url=None, parent=25070410, text='I really am trying to understand this better.  Can you give me an example with some concrete type names where it&#x27;s massive waste and in the way?<p>When I think DI, I think:\n&#x2F;&#x2F;Startup.cs has all the config &quot;goo&quot; I don&#x27;t want to repeat elsewhere.<p>services.AddDbContext&lt;MyDbContext&gt;(o=&gt;o.UseSqlServer(config.GetConnectionString(&quot;foo&quot;));<p>services.AddTransient&lt;MyService&gt;();<p>&#x2F;&#x2F;MyController.cs (or Page, etc) and others get to use it with no ceremony:<p>public MyController(MyService foo){ this.foo = foo; }<p>vs no DI, where the config &quot;goo&quot; has to be repeated in every place I intend to use it (or in this case it could also be buried in MyService.cs):<p>public MyController(){this.foo = new MyService(new MyDbContext(ConfigurationManager.GetConnectionString(&quot;foo&quot;)));}<p>public Dispose(){this.foo.Dispose();}<p>If I knew MyService would never be swapped out and only ever used in one place, I may opt for the no-DI route.  I&#x27;ll often start there then move it to DI when I want testability, reuse of config, plugability, etc..')