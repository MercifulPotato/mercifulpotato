Item(by='kevingadd', descendants=None, kids=[24931697, 24928627], score=None, time=1603962511, title=None, item_type='comment', url=None, parent=24928060, text='One key thing to be aware of is that not all &quot;bilinear&quot; scaling algorithms are created equal. If the &quot;bilinear&quot; in question is GPU-accelerated, it&#x27;s quite possible that it&#x27;s the Direct3D&#x2F;OpenGL bilinear filter, which samples <i>exactly</i> 4 taps of the image from the highest appropriate mip level (which may be the only one, unless the application goes out of its way to generate more). That means if the scaling ratio is less than 50%, it becomes something like a smoothed nearest neighbor filter and is vulnerable to this attack.<p>The introduction of a mip chain + enabling mip mapping mitigates this, because when the scaling ratio is less than 50% the GPU&#x27;s texture units will select lower mips to sample from, approximating a &quot;correct&quot; bilinear filter. This does also require generating mips with an appropriate algorithm - there are varying approaches to this, so I suspect it is possible to create attacks against mip chain generation as well.<p>Thankfully, quality-focused rendering libraries are generally not vulnerable to this, because users demand high-quality filtering. A high-quality bilinear filter will use various measures to ensure that it samples an appropriate number of points in order to provide a smooth result that matches expectations.<p>One other potential attack against applications relying on the GPU to filter textures is that if you can manually provide mip map data, you can use that to hide alternate texture data or otherwise manipulate the result of downscaling. As far as I know the only common formats that allow providing mip data are DDS and Basis, and DDS support in most software is nonexistent. Basis is an increasingly relevant format though and could potentially be a threat, but as a lossy format it poses unique challenges.')