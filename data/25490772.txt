Item(by='dkh', descendants=None, kids=None, score=None, time=1608508645, title=None, item_type='comment', url=None, parent=25487711, text='FFmpeg is a miraculous tool and I have relied on it for a couple decades now. Beyond the plethora of personal use-cases, it has enabled individuals and smaller companies to possess the same abilities as the bigger guys, who themselves are all pretty much using FFmpeg these days. The only folks who need to build&#x2F;use alternatives are the platforms at the top of the market and&#x2F;or with immense scaling needs who are truly pushing beyond the realm of FFmpeg&#x27;s practical abilities. Twitch is one of those very few, and have been nicely open in discussing it. [1] [2]<p>Couple highlights for my careering using it over the years. The first was when I was working on production and post-production for a small studio that had a popular web series and was just about to transition to their first &quot;big&quot; shows that would be produced for Hulu. This was when 6K raw video was just becoming a thing, we had over 50tb of footage, GPU decoding was brand-new, Windows machines couldn&#x27;t work practically with Apple ProRes, lots of challenges. I ended up building a system that did things like transcode raw footage into various formats automatically whenever the server noticed there was new footage, automatically collected and stored the metadata from every shot somewhere we could centrally browse&#x2F;search&#x2F;filter it, etc. When it came time to deliver, it would automatically create various outputs for the web. We had to deliver ProRes masters in the end and had recently transitioned entirely to PCs. This was around when somebody successfully implemented a pretty good ProRes encoder for FFmpeg, so we were then able to encode and deliver these huge ProRes outputs not only without needing a Mac, but also entirely on our servers, no longer requiring someone&#x27;s workstation to be hijacked for an entire day to do this. It all may not seem too revolutionary, but there was no way we would&#x27;ve been able to work with the same efficiency, for the same cost, in the same timeframe otherwise.<p>A couple years later, at a new (now defunct) video platform with millions of videos and maybe 5 back-end engineers, FFmpeg allowed us to build our own service to encode all uploads into the many resolutions and formats required. Encoding services were (and still are) very expensive, but in just a couple weeks we had our own that ran on standard Ubuntu server instances, spinning up&#x2F;down depending on load. Immense cost savings, and not tied to any particular company. Shortly thereafter, GPU instances were available from most cloud providers and `nvenc` was available in FFmpeg, so we were able to dramatically speed up the encode process with maybe a day of work by adding GPU encoding into the mix.<p>These may seem like pretty obvious possibilities now, but it cannot be overstated how insane it was, especially at the time, for tiny and&#x2F;or cash-strapped teams to be able to do all of this so easily, and that at the tool at the crux of it all, FFmpeg, was completely free. Yes, FFmpeg can be a pain in the ass to figure out, and it&#x27;s easy these days to take it for granted, but in my opinion it has been truly revolutionary.<p>[1] <a href="https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=LsF5bHRxC_M" rel="nofollow">https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=LsF5bHRxC_M</a>\n[2] <a href="https:&#x2F;&#x2F;blog.twitch.tv&#x2F;en&#x2F;2017&#x2F;10&#x2F;10&#x2F;live-video-transmuxing-transcoding-f-fmpeg-vs-twitch-transcoder-part-i-489c1c125f28&#x2F;" rel="nofollow">https:&#x2F;&#x2F;blog.twitch.tv&#x2F;en&#x2F;2017&#x2F;10&#x2F;10&#x2F;live-video-transmuxing-...</a>')