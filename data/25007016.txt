Item(by='jonathanstrange', descendants=None, kids=[25007850], score=None, time=1604664271, title=None, item_type='comment', url=None, parent=25006619, text='I don&#x27;t see the connection between the Halting Problem and automatic parallelization. The Halting Problem itself plays no noteworthy role in practical algorithm verification anyway because in practice halting is not proved for any input program, but rather for only some very specific inputs.<p>Theoretically speaking, parallel computation makes proving that a computation halts sometimes unnecessary. For example, a parallel OR boolean comparison may succeed, while the corresponding sequential comparison would lead to an infinite loop.<p>Is there another connection? Isn&#x27;t the problem with parallel computation rather that there is no unique description of it? AFAIK, e.g. derivations of the untyped lambda calculus describe any kind of sequential computation, just like a Turing Machine would do. In contrast, the pi calculus does not offer this uniqueness. Or is there such a description for <i>any</i> parallel computation?<p>Anyway, maybe someone else can explain the connection between the Halting Problem and parallel computation, if there is one, because it&#x27;s not clear to me from the article.')