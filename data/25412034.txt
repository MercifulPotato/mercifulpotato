Item(by='systemvoltage', descendants=None, kids=[25412891, 25412824, 25414243, 25413870], score=None, time=1607906287, title=None, item_type='comment', url=None, parent=25398027, text='This is not a good idea. Here is why:<p>- It only solves the problem of communicating categories to another person&#x2F;party with its brevity. 12.03, easy to tell others. But all this at the expense of the following things.<p>- There is no way to immediately know what 12.03 means. One has to carry a look up table. You can replace it with 2 char code. For example, Finance.Taxes to FN.TX. Why use numbers? Is the ordering important? Why not use char?<p>- What if categories <i>do</i> overlap? GMail solved this problem in 2005 with labels instead of folders. You can apply multiple tags. Tagging should be enum-like, while tagging it should show what tags already exist so that you dont create two seperate but similar tags, for e.g. Finance and Finances.<p>- The author dismisses search without giving any reason. Search is amazing for digital documents that is not possible in physical analog documents. The focus should be on tags + keywords or description of the document. Then use something like Algolia search to find stuff - it is extremely forgiving and powerful. Ofcourse, I am just speaking in general about data organization, not specifically about OS-level folders. For that, I think we&#x27;re stuck with what the OS provides as a search engine. On MacOS, I think Alfred does a better job of searching, haven&#x27;t used it personally though.<p>- You can still assign a unique ID to the document, after all thats all the 12.03 scheme does. You can communicate precisely to Jane, &quot;Hey Jane, the document is B75AE2&quot;. Jane types that in the search engine and there is no need to weed through folders.<p>- Additional metadata such as year, author, owner, etc. would help with search.<p>Instead of making search powerful and contextualizing it, the author expends his arguments on frivolous pursuit of Johnny.Decimal.')