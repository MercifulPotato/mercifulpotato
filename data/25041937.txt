Item(by='MaulingMonkey', descendants=None, kids=None, score=None, time=1604971435, title=None, item_type='comment', url=None, parent=25040870, text='Just counting my personal experience, I&#x27;ve seen multiple titles fail cert and delay release thanks to bug backlogs that were mostly filled with memory issues, even after months of working to reduce the backlog of crash bugs.  Perhaps you can&#x27;t blame that entirely on the C++ codebase, but you sure can&#x27;t absolve it entirely either.<p>At every single studio I&#x27;ve worked at I&#x27;ve helped build out crash collecting, symbolizing, or deduplicating infrastructure just to get a lead on where shit is exploding, and seen major productivity outages when tooling crashed frequently enough to disrupt the workflows of my coworkers.  Address sanitizer, valgrind, extra debug allocators - I&#x27;ve sunk a <i>lot</i> of time into just making these crashes shallower to debug and quicker to catch.<p>One of the smallest and quickest projects that comes to mind was an NDS -&gt; iOS and Android port.  Do you think most of the time was spent in porting APIs and control schemes?  More than half the time on that project was spent just chasing down really stupid memory related crash bugs that were exacerbated in frequency and time by the port.  I made damn sure to communicate my concerns about the schedule, and if my memory serves me correctly, we managed to soft launch &quot;only&quot; a week or two late.<p>C++&#x27;s strengths are it&#x27;s lean portability, speed, and huge existing codebases and tallent pools.  Undefined behavior is simply the cost we begrudgingly pay, <i>not</i> it&#x27;s strength, and even that we often mitigate by trying to figure out ways to write as little C++ as possible - keeping it only for the parts of our codebase that are actually performance sensitive.  Tooling is often C#, Python, anything but C++.  UB is a pox and constant time sink.<p>Whenever people call out C++&#x27;s UB as it&#x27;s strength, I&#x27;m left wondering how many of their bugs do they actually fix, and how many are begrudgingly fixed by their coworkers.  Most of the people whom I&#x27;ve worked with with that attitude <i>don&#x27;t</i> pull their own weight in the debugging department, so they don&#x27;t see the full costs of it.')