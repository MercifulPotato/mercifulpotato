Item(by='KronisLV', descendants=None, kids=[25790758, 25791196], score=None, time=1610715170, title=None, item_type='comment', url=None, parent=25790103, text='But isn&#x27;t using the code that people smarter&#x2F;more proficient than you have developed a rather good way to go about things?<p>If not, where do you draw the line? Should you write your own business logic? Should you write your own logic to allow implementing that business logic (e.g. request parsing, validators, data transformations and processing etc.)? Or maybe you should write your own web framework that routes and handles HTTP(S) requests? Or maybe the entire ORM (if you&#x27;re using one in the first place) as well? But that ORM probably uses JDBC&#x2F;ODBC or some other driver as well, and the HTTP(S) requests also can be processed because of some additional code and libraries. Should you write those as well? What about the operating system itself, and the code that allows it to interface with the hardware? What about the kernel?<p>I don&#x27;t necessarily agree with the OP&#x27;s point about making a browser that has Node.js packaged (though it&#x27;s a novel idea), but i definitely agree that defaults and tools matter. Tools like XAMPP ( <a href="https:&#x2F;&#x2F;www.apachefriends.org&#x2F;index.html" rel="nofollow">https:&#x2F;&#x2F;www.apachefriends.org&#x2F;index.html</a> ) or the CLIs for automatically generating projects and helping automate everything from creating project files, like in Ruby on Rails Generators ( <a href="https:&#x2F;&#x2F;guides.rubyonrails.org&#x2F;generators.html" rel="nofollow">https:&#x2F;&#x2F;guides.rubyonrails.org&#x2F;generators.html</a> ) or entire apps, like with JHipster ( <a href="https:&#x2F;&#x2F;www.jhipster.tech&#x2F;" rel="nofollow">https:&#x2F;&#x2F;www.jhipster.tech&#x2F;</a> ) or create-react-app ( <a href="https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;create-a-new-react-app.html" rel="nofollow">https:&#x2F;&#x2F;reactjs.org&#x2F;docs&#x2F;create-a-new-react-app.html</a> ) all seem to decrease the chance of human error and make development safer, more consistent and easier. Even IDEs that are aware of the specifics of the frameworks you&#x27;re using can be very useful!<p>In addition, they can improve the developer experience (DX) a whole bunch, since in larger projects time can be invested to address common problems. For example, see Dylan Beattie&#x27;s conference talk on the topic: <a href="https:&#x2F;&#x2F;youtu.be&#x2F;lFRKrHE8oPo?t=431" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;lFRKrHE8oPo?t=431</a><p>I&#x27;ve seen people trying to write their own web frameworks and most of the time the results have been poor, both in understanding the system and maintaining it in the long term, in addition to which you can&#x27;t hire people that are familiar with &quot;Random Company&#x27;s Web Framework&quot;. Unoriginality is good for being to maintain the project, as far as i&#x27;m concerned.<p>Here&#x27;s another conference talk, by Venkat Subramaniam about deciding between using existing code or writing your own: <a href="https:&#x2F;&#x2F;youtu.be&#x2F;OheeK7Ux2-8?t=727" rel="nofollow">https:&#x2F;&#x2F;youtu.be&#x2F;OheeK7Ux2-8?t=727</a>')