Item(by='pansa2', descendants=None, kids=[25985908], score=None, time=1612143940, title=None, item_type='comment', url=None, parent=25982924, text='I like the Nix example - accidentally constructing a `List&lt;String|Function&gt;` and passing it into a function expecting a `List&lt;String|...&gt;` (where `...` does not include Function). The dynamically-typed version can&#x27;t do anything to prevent this.<p>However, I&#x27;m not convinced that a theoretical statically-typed version would be so much better. To get the error message given in the article, the compiler would have to consider the list of the form `[&#x27;a&#x27;, &#x27;b&#x27;, function(){...}, &#x27;c&#x27;]` to be an erroneous attempt to construct a `List&lt;String&gt;` - is that desirable? Or would it be better to consider it to be a `List&lt;String|Function&gt;` or `List&lt;Any&gt;`?<p>Even using `List&lt;String|Function&gt;`, the statically typed version could still give a reasonable error message on passing it into a function expecting a `List&lt;String|...&gt;` - as long as `...` is an accurate list of exactly what the function is and isn&#x27;t willing to accept. If it&#x27;s necessary to write out that list, correctly and completely every time, that&#x27;s where static types can sometimes become more trouble than they&#x27;re worth.')