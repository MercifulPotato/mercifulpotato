Item(by='mazeboard', descendants=1, kids=[24845146], score=2, time=1603257009, title='Generic objects in implicitly-typed language', item_type='story', url=None, parent=None, text='In strongly typed languages (ie. Java, scala) a generic type is a generic class or interface that is parameterised over types (ie. class name&lt;T1, T2, ..., Tn&gt;).<p>Evidently, in an implicitly-typed language we cannot implement generic objects that are parameterised over types.<p>The following example shows how generic objects could be implemented in an implicitly-typed language (development of such a language is in progress).<p><pre><code>  (let ((s0 #{s: none,\n            push: (fn x (set self.s (pair x self.s))),\n     pop: (fn ()\n     (let ((x (left self.s)))\n         in {\n             (set self.s (right self.s))\n             x\n          }))\n    })\n   (s1 #{s0, s:nil})\n           (s2 #{s0, s:nil}))\n     in {\n     (s1.push 5)\n     (s2.push #\\x)\n     (s1.push 10)\n     (s2.push #\\y)\n     (s2.push 20) ; ERROR cannot push integer in stack s2\n     (s1.push &quot;HELLO&quot;) ; ERROR cannot push string in stack s1\n   })\n</code></pre>\nIn the example above, the stack s1 accepts integers only, while stack s2 accepts characters only; the compiler will raise an error if you try to push an incorrect type value in a stack.<p>the object s0 has an attribute s defined to be none, and thus s0 is considered as an abstract object and can only be inherited by other objects (s1 and s2 in this example); the stacks s1 and s2 inherit the functions push and pop defined by s0.<p>I think the code is easy to read, so I let you, if interested, read and understand the code and let me know if you have any suggestions.')