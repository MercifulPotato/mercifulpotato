Item(by='pickledcods', descendants=None, kids=[25198184], score=None, time=1606222237, title=None, item_type='comment', url=None, parent=25194988, text='Back in 1996 I developed a TCP&#x2F;IP stack from the ground up based on the the DARPA and RFC specifications from that era. The impression I has from the quality of consistency was that TCP&#x2F;IP was a students project. Delayed-ACKs was described briefly as a concept in addendum. Implementing it was a nightmare.<p>What happened was that with bulk unidirectional flow (FTP) the window would slowly fill up until it was completely full after which transport would halt to a grinding stand still. Only when retransmit timers triggered would transport resume at full speed, slowly filling the window to repeat the cycle. As I can remember, this cycle would repeat every 5 seconds or so.<p>Out of sheer frustration I logged all traffic with (then) high resolution timestamps and hand drew both sides of the connection on 132 columns zigzag printer paper which filled the corridor.<p>As it turned out, the protocol state timings assume that the transit time is 0ms. For one-on-one REQ&#x2F;ACK this isn&#x27;t a problem, for delayed ACK it was a game-breaker.<p>When a packet arrives, several tests are performed to determine if it is within sequence and rejected otherwise. With delayed ACKS the administration did not represent the actual state triggering lots of false negatives.<p>Solution was to create dual state information. One being the actual values for the end-point, the other being the projected&#x2F;assumed state of the other end, taking into account it is suppressing ACKs. Then, for incoming packets, the headers are tested against the projected other-end state and transmitted packets constructed using the this-end state.<p>Performance hit the roof and filled the cable with 98% of the theoretical bandwidth. Much more than stacks implemented by competitors.<p>Sadly my employers did not allow me to publish the findings.')