Item(by='dgb23', descendants=None, kids=None, score=None, time=1611755108, title=None, item_type='comment', url=None, parent=25922924, text='Perfect! It implies that there is something you have to think about <i>before</i> you think about DRY. This &quot;something&quot; is representation of facts and data. The universal idea of pulling data out of code seems to be as old as programming itself and is proposed by Unix&#x2F;C programmers and Lispers alike.<p>After pulling out the data, the code becomes simpler, more general and more composable. The data structure then often reveals repetition that is <i>not</i> redundancy: If you look at a configuration file, a SQL table or a REST response that has repetition, it becomes clear that it represents <i>different facts</i> (to use your term) that happen to have the same values (Alice and Bob have the same age). This form or repetition is fine, correct and often interesting!<p>So by the practice of pulling out data from code we get DRY (by the definition of the authors) code.<p>However there is also also another form of repetition that is a bit more subtle: boilerplate. There, the representation of an algorithm (as code) is drowned in noise that does not convey the intent and the flow of what is happening.<p>To increase the signal to noise ratio in code that is already(!) DRY but clouded by boilerplate, one needs a way to reduce syntax itself, which can be achieved by meta-programming and DSLs.')