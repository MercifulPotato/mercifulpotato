Item(by='53AFCB60', descendants=None, kids=None, score=None, time=1607471427, title=None, item_type='comment', url=None, parent=25340629, text='Optional and nullable types are very different. When you wrap a type T in Optional, you make a completely new type that just happens to contain T inside, which means you cannot use Optional&lt;T&gt; in places where you previously accepted T, because you break a contract for the caller. With nullable types (which essentially represent a set `{t | t in T} v {NULL}`) it is possible. This is similar to the notions of co- and contra-variance for inputs&#x2F;outputs of a function.<p>Rich Hickey had a good talk about problems of representing a missing information in programs, and why union types allow you to incrementally make changes in your codebase without refactoring the whole thing at once.')