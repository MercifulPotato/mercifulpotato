Item(by='pron', descendants=None, kids=[24968307], score=None, time=1604319227, title=None, item_type='comment', url=None, parent=24963130, text='I think you are not sufficiently familiar with this field, Dijkstra wrote &quot;Discipline&quot; years before computational complexity results on program analysis were known, and I think you misunderstand the tremendous gap between what works on small examples in the lab and what is scalable enough to be applied widely in the field and the difference between something that might be possible in principle vs. something that&#x27;s affordably feasible in practice. We know more than Dijkstra did, the techniques have improved, and still no &quot;ordinary&quot; (non-niche) real-world software of any significant size has been written using formal refinement to date. If you claim this is possible today -- go ahead and do it for a medium-sized program of say, at least 100KLOC. A formalism like TLA+ is well suited for this task, so go ahead and try.<p>I am not American, I don&#x27;t like making generalisations about Americans or any other nationality, and, as you could see from my blog, I am very much in favour of employing maths in system design -- that&#x27;s what TLA+ is all about. But confusing &quot;mathematical object&quot; with &quot;can be <i>feasibly</i> reasoned about&quot; is just ignoring computational complexity. I can give you an example of two subroutines, each only a few lines long and each very simple to understand, and yet you won&#x27;t be able to answer a most basic question about their composition. Complexity theory tells us that mathematical problems have an inherent hardness, and the fact you can write them does not mean you can feasibly solve them. There are no simple answers here. In some carefully constructed ways formal methods can help in some specific circumstances, different methods helping in different use-cases, and you cannot just say that it&#x27;s &quot;better&quot; overall. For example, while programs of millions of lines of code are routinely tested, no one has ever managed to formally reason about deep properties of programs of this size.')