Item(by='kortex', descendants=None, kids=None, score=None, time=1602599498, title=None, item_type='comment', url=None, parent=24765405, text='I had basically this exact discussion with a coworker. I said something offhand that I rarely consider big O, beyond avoiding obviously inefficient patterns; they replied they basically are <i>always</i> considering big O. Personally, that strikes me as premature optimization. My priorities are generally:<p>1. Solve the problem.<p>2. Ensure correctness of that solution<p>3. The code is easy to reason about<p>4. The app is robust<p>5. &quot;good enough&quot; performance<p>6. Performance tuning<p>Which is of course the &quot;correct answer&quot;, and of course in practice these all blend together I will emphasize any number of those at a given time (who doesn&#x27;t love spending an occasional afternoon just chasing pointless benchmarks?). But I never come at it from a &quot;big O mindset&quot; even when that&#x27;s what I&#x27;m doing in practice, I just call it &quot;common sense&quot; and heuristics: don&#x27;t put slow things in tight loops, memoize when you can, and leverage concurrency.<p>In my line of work (CV), moving a slow blocking operation from serial to async will get you easy, bigger wins 90% of the time, vs seeking out something in polytime and refactoring to nlogn.')