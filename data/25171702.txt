Item(by='m0llusk', descendants=None, kids=None, score=None, time=1605984045, title=None, item_type='comment', url=None, parent=25170547, text='Many of these points seem to mask larger issues and be focused on a particular type of application.  Very technical, experimental, or fault-intolerant applications may need a different balance of factors.<p>&gt; Engineers should operate their code.<p>Are engineers the customers?  What matters is the customer experience.  Getting engineers directly involved risks lowering of customer priorities.<p>&gt; Buy ... beats build<p>It depends on how much control you need.  Sure it can be quicker and cheaper overall, but if available systems are not actually a match it is only a matter of time before some customization or a custom system is needed.  Try to find and commit to the right balance as soon as possible.<p>&gt; Make deploys easy<p>This really depends on the kind of system and its usage.  In fault intolerant systems it makes sense to take deploys as slowly and carefully as possible because the risk of problems even from changes that are considered fixes is not tolerable.<p>&gt; Trust the People Closest to the Knives<p>In the larger picture this is marketing who must focus on knowing the customer and their needs.<p>&gt; QA Gates Make Quality Worse<p>Some interactions are difficult to automate.  It often makes more sense to slow things down to get the quality right than to go fast and increase risk.<p>&gt; Boring Technology is Great.<p>Depending on your goals and context.  Does boring sell?  Are your customers requesting boring?<p>&gt; Simple always wins<p>That is similar to the boring rule above, but with the added complication that simple is subjective and context dependent.  Perhaps some complex existing mechanism can be adapted, so is that really simple or not?<p>&gt; Non-Production Environments Have Diminishing Returns<p>But they are essential returns.  If the engineers can get the thing to work on their desks then it isn&#x27;t likely to work for customers.<p>&gt; Things Will Always Break<p>This is pure squittering.  In some context providing services that do not break is the key feature.  For many products markets will reject this modern view of moving fast because it is okay to break things.  Some customers are tolerant and will pay extra for special functionality, but others are intolerant and would prefer robust functionality to engineer maximization.')