Item(by='anonymoushn', descendants=None, kids=[25496968], score=None, time=1608567611, title=None, item_type='comment', url=None, parent=25496078, text='Lua coroutines have exactly the thing I asked for though. As an example, if I have some enemy in a shmup that moves (over the course of many frames), fires some bullets in an arc centered on the player (within one frame), and moves again, I can write something like this:<p><pre><code>  function ExampleEnemy:behavior()\n    while true do\n      self:move()\n      self:fire_arc()\n    end\n  end\n\n  function ExampleEnemy:fire_arc()\n    local theta = self:aim()\n    for i=-5,5 do\n      self:fire({speed=8, direction=theta+i*10*degrees})\n    end\n  end\n</code></pre>\nIf I later want the arc to have some delay between the bullets, and I insert a call to a function that yields for a certain number of frames in the loop in fire_arc, the code continues to work. If I do this same change in Python, the result is that the call to fire_arc in behavior begins to return an iterator or something and silently fails to actually fire any bullets!<p>Lua&#x27;s stackful coroutines are sufficiently cheap that it&#x27;s reasonable to have tens of thousands of entity behaviors implemented as coroutines running at a time.')