Item(by='zajio1am', descendants=None, kids=[25915543], score=None, time=1611663566, title=None, item_type='comment', url=None, parent=25913562, text='&gt; Say, your program is an editor of png files and it requires libpng. Thus in your code you will have\n&gt;\n&gt;    #include &lt;libpng.h&gt;<p>In addition to what other commenters wrote (failures later during compilation instead of at the start), you also need proper include path in CFLAGS.<p>For example, gdk-pixbuf is supposed to be included by &#x27;#include &lt;gdk-pixbuf&#x2F;gdk-pixbuf.h&gt;&#x27;. That would assume the header file is in &#x2F;usr&#x2F;include&#x2F;gdk-pixbuf&#x2F;gdk-pixbuf.h . But distribution that i use installs it in &#x2F;usr&#x2F;include&#x2F;gdk-pixbuf-2.0&#x2F;gdk-pixbuf&#x2F;gdk-pixbuf.h , likely to be able to have multiple versions of header files installed togethers.<p>You are supposed to use &#x27;pkg-config&#x27; tool in configure script to add proper header file locations in CFLAGS to handle this (in this case -I&#x2F;usr&#x2F;include&#x2F;gdk-pixbuf-2).<p>&gt; and in your makefile you will link your executable with -lpng.<p>The library you are usimg may depend itself. on another library, you need to add -l flags for all recursively dependent libraries to linker. As this set of recursively dependent libraries may change in the future, you are supposed to use pkg-config to find proper link flags.<p>Note that all of this is not really dependent on configure, you can do that in a simple makefile (by just calling pkg-config directly from it). So it is more about using pkg-config instead of hardcoded paths than about using configure scripts.')