Item(by='dragontamer', descendants=None, kids=[25043351], score=None, time=1604978131, title=None, item_type='comment', url=None, parent=25042347, text='&gt; DO NOT EVER MUTATE STATE!<p>This is counterproductive.<p>Mutating state is by far, the most efficient operation on the computer. Copying state means (usually) calling the memory allocator, which (usually) must be done in a sequential manner. There are optimizations to allow memory-allocation to occur in parallel, but... things start to get inefficient (use of thread-local storage, which makes many pointer-indirections, etc. etc.).<p>-------<p>Why do people program parallel code, despite its overwhelming complexity?<p>Simple: to be faster. That&#x27;s it. Its an optimization, arguably premature, but the programmer reaching for the &quot;parallel&quot; button is going for optimization for a reason.<p>------<p>Sequential code with state-mutations could very well be more efficient than parallel code with tons of unnecessary copies. Registers are fast, L1 cache is fast, etc. etc. Doing an operation, then undoing it (entirely inside of register space) is so incredibly fast, it will make your head spin.<p>-------<p>1: Write code.<p>2. If code isn&#x27;t fast enough, single-thread optimize it. This usually means mutating state in an intelligent manner.<p>3. If code is STILL not fast enough, multithread it. You make a copy of the state, and then have multiple threads (each with their own copy of the state) doing... whatever you&#x27;re trying to do.')