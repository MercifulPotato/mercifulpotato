Item(by='abra529', descendants=None, kids=[25429600], score=None, time=1608028136, title=None, item_type='comment', url=None, parent=25419740, text='Commenters here as well as the author seem content with asserting that under C semantics, the code after the second optimization exhibits UB when it dereferences (p+1). Is it really UB?<p>Here&#x27;s the snippet for reference:<p><pre><code>    char p[1], q[1] = {0};\n    uintptr_t ip = (uintptr_t)(p+1);\n    uintptr_t iq = (uintptr_t)q;\n    if (iq == ip) {\n      *(p+1) = 10; &#x2F;&#x2F; &lt;- This line changed\n      print(q[0]);\n    }\n</code></pre>\nFrom the article: &quot;LLVM IR (just like C) does not permit memory accesses through one-past-the-end pointers.&quot; I think this is a mental shortcut we make that can lead us astray here. Of course, one-past-the-end pointers can&#x27;t usually be dereferenced legally. But I think it&#x27;s legal here because when (iq == ip), (p+1) points to a valid location. I don&#x27;t see (at least in the C99 standard) why this code would be illegal.<p>I realize that the code is not meant to represent C but rather LLVM IR, but surely, if this snippet is legal C code, then LLVM can&#x27;t treat it as if it were UB? So that would mean the third optimization is incorrect here.')