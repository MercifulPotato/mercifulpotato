Item(by='dunefox', descendants=None, kids=[24717279, 24718952], score=None, time=1602145785, title=None, item_type='comment', url=None, parent=24712207, text='Just tried the code in SBCL and it definitely gives a compiler warning even without executing the function:<p><pre><code>    This is SBCL 1.5.6, an implementation of ANSI Common Lisp.\n    More information about SBCL is available at &lt;http:&#x2F;&#x2F;www.sbcl.org&#x2F;&gt;.\n    \n    SBCL is free software, provided as is, with absolutely no warranty.\n    It is mostly in the public domain; some portions are provided under\n    BSD-style licenses.  See the CREDITS and COPYING files in the\n    distribution for more information.\n    * (defun add-text-padding (str &amp;key padding newline)\n      &quot;Add padding to text STR. Every line except for the first one, will be\n    prefixed with PADDING spaces. If NEWLINE is non-NIL, newline character will\n    be prepended to the text making it start on the next line with padding\n    applied to every single line.&quot;\n      (let ((str (if newline\n                     (concatenate &#x27;string (string #\\Newline) str)\n                     str)))\n        (with-output-to-string (s)\n          (map &#x27;string\n               (lambda (x)\n                 (princ x s)\n                 (when (char= x #\\Newline)\n                   (dotimes (i padding)\n                     (princ #\\Space s))))\n               str))))\n    ; in: DEFUN ADD-TEXT-PADDING\n    ;     (MAP &#x27;STRING\n    ;          (LAMBDA (X)\n    ;            (PRINC X S)\n    ;            (WHEN (CHAR= X #\\Newline) (DOTIMES (I PADDING) (PRINC #\\  S))))\n    ;          STR)\n    ; \n    ; caught WARNING:\n    ;   The function (LAMBDA (X) :IN ADD-TEXT-PADDING) called by MAP returns NULL but CHARACTER is expected\n    ;   See also:\n    ;     The SBCL Manual, Node &quot;Handling of Types&quot;\n    ; \n    ; compilation unit finished\n    ;   caught 1 WARNING condition\n    ADD-TEXT-PADDING</code></pre>')