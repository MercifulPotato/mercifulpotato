Item(by='hhas01', descendants=None, kids=None, score=None, time=1603271202, title=None, item_type='comment', url=None, parent=24844463, text='Type inference is good, but it’s not a full answer.<p>For instance, how often do you declare a variable as `int`, when what you <i>really</i> want to say is “an integer in the range 0...100”? A few languages (e.g. Eiffel) provide a formal mechanism for declaring these sorts of constraints, but most don’t, and you end up putting what should be declarative type-level information into the body of your code instead.<p>And then there’s “cutting-edge” stuff like dependent types, where you really want to express one argument’s type in terms of another argument’s, a classic example being an array indexing method, where you really want to declare the index at compile time as an integer in the range `0..&lt;array.length`, and let the type system propagate that rule and its implications throughout the code that uses it. Whereas most “modern” languages chuck a run-time error if you’re lucky; or just ralph and dump stack like some antiquated 1970s throwback (yeah, looking at you, Apple’s Swift).<p>3&#x2F;10 Could do <i>much</i> better.')