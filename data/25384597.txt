Item(by='Twisol', descendants=None, kids=[25385083], score=None, time=1607686509, title=None, item_type='comment', url=None, parent=25384528, text='&gt; What&#x27;s missing is implementing Functor for `Option` (the &quot;unapplied&quot; option, without a type parameter), in such a way that it is evident in from the trait implementation that if you pass an Option to `fmap`, then you get an Option out (not just any Functor).<p>I was momentarily confused by this explanation, so allow me to distill the problem.<p>In the trait declaration for Functor, nothing requires that `&lt;X&lt;T&gt; as Functor&gt;::Wrapped&lt;T&gt; == X&lt;T&gt;`. In other words, the implementing type can be different from the return type of `map`. You would want to return `Self&lt;T&gt;` from `map`, but `Self` refers to the fully-reified type, which is to say the implementor has already decided what the type parameter (if any) is, and you as the trait author have no control over it.<p>You need some way to force the above equality, which is probably what the referenced &quot;proof of concept&quot; does. (I think I found it here: <a href="https:&#x2F;&#x2F;github.com&#x2F;edmundsmith&#x2F;type-plugs" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;edmundsmith&#x2F;type-plugs</a>)<p>(EDIT: I found another proof of concept via the author&#x27;s bug report. The two approaches seem pretty much the same, and it doesn&#x27;t look too difficult to understand. <a href="https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;monads-in-rust-with-gats&#x2F;50487" rel="nofollow">https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;monads-in-rust-with-gats&#x2F;50487</a>)<p>The article does mention this problem explicitly:<p>&gt;&gt; Interestingly, we have lost the knowledge here that Self::Wrapped&lt;T&gt; is also a Pointed. That&#x27;s going to be a recurring theme for the next few traits.')