Item(by='YeGoblynQueenne', descendants=None, kids=None, score=None, time=1606686911, title=None, item_type='comment', url=None, parent=25240895, text='There are a few community libraries, for example see the Swi-Prolog packages typedef [1] and typecheck [2] (the latter implementing Hindley-Milner). Unfortunately there isn&#x27;t anything like an accepted standard (although the package typedef is very popular).<p>My experience is that type- and mode-checking in Prolog programs tends to be ad-hoc and simplistic, for example it&#x27;s common to test whether an argument is ground or not and therefore enforce a certain mode (or sets of modes):<p><pre><code>  % p(+X,-Y)\n  % \n  p(X,Y):- \n    ground(X)\n    ,var(Y)\n    ,...\n</code></pre>\nFor slightly more complex type-checking the Prolog ISO standard provides predicates like integer&#x2F;1, atom&#x2F;1, atomic&#x2F;1 etc [1]. These don&#x27;t make up a proper type system but they can go a long way towards catching common errors.<p>A subtler point is that Prolog programs tend to use unification to perform type-checking by pattern matching an argument to a (Prolog) term. For example (borrowed from a Prolog course I&#x27;m GTA&#x27;ing):<p><pre><code>  max_heap(epsilon).\n  max_heap(h(K-V, L, R)) :-\n    \\+ root_max(L, K),\n    \\+ root_max(R, K),\n    max_heap(L),\n    max_heap(R).\n\n  root_max(h(Kr, _, _, _), K) :-\n    Kr &gt; K.\n</code></pre>\nThis will fail for any (at least partially ground) input to max_heap&#x2F;1 that doesn&#x27;t match the term h(K-V,L,R), here used to represent a binary heap, or the atom &quot;epsilon&quot;, for the empty heap. The representation of a heap in this way is entirely up to the programmer but Prolog&#x27;s built-in unification will essentially provide type-checking for free when a complex data structure like this is used.<p>_______________<p>[1] <a href="https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pack&#x2F;list?p=typedef" rel="nofollow">https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pack&#x2F;list?p=typedef</a><p>[2] <a href="https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pack&#x2F;list?p=type_check" rel="nofollow">https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pack&#x2F;list?p=type_check</a><p>[3] See: <a href="https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pldoc&#x2F;man?section=typetest" rel="nofollow">https:&#x2F;&#x2F;www.swi-prolog.org&#x2F;pldoc&#x2F;man?section=typetest</a> for a swanky ASCII diagram.')