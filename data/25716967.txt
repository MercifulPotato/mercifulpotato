Item(by='strongdenial', descendants=None, kids=[25717981, 25717228], score=None, time=1610299626, title=None, item_type='comment', url=None, parent=25716804, text='There is absolutely no reason why the GCC front-end needs to be written in Rust. The reason the LLVM front-end was written in Rust initially was so they could immediately test and use new features in what was at the time also the largest program in Rust. Re-writing the GCC front-end in Rust would just prolong an already rather unfortunate bootstrap problem with the language and it should be strongly discouraged.<p>As it stands, the way to bootstrap the official Rust compiler from source with just a C&#x2F;C++ compiler is a few options:<p>* Compile OCaml (implemented in C), use it to build the original Rust front-end in OCaml and then build each successive version of the language until you hit 1.49. This option is not fun.<p>* Compile mrustc, which is a C++ implemented compiler that supports Rust 1.29. Use that to build the actual Rust 1.29 and then iterate building your way all the way to 1.49. That is less bad, but still not fun.<p>* Compile the 1.49 compiler to WASM and run it via a C&#x2F;C++ implemented runtime in order to compile itself on the target system. This would also mean packaging and distributing the WASM generated code, which some distributions would refuse. I also am not sure if it&#x27;s even currently feasible, as I don&#x27;t follow the WASM situation closely.<p>A compliant, independent C++ implementation that could be built in the ten minutes it takes to build GCC itself would be a very good thing to have and would be more friendly to distribution maintainers.')