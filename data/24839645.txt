Item(by='estebank', descendants=None, kids=None, score=None, time=1603212794, title=None, item_type='comment', url=None, parent=24838175, text='RefCell is runtime &quot;borrow checking&quot; where a panic is thrown if the object is already mutably borrowed. Depending on your use case you might not even care about this behavior because you have other invariants that ensure that you&#x27;re only borrowing mutably once, you just can&#x27;t encode it in the type system. Otherwise, you would combine it with Rc[1]: Rc&lt;RefCell&lt;T&gt;&gt;.<p>Box, on the other hand, doesn&#x27;t have any runtime cost. In fact, it&#x27;s runtime cost is the same as a borrow: both &amp; and Box&lt;T&gt; are just plain pointers, with the extra benefit of having compile time lifetime checking.<p>[1] <a href="https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch15-05-interior-mutability.html" rel="nofollow">https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch15-05-interior-mutability.h...</a>')