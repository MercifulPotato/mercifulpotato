Item(by='valand', descendants=None, kids=None, score=None, time=1611827748, title=None, item_type='comment', url=None, parent=25937259, text='Agreed. The term is muddled and diverging.<p>OOP the paradigm (messaging and memory encapsulation) is pretty different from OOP the style (access modifier, class+method+properties, inheritance).<p>As a strong proponent of FP the paradigm, I insist OOP the paradigm is great to study and apply in a system software where there are multiple agencies. For example, in a browser there are multiple &quot;agencies&quot;, network-facing workers, storage-facing workers, human-facing workers, etc, as each &quot;agencies&quot; runs at different to pace to make its &quot;client&quot; (networkAPI, storageAPI, human) happy, therefore messaging and buffering between those &quot;agencies&quot; inevitable.<p>FP also suffers the same issue.<p>FP the paradigm: pure functions, expression-based, recursion, first-class function, parsing &gt; validation (universal, almost applicable in any programming language)\nFP the style: monad, functional-based language, tail-call optimization<p>Being overly-critical over style is not productive in the long term. Someday one will have to leave the tool for a new one.<p>Learning the universal part of paradigms is useful because it is not dependent to tools.')