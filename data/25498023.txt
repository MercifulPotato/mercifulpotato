Item(by='smichel17', descendants=None, kids=None, score=None, time=1608576547, title=None, item_type='comment', url=None, parent=25478949, text='&gt; Google have reversed the User Interface paradigm. Instead of users learning the software and telling it what to do, the software learns the user. I don&#x27;t necessarily mean NNs or personalisation. I mean that the paraign is software-centric. &quot;If the user does X, how should the software respond?&quot; instead of &quot;If the user user wants Y, how does she make the software do it?&quot; That&#x27;s great for intuitiveness, but it also creates a frame where the software gets better over time but the user never does.<p>May I quote you on this?<p>It is a great description of the 3rd premise in a talk proposal I submitted to LibrePlanet 2021, which goes something like:<p>- Software freedom is predicated on the notion that users ought to be in control of what runs on their computers.<p>- I claim that tech literacy is necessary to exercise this control.<p>- &quot;Google Design&quot; presumes that &quot;nontechnical users&quot; are not and will never be capable of tech literacy.<p>If all of these are true, then &quot;Google Design&quot; is incompatible with the idea that Software Freedom is for everyone. And indeed, we see this borne out in many people&#x27;s disdain for copyleft licenses, which impose restrictions on developers in order to guarantee freedoms for end users. That&#x27;s a logical viewpoint, if you believe that end users wouldn&#x27;t benefit from software freedom, anyway.<p>&quot;Google Design&quot; does make <i>software</i> more accessible to end users… at the cost of turning your computer into an appliance. Which makes it a self-fulfilling prophecy. People don&#x27;t magically become tech literate; they intentionally learn the skills so they can achieve something. Remove the power from the tools, and you take away their motivation to become tech literate. I have a great story about my grandma to illustrate this point.<p>If our goal is to make <i>computing</i> (and, by extension, software freedom) more accessible to everyone, then we need to change our approach. We need to prioritize education and teaching tech literacy. And most of all, we need to write software that is powerful enough that users will see the benefit in learning to use it.<p>That&#x27;s they key points from the first half of the talk. The second half is about <i>how</i> we can create software that is powerful without sacrificing usability. It basically boils down to &quot;make simple things easy and hard things possible&quot; — creating software that Just Works™ without configuration, but allows you to customize its behavior if&#x2F;when you want to. In particular, I&#x27;m a fan of embedded scripting interfaces (e.g. spreadsheets), which allow a vast amount of customization without creating &quot;settings overload&quot; that is typical of many FLO[1] programs.<p>[1]: <a href="https:&#x2F;&#x2F;wiki.snowdrift.coop&#x2F;about&#x2F;free-libre-open#flo" rel="nofollow">https:&#x2F;&#x2F;wiki.snowdrift.coop&#x2F;about&#x2F;free-libre-open#flo</a>')