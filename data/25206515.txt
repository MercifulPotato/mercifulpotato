Item(by='sujayakar', descendants=None, kids=None, score=None, time=1606286269, title=None, item_type='comment', url=None, parent=25203038, text='are there any good composable programming abstractions for expressing progress in a system?<p>as an analogy, I really like RAII-based cancellation for futures in rust. dropping a future means the caller is no longer interested, and the sane behavior of cancelling all of the subfutures is the default. this seems simple at first, but dropping a single future may end up cancelling operations on other threads, freeing buffers, and so on, and the programmer profitably stumbles into the correct behavior.<p>so, it&#x27;d be nice for having a similarly composable abstraction for reporting progress in an asynchronous system. `Control.Monad.Progress`[1] just uses a float in [0, 1] to represent progress, and `NSProgress`[2] has a bit more going on but still requires the programmer to manually partition a parent task into its subtasks.<p>I&#x27;m not sure this is altogether possible, but I could imagine 1) a library for expressing the ground truth of where parts of a system are and then 2) a heuristic based layer above for turning snapshots of the system into time estimates and percentages working well.<p>[1] <a href="https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;progress-reporting-1.0.0&#x2F;docs&#x2F;Control-Monad-Progress.html" rel="nofollow">https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;progress-reporting-1.0.0...</a><p>[2] <a href="https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;foundation&#x2F;progress" rel="nofollow">https:&#x2F;&#x2F;developer.apple.com&#x2F;documentation&#x2F;foundation&#x2F;progres...</a>')