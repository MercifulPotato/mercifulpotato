Item(by='uDontKnowMe', descendants=None, kids=[25390296], score=None, time=1607717163, title=None, item_type='comment', url=None, parent=25388569, text='I have worked in multiple Scala shops and contributed at the highest levels to the Scala ecosystem and my experiences confirm that this rotten attitude is very real and increasingly the norm, as everyone but the fanatical FP-ers have long-since moved on to other more professional&#x2F;productive circles.<p>With the exception of shops using Scala exclusively for Spark, someone entering the ecosystem can expect to be constantly talked down to if you dare to use something deemed by the FP hivemind to be evil (so, anything other than pure, immutable, FP-style with all side effects controlled, no exceptions or nulls, no inheritance (only typeclasses), etc). They&#x27;ll be derided and skoffed at constantly for being &quot;just a java++ programmer&quot;.<p>Meanwhile, for all their smugness, the FP community has achieved nothing at all that has reached beyond to the world outside of Scala. The projects successful in bringing in developers to Scala have been decidedly in the disparaged lightly-FP&#x2F;&quot;Java++&quot; style: Spark, Kafka, LinkerD (1.X -- they rewrote 2.X in Go&#x2F;Rust), Flink, Akka, PlayFramework, Twitter&#x27;s stack, Prisma, etc. Shockingly, the predominant view among these delusional pure-FP-obsessives, which usually goes unchallenged, is that the creators of Spark don&#x27;t know anything about Scala or are bad engineers!<p>Scala 3 is a joke and will do the exact opposite of the stated goals from years back. It was supposed  to streamline and simplify the language, remove gotchas, add a few high-impact simple features like Union types and trait parameters. Now it&#x27;s a grown into a monstrosity of complicated features that your average dev will never use. Rather than streamline and simplify Scala 2&#x27;s issues with having dozens of ways to do the same thing, it introduces multiple new dimensions by which people can do things in multiple ways (legacy implicit system vs new &quot;given&quot; syntax; braces syntax vs indentation-based).<p>Control structures helpful for imperative programmers are being removed (you cannot early return from a for loop without a huge hassle), `do-while` is removed, etc. These breakages were not pushed back against because the only people still around are FP&#x27;ers who don&#x27;t want people using loops in the first place.<p>New type-system features are being added without even knowing if there&#x27;s a possible use-case. The whole thing is a mess.')