Item(by='lmilcin', descendants=None, kids=None, score=None, time=1604312225, title=None, item_type='comment', url=None, parent=24965213, text='I agree with the OP but for a slightly different reason.<p>Type safety is valuable in that it <i>relatively</i> easily helps achieve a goal of alerting the programmer that he&#x2F;she is mixing together things that should have not been mixed. Ie. using something in a context where it should not be used.<p>That goal can be achieved in other ways and it is not even the best way to achieve that goal.<p>Type safety is valuable in that:<p>* does a lot of sense for a user of the programming language (ie. programmer) <i>IF</i> it is done sensibly (forget about template metaprogramming, that is not sensible). Thinking about things in terms of types is natural to our brain structure.<p>* warns early (ie. your program does not compile)<p>* enforces on everybody working on the application (you can ignore conventions but you can&#x27;t ignore compilation error)<p>Now, what I don&#x27;t like is that people forget that types and type safety is there to achieve the goal (making programs better, easier to read, easier to reason about, harder to make a mistake).<p>Thinking about type safety as if it was some kind of <i>security</i> mechanism to prevent any and all kinds of mistakes is IMO very misguided. I don&#x27;t want to battle with my type system, I want to write working code and I want to use type safety mechanism that lets me get there reasonably without spending huge amount of extra effort.<p>So, I think, there is a <i>sweet spot</i> for type safety, where it is enough to help prevent most mistakes and make reading the code easier, but not enough to make you reduce your productivity.<p>Not only that, the sweet spot will depend on what task you are working on.<p>For example, languages with relaxed type safety are good for rapid development -- ie. &quot;scripts&quot;. There sweet spot is shifted to less type safety because your program is much smaller and you don&#x27;t need help remembering what are different things and there is probably less developers working on it.<p>On the other hand, for large projects with many people working on them, long build times, expensive testing, etc. you would very likely want a language with stronger typing (like Java that is very poor language but offers very good <i>practical</i> type system).<p>Now, Rust type safety is a special IMO compared to other type safety mechanism in that it is very hard for the user (ie. programmer) but I still am ok with this. The reason is because there the type safety is used to get so much more that would not otherwise be possible (at least not with our current knowledge).')