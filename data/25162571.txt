Item(by='wwright', descendants=None, kids=None, score=None, time=1605892844, title=None, item_type='comment', url=None, parent=25161519, text='You may be thinking of Java&#x27;s idea of an interface, which is  a type (with specific subtyping behaviors). Traits in Rust are <i>not</i> types. There are two different ways to reference an object which implements a trait indirectly (actually more, but these are the dominant ones):<p>- a `Box&lt;dyn Trait&gt;` is like a Java object referenced by an interface. Everything uses dynamic dispatch, and it is an actual concrete type (though the actual &quot;underlying&quot; type is type-erased).<p>- an `-&gt; impl Trait` is an <i>existential</i> type which uses a trait as a bound, which should be equivalent to D&#x27;s &quot;Voldemort&quot; types, except that it can still satisfy Trait requires for other functions. For example, if you `-&gt; impl Iterator&lt;Item = u32&gt;`, you can pass that result to a function expecting an iterator of `u32`. However, the type is fully defined by the callee and can&#x27;t be instantiated&#x2F;inspected externally.')