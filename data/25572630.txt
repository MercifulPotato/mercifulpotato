Item(by='jlokier', descendants=None, kids=[25573393], score=None, time=1609264808, title=None, item_type='comment', url=None, parent=25572275, text='&quot;Pretty bad&quot; is unwarranted in my opinion.  Your alternative adds overhead of creating an extra div for each intermediate string in the code it replaces.  It&#x27;s trivial overhead, and may be a small number, but exactly the same applies to the overhead of temporary strings - they are comparable.<p>Intermediate string length doesn&#x27;t matter for time complexity here.  If they are short they will be fast.  If they are long, the time to scan and parse in DOMPurify and innerHTML will dominate.<p>After building the DOM, your extra divs are processed every time that section of the DOM is styled and rendered, not just once.  If the number of extra divs is low enough that this is negligible, so is the number of intermediate strings in the alternative code.<p>So I wouldn&#x27;t assume your version is faster at setting up, and it may be marginally slower later on repeated renderings. I&#x27;d profile both versions, maybe with Browserscope (which probably has a test for this particular question already).<p>However if I couldn&#x27;t profile and was asked my guess at the fastest version, my guess is the string-join version.  I&#x27;d be more concerned with whether concatenating DOMPurify.sanitize() strings is guaranteed to maintain the same security properties.')