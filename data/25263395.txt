Item(by='zaarn', descendants=None, kids=[25263597], score=None, time=1606810188, title=None, item_type='comment', url=None, parent=25262764, text='I&#x27;ve written some memory allocators that use lock-free allocation maps. In this case, a 4kb granularity allocator that used compressed free-bitmaps for usage in both userspace and kernelspace.<p>The entire thing was lock-free, so allocations would never stall on a lock, even if the allocator had to decompress a bitmap (the way compression worked was by looking for free memory ranges and then replacing them by a range expression, which saved a few MB of memory per Gigabyte of memory available, as well as ordering largely free memory blocks to the start of the bitmap list to reduce seek time). Despite the complexity in the allocator, it could serve any number of threads without ever locking up. The worst case was a long latency if a thread had to scan the entire free list for a free block (It would switch to a different allocation behaviour if a thread had more than a dozen failed allocation attempts).<p>A bunch of ring buffers I&#x27;ve worked with are atomic (ie, lock free), probably the most common application of lock-free stuff.')