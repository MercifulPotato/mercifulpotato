Item(by='fleabitdev', descendants=None, kids=[25496260], score=None, time=1608566513, title=None, item_type='comment', url=None, parent=25495154, text='Genuinely interesting suggestion!<p>I used Lua coroutines, Python generators and Ruby fibers as my prior art; in all three cases, they&#x27;re resumed by invoking a method on the coroutine object.<p>A lambda function which resumes a coroutine can simply be written as:<p><pre><code>  (fn0 (coro-run the-coro))\n</code></pre>\nThis is more ugly than passing in the coroutine directly, but it&#x27;s also more explicit. I&#x27;m concerned that if the &quot;resume coroutine&quot; operation looks like a normal function call, the control flow of coroutines might become too difficult to follow.<p>To the best of my knowledge, the only way to get rid of `yield-from` would be to switch from stackless to stackful coroutines. GameLisp used to have stackful coroutines, but they added a large complexity burden to the virtual machine, and they were so expensive that I could never bring myself to use them for entity scripting. My instinct is that other game developers would feel the same way.<p>I&#x27;ll need to give this some more thought.')