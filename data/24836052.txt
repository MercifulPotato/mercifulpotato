Item(by='j-krieger', descendants=None, kids=None, score=None, time=1603192382, title=None, item_type='comment', url=None, parent=24835983, text='Multiple points:<p>I really like how there&#x27;s a package for everything. Many other languages have adopted this method, but for example in Rust, most packages are not as mature as JS packages are. The JS ecosystem is responsible for spawning services that fund Open-Source developers. \nPackages are also easy to install. I spent a whole weekend trying to install Postgres and Drogon (a http server) on C++ with conan&#x2F;vcpkg, and in the end I could only manage with a docker container installing these dependencies via apt-get, which was exactly what I did not want.<p>Furthermore, NPM is <i>the</i> package manager among package managers. No other package manager comes close. Python has too many options, virtual environments and so on. Rust&#x27;s cargo is good enough, but I really do not enjoy having to install a seperate package (cargo-edit) just to add a package via the command line instead of editing text files. C++&#x27;s package management systems are most of the time a total letdown or don&#x27;t have widespread adoption. Not only that, npm also takes care of a package maintainer needs (semver, transitive dependencies, etc)<p>---<p>Many people express dissatisfaction about build tools and the like, but as someone who got into webdev at the exact time people began building larger applications on the client, I love them. Sure, when they first appeared they were a pain to work with, but most modern build systems are <i>amazing</i>. I can just include most files (MD, SVG, images) and work with as if they were JSON&#x2F;JS files and don&#x27;t have to worry about how  it&#x27;s done internally.<p>---<p>Prototyping is really fast and important if you work with startups or want to create a proof of concept for a customer. I can throw together a functioning backend with http server and database in a couple of days.<p>Modern JS frameworks are uncomplicated and <i>can be</i> minimal if you know how to use them. For example, my personal site (<a href="https:&#x2F;&#x2F;juliankrieger.dev&#x2F;" rel="nofollow">https:&#x2F;&#x2F;juliankrieger.dev&#x2F;</a>) is written in Gatsby and React.js, but it weighs only 20kb. Now, there&#x27;s not much on it but all content is rendered server side and only rehydrated when I need it. For anyone interested in getting even better results on a personal homepage, I recommend looking at 11ty for a static site generator and htm&#x2F;preact for an absolutely minimal React implementation that only ships javascript where you really need it.<p>---<p>I also like how it enables me to write scripts for personal use and at the same time I can use Node for larger projects. I&#x27;ve used python for this in the past, but a large python code base can be a beast of its own.<p>Moreover, not having to recompile dependencies on a code change is a welcome feature. My main problem with Rust are the large compile times. Node even enabled me to hot reload code under the right conditions, making iterative development an insanely fast process.')