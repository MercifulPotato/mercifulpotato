Item(by='pavlus', descendants=None, kids=[25552009, 25551440, 25551477], score=None, time=1609079051, title=None, item_type='comment', url=None, parent=25547205, text='TLDR: 1. You already have that on Linux. 2. Make your builds portable.<p>If you are running mainstream Linux(Debian-based&#x2F;Arch-based, probably other), most of the Docker profits can be achieved with already installed and configured systemd and your distro&#x27;s package manager.<p>Sandboxed? systemd.<p>Simple, uniform interface? Your distro has packages, and most likely services that can and should be sandboxed already run in systemd after installation, you can tune unit-file if you want, and systemd has security checker, that shows you what application in the sandbox can and can not do, without proxying things the Docker way.<p>Versions pinning? Pin version with your package manager. Want multiple versions? Check out DebianAlternatives system.<p>Reproducible? Fix your build&#x2F;install configs, not the environment. If it builds on your machine, but not on the other, or run flawlessly on one, but not the other, it means you have implicit dependency on the environment, or wrong dependency versions constraints, which you likely don&#x27;t know about. If you don&#x27;t know your dependencies, you are definitely shooting blind.<p>Minimizes global state. Repo-based distros minimize global state by providing software that has most dependencies compatible, so you can have your minimal state and update your software too. Meanwhile with docker you need all dependencies and hope that they will match between images, so you can save on layers reusage. And if someone decides to update base image, and others dont... well, too bad, you have to have both versions of the base image.')