Item(by='ufo', descendants=None, kids=[25624332], score=None, time=1609693619, title=None, item_type='comment', url=None, parent=25622169, text='I find that this kind of pattern can be useful if you have a default implementation for each visit_foo method.<p>For example, suppose that you want to create a traversal that walks through the entire Ast and does something special on just the Name nodes. And another traversal that does something special on just the integer literal nodes. One way to do this is to create a default traversal that walks through the entire tree without doing anything and then create a &quot;subclass&quot; that overrides just the visit_name and another that overrides just the visit_expr method.<p>One place that I&#x27;ve seen this in the wild is the Ocaml compiler:<p>* <a href="https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;trunk&#x2F;parsing&#x2F;ast_iterator.mli" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;trunk&#x2F;parsing&#x2F;ast_iterat...</a>\n* <a href="https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;trunk&#x2F;parsing&#x2F;ast_mapper.mli" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;trunk&#x2F;parsing&#x2F;ast_mapper...</a>')