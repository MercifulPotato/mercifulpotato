Item(by='emmanueloga_', descendants=None, kids=[24655661, 24655187, 24659269, 24655352], score=None, time=1601580074, title=None, item_type='comment', url=None, parent=24652842, text='Critique: the TOC is only shown in first post and not clickable, makes it hard to navigate the series. It would also be nice to have the TOC repeated in each post.<p>Question: I saw a chapter about unary functions. In some interpreters let bindings are explained as &quot;sugar&quot;, or syntactic extensions on top of function calls. For instance `let` is not present in the core of scheme [1]. So in this way one could transform a let binding from:<p><pre><code>    (let ((a 1) (b 2)) (+ a b))\n</code></pre>\nto:<p><pre><code>    ((((lambda (a) (lambda (b) (+ a b))) 1) 2)\n</code></pre>\nthrough:<p><pre><code>    (define-syntax let\n      (syntax-rules ()\n        [(_ ((x e) ...) b1 b2 ...)\n         ((lambda (x ...) b1 b2 ...) e ...)]))\n</code></pre>\n... then you wouldn&#x27;t need to compile let bindings, just function application, which some people call &quot;desugaring&quot;.<p>I was wondering if this kind of desugaring is used in practical lisp compilers or not... without knowing too much about lisp compilers, I imagine one reason to not go this way is that it could potentially generate way more code than compiling higher level concepts like `let` directly.<p>1: <a href="https:&#x2F;&#x2F;scheme.com&#x2F;tspl4&#x2F;further.html" rel="nofollow">https:&#x2F;&#x2F;scheme.com&#x2F;tspl4&#x2F;further.html</a>')