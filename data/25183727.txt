Item(by='siraben', descendants=None, kids=None, score=None, time=1606107528, title=None, item_type='comment', url=None, parent=25183584, text='&gt; 1) do you consider variable reference to be an effect because you&#x27;re getting a value from memory&#x2F;disk&#x2F;network? Or is it effectful simply because you&#x27;re replacing a name with a value somehow? I&#x27;d love to understand the point of view here.<p>To give an example, say you have int* x.  When the expression (*x) is used later on, it is the dereference that is effectful.  In other words, the expression lacks referential transparency.<p>Going further, Oleg says that &quot;an expression is effectful if it sends a message to its context&quot;. The example he gives is x+1 being impure, since it sends a request to the context to look up the value of x, whereas (λx. x+1) is pure because λ provides a handler for the request to look up the value of x, and the whole expression can be evaluated without sending anything more to the context.<p>&gt; 2) Relatedly, why do you say that creating a lexical closure is effectful (I assume here that we are storing an immutable memory address, or at least a value which represents a way to reliably find another value in the future), but using it (dereferencing that address&#x2F;value) is not? I can see why you&#x27;d say that creating a dynamic closure is not effectful (the code is essentially unattached to anything at the time of creation and can easily be represented by a pure value), but using it is (it now inhabits a scope and will act differently depending on that scope).<p>Creating a lexical closure (see 1:22:30 of the video) involves capturing the environment in which the closure was created. As in #1, the effectful part comes from a request to the context, which is collecting the free variables in the body of the lambda and building the closure. OTOH for dynamic closures you can create them without sending any request to the context, but when you apply it you have to request from the context.<p>The discussion on the Actor model is very relevant to understand what it means for expressions to send requests to contexts.')