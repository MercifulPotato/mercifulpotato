Item(by='q3k', descendants=None, kids=None, score=None, time=1603462575, title=None, item_type='comment', url=None, parent=24867707, text='I have my reasons to _despise_ hosting PHP from an operational perspective. These mostly come from having to host ready-made PHP applications like Nextcloud, Wordpress, Dokuwiki, etc.<p>1) &#x27;Language configuration&#x27; kept in a php.ini that is usually not shipped with any project. Instead, each project tells you what flags to flip so that it runs, but very often every distribution ships PHP with slightly different flags, effectively making it _very_ hard to have a 100% correct php.ini.<p>2) &#x27;Deployment configuration&#x27; that is additionally present in your FPM&#x2F;apache configuaration. Again, you have to be told by a project that that these given options (often related to timeouts and request size) have to be set. Many projects just assume you have some &#x27;sane defaults&#x27; like things bumped up from the defaults. Again, very difficult to get reproducible deployments of an app, unless the developers are very insistent on documenting everything.<p>3) Extremely painful to debug. If 1) or 2) are broken and a connection terminates during an upload with some 400 error, the error can be in multiple places: nginx&#x2F;apache, php-fpm, or the PHP code itself. Each one of them logs to a different place, or not at all. It&#x27;s difficult to actually understand the _source_ of the error. Good luck. Bring strace.<p>4) Broken upload model. If I understand correctly, all file uploads in PHP must end up on the local filesystem, and they are impossible to directly stream onto something like S3. This means that my Nextcloud instance will first save a few gigs of data on &#x2F;tmp, and then only punt it over to S3. Gross.<p>5) Annoying to host in containerized environments. Both Apache and nginx are the kind of applications that insist on doing a bunch of setuid()s, thereby breaking on hardened containerized environments. Not to mention having to host a nginx+fpm&#x2F;apache combo per application just seems wasteful, but there&#x27;s no other easy way to deploy PHP apps in a containerized way that I&#x27;m aware of.<p>6) Configuration woes with rewrites, static files, etc. This is related to 2), in which you have to spend a bunch of time configuring your HTTP server in order to split up requests between static file serving and PHP, set up rewrites, and hope you don&#x27;t accidentally introduce a security vulnerability.<p>All in all, compares to something like &#x27;here&#x27;s a go binary, run it, push HTTP traffic to it, it will serve its own static files, too&#x27;, PHP is an _extreme_ pain in the ass to host.')