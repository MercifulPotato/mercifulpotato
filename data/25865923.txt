Item(by='dragontamer', descendants=None, kids=[25866138], score=None, time=1611270740, title=None, item_type='comment', url=None, parent=25863995, text='Depends on the implementation of SMT.<p>I know that POWER9 for example, reserves the superslices for different threads as you go from SMT1 (1-thread per core) up to SMT4 (4-threads per core).<p>Thread#0 and Thread#1 get Slice0, while Thread#2 and Thread#3 get Slice1.<p>--------<p>For an even more extreme example, Bulldozer&#x27;s implementation of SMT &#x2F; Cores &#x2F; whatever you wanna call it... the L1 cache was split between the two cores. So you&#x27;d rather have 2-threads doing two different things (even if they shared the same decoder and significantly shared the same resources), because you&#x27;d &quot;magically&quot; get access to more L1 cache.<p>Even on modern Skylake &#x2F; Zen systems, some SMT resources are locked to one thread or the other. So you do in fact get more resources from SMT.<p>On the other hand: you&#x27;re absolutely right in that pointer-chasing can be done in parallel in a single thread due to ILP (and that ILP is probably even preferable to using more threads). Still, the fact that SMT systems are implemented so differently and so weirdly at times... it means that we can&#x27;t really make general rules about SMT systems.')