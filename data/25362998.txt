Item(by='tgbugs', descendants=None, kids=None, score=None, time=1607541236, title=None, item_type='comment', url=None, parent=25356757, text='I have spent a stupid amount of time trying to come up with a somewhat more secure approach and wound up with `scurl` which requires a cypher, a checksum, a url that points to an immutable file, a target path, always writes the output to disk, and will not write to the target path if the checksum does not match [0]. For an extra level of paranoia add a check to ensure that the target directory exists and is only writeable by the user currently running the command. As far as I can tell there isn&#x27;t a simpler way to do this that doesn&#x27;t have some hidden pitfall, and I&#x27;m sure even this way has pitfalls, because I only just realized that I had not accounted for the race condition on the target path. There are variants of this which can stream, and there was even some work to try to integrate this functionality into curl itself [1], but they are 1) not portable 2) more complex, longer, and harder to audit and 3) don&#x27;t protect you anyway. Why not? Because you can&#x27;t know that a file doesn&#x27;t match until you read the last byte, at which point all of those bytes will already have been piped into bash. Oops!<p>I have also spend a stupid amount of time trying to figure out a reasonable workflow that streamlines auditing and update of the immutable links used in this pattern [2]. The same issue is faced by anyone who pins their dependencies. Auditing dependencies is a huge bottleneck, to the point where it is often neglected entirely and&#x2F;or has the effect of preventing updating dependencies altogether.<p>Immutability of the data behind the link is critical to prevent checksum failures due to legitimate changes to the underlying data, but also means that you can&#x27;t take advantage of being able to point users to a single unchanging url. For one type of security the name has to change with the content. For usability and another type of security it is vital to be able to quickly push updates. If you have users with an immutable url pointing to a bad version the only thing you can do is take down that version, but you can only do that if you control the server. If you point to a raw github url that bad version will never go away. Thus it is critical to have tooling in place that makes it easier for users (aka other developers) to find and update those immutable urls in a way that minimized the audit load.<p>The sandbox wont save you this time!<p>0. <a href="https:&#x2F;&#x2F;github.com&#x2F;tgbugs&#x2F;orgstrap&#x2F;blob&#x2F;master&#x2F;get-emacs.org#posix-bootstrap" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;tgbugs&#x2F;orgstrap&#x2F;blob&#x2F;master&#x2F;get-emacs.org...</a><p>1. <a href="https:&#x2F;&#x2F;github.com&#x2F;curl&#x2F;curl&#x2F;issues&#x2F;1399" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;curl&#x2F;curl&#x2F;issues&#x2F;1399</a><p>2. <a href="https:&#x2F;&#x2F;github.com&#x2F;tgbugs&#x2F;orgstrap&#x2F;blob&#x2F;master&#x2F;reval.org" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;tgbugs&#x2F;orgstrap&#x2F;blob&#x2F;master&#x2F;reval.org</a><p>3. <a href="https:&#x2F;&#x2F;blogs.sciencemag.org&#x2F;pipeline&#x2F;archives&#x2F;2008&#x2F;02&#x2F;26&#x2F;sand_wont_save_you_this_time" rel="nofollow">https:&#x2F;&#x2F;blogs.sciencemag.org&#x2F;pipeline&#x2F;archives&#x2F;2008&#x2F;02&#x2F;26&#x2F;sa...</a>')