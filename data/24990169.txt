Item(by='jerf', descendants=None, kids=None, score=None, time=1604505574, title=None, item_type='comment', url=None, parent=24987665, text='&quot;I joked with a friend that as people get older they start to prefer static typing.&quot;<p>I don&#x27;t think you can tell that right now. Statically-typed languages have gotten much, much better over the past 30 years (progressively), and over the last 20 years we&#x27;ve all aged, you know, 30 years, so right now I think there&#x27;s a lot of correlation there rather than necessarily causation. I have also switched to static typing as I&#x27;ve &quot;gotten older&quot;, but I would still <i>totally</i> rate things in the order &quot;1990 static &lt; 2010 dynamic &lt; 2020 static&quot;, even if I had to choose right now. Static was a real mess in the past.<p>It also isn&#x27;t even necessarily big jumps that make that true as much as a steady development of innovations, since obviously it&#x27;s not like all modern static languages are Hindley-Milner or anything. But a slow dribble of both little features and improvements in understanding of how to use everything over the years, like type deduction (getting rid of the usually-redundant specification of type on both sides of &quot;=&quot;), getting away from the idea that OO === matching physical models, libraries that have learned to take more interfaces instead of concrete types, languages like Go that privilege composition over inheritance instead of the other way around and the general trend towards composition, getting iterators embedded more deeply into languages like C#, control flow improvements like usable threading methodologies (&quot;share memory by communicating, don&#x27;t communicate by sharing memory&quot;, and even as much as I dislike it vs. the alternatives, having async&#x2F;await is better than not having any options even though I prefer Go-style threading by a mile), and so on and so on... a steady dribble of little improvements that one step at a time changed the cost&#x2F;benefit tradeoffs of a static vs. dynamic language from clearly dynamic circa 2000 to fairly clearly (IMHO) static for any non-trivial code base in 2020. And that&#x27;s before we talk about Rust or anything like that.')