Item(by='carlmr', descendants=None, kids=None, score=None, time=1612206024, title=None, item_type='comment', url=None, parent=25991804, text='When it comes to how to write code we&#x27;re essentially faced with a usability problem.<p>When we write an API function we want other people to use it. When we write internal functions we want other developers to use it. When we write programs we want some customer to use it.<p>A lot of usability design has been somewhat formalized. We describe design in terms of signifiers, affordances, constraints, mappings and feedback.<p>A lot the bad and best practices can be rephrased in these terms.<p>If your program is &quot;stringly&quot; typed it&#x27;s unclear which affordances your functions offer, that&#x27;s bad.<p>In OOP a lot is hidden from the user, if this is well done, you have constraints that keep you from doing something wrong, if it&#x27;s badly done you have big objects with some state that&#x27;s unobservable (lack of signifiers) so you can&#x27;t understand what it does (lack of affordances).<p>In FP you do this through function signatures, purity and strong typing.<p>The type signature together with the function name can show you the affordances of the function. By constraining inputs and making outputs explicit (e.g. result types) you provide constraints and signifiers about their usage.<p>A mapping is what we expect, e.g. from a knob. If you find 4 knobs and 4 hot plates on a stove, you instinctively know what they do. If the hot plates are somewhat shifted laterally against each other it becomes even easier to identify which knob is for each plate. In programming this could be the name of a function. A function called printX() shouldn&#x27;t do anything except printing, otherwise it breaks the instinctive mapping that you expect. A function named isX() shouldn&#x27;t return void. It should return a boolean.<p>Of course you can&#x27;t condense this down to a simple number, but at least you can describe why something is good or bad. The groundwork has been laid already.')