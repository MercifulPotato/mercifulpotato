Item(by='nathan_f77', descendants=None, kids=[25149535], score=None, time=1605793421, title=None, item_type='comment', url=None, parent=25148268, text='Yes, RuboCop would be awful if you&#x27;re only running it as part of the CI build.<p>I&#x27;ve been using RuboCop very heavily for the last few years. I&#x27;ve found it very useful as a solo developer, but it also makes it much easier to work with other developers since we never have to waste time talking about style issues.<p>Here&#x27;s all the ways I&#x27;ve integrated RuboCop and made it an amazing experience:<p>I use VS Code with the ruby-rubocop extension, and I&#x27;ve enabled the &quot;Format On Save&quot; option. (This uses Prettier for most other file formats.) This would be unbearably slow with vanilla RuboCop, but I get a huge speed boost with rubocop-daemon. (Especially with the bash wrapper script that I wrote [2].) So now every time I save a Ruby file, the file is auto-formatted instantly to correct any warnings. In case it can&#x27;t automatically fix a warning, I&#x27;ll still the warning right in my editor, so I can immediately fix it before moving on.<p>The second step is a git hook script in `.git&#x2F;hooks&#x2F;commit-msg`. I set this up to run RuboCop for Ruby, plus prettier and eslint for JavaScript. If RuboCop fails with a warning, the script retries with `rubocop -A` to automatically correct any errors. Then I run `git diff` to make sure everything looks good before committing the changes.<p>The final step is to run `rubocop` as part of my CI build, to make sure I didn&#x27;t miss any warnings (or for any developers who haven&#x27;t set this up on their machines.) This almost always passes, because the previous two steps usually catch everything first.<p>I disagree with a lot of the default cops, so I just disable lots of them. But I&#x27;m pretty happy with my current setup and RuboCop configuration.<p>I totally agree that linters would be awful when you have a very slow feedback loop, and you have to wait anywhere from 10 - 60 minutes before you get a notification for a failed build. But they can be really pleasant experience when the feedback loops are under 100ms and most of the warnings are automatically fixed for you. I now lean on it really heavily, and I&#x27;ve even started to take some shortcuts and save keystrokes, because I know how the auto-formatter will tidy up the code.<p>[1] <a href="https:&#x2F;&#x2F;github.com&#x2F;fohte&#x2F;rubocop-daemon" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;fohte&#x2F;rubocop-daemon</a><p>[2] <a href="https:&#x2F;&#x2F;github.com&#x2F;fohte&#x2F;rubocop-daemon#more-speed" rel="nofollow">https:&#x2F;&#x2F;github.com&#x2F;fohte&#x2F;rubocop-daemon#more-speed</a>')