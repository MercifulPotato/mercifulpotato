Item(by='tremon', descendants=None, kids=None, score=None, time=1605605766, title=None, item_type='comment', url=None, parent=25121416, text='Git is simply one of the tools you must learn to master as a modern software developer. If you&#x27;d say &quot;but source control is simply too hard!&quot; you would probably be asked to leave the building on the first opportunity, and I&#x27;d say rightly so. A craftsman that doesn&#x27;t master his tools is a shoddy worker. I don&#x27;t see how that is different for software engineers.<p>Also, modeling your tools around &quot;how people think&quot; is the wrong approach. Tools should be modeled around the process flow, and people should be taught to think in terms of that same process. &quot;How people think&quot; should not be leading, the process requirements should be leading.<p>&gt; I have some changes. I wanna share it with Jon and Johnny so they can tell me what they think. And then maybe they can add their ideas. And then we can have a merging of our ideas, and eventually test out if it works, and have it out there and ship it.<p>So, no. You don&#x27;t &quot;have some changes&quot;. You have a piece of software source code. That source code is worthless without running it (or shipping it). And once you start running it, people (including yourself) will start to rely on how it works <i>right now</i>. If you change how it works, you need to<p>a) be able to explain what changed from one version to the next<p>b) be able to revert to the previous version if the new one is problematic<p>The first rule of source control is that it&#x27;s not about sharing: it&#x27;s about auditing your changes. From there you can start to work out the details, about sharing the source code with others, about developing multiple features in parallel, about maintaining multiple versions off the same codebase, etc.<p>But in the basis, git (or any vcs) is not a sharing tool, it&#x27;s an auditing tool. Sharing is secondary.')