Item(by='hardwaresofton', descendants=None, kids=None, score=None, time=1610369238, title=None, item_type='comment', url=None, parent=25728078, text='This article might be a bit overeager and overzealous, but how you use haskell is up to you -- don&#x27;t use those underlying packages that disgust you if you don&#x27;t like them. Haskell offers benefit at every level of abstraction. There are many ways to write Haskell and you do <i>not</i> need a bunch of the higher level stuff. 99% of the time you are just fine with the data modeling (simple Algebraic Data Types) and type classes, along with a cursory understanding of monads via &quot;do&quot; notation.<p>This comment reads like someone seeing the worst of J2EE, and going back to C++. I&#x27;d characterize haskell as having the type system that Java wishes it did.<p>Why are you trying to judge how haskell should be written for your use case by looking at haskell-language-server, stack, and xmonad? Those are the domains of haskell experts -- one is a language server, the other is one of the pre-eminent build tools, and the other is tiling manager.... Are any of those your use-case?<p>There are real problems with haskell, and forcing you into complexity is not one of them -- a steep learning curve (for <i>certain</i> concepts), hard to debug space leaks, and a relatively small ecosystem are the biggest issues.')