Item(by='correct_horse', descendants=None, kids=[24996967], score=None, time=1604555863, title=None, item_type='comment', url=None, parent=24979129, text='This article compares the hierarchical nature of the type system of OOP languages (think Java) with the hierarchical nature of ownership in languages with Ownership&#x2F;Move semantics (Rust and newly C++). The author notes that &quot;composition over inheritance&quot; is a rejection of the strictly tree-shaped OOP type system. In the same way, Rust&#x27;s `RefCell` is an escape hatch from the strict hierarchy of ownership, maintaining a run-time invariant of one owner rather than a compile-time invariant.<p>One difference I see between these two escape hatches are switching costs. Rewriting the Java standard library to use composition and not inheritance borders on impossibly difficult. Rewriting the rust standard library to use RefCell instead of &amp;mut everywhere would be arduous and possibly automatable, but not impossible.')