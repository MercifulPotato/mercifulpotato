Item(by='chubot', descendants=None, kids=None, score=None, time=1602445819, title=None, item_type='comment', url=None, parent=24747381, text='Well, which one is broken depends on your viewpoint, and the exact use case.<p>Another way to look at it is the difference between exercise 4 and 5 here:<p><a href="https:&#x2F;&#x2F;mywiki.wooledge.org&#x2F;BashFAQ&#x2F;105" rel="nofollow">https:&#x2F;&#x2F;mywiki.wooledge.org&#x2F;BashFAQ&#x2F;105</a><p>So taking that concrete example<p><pre><code>    test -d nosuchdir &amp;&amp; echo &quot;warning: no directory&quot;; \n</code></pre>\ninstead of<p><pre><code>    false &amp;&amp; true\n</code></pre>\nYou didn&#x27;t want the function to fail.  You just wanted to print a warning if the directory doesn&#x27;t exist.  But the whole function fails, while it doesn&#x27;t for the if statement.<p>The whole thing is inherently confusing ...  The language confuses success&#x2F;failure and true&#x2F;false.  Both of those are stuffed into an exit code.<p>test -d is really for true&#x2F;false, but then functions also have success&#x2F;failure (did the last command succeed).<p>So there&#x27;s no way for shell to really know what you want.<p>I think Oil might end up with something like &quot;if catch foo&quot; for success&#x2F;fail, and &quot;if boolean grep&quot; for true&#x2F;false.')