Item(by='yakubin', descendants=None, kids=[25517276], score=None, time=1608723103, title=None, item_type='comment', url=None, parent=25516048, text='<i>&gt; They&#x27;re all different ways of doing the same thing. Of course there could be a benefit for cases where you have a limited stack size. The author says that there&#x27;s no need to do this in Haskell, because the stack is allocated on the heap, but I still wonder what the constant factor overhead of doing this with a linked list plus data types is over simple recursive function calls.</i><p>When you use (non-tail) recursive function calls, your memory will grow faster than with an explicitly managed stack, because now at each recursion level not only will you store all the things you would store in the explicitly managed stack, but also all the other variables and some intermediate values. Explicitly managed stack, that is implemented efficiently (i.e. mostly contiguous memory, not a linked list like in the example given), will give you better performance and will be easier to debug, because now you can query its size and identify where in the program you&#x27;re using a given amount of memory; in the debugger you can inspect it as a whole in a multitude of ways (as opposed to the black box of a function where you&#x27;ll only inspect one recursion level at a time, leaving you with scattered information and without easy to read performance metrics). That said, recursion is usually the simplest thing to write on the first try, when coming up with a solution to a problem. But I do tend to &quot;defunctionalize&quot; later.')