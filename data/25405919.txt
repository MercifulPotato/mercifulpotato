Item(by='emn13', descendants=None, kids=[25406348], score=None, time=1607860306, title=None, item_type='comment', url=None, parent=25386972, text='Yeah, there&#x27;s something to be said to a format that makes it hard to shoot yourself in the foot; essentially.  That point is somewhat orthogonal to the issue of how easy it is to author a config value, however.<p>By the way, you conflate purity with turing completeness; but the two are not really all that strongly related.  It&#x27;s possible to have a turing incomplete language that is nevertheless impure (public I&#x2F;O without unconstrained repetition), and conversely a turing complete language that is pure (i.e. keep your tape private).<p>I&#x27;d argue that turing completeness isn&#x27;t as relevant as people make it out to be here.  It&#x27;s not a good thing, mind you, but it&#x27;s just not that problematic either; externally imposed termination and storage limitation can render any turing complete system into a turing incomplete system - that&#x27;s easy - but a system with uncontrolled sideeffects is almost intrinsically hard to manage.  In fact, even technically turing-incomplete systems may well need to impose similar limitations anyhow, because a technically turing incomplete language that allows (say) nested loops or iteration - albeit bounded - may well not practically terminate, or nevertheless cause too much I&#x2F;O. Some languages are <i>really</i> limited, and perhaps then you can get away without externally imposed resource constraints, but it&#x27;s not clear to me how realistic that scenario is.<p>The real problem (to my mind) in general-purpose languages when it comes to using them for config-specification is not turing completeness, it&#x27;s purity (i.e. reproducibility).  And that&#x27;s not even really a language issue alone, it&#x27;s because those languages tend to come with large, pervasively used libraries, to the point that it&#x27;s not trivial to just take some code off stackoverflow (say) and reliably tell whether it&#x27;s pure or not - because that depends on the internals of all of those library methods too.')