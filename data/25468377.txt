Item(by='smiths1999', descendants=None, kids=[25469951], score=None, time=1608307556, title=None, item_type='comment', url=None, parent=25468089, text='Hmm - that is surprising since I specifically mention I work in industry (and have for quite some time).<p>It sounds from your post like you may do front-end work. I work primarily on distributed systems for machine learning, so I can&#x27;t speak to front-end work, but in my experience understanding basic data structures and algorithms is quite useful in day-to-day work. It is great you have gotten to where you are without doing technical interviews. On the other hand, every job interview I have had has had multiple rounds of technical interviews.<p>And I should also make clear that I am not saying become a competitive programmer or a Leetcode expert. For example, there isn&#x27;t much value in looking at dynamic programming style problems unless you are interviewing at a top company. But spending 30min to an hour a day on easy to medium level questions will definitely sharpen your reasoning about algorithms and data structures. And like I said, in my experience those are used very often in day to day work (at least on the backend side of things). Also, to clarify, I am not saying you should do this forever.<p>As an anecdotal example, I recently reviewed a PR that had a lot of complex if-else statements that was dramatically simplified through the use of a set. The updated code was easier to read as well as understand. When I pointed this out, the engineer agreed and understood what was going on. But their initial instinct was to use the one tool they knew: arrays and chains of if-else statements. This is the kind of skill I am getting at - knowing enough about your language, data structures, and algorithms to know when to use the tools in your toolbox.<p>I don&#x27;t think it is unreasonable to expect a software engineer to understand the difference between tree-based and hash-based data structures, when you should use arrays, and pros&#x2F;cons of linked lists, etc. Practicing this kind of stuff, which is very easy to do in Leetcode, is the fastest way to build this intuition (at least in my experience with distributed systems).<p>Edit: just wanted to add that understanding these things makes it extremely easy to reason about systems like Redis, memcached, Cassandra, Kafka, etc. If you understanding the basic, then you start having these moments of clairty thinking &quot;oh this is just a big hash table!&quot; etc.<p>Also, meant to add that thee repetition of Leetcode style questions is super valuable in learning the APIs of your language. Things like &quot;how do I create a hash table? how do I populate it? How do I check if it contains a key?&quot; This is all simple stuff but a lot of new grads aren&#x27;t as familiar with the APIs. It&#x27;s not a big deal, sure, but it is also an _incredibly_ easy way to stand out.')