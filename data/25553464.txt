Item(by='mikepurvis', descendants=None, kids=None, score=None, time=1609096622, title=None, item_type='comment', url=None, parent=25549388, text='I think for apt&#x2F;dpkg, the system definitely does benefit from decades of careful, thoughtful design— for example you&#x27;re pretty unlikely to come up with a version constraint between your packages which isn&#x27;t expressible using the existing Debian scheme. And when I look at various modernish packaging systems, I often see a lot of this thrown out as unneeded complexity, only to be cobbled back in later when it&#x27;s discovered how essential it really is (see for example Homebrew&#x27;s long transition from being a dirt simple wrapper around &quot;configure; make; make install&quot; to becoming a full binary package manager).<p>There&#x27;s also the ecosystem benefit of having loads of helpers and supplementary tooling applicable to the formats— even stuff like having first-class support in proprietary binary stores like Artifactory, vs Nix where it&#x27;s basically a shrug and &quot;well... it works with any WebDAV server, so take your pick I guess?&quot;<p>The main complaint I have overall with Apt is the reliance on postinstall scripts, which means that even if you download and extract your packages in parallelized blocks, you still have a long serialized step when every single package needs to spawn a shell and run arbitrary commands, even if in most cases, the commands actually originate from a semi-declarative format (debhelpers, either invoked explicitly from the rules file, or implicitly by the presence of a corresponding debian&#x2F;xyz file in the metadata). Anyway, if it were possible to somehow flag packages as atomic or configure-less, it might be possible to significantly speed up these operations, especially in environments like CI where you have everything mirrored in-network or possibly even on-machine so the overall install time is dominated by the package configure step.')