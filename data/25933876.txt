Item(by='KMag', descendants=None, kids=None, score=None, time=1611781249, title=None, item_type='comment', url=None, parent=25932210, text='These days, even a very cheap ARM core has enough horsepower to run ChaCha20 w&#x2F; Poly1305 over every packet plus one Curve25519 multiplication per subscriber every 24 hours, plus generating and signing one Curve25519 short-term Diffie-Hellman key every hour.<p>Using a shared symmetric ChaCha20 w&#x2F; Poly1305 key to encrypt and authenticate the client&#x27;s sign-on Curve255 exchange, you&#x27;d get a variety of usage modes for free without adding any special cases to the access point&#x27;s side of the protocol.<p>The basic use case is that your device knows the password, so it listens for the periodic SSID announcement with the signed short-term DH public key.  Your device then performs its side of the DH key agreement, and encrypts-and-MACs the public value with the password-derived key.  The access point decrypts your public DH value, completes key agreement, and uses the agreed key to encrypt your short session ID, its expiry time, and a 256-bit ChaCha20&#x2F;Poly1305 key[0] for the session, and send it back to your device.<p>In the case of temporarily granting access to a guest, the guest&#x27;s device would generate a public DH value and send it to you.  You&#x27;d then encrypt-and-MAC that exchange message and send it back to your friend&#x27;s device.  The friend&#x27;s device would then be able to forward the DH exchange to the access point and sign on once.  They&#x27;d have a session ID and encryption key that&#x27;s valid until expiry.<p>In the case of a coffee shop granting temporary access to a paying customer, the phone could put its ephemeral public DH value in a QR code, and the cash register could scan the QR code, encrypt-and-MAC the public DH parameter, and directly send the value to the access point, at which point the customer&#x27;s device could sniff and decrypt the sign-on message to learn its session ID and session key.<p>Each device gets its own session ID and session key, so they can&#x27;t eavesdrop on each other.<p>If Curve22519 ends up getting broken, an attacker would still need to break ChaCha20 or learn the password in order to grab session keys.  The client-side DH parameter still holds 252 bits of entropy (Curve25519&#x27;s cofactor is 8, so the generator generates a 2*252 subgroup), and computing an Elliptic curve logarithm on this value still requires first decrypting the ChaCha20-encrypted sign-on message.<p>You wouldn&#x27;t get perfect forward secrecy, but you would get forward secrecy through the timed key rotation of both the short-term DH keys and rotation of any symmetric keys used to avoid storing any per-session state in the access point.<p>[0] The session encryption key wouldn&#x27;t simply be the DH-agreed key in order to allow the access point to avoid keeping per-session state and instead derive session keys from session IDs using periodically rotating symmetric encryption keys known only to it.  The access point would need to guard against session IDs rolling over faster than they expired (and expiry would need to coincide with key rotation), but it&#x27;s a simple check.')