Item(by='popinman322', descendants=None, kids=None, score=None, time=1602411716, title=None, item_type='comment', url=None, parent=24744660, text='For large enough companies it can be a legitimate role; I know it exists inside Microsoft. There are multiple teams focused on build, test, release, and debugging infrastructure. I guess that&#x27;s the type of thing you need once you reach hundreds to thousands of teams. Not to mention the rich data you can collect on process across the company; it likely makes cross-referencing issues easier for those central teams.<p>I think it might be useful to have a team of DevOps Engineers that rotate between teams every 3-6 months, implementing build+test+release+live site tools &amp; infrastructure for their assigned team during each rotation, and then produce notes that get collected and merged across the DevOps Engineers (DOEs) across the company.<p>I think this could benefit a (large?) company in multiple ways:<p>- Because they rotate so frequently, they need to get off the ground quickly, they&#x27;ll end up producing useful documentation (&amp; keeping docs provided by the previous engineers up to date).<p>- Because they&#x27;re exposed to so many different archiectures&#x2F;stacks&#x2F;failure modes, they&#x27;ll gain a broader understanding of where the organization is. If you pool this knowledge across all DOEs you can find The Right Abstraction(TM) and build better tools. It&#x27;d also function as a health check across the organization: What teams need more assistance? What tools fail most often?<p>- Having to implement the same things for multiple teams will result in stronger automation and faster path for greenfield teams.<p>- If the DOEs have tight integration with build&#x2F;test&#x2F;release infrastructure teams, then they can work with those teams to improve tooling UX. What tools do we need? What tools does nobody use? The DOEs know from experience where the warts are.<p>As an extension, the infrastructure teams mentioned in the last point could also be formed out of a rotating roster of DOEs: they&#x27;re not always out helping other teams directly, but sometimes &quot;come home&quot; to build new tools &amp; services that address needs of other DOEs, needs that originated from work with other teams in the organization.<p>-- Separate idea --<p>I think the biggest concern people raise with DOE positions is that infrastructure work is finite: eventually it &quot;just works&quot; and no further work is necessary. I&#x27;d counter that the role of DOEs is to push customer-impacting incidents to 0 while maximizing productivity of other developers. It involves a mindset of &quot;Every incident that happens in production can be avoided.&quot;<p>--<p>Sorry, didn&#x27;t intend to write all of this. I&#x27;m open to opinions.')