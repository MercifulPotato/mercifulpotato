Item(by='gumby', descendants=None, kids=None, score=None, time=1603905760, title=None, item_type='comment', url=None, parent=24920207, text='&gt; I tried to understand the implementation of boost::intrusive_list once. Yikes.<p>To be fair library code, especially library code that&#x27;s supposed to run on a huge number of compilers and platforms, must include support for a ton of weirdo special cases which ultimately render it unreadable to someone not steeped in it.  It also has to handle weird corner cases most developers might not think of, either because it&#x27;s just a weird corner of the standard or because it might commonly be, say, embedded in some other structure or used in an unusual template expansion which would imply non-obvious constraints.  This BTW is true of any language.<p>By contrast: I wrote a small lock-protected container template used in a local code base.  It&#x27;s short, fast and easy to use.  Also easy to understand if you bother to read the code (but it&#x27;s so easy to use, why bother).  But there&#x27;s a huge tradeoff: it doesn&#x27;t act completely like a regular container; it only handles cases we care about in our code base and only works on the three compilers we care about.  There is zero interest in implementing a more general solution.  When this object doesn&#x27;t work, sometimes we extend it and sometimes we change the caller.<p>So which would be a better example to read?  I&#x27;d argue: neither.')